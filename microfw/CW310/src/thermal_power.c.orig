/*
 * temp_sensor.c
 *
 * Created: 3/15/2021 3:20:53 PM
 *  Author: adewa
 
 Thermal and power management
 */ 
#include <asf.h>
#include "CW310_platform.h"
#include "thermal_power.h"

#define MAX1617_I2C_ADDR 0x18
#define MAX1617_I2C TWI0

//TODO: SW_STATE (PB26) if low should high-z fpga pins (maybe interrupt?)

#if 0
#define TWI_SUCCESS              0
#define TWI_INVALID_ARGUMENT     1
#define TWI_ARBITRATION_LOST     2
#define TWI_NO_CHIP_FOUND        3
#define TWI_RECEIVE_OVERRUN      4
#define TWI_RECEIVE_NACK         5
#define TWI_SEND_OVERRUN         6
#define TWI_SEND_NACK            7
#define TWI_BUSY                 8
#define TWI_ERROR_TIMEOUT        9
#endif

#define MAX1617_KILL_TEMP 70
#define MAX1617_MAX_TEMP 60
#define MAX1617_FULL_FAN_TEMP 50
#define MAX1617_OFF_FAN_TEMP 35
void max1617_alert_handler(const uint32_t id, const uint32_t index);
void pgood_alert_handler(const uint32_t id, const uint32_t index);

int enable_switched_power(void)
{
	gpio_configure_pin(PIN_SAM_SWITCHED_PWR_ENABLE, PIN_SAM_SWITCHED_PWR_ENABLE_FLAGS);
	return 0;
}


int max1617_register_read(uint8_t reg_addr, int8_t *result)
{
	twi_package_t max_packet = {
		.addr = {reg_addr, 0x00, 0x00},
		.addr_length = 1,
		.chip = MAX1617_I2C_ADDR,
		.buffer = result,
		.length = 1	
	};
	return twi_master_read(MAX1617_I2C, &max_packet);
}

int max1617_register_write(uint8_t reg_addr, int8_t data)
{
	twi_package_t max_packet = {
		.addr = {reg_addr, 0x00, 0x00},
		.addr_length = 1,
		.chip = MAX1617_I2C_ADDR,
		.buffer = &data,
		.length = 1
	};
	return twi_master_write(MAX1617_I2C, &max_packet);
}

int power_init(void)
{
	//enable pio falling edge interrupt
	pmc_enable_periph_clk(ID_PIOC);
	pmc_enable_periph_clk(ID_PIOB);
	pio_configure_pin_group(PIN_PGOOD_VCCINT_PORT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIN_PGOOD_VCCINT_FLAGS);
	pio_handler_set(PIN_PGOOD_VCCINT_PORT, PIOC, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIO_IT_EDGE, pgood_alert_handler);
	pio_enable_interrupt(PIN_PGOOD_VCCINT_PORT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN);
	
	NVIC_DisableIRQ(PIOC_IRQn);
	NVIC_ClearPendingIRQ(PIOC_IRQn);
	NVIC_SetPriority(PIOC_IRQn, 8);
	NVIC_EnableIRQ(PIOC_IRQn);
	return 0;
}

int thermals_init(void)
{	
	// set conversion rate to 8Hz
	int rtn;
	
	rtn = max1617_register_write(0x0A, 0x07);
	if (rtn != TWI_SUCCESS)
		return rtn;
	
	// set alert temp to 80 deg C
	rtn = max1617_register_write(0x0B, 80);
	if (rtn != TWI_SUCCESS)
		return rtn;
	
	//setup pins (except I2C)
	gpio_configure_pin(PIN_TEMP_ALERT, PIN_TEMP_ALERT_FLAGS);
	pio_handler_set(PIN_TEMP_ALERT_PORT, PIOA, PIN_TEMP_ALERT_PIN, PIO_IT_FALL_EDGE, max1617_alert_handler);
	pio_enable_interrupt(PIOA, PIN_TEMP_ALERT_PIN);
	
	NVIC_EnableIRQ(PIOA_IRQn);
	
	gpio_configure_pin(PIN_TEMP_ERR_LED, PIN_TEMP_ERR_LED_FLAGS);
	gpio_configure_pin(PIN_TEMP_OK_LED, PIN_TEMP_OK_LED_FLAGS);
	gpio_configure_pin(PIN_FPGA_PWR_ENABLE, PIN_FPGA_PWR_ENABLE_FLAGS);
	
	return 0x01;
}

#define MAX_1617_REG_LOCAL	0
#define MAX_1617_REG_REMOTE 1

int8_t max1617_read_remote_temp(void)
{
	int8_t temp = 0;
<<<<<<< HEAD
	max1617_register_read(0x01, &temp);
=======
	max1617_register_read(MAX_1617_REG_REMOTE, &temp);
>>>>>>> df07f258fcac7835a7f9a5286d24bdfa0d2bca2d
	return temp;
}

//Do all 2s periodic max1617 things (mostly just read temp and go from there)
volatile bool power_killed = false;
int thermals_slow_tick(void)
{
	int8_t fpga_temp = 0;
	fpga_temp = max1617_read_remote_temp();
	
	static int last_fan_state = 0;
	
	if (fpga_temp == 0){
		fpga_temp = 200;
	}
		
	if (fpga_temp >= MAX1617_KILL_TEMP) {
		// kill power, blink red led, green off
		kill_fpga_power();
		power_killed = true;
		gpio_set_pin_low(PIN_TEMP_OK_LED);
		gpio_set_pin_high(PIN_TEMP_ERR_LED);
	} else if (fpga_temp >= MAX1617_MAX_TEMP) {
		if (!power_killed) {
			// red led on, green off, no power kill
		}
		gpio_set_pin_low(PIN_TEMP_OK_LED);
		gpio_set_pin_high(PIN_TEMP_ERR_LED);
	} else { // temp is okay
		gpio_set_pin_high(PIN_TEMP_OK_LED);
	}
	
	
	fpga_temp = min(MAX1617_FULL_FAN_TEMP, fpga_temp);
	fpga_temp = max(MAX1617_OFF_FAN_TEMP, fpga_temp);
	
	unsigned int fan_pwm = fpga_temp - MAX1617_OFF_FAN_TEMP;
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
	fan_pwm = min(100, fan_pwm);
	fan_pwm_set_duty_cycle(fan_pwm);
	
	return 0x00;
		
}

//blink LED for now
int thermals_fast_tick(void)
{
	if (power_killed) {
		// toggle red LED
		gpio_toggle_pin(PIN_TEMP_ERR_LED);
	}
	return 0x00;
}

//todo: this is usbc power ,not fpga power
void enable_fpga_power(void)
{
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
	
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_DATA_BUS_FLAG1);
	
	//TODO: this should high-z fpga pins as well
}

void kill_fpga_power(void)
{
	gpio_set_pin_high(PIN_FPGA_PWR_ENABLE);
	
	gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
	gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
	gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
	
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIN_EBI_DATA_BUS_FLAG1);
	gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_DATA_BUS_FLAG1);
}

void max1617_alert_handler(const uint32_t id, const uint32_t index)
{
	if ((id == ID_PIOA) && (index == PIO_PA16)) {
			// temp too high, kill power
			power_killed = true;
			kill_fpga_power();
	}
}

#define FAN_PWM_TIMER_CHANNEL 0
#define FAN_PWM_FREQ 1000

// Init FPGA Fan at 50% duty cycle
int fan_pwm_init(void)
{
	pmc_enable_periph_clk(ID_TC0);
	tc_init(TC0, FAN_PWM_TIMER_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_WAVE | TC_CMR_ACPA_SET | TC_CMR_ACPC_CLEAR | TC_CMR_CPCTRG);
		
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) / 128 / FAN_PWM_FREQ); // 178 here is frequency
	uint32_t ra = (100 - 50) * rc / 100; //50 here is duty cycle
		
	tc_write_rc(TC0, FAN_PWM_TIMER_CHANNEL, rc);
	tc_write_ra(TC0, FAN_PWM_TIMER_CHANNEL, ra);
		
	tc_start(TC0, FAN_PWM_TIMER_CHANNEL);
	return 0x00;
}

int fan_pwm_set_duty_cycle(uint8_t duty_cycle)
{
	uint32_t rc = (sysclk_get_peripheral_bus_hz(TC0) / 128 / FAN_PWM_FREQ); // 178 here is frequency
	uint32_t ra = (100 - duty_cycle) * rc / 100;
	
	tc_write_rc(TC0, FAN_PWM_TIMER_CHANNEL, rc);
	tc_write_ra(TC0, FAN_PWM_TIMER_CHANNEL, ra);
	
	return 0x00;
}

volatile uint8_t power_toggles = 0;
int pgood_tick(void)
{
	power_toggles = 0;
	return 0;
}

void pgood_alert_handler(const uint32_t id, const uint32_t index)
{
	power_toggles++;
}