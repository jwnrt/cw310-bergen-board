
CW310.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000decc  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008decc  0008decc  0001decc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00001678  20070000  0008ded4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001df8  20071678  0008f54c  00021678  2**2
                  ALLOC
  4 .stack        00001500  20073470  00091344  00021678  2**0
                  ALLOC
  5 .mpssemem     000000d0  20074970  00092844  00021678  2**2
                  ALLOC
  6 .ARM.attributes 00000029  00000000  00000000  00021678  2**0
                  CONTENTS, READONLY
  7 .comment      00000049  00000000  00000000  000216a1  2**0
                  CONTENTS, READONLY
  8 .debug_info   00024e31  00000000  00000000  000216ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_abbrev 00006cba  00000000  00000000  0004651b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_loc    00012277  00000000  00000000  0004d1d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00001518  00000000  00000000  0005f44c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00005dd0  00000000  00000000  00060964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000262ba  00000000  00000000  00066734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0002ff3a  00000000  00000000  0008c9ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    00075d8e  00000000  00000000  000bc928  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_frame  00004e1c  00000000  00000000  001326b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	70 49 07 20 15 48 08 00 11 48 08 00 11 48 08 00     pI. .H...H...H..
   80010:	11 48 08 00 11 48 08 00 11 48 08 00 00 00 00 00     .H...H...H......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 11 48 08 00     .............H..
   80030:	11 48 08 00 00 00 00 00 11 48 08 00 11 48 08 00     .H.......H...H..
   80040:	11 48 08 00 11 48 08 00 11 48 08 00 11 48 08 00     .H...H...H...H..
   80050:	11 48 08 00 11 48 08 00 11 48 08 00 11 48 08 00     .H...H...H...H..
   80060:	11 48 08 00 11 48 08 00 00 00 00 00 a5 41 08 00     .H...H.......A..
   80070:	b5 41 08 00 c5 41 08 00 d5 41 08 00 00 00 00 00     .A...A...A......
   80080:	00 00 00 00 1d 22 08 00 2d 22 08 00 11 48 08 00     ....."..-"...H..
   80090:	11 48 08 00 11 48 08 00 11 48 08 00 11 48 08 00     .H...H...H...H..
   800a0:	11 48 08 00 00 00 00 00 11 48 08 00 11 48 08 00     .H.......H...H..
   800b0:	09 14 08 00 11 48 08 00 11 48 08 00 11 48 08 00     .....H...H...H..
   800c0:	11 48 08 00 11 48 08 00 11 48 08 00 11 48 08 00     .H...H...H...H..
   800d0:	11 48 08 00 11 48 08 00 11 48 08 00 11 48 08 00     .H...H...H...H..
   800e0:	99 58 08 00 11 48 08 00 11 48 08 00 11 48 08 00     .X...H...H...H..
   800f0:	11 48 08 00                                         .H..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20071678 	.word	0x20071678
   80110:	00000000 	.word	0x00000000
   80114:	0008ded4 	.word	0x0008ded4

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b03      	ldr	r3, [pc, #12]	; (80128 <frame_dummy+0x10>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4903      	ldr	r1, [pc, #12]	; (8012c <frame_dummy+0x14>)
   80120:	4803      	ldr	r0, [pc, #12]	; (80130 <frame_dummy+0x18>)
   80122:	f3af 8000 	nop.w
   80126:	bd08      	pop	{r3, pc}
   80128:	00000000 	.word	0x00000000
   8012c:	2007167c 	.word	0x2007167c
   80130:	0008ded4 	.word	0x0008ded4

00080134 <cdce906_init>:

volatile uint8_t I2C_LOCK = 0;

/* Init the CDCE906 chip, set offline */
bool cdce906_init(void)
{
   80134:	b570      	push	{r4, r5, r6, lr}
	//gpio_configure_pin(PIN_CDCE_SDA, PIN_CDCE_SDA_FLAGS);
	//gpio_configure_pin(PIN_CDCE_SCL, PIN_CDCE_SCL_FLAGS);
	
	twi_master_options_t opt = {
   80136:	f24c 3250 	movw	r2, #50000	; 0xc350
   8013a:	2569      	movs	r5, #105	; 0x69
{
   8013c:	b08a      	sub	sp, #40	; 0x28
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
   8013e:	491c      	ldr	r1, [pc, #112]	; (801b0 <cdce906_init+0x7c>)
	twi_master_options_t opt = {
   80140:	e9cd 2503 	strd	r2, r5, [sp, #12]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80144:	4b1b      	ldr	r3, [pc, #108]	; (801b4 <cdce906_init+0x80>)
   80146:	2016      	movs	r0, #22
   80148:	9102      	str	r1, [sp, #8]
   8014a:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   8014c:	4b1a      	ldr	r3, [pc, #104]	; (801b8 <cdce906_init+0x84>)
   8014e:	481b      	ldr	r0, [pc, #108]	; (801bc <cdce906_init+0x88>)
   80150:	a902      	add	r1, sp, #8
   80152:	4798      	blx	r3
		.chip  = CDCE906_ADDR
	};
	
	twi_master_setup(TWI0, &opt);
	
	uint8_t data = 0;
   80154:	2000      	movs	r0, #0
	}
}

bool cdce906_read(uint8_t addr, uint8_t * data)
{
	if (I2C_LOCK) {
   80156:	4c1a      	ldr	r4, [pc, #104]	; (801c0 <cdce906_init+0x8c>)
	uint8_t data = 0;
   80158:	f88d 0007 	strb.w	r0, [sp, #7]
	if (I2C_LOCK) {
   8015c:	7823      	ldrb	r3, [r4, #0]
   8015e:	b10b      	cbz	r3, 80164 <cdce906_init+0x30>
}
   80160:	b00a      	add	sp, #40	; 0x28
   80162:	bd70      	pop	{r4, r5, r6, pc}
		return false;
	}
	I2C_LOCK = 1;
   80164:	f003 06ff 	and.w	r6, r3, #255	; 0xff
	twi_package_t packet_read = {
   80168:	2280      	movs	r2, #128	; 0x80
	I2C_LOCK = 1;
   8016a:	2301      	movs	r3, #1
	twi_package_t packet_read = {
   8016c:	9605      	str	r6, [sp, #20]
	I2C_LOCK = 1;
   8016e:	7023      	strb	r3, [r4, #0]
	twi_package_t packet_read = {
   80170:	f88d 2014 	strb.w	r2, [sp, #20]
   80174:	9306      	str	r3, [sp, #24]
   80176:	9308      	str	r3, [sp, #32]
   80178:	f10d 0207 	add.w	r2, sp, #7
		.chip         = CDCE906_ADDR,      // TWI slave bus address
		.buffer       = data,        // transfer data destination buffer
		.length       = 1,                    // transfer data size (bytes)
	};
	
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   8017c:	4b11      	ldr	r3, [pc, #68]	; (801c4 <cdce906_init+0x90>)
   8017e:	480f      	ldr	r0, [pc, #60]	; (801bc <cdce906_init+0x88>)
   80180:	a905      	add	r1, sp, #20
	twi_package_t packet_read = {
   80182:	9609      	str	r6, [sp, #36]	; 0x24
   80184:	9207      	str	r2, [sp, #28]
   80186:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   8018a:	4798      	blx	r3
   8018c:	4603      	mov	r3, r0
   8018e:	b118      	cbz	r0, 80198 <cdce906_init+0x64>
		return false;
   80190:	4630      	mov	r0, r6
		I2C_LOCK = 0;
		return 1;
	} else {
		I2C_LOCK = 0;
   80192:	7026      	strb	r6, [r4, #0]
}
   80194:	b00a      	add	sp, #40	; 0x28
   80196:	bd70      	pop	{r4, r5, r6, pc}
	if ((data & 0x0F) == 0x01){
   80198:	f89d 0007 	ldrb.w	r0, [sp, #7]
		I2C_LOCK = 0;
   8019c:	7023      	strb	r3, [r4, #0]
	if ((data & 0x0F) == 0x01){
   8019e:	f000 000f 	and.w	r0, r0, #15
   801a2:	f1a0 0001 	sub.w	r0, r0, #1
   801a6:	fab0 f080 	clz	r0, r0
   801aa:	0940      	lsrs	r0, r0, #5
}
   801ac:	b00a      	add	sp, #40	; 0x28
   801ae:	bd70      	pop	{r4, r5, r6, pc}
   801b0:	0501bd00 	.word	0x0501bd00
   801b4:	000843f1 	.word	0x000843f1
   801b8:	00084949 	.word	0x00084949
   801bc:	4008c000 	.word	0x4008c000
   801c0:	20071694 	.word	0x20071694
   801c4:	000849a1 	.word	0x000849a1

000801c8 <cdce906_write>:
{
   801c8:	b570      	push	{r4, r5, r6, lr}
	if (I2C_LOCK) {
   801ca:	4d14      	ldr	r5, [pc, #80]	; (8021c <cdce906_write+0x54>)
{
   801cc:	b088      	sub	sp, #32
	if (I2C_LOCK) {
   801ce:	782b      	ldrb	r3, [r5, #0]
{
   801d0:	f88d 1007 	strb.w	r1, [sp, #7]
	if (I2C_LOCK) {
   801d4:	b113      	cbz	r3, 801dc <cdce906_write+0x14>
		return false;
   801d6:	2000      	movs	r0, #0
}
   801d8:	b008      	add	sp, #32
   801da:	bd70      	pop	{r4, r5, r6, pc}
	I2C_LOCK = 1;
   801dc:	2401      	movs	r4, #1
	twi_package_t packet_write = {
   801de:	2269      	movs	r2, #105	; 0x69
   801e0:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   801e4:	f060 007f 	orn	r0, r0, #127	; 0x7f
   801e8:	f10d 0307 	add.w	r3, sp, #7
   801ec:	9603      	str	r6, [sp, #12]
   801ee:	9305      	str	r3, [sp, #20]
   801f0:	f88d 000c 	strb.w	r0, [sp, #12]
	if (twi_master_write(TWI0, &packet_write) == TWI_SUCCESS){
   801f4:	4b0a      	ldr	r3, [pc, #40]	; (80220 <cdce906_write+0x58>)
   801f6:	480b      	ldr	r0, [pc, #44]	; (80224 <cdce906_write+0x5c>)
   801f8:	a903      	add	r1, sp, #12
	twi_package_t packet_write = {
   801fa:	9607      	str	r6, [sp, #28]
	I2C_LOCK = 1;
   801fc:	702c      	strb	r4, [r5, #0]
	twi_package_t packet_write = {
   801fe:	9404      	str	r4, [sp, #16]
   80200:	9406      	str	r4, [sp, #24]
   80202:	f88d 201c 	strb.w	r2, [sp, #28]
	if (twi_master_write(TWI0, &packet_write) == TWI_SUCCESS){
   80206:	4798      	blx	r3
   80208:	4603      	mov	r3, r0
   8020a:	b918      	cbnz	r0, 80214 <cdce906_write+0x4c>
		return true;
   8020c:	4620      	mov	r0, r4
		I2C_LOCK = 0;
   8020e:	702b      	strb	r3, [r5, #0]
}
   80210:	b008      	add	sp, #32
   80212:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   80214:	4630      	mov	r0, r6
		I2C_LOCK = 0;
   80216:	702e      	strb	r6, [r5, #0]
}
   80218:	b008      	add	sp, #32
   8021a:	bd70      	pop	{r4, r5, r6, pc}
   8021c:	20071694 	.word	0x20071694
   80220:	00084a79 	.word	0x00084a79
   80224:	4008c000 	.word	0x4008c000

00080228 <cdce906_read>:
{
   80228:	b570      	push	{r4, r5, r6, lr}
	if (I2C_LOCK) {
   8022a:	4d12      	ldr	r5, [pc, #72]	; (80274 <cdce906_read+0x4c>)
{
   8022c:	b086      	sub	sp, #24
	if (I2C_LOCK) {
   8022e:	782b      	ldrb	r3, [r5, #0]
   80230:	b113      	cbz	r3, 80238 <cdce906_read+0x10>
		return false;
   80232:	2000      	movs	r0, #0
		return 0;
	}	
   80234:	b006      	add	sp, #24
   80236:	bd70      	pop	{r4, r5, r6, pc}
	I2C_LOCK = 1;
   80238:	2401      	movs	r4, #1
	twi_package_t packet_read = {
   8023a:	2269      	movs	r2, #105	; 0x69
   8023c:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   80240:	f060 007f 	orn	r0, r0, #127	; 0x7f
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   80244:	4b0c      	ldr	r3, [pc, #48]	; (80278 <cdce906_read+0x50>)
	twi_package_t packet_read = {
   80246:	9103      	str	r1, [sp, #12]
   80248:	9601      	str	r6, [sp, #4]
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   8024a:	a901      	add	r1, sp, #4
	twi_package_t packet_read = {
   8024c:	f88d 0004 	strb.w	r0, [sp, #4]
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   80250:	480a      	ldr	r0, [pc, #40]	; (8027c <cdce906_read+0x54>)
	twi_package_t packet_read = {
   80252:	9605      	str	r6, [sp, #20]
	I2C_LOCK = 1;
   80254:	702c      	strb	r4, [r5, #0]
	twi_package_t packet_read = {
   80256:	9402      	str	r4, [sp, #8]
   80258:	9404      	str	r4, [sp, #16]
   8025a:	f88d 2014 	strb.w	r2, [sp, #20]
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   8025e:	4798      	blx	r3
   80260:	4603      	mov	r3, r0
   80262:	b918      	cbnz	r0, 8026c <cdce906_read+0x44>
		return 1;
   80264:	4620      	mov	r0, r4
		I2C_LOCK = 0;
   80266:	702b      	strb	r3, [r5, #0]
   80268:	b006      	add	sp, #24
   8026a:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   8026c:	4630      	mov	r0, r6
		I2C_LOCK = 0;
   8026e:	702e      	strb	r6, [r5, #0]
   80270:	b006      	add	sp, #24
   80272:	bd70      	pop	{r4, r5, r6, pc}
   80274:	20071694 	.word	0x20071694
   80278:	000849a1 	.word	0x000849a1
   8027c:	4008c000 	.word	0x4008c000

00080280 <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
   80280:	2300      	movs	r3, #0
   80282:	6043      	str	r3, [r0, #4]
   80284:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
   80286:	6083      	str	r3, [r0, #8]
}
   80288:	4770      	bx	lr
   8028a:	bf00      	nop

0008028c <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   8028c:	b410      	push	{r4}
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   8028e:	6804      	ldr	r4, [r0, #0]
    newhead++;
   80290:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   80292:	2cc8      	cmp	r4, #200	; 0xc8
   80294:	bf28      	it	cs
   80296:	2400      	movcs	r4, #0
   80298:	e000      	b.n	8029c <add_to_circ_buf+0x10>
    while (newhead == cbuf->tail)
    {
        if (!block)
   8029a:	b142      	cbz	r2, 802ae <add_to_circ_buf+0x22>
    while (newhead == cbuf->tail)
   8029c:	6843      	ldr	r3, [r0, #4]
   8029e:	42a3      	cmp	r3, r4
   802a0:	d0fb      	beq.n	8029a <add_to_circ_buf+0xe>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   802a2:	6803      	ldr	r3, [r0, #0]
   802a4:	4403      	add	r3, r0
   802a6:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   802a8:	6004      	str	r4, [r0, #0]
}
   802aa:	bc10      	pop	{r4}
   802ac:	4770      	bx	lr
            cbuf->dropped++;
   802ae:	6883      	ldr	r3, [r0, #8]
}
   802b0:	bc10      	pop	{r4}
            cbuf->dropped++;
   802b2:	3301      	adds	r3, #1
   802b4:	6083      	str	r3, [r0, #8]
}
   802b6:	4770      	bx	lr

000802b8 <get_from_circ_buf>:
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   802b8:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];

    if (newtail == cbuf->head)
   802ba:	6801      	ldr	r1, [r0, #0]
{
   802bc:	4602      	mov	r2, r0
    if (newtail == cbuf->head)
   802be:	4299      	cmp	r1, r3
    uint8_t retval = cbuf->buf[newtail];
   802c0:	4418      	add	r0, r3
   802c2:	7b00      	ldrb	r0, [r0, #12]
    if (newtail == cbuf->head)
   802c4:	d005      	beq.n	802d2 <get_from_circ_buf+0x1a>
        return SERIAL_ERR;

    newtail++;
   802c6:	3301      	adds	r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   802c8:	2bc8      	cmp	r3, #200	; 0xc8
   802ca:	bf28      	it	cs
   802cc:	2300      	movcs	r3, #0
    cbuf->tail = newtail;
   802ce:	6053      	str	r3, [r2, #4]

    return retval;
   802d0:	4770      	bx	lr
        return SERIAL_ERR;
   802d2:	20ff      	movs	r0, #255	; 0xff
}
   802d4:	4770      	bx	lr
   802d6:	bf00      	nop

000802d8 <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   802d8:	6803      	ldr	r3, [r0, #0]
    return (head != cbuf->tail);
   802da:	6840      	ldr	r0, [r0, #4]
}
   802dc:	1ac0      	subs	r0, r0, r3
   802de:	bf18      	it	ne
   802e0:	2001      	movne	r0, #1
   802e2:	4770      	bx	lr

000802e4 <circ_buf_count>:
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

    count = cbuf->head;
   802e4:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
   802e6:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
   802e8:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
   802ea:	bf48      	it	mi
   802ec:	30c8      	addmi	r0, #200	; 0xc8
    return (unsigned int)count;
}
   802ee:	4770      	bx	lr

000802f0 <fpgaspi_program_init>:
#include "fpgaspi_program.h"
#include "spi.h"

/* FPGA Programming: Init pins - assumes FPGA already programmed to use these */
void fpgaspi_program_init(void)
{
   802f0:	b510      	push	{r4, lr}
	FPGASPI_CCLK_SETUP();
   802f2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   802f6:	4c0b      	ldr	r4, [pc, #44]	; (80324 <fpgaspi_program_init+0x34>)
   802f8:	2038      	movs	r0, #56	; 0x38
   802fa:	47a0      	blx	r4
	FPGASPI_DO_SETUP();
   802fc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80300:	2034      	movs	r0, #52	; 0x34
   80302:	47a0      	blx	r4
	FPGASPI_DI_SETUP();
   80304:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80308:	2034      	movs	r0, #52	; 0x34
   8030a:	47a0      	blx	r4
	FPGASPI_CS_SETUP();
   8030c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80310:	2035      	movs	r0, #53	; 0x35
   80312:	47a0      	blx	r4
	FPGASPI_CS_HIGH();
   80314:	2035      	movs	r0, #53	; 0x35
   80316:	4b04      	ldr	r3, [pc, #16]	; (80328 <fpgaspi_program_init+0x38>)
   80318:	4798      	blx	r3
	FPGASPI_CCLK_LOW();
}
   8031a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	FPGASPI_CCLK_LOW();
   8031e:	2038      	movs	r0, #56	; 0x38
   80320:	4b02      	ldr	r3, [pc, #8]	; (8032c <fpgaspi_program_init+0x3c>)
   80322:	4718      	bx	r3
   80324:	00084655 	.word	0x00084655
   80328:	000845f9 	.word	0x000845f9
   8032c:	00084615 	.word	0x00084615

00080330 <fpgaspi_cs_low>:


/* SPI CS Pin Low */
void fpgaspi_cs_low(void)
{
	FPGASPI_CS_LOW();
   80330:	2035      	movs	r0, #53	; 0x35
   80332:	4b01      	ldr	r3, [pc, #4]	; (80338 <fpgaspi_cs_low+0x8>)
   80334:	4718      	bx	r3
   80336:	bf00      	nop
   80338:	00084615 	.word	0x00084615

0008033c <fpgaspi_cs_high>:
}

/* SPI CS Pin High */
void fpgaspi_cs_high(void)
{
	FPGASPI_CS_HIGH();
   8033c:	2035      	movs	r0, #53	; 0x35
   8033e:	4b01      	ldr	r3, [pc, #4]	; (80344 <fpgaspi_cs_high+0x8>)
   80340:	4718      	bx	r3
   80342:	bf00      	nop
   80344:	000845f9 	.word	0x000845f9

00080348 <fpgaspi_xferbyte>:
}


/* SPI data byte transfer */
uint8_t fpgaspi_xferbyte(uint8_t databyte)
{
   80348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8034c:	2608      	movs	r6, #8
	uint8_t result = 0;
   8034e:	2400      	movs	r4, #0
{
   80350:	4605      	mov	r5, r0

	for(unsigned int i=0; i < 8; i++){	
   80352:	f8df 9054 	ldr.w	r9, [pc, #84]	; 803a8 <fpgaspi_xferbyte+0x60>
   80356:	4f15      	ldr	r7, [pc, #84]	; (803ac <fpgaspi_xferbyte+0x64>)
   80358:	f8df 8054 	ldr.w	r8, [pc, #84]	; 803b0 <fpgaspi_xferbyte+0x68>
   8035c:	e008      	b.n	80370 <fpgaspi_xferbyte+0x28>
		FPGASPI_CCLK_LOW();

		if (databyte & 0x80){
			FPGASPI_DO_HIGH();
			} else {
			FPGASPI_DO_LOW();
   8035e:	47b8      	blx	r7
		}
		
		FPGASPI_CCLK_HIGH();
   80360:	2038      	movs	r0, #56	; 0x38
   80362:	47c0      	blx	r8
		databyte = databyte << 1;
   80364:	006d      	lsls	r5, r5, #1
		result = result << 1;
   80366:	0064      	lsls	r4, r4, #1
	for(unsigned int i=0; i < 8; i++){	
   80368:	3e01      	subs	r6, #1
		databyte = databyte << 1;
   8036a:	b2ed      	uxtb	r5, r5
		result = result << 1;
   8036c:	b2e4      	uxtb	r4, r4
	for(unsigned int i=0; i < 8; i++){	
   8036e:	d00e      	beq.n	8038e <fpgaspi_xferbyte+0x46>
		result |= FPGASPI_DI_STATUS() ? (1) : 0;
   80370:	2034      	movs	r0, #52	; 0x34
   80372:	47c8      	blx	r9
   80374:	4603      	mov	r3, r0
		FPGASPI_CCLK_LOW();
   80376:	2038      	movs	r0, #56	; 0x38
		result |= FPGASPI_DI_STATUS() ? (1) : 0;
   80378:	2b00      	cmp	r3, #0
   8037a:	bf18      	it	ne
   8037c:	f044 0401 	orrne.w	r4, r4, #1
		FPGASPI_CCLK_LOW();
   80380:	47b8      	blx	r7
		if (databyte & 0x80){
   80382:	062b      	lsls	r3, r5, #24
			FPGASPI_DO_HIGH();
   80384:	f04f 0034 	mov.w	r0, #52	; 0x34
		if (databyte & 0x80){
   80388:	d5e9      	bpl.n	8035e <fpgaspi_xferbyte+0x16>
			FPGASPI_DO_HIGH();
   8038a:	47c0      	blx	r8
   8038c:	e7e8      	b.n	80360 <fpgaspi_xferbyte+0x18>
	}

	result |= FPGASPI_DI_STATUS() ? (1) : 0;
   8038e:	2034      	movs	r0, #52	; 0x34
   80390:	47c8      	blx	r9
   80392:	4603      	mov	r3, r0
   80394:	2b00      	cmp	r3, #0
   80396:	bf18      	it	ne
   80398:	f044 0401 	orrne.w	r4, r4, #1

	FPGASPI_CCLK_LOW();
   8039c:	2038      	movs	r0, #56	; 0x38
	result |= FPGASPI_DI_STATUS() ? (1) : 0;
   8039e:	b264      	sxtb	r4, r4
	FPGASPI_CCLK_LOW();
   803a0:	47b8      	blx	r7

	return result;
}
   803a2:	b2e0      	uxtb	r0, r4
   803a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   803a8:	000845dd 	.word	0x000845dd
   803ac:	00084615 	.word	0x00084615
   803b0:	000845f9 	.word	0x000845f9

000803b4 <fpgaspi_program_deinit>:


void fpgaspi_program_deinit(void)
{
   803b4:	b510      	push	{r4, lr}
	FPGASPI_CCLK_RELEASE();
   803b6:	2100      	movs	r1, #0
   803b8:	4c05      	ldr	r4, [pc, #20]	; (803d0 <fpgaspi_program_deinit+0x1c>)
   803ba:	2038      	movs	r0, #56	; 0x38
   803bc:	47a0      	blx	r4
	FPGASPI_DO_RELEASE();
   803be:	2100      	movs	r1, #0
   803c0:	2034      	movs	r0, #52	; 0x34
   803c2:	47a0      	blx	r4
	FPGASPI_CS_RELEASE();
   803c4:	4623      	mov	r3, r4
   803c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	FPGASPI_CS_RELEASE();
   803ca:	2100      	movs	r1, #0
   803cc:	2035      	movs	r0, #53	; 0x35
   803ce:	4718      	bx	r3
   803d0:	00084655 	.word	0x00084655

000803d4 <spi1util_init>:
int pin_spi1_sck = -1;
int pin_spi1_cs = -1;

/* FPGA Programming: Init pins - assumes FPGA already programmed to use these */
void spi1util_init(void)
{
   803d4:	b510      	push	{r4, lr}
    /* IO setup is done when IO pins are configured right now */
	gpio_set_pin_high(pin_spi1_cs);
   803d6:	4a05      	ldr	r2, [pc, #20]	; (803ec <spi1util_init+0x18>)
   803d8:	4b05      	ldr	r3, [pc, #20]	; (803f0 <spi1util_init+0x1c>)
   803da:	6810      	ldr	r0, [r2, #0]
   803dc:	4798      	blx	r3
	gpio_set_pin_low(pin_spi1_sck);
}
   803de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gpio_set_pin_low(pin_spi1_sck);
   803e2:	4a04      	ldr	r2, [pc, #16]	; (803f4 <spi1util_init+0x20>)
   803e4:	4b04      	ldr	r3, [pc, #16]	; (803f8 <spi1util_init+0x24>)
   803e6:	6810      	ldr	r0, [r2, #0]
   803e8:	4718      	bx	r3
   803ea:	bf00      	nop
   803ec:	200701c0 	.word	0x200701c0
   803f0:	000845f9 	.word	0x000845f9
   803f4:	200701cc 	.word	0x200701cc
   803f8:	00084615 	.word	0x00084615

000803fc <spi1util_cs_low>:

/* SPI CS Pin Low */
void spi1util_cs_low(void)
{
	gpio_set_pin_low(pin_spi1_cs);
   803fc:	4a01      	ldr	r2, [pc, #4]	; (80404 <spi1util_cs_low+0x8>)
   803fe:	4b02      	ldr	r3, [pc, #8]	; (80408 <spi1util_cs_low+0xc>)
   80400:	6810      	ldr	r0, [r2, #0]
   80402:	4718      	bx	r3
   80404:	200701c0 	.word	0x200701c0
   80408:	00084615 	.word	0x00084615

0008040c <spi1util_cs_high>:
}

/* SPI CS Pin High */
void spi1util_cs_high(void)
{
	gpio_set_pin_high(pin_spi1_cs);
   8040c:	4a01      	ldr	r2, [pc, #4]	; (80414 <spi1util_cs_high+0x8>)
   8040e:	4b02      	ldr	r3, [pc, #8]	; (80418 <spi1util_cs_high+0xc>)
   80410:	6810      	ldr	r0, [r2, #0]
   80412:	4718      	bx	r3
   80414:	200701c0 	.word	0x200701c0
   80418:	000845f9 	.word	0x000845f9

0008041c <spi1util_xferbyte>:
}

/* SPI data byte transfer */
uint8_t spi1util_xferbyte(uint8_t databyte)
{
   8041c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80420:	2608      	movs	r6, #8
	uint8_t result = 0;
   80422:	2400      	movs	r4, #0
{
   80424:	4605      	mov	r5, r0

	for(unsigned int i=0; i < 8; i++){	
   80426:	f8df b064 	ldr.w	fp, [pc, #100]	; 8048c <spi1util_xferbyte+0x70>
   8042a:	4f19      	ldr	r7, [pc, #100]	; (80490 <spi1util_xferbyte+0x74>)
   8042c:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80494 <spi1util_xferbyte+0x78>
   80430:	f8df a064 	ldr.w	sl, [pc, #100]	; 80498 <spi1util_xferbyte+0x7c>
   80434:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8049c <spi1util_xferbyte+0x80>
   80438:	e008      	b.n	8044c <spi1util_xferbyte+0x30>
		gpio_set_pin_low(pin_spi1_sck);

		if (databyte & 0x80){
			gpio_set_pin_high(pin_spi1_mosi);
			} else {
			gpio_set_pin_low(pin_spi1_mosi);
   8043a:	47c0      	blx	r8
		}
		
		gpio_set_pin_high(pin_spi1_sck);
   8043c:	6838      	ldr	r0, [r7, #0]
   8043e:	47c8      	blx	r9
		databyte = databyte << 1;
   80440:	006d      	lsls	r5, r5, #1
		result = result << 1;
   80442:	0064      	lsls	r4, r4, #1
	for(unsigned int i=0; i < 8; i++){	
   80444:	3e01      	subs	r6, #1
		databyte = databyte << 1;
   80446:	b2ed      	uxtb	r5, r5
		result = result << 1;
   80448:	b2e4      	uxtb	r4, r4
	for(unsigned int i=0; i < 8; i++){	
   8044a:	d010      	beq.n	8046e <spi1util_xferbyte+0x52>
		result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   8044c:	4b14      	ldr	r3, [pc, #80]	; (804a0 <spi1util_xferbyte+0x84>)
   8044e:	f8db 0000 	ldr.w	r0, [fp]
   80452:	4798      	blx	r3
   80454:	4603      	mov	r3, r0
		gpio_set_pin_low(pin_spi1_sck);
   80456:	6838      	ldr	r0, [r7, #0]
		result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80458:	2b00      	cmp	r3, #0
   8045a:	bf18      	it	ne
   8045c:	f044 0401 	orrne.w	r4, r4, #1
		gpio_set_pin_low(pin_spi1_sck);
   80460:	47c0      	blx	r8
		if (databyte & 0x80){
   80462:	062b      	lsls	r3, r5, #24
			gpio_set_pin_high(pin_spi1_mosi);
   80464:	f8da 0000 	ldr.w	r0, [sl]
		if (databyte & 0x80){
   80468:	d5e7      	bpl.n	8043a <spi1util_xferbyte+0x1e>
			gpio_set_pin_high(pin_spi1_mosi);
   8046a:	47c8      	blx	r9
   8046c:	e7e6      	b.n	8043c <spi1util_xferbyte+0x20>
	}

	result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   8046e:	f8db 0000 	ldr.w	r0, [fp]
   80472:	4b0b      	ldr	r3, [pc, #44]	; (804a0 <spi1util_xferbyte+0x84>)
   80474:	4798      	blx	r3
   80476:	4603      	mov	r3, r0
   80478:	2b00      	cmp	r3, #0
   8047a:	bf18      	it	ne
   8047c:	f044 0401 	orrne.w	r4, r4, #1

	gpio_set_pin_low(pin_spi1_sck);
   80480:	6838      	ldr	r0, [r7, #0]
	result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80482:	b264      	sxtb	r4, r4
	gpio_set_pin_low(pin_spi1_sck);
   80484:	47c0      	blx	r8

	return result;
}
   80486:	b2e0      	uxtb	r0, r4
   80488:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8048c:	200701c4 	.word	0x200701c4
   80490:	200701cc 	.word	0x200701cc
   80494:	00084615 	.word	0x00084615
   80498:	200701c8 	.word	0x200701c8
   8049c:	000845f9 	.word	0x000845f9
   804a0:	000845dd 	.word	0x000845dd

000804a4 <spi1util_deinit>:


void spi1util_deinit(void)
{
	/* IO setup is done when IO pins are configured right now */
   804a4:	4770      	bx	lr
   804a6:	bf00      	nop

000804a8 <fpga_pins>:
int usb_pd_soft_reset(void);
void usb_pwr_setup(void);
void check_power_state(void);

void fpga_pins(bool enabled)
{
   804a8:	b570      	push	{r4, r5, r6, lr}
   804aa:	4605      	mov	r5, r0

	gpio_configure_pin(PIN_FPGA_DONE_GPIO, PIN_FPGA_DONE_FLAGS);
   804ac:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   804b0:	2031      	movs	r0, #49	; 0x31
   804b2:	4c98      	ldr	r4, [pc, #608]	; (80714 <fpga_pins+0x26c>)
   804b4:	47a0      	blx	r4
	
	//gpio_configure_pin(PIO_PB22_IDX, PIO_OUTPUT_0);
	//gpio_configure_pin(PIO_PB18_IDX, PIO_OUTPUT_0);	
	
	if (enabled){
   804b6:	2d00      	cmp	r5, #0
   804b8:	f000 8087 	beq.w	805ca <fpga_pins+0x122>
		#ifdef CONF_BOARD_PCK0
		gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   804bc:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   804c0:	2036      	movs	r0, #54	; 0x36
   804c2:	47a0      	blx	r4
		#ifdef CONF_BOARD_PCK1
		gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
		#endif
		
		
		gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   804c4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804c8:	200a      	movs	r0, #10
   804ca:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   804cc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804d0:	200b      	movs	r0, #11
   804d2:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART1_RXD, PIN_USART1_RXD_FLAGS);
   804d4:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804d8:	200c      	movs	r0, #12
   804da:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART1_TXD, PIN_USART1_TXD_FLAGS);
   804dc:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   804e0:	200d      	movs	r0, #13
   804e2:	47a0      	blx	r4
		
		gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   804e4:	498c      	ldr	r1, [pc, #560]	; (80718 <fpga_pins+0x270>)
   804e6:	2042      	movs	r0, #66	; 0x42
   804e8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   804ea:	498b      	ldr	r1, [pc, #556]	; (80718 <fpga_pins+0x270>)
   804ec:	2043      	movs	r0, #67	; 0x43
   804ee:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   804f0:	4989      	ldr	r1, [pc, #548]	; (80718 <fpga_pins+0x270>)
   804f2:	2044      	movs	r0, #68	; 0x44
   804f4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   804f6:	4988      	ldr	r1, [pc, #544]	; (80718 <fpga_pins+0x270>)
   804f8:	2045      	movs	r0, #69	; 0x45
   804fa:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   804fc:	4986      	ldr	r1, [pc, #536]	; (80718 <fpga_pins+0x270>)
   804fe:	2046      	movs	r0, #70	; 0x46
   80500:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   80502:	4985      	ldr	r1, [pc, #532]	; (80718 <fpga_pins+0x270>)
   80504:	2047      	movs	r0, #71	; 0x47
   80506:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   80508:	4983      	ldr	r1, [pc, #524]	; (80718 <fpga_pins+0x270>)
   8050a:	2048      	movs	r0, #72	; 0x48
   8050c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   8050e:	4982      	ldr	r1, [pc, #520]	; (80718 <fpga_pins+0x270>)
   80510:	2049      	movs	r0, #73	; 0x49
   80512:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   80514:	4981      	ldr	r1, [pc, #516]	; (8071c <fpga_pins+0x274>)
   80516:	201d      	movs	r0, #29
   80518:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   8051a:	497f      	ldr	r1, [pc, #508]	; (80718 <fpga_pins+0x270>)
   8051c:	2052      	movs	r0, #82	; 0x52
   8051e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   80520:	497e      	ldr	r1, [pc, #504]	; (8071c <fpga_pins+0x274>)
   80522:	2006      	movs	r0, #6
   80524:	47a0      	blx	r4
			
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIN_EBI_DATA_BUS_FLAG1);
   80526:	497c      	ldr	r1, [pc, #496]	; (80718 <fpga_pins+0x270>)
   80528:	2055      	movs	r0, #85	; 0x55
   8052a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIN_EBI_DATA_BUS_FLAG1);
   8052c:	497a      	ldr	r1, [pc, #488]	; (80718 <fpga_pins+0x270>)
   8052e:	2056      	movs	r0, #86	; 0x56
   80530:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIN_EBI_DATA_BUS_FLAG1);
   80532:	4979      	ldr	r1, [pc, #484]	; (80718 <fpga_pins+0x270>)
   80534:	2057      	movs	r0, #87	; 0x57
   80536:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIN_EBI_DATA_BUS_FLAG1);
   80538:	4977      	ldr	r1, [pc, #476]	; (80718 <fpga_pins+0x270>)
   8053a:	2058      	movs	r0, #88	; 0x58
   8053c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIN_EBI_DATA_BUS_FLAG1);
   8053e:	4976      	ldr	r1, [pc, #472]	; (80718 <fpga_pins+0x270>)
   80540:	2059      	movs	r0, #89	; 0x59
   80542:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIN_EBI_DATA_BUS_FLAG1);
   80544:	4974      	ldr	r1, [pc, #464]	; (80718 <fpga_pins+0x270>)
   80546:	205a      	movs	r0, #90	; 0x5a
   80548:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIN_EBI_DATA_BUS_FLAG1);
   8054a:	4973      	ldr	r1, [pc, #460]	; (80718 <fpga_pins+0x270>)
   8054c:	205b      	movs	r0, #91	; 0x5b
   8054e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIN_EBI_DATA_BUS_FLAG1);
   80550:	4971      	ldr	r1, [pc, #452]	; (80718 <fpga_pins+0x270>)
   80552:	205c      	movs	r0, #92	; 0x5c
   80554:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIN_EBI_DATA_BUS_FLAG1);
   80556:	4970      	ldr	r1, [pc, #448]	; (80718 <fpga_pins+0x270>)
   80558:	205d      	movs	r0, #93	; 0x5d
   8055a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIN_EBI_DATA_BUS_FLAG1);
   8055c:	496e      	ldr	r1, [pc, #440]	; (80718 <fpga_pins+0x270>)
   8055e:	205e      	movs	r0, #94	; 0x5e
   80560:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIN_EBI_DATA_BUS_FLAG1);
   80562:	496d      	ldr	r1, [pc, #436]	; (80718 <fpga_pins+0x270>)
   80564:	2060      	movs	r0, #96	; 0x60
   80566:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIN_EBI_DATA_BUS_FLAG1);
   80568:	496b      	ldr	r1, [pc, #428]	; (80718 <fpga_pins+0x270>)
   8056a:	2061      	movs	r0, #97	; 0x61
   8056c:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIN_EBI_DATA_BUS_FLAG1);
   8056e:	496a      	ldr	r1, [pc, #424]	; (80718 <fpga_pins+0x270>)
   80570:	2062      	movs	r0, #98	; 0x62
   80572:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIN_EBI_DATA_BUS_FLAG1);
   80574:	4968      	ldr	r1, [pc, #416]	; (80718 <fpga_pins+0x270>)
   80576:	2063      	movs	r0, #99	; 0x63
   80578:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIN_EBI_DATA_BUS_FLAG1);
   8057a:	4967      	ldr	r1, [pc, #412]	; (80718 <fpga_pins+0x270>)
   8057c:	2064      	movs	r0, #100	; 0x64
   8057e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIN_EBI_DATA_BUS_FLAG1);
   80580:	4965      	ldr	r1, [pc, #404]	; (80718 <fpga_pins+0x270>)
   80582:	2065      	movs	r0, #101	; 0x65
   80584:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIN_EBI_DATA_BUS_FLAG1);
   80586:	4964      	ldr	r1, [pc, #400]	; (80718 <fpga_pins+0x270>)
   80588:	2066      	movs	r0, #102	; 0x66
   8058a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIN_EBI_DATA_BUS_FLAG1);
   8058c:	4962      	ldr	r1, [pc, #392]	; (80718 <fpga_pins+0x270>)
   8058e:	2067      	movs	r0, #103	; 0x67
   80590:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIN_EBI_DATA_BUS_FLAG1);
   80592:	4961      	ldr	r1, [pc, #388]	; (80718 <fpga_pins+0x270>)
   80594:	2068      	movs	r0, #104	; 0x68
   80596:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_DATA_BUS_FLAG1);
   80598:	495f      	ldr	r1, [pc, #380]	; (80718 <fpga_pins+0x270>)
   8059a:	2069      	movs	r0, #105	; 0x69
   8059c:	47a0      	blx	r4
		//gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_DATA_BUS_FLAG1); /* TODO: Add ADDR20 back */
		
		
		/* FPGA Programming pins */
		FPGA_NPROG_SETUP();
   8059e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805a2:	2033      	movs	r0, #51	; 0x33
   805a4:	47a0      	blx	r4
		FPGA_NPROG_HIGH();		
   805a6:	2033      	movs	r0, #51	; 0x33
   805a8:	4b5d      	ldr	r3, [pc, #372]	; (80720 <fpga_pins+0x278>)
   805aa:	4798      	blx	r3
		//gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
		//gpio_set_pin_high(FPGA_ALE_GPIO);
			
		//Force FPGA trigger
		
		gpio_configure_pin(FPGA_TRIGGER_GPIO, FPGA_TRIGGER_FLAGS);
   805ac:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   805b0:	204d      	movs	r0, #77	; 0x4d
   805b2:	47a0      	blx	r4
		
		gpio_configure_pin(PIN_FPGA_PROGRAM_GPIO, PIN_FPGA_PROGRAM_FLAGS);
   805b4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805b8:	2033      	movs	r0, #51	; 0x33
   805ba:	47a0      	blx	r4
		gpio_configure_pin(SPI_MISO_GPIO, PIO_INPUT); /* TODO: Add back */
		gpio_configure_pin(SPI_MOSI_GPIO, PIO_INPUT); /* TODO: Add back */
		gpio_configure_pin(SPI_SPCK_GPIO, PIO_INPUT); /* TODO: Add back */
	}
	
	gpio_configure_pin(PIN_FPGA_DONE_GPIO, PIN_FPGA_DONE_FLAGS);
   805bc:	4623      	mov	r3, r4
	
}
   805be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	gpio_configure_pin(PIN_FPGA_DONE_GPIO, PIN_FPGA_DONE_FLAGS);
   805c2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   805c6:	2031      	movs	r0, #49	; 0x31
   805c8:	4718      	bx	r3
		gpio_configure_pin(PIN_PCK0, PIO_INPUT);
   805ca:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   805ce:	2036      	movs	r0, #54	; 0x36
   805d0:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART0_RXD, PIO_INPUT);
   805d2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   805d6:	200a      	movs	r0, #10
   805d8:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART0_TXD, PIO_INPUT);
   805da:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   805de:	200b      	movs	r0, #11
   805e0:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART1_RXD, PIO_INPUT);
   805e2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   805e6:	200c      	movs	r0, #12
   805e8:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART1_TXD, PIO_INPUT);
   805ea:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   805ee:	200d      	movs	r0, #13
   805f0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIO_INPUT);
   805f2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   805f6:	2042      	movs	r0, #66	; 0x42
   805f8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIO_INPUT);
   805fa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   805fe:	2043      	movs	r0, #67	; 0x43
   80600:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIO_INPUT);
   80602:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80606:	2044      	movs	r0, #68	; 0x44
   80608:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIO_INPUT);
   8060a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8060e:	2045      	movs	r0, #69	; 0x45
   80610:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIO_INPUT);
   80612:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80616:	2046      	movs	r0, #70	; 0x46
   80618:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIO_INPUT);
   8061a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8061e:	2047      	movs	r0, #71	; 0x47
   80620:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIO_INPUT);
   80622:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80626:	2048      	movs	r0, #72	; 0x48
   80628:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIO_INPUT);
   8062a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8062e:	2049      	movs	r0, #73	; 0x49
   80630:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NRD, PIO_INPUT);
   80632:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80636:	201d      	movs	r0, #29
   80638:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NWE, PIO_INPUT);
   8063a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8063e:	2052      	movs	r0, #82	; 0x52
   80640:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NCS0, PIO_INPUT);
   80642:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80646:	2006      	movs	r0, #6
   80648:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A0, PIO_INPUT);
   8064a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8064e:	2055      	movs	r0, #85	; 0x55
   80650:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A1, PIO_INPUT);
   80652:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80656:	2056      	movs	r0, #86	; 0x56
   80658:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A2, PIO_INPUT);
   8065a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8065e:	2057      	movs	r0, #87	; 0x57
   80660:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A3, PIO_INPUT);
   80662:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80666:	2058      	movs	r0, #88	; 0x58
   80668:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A4, PIO_INPUT);
   8066a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8066e:	2059      	movs	r0, #89	; 0x59
   80670:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A5, PIO_INPUT);
   80672:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80676:	205a      	movs	r0, #90	; 0x5a
   80678:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A6, PIO_INPUT);
   8067a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8067e:	205b      	movs	r0, #91	; 0x5b
   80680:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A7, PIO_INPUT);
   80682:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80686:	205c      	movs	r0, #92	; 0x5c
   80688:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A8, PIO_INPUT);
   8068a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8068e:	205d      	movs	r0, #93	; 0x5d
   80690:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A9, PIO_INPUT);
   80692:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80696:	205e      	movs	r0, #94	; 0x5e
   80698:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A10, PIO_INPUT);
   8069a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8069e:	2060      	movs	r0, #96	; 0x60
   806a0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A11, PIO_INPUT);
   806a2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   806a6:	2061      	movs	r0, #97	; 0x61
   806a8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A12, PIO_INPUT);
   806aa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   806ae:	2062      	movs	r0, #98	; 0x62
   806b0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A13, PIO_INPUT);
   806b2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   806b6:	2063      	movs	r0, #99	; 0x63
   806b8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A14, PIO_INPUT);
   806ba:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   806be:	2064      	movs	r0, #100	; 0x64
   806c0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A15, PIO_INPUT);
   806c2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   806c6:	2065      	movs	r0, #101	; 0x65
   806c8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A16, PIO_INPUT);
   806ca:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   806ce:	2066      	movs	r0, #102	; 0x66
   806d0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A17, PIO_INPUT);
   806d2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   806d6:	2067      	movs	r0, #103	; 0x67
   806d8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A18, PIO_INPUT);
   806da:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   806de:	2068      	movs	r0, #104	; 0x68
   806e0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIO_INPUT);
   806e2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   806e6:	2069      	movs	r0, #105	; 0x69
   806e8:	47a0      	blx	r4
		gpio_configure_pin(FPGA_TRIGGER_GPIO, PIO_INPUT);
   806ea:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   806ee:	204d      	movs	r0, #77	; 0x4d
   806f0:	47a0      	blx	r4
		gpio_configure_pin(PIN_FPGA_PROGRAM_GPIO, PIO_INPUT);
   806f2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   806f6:	2033      	movs	r0, #51	; 0x33
   806f8:	47a0      	blx	r4
		gpio_configure_pin(SPI_MISO_GPIO, PIO_INPUT); /* TODO: Add back */
   806fa:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   806fe:	2035      	movs	r0, #53	; 0x35
   80700:	47a0      	blx	r4
		gpio_configure_pin(SPI_MOSI_GPIO, PIO_INPUT); /* TODO: Add back */
   80702:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80706:	2034      	movs	r0, #52	; 0x34
   80708:	47a0      	blx	r4
		gpio_configure_pin(SPI_SPCK_GPIO, PIO_INPUT); /* TODO: Add back */
   8070a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8070e:	2038      	movs	r0, #56	; 0x38
   80710:	47a0      	blx	r4
   80712:	e753      	b.n	805bc <fpga_pins+0x114>
   80714:	00084655 	.word	0x00084655
   80718:	08000001 	.word	0x08000001
   8071c:	10000001 	.word	0x10000001
   80720:	000845f9 	.word	0x000845f9

00080724 <usb_pwr_setup>:

/*
Setup st USBC power chip to accept 20V 5A, 
*/
void usb_pwr_setup()
{// set pdo2 to 20V
   80724:	b5f0      	push	{r4, r5, r6, r7, lr}
	//starts from 0 address?
	uint32_t req_voltage = 1; //(12/0.05);
	uint8_t status[10] = {0};
	twi_package_t packet_begin = {
   80726:	4e28      	ldr	r6, [pc, #160]	; (807c8 <usb_pwr_setup+0xa4>)
{// set pdo2 to 20V
   80728:	b08f      	sub	sp, #60	; 0x3c
	twi_package_t packet_begin = {
   8072a:	6833      	ldr	r3, [r6, #0]
	uint8_t status[10] = {0};
   8072c:	2200      	movs	r2, #0
	twi_package_t packet_begin = {
   8072e:	f8ad 3010 	strh.w	r3, [sp, #16]
   80732:	0c1b      	lsrs	r3, r3, #16
   80734:	f88d 3012 	strb.w	r3, [sp, #18]
   80738:	ab01      	add	r3, sp, #4
   8073a:	9306      	str	r3, [sp, #24]
   8073c:	230a      	movs	r3, #10
	uint32_t req_voltage = 1; //(12/0.05);
   8073e:	2401      	movs	r4, #1
	twi_package_t packet_begin = {
   80740:	2128      	movs	r1, #40	; 0x28
			.addr_length = 1,
			.chip = 0x28,
			.buffer = status,
			.length = 10
	};
	if (I2C_LOCK)
   80742:	4d22      	ldr	r5, [pc, #136]	; (807cc <usb_pwr_setup+0xa8>)
	twi_package_t packet_begin = {
   80744:	9307      	str	r3, [sp, #28]
	if (I2C_LOCK)
   80746:	782b      	ldrb	r3, [r5, #0]
	uint8_t status[10] = {0};
   80748:	e9cd 4200 	strd	r4, r2, [sp]
	twi_package_t packet_begin = {
   8074c:	f88d 1020 	strb.w	r1, [sp, #32]
	uint8_t status[10] = {0};
   80750:	9202      	str	r2, [sp, #8]
	twi_package_t packet_begin = {
   80752:	9405      	str	r4, [sp, #20]
	uint8_t status[10] = {0};
   80754:	f8ad 200c 	strh.w	r2, [sp, #12]
	if (I2C_LOCK)
   80758:	b10b      	cbz	r3, 8075e <usb_pwr_setup+0x3a>
		
	if (twi_master_read(TWI0, &packet_read_voltage) != TWI_SUCCESS) {
		req_voltage = 0;
	}
	I2C_LOCK = 0;
}
   8075a:	b00f      	add	sp, #60	; 0x3c
   8075c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	I2C_LOCK = 1;
   8075e:	702c      	strb	r4, [r5, #0]
	if (twi_master_read(TWI0, &packet_begin) != TWI_SUCCESS) {
   80760:	481b      	ldr	r0, [pc, #108]	; (807d0 <usb_pwr_setup+0xac>)
   80762:	4c1c      	ldr	r4, [pc, #112]	; (807d4 <usb_pwr_setup+0xb0>)
   80764:	a904      	add	r1, sp, #16
   80766:	f003 07ff 	and.w	r7, r3, #255	; 0xff
   8076a:	47a0      	blx	r4
   8076c:	b100      	cbz	r0, 80770 <usb_pwr_setup+0x4c>
		req_voltage = 0;
   8076e:	9700      	str	r7, [sp, #0]
	twi_package_t packet_read_voltage = {
   80770:	6873      	ldr	r3, [r6, #4]
   80772:	2701      	movs	r7, #1
   80774:	0c19      	lsrs	r1, r3, #16
   80776:	2204      	movs	r2, #4
   80778:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
   8077c:	2328      	movs	r3, #40	; 0x28
   8077e:	f88d 1026 	strb.w	r1, [sp, #38]	; 0x26
	if (twi_master_read(TWI0, &packet_read_voltage) != TWI_SUCCESS) {
   80782:	4813      	ldr	r0, [pc, #76]	; (807d0 <usb_pwr_setup+0xac>)
   80784:	a909      	add	r1, sp, #36	; 0x24
	twi_package_t packet_read_voltage = {
   80786:	f8cd d02c 	str.w	sp, [sp, #44]	; 0x2c
   8078a:	970a      	str	r7, [sp, #40]	; 0x28
   8078c:	920c      	str	r2, [sp, #48]	; 0x30
   8078e:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	if (twi_master_read(TWI0, &packet_read_voltage) != TWI_SUCCESS) {
   80792:	47a0      	blx	r4
   80794:	b9a8      	cbnz	r0, 807c2 <usb_pwr_setup+0x9e>
	req_voltage &= ~(0x3FF);
   80796:	9b00      	ldr	r3, [sp, #0]
   80798:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
   8079c:	f023 0303 	bic.w	r3, r3, #3
	req_voltage |= (100);
   807a0:	f043 0364 	orr.w	r3, r3, #100	; 0x64
   807a4:	9300      	str	r3, [sp, #0]
	if (twi_master_write(TWI0, &packet_read_voltage) != TWI_SUCCESS) {
   807a6:	480a      	ldr	r0, [pc, #40]	; (807d0 <usb_pwr_setup+0xac>)
   807a8:	4b0b      	ldr	r3, [pc, #44]	; (807d8 <usb_pwr_setup+0xb4>)
   807aa:	a909      	add	r1, sp, #36	; 0x24
   807ac:	4798      	blx	r3
   807ae:	b108      	cbz	r0, 807b4 <usb_pwr_setup+0x90>
		req_voltage = 0;
   807b0:	2300      	movs	r3, #0
   807b2:	9300      	str	r3, [sp, #0]
	if (twi_master_read(TWI0, &packet_read_voltage) != TWI_SUCCESS) {
   807b4:	a909      	add	r1, sp, #36	; 0x24
   807b6:	4806      	ldr	r0, [pc, #24]	; (807d0 <usb_pwr_setup+0xac>)
   807b8:	47a0      	blx	r4
	I2C_LOCK = 0;
   807ba:	2300      	movs	r3, #0
   807bc:	702b      	strb	r3, [r5, #0]
}
   807be:	b00f      	add	sp, #60	; 0x3c
   807c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   807c2:	2364      	movs	r3, #100	; 0x64
   807c4:	e7ee      	b.n	807a4 <usb_pwr_setup+0x80>
   807c6:	bf00      	nop
   807c8:	0008da40 	.word	0x0008da40
   807cc:	20071694 	.word	0x20071694
   807d0:	4008c000 	.word	0x4008c000
   807d4:	000849a1 	.word	0x000849a1
   807d8:	00084a79 	.word	0x00084a79

000807dc <usb_pd_soft_reset>:
Get USBC Power Chip to renegotiate power with power brick

Must be done after setting new power settings
*/
int usb_pd_soft_reset()
{
   807dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (I2C_LOCK)
   807e0:	4d2e      	ldr	r5, [pc, #184]	; (8089c <usb_pd_soft_reset+0xc0>)
{
   807e2:	b092      	sub	sp, #72	; 0x48
	if (I2C_LOCK)
   807e4:	782b      	ldrb	r3, [r5, #0]
   807e6:	b113      	cbz	r3, 807ee <usb_pd_soft_reset+0x12>
		req_voltage = 0;
	}
	I2C_LOCK = 0;
	
	return 5;
}
   807e8:	b012      	add	sp, #72	; 0x48
   807ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	I2C_LOCK = 1;
   807ee:	2401      	movs	r4, #1
	uint8_t cmd = 0x0D;
   807f0:	220d      	movs	r2, #13
	twi_package_t packet_soft_reset = {
   807f2:	2728      	movs	r7, #40	; 0x28
   807f4:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 808a0 <usb_pd_soft_reset+0xc4>
   807f8:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   807fc:	f8d9 3008 	ldr.w	r3, [r9, #8]
	if (twi_master_write(TWI0, &packet_soft_reset) != TWI_SUCCESS) {
   80800:	4828      	ldr	r0, [pc, #160]	; (808a4 <usb_pd_soft_reset+0xc8>)
	twi_package_t packet_soft_reset = {
   80802:	f8ad 300c 	strh.w	r3, [sp, #12]
   80806:	0c1b      	lsrs	r3, r3, #16
   80808:	f88d 300e 	strb.w	r3, [sp, #14]
	if (twi_master_write(TWI0, &packet_soft_reset) != TWI_SUCCESS) {
   8080c:	f8df a098 	ldr.w	sl, [pc, #152]	; 808a8 <usb_pd_soft_reset+0xcc>
	twi_package_t packet_soft_reset = {
   80810:	f10d 0306 	add.w	r3, sp, #6
	if (twi_master_write(TWI0, &packet_soft_reset) != TWI_SUCCESS) {
   80814:	a903      	add	r1, sp, #12
	twi_package_t packet_soft_reset = {
   80816:	9305      	str	r3, [sp, #20]
	I2C_LOCK = 1;
   80818:	702c      	strb	r4, [r5, #0]
	uint8_t cmd = 0x0D;
   8081a:	f88d 2006 	strb.w	r2, [sp, #6]
	twi_package_t packet_soft_reset = {
   8081e:	9404      	str	r4, [sp, #16]
   80820:	9406      	str	r4, [sp, #24]
   80822:	f88d 701c 	strb.w	r7, [sp, #28]
	if (twi_master_write(TWI0, &packet_soft_reset) != TWI_SUCCESS) {
   80826:	47d0      	blx	sl
   80828:	4680      	mov	r8, r0
   8082a:	2800      	cmp	r0, #0
   8082c:	d132      	bne.n	80894 <usb_pd_soft_reset+0xb8>
	uint8_t send_cmd = 0x26;
   8082e:	2326      	movs	r3, #38	; 0x26
   80830:	f88d 3007 	strb.w	r3, [sp, #7]
	twi_package_t packet_send_cmd = {
   80834:	f8d9 300c 	ldr.w	r3, [r9, #12]
	if (twi_master_write(TWI0, &packet_send_cmd) != TWI_SUCCESS) {
   80838:	481a      	ldr	r0, [pc, #104]	; (808a4 <usb_pd_soft_reset+0xc8>)
	twi_package_t packet_send_cmd = {
   8083a:	f8ad 3020 	strh.w	r3, [sp, #32]
   8083e:	0c1b      	lsrs	r3, r3, #16
   80840:	f88d 3022 	strb.w	r3, [sp, #34]	; 0x22
	if (twi_master_write(TWI0, &packet_send_cmd) != TWI_SUCCESS) {
   80844:	a908      	add	r1, sp, #32
	twi_package_t packet_send_cmd = {
   80846:	f10d 0307 	add.w	r3, sp, #7
   8084a:	9409      	str	r4, [sp, #36]	; 0x24
   8084c:	940b      	str	r4, [sp, #44]	; 0x2c
   8084e:	f88d 7030 	strb.w	r7, [sp, #48]	; 0x30
	uint32_t req_voltage = 1; //(12/0.05);
   80852:	9402      	str	r4, [sp, #8]
	twi_package_t packet_send_cmd = {
   80854:	930a      	str	r3, [sp, #40]	; 0x28
	if (twi_master_write(TWI0, &packet_send_cmd) != TWI_SUCCESS) {
   80856:	47d0      	blx	sl
   80858:	4606      	mov	r6, r0
   8085a:	b9b0      	cbnz	r0, 8088a <usb_pd_soft_reset+0xae>
	twi_package_t packet_read_voltage = {
   8085c:	aa02      	add	r2, sp, #8
   8085e:	920f      	str	r2, [sp, #60]	; 0x3c
   80860:	2204      	movs	r2, #4
   80862:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (twi_master_read(TWI0, &packet_read_voltage) != TWI_SUCCESS) {
   80866:	a90d      	add	r1, sp, #52	; 0x34
	twi_package_t packet_read_voltage = {
   80868:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
   8086c:	0c1b      	lsrs	r3, r3, #16
   8086e:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	if (twi_master_read(TWI0, &packet_read_voltage) != TWI_SUCCESS) {
   80872:	480c      	ldr	r0, [pc, #48]	; (808a4 <usb_pd_soft_reset+0xc8>)
   80874:	4b0d      	ldr	r3, [pc, #52]	; (808ac <usb_pd_soft_reset+0xd0>)
	twi_package_t packet_read_voltage = {
   80876:	940e      	str	r4, [sp, #56]	; 0x38
   80878:	f88d 7044 	strb.w	r7, [sp, #68]	; 0x44
   8087c:	9210      	str	r2, [sp, #64]	; 0x40
	if (twi_master_read(TWI0, &packet_read_voltage) != TWI_SUCCESS) {
   8087e:	4798      	blx	r3
	return 5;
   80880:	2005      	movs	r0, #5
	I2C_LOCK = 0;
   80882:	702e      	strb	r6, [r5, #0]
}
   80884:	b012      	add	sp, #72	; 0x48
   80886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -1;
   8088a:	f04f 30ff 	mov.w	r0, #4294967295
		I2C_LOCK = 0;
   8088e:	f885 8000 	strb.w	r8, [r5]
		return -1;
   80892:	e7a9      	b.n	807e8 <usb_pd_soft_reset+0xc>
		return -1;
   80894:	f04f 30ff 	mov.w	r0, #4294967295
		I2C_LOCK = 0;
   80898:	702e      	strb	r6, [r5, #0]
		return -1;
   8089a:	e7a5      	b.n	807e8 <usb_pd_soft_reset+0xc>
   8089c:	20071694 	.word	0x20071694
   808a0:	0008da40 	.word	0x0008da40
   808a4:	4008c000 	.word	0x4008c000
   808a8:	00084a79 	.word	0x00084a79
   808ac:	000849a1 	.word	0x000849a1

000808b0 <main>:


/*! \brief Main function. Execution starts here.
 */
int main(void)
{
   808b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	volatile uint32_t reset_reason = 0;
   808b4:	2500      	movs	r5, #0
	reset_reason = RSTC->RSTC_SR;
	reset_reason = reset_reason; //Still a thing in 2021??
	uint32_t serial_number[4];
	
	//disable watchdog
	WDT->WDT_MR = (1 << 25);
   808b6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
	
	ioport_init();
	enable_switched_power();
		
	irq_initialize_vectors();
	cpu_irq_enable();
   808ba:	f04f 0901 	mov.w	r9, #1
	I2C_LOCK = 0;
   808be:	4c59      	ldr	r4, [pc, #356]	; (80a24 <main+0x174>)
{
   808c0:	b087      	sub	sp, #28
	reset_reason = RSTC->RSTC_SR;
   808c2:	4b59      	ldr	r3, [pc, #356]	; (80a28 <main+0x178>)
	volatile uint32_t reset_reason = 0;
   808c4:	9501      	str	r5, [sp, #4]
	I2C_LOCK = 0;
   808c6:	7025      	strb	r5, [r4, #0]
	reset_reason = RSTC->RSTC_SR;
   808c8:	685c      	ldr	r4, [r3, #4]
	gpio_configure_pin(PIO_PB25_IDX, PIO_TYPE_PIO_OUTPUT_1);
   808ca:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
	reset_reason = RSTC->RSTC_SR;
   808ce:	9401      	str	r4, [sp, #4]
	reset_reason = reset_reason; //Still a thing in 2021??
   808d0:	9c01      	ldr	r4, [sp, #4]
	gpio_configure_pin(PIO_PB25_IDX, PIO_TYPE_PIO_OUTPUT_1);
   808d2:	4f56      	ldr	r7, [pc, #344]	; (80a2c <main+0x17c>)
	reset_reason = reset_reason; //Still a thing in 2021??
   808d4:	9401      	str	r4, [sp, #4]
	gpio_configure_pin(PIO_PB25_IDX, PIO_TYPE_PIO_OUTPUT_1);
   808d6:	2039      	movs	r0, #57	; 0x39
	WDT->WDT_MR = (1 << 25);
   808d8:	655a      	str	r2, [r3, #84]	; 0x54
	gpio_configure_pin(PIO_PB25_IDX, PIO_TYPE_PIO_OUTPUT_1);
   808da:	47b8      	blx	r7
	flash_read_unique_id(serial_number, sizeof(serial_number));
   808dc:	2110      	movs	r1, #16
   808de:	4b54      	ldr	r3, [pc, #336]	; (80a30 <main+0x180>)
   808e0:	a802      	add	r0, sp, #8
   808e2:	4798      	blx	r3
   808e4:	f8df 814c 	ldr.w	r8, [pc, #332]	; 80a34 <main+0x184>
   808e8:	200b      	movs	r0, #11
   808ea:	47c0      	blx	r8
   808ec:	200c      	movs	r0, #12
   808ee:	47c0      	blx	r8
   808f0:	200d      	movs	r0, #13
   808f2:	47c0      	blx	r8
   808f4:	200e      	movs	r0, #14
   808f6:	47c0      	blx	r8
	enable_switched_power();
   808f8:	4b4f      	ldr	r3, [pc, #316]	; (80a38 <main+0x188>)
   808fa:	4798      	blx	r3
	cpu_irq_enable();
   808fc:	4b4f      	ldr	r3, [pc, #316]	; (80a3c <main+0x18c>)
   808fe:	f883 9000 	strb.w	r9, [r3]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   80902:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   80906:	b662      	cpsie	i
		
	// Let power come up
	delay_ms(25);
   80908:	4e4d      	ldr	r6, [pc, #308]	; (80a40 <main+0x190>)
   8090a:	484e      	ldr	r0, [pc, #312]	; (80a44 <main+0x194>)
   8090c:	47b0      	blx	r6
	
	//Detect state of switch
	gpio_configure_pin(PIN_SWSTATE_GPIO, PIN_SWSTATE_FLAGS);
   8090e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80912:	203a      	movs	r0, #58	; 0x3a
   80914:	47b8      	blx	r7
	gpio_configure_pin(PIN_USB_HBEAT, PIN_USB_HBEAT_FLAGS);
   80916:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8091a:	2003      	movs	r0, #3
   8091c:	47b8      	blx	r7
	
	// USB-PD Chip reset - must be done before configuring 
	gpio_configure_pin(PIN_USB_RESET, PIO_TYPE_PIO_OUTPUT_0);
   8091e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80922:	204e      	movs	r0, #78	; 0x4e
   80924:	47b8      	blx	r7
	gpio_set_pin_high(PIN_USB_RESET);
   80926:	204e      	movs	r0, #78	; 0x4e
   80928:	4b47      	ldr	r3, [pc, #284]	; (80a48 <main+0x198>)
   8092a:	4798      	blx	r3
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
   8092c:	4b47      	ldr	r3, [pc, #284]	; (80a4c <main+0x19c>)
   8092e:	f8df a120 	ldr.w	sl, [pc, #288]	; 80a50 <main+0x1a0>
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   80932:	f883 9005 	strb.w	r9, [r3, #5]
		sleepmgr_locks[i] = 0;
   80936:	701d      	strb	r5, [r3, #0]
   80938:	705d      	strb	r5, [r3, #1]
   8093a:	709d      	strb	r5, [r3, #2]
   8093c:	70dd      	strb	r5, [r3, #3]
   8093e:	711d      	strb	r5, [r3, #4]
	
	// Initialize the sleep manager
	sleepmgr_init();
	irq_initialize_vectors();
#if !SAMD21 && !SAMR21
	sysclk_init();
   80940:	4b44      	ldr	r3, [pc, #272]	; (80a54 <main+0x1a4>)
   80942:	4798      	blx	r3
	board_init();
   80944:	4b44      	ldr	r3, [pc, #272]	; (80a58 <main+0x1a8>)
   80946:	4798      	blx	r3
#else
	system_init();
#endif

	tps56520_init();
   80948:	4b44      	ldr	r3, [pc, #272]	; (80a5c <main+0x1ac>)
   8094a:	4798      	blx	r3
	gpio_set_pin_low(PIN_USB_RESET);
   8094c:	204e      	movs	r0, #78	; 0x4e
   8094e:	4b44      	ldr	r3, [pc, #272]	; (80a60 <main+0x1b0>)
   80950:	4798      	blx	r3
	
	//Init CDCE906 Chip
	cdce906_init();
   80952:	4b44      	ldr	r3, [pc, #272]	; (80a64 <main+0x1b4>)
   80954:	4798      	blx	r3
	
	// usbc PD chip needs more time?
	delay_ms(25); //TODO - these delays are way off??
   80956:	483b      	ldr	r0, [pc, #236]	; (80a44 <main+0x194>)
   80958:	47b0      	blx	r6
	
	// setup usbc power
	usb_pwr_setup();
   8095a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 80a68 <main+0x1b8>
   8095e:	4b43      	ldr	r3, [pc, #268]	; (80a6c <main+0x1bc>)
   80960:	4798      	blx	r3
	usb_pd_soft_reset();
   80962:	4b43      	ldr	r3, [pc, #268]	; (80a70 <main+0x1c0>)
   80964:	4798      	blx	r3

	//Convert serial number to ASCII for USB Serial number
		//Convert serial number to ASCII for USB Serial number
	for(unsigned int i = 0; i < 4; i++){
   80966:	464d      	mov	r5, r9
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);
   80968:	4e42      	ldr	r6, [pc, #264]	; (80a74 <main+0x1c4>)
   8096a:	ac02      	add	r4, sp, #8
   8096c:	f10d 0b18 	add.w	fp, sp, #24
   80970:	f854 2b04 	ldr.w	r2, [r4], #4
   80974:	4628      	mov	r0, r5
   80976:	4631      	mov	r1, r6
   80978:	47d0      	blx	sl
	for(unsigned int i = 0; i < 4; i++){
   8097a:	455c      	cmp	r4, fp
   8097c:	f105 0508 	add.w	r5, r5, #8
   80980:	d1f6      	bne.n	80970 <main+0xc0>
	}
	usb_serial_number[32] = 0;
   80982:	f04f 0a00 	mov.w	sl, #0

	/* Enable SMC */
	pmc_enable_periph_clk(ID_SMC);	
   80986:	2009      	movs	r0, #9
	usb_serial_number[32] = 0;
   80988:	f889 a020 	strb.w	sl, [r9, #32]
	pmc_enable_periph_clk(ID_SMC);	
   8098c:	47c0      	blx	r8
	fpga_pins(true);
   8098e:	2001      	movs	r0, #1
   80990:	4b39      	ldr	r3, [pc, #228]	; (80a78 <main+0x1c8>)
   80992:	4798      	blx	r3
	//But you can't define things invalid, so hold is auto-calculated:	
	//NRD_HOLD = NRD_CYCLE - NRD SETUP - NRD PULSE
	//NCS_RD_HOLD = NRD_CYCLE - NCS_RD_SETUP - NCS_RD_PULSE
	
	/* complete SMC configuration between PSRAM and SMC waveforms. */
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(2)
   80994:	4651      	mov	r1, sl
   80996:	4a39      	ldr	r2, [pc, #228]	; (80a7c <main+0x1cc>)
   80998:	4839      	ldr	r0, [pc, #228]	; (80a80 <main+0x1d0>)
   8099a:	4b3a      	ldr	r3, [pc, #232]	; (80a84 <main+0x1d4>)
   8099c:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(3)
	| SMC_SETUP_NRD_SETUP(2)
	| SMC_SETUP_NCS_RD_SETUP(3));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(6)
   8099e:	4651      	mov	r1, sl
   809a0:	4a39      	ldr	r2, [pc, #228]	; (80a88 <main+0x1d8>)
   809a2:	4837      	ldr	r0, [pc, #220]	; (80a80 <main+0x1d0>)
   809a4:	4b39      	ldr	r3, [pc, #228]	; (80a8c <main+0x1dc>)
   809a6:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(2)
	| SMC_PULSE_NRD_PULSE(6)
	| SMC_PULSE_NCS_RD_PULSE(6));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(12)
   809a8:	f04f 120c 	mov.w	r2, #786444	; 0xc000c
   809ac:	4651      	mov	r1, sl
   809ae:	4834      	ldr	r0, [pc, #208]	; (80a80 <main+0x1d0>)
   809b0:	4b37      	ldr	r3, [pc, #220]	; (80a90 <main+0x1e0>)
   809b2:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(12));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   809b4:	4651      	mov	r1, sl
   809b6:	2203      	movs	r2, #3
   809b8:	4831      	ldr	r0, [pc, #196]	; (80a80 <main+0x1d0>)
   809ba:	4b36      	ldr	r3, [pc, #216]	; (80a94 <main+0x1e4>)
   809bc:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   809be:	2204      	movs	r2, #4
   809c0:	4b35      	ldr	r3, [pc, #212]	; (80a98 <main+0x1e8>)
	pmc_enable_pck(ul_id);
   809c2:	4650      	mov	r0, sl
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   809c4:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   809c6:	4b35      	ldr	r3, [pc, #212]	; (80a9c <main+0x1ec>)
   809c8:	4798      	blx	r3
        | SMC_MODE_DBW_BIT_8);

	/* Enable PCLK0 at 84 MHz */	
	genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
	pmc_enable_upll_clock();
   809ca:	4b35      	ldr	r3, [pc, #212]	; (80aa0 <main+0x1f0>)
   809cc:	4798      	blx	r3
	pmc_enable_periph_clk(ID_UOTGHS);
   809ce:	2028      	movs	r0, #40	; 0x28
   809d0:	47c0      	blx	r8
	
	
	//Fan output pin
	gpio_configure_pin(PIO_PB25_IDX, PIO_PERIPH_B);	
   809d2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   809d6:	2039      	movs	r0, #57	; 0x39
   809d8:	47b8      	blx	r7
	
	fan_pwm_init();
   809da:	4b32      	ldr	r3, [pc, #200]	; (80aa4 <main+0x1f4>)
   809dc:	4798      	blx	r3
	fan_pwm_set_duty_cycle(75); //Set at 50% in case we crash - will be tuned later
   809de:	4b32      	ldr	r3, [pc, #200]	; (80aa8 <main+0x1f8>)
   809e0:	204b      	movs	r0, #75	; 0x4b
   809e2:	4798      	blx	r3
	power_init();
   809e4:	4b31      	ldr	r3, [pc, #196]	; (80aac <main+0x1fc>)
   809e6:	4798      	blx	r3
	
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);
	thermals_init();
   809e8:	4b31      	ldr	r3, [pc, #196]	; (80ab0 <main+0x200>)
   809ea:	4798      	blx	r3
	periodic_timer_init();
   809ec:	4b31      	ldr	r3, [pc, #196]	; (80ab4 <main+0x204>)
   809ee:	4798      	blx	r3
	udc_start();
   809f0:	4b31      	ldr	r3, [pc, #196]	; (80ab8 <main+0x208>)
   809f2:	4798      	blx	r3
	
	
	gpio_configure_pin(PIO_PB27_IDX, PIO_OUTPUT_1 | PIO_DEFAULT);
   809f4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   809f8:	203b      	movs	r0, #59	; 0x3b
   809fa:	47b8      	blx	r7
	enable_fpga_power();
   809fc:	4b2f      	ldr	r3, [pc, #188]	; (80abc <main+0x20c>)
   809fe:	4798      	blx	r3
	naeusb_register_handlers();
   80a00:	4b2f      	ldr	r3, [pc, #188]	; (80ac0 <main+0x210>)
   80a02:	4798      	blx	r3
	naeusart_register_handlers();
   80a04:	4b2f      	ldr	r3, [pc, #188]	; (80ac4 <main+0x214>)
   80a06:	4798      	blx	r3
	fpga_target_register_handlers();
   80a08:	4b2f      	ldr	r3, [pc, #188]	; (80ac8 <main+0x218>)
   80a0a:	4798      	blx	r3
	bergen_register_handlers();
   80a0c:	4b2f      	ldr	r3, [pc, #188]	; (80acc <main+0x21c>)
   80a0e:	4798      	blx	r3
	mpsse_register_handlers();
   80a10:	4b2f      	ldr	r3, [pc, #188]	; (80ad0 <main+0x220>)
   80a12:	4e30      	ldr	r6, [pc, #192]	; (80ad4 <main+0x224>)
   80a14:	4d30      	ldr	r5, [pc, #192]	; (80ad8 <main+0x228>)
   80a16:	4c31      	ldr	r4, [pc, #196]	; (80adc <main+0x22c>)
   80a18:	4798      	blx	r3
	
	// send received USART data over to PC on cdc 0 and 1
	while (true) {
		cdc_send_to_pc();
   80a1a:	47b0      	blx	r6
		check_power_state(); //make sure power hasn't been killed		
   80a1c:	47a8      	blx	r5
		MPSSE_main_sendrecv_byte();
   80a1e:	47a0      	blx	r4
	while (true) {
   80a20:	e7fb      	b.n	80a1a <main+0x16a>
   80a22:	bf00      	nop
   80a24:	20071694 	.word	0x20071694
   80a28:	400e1a00 	.word	0x400e1a00
   80a2c:	00084655 	.word	0x00084655
   80a30:	00083d85 	.word	0x00083d85
   80a34:	000843f1 	.word	0x000843f1
   80a38:	00080e35 	.word	0x00080e35
   80a3c:	20070ca0 	.word	0x20070ca0
   80a40:	200701b5 	.word	0x200701b5
   80a44:	000249f0 	.word	0x000249f0
   80a48:	000845f9 	.word	0x000845f9
   80a4c:	20073420 	.word	0x20073420
   80a50:	00086ee1 	.word	0x00086ee1
   80a54:	0008423d 	.word	0x0008423d
   80a58:	000863f1 	.word	0x000863f1
   80a5c:	0008153d 	.word	0x0008153d
   80a60:	00084615 	.word	0x00084615
   80a64:	00080135 	.word	0x00080135
   80a68:	200701d0 	.word	0x200701d0
   80a6c:	00080725 	.word	0x00080725
   80a70:	000807dd 	.word	0x000807dd
   80a74:	0008da38 	.word	0x0008da38
   80a78:	000804a9 	.word	0x000804a9
   80a7c:	03020302 	.word	0x03020302
   80a80:	400e0000 	.word	0x400e0000
   80a84:	00084091 	.word	0x00084091
   80a88:	06060206 	.word	0x06060206
   80a8c:	0008409d 	.word	0x0008409d
   80a90:	000840a9 	.word	0x000840a9
   80a94:	000840b5 	.word	0x000840b5
   80a98:	400e0600 	.word	0x400e0600
   80a9c:	00084431 	.word	0x00084431
   80aa0:	000843dd 	.word	0x000843dd
   80aa4:	0008129d 	.word	0x0008129d
   80aa8:	000812f1 	.word	0x000812f1
   80aac:	00080ef1 	.word	0x00080ef1
   80ab0:	00080f9d 	.word	0x00080f9d
   80ab4:	00081385 	.word	0x00081385
   80ab8:	00081745 	.word	0x00081745
   80abc:	00081255 	.word	0x00081255
   80ac0:	000820dd 	.word	0x000820dd
   80ac4:	00082591 	.word	0x00082591
   80ac8:	00083c91 	.word	0x00083c91
   80acc:	00080d29 	.word	0x00080d29
   80ad0:	000833c9 	.word	0x000833c9
   80ad4:	00082879 	.word	0x00082879
   80ad8:	00081341 	.word	0x00081341
   80adc:	000833ed 	.word	0x000833ed

00080ae0 <ctrl_i2c_setup>:
	I2C_LOCK = 0;
}

void ctrl_i2c_setup(void)
{
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)
   80ae0:	4a0d      	ldr	r2, [pc, #52]	; (80b18 <ctrl_i2c_setup+0x38>)
   80ae2:	88d3      	ldrh	r3, [r2, #6]
   80ae4:	8991      	ldrh	r1, [r2, #12]
   80ae6:	4299      	cmp	r1, r3
   80ae8:	d314      	bcc.n	80b14 <ctrl_i2c_setup+0x34>
	return;
	
	uint8_t addr_len = udd_g_ctrlreq.req.wLength - 1;
	if ((addr_len > 3) || (addr_len < 1)) {
   80aea:	3b02      	subs	r3, #2
   80aec:	b2db      	uxtb	r3, r3
   80aee:	2b02      	cmp	r3, #2
   80af0:	d810      	bhi.n	80b14 <ctrl_i2c_setup+0x34>
{
   80af2:	b410      	push	{r4}
		return;
	}
	USER_TWI_PACKET.chip = udd_g_ctrlreq.payload[0];
   80af4:	6894      	ldr	r4, [r2, #8]
   80af6:	4809      	ldr	r0, [pc, #36]	; (80b1c <ctrl_i2c_setup+0x3c>)
   80af8:	4622      	mov	r2, r4
   80afa:	7824      	ldrb	r4, [r4, #0]
   80afc:	4601      	mov	r1, r0
   80afe:	7404      	strb	r4, [r0, #16]
	for (uint8_t i = 0; i < addr_len; i++) {
   80b00:	1c50      	adds	r0, r2, #1
   80b02:	4403      	add	r3, r0
		USER_TWI_PACKET.addr[i] = udd_g_ctrlreq.payload[i+1];
   80b04:	f812 0f01 	ldrb.w	r0, [r2, #1]!
	for (uint8_t i = 0; i < addr_len; i++) {
   80b08:	429a      	cmp	r2, r3
		USER_TWI_PACKET.addr[i] = udd_g_ctrlreq.payload[i+1];
   80b0a:	f801 0b01 	strb.w	r0, [r1], #1
	for (uint8_t i = 0; i < addr_len; i++) {
   80b0e:	d1f9      	bne.n	80b04 <ctrl_i2c_setup+0x24>
	}
	
	
}
   80b10:	bc10      	pop	{r4}
   80b12:	4770      	bx	lr
   80b14:	4770      	bx	lr
   80b16:	bf00      	nop
   80b18:	200723a4 	.word	0x200723a4
   80b1c:	200701f4 	.word	0x200701f4

00080b20 <bergen_setup_out_received>:
bool naeusb_cdc_settings_in(void);
bool naeusb_cdc_settings_out(void);

bool bergen_setup_out_received(void)
{
	switch (udd_g_ctrlreq.req.bRequest) {			
   80b20:	4a0d      	ldr	r2, [pc, #52]	; (80b58 <bergen_setup_out_received+0x38>)
   80b22:	7853      	ldrb	r3, [r2, #1]
   80b24:	3b41      	subs	r3, #65	; 0x41
   80b26:	2b03      	cmp	r3, #3
   80b28:	d813      	bhi.n	80b52 <bergen_setup_out_received+0x32>
   80b2a:	e8df f003 	tbb	[pc, r3]
   80b2e:	0a0e      	.short	0x0a0e
   80b30:	0206      	.short	0x0206
		case REQ_I2C_SETUP:
			udd_g_ctrlreq.callback = ctrl_i2c_setup;
			return true;
			
		case REQ_I2C_DATA:
			udd_g_ctrlreq.callback = ctrl_i2c_send;
   80b32:	4b0a      	ldr	r3, [pc, #40]	; (80b5c <bergen_setup_out_received+0x3c>)
			return true;
   80b34:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_i2c_send;
   80b36:	6113      	str	r3, [r2, #16]
			return true;
   80b38:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_i2c_setup;
   80b3a:	4b09      	ldr	r3, [pc, #36]	; (80b60 <bergen_setup_out_received+0x40>)
			return true;
   80b3c:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_i2c_setup;
   80b3e:	6113      	str	r3, [r2, #16]
			return true;
   80b40:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_fpga_temp_cb;
   80b42:	4b08      	ldr	r3, [pc, #32]	; (80b64 <bergen_setup_out_received+0x44>)
			return true;
   80b44:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_fpga_temp_cb;
   80b46:	6113      	str	r3, [r2, #16]
			return true;
   80b48:	4770      	bx	lr
			
		case REQ_FPGA_CDC:
			udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   80b4a:	4b07      	ldr	r3, [pc, #28]	; (80b68 <bergen_setup_out_received+0x48>)
			return true;
   80b4c:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   80b4e:	6113      	str	r3, [r2, #16]
			return true;
   80b50:	4770      	bx	lr
	switch (udd_g_ctrlreq.req.bRequest) {			
   80b52:	2000      	movs	r0, #0
			break;
	}
	return false;
}
   80b54:	4770      	bx	lr
   80b56:	bf00      	nop
   80b58:	200723a4 	.word	0x200723a4
   80b5c:	00080b6d 	.word	0x00080b6d
   80b60:	00080ae1 	.word	0x00080ae1
   80b64:	00080ccd 	.word	0x00080ccd
   80b68:	0008213d 	.word	0x0008213d

00080b6c <ctrl_i2c_send>:
{
   80b6c:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)
   80b6e:	4b0e      	ldr	r3, [pc, #56]	; (80ba8 <ctrl_i2c_send+0x3c>)
   80b70:	88da      	ldrh	r2, [r3, #6]
   80b72:	8999      	ldrh	r1, [r3, #12]
   80b74:	4291      	cmp	r1, r2
   80b76:	d307      	bcc.n	80b88 <ctrl_i2c_send+0x1c>
	if (I2C_LOCK) {
   80b78:	4c0c      	ldr	r4, [pc, #48]	; (80bac <ctrl_i2c_send+0x40>)
   80b7a:	7821      	ldrb	r1, [r4, #0]
   80b7c:	f001 05ff 	and.w	r5, r1, #255	; 0xff
   80b80:	b119      	cbz	r1, 80b8a <ctrl_i2c_send+0x1e>
		I2C_STATUS = 1;
   80b82:	2201      	movs	r2, #1
   80b84:	4b0a      	ldr	r3, [pc, #40]	; (80bb0 <ctrl_i2c_send+0x44>)
   80b86:	701a      	strb	r2, [r3, #0]
}
   80b88:	bd38      	pop	{r3, r4, r5, pc}
	USER_TWI_PACKET.buffer = udd_g_ctrlreq.payload;
   80b8a:	490a      	ldr	r1, [pc, #40]	; (80bb4 <ctrl_i2c_send+0x48>)
   80b8c:	689b      	ldr	r3, [r3, #8]
	USER_TWI_PACKET.length = udd_g_ctrlreq.req.wLength;
   80b8e:	60ca      	str	r2, [r1, #12]
	I2C_LOCK = 1;
   80b90:	2201      	movs	r2, #1
	USER_TWI_PACKET.buffer = udd_g_ctrlreq.payload;
   80b92:	608b      	str	r3, [r1, #8]
	I2C_STATUS = twi_master_write(TWI0, &USER_TWI_PACKET);
   80b94:	4808      	ldr	r0, [pc, #32]	; (80bb8 <ctrl_i2c_send+0x4c>)
   80b96:	4b09      	ldr	r3, [pc, #36]	; (80bbc <ctrl_i2c_send+0x50>)
	I2C_LOCK = 1;
   80b98:	7022      	strb	r2, [r4, #0]
	I2C_STATUS = twi_master_write(TWI0, &USER_TWI_PACKET);
   80b9a:	4798      	blx	r3
   80b9c:	4b04      	ldr	r3, [pc, #16]	; (80bb0 <ctrl_i2c_send+0x44>)
   80b9e:	b2c0      	uxtb	r0, r0
   80ba0:	7018      	strb	r0, [r3, #0]
	I2C_LOCK = 0;
   80ba2:	7025      	strb	r5, [r4, #0]
}
   80ba4:	bd38      	pop	{r3, r4, r5, pc}
   80ba6:	bf00      	nop
   80ba8:	200723a4 	.word	0x200723a4
   80bac:	20071694 	.word	0x20071694
   80bb0:	20071db5 	.word	0x20071db5
   80bb4:	200701f4 	.word	0x200701f4
   80bb8:	4008c000 	.word	0x4008c000
   80bbc:	00084a79 	.word	0x00084a79

00080bc0 <bergen_setup_in_received>:

bool bergen_setup_in_received(void)
{
   80bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t addr;
	switch (udd_g_ctrlreq.req.bRequest & 0xFF) {
   80bc4:	4c37      	ldr	r4, [pc, #220]	; (80ca4 <bergen_setup_in_received+0xe4>)
   80bc6:	7863      	ldrb	r3, [r4, #1]
   80bc8:	3b41      	subs	r3, #65	; 0x41
   80bca:	2b03      	cmp	r3, #3
   80bcc:	d867      	bhi.n	80c9e <bergen_setup_in_received+0xde>
   80bce:	e8df f003 	tbb	[pc, r3]
   80bd2:	3441      	.short	0x3441
   80bd4:	021b      	.short	0x021b
			break;
		
		case REQ_I2C_DATA:
			USER_TWI_PACKET.length = udd_g_ctrlreq.req.wLength;
			USER_TWI_PACKET.buffer = respbuf + 1;
			if (I2C_LOCK) {
   80bd6:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80ca8 <bergen_setup_in_received+0xe8>
			USER_TWI_PACKET.length = udd_g_ctrlreq.req.wLength;
   80bda:	4f34      	ldr	r7, [pc, #208]	; (80cac <bergen_setup_in_received+0xec>)
   80bdc:	88e3      	ldrh	r3, [r4, #6]
			USER_TWI_PACKET.buffer = respbuf + 1;
   80bde:	4e34      	ldr	r6, [pc, #208]	; (80cb0 <bergen_setup_in_received+0xf0>)
			if (I2C_LOCK) {
   80be0:	f898 2000 	ldrb.w	r2, [r8]
			USER_TWI_PACKET.buffer = respbuf + 1;
   80be4:	e9c7 6302 	strd	r6, r3, [r7, #8]
			if (I2C_LOCK) {
   80be8:	f002 09ff 	and.w	r9, r2, #255	; 0xff
   80bec:	2a00      	cmp	r2, #0
   80bee:	d035      	beq.n	80c5c <bergen_setup_in_received+0x9c>
				respbuf[0] = 1;
   80bf0:	2201      	movs	r2, #1
				I2C_STATUS = 1;
   80bf2:	4930      	ldr	r1, [pc, #192]	; (80cb4 <bergen_setup_in_received+0xf4>)
				respbuf[0] = 1;
   80bf4:	1e70      	subs	r0, r6, #1
				udd_g_ctrlreq.payload = respbuf;
				udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   80bf6:	4413      	add	r3, r2
				respbuf[0] = 1;
   80bf8:	f806 2c01 	strb.w	r2, [r6, #-1]
				I2C_STATUS = 1;
   80bfc:	700a      	strb	r2, [r1, #0]
				udd_g_ctrlreq.payload = respbuf;
   80bfe:	60a0      	str	r0, [r4, #8]
				udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   80c00:	81a3      	strh	r3, [r4, #12]
				return true;
   80c02:	4610      	mov	r0, r2
		case REQ_FPGA_CDC:
			return naeusb_cdc_settings_in();
			break;
	}
	return false;
}
   80c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			respbuf[1] = USER_TWI_PACKET.chip;
   80c08:	4f28      	ldr	r7, [pc, #160]	; (80cac <bergen_setup_in_received+0xec>)
			respbuf[0] = I2C_STATUS;
   80c0a:	4b2a      	ldr	r3, [pc, #168]	; (80cb4 <bergen_setup_in_received+0xf4>)
   80c0c:	4e2a      	ldr	r6, [pc, #168]	; (80cb8 <bergen_setup_in_received+0xf8>)
   80c0e:	781a      	ldrb	r2, [r3, #0]
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   80c10:	687d      	ldr	r5, [r7, #4]
			respbuf[1] = USER_TWI_PACKET.chip;
   80c12:	7c3b      	ldrb	r3, [r7, #16]
			respbuf[0] = I2C_STATUS;
   80c14:	7032      	strb	r2, [r6, #0]
			respbuf[1] = USER_TWI_PACKET.chip;
   80c16:	7073      	strb	r3, [r6, #1]
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   80c18:	2d00      	cmp	r5, #0
   80c1a:	d03e      	beq.n	80c9a <bergen_setup_in_received+0xda>
   80c1c:	2300      	movs	r3, #0
   80c1e:	1c58      	adds	r0, r3, #1
				respbuf[i + 2] = USER_TWI_PACKET.addr[i];
   80c20:	5cf9      	ldrb	r1, [r7, r3]
   80c22:	18f2      	adds	r2, r6, r3
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   80c24:	b2c3      	uxtb	r3, r0
   80c26:	42ab      	cmp	r3, r5
				respbuf[i + 2] = USER_TWI_PACKET.addr[i];
   80c28:	7091      	strb	r1, [r2, #2]
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   80c2a:	d3f8      	bcc.n	80c1e <bergen_setup_in_received+0x5e>
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.addr_length + 2;
   80c2c:	3502      	adds	r5, #2
   80c2e:	b2ad      	uxth	r5, r5
			return true;
   80c30:	2001      	movs	r0, #1
			udd_g_ctrlreq.payload = respbuf;
   80c32:	60a6      	str	r6, [r4, #8]
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.addr_length + 2;
   80c34:	81a5      	strh	r5, [r4, #12]
}
   80c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (I2C_LOCK) {
   80c3a:	4b1b      	ldr	r3, [pc, #108]	; (80ca8 <bergen_setup_in_received+0xe8>)
   80c3c:	781b      	ldrb	r3, [r3, #0]
   80c3e:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   80c42:	b1eb      	cbz	r3, 80c80 <bergen_setup_in_received+0xc0>
				respbuf[0] = 1;
   80c44:	2301      	movs	r3, #1
   80c46:	4a1c      	ldr	r2, [pc, #112]	; (80cb8 <bergen_setup_in_received+0xf8>)
				return true;
   80c48:	4618      	mov	r0, r3
				respbuf[0] = 1;
   80c4a:	7013      	strb	r3, [r2, #0]
				udd_g_ctrlreq.payload = respbuf;
   80c4c:	60a2      	str	r2, [r4, #8]
				udd_g_ctrlreq.payload_size = 1;
   80c4e:	81a3      	strh	r3, [r4, #12]
}
   80c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return naeusb_cdc_settings_in();
   80c54:	4b19      	ldr	r3, [pc, #100]	; (80cbc <bergen_setup_in_received+0xfc>)
}
   80c56:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return naeusb_cdc_settings_in();
   80c5a:	4718      	bx	r3
			I2C_LOCK = 1;
   80c5c:	2501      	movs	r5, #1
			twi_master_read(TWI0, &USER_TWI_PACKET);
   80c5e:	4b18      	ldr	r3, [pc, #96]	; (80cc0 <bergen_setup_in_received+0x100>)
   80c60:	4639      	mov	r1, r7
   80c62:	4818      	ldr	r0, [pc, #96]	; (80cc4 <bergen_setup_in_received+0x104>)
			I2C_LOCK = 1;
   80c64:	f888 5000 	strb.w	r5, [r8]
			twi_master_read(TWI0, &USER_TWI_PACKET);
   80c68:	4798      	blx	r3
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   80c6a:	68fb      	ldr	r3, [r7, #12]
			respbuf[0] = 0;
   80c6c:	f806 9c01 	strb.w	r9, [r6, #-1]
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   80c70:	442b      	add	r3, r5
			respbuf[0] = 0;
   80c72:	3e01      	subs	r6, #1
			return true;
   80c74:	4628      	mov	r0, r5
			I2C_LOCK = 0;
   80c76:	f888 9000 	strb.w	r9, [r8]
			udd_g_ctrlreq.payload = respbuf;
   80c7a:	60a6      	str	r6, [r4, #8]
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   80c7c:	81a3      	strh	r3, [r4, #12]
			return true;
   80c7e:	e7da      	b.n	80c36 <bergen_setup_in_received+0x76>
			max1617_register_read(addr, respbuf + 1);
   80c80:	4d0b      	ldr	r5, [pc, #44]	; (80cb0 <bergen_setup_in_received+0xf0>)
   80c82:	4b11      	ldr	r3, [pc, #68]	; (80cc8 <bergen_setup_in_received+0x108>)
   80c84:	4629      	mov	r1, r5
   80c86:	78a0      	ldrb	r0, [r4, #2]
   80c88:	4798      	blx	r3
			udd_g_ctrlreq.payload_size = 2;
   80c8a:	2302      	movs	r3, #2
			respbuf[0] = 0;
   80c8c:	1e6a      	subs	r2, r5, #1
			return true;
   80c8e:	2001      	movs	r0, #1
			respbuf[0] = 0;
   80c90:	f805 6c01 	strb.w	r6, [r5, #-1]
			udd_g_ctrlreq.payload = respbuf;
   80c94:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = 2;
   80c96:	81a3      	strh	r3, [r4, #12]
			return true;
   80c98:	e7cd      	b.n	80c36 <bergen_setup_in_received+0x76>
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   80c9a:	2502      	movs	r5, #2
   80c9c:	e7c8      	b.n	80c30 <bergen_setup_in_received+0x70>
	switch (udd_g_ctrlreq.req.bRequest & 0xFF) {
   80c9e:	2000      	movs	r0, #0
   80ca0:	e7c9      	b.n	80c36 <bergen_setup_in_received+0x76>
   80ca2:	bf00      	nop
   80ca4:	200723a4 	.word	0x200723a4
   80ca8:	20071694 	.word	0x20071694
   80cac:	200701f4 	.word	0x200701f4
   80cb0:	20071b71 	.word	0x20071b71
   80cb4:	20071db5 	.word	0x20071db5
   80cb8:	20071b70 	.word	0x20071b70
   80cbc:	00082619 	.word	0x00082619
   80cc0:	000849a1 	.word	0x000849a1
   80cc4:	4008c000 	.word	0x4008c000
   80cc8:	00080e49 	.word	0x00080e49

00080ccc <ctrl_fpga_temp_cb>:
{
   80ccc:	b538      	push	{r3, r4, r5, lr}
	if (I2C_LOCK) {
   80cce:	4c0b      	ldr	r4, [pc, #44]	; (80cfc <ctrl_fpga_temp_cb+0x30>)
   80cd0:	7823      	ldrb	r3, [r4, #0]
   80cd2:	b11b      	cbz	r3, 80cdc <ctrl_fpga_temp_cb+0x10>
		I2C_STATUS = 1;
   80cd4:	2201      	movs	r2, #1
   80cd6:	4b0a      	ldr	r3, [pc, #40]	; (80d00 <ctrl_fpga_temp_cb+0x34>)
   80cd8:	701a      	strb	r2, [r3, #0]
}
   80cda:	bd38      	pop	{r3, r4, r5, pc}
	I2C_LOCK = 1;
   80cdc:	2101      	movs	r1, #1
   80cde:	f003 05ff 	and.w	r5, r3, #255	; 0xff
	max1617_register_write(udd_g_ctrlreq.req.wValue & 0xFF, udd_g_ctrlreq.payload[0]);
   80ce2:	4b08      	ldr	r3, [pc, #32]	; (80d04 <ctrl_fpga_temp_cb+0x38>)
	I2C_LOCK = 1;
   80ce4:	7021      	strb	r1, [r4, #0]
	max1617_register_write(udd_g_ctrlreq.req.wValue & 0xFF, udd_g_ctrlreq.payload[0]);
   80ce6:	689a      	ldr	r2, [r3, #8]
   80ce8:	7898      	ldrb	r0, [r3, #2]
   80cea:	f992 1000 	ldrsb.w	r1, [r2]
   80cee:	4b06      	ldr	r3, [pc, #24]	; (80d08 <ctrl_fpga_temp_cb+0x3c>)
   80cf0:	4798      	blx	r3
	I2C_STATUS = 0;
   80cf2:	4b03      	ldr	r3, [pc, #12]	; (80d00 <ctrl_fpga_temp_cb+0x34>)
	I2C_LOCK = 0;
   80cf4:	7025      	strb	r5, [r4, #0]
	I2C_STATUS = 0;
   80cf6:	701d      	strb	r5, [r3, #0]
}
   80cf8:	bd38      	pop	{r3, r4, r5, pc}
   80cfa:	bf00      	nop
   80cfc:	20071694 	.word	0x20071694
   80d00:	20071db5 	.word	0x20071db5
   80d04:	200723a4 	.word	0x200723a4
   80d08:	00080e99 	.word	0x00080e99

00080d0c <ui_powerdown>:
}
   80d0c:	4770      	bx	lr
   80d0e:	bf00      	nop

00080d10 <ui_wakeup>:
   80d10:	4770      	bx	lr
   80d12:	bf00      	nop

00080d14 <ui_process>:
	if (!(frame_number % 0x200))
   80d14:	f3c0 0008 	ubfx	r0, r0, #0, #9
   80d18:	b100      	cbz	r0, 80d1c <ui_process+0x8>
}
   80d1a:	4770      	bx	lr
		gpio_toggle_pin(PIN_USB_HBEAT);
   80d1c:	2003      	movs	r0, #3
   80d1e:	4b01      	ldr	r3, [pc, #4]	; (80d24 <ui_process+0x10>)
   80d20:	4718      	bx	r3
   80d22:	bf00      	nop
   80d24:	00084631 	.word	0x00084631

00080d28 <bergen_register_handlers>:

void bergen_register_handlers(void)
{
   80d28:	b510      	push	{r4, lr}
	naeusb_add_in_handler(bergen_setup_in_received);
   80d2a:	4b04      	ldr	r3, [pc, #16]	; (80d3c <bergen_register_handlers+0x14>)
   80d2c:	4804      	ldr	r0, [pc, #16]	; (80d40 <bergen_register_handlers+0x18>)
   80d2e:	4798      	blx	r3
	naeusb_add_out_handler(bergen_setup_out_received);
   80d30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	naeusb_add_out_handler(bergen_setup_out_received);
   80d34:	4803      	ldr	r0, [pc, #12]	; (80d44 <bergen_register_handlers+0x1c>)
   80d36:	4b04      	ldr	r3, [pc, #16]	; (80d48 <bergen_register_handlers+0x20>)
   80d38:	4718      	bx	r3
   80d3a:	bf00      	nop
   80d3c:	00081e51 	.word	0x00081e51
   80d40:	00080bc1 	.word	0x00080bc1
   80d44:	00080b21 	.word	0x00080b21
   80d48:	00081e79 	.word	0x00081e79

00080d4c <pgood_alert_handler>:
		last_power_state = board_get_powerstate();
	}
}

void pgood_alert_handler(const uint32_t id, const uint32_t index)
{
   80d4c:	b510      	push	{r4, lr}
	if (pio_get(PIOC, PIO_INPUT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN) != (PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN) || 
   80d4e:	f44f 12c8 	mov.w	r2, #1638400	; 0x190000
   80d52:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80d56:	480a      	ldr	r0, [pc, #40]	; (80d80 <pgood_alert_handler+0x34>)
   80d58:	4c0a      	ldr	r4, [pc, #40]	; (80d84 <pgood_alert_handler+0x38>)
   80d5a:	47a0      	blx	r4
   80d5c:	f5b0 1fc8 	cmp.w	r0, #1638400	; 0x190000
   80d60:	d005      	beq.n	80d6e <pgood_alert_handler+0x22>
		!pio_get(PIOB, PIO_INPUT, PIN_PGOOD_3V3_PIN))
		if (power_toggles++ > 5) {
   80d62:	4a09      	ldr	r2, [pc, #36]	; (80d88 <pgood_alert_handler+0x3c>)
   80d64:	7813      	ldrb	r3, [r2, #0]
   80d66:	3301      	adds	r3, #1
   80d68:	b2db      	uxtb	r3, r3
   80d6a:	7013      	strb	r3, [r2, #0]
			//kill_fpga_power(); //lots of glitching on PIO?
		}
   80d6c:	bd10      	pop	{r4, pc}
		!pio_get(PIOB, PIO_INPUT, PIN_PGOOD_3V3_PIN))
   80d6e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80d72:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80d76:	4805      	ldr	r0, [pc, #20]	; (80d8c <pgood_alert_handler+0x40>)
   80d78:	47a0      	blx	r4
	if (pio_get(PIOC, PIO_INPUT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN) != (PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN) || 
   80d7a:	2800      	cmp	r0, #0
   80d7c:	d0f1      	beq.n	80d62 <pgood_alert_handler+0x16>
   80d7e:	bd10      	pop	{r4, pc}
   80d80:	400e1200 	.word	0x400e1200
   80d84:	00084591 	.word	0x00084591
   80d88:	20071696 	.word	0x20071696
   80d8c:	400e1000 	.word	0x400e1000

00080d90 <fpga_power_reset_handler>:
{
   80d90:	b538      	push	{r3, r4, r5, lr}
	if (!pio_get(PIOB, PIO_INPUT, PIN_FPGA_POWER_RESET_PIN)) {
   80d92:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80d96:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80d9a:	480d      	ldr	r0, [pc, #52]	; (80dd0 <fpga_power_reset_handler+0x40>)
   80d9c:	4b0d      	ldr	r3, [pc, #52]	; (80dd4 <fpga_power_reset_handler+0x44>)
   80d9e:	4798      	blx	r3
   80da0:	b958      	cbnz	r0, 80dba <fpga_power_reset_handler+0x2a>
   80da2:	4604      	mov	r4, r0
		power_killed = false;
   80da4:	4d0c      	ldr	r5, [pc, #48]	; (80dd8 <fpga_power_reset_handler+0x48>)
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   80da6:	203b      	movs	r0, #59	; 0x3b
   80da8:	4b0c      	ldr	r3, [pc, #48]	; (80ddc <fpga_power_reset_handler+0x4c>)
		power_killed = false;
   80daa:	702c      	strb	r4, [r5, #0]
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   80dac:	4798      	blx	r3
	fpga_pins(false);
   80dae:	4b0c      	ldr	r3, [pc, #48]	; (80de0 <fpga_power_reset_handler+0x50>)
   80db0:	4620      	mov	r0, r4
   80db2:	4798      	blx	r3
	power_killed = true;
   80db4:	2301      	movs	r3, #1
   80db6:	702b      	strb	r3, [r5, #0]
}
   80db8:	bd38      	pop	{r3, r4, r5, pc}
	gpio_set_pin_high(PIN_FPGA_PWR_ENABLE);
   80dba:	203b      	movs	r0, #59	; 0x3b
   80dbc:	4b09      	ldr	r3, [pc, #36]	; (80de4 <fpga_power_reset_handler+0x54>)
   80dbe:	4798      	blx	r3
	fpga_pins(true);
   80dc0:	4b07      	ldr	r3, [pc, #28]	; (80de0 <fpga_power_reset_handler+0x50>)
   80dc2:	2001      	movs	r0, #1
   80dc4:	4798      	blx	r3
	power_killed = false;
   80dc6:	2200      	movs	r2, #0
   80dc8:	4b03      	ldr	r3, [pc, #12]	; (80dd8 <fpga_power_reset_handler+0x48>)
   80dca:	701a      	strb	r2, [r3, #0]
}
   80dcc:	bd38      	pop	{r3, r4, r5, pc}
   80dce:	bf00      	nop
   80dd0:	400e1000 	.word	0x400e1000
   80dd4:	00084591 	.word	0x00084591
   80dd8:	20071695 	.word	0x20071695
   80ddc:	00084615 	.word	0x00084615
   80de0:	000804a9 	.word	0x000804a9
   80de4:	000845f9 	.word	0x000845f9

00080de8 <max1617_alert_handler>:
	if ((id == ID_PIOA) && (index == PIO_PA16) && (!pio_get(PIOA, PIO_INPUT, PIO_PA16))) {
   80de8:	280b      	cmp	r0, #11
   80dea:	d000      	beq.n	80dee <max1617_alert_handler+0x6>
   80dec:	4770      	bx	lr
   80dee:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   80df2:	d1fb      	bne.n	80dec <max1617_alert_handler+0x4>
   80df4:	460a      	mov	r2, r1
{
   80df6:	b570      	push	{r4, r5, r6, lr}
	if ((id == ID_PIOA) && (index == PIO_PA16) && (!pio_get(PIOA, PIO_INPUT, PIO_PA16))) {
   80df8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80dfc:	4808      	ldr	r0, [pc, #32]	; (80e20 <max1617_alert_handler+0x38>)
   80dfe:	4b09      	ldr	r3, [pc, #36]	; (80e24 <max1617_alert_handler+0x3c>)
   80e00:	4798      	blx	r3
   80e02:	4604      	mov	r4, r0
   80e04:	b100      	cbz	r0, 80e08 <max1617_alert_handler+0x20>
}
   80e06:	bd70      	pop	{r4, r5, r6, pc}
			power_killed = true;
   80e08:	2601      	movs	r6, #1
   80e0a:	4d07      	ldr	r5, [pc, #28]	; (80e28 <max1617_alert_handler+0x40>)
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   80e0c:	203b      	movs	r0, #59	; 0x3b
   80e0e:	4b07      	ldr	r3, [pc, #28]	; (80e2c <max1617_alert_handler+0x44>)
			power_killed = true;
   80e10:	702e      	strb	r6, [r5, #0]
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   80e12:	4798      	blx	r3
	fpga_pins(false);
   80e14:	4620      	mov	r0, r4
   80e16:	4b06      	ldr	r3, [pc, #24]	; (80e30 <max1617_alert_handler+0x48>)
   80e18:	4798      	blx	r3
	power_killed = true;
   80e1a:	702e      	strb	r6, [r5, #0]
}
   80e1c:	bd70      	pop	{r4, r5, r6, pc}
   80e1e:	bf00      	nop
   80e20:	400e0e00 	.word	0x400e0e00
   80e24:	00084591 	.word	0x00084591
   80e28:	20071695 	.word	0x20071695
   80e2c:	00084615 	.word	0x00084615
   80e30:	000804a9 	.word	0x000804a9

00080e34 <enable_switched_power>:
{
   80e34:	b508      	push	{r3, lr}
	gpio_configure_pin(PIN_SAM_SWITCHED_PWR_ENABLE, PIN_SAM_SWITCHED_PWR_ENABLE_FLAGS);
   80e36:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80e3a:	4b02      	ldr	r3, [pc, #8]	; (80e44 <enable_switched_power+0x10>)
   80e3c:	2004      	movs	r0, #4
   80e3e:	4798      	blx	r3
}
   80e40:	2000      	movs	r0, #0
   80e42:	bd08      	pop	{r3, pc}
   80e44:	00084655 	.word	0x00084655

00080e48 <max1617_register_read>:
{
   80e48:	b530      	push	{r4, r5, lr}
	twi_package_t max_packet = {
   80e4a:	f04f 0c00 	mov.w	ip, #0
   80e4e:	2301      	movs	r3, #1
   80e50:	f04f 0e18 	mov.w	lr, #24
	if (I2C_LOCK) {
   80e54:	4c0d      	ldr	r4, [pc, #52]	; (80e8c <max1617_register_read+0x44>)
{
   80e56:	b087      	sub	sp, #28
	if (I2C_LOCK) {
   80e58:	7822      	ldrb	r2, [r4, #0]
	twi_package_t max_packet = {
   80e5a:	f88d c005 	strb.w	ip, [sp, #5]
   80e5e:	f88d c006 	strb.w	ip, [sp, #6]
   80e62:	9103      	str	r1, [sp, #12]
   80e64:	f88d e014 	strb.w	lr, [sp, #20]
   80e68:	f88d 0004 	strb.w	r0, [sp, #4]
   80e6c:	9302      	str	r3, [sp, #8]
   80e6e:	9304      	str	r3, [sp, #16]
	if (I2C_LOCK) {
   80e70:	b94a      	cbnz	r2, 80e86 <max1617_register_read+0x3e>
	I2C_LOCK = 1;
   80e72:	f002 05ff 	and.w	r5, r2, #255	; 0xff
	int rtn = twi_master_read(MAX1617_I2C, &max_packet);
   80e76:	4806      	ldr	r0, [pc, #24]	; (80e90 <max1617_register_read+0x48>)
   80e78:	4a06      	ldr	r2, [pc, #24]	; (80e94 <max1617_register_read+0x4c>)
   80e7a:	a901      	add	r1, sp, #4
	I2C_LOCK = 1;
   80e7c:	7023      	strb	r3, [r4, #0]
	int rtn = twi_master_read(MAX1617_I2C, &max_packet);
   80e7e:	4790      	blx	r2
	I2C_LOCK = 0;
   80e80:	7025      	strb	r5, [r4, #0]
}
   80e82:	b007      	add	sp, #28
   80e84:	bd30      	pop	{r4, r5, pc}
		return -1;
   80e86:	f04f 30ff 	mov.w	r0, #4294967295
   80e8a:	e7fa      	b.n	80e82 <max1617_register_read+0x3a>
   80e8c:	20071694 	.word	0x20071694
   80e90:	4008c000 	.word	0x4008c000
   80e94:	000849a1 	.word	0x000849a1

00080e98 <max1617_register_write>:
{
   80e98:	b530      	push	{r4, r5, lr}
	twi_package_t max_packet = {
   80e9a:	f04f 0c00 	mov.w	ip, #0
   80e9e:	2301      	movs	r3, #1
   80ea0:	f04f 0e18 	mov.w	lr, #24
{
   80ea4:	b089      	sub	sp, #36	; 0x24
	if (I2C_LOCK) {
   80ea6:	4c0f      	ldr	r4, [pc, #60]	; (80ee4 <max1617_register_write+0x4c>)
	twi_package_t max_packet = {
   80ea8:	f10d 0207 	add.w	r2, sp, #7
   80eac:	9205      	str	r2, [sp, #20]
	if (I2C_LOCK) {
   80eae:	7822      	ldrb	r2, [r4, #0]
	twi_package_t max_packet = {
   80eb0:	f88d c00d 	strb.w	ip, [sp, #13]
   80eb4:	f88d c00e 	strb.w	ip, [sp, #14]
   80eb8:	f88d e01c 	strb.w	lr, [sp, #28]
{
   80ebc:	f88d 1007 	strb.w	r1, [sp, #7]
	twi_package_t max_packet = {
   80ec0:	f88d 000c 	strb.w	r0, [sp, #12]
   80ec4:	9304      	str	r3, [sp, #16]
   80ec6:	9306      	str	r3, [sp, #24]
	if (I2C_LOCK) {
   80ec8:	b94a      	cbnz	r2, 80ede <max1617_register_write+0x46>
	I2C_LOCK = 1;
   80eca:	f002 05ff 	and.w	r5, r2, #255	; 0xff
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80ece:	4806      	ldr	r0, [pc, #24]	; (80ee8 <max1617_register_write+0x50>)
   80ed0:	4a06      	ldr	r2, [pc, #24]	; (80eec <max1617_register_write+0x54>)
   80ed2:	a903      	add	r1, sp, #12
	I2C_LOCK = 1;
   80ed4:	7023      	strb	r3, [r4, #0]
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80ed6:	4790      	blx	r2
	I2C_LOCK = 0;
   80ed8:	7025      	strb	r5, [r4, #0]
}
   80eda:	b009      	add	sp, #36	; 0x24
   80edc:	bd30      	pop	{r4, r5, pc}
		return -1;
   80ede:	f04f 30ff 	mov.w	r0, #4294967295
   80ee2:	e7fa      	b.n	80eda <max1617_register_write+0x42>
   80ee4:	20071694 	.word	0x20071694
   80ee8:	4008c000 	.word	0x4008c000
   80eec:	00084a79 	.word	0x00084a79

00080ef0 <power_init>:
{
   80ef0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	pmc_enable_periph_clk(ID_PIOC);
   80ef4:	200d      	movs	r0, #13
{
   80ef6:	b083      	sub	sp, #12
	pio_configure_pin_group(PIN_PGOOD_VCCINT_PORT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80ef8:	4d1f      	ldr	r5, [pc, #124]	; (80f78 <power_init+0x88>)
	pmc_enable_periph_clk(ID_PIOC);
   80efa:	4c20      	ldr	r4, [pc, #128]	; (80f7c <power_init+0x8c>)
	pio_configure_pin_group(PIN_PGOOD_VCCINT_PORT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80efc:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80f80 <power_init+0x90>
	pmc_enable_periph_clk(ID_PIOC);
   80f00:	47a0      	blx	r4
	pio_handler_set(PIN_PGOOD_VCCINT_PORT, ID_PIOC, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIO_IT_FALL_EDGE, pgood_alert_handler);
   80f02:	4f20      	ldr	r7, [pc, #128]	; (80f84 <power_init+0x94>)
	pmc_enable_periph_clk(ID_PIOB);
   80f04:	200c      	movs	r0, #12
   80f06:	47a0      	blx	r4
	pio_configure_pin_group(PIN_PGOOD_VCCINT_PORT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80f08:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80f88 <power_init+0x98>
   80f0c:	464a      	mov	r2, r9
   80f0e:	f44f 11c8 	mov.w	r1, #1638400	; 0x190000
   80f12:	4628      	mov	r0, r5
   80f14:	47c0      	blx	r8
	pio_configure_pin_group(PIN_PGOOD_3V3_PORT, PIN_PGOOD_3V3_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80f16:	4c1d      	ldr	r4, [pc, #116]	; (80f8c <power_init+0x9c>)
	pio_handler_set(PIN_PGOOD_VCCINT_PORT, ID_PIOC, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIO_IT_FALL_EDGE, pgood_alert_handler);
   80f18:	2350      	movs	r3, #80	; 0x50
   80f1a:	f44f 12c8 	mov.w	r2, #1638400	; 0x190000
   80f1e:	4e1c      	ldr	r6, [pc, #112]	; (80f90 <power_init+0xa0>)
   80f20:	210d      	movs	r1, #13
   80f22:	4628      	mov	r0, r5
   80f24:	9700      	str	r7, [sp, #0]
   80f26:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PGOOD_VCCINT_PORT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN);
   80f28:	4628      	mov	r0, r5
   80f2a:	f44f 11c8 	mov.w	r1, #1638400	; 0x190000
   80f2e:	4d19      	ldr	r5, [pc, #100]	; (80f94 <power_init+0xa4>)
   80f30:	47a8      	blx	r5
	pio_configure_pin_group(PIN_PGOOD_3V3_PORT, PIN_PGOOD_3V3_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80f32:	464a      	mov	r2, r9
   80f34:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80f38:	4620      	mov	r0, r4
   80f3a:	47c0      	blx	r8
	pio_handler_set(PIN_PGOOD_3V3_PORT, ID_PIOB, PIN_PGOOD_3V3_PIN, PIO_IT_FALL_EDGE, pgood_alert_handler);
   80f3c:	2350      	movs	r3, #80	; 0x50
   80f3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80f42:	210c      	movs	r1, #12
   80f44:	4620      	mov	r0, r4
   80f46:	9700      	str	r7, [sp, #0]
   80f48:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PGOOD_3V3_PORT, PIN_PGOOD_3V3_PIN);
   80f4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80f4e:	4620      	mov	r0, r4
   80f50:	47a8      	blx	r5
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80f52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80f56:	4b10      	ldr	r3, [pc, #64]	; (80f98 <power_init+0xa8>)
   80f58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   80f5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   80f60:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   80f64:	2190      	movs	r1, #144	; 0x90
}
   80f66:	2000      	movs	r0, #0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80f68:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   80f6c:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80f70:	601a      	str	r2, [r3, #0]
   80f72:	b003      	add	sp, #12
   80f74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80f78:	400e1200 	.word	0x400e1200
   80f7c:	000843f1 	.word	0x000843f1
   80f80:	2800000a 	.word	0x2800000a
   80f84:	00080d4d 	.word	0x00080d4d
   80f88:	0008474d 	.word	0x0008474d
   80f8c:	400e1000 	.word	0x400e1000
   80f90:	0008411d 	.word	0x0008411d
   80f94:	000845d1 	.word	0x000845d1
   80f98:	e000e100 	.word	0xe000e100

00080f9c <thermals_init>:
{	
   80f9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80fa0:	2007      	movs	r0, #7
	twi_package_t max_packet = {
   80fa2:	2601      	movs	r6, #1
   80fa4:	210a      	movs	r1, #10
   80fa6:	2200      	movs	r2, #0
   80fa8:	f04f 0818 	mov.w	r8, #24
{	
   80fac:	b089      	sub	sp, #36	; 0x24
	if (I2C_LOCK) {
   80fae:	4f3d      	ldr	r7, [pc, #244]	; (810a4 <thermals_init+0x108>)
	twi_package_t max_packet = {
   80fb0:	f10d 030b 	add.w	r3, sp, #11
   80fb4:	9305      	str	r3, [sp, #20]
	if (I2C_LOCK) {
   80fb6:	783b      	ldrb	r3, [r7, #0]
	twi_package_t max_packet = {
   80fb8:	9604      	str	r6, [sp, #16]
   80fba:	f88d 000b 	strb.w	r0, [sp, #11]
   80fbe:	f8ad 100c 	strh.w	r1, [sp, #12]
   80fc2:	f88d 200e 	strb.w	r2, [sp, #14]
   80fc6:	9606      	str	r6, [sp, #24]
   80fc8:	f88d 801c 	strb.w	r8, [sp, #28]
	if (I2C_LOCK) {
   80fcc:	2b00      	cmp	r3, #0
   80fce:	d166      	bne.n	8109e <thermals_init+0x102>
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80fd0:	4835      	ldr	r0, [pc, #212]	; (810a8 <thermals_init+0x10c>)
   80fd2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 810ac <thermals_init+0x110>
   80fd6:	a903      	add	r1, sp, #12
   80fd8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
	I2C_LOCK = 1;
   80fdc:	703e      	strb	r6, [r7, #0]
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80fde:	47c8      	blx	r9
	I2C_LOCK = 0;
   80fe0:	703d      	strb	r5, [r7, #0]
	if (rtn != TWI_SUCCESS)
   80fe2:	4604      	mov	r4, r0
   80fe4:	b118      	cbz	r0, 80fee <thermals_init+0x52>
}
   80fe6:	4620      	mov	r0, r4
   80fe8:	b009      	add	sp, #36	; 0x24
   80fea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	twi_package_t max_packet = {
   80fee:	f10d 030b 	add.w	r3, sp, #11
   80ff2:	e9cd 6304 	strd	r6, r3, [sp, #16]
   80ff6:	f88d 801c 	strb.w	r8, [sp, #28]
   80ffa:	230d      	movs	r3, #13
   80ffc:	f04f 0850 	mov.w	r8, #80	; 0x50
	if (I2C_LOCK) {
   81000:	783a      	ldrb	r2, [r7, #0]
	twi_package_t max_packet = {
   81002:	f88d 000e 	strb.w	r0, [sp, #14]
   81006:	9606      	str	r6, [sp, #24]
   81008:	f8ad 300c 	strh.w	r3, [sp, #12]
   8100c:	f88d 800b 	strb.w	r8, [sp, #11]
	if (I2C_LOCK) {
   81010:	f002 05ff 	and.w	r5, r2, #255	; 0xff
   81014:	2a00      	cmp	r2, #0
   81016:	d142      	bne.n	8109e <thermals_init+0x102>
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   81018:	4823      	ldr	r0, [pc, #140]	; (810a8 <thermals_init+0x10c>)
   8101a:	a903      	add	r1, sp, #12
	I2C_LOCK = 1;
   8101c:	703e      	strb	r6, [r7, #0]
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   8101e:	47c8      	blx	r9
	I2C_LOCK = 0;
   81020:	703d      	strb	r5, [r7, #0]
	if (rtn != TWI_SUCCESS)
   81022:	4604      	mov	r4, r0
   81024:	2800      	cmp	r0, #0
   81026:	d1de      	bne.n	80fe6 <thermals_init+0x4a>
	gpio_configure_pin(PIN_TEMP_ALERT, PIN_TEMP_ALERT_FLAGS);
   81028:	4d21      	ldr	r5, [pc, #132]	; (810b0 <thermals_init+0x114>)
   8102a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8102e:	2017      	movs	r0, #23
   81030:	47a8      	blx	r5
	pio_handler_set(PIN_TEMP_ALERT_PORT, ID_PIOA, PIN_TEMP_ALERT_PIN, PIO_IT_FALL_EDGE, max1617_alert_handler);
   81032:	4a20      	ldr	r2, [pc, #128]	; (810b4 <thermals_init+0x118>)
   81034:	4643      	mov	r3, r8
   81036:	9200      	str	r2, [sp, #0]
   81038:	f8df 807c 	ldr.w	r8, [pc, #124]	; 810b8 <thermals_init+0x11c>
   8103c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   81040:	210b      	movs	r1, #11
   81042:	481e      	ldr	r0, [pc, #120]	; (810bc <thermals_init+0x120>)
   81044:	47c0      	blx	r8
	pio_enable_interrupt(PIOA, PIN_TEMP_ALERT_PIN);
   81046:	4f1e      	ldr	r7, [pc, #120]	; (810c0 <thermals_init+0x124>)
   81048:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   8104c:	481b      	ldr	r0, [pc, #108]	; (810bc <thermals_init+0x120>)
   8104e:	47b8      	blx	r7
	gpio_configure_pin(PIN_FPGA_POWER_RESET, PIN_FPGA_POWER_RESET_FLAGS);
   81050:	491c      	ldr	r1, [pc, #112]	; (810c4 <thermals_init+0x128>)
   81052:	2037      	movs	r0, #55	; 0x37
   81054:	47a8      	blx	r5
	pio_handler_set(PIN_FPGA_POWER_RESET_PORT, ID_PIOB, PIN_FPGA_POWER_RESET_PIN, 0, fpga_power_reset_handler);
   81056:	4b1c      	ldr	r3, [pc, #112]	; (810c8 <thermals_init+0x12c>)
   81058:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8105c:	9300      	str	r3, [sp, #0]
   8105e:	210c      	movs	r1, #12
   81060:	4623      	mov	r3, r4
   81062:	481a      	ldr	r0, [pc, #104]	; (810cc <thermals_init+0x130>)
   81064:	47c0      	blx	r8
	pio_enable_interrupt(PIOB, PIN_FPGA_POWER_RESET_PIN);
   81066:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   8106a:	4818      	ldr	r0, [pc, #96]	; (810cc <thermals_init+0x130>)
   8106c:	47b8      	blx	r7
   8106e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81072:	f44f 6100 	mov.w	r1, #2048	; 0x800
	gpio_configure_pin(PIN_TEMP_ERR_LED, PIN_TEMP_ERR_LED_FLAGS);
   81076:	4620      	mov	r0, r4
	return 0x01;
   81078:	4634      	mov	r4, r6
   8107a:	4b15      	ldr	r3, [pc, #84]	; (810d0 <thermals_init+0x134>)
   8107c:	6019      	str	r1, [r3, #0]
   8107e:	601a      	str	r2, [r3, #0]
	gpio_configure_pin(PIN_TEMP_ERR_LED, PIN_TEMP_ERR_LED_FLAGS);
   81080:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81084:	47a8      	blx	r5
	gpio_configure_pin(PIN_TEMP_OK_LED, PIN_TEMP_OK_LED_FLAGS);
   81086:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8108a:	4630      	mov	r0, r6
   8108c:	47a8      	blx	r5
	gpio_configure_pin(PIN_FPGA_PWR_ENABLE, PIN_FPGA_PWR_ENABLE_FLAGS);
   8108e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   81092:	203b      	movs	r0, #59	; 0x3b
   81094:	47a8      	blx	r5
}
   81096:	4620      	mov	r0, r4
   81098:	b009      	add	sp, #36	; 0x24
   8109a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -1;
   8109e:	f04f 34ff 	mov.w	r4, #4294967295
   810a2:	e7a0      	b.n	80fe6 <thermals_init+0x4a>
   810a4:	20071694 	.word	0x20071694
   810a8:	4008c000 	.word	0x4008c000
   810ac:	00084a79 	.word	0x00084a79
   810b0:	00084655 	.word	0x00084655
   810b4:	00080de9 	.word	0x00080de9
   810b8:	0008411d 	.word	0x0008411d
   810bc:	400e0e00 	.word	0x400e0e00
   810c0:	000845d1 	.word	0x000845d1
   810c4:	2800000b 	.word	0x2800000b
   810c8:	00080d91 	.word	0x00080d91
   810cc:	400e1000 	.word	0x400e1000
   810d0:	e000e100 	.word	0xe000e100

000810d4 <thermals_slow_tick>:
{
   810d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	twi_package_t max_packet = {
   810d6:	2218      	movs	r2, #24
   810d8:	2501      	movs	r5, #1
	int8_t temp = 0;
   810da:	2400      	movs	r4, #0
{
   810dc:	b087      	sub	sp, #28
	if (I2C_LOCK) {
   810de:	4e49      	ldr	r6, [pc, #292]	; (81204 <thermals_slow_tick+0x130>)
	twi_package_t max_packet = {
   810e0:	f10d 0303 	add.w	r3, sp, #3
   810e4:	9303      	str	r3, [sp, #12]
	if (I2C_LOCK) {
   810e6:	7833      	ldrb	r3, [r6, #0]
	twi_package_t max_packet = {
   810e8:	f8ad 5004 	strh.w	r5, [sp, #4]
	int8_t temp = 0;
   810ec:	f88d 4003 	strb.w	r4, [sp, #3]
	twi_package_t max_packet = {
   810f0:	f88d 4006 	strb.w	r4, [sp, #6]
   810f4:	9502      	str	r5, [sp, #8]
   810f6:	9504      	str	r5, [sp, #16]
   810f8:	f88d 2014 	strb.w	r2, [sp, #20]
	if (I2C_LOCK) {
   810fc:	2b00      	cmp	r3, #0
   810fe:	d140      	bne.n	81182 <thermals_slow_tick+0xae>
	I2C_LOCK = 1;
   81100:	f003 07ff 	and.w	r7, r3, #255	; 0xff
	int rtn = twi_master_read(MAX1617_I2C, &max_packet);
   81104:	4840      	ldr	r0, [pc, #256]	; (81208 <thermals_slow_tick+0x134>)
   81106:	4b41      	ldr	r3, [pc, #260]	; (8120c <thermals_slow_tick+0x138>)
   81108:	a901      	add	r1, sp, #4
	I2C_LOCK = 1;
   8110a:	7035      	strb	r5, [r6, #0]
	int rtn = twi_master_read(MAX1617_I2C, &max_packet);
   8110c:	4798      	blx	r3
	return temp;
   8110e:	f99d 4003 	ldrsb.w	r4, [sp, #3]
	I2C_LOCK = 0;
   81112:	7037      	strb	r7, [r6, #0]
	if (fpga_temp == 0){
   81114:	2c00      	cmp	r4, #0
   81116:	d034      	beq.n	81182 <thermals_slow_tick+0xae>
	if (fpga_temp >= MAX1617_KILL_TEMP) {
   81118:	2c40      	cmp	r4, #64	; 0x40
   8111a:	dc64      	bgt.n	811e6 <thermals_slow_tick+0x112>
	} else if (fpga_temp >= MAX1617_MAX_TEMP) {
   8111c:	2c36      	cmp	r4, #54	; 0x36
   8111e:	dd41      	ble.n	811a4 <thermals_slow_tick+0xd0>
		if (!power_killed) {
   81120:	4a3b      	ldr	r2, [pc, #236]	; (81210 <thermals_slow_tick+0x13c>)
		gpio_set_pin_low(PIN_TEMP_OK_LED);
   81122:	4628      	mov	r0, r5
   81124:	4b3b      	ldr	r3, [pc, #236]	; (81214 <thermals_slow_tick+0x140>)
		if (!power_killed) {
   81126:	7812      	ldrb	r2, [r2, #0]
		gpio_set_pin_low(PIN_TEMP_OK_LED);
   81128:	4798      	blx	r3
		gpio_set_pin_high(PIN_TEMP_ERR_LED);
   8112a:	4638      	mov	r0, r7
   8112c:	4b3a      	ldr	r3, [pc, #232]	; (81218 <thermals_slow_tick+0x144>)
   8112e:	4798      	blx	r3
	fpga_temp = min(MAX1617_FULL_FAN_TEMP, fpga_temp);
   81130:	2c32      	cmp	r4, #50	; 0x32
   81132:	bfa8      	it	ge
   81134:	2432      	movge	r4, #50	; 0x32
	fpga_temp = max(MAX1617_OFF_FAN_TEMP, fpga_temp);
   81136:	2c23      	cmp	r4, #35	; 0x23
   81138:	bfb8      	it	lt
   8113a:	2423      	movlt	r4, #35	; 0x23
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   8113c:	2064      	movs	r0, #100	; 0x64
	unsigned int fan_pwm = fpga_temp - MAX1617_OFF_FAN_TEMP;
   8113e:	3c23      	subs	r4, #35	; 0x23
   81140:	b264      	sxtb	r4, r4
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   81142:	fb00 f404 	mul.w	r4, r0, r4
   81146:	4935      	ldr	r1, [pc, #212]	; (8121c <thermals_slow_tick+0x148>)
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   81148:	f44f 7224 	mov.w	r2, #656	; 0x290
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   8114c:	fba1 1404 	umull	r1, r4, r1, r4
   81150:	08e4      	lsrs	r4, r4, #3
	fan_pwm = min(99, fan_pwm);
   81152:	2c63      	cmp	r4, #99	; 0x63
   81154:	bf28      	it	cs
   81156:	2463      	movcs	r4, #99	; 0x63
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   81158:	1b04      	subs	r4, r0, r4
   8115a:	fb02 f404 	mul.w	r4, r2, r4
   8115e:	4b30      	ldr	r3, [pc, #192]	; (81220 <thermals_slow_tick+0x14c>)
   81160:	fba3 3404 	umull	r3, r4, r3, r4
   81164:	0964      	lsrs	r4, r4, #5
	tc_write_rc(TC0, FAN_PWM_TIMER_CHANNEL, rc);
   81166:	2100      	movs	r1, #0
   81168:	f44f 7224 	mov.w	r2, #656	; 0x290
   8116c:	482d      	ldr	r0, [pc, #180]	; (81224 <thermals_slow_tick+0x150>)
   8116e:	4b2e      	ldr	r3, [pc, #184]	; (81228 <thermals_slow_tick+0x154>)
   81170:	4798      	blx	r3
	tc_write_ra(TC0, FAN_PWM_TIMER_CHANNEL, ra);
   81172:	4622      	mov	r2, r4
   81174:	2100      	movs	r1, #0
   81176:	482b      	ldr	r0, [pc, #172]	; (81224 <thermals_slow_tick+0x150>)
   81178:	4b2c      	ldr	r3, [pc, #176]	; (8122c <thermals_slow_tick+0x158>)
   8117a:	4798      	blx	r3
}
   8117c:	2000      	movs	r0, #0
   8117e:	b007      	add	sp, #28
   81180:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gpio_set_pin_high(PIN_TEMP_OK_LED);
   81182:	4628      	mov	r0, r5
   81184:	4b24      	ldr	r3, [pc, #144]	; (81218 <thermals_slow_tick+0x144>)
   81186:	4798      	blx	r3
		gpio_set_pin_low(PIN_TEMP_ERR_LED);
   81188:	4620      	mov	r0, r4
   8118a:	4b22      	ldr	r3, [pc, #136]	; (81214 <thermals_slow_tick+0x140>)
   8118c:	4798      	blx	r3
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   8118e:	f44f 7224 	mov.w	r2, #656	; 0x290
   81192:	f1c4 0464 	rsb	r4, r4, #100	; 0x64
   81196:	fb02 f404 	mul.w	r4, r2, r4
   8119a:	4b21      	ldr	r3, [pc, #132]	; (81220 <thermals_slow_tick+0x14c>)
   8119c:	fba3 3404 	umull	r3, r4, r3, r4
   811a0:	0964      	lsrs	r4, r4, #5
   811a2:	e7e0      	b.n	81166 <thermals_slow_tick+0x92>
	fpga_temp = max(MAX1617_OFF_FAN_TEMP, fpga_temp);
   811a4:	2c32      	cmp	r4, #50	; 0x32
   811a6:	bfa8      	it	ge
   811a8:	2432      	movge	r4, #50	; 0x32
   811aa:	2c23      	cmp	r4, #35	; 0x23
   811ac:	bfb8      	it	lt
   811ae:	2423      	movlt	r4, #35	; 0x23
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   811b0:	2164      	movs	r1, #100	; 0x64
		gpio_set_pin_high(PIN_TEMP_OK_LED);
   811b2:	4628      	mov	r0, r5
	unsigned int fan_pwm = fpga_temp - MAX1617_OFF_FAN_TEMP;
   811b4:	f1a4 0523 	sub.w	r5, r4, #35	; 0x23
   811b8:	b26d      	sxtb	r5, r5
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   811ba:	fb01 f505 	mul.w	r5, r1, r5
   811be:	4b17      	ldr	r3, [pc, #92]	; (8121c <thermals_slow_tick+0x148>)
		gpio_set_pin_high(PIN_TEMP_OK_LED);
   811c0:	4a15      	ldr	r2, [pc, #84]	; (81218 <thermals_slow_tick+0x144>)
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   811c2:	fba3 3405 	umull	r3, r4, r3, r5
		gpio_set_pin_high(PIN_TEMP_OK_LED);
   811c6:	4790      	blx	r2
		gpio_set_pin_low(PIN_TEMP_ERR_LED);
   811c8:	4b12      	ldr	r3, [pc, #72]	; (81214 <thermals_slow_tick+0x140>)
   811ca:	4638      	mov	r0, r7
   811cc:	4798      	blx	r3
	if (fan_pwm > 0){
   811ce:	f240 5381 	movw	r3, #1409	; 0x581
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   811d2:	08e4      	lsrs	r4, r4, #3
	fan_pwm = min(99, fan_pwm);
   811d4:	2c63      	cmp	r4, #99	; 0x63
	if (fan_pwm > 0){
   811d6:	f1a5 050f 	sub.w	r5, r5, #15
	fan_pwm = min(99, fan_pwm);
   811da:	bf28      	it	cs
   811dc:	2463      	movcs	r4, #99	; 0x63
	if (fan_pwm > 0){
   811de:	429d      	cmp	r5, r3
   811e0:	d8d5      	bhi.n	8118e <thermals_slow_tick+0xba>
   811e2:	2420      	movs	r4, #32
   811e4:	e7bf      	b.n	81166 <thermals_slow_tick+0x92>
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   811e6:	4e0b      	ldr	r6, [pc, #44]	; (81214 <thermals_slow_tick+0x140>)
   811e8:	203b      	movs	r0, #59	; 0x3b
   811ea:	47b0      	blx	r6
	fpga_pins(false);
   811ec:	4638      	mov	r0, r7
   811ee:	4b10      	ldr	r3, [pc, #64]	; (81230 <thermals_slow_tick+0x15c>)
   811f0:	4798      	blx	r3
	power_killed = true;
   811f2:	4b07      	ldr	r3, [pc, #28]	; (81210 <thermals_slow_tick+0x13c>)
		gpio_set_pin_low(PIN_TEMP_OK_LED);
   811f4:	4628      	mov	r0, r5
	power_killed = true;
   811f6:	701d      	strb	r5, [r3, #0]
		power_killed = true;
   811f8:	701d      	strb	r5, [r3, #0]
		gpio_set_pin_low(PIN_TEMP_OK_LED);
   811fa:	47b0      	blx	r6
		gpio_set_pin_high(PIN_TEMP_ERR_LED);
   811fc:	4638      	mov	r0, r7
   811fe:	4b06      	ldr	r3, [pc, #24]	; (81218 <thermals_slow_tick+0x144>)
   81200:	4798      	blx	r3
   81202:	e795      	b.n	81130 <thermals_slow_tick+0x5c>
   81204:	20071694 	.word	0x20071694
   81208:	4008c000 	.word	0x4008c000
   8120c:	000849a1 	.word	0x000849a1
   81210:	20071695 	.word	0x20071695
   81214:	00084615 	.word	0x00084615
   81218:	000845f9 	.word	0x000845f9
   8121c:	88888889 	.word	0x88888889
   81220:	51eb851f 	.word	0x51eb851f
   81224:	40080000 	.word	0x40080000
   81228:	00086cf1 	.word	0x00086cf1
   8122c:	00086ce9 	.word	0x00086ce9
   81230:	000804a9 	.word	0x000804a9

00081234 <thermals_fast_tick>:
{
   81234:	b508      	push	{r3, lr}
	if (power_killed) {
   81236:	4b05      	ldr	r3, [pc, #20]	; (8124c <thermals_fast_tick+0x18>)
   81238:	781b      	ldrb	r3, [r3, #0]
   8123a:	b90b      	cbnz	r3, 81240 <thermals_fast_tick+0xc>
}
   8123c:	2000      	movs	r0, #0
   8123e:	bd08      	pop	{r3, pc}
		gpio_toggle_pin(PIN_TEMP_ERR_LED);
   81240:	2000      	movs	r0, #0
   81242:	4b03      	ldr	r3, [pc, #12]	; (81250 <thermals_fast_tick+0x1c>)
   81244:	4798      	blx	r3
}
   81246:	2000      	movs	r0, #0
   81248:	bd08      	pop	{r3, pc}
   8124a:	bf00      	nop
   8124c:	20071695 	.word	0x20071695
   81250:	00084631 	.word	0x00084631

00081254 <enable_fpga_power>:
{
   81254:	b508      	push	{r3, lr}
	gpio_set_pin_high(PIN_FPGA_PWR_ENABLE);
   81256:	203b      	movs	r0, #59	; 0x3b
   81258:	4b04      	ldr	r3, [pc, #16]	; (8126c <enable_fpga_power+0x18>)
   8125a:	4798      	blx	r3
	fpga_pins(true);
   8125c:	4b04      	ldr	r3, [pc, #16]	; (81270 <enable_fpga_power+0x1c>)
   8125e:	2001      	movs	r0, #1
   81260:	4798      	blx	r3
	power_killed = false;
   81262:	2200      	movs	r2, #0
   81264:	4b03      	ldr	r3, [pc, #12]	; (81274 <enable_fpga_power+0x20>)
   81266:	701a      	strb	r2, [r3, #0]
}
   81268:	bd08      	pop	{r3, pc}
   8126a:	bf00      	nop
   8126c:	000845f9 	.word	0x000845f9
   81270:	000804a9 	.word	0x000804a9
   81274:	20071695 	.word	0x20071695

00081278 <kill_fpga_power>:
{
   81278:	b508      	push	{r3, lr}
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   8127a:	203b      	movs	r0, #59	; 0x3b
   8127c:	4b04      	ldr	r3, [pc, #16]	; (81290 <kill_fpga_power+0x18>)
   8127e:	4798      	blx	r3
	fpga_pins(false);
   81280:	4b04      	ldr	r3, [pc, #16]	; (81294 <kill_fpga_power+0x1c>)
   81282:	2000      	movs	r0, #0
   81284:	4798      	blx	r3
	power_killed = true;
   81286:	2201      	movs	r2, #1
   81288:	4b03      	ldr	r3, [pc, #12]	; (81298 <kill_fpga_power+0x20>)
   8128a:	701a      	strb	r2, [r3, #0]
}
   8128c:	bd08      	pop	{r3, pc}
   8128e:	bf00      	nop
   81290:	00084615 	.word	0x00084615
   81294:	000804a9 	.word	0x000804a9
   81298:	20071695 	.word	0x20071695

0008129c <fan_pwm_init>:
{
   8129c:	b510      	push	{r4, lr}
	tc_init(TC0, FAN_PWM_TIMER_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_WAVE | TC_CMR_ACPA_SET | TC_CMR_ACPC_CLEAR | TC_CMR_CPCTRG);
   8129e:	4c0e      	ldr	r4, [pc, #56]	; (812d8 <fan_pwm_init+0x3c>)
	pmc_enable_periph_clk(ID_TC0);
   812a0:	4b0e      	ldr	r3, [pc, #56]	; (812dc <fan_pwm_init+0x40>)
   812a2:	201b      	movs	r0, #27
   812a4:	4798      	blx	r3
	tc_init(TC0, FAN_PWM_TIMER_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_WAVE | TC_CMR_ACPA_SET | TC_CMR_ACPC_CLEAR | TC_CMR_CPCTRG);
   812a6:	4620      	mov	r0, r4
   812a8:	f44f 221c 	mov.w	r2, #638976	; 0x9c000
   812ac:	2100      	movs	r1, #0
   812ae:	4b0c      	ldr	r3, [pc, #48]	; (812e0 <fan_pwm_init+0x44>)
   812b0:	4798      	blx	r3
	tc_write_rc(TC0, FAN_PWM_TIMER_CHANNEL, rc);
   812b2:	4620      	mov	r0, r4
   812b4:	f44f 7224 	mov.w	r2, #656	; 0x290
   812b8:	2100      	movs	r1, #0
   812ba:	4b0a      	ldr	r3, [pc, #40]	; (812e4 <fan_pwm_init+0x48>)
   812bc:	4798      	blx	r3
	tc_write_ra(TC0, FAN_PWM_TIMER_CHANNEL, ra);
   812be:	f44f 72a4 	mov.w	r2, #328	; 0x148
   812c2:	4620      	mov	r0, r4
   812c4:	2100      	movs	r1, #0
   812c6:	4b08      	ldr	r3, [pc, #32]	; (812e8 <fan_pwm_init+0x4c>)
   812c8:	4798      	blx	r3
	tc_start(TC0, FAN_PWM_TIMER_CHANNEL);
   812ca:	4620      	mov	r0, r4
   812cc:	2100      	movs	r1, #0
   812ce:	4b07      	ldr	r3, [pc, #28]	; (812ec <fan_pwm_init+0x50>)
   812d0:	4798      	blx	r3
}
   812d2:	2000      	movs	r0, #0
   812d4:	bd10      	pop	{r4, pc}
   812d6:	bf00      	nop
   812d8:	40080000 	.word	0x40080000
   812dc:	000843f1 	.word	0x000843f1
   812e0:	00086cc1 	.word	0x00086cc1
   812e4:	00086cf1 	.word	0x00086cf1
   812e8:	00086ce9 	.word	0x00086ce9
   812ec:	00086ce1 	.word	0x00086ce1

000812f0 <fan_pwm_set_duty_cycle>:
{
   812f0:	b570      	push	{r4, r5, r6, lr}
	tc_write_rc(TC0, FAN_PWM_TIMER_CHANNEL, rc);
   812f2:	4d0c      	ldr	r5, [pc, #48]	; (81324 <fan_pwm_set_duty_cycle+0x34>)
{
   812f4:	4604      	mov	r4, r0
	tc_write_rc(TC0, FAN_PWM_TIMER_CHANNEL, rc);
   812f6:	f44f 7224 	mov.w	r2, #656	; 0x290
   812fa:	4628      	mov	r0, r5
   812fc:	2100      	movs	r1, #0
   812fe:	4b0a      	ldr	r3, [pc, #40]	; (81328 <fan_pwm_set_duty_cycle+0x38>)
   81300:	4798      	blx	r3
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   81302:	f44f 7c24 	mov.w	ip, #656	; 0x290
   81306:	f1c4 0264 	rsb	r2, r4, #100	; 0x64
   8130a:	fb0c f202 	mul.w	r2, ip, r2
   8130e:	4e07      	ldr	r6, [pc, #28]	; (8132c <fan_pwm_set_duty_cycle+0x3c>)
	tc_write_ra(TC0, FAN_PWM_TIMER_CHANNEL, ra);
   81310:	4628      	mov	r0, r5
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   81312:	fba6 4202 	umull	r4, r2, r6, r2
	tc_write_ra(TC0, FAN_PWM_TIMER_CHANNEL, ra);
   81316:	2100      	movs	r1, #0
   81318:	4b05      	ldr	r3, [pc, #20]	; (81330 <fan_pwm_set_duty_cycle+0x40>)
   8131a:	0952      	lsrs	r2, r2, #5
   8131c:	4798      	blx	r3
}
   8131e:	2000      	movs	r0, #0
   81320:	bd70      	pop	{r4, r5, r6, pc}
   81322:	bf00      	nop
   81324:	40080000 	.word	0x40080000
   81328:	00086cf1 	.word	0x00086cf1
   8132c:	51eb851f 	.word	0x51eb851f
   81330:	00086ce9 	.word	0x00086ce9

00081334 <pgood_tick>:
	power_toggles = 0;
   81334:	2000      	movs	r0, #0
   81336:	4b01      	ldr	r3, [pc, #4]	; (8133c <pgood_tick+0x8>)
   81338:	7018      	strb	r0, [r3, #0]
}
   8133a:	4770      	bx	lr
   8133c:	20071696 	.word	0x20071696

00081340 <check_power_state>:
{
   81340:	b538      	push	{r3, r4, r5, lr}
	if (board_get_powerstate() != last_power_state){
   81342:	203a      	movs	r0, #58	; 0x3a
   81344:	4c0c      	ldr	r4, [pc, #48]	; (81378 <check_power_state+0x38>)
   81346:	47a0      	blx	r4
   81348:	3800      	subs	r0, #0
   8134a:	bf18      	it	ne
   8134c:	2001      	movne	r0, #1
   8134e:	4d0b      	ldr	r5, [pc, #44]	; (8137c <check_power_state+0x3c>)
   81350:	782b      	ldrb	r3, [r5, #0]
   81352:	4298      	cmp	r0, r3
   81354:	d100      	bne.n	81358 <check_power_state+0x18>
}
   81356:	bd38      	pop	{r3, r4, r5, pc}
		if (board_get_powerstate()){
   81358:	203a      	movs	r0, #58	; 0x3a
   8135a:	47a0      	blx	r4
   8135c:	b148      	cbz	r0, 81372 <check_power_state+0x32>
			fpga_pins(true);
   8135e:	2001      	movs	r0, #1
   81360:	4b07      	ldr	r3, [pc, #28]	; (81380 <check_power_state+0x40>)
   81362:	4798      	blx	r3
		last_power_state = board_get_powerstate();
   81364:	203a      	movs	r0, #58	; 0x3a
   81366:	47a0      	blx	r4
   81368:	3800      	subs	r0, #0
   8136a:	bf18      	it	ne
   8136c:	2001      	movne	r0, #1
   8136e:	7028      	strb	r0, [r5, #0]
}
   81370:	bd38      	pop	{r3, r4, r5, pc}
			fpga_pins(false);
   81372:	4b03      	ldr	r3, [pc, #12]	; (81380 <check_power_state+0x40>)
   81374:	4798      	blx	r3
   81376:	e7f5      	b.n	81364 <check_power_state+0x24>
   81378:	000845dd 	.word	0x000845dd
   8137c:	20070208 	.word	0x20070208
   81380:	000804a9 	.word	0x000804a9

00081384 <periodic_timer_init>:
#include "timers.h"

#define PERIODIC_TIMER_CHANNEL 1

int periodic_timer_init(void)
{
   81384:	b538      	push	{r3, r4, r5, lr}
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81386:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
	pmc_enable_periph_clk(ID_TC1); //ahhhhh
	
	tc_init(TC0, PERIODIC_TIMER_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_CPCTRG | TC_CMR_WAVE);
   8138a:	4c16      	ldr	r4, [pc, #88]	; (813e4 <periodic_timer_init+0x60>)
	pmc_enable_periph_clk(ID_TC1); //ahhhhh
   8138c:	4b16      	ldr	r3, [pc, #88]	; (813e8 <periodic_timer_init+0x64>)
   8138e:	201c      	movs	r0, #28
   81390:	4798      	blx	r3
	tc_init(TC0, PERIODIC_TIMER_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_CPCTRG | TC_CMR_WAVE);
   81392:	4620      	mov	r0, r4
   81394:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   81398:	2101      	movs	r1, #1
   8139a:	4b14      	ldr	r3, [pc, #80]	; (813ec <periodic_timer_init+0x68>)
   8139c:	4798      	blx	r3
	tc_write_rc(TC0, PERIODIC_TIMER_CHANNEL, sysclk_get_peripheral_bus_hz(TC0) / 2 / 4); //4 Hz
   8139e:	4a14      	ldr	r2, [pc, #80]	; (813f0 <periodic_timer_init+0x6c>)
   813a0:	4620      	mov	r0, r4
   813a2:	2101      	movs	r1, #1
   813a4:	4b13      	ldr	r3, [pc, #76]	; (813f4 <periodic_timer_init+0x70>)
   813a6:	4798      	blx	r3
	
	tc_start(TC0, PERIODIC_TIMER_CHANNEL);
   813a8:	4620      	mov	r0, r4
   813aa:	2101      	movs	r1, #1
   813ac:	4b12      	ldr	r3, [pc, #72]	; (813f8 <periodic_timer_init+0x74>)
   813ae:	4798      	blx	r3
	tc_get_status(TC0, PERIODIC_TIMER_CHANNEL);
   813b0:	2101      	movs	r1, #1
   813b2:	4620      	mov	r0, r4
   813b4:	4b11      	ldr	r3, [pc, #68]	; (813fc <periodic_timer_init+0x78>)
   813b6:	4798      	blx	r3
   813b8:	4b11      	ldr	r3, [pc, #68]	; (81400 <periodic_timer_init+0x7c>)
   813ba:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   813be:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   813c2:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   813c6:	f04f 0c80 	mov.w	ip, #128	; 0x80
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   813ca:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
	
	NVIC_DisableIRQ(TC1_IRQn);
	NVIC_ClearPendingIRQ(TC1_IRQn);
	NVIC_SetPriority(TC1_IRQn, 8);
	NVIC_EnableIRQ(TC1_IRQn);
	tc_enable_interrupt(TC0, PERIODIC_TIMER_CHANNEL, TC_IER_CPCS);
   813ce:	4620      	mov	r0, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   813d0:	f883 c31c 	strb.w	ip, [r3, #796]	; 0x31c
   813d4:	2210      	movs	r2, #16
   813d6:	2101      	movs	r1, #1
   813d8:	4c0a      	ldr	r4, [pc, #40]	; (81404 <periodic_timer_init+0x80>)
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   813da:	601d      	str	r5, [r3, #0]
   813dc:	47a0      	blx	r4
	return 0x00;
}
   813de:	2000      	movs	r0, #0
   813e0:	bd38      	pop	{r3, r4, r5, pc}
   813e2:	bf00      	nop
   813e4:	40080000 	.word	0x40080000
   813e8:	000843f1 	.word	0x000843f1
   813ec:	00086cc1 	.word	0x00086cc1
   813f0:	00a037a0 	.word	0x00a037a0
   813f4:	00086cf1 	.word	0x00086cf1
   813f8:	00086ce1 	.word	0x00086ce1
   813fc:	00086d01 	.word	0x00086d01
   81400:	e000e100 	.word	0xe000e100
   81404:	00086cf9 	.word	0x00086cf9

00081408 <TC1_Handler>:

volatile uint32_t periodic_tick_div = 0;
ISR(TC1_Handler)
{
	if (tc_get_status(TC0, PERIODIC_TIMER_CHANNEL) & (TC_IER_CPCS)) {
   81408:	2101      	movs	r1, #1
{
   8140a:	b510      	push	{r4, lr}
	if (tc_get_status(TC0, PERIODIC_TIMER_CHANNEL) & (TC_IER_CPCS)) {
   8140c:	480c      	ldr	r0, [pc, #48]	; (81440 <TC1_Handler+0x38>)
   8140e:	4b0d      	ldr	r3, [pc, #52]	; (81444 <TC1_Handler+0x3c>)
   81410:	4798      	blx	r3
   81412:	06c1      	lsls	r1, r0, #27
   81414:	d400      	bmi.n	81418 <TC1_Handler+0x10>
		
		if (!(periodic_tick_div % 16)) {
			pgood_tick();
		}
	}
}
   81416:	bd10      	pop	{r4, pc}
		periodic_tick_div++;
   81418:	4c0b      	ldr	r4, [pc, #44]	; (81448 <TC1_Handler+0x40>)
		thermals_fast_tick();
   8141a:	4b0c      	ldr	r3, [pc, #48]	; (8144c <TC1_Handler+0x44>)
   8141c:	4798      	blx	r3
		periodic_tick_div++;
   8141e:	6823      	ldr	r3, [r4, #0]
   81420:	3301      	adds	r3, #1
   81422:	6023      	str	r3, [r4, #0]
		if (!(periodic_tick_div % 8)) {
   81424:	6823      	ldr	r3, [r4, #0]
   81426:	075a      	lsls	r2, r3, #29
   81428:	d006      	beq.n	81438 <TC1_Handler+0x30>
		if (!(periodic_tick_div % 16)) {
   8142a:	6823      	ldr	r3, [r4, #0]
   8142c:	071b      	lsls	r3, r3, #28
   8142e:	d1f2      	bne.n	81416 <TC1_Handler+0xe>
}
   81430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			pgood_tick();
   81434:	4b06      	ldr	r3, [pc, #24]	; (81450 <TC1_Handler+0x48>)
   81436:	4718      	bx	r3
			thermals_slow_tick();
   81438:	4b06      	ldr	r3, [pc, #24]	; (81454 <TC1_Handler+0x4c>)
   8143a:	4798      	blx	r3
   8143c:	e7f5      	b.n	8142a <TC1_Handler+0x22>
   8143e:	bf00      	nop
   81440:	40080000 	.word	0x40080000
   81444:	00086d01 	.word	0x00086d01
   81448:	20071698 	.word	0x20071698
   8144c:	00081235 	.word	0x00081235
   81450:	00081335 	.word	0x00081335
   81454:	000810d5 	.word	0x000810d5

00081458 <tps56520_set.part.0>:

/* Set voltage in mV for FPGA VCC_INT Voltage */
bool tps56520_set(uint16_t mv_output)
{
	if (I2C_LOCK) return;
	I2C_LOCK = 1;
   81458:	2201      	movs	r2, #1
bool tps56520_set(uint16_t mv_output)
   8145a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((mv_output < 600) || (mv_output > 1800)){
		return false;
	}
	
	/* Avoid frying FPGA */
	if (mv_output > 1200){
   8145e:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
	I2C_LOCK = 1;
   81462:	4c30      	ldr	r4, [pc, #192]	; (81524 <tps56520_set.part.0+0xcc>)
	if (mv_output > 1200){
   81464:	b283      	uxth	r3, r0
   81466:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
bool tps56520_set(uint16_t mv_output)
   8146a:	b08d      	sub	sp, #52	; 0x34
	I2C_LOCK = 1;
   8146c:	7022      	strb	r2, [r4, #0]
	if (mv_output > 1200){
   8146e:	d852      	bhi.n	81516 <tps56520_set.part.0+0xbe>
	uint8_t setting = (mv_output - 600) / 10;
	
	if (!checkoddparity(setting)){
		setting |= 1<<7;
	}
	twi_package_t packet_write = {
   81470:	2501      	movs	r5, #1
   81472:	f04f 0934 	mov.w	r9, #52	; 0x34
	uint8_t setting = (mv_output - 600) / 10;
   81476:	4b2c      	ldr	r3, [pc, #176]	; (81528 <tps56520_set.part.0+0xd0>)
		.chip         = TPS56520_ADDR,      // TWI slave bus address
		.buffer       = &setting, // transfer data source buffer
		.length       = 1  // transfer data size (bytes)
	};
	
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   81478:	a902      	add	r1, sp, #8
	uint8_t setting = (mv_output - 600) / 10;
   8147a:	fba3 3000 	umull	r3, r0, r3, r0
   8147e:	08c2      	lsrs	r2, r0, #3
	p = p ^ (p >> 4 | p << 4);
   81480:	f3c0 13c3 	ubfx	r3, r0, #7, #4
   81484:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   81488:	4053      	eors	r3, r2
   8148a:	b2da      	uxtb	r2, r3
	p = p ^ (p >> 2);
   8148c:	f3c3 0385 	ubfx	r3, r3, #2, #6
   81490:	4053      	eors	r3, r2
	p = p ^ (p >> 1);
   81492:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
	if (!checkoddparity(setting)){
   81496:	07db      	lsls	r3, r3, #31
	twi_package_t packet_write = {
   81498:	4b24      	ldr	r3, [pc, #144]	; (8152c <tps56520_set.part.0+0xd4>)
	uint8_t setting = (mv_output - 600) / 10;
   8149a:	f3c0 00c7 	ubfx	r0, r0, #3, #8
	twi_package_t packet_write = {
   8149e:	f8d3 8000 	ldr.w	r8, [r3]
		setting |= 1<<7;
   814a2:	bf58      	it	pl
   814a4:	f060 007f 	ornpl	r0, r0, #127	; 0x7f
   814a8:	f88d 0006 	strb.w	r0, [sp, #6]
	twi_package_t packet_write = {
   814ac:	f10d 0206 	add.w	r2, sp, #6
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   814b0:	481f      	ldr	r0, [pc, #124]	; (81530 <tps56520_set.part.0+0xd8>)
   814b2:	4b20      	ldr	r3, [pc, #128]	; (81534 <tps56520_set.part.0+0xdc>)
	twi_package_t packet_write = {
   814b4:	ea4f 4718 	mov.w	r7, r8, lsr #16
   814b8:	e9cd 5203 	strd	r5, r2, [sp, #12]
   814bc:	f8ad 8008 	strh.w	r8, [sp, #8]
   814c0:	f88d 700a 	strb.w	r7, [sp, #10]
   814c4:	9505      	str	r5, [sp, #20]
   814c6:	f88d 9018 	strb.w	r9, [sp, #24]
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   814ca:	4798      	blx	r3
   814cc:	4606      	mov	r6, r0
   814ce:	b128      	cbz	r0, 814dc <tps56520_set.part.0+0x84>
		I2C_LOCK = 0;
   814d0:	2300      	movs	r3, #0
		return false;
   814d2:	4618      	mov	r0, r3
		I2C_LOCK = 0;
   814d4:	7023      	strb	r3, [r4, #0]
		I2C_LOCK = 0;
		return true;
	}
	I2C_LOCK = 0;
	return false;
   814d6:	b00d      	add	sp, #52	; 0x34
   814d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	twi_package_t packet_read = {
   814dc:	f10d 0307 	add.w	r3, sp, #7
   814e0:	e9cd 5308 	strd	r5, r3, [sp, #32]
	if(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS){
   814e4:	4812      	ldr	r0, [pc, #72]	; (81530 <tps56520_set.part.0+0xd8>)
   814e6:	4b14      	ldr	r3, [pc, #80]	; (81538 <tps56520_set.part.0+0xe0>)
   814e8:	a907      	add	r1, sp, #28
	twi_package_t packet_read = {
   814ea:	f8ad 801c 	strh.w	r8, [sp, #28]
   814ee:	f88d 701e 	strb.w	r7, [sp, #30]
   814f2:	950a      	str	r5, [sp, #40]	; 0x28
   814f4:	f88d 902c 	strb.w	r9, [sp, #44]	; 0x2c
	if(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS){
   814f8:	4798      	blx	r3
   814fa:	4603      	mov	r3, r0
   814fc:	b978      	cbnz	r0, 8151e <tps56520_set.part.0+0xc6>
	if (volt_read == setting){
   814fe:	f89d 1007 	ldrb.w	r1, [sp, #7]
   81502:	f89d 2006 	ldrb.w	r2, [sp, #6]
	I2C_LOCK = 0;
   81506:	7023      	strb	r3, [r4, #0]
	if (volt_read == setting){
   81508:	4291      	cmp	r1, r2
		return true;
   8150a:	bf0c      	ite	eq
   8150c:	4628      	moveq	r0, r5
	return false;
   8150e:	4618      	movne	r0, r3
   81510:	b00d      	add	sp, #52	; 0x34
   81512:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return false;
   81516:	2000      	movs	r0, #0
   81518:	b00d      	add	sp, #52	; 0x34
   8151a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return false;
   8151e:	4630      	mov	r0, r6
		I2C_LOCK = 0;
   81520:	7026      	strb	r6, [r4, #0]
		return false;
   81522:	e7d8      	b.n	814d6 <tps56520_set.part.0+0x7e>
   81524:	20071694 	.word	0x20071694
   81528:	cccccccd 	.word	0xcccccccd
   8152c:	0008da50 	.word	0x0008da50
   81530:	4008c000 	.word	0x4008c000
   81534:	00084a79 	.word	0x00084a79
   81538:	000849a1 	.word	0x000849a1

0008153c <tps56520_init>:
{
   8153c:	b570      	push	{r4, r5, r6, lr}
	gpio_configure_pin(PIN_PWD_SDA, PIN_PWD_SDA_FLAGS);
   8153e:	4912      	ldr	r1, [pc, #72]	; (81588 <tps56520_init+0x4c>)
{
   81540:	b084      	sub	sp, #16
	gpio_configure_pin(PIN_PWD_SDA, PIN_PWD_SDA_FLAGS);
   81542:	4c12      	ldr	r4, [pc, #72]	; (8158c <tps56520_init+0x50>)
   81544:	2011      	movs	r0, #17
   81546:	47a0      	blx	r4
	gpio_configure_pin(PIN_PWD_SCL, PIN_PWD_SCL_FLAGS);
   81548:	490f      	ldr	r1, [pc, #60]	; (81588 <tps56520_init+0x4c>)
   8154a:	2012      	movs	r0, #18
   8154c:	47a0      	blx	r4
	twi_master_options_t opt = {
   8154e:	f24c 3150 	movw	r1, #50000	; 0xc350
   81552:	2234      	movs	r2, #52	; 0x34
	p_opt->master_clk = sysclk_get_peripheral_hz();
   81554:	4c0e      	ldr	r4, [pc, #56]	; (81590 <tps56520_init+0x54>)
   81556:	e9cd 1202 	strd	r1, r2, [sp, #8]
   8155a:	4b0e      	ldr	r3, [pc, #56]	; (81594 <tps56520_init+0x58>)
   8155c:	2016      	movs	r0, #22
   8155e:	9401      	str	r4, [sp, #4]
   81560:	4798      	blx	r3
	return (twi_master_init(p_twi, p_opt));
   81562:	480d      	ldr	r0, [pc, #52]	; (81598 <tps56520_init+0x5c>)
   81564:	4b0d      	ldr	r3, [pc, #52]	; (8159c <tps56520_init+0x60>)
   81566:	a901      	add	r1, sp, #4
   81568:	2403      	movs	r4, #3
   8156a:	4d0d      	ldr	r5, [pc, #52]	; (815a0 <tps56520_init+0x64>)
   8156c:	4e0d      	ldr	r6, [pc, #52]	; (815a4 <tps56520_init+0x68>)
   8156e:	4798      	blx	r3
	if (I2C_LOCK) return;
   81570:	782b      	ldrb	r3, [r5, #0]
   81572:	b91b      	cbnz	r3, 8157c <tps56520_init+0x40>
   81574:	f240 404c 	movw	r0, #1100	; 0x44c
   81578:	47b0      	blx	r6
		if(tps56520_set(1100)){
   8157a:	b910      	cbnz	r0, 81582 <tps56520_init+0x46>
	for(int retry = 3; retry > 0; retry--){
   8157c:	3c01      	subs	r4, #1
   8157e:	d1f7      	bne.n	81570 <tps56520_init+0x34>
	return false;
   81580:	4620      	mov	r0, r4
}
   81582:	b004      	add	sp, #16
   81584:	bd70      	pop	{r4, r5, r6, pc}
   81586:	bf00      	nop
   81588:	08000001 	.word	0x08000001
   8158c:	00084655 	.word	0x00084655
   81590:	0501bd00 	.word	0x0501bd00
   81594:	000843f1 	.word	0x000843f1
   81598:	4008c000 	.word	0x4008c000
   8159c:	00084949 	.word	0x00084949
   815a0:	20071694 	.word	0x20071694
   815a4:	00081459 	.word	0x00081459

000815a8 <tps56520_set>:
	if (I2C_LOCK) return;
   815a8:	4b03      	ldr	r3, [pc, #12]	; (815b8 <tps56520_set+0x10>)
   815aa:	781b      	ldrb	r3, [r3, #0]
   815ac:	b90b      	cbnz	r3, 815b2 <tps56520_set+0xa>
   815ae:	4b03      	ldr	r3, [pc, #12]	; (815bc <tps56520_set+0x14>)
   815b0:	4718      	bx	r3
   815b2:	2000      	movs	r0, #0
   815b4:	4770      	bx	lr
   815b6:	bf00      	nop
   815b8:	20071694 	.word	0x20071694
   815bc:	00081459 	.word	0x00081459

000815c0 <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   815c0:	4a02      	ldr	r2, [pc, #8]	; (815cc <udc_valid_address+0xc>)
   815c2:	4b03      	ldr	r3, [pc, #12]	; (815d0 <udc_valid_address+0x10>)
   815c4:	8850      	ldrh	r0, [r2, #2]
   815c6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   815ca:	4718      	bx	r3
   815cc:	200723a4 	.word	0x200723a4
   815d0:	00085235 	.word	0x00085235

000815d4 <udc_update_iface_desc.part.0>:
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   815d4:	4b15      	ldr	r3, [pc, #84]	; (8162c <udc_update_iface_desc.part.0+0x58>)
   815d6:	681b      	ldr	r3, [r3, #0]
   815d8:	681b      	ldr	r3, [r3, #0]
   815da:	791a      	ldrb	r2, [r3, #4]
   815dc:	4282      	cmp	r2, r0
   815de:	d922      	bls.n	81626 <udc_update_iface_desc.part.0+0x52>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
   815e0:	b430      	push	{r4, r5}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   815e2:	4c13      	ldr	r4, [pc, #76]	; (81630 <udc_update_iface_desc.part.0+0x5c>)
   815e4:	6023      	str	r3, [r4, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   815e6:	f8b3 c002 	ldrh.w	ip, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   815ea:	449c      	add	ip, r3
	while (ptr_end_desc >
   815ec:	4563      	cmp	r3, ip
   815ee:	d217      	bcs.n	81620 <udc_update_iface_desc.part.0+0x4c>
   815f0:	2500      	movs	r5, #0
   815f2:	e004      	b.n	815fe <udc_update_iface_desc.part.0+0x2a>
				udc_ptr_iface->bLength);
   815f4:	781a      	ldrb	r2, [r3, #0]
   815f6:	2501      	movs	r5, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   815f8:	4413      	add	r3, r2
	while (ptr_end_desc >
   815fa:	459c      	cmp	ip, r3
   815fc:	d90c      	bls.n	81618 <udc_update_iface_desc.part.0+0x44>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   815fe:	785a      	ldrb	r2, [r3, #1]
   81600:	2a04      	cmp	r2, #4
   81602:	d1f7      	bne.n	815f4 <udc_update_iface_desc.part.0+0x20>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   81604:	789a      	ldrb	r2, [r3, #2]
   81606:	4282      	cmp	r2, r0
   81608:	d1f4      	bne.n	815f4 <udc_update_iface_desc.part.0+0x20>
   8160a:	78da      	ldrb	r2, [r3, #3]
   8160c:	428a      	cmp	r2, r1
   8160e:	d1f1      	bne.n	815f4 <udc_update_iface_desc.part.0+0x20>
   81610:	b105      	cbz	r5, 81614 <udc_update_iface_desc.part.0+0x40>
   81612:	6023      	str	r3, [r4, #0]
				return true; // Interface found
   81614:	2001      	movs	r0, #1
   81616:	e001      	b.n	8161c <udc_update_iface_desc.part.0+0x48>
	return false; // Interface not found
   81618:	2000      	movs	r0, #0
   8161a:	6023      	str	r3, [r4, #0]
}
   8161c:	bc30      	pop	{r4, r5}
   8161e:	4770      	bx	lr
		return false;
   81620:	2000      	movs	r0, #0
}
   81622:	bc30      	pop	{r4, r5}
   81624:	4770      	bx	lr
		return false;
   81626:	2000      	movs	r0, #0
}
   81628:	4770      	bx	lr
   8162a:	bf00      	nop
   8162c:	200716a4 	.word	0x200716a4
   81630:	200716a8 	.word	0x200716a8

00081634 <udc_iface_disable>:
{
   81634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (0 == udc_num_configuration) {
   81638:	4c1c      	ldr	r4, [pc, #112]	; (816ac <udc_iface_disable+0x78>)
   8163a:	7823      	ldrb	r3, [r4, #0]
   8163c:	b37b      	cbz	r3, 8169e <udc_iface_disable+0x6a>
   8163e:	2100      	movs	r1, #0
   81640:	4e1b      	ldr	r6, [pc, #108]	; (816b0 <udc_iface_disable+0x7c>)
   81642:	4605      	mov	r5, r0
   81644:	47b0      	blx	r6
	if (!udc_update_iface_desc(iface_num, 0)) {
   81646:	b350      	cbz	r0, 8169e <udc_iface_disable+0x6a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81648:	f8df 8068 	ldr.w	r8, [pc, #104]	; 816b4 <udc_iface_disable+0x80>
   8164c:	f8d8 3000 	ldr.w	r3, [r8]
   81650:	685b      	ldr	r3, [r3, #4]
   81652:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81656:	68fb      	ldr	r3, [r7, #12]
   81658:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   8165a:	7823      	ldrb	r3, [r4, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8165c:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
   8165e:	b1f3      	cbz	r3, 8169e <udc_iface_disable+0x6a>
   81660:	4628      	mov	r0, r5
   81662:	47b0      	blx	r6
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81664:	4605      	mov	r5, r0
   81666:	b1d0      	cbz	r0, 8169e <udc_iface_disable+0x6a>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   81668:	4b13      	ldr	r3, [pc, #76]	; (816b8 <udc_iface_disable+0x84>)
			udd_ep_free(ep_desc->bEndpointAddress);
   8166a:	4e14      	ldr	r6, [pc, #80]	; (816bc <udc_iface_disable+0x88>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8166c:	681c      	ldr	r4, [r3, #0]
			udc_ptr_conf->desc +
   8166e:	f8d8 2000 	ldr.w	r2, [r8]
			desc->bLength);
   81672:	7823      	ldrb	r3, [r4, #0]
			udc_ptr_conf->desc +
   81674:	6812      	ldr	r2, [r2, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   81676:	441c      	add	r4, r3
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   81678:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   8167a:	441a      	add	r2, r3
	while (ptr_eof_desc > desc) {
   8167c:	42a2      	cmp	r2, r4
   8167e:	d806      	bhi.n	8168e <udc_iface_disable+0x5a>
   81680:	e008      	b.n	81694 <udc_iface_disable+0x60>
		if (desc_id == desc->bDescriptorType) {
   81682:	2b05      	cmp	r3, #5
   81684:	d00f      	beq.n	816a6 <udc_iface_disable+0x72>
				desc->bLength);
   81686:	7823      	ldrb	r3, [r4, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   81688:	441c      	add	r4, r3
	while (ptr_eof_desc > desc) {
   8168a:	42a2      	cmp	r2, r4
   8168c:	d902      	bls.n	81694 <udc_iface_disable+0x60>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   8168e:	7863      	ldrb	r3, [r4, #1]
   81690:	2b04      	cmp	r3, #4
   81692:	d1f6      	bne.n	81682 <udc_iface_disable+0x4e>
	udi_api->disable();
   81694:	687b      	ldr	r3, [r7, #4]
   81696:	4798      	blx	r3
}
   81698:	4628      	mov	r0, r5
   8169a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   8169e:	2500      	movs	r5, #0
}
   816a0:	4628      	mov	r0, r5
   816a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ep_free(ep_desc->bEndpointAddress);
   816a6:	78a0      	ldrb	r0, [r4, #2]
   816a8:	47b0      	blx	r6
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   816aa:	e7e0      	b.n	8166e <udc_iface_disable+0x3a>
   816ac:	200716a1 	.word	0x200716a1
   816b0:	000815d5 	.word	0x000815d5
   816b4:	200716a4 	.word	0x200716a4
   816b8:	200716a8 	.word	0x200716a8
   816bc:	00085299 	.word	0x00085299

000816c0 <udc_iface_enable>:
	if (0 == udc_num_configuration) {
   816c0:	4b18      	ldr	r3, [pc, #96]	; (81724 <udc_iface_enable+0x64>)
   816c2:	781b      	ldrb	r3, [r3, #0]
   816c4:	b35b      	cbz	r3, 8171e <udc_iface_enable+0x5e>
{
   816c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   816ca:	4b17      	ldr	r3, [pc, #92]	; (81728 <udc_iface_enable+0x68>)
   816cc:	4605      	mov	r5, r0
   816ce:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   816d0:	b310      	cbz	r0, 81718 <udc_iface_enable+0x58>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   816d2:	4b16      	ldr	r3, [pc, #88]	; (8172c <udc_iface_enable+0x6c>)
   816d4:	4e16      	ldr	r6, [pc, #88]	; (81730 <udc_iface_enable+0x70>)
   816d6:	681c      	ldr	r4, [r3, #0]
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   816d8:	4f16      	ldr	r7, [pc, #88]	; (81734 <udc_iface_enable+0x74>)
			udc_ptr_conf->desc +
   816da:	6831      	ldr	r1, [r6, #0]
			desc->bLength);
   816dc:	7823      	ldrb	r3, [r4, #0]
			udc_ptr_conf->desc +
   816de:	680a      	ldr	r2, [r1, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   816e0:	441c      	add	r4, r3
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   816e2:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   816e4:	441a      	add	r2, r3
	while (ptr_eof_desc > desc) {
   816e6:	42a2      	cmp	r2, r4
   816e8:	d806      	bhi.n	816f8 <udc_iface_enable+0x38>
   816ea:	e008      	b.n	816fe <udc_iface_enable+0x3e>
		if (desc_id == desc->bDescriptorType) {
   816ec:	2b05      	cmp	r3, #5
   816ee:	d00d      	beq.n	8170c <udc_iface_enable+0x4c>
				desc->bLength);
   816f0:	7823      	ldrb	r3, [r4, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   816f2:	441c      	add	r4, r3
	while (ptr_eof_desc > desc) {
   816f4:	42a2      	cmp	r2, r4
   816f6:	d902      	bls.n	816fe <udc_iface_enable+0x3e>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   816f8:	7863      	ldrb	r3, [r4, #1]
   816fa:	2b04      	cmp	r3, #4
   816fc:	d1f6      	bne.n	816ec <udc_iface_enable+0x2c>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   816fe:	684b      	ldr	r3, [r1, #4]
   81700:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
}
   81704:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   81708:	681b      	ldr	r3, [r3, #0]
   8170a:	4718      	bx	r3
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8170c:	88a2      	ldrh	r2, [r4, #4]
   8170e:	78e1      	ldrb	r1, [r4, #3]
   81710:	78a0      	ldrb	r0, [r4, #2]
   81712:	47b8      	blx	r7
   81714:	2800      	cmp	r0, #0
   81716:	d1e0      	bne.n	816da <udc_iface_enable+0x1a>
}
   81718:	2000      	movs	r0, #0
   8171a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8171e:	2000      	movs	r0, #0
   81720:	4770      	bx	lr
   81722:	bf00      	nop
   81724:	200716a1 	.word	0x200716a1
   81728:	000815d5 	.word	0x000815d5
   8172c:	200716a8 	.word	0x200716a8
   81730:	200716a4 	.word	0x200716a4
   81734:	000855e5 	.word	0x000855e5

00081738 <udc_get_interface_desc>:
	return udc_ptr_iface;
   81738:	4b01      	ldr	r3, [pc, #4]	; (81740 <udc_get_interface_desc+0x8>)
}
   8173a:	6818      	ldr	r0, [r3, #0]
   8173c:	4770      	bx	lr
   8173e:	bf00      	nop
   81740:	200716a8 	.word	0x200716a8

00081744 <udc_start>:
	udd_enable();
   81744:	4b00      	ldr	r3, [pc, #0]	; (81748 <udc_start+0x4>)
   81746:	4718      	bx	r3
   81748:	00084ef1 	.word	0x00084ef1

0008174c <udc_stop>:
{
   8174c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (udc_num_configuration) {
   8174e:	4f0d      	ldr	r7, [pc, #52]	; (81784 <udc_stop+0x38>)
	udd_disable();
   81750:	4b0d      	ldr	r3, [pc, #52]	; (81788 <udc_stop+0x3c>)
   81752:	4798      	blx	r3
	if (udc_num_configuration) {
   81754:	783b      	ldrb	r3, [r7, #0]
   81756:	b17b      	cbz	r3, 81778 <udc_stop+0x2c>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81758:	4d0c      	ldr	r5, [pc, #48]	; (8178c <udc_stop+0x40>)
   8175a:	682b      	ldr	r3, [r5, #0]
   8175c:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   8175e:	791b      	ldrb	r3, [r3, #4]
   81760:	b153      	cbz	r3, 81778 <udc_stop+0x2c>
   81762:	2400      	movs	r4, #0
   81764:	4620      	mov	r0, r4
   81766:	4e0a      	ldr	r6, [pc, #40]	; (81790 <udc_stop+0x44>)
			udc_iface_disable(iface_num);
   81768:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8176a:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
   8176c:	3401      	adds	r4, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8176e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   81770:	b2e0      	uxtb	r0, r4
   81772:	791b      	ldrb	r3, [r3, #4]
   81774:	4283      	cmp	r3, r0
   81776:	d8f7      	bhi.n	81768 <udc_stop+0x1c>
	udc_num_configuration = 0;
   81778:	2300      	movs	r3, #0
	udc_device_status =
   8177a:	4a06      	ldr	r2, [pc, #24]	; (81794 <udc_stop+0x48>)
	udc_num_configuration = 0;
   8177c:	703b      	strb	r3, [r7, #0]
	udc_device_status =
   8177e:	8013      	strh	r3, [r2, #0]
}
   81780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81782:	bf00      	nop
   81784:	200716a1 	.word	0x200716a1
   81788:	00085181 	.word	0x00085181
   8178c:	200716a4 	.word	0x200716a4
   81790:	00081635 	.word	0x00081635
   81794:	2007169c 	.word	0x2007169c

00081798 <udc_reset>:
{
   81798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (udc_num_configuration) {
   8179a:	4f0c      	ldr	r7, [pc, #48]	; (817cc <udc_reset+0x34>)
   8179c:	783b      	ldrb	r3, [r7, #0]
   8179e:	b17b      	cbz	r3, 817c0 <udc_reset+0x28>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   817a0:	4d0b      	ldr	r5, [pc, #44]	; (817d0 <udc_reset+0x38>)
   817a2:	682b      	ldr	r3, [r5, #0]
   817a4:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   817a6:	791b      	ldrb	r3, [r3, #4]
   817a8:	b153      	cbz	r3, 817c0 <udc_reset+0x28>
   817aa:	2400      	movs	r4, #0
   817ac:	4620      	mov	r0, r4
   817ae:	4e09      	ldr	r6, [pc, #36]	; (817d4 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   817b0:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   817b2:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
   817b4:	3401      	adds	r4, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   817b6:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   817b8:	b2e0      	uxtb	r0, r4
   817ba:	791b      	ldrb	r3, [r3, #4]
   817bc:	4283      	cmp	r3, r0
   817be:	d8f7      	bhi.n	817b0 <udc_reset+0x18>
	udc_num_configuration = 0;
   817c0:	2300      	movs	r3, #0
	udc_device_status =
   817c2:	4a05      	ldr	r2, [pc, #20]	; (817d8 <udc_reset+0x40>)
	udc_num_configuration = 0;
   817c4:	703b      	strb	r3, [r7, #0]
	udc_device_status =
   817c6:	8013      	strh	r3, [r2, #0]
}
   817c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   817ca:	bf00      	nop
   817cc:	200716a1 	.word	0x200716a1
   817d0:	200716a4 	.word	0x200716a4
   817d4:	00081635 	.word	0x00081635
   817d8:	2007169c 	.word	0x2007169c

000817dc <udc_sof_notify>:
{
   817dc:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   817de:	4b0c      	ldr	r3, [pc, #48]	; (81810 <udc_sof_notify+0x34>)
   817e0:	781b      	ldrb	r3, [r3, #0]
   817e2:	b19b      	cbz	r3, 8180c <udc_sof_notify+0x30>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   817e4:	4d0b      	ldr	r5, [pc, #44]	; (81814 <udc_sof_notify+0x38>)
   817e6:	682b      	ldr	r3, [r5, #0]
   817e8:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   817ea:	7912      	ldrb	r2, [r2, #4]
   817ec:	b172      	cbz	r2, 8180c <udc_sof_notify+0x30>
   817ee:	2400      	movs	r4, #0
   817f0:	4622      	mov	r2, r4
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   817f2:	685b      	ldr	r3, [r3, #4]
		for (iface_num = 0;
   817f4:	3401      	adds	r4, #1
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   817f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   817fa:	691b      	ldr	r3, [r3, #16]
   817fc:	b103      	cbz	r3, 81800 <udc_sof_notify+0x24>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   817fe:	4798      	blx	r3
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81800:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
   81802:	b2e2      	uxtb	r2, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81804:	6819      	ldr	r1, [r3, #0]
		for (iface_num = 0;
   81806:	7909      	ldrb	r1, [r1, #4]
   81808:	4291      	cmp	r1, r2
   8180a:	d8f2      	bhi.n	817f2 <udc_sof_notify+0x16>
}
   8180c:	bd38      	pop	{r3, r4, r5, pc}
   8180e:	bf00      	nop
   81810:	200716a1 	.word	0x200716a1
   81814:	200716a4 	.word	0x200716a4

00081818 <udc_process_setup>:
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   81818:	2300      	movs	r3, #0
{
   8181a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	udd_g_ctrlreq.payload_size = 0;
   8181e:	4c91      	ldr	r4, [pc, #580]	; (81a64 <udc_process_setup+0x24c>)
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   81820:	8822      	ldrh	r2, [r4, #0]
	udd_g_ctrlreq.over_under_run = NULL;
   81822:	e9c4 3304 	strd	r3, r3, [r4, #16]
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   81826:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
	udd_g_ctrlreq.payload_size = 0;
   8182a:	81a3      	strh	r3, [r4, #12]
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   8182c:	f000 80d2 	beq.w	819d4 <udc_process_setup+0x1bc>
#endif
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
		return true;
	}

	if (Udd_setup_is_in()) {
   81830:	f994 2000 	ldrsb.w	r2, [r4]
   81834:	7823      	ldrb	r3, [r4, #0]
   81836:	2a00      	cmp	r2, #0
   81838:	db0e      	blt.n	81858 <udc_process_setup+0x40>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8183a:	f013 0f60 	tst.w	r3, #96	; 0x60
   8183e:	d079      	beq.n	81934 <udc_process_setup+0x11c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   81840:	f013 0f1e 	tst.w	r3, #30
   81844:	d040      	beq.n	818c8 <udc_process_setup+0xb0>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   81846:	f003 031f 	and.w	r3, r3, #31
   8184a:	2b02      	cmp	r3, #2
   8184c:	f000 80b8 	beq.w	819c0 <udc_process_setup+0x1a8>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   81850:	2500      	movs	r5, #0
#endif
}
   81852:	4628      	mov	r0, r5
   81854:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
   81858:	88e5      	ldrh	r5, [r4, #6]
   8185a:	2d00      	cmp	r5, #0
   8185c:	d0f8      	beq.n	81850 <udc_process_setup+0x38>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8185e:	f013 0f60 	tst.w	r3, #96	; 0x60
   81862:	d1ed      	bne.n	81840 <udc_process_setup+0x28>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   81864:	f013 021f 	ands.w	r2, r3, #31
   81868:	f000 8173 	beq.w	81b52 <udc_process_setup+0x33a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8186c:	2a01      	cmp	r2, #1
   8186e:	f040 80c5 	bne.w	819fc <udc_process_setup+0x1e4>
			switch (udd_g_ctrlreq.req.bRequest) {
   81872:	7862      	ldrb	r2, [r4, #1]
   81874:	2a0a      	cmp	r2, #10
   81876:	d124      	bne.n	818c2 <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wLength != 1) {
   81878:	2d01      	cmp	r5, #1
   8187a:	d122      	bne.n	818c2 <udc_process_setup+0xaa>
	if (!udc_num_configuration) {
   8187c:	4a7a      	ldr	r2, [pc, #488]	; (81a68 <udc_process_setup+0x250>)
   8187e:	7812      	ldrb	r2, [r2, #0]
   81880:	b1fa      	cbz	r2, 818c2 <udc_process_setup+0xaa>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81882:	4a7a      	ldr	r2, [pc, #488]	; (81a6c <udc_process_setup+0x254>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81884:	7926      	ldrb	r6, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81886:	6817      	ldr	r7, [r2, #0]
   81888:	683a      	ldr	r2, [r7, #0]
   8188a:	7912      	ldrb	r2, [r2, #4]
   8188c:	42b2      	cmp	r2, r6
   8188e:	d918      	bls.n	818c2 <udc_process_setup+0xaa>
	if (0 == udc_num_configuration) {
   81890:	2100      	movs	r1, #0
   81892:	4630      	mov	r0, r6
   81894:	4b76      	ldr	r3, [pc, #472]	; (81a70 <udc_process_setup+0x258>)
   81896:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, 0)) {
   81898:	4605      	mov	r5, r0
   8189a:	2800      	cmp	r0, #0
   8189c:	f000 80d1 	beq.w	81a42 <udc_process_setup+0x22a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   818a0:	687b      	ldr	r3, [r7, #4]
	udc_iface_setting = udi_api->getsetting();
   818a2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   818a6:	68db      	ldr	r3, [r3, #12]
   818a8:	4798      	blx	r3
   818aa:	4602      	mov	r2, r0
   818ac:	4871      	ldr	r0, [pc, #452]	; (81a74 <udc_process_setup+0x25c>)
	udd_set_setup_payload(&udc_iface_setting,1);
   818ae:	2101      	movs	r1, #1
   818b0:	4b71      	ldr	r3, [pc, #452]	; (81a78 <udc_process_setup+0x260>)
	udc_iface_setting = udi_api->getsetting();
   818b2:	7002      	strb	r2, [r0, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   818b4:	4798      	blx	r3
	return true;
   818b6:	e7cc      	b.n	81852 <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   818b8:	2a01      	cmp	r2, #1
   818ba:	f000 815b 	beq.w	81b74 <udc_process_setup+0x35c>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   818be:	2a02      	cmp	r2, #2
   818c0:	d06e      	beq.n	819a0 <udc_process_setup+0x188>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   818c2:	f013 0f1e 	tst.w	r3, #30
   818c6:	d1c3      	bne.n	81850 <udc_process_setup+0x38>
		if (udd_g_ctrlreq.req.wIndex == 2) {
   818c8:	88a3      	ldrh	r3, [r4, #4]
	if (0 == udc_num_configuration) {
   818ca:	4e67      	ldr	r6, [pc, #412]	; (81a68 <udc_process_setup+0x250>)
		if (udd_g_ctrlreq.req.wIndex == 2) {
   818cc:	2b02      	cmp	r3, #2
			udd_g_ctrlreq.req.wIndex = 1;
   818ce:	bf04      	itt	eq
   818d0:	2301      	moveq	r3, #1
   818d2:	80a3      	strheq	r3, [r4, #4]
	if (0 == udc_num_configuration) {
   818d4:	7833      	ldrb	r3, [r6, #0]
   818d6:	2b00      	cmp	r3, #0
   818d8:	d0ba      	beq.n	81850 <udc_process_setup+0x38>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   818da:	4f64      	ldr	r7, [pc, #400]	; (81a6c <udc_process_setup+0x254>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   818dc:	f894 8004 	ldrb.w	r8, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   818e0:	683d      	ldr	r5, [r7, #0]
   818e2:	682b      	ldr	r3, [r5, #0]
   818e4:	791b      	ldrb	r3, [r3, #4]
   818e6:	4598      	cmp	r8, r3
   818e8:	d340      	bcc.n	8196c <udc_process_setup+0x154>
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   818ea:	7822      	ldrb	r2, [r4, #0]
   818ec:	f002 021f 	and.w	r2, r2, #31
   818f0:	2a02      	cmp	r2, #2
   818f2:	d1ad      	bne.n	81850 <udc_process_setup+0x38>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   818f4:	2b00      	cmp	r3, #0
   818f6:	d0ab      	beq.n	81850 <udc_process_setup+0x38>
   818f8:	2400      	movs	r4, #0
   818fa:	46a0      	mov	r8, r4
   818fc:	f8df 9170 	ldr.w	r9, [pc, #368]	; 81a70 <udc_process_setup+0x258>
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   81900:	686b      	ldr	r3, [r5, #4]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81902:	3401      	adds	r4, #1
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   81904:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81908:	68eb      	ldr	r3, [r5, #12]
   8190a:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   8190c:	7833      	ldrb	r3, [r6, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8190e:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
   81910:	2b00      	cmp	r3, #0
   81912:	d09d      	beq.n	81850 <udc_process_setup+0x38>
   81914:	4640      	mov	r0, r8
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81916:	fa5f f884 	uxtb.w	r8, r4
   8191a:	47c8      	blx	r9
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8191c:	2800      	cmp	r0, #0
   8191e:	d097      	beq.n	81850 <udc_process_setup+0x38>
		if (udi_api->setup()) {
   81920:	68ab      	ldr	r3, [r5, #8]
   81922:	4798      	blx	r3
   81924:	2800      	cmp	r0, #0
   81926:	d139      	bne.n	8199c <udc_process_setup+0x184>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81928:	683d      	ldr	r5, [r7, #0]
   8192a:	682b      	ldr	r3, [r5, #0]
   8192c:	791b      	ldrb	r3, [r3, #4]
   8192e:	4543      	cmp	r3, r8
   81930:	d8e6      	bhi.n	81900 <udc_process_setup+0xe8>
   81932:	e78d      	b.n	81850 <udc_process_setup+0x38>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   81934:	f013 021f 	ands.w	r2, r3, #31
   81938:	d1be      	bne.n	818b8 <udc_process_setup+0xa0>
			switch (udd_g_ctrlreq.req.bRequest) {
   8193a:	7862      	ldrb	r2, [r4, #1]
   8193c:	3a01      	subs	r2, #1
   8193e:	2a08      	cmp	r2, #8
   81940:	d8bf      	bhi.n	818c2 <udc_process_setup+0xaa>
   81942:	a101      	add	r1, pc, #4	; (adr r1, 81948 <udc_process_setup+0x130>)
   81944:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   81948:	00081a47 	.word	0x00081a47
   8194c:	000818c3 	.word	0x000818c3
   81950:	00081a23 	.word	0x00081a23
   81954:	000818c3 	.word	0x000818c3
   81958:	00081b43 	.word	0x00081b43
   8195c:	000818c3 	.word	0x000818c3
   81960:	000818c3 	.word	0x000818c3
   81964:	000818c3 	.word	0x000818c3
   81968:	00081a95 	.word	0x00081a95
	if (0 == udc_num_configuration) {
   8196c:	2100      	movs	r1, #0
   8196e:	4640      	mov	r0, r8
   81970:	4f3f      	ldr	r7, [pc, #252]	; (81a70 <udc_process_setup+0x258>)
   81972:	47b8      	blx	r7
	if (!udc_update_iface_desc(iface_num, 0)) {
   81974:	2800      	cmp	r0, #0
   81976:	d03f      	beq.n	819f8 <udc_process_setup+0x1e0>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81978:	686b      	ldr	r3, [r5, #4]
   8197a:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8197e:	68eb      	ldr	r3, [r5, #12]
   81980:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   81982:	7833      	ldrb	r3, [r6, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81984:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
   81986:	2b00      	cmp	r3, #0
   81988:	f43f af62 	beq.w	81850 <udc_process_setup+0x38>
   8198c:	4640      	mov	r0, r8
   8198e:	47b8      	blx	r7
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81990:	2800      	cmp	r0, #0
   81992:	d031      	beq.n	819f8 <udc_process_setup+0x1e0>
	return udi_api->setup();
   81994:	68ab      	ldr	r3, [r5, #8]
   81996:	4798      	blx	r3
		if (udc_req_iface()) {
   81998:	2800      	cmp	r0, #0
   8199a:	d02d      	beq.n	819f8 <udc_process_setup+0x1e0>
			return true;
   8199c:	2501      	movs	r5, #1
   8199e:	e758      	b.n	81852 <udc_process_setup+0x3a>
			switch (udd_g_ctrlreq.req.bRequest) {
   819a0:	7862      	ldrb	r2, [r4, #1]
   819a2:	2a01      	cmp	r2, #1
   819a4:	f000 8103 	beq.w	81bae <udc_process_setup+0x396>
   819a8:	2a03      	cmp	r2, #3
   819aa:	d106      	bne.n	819ba <udc_process_setup+0x1a2>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   819ac:	88e2      	ldrh	r2, [r4, #6]
   819ae:	8861      	ldrh	r1, [r4, #2]
   819b0:	430a      	orrs	r2, r1
   819b2:	b292      	uxth	r2, r2
   819b4:	2a00      	cmp	r2, #0
   819b6:	f000 81cd 	beq.w	81d54 <udc_process_setup+0x53c>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   819ba:	f013 0f1e 	tst.w	r3, #30
   819be:	d083      	beq.n	818c8 <udc_process_setup+0xb0>
	if (0 == udc_num_configuration) {
   819c0:	4e29      	ldr	r6, [pc, #164]	; (81a68 <udc_process_setup+0x250>)
   819c2:	7833      	ldrb	r3, [r6, #0]
   819c4:	2b00      	cmp	r3, #0
   819c6:	f43f af43 	beq.w	81850 <udc_process_setup+0x38>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   819ca:	4f28      	ldr	r7, [pc, #160]	; (81a6c <udc_process_setup+0x254>)
   819cc:	683d      	ldr	r5, [r7, #0]
   819ce:	682b      	ldr	r3, [r5, #0]
   819d0:	791b      	ldrb	r3, [r3, #4]
   819d2:	e78f      	b.n	818f4 <udc_process_setup+0xdc>
		if (!mpsse_enabled()) {
   819d4:	4b29      	ldr	r3, [pc, #164]	; (81a7c <udc_process_setup+0x264>)
   819d6:	4798      	blx	r3
   819d8:	4602      	mov	r2, r0
			MS_OS_DESC.FUNC[1].FEAT.CompatibleID[0] = 'W';
   819da:	2a00      	cmp	r2, #0
   819dc:	bf0c      	ite	eq
   819de:	224d      	moveq	r2, #77	; 0x4d
   819e0:	2257      	movne	r2, #87	; 0x57
		return true;
   819e2:	2501      	movs	r5, #1
   819e4:	4826      	ldr	r0, [pc, #152]	; (81a80 <udc_process_setup+0x268>)
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
   819e6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   819ea:	f880 20b6 	strb.w	r2, [r0, #182]	; 0xb6
   819ee:	4b22      	ldr	r3, [pc, #136]	; (81a78 <udc_process_setup+0x260>)
   819f0:	4798      	blx	r3
}
   819f2:	4628      	mov	r0, r5
   819f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   819f8:	7823      	ldrb	r3, [r4, #0]
   819fa:	e724      	b.n	81846 <udc_process_setup+0x2e>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   819fc:	2a02      	cmp	r2, #2
   819fe:	f47f af60 	bne.w	818c2 <udc_process_setup+0xaa>
			switch (udd_g_ctrlreq.req.bRequest) {
   81a02:	7862      	ldrb	r2, [r4, #1]
   81a04:	2a00      	cmp	r2, #0
   81a06:	d1d8      	bne.n	819ba <udc_process_setup+0x1a2>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   81a08:	2d02      	cmp	r5, #2
   81a0a:	d1d6      	bne.n	819ba <udc_process_setup+0x1a2>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   81a0c:	7920      	ldrb	r0, [r4, #4]
   81a0e:	4b1d      	ldr	r3, [pc, #116]	; (81a84 <udc_process_setup+0x26c>)
   81a10:	4798      	blx	r3
   81a12:	4602      	mov	r2, r0
   81a14:	481c      	ldr	r0, [pc, #112]	; (81a88 <udc_process_setup+0x270>)
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   81a16:	4629      	mov	r1, r5
   81a18:	4b17      	ldr	r3, [pc, #92]	; (81a78 <udc_process_setup+0x260>)
			return true;
   81a1a:	2501      	movs	r5, #1
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   81a1c:	8002      	strh	r2, [r0, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   81a1e:	4798      	blx	r3
	return true;
   81a20:	e717      	b.n	81852 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
   81a22:	88e2      	ldrh	r2, [r4, #6]
   81a24:	2a00      	cmp	r2, #0
   81a26:	f47f af4c 	bne.w	818c2 <udc_process_setup+0xaa>
	switch (udd_g_ctrlreq.req.wValue) {
   81a2a:	8862      	ldrh	r2, [r4, #2]
   81a2c:	2a02      	cmp	r2, #2
   81a2e:	f47f af48 	bne.w	818c2 <udc_process_setup+0xaa>
		if (!udd_is_high_speed()) {
   81a32:	4b16      	ldr	r3, [pc, #88]	; (81a8c <udc_process_setup+0x274>)
   81a34:	4798      	blx	r3
   81a36:	4605      	mov	r5, r0
   81a38:	b118      	cbz	r0, 81a42 <udc_process_setup+0x22a>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   81a3a:	7923      	ldrb	r3, [r4, #4]
   81a3c:	2b00      	cmp	r3, #0
   81a3e:	f000 81be 	beq.w	81dbe <udc_process_setup+0x5a6>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   81a42:	7823      	ldrb	r3, [r4, #0]
   81a44:	e6fc      	b.n	81840 <udc_process_setup+0x28>
	if (udd_g_ctrlreq.req.wLength) {
   81a46:	88e2      	ldrh	r2, [r4, #6]
   81a48:	2a00      	cmp	r2, #0
   81a4a:	f47f af3a 	bne.w	818c2 <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   81a4e:	8865      	ldrh	r5, [r4, #2]
   81a50:	2d01      	cmp	r5, #1
   81a52:	f47f af36 	bne.w	818c2 <udc_process_setup+0xaa>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   81a56:	4a0e      	ldr	r2, [pc, #56]	; (81a90 <udc_process_setup+0x278>)
   81a58:	8813      	ldrh	r3, [r2, #0]
   81a5a:	f023 0302 	bic.w	r3, r3, #2
   81a5e:	8013      	strh	r3, [r2, #0]
		return true;
   81a60:	e6f7      	b.n	81852 <udc_process_setup+0x3a>
   81a62:	bf00      	nop
   81a64:	200723a4 	.word	0x200723a4
   81a68:	200716a1 	.word	0x200716a1
   81a6c:	200716a4 	.word	0x200716a4
   81a70:	000815d5 	.word	0x000815d5
   81a74:	200716a0 	.word	0x200716a0
   81a78:	0008528d 	.word	0x0008528d
   81a7c:	00082c11 	.word	0x00082c11
   81a80:	20070230 	.word	0x20070230
   81a84:	000852f1 	.word	0x000852f1
   81a88:	2007169e 	.word	0x2007169e
   81a8c:	00085221 	.word	0x00085221
   81a90:	2007169c 	.word	0x2007169c
	if (udd_g_ctrlreq.req.wLength) {
   81a94:	88e2      	ldrh	r2, [r4, #6]
   81a96:	2a00      	cmp	r2, #0
   81a98:	f47f af13 	bne.w	818c2 <udc_process_setup+0xaa>
	if (!udd_getaddress()) {
   81a9c:	4b9c      	ldr	r3, [pc, #624]	; (81d10 <udc_process_setup+0x4f8>)
   81a9e:	4798      	blx	r3
   81aa0:	2800      	cmp	r0, #0
   81aa2:	d0ce      	beq.n	81a42 <udc_process_setup+0x22a>
	if (udd_is_high_speed()) {
   81aa4:	f8df 926c 	ldr.w	r9, [pc, #620]	; 81d14 <udc_process_setup+0x4fc>
   81aa8:	47c8      	blx	r9
				udc_config.confdev_hs->bNumConfigurations) {
   81aaa:	f8df a26c 	ldr.w	sl, [pc, #620]	; 81d18 <udc_process_setup+0x500>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81aae:	78a3      	ldrb	r3, [r4, #2]
	if (udd_is_high_speed()) {
   81ab0:	2800      	cmp	r0, #0
   81ab2:	f000 8125 	beq.w	81d00 <udc_process_setup+0x4e8>
				udc_config.confdev_hs->bNumConfigurations) {
   81ab6:	f8da 2008 	ldr.w	r2, [sl, #8]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81aba:	7c52      	ldrb	r2, [r2, #17]
   81abc:	429a      	cmp	r2, r3
   81abe:	d3c0      	bcc.n	81a42 <udc_process_setup+0x22a>
	if (udc_num_configuration) {
   81ac0:	4e96      	ldr	r6, [pc, #600]	; (81d1c <udc_process_setup+0x504>)
   81ac2:	7833      	ldrb	r3, [r6, #0]
   81ac4:	b183      	cbz	r3, 81ae8 <udc_process_setup+0x2d0>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81ac6:	4f96      	ldr	r7, [pc, #600]	; (81d20 <udc_process_setup+0x508>)
   81ac8:	683b      	ldr	r3, [r7, #0]
   81aca:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   81acc:	791b      	ldrb	r3, [r3, #4]
   81ace:	b15b      	cbz	r3, 81ae8 <udc_process_setup+0x2d0>
   81ad0:	2500      	movs	r5, #0
   81ad2:	4628      	mov	r0, r5
   81ad4:	f8df 824c 	ldr.w	r8, [pc, #588]	; 81d24 <udc_process_setup+0x50c>
			udc_iface_disable(iface_num);
   81ad8:	47c0      	blx	r8
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81ada:	683b      	ldr	r3, [r7, #0]
		for (iface_num = 0;
   81adc:	3501      	adds	r5, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81ade:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   81ae0:	b2e8      	uxtb	r0, r5
   81ae2:	791b      	ldrb	r3, [r3, #4]
   81ae4:	4283      	cmp	r3, r0
   81ae6:	d8f7      	bhi.n	81ad8 <udc_process_setup+0x2c0>
	udc_device_status =
   81ae8:	2200      	movs	r2, #0
   81aea:	4b8f      	ldr	r3, [pc, #572]	; (81d28 <udc_process_setup+0x510>)
   81aec:	801a      	strh	r2, [r3, #0]
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   81aee:	78a3      	ldrb	r3, [r4, #2]
   81af0:	7033      	strb	r3, [r6, #0]
	if (udc_num_configuration == 0) {
   81af2:	2b00      	cmp	r3, #0
   81af4:	f43f af52 	beq.w	8199c <udc_process_setup+0x184>
	if (udd_is_high_speed()) {
   81af8:	47c8      	blx	r9
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   81afa:	7832      	ldrb	r2, [r6, #0]
	if (udd_is_high_speed()) {
   81afc:	2800      	cmp	r0, #0
   81afe:	f000 8133 	beq.w	81d68 <udc_process_setup+0x550>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   81b02:	f8da 3010 	ldr.w	r3, [sl, #16]
   81b06:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   81b0a:	3a01      	subs	r2, #1
   81b0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81b10:	681a      	ldr	r2, [r3, #0]
   81b12:	4f83      	ldr	r7, [pc, #524]	; (81d20 <udc_process_setup+0x508>)
   81b14:	7912      	ldrb	r2, [r2, #4]
   81b16:	603b      	str	r3, [r7, #0]
   81b18:	2a00      	cmp	r2, #0
   81b1a:	f43f af3f 	beq.w	8199c <udc_process_setup+0x184>
   81b1e:	2500      	movs	r5, #0
   81b20:	4e82      	ldr	r6, [pc, #520]	; (81d2c <udc_process_setup+0x514>)
   81b22:	462b      	mov	r3, r5
   81b24:	e005      	b.n	81b32 <udc_process_setup+0x31a>
   81b26:	683a      	ldr	r2, [r7, #0]
   81b28:	6812      	ldr	r2, [r2, #0]
   81b2a:	7912      	ldrb	r2, [r2, #4]
   81b2c:	429a      	cmp	r2, r3
   81b2e:	f67f af35 	bls.w	8199c <udc_process_setup+0x184>
		if (!udc_iface_enable(iface_num, 0)) {
   81b32:	4618      	mov	r0, r3
   81b34:	2100      	movs	r1, #0
   81b36:	47b0      	blx	r6
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81b38:	3501      	adds	r5, #1
   81b3a:	b2eb      	uxtb	r3, r5
		if (!udc_iface_enable(iface_num, 0)) {
   81b3c:	2800      	cmp	r0, #0
   81b3e:	d1f2      	bne.n	81b26 <udc_process_setup+0x30e>
   81b40:	e77f      	b.n	81a42 <udc_process_setup+0x22a>
	if (udd_g_ctrlreq.req.wLength) {
   81b42:	88e2      	ldrh	r2, [r4, #6]
   81b44:	2a00      	cmp	r2, #0
   81b46:	f47f aebc 	bne.w	818c2 <udc_process_setup+0xaa>
	udd_g_ctrlreq.callback = udc_valid_address;
   81b4a:	4b79      	ldr	r3, [pc, #484]	; (81d30 <udc_process_setup+0x518>)
			return true;
   81b4c:	2501      	movs	r5, #1
	udd_g_ctrlreq.callback = udc_valid_address;
   81b4e:	6123      	str	r3, [r4, #16]
	return true;
   81b50:	e67f      	b.n	81852 <udc_process_setup+0x3a>
			switch (udd_g_ctrlreq.req.bRequest) {
   81b52:	7862      	ldrb	r2, [r4, #1]
   81b54:	2a06      	cmp	r2, #6
   81b56:	d040      	beq.n	81bda <udc_process_setup+0x3c2>
   81b58:	2a08      	cmp	r2, #8
   81b5a:	d036      	beq.n	81bca <udc_process_setup+0x3b2>
   81b5c:	2a00      	cmp	r2, #0
   81b5e:	f47f aeb0 	bne.w	818c2 <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   81b62:	2d02      	cmp	r5, #2
   81b64:	f47f aead 	bne.w	818c2 <udc_process_setup+0xaa>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   81b68:	4629      	mov	r1, r5
   81b6a:	486f      	ldr	r0, [pc, #444]	; (81d28 <udc_process_setup+0x510>)
   81b6c:	4b71      	ldr	r3, [pc, #452]	; (81d34 <udc_process_setup+0x51c>)
   81b6e:	4798      	blx	r3
			return true;
   81b70:	2501      	movs	r5, #1
   81b72:	e66e      	b.n	81852 <udc_process_setup+0x3a>
			switch (udd_g_ctrlreq.req.bRequest) {
   81b74:	7862      	ldrb	r2, [r4, #1]
   81b76:	2a0b      	cmp	r2, #11
   81b78:	f47f aea3 	bne.w	818c2 <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wLength) {
   81b7c:	88e2      	ldrh	r2, [r4, #6]
   81b7e:	2a00      	cmp	r2, #0
   81b80:	f47f ae9f 	bne.w	818c2 <udc_process_setup+0xaa>
	if (!udc_num_configuration) {
   81b84:	4a65      	ldr	r2, [pc, #404]	; (81d1c <udc_process_setup+0x504>)
   81b86:	7812      	ldrb	r2, [r2, #0]
   81b88:	2a00      	cmp	r2, #0
   81b8a:	f43f ae9a 	beq.w	818c2 <udc_process_setup+0xaa>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81b8e:	7925      	ldrb	r5, [r4, #4]
	if (!udc_iface_disable(iface_num)) {
   81b90:	4b64      	ldr	r3, [pc, #400]	; (81d24 <udc_process_setup+0x50c>)
   81b92:	4628      	mov	r0, r5
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   81b94:	8866      	ldrh	r6, [r4, #2]
	if (!udc_iface_disable(iface_num)) {
   81b96:	4798      	blx	r3
   81b98:	2800      	cmp	r0, #0
   81b9a:	f43f af52 	beq.w	81a42 <udc_process_setup+0x22a>
	return udc_iface_enable(iface_num, setting_num);
   81b9e:	4628      	mov	r0, r5
   81ba0:	4b62      	ldr	r3, [pc, #392]	; (81d2c <udc_process_setup+0x514>)
   81ba2:	b2f1      	uxtb	r1, r6
   81ba4:	4798      	blx	r3
		if (udc_reqstd()) {
   81ba6:	2800      	cmp	r0, #0
   81ba8:	f47f aef8 	bne.w	8199c <udc_process_setup+0x184>
   81bac:	e749      	b.n	81a42 <udc_process_setup+0x22a>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   81bae:	88e2      	ldrh	r2, [r4, #6]
   81bb0:	8861      	ldrh	r1, [r4, #2]
   81bb2:	430a      	orrs	r2, r1
   81bb4:	b292      	uxth	r2, r2
   81bb6:	2a00      	cmp	r2, #0
   81bb8:	f47f aeff 	bne.w	819ba <udc_process_setup+0x1a2>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   81bbc:	7920      	ldrb	r0, [r4, #4]
   81bbe:	4b5e      	ldr	r3, [pc, #376]	; (81d38 <udc_process_setup+0x520>)
   81bc0:	4798      	blx	r3
		if (udc_reqstd()) {
   81bc2:	2800      	cmp	r0, #0
   81bc4:	f47f aeea 	bne.w	8199c <udc_process_setup+0x184>
   81bc8:	e73b      	b.n	81a42 <udc_process_setup+0x22a>
	if (udd_g_ctrlreq.req.wLength != 1) {
   81bca:	2d01      	cmp	r5, #1
   81bcc:	f47f ae79 	bne.w	818c2 <udc_process_setup+0xaa>
	udd_set_setup_payload(&udc_num_configuration,1);
   81bd0:	4629      	mov	r1, r5
   81bd2:	4852      	ldr	r0, [pc, #328]	; (81d1c <udc_process_setup+0x504>)
   81bd4:	4b57      	ldr	r3, [pc, #348]	; (81d34 <udc_process_setup+0x51c>)
   81bd6:	4798      	blx	r3
	return true;
   81bd8:	e63b      	b.n	81852 <udc_process_setup+0x3a>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   81bda:	8861      	ldrh	r1, [r4, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   81bdc:	0a0a      	lsrs	r2, r1, #8
   81bde:	3a01      	subs	r2, #1
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   81be0:	b2cd      	uxtb	r5, r1
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   81be2:	2a0e      	cmp	r2, #14
   81be4:	f63f ae2c 	bhi.w	81840 <udc_process_setup+0x28>
   81be8:	a101      	add	r1, pc, #4	; (adr r1, 81bf0 <udc_process_setup+0x3d8>)
   81bea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   81bee:	bf00      	nop
   81bf0:	00081ca5 	.word	0x00081ca5
   81bf4:	00081c7b 	.word	0x00081c7b
   81bf8:	00081cb9 	.word	0x00081cb9
   81bfc:	00081841 	.word	0x00081841
   81c00:	00081841 	.word	0x00081841
   81c04:	00081c6f 	.word	0x00081c6f
   81c08:	00081c45 	.word	0x00081c45
   81c0c:	00081841 	.word	0x00081841
   81c10:	00081841 	.word	0x00081841
   81c14:	00081841 	.word	0x00081841
   81c18:	00081841 	.word	0x00081841
   81c1c:	00081841 	.word	0x00081841
   81c20:	00081841 	.word	0x00081841
   81c24:	00081841 	.word	0x00081841
   81c28:	00081c2d 	.word	0x00081c2d
		udd_set_setup_payload( (uint8_t *) &MS_BOS_PACKET,
   81c2c:	2121      	movs	r1, #33	; 0x21
   81c2e:	4843      	ldr	r0, [pc, #268]	; (81d3c <udc_process_setup+0x524>)
   81c30:	4b40      	ldr	r3, [pc, #256]	; (81d34 <udc_process_setup+0x51c>)
   81c32:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   81c34:	88e3      	ldrh	r3, [r4, #6]
   81c36:	89a2      	ldrh	r2, [r4, #12]
   81c38:	429a      	cmp	r2, r3
   81c3a:	f67f aeaf 	bls.w	8199c <udc_process_setup+0x184>
			return true;
   81c3e:	2501      	movs	r5, #1
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   81c40:	81a3      	strh	r3, [r4, #12]
   81c42:	e606      	b.n	81852 <udc_process_setup+0x3a>
		if (!udd_is_high_speed()) {
   81c44:	4b33      	ldr	r3, [pc, #204]	; (81d14 <udc_process_setup+0x4fc>)
   81c46:	4798      	blx	r3
			if (conf_num >= udc_config.confdev_hs->
   81c48:	4b33      	ldr	r3, [pc, #204]	; (81d18 <udc_process_setup+0x500>)
		if (!udd_is_high_speed()) {
   81c4a:	2800      	cmp	r0, #0
   81c4c:	f040 8094 	bne.w	81d78 <udc_process_setup+0x560>
			if (conf_num >= udc_config.confdev_hs->
   81c50:	689a      	ldr	r2, [r3, #8]
   81c52:	7c52      	ldrb	r2, [r2, #17]
   81c54:	42aa      	cmp	r2, r5
   81c56:	f67f aef4 	bls.w	81a42 <udc_process_setup+0x22a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81c5a:	691a      	ldr	r2, [r3, #16]
			udd_set_setup_payload(
   81c5c:	4b35      	ldr	r3, [pc, #212]	; (81d34 <udc_process_setup+0x51c>)
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81c5e:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   81c62:	8841      	ldrh	r1, [r0, #2]
   81c64:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   81c66:	2207      	movs	r2, #7
   81c68:	68a3      	ldr	r3, [r4, #8]
   81c6a:	705a      	strb	r2, [r3, #1]
		break;
   81c6c:	e7e2      	b.n	81c34 <udc_process_setup+0x41c>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   81c6e:	4a2a      	ldr	r2, [pc, #168]	; (81d18 <udc_process_setup+0x500>)
   81c70:	4b30      	ldr	r3, [pc, #192]	; (81d34 <udc_process_setup+0x51c>)
   81c72:	68d0      	ldr	r0, [r2, #12]
   81c74:	7801      	ldrb	r1, [r0, #0]
   81c76:	4798      	blx	r3
		break;
   81c78:	e7dc      	b.n	81c34 <udc_process_setup+0x41c>
		if (udd_is_high_speed()) {
   81c7a:	4b26      	ldr	r3, [pc, #152]	; (81d14 <udc_process_setup+0x4fc>)
   81c7c:	4798      	blx	r3
			if (conf_num >= udc_config.confdev_hs->
   81c7e:	4b26      	ldr	r3, [pc, #152]	; (81d18 <udc_process_setup+0x500>)
		if (udd_is_high_speed()) {
   81c80:	2800      	cmp	r0, #0
   81c82:	f000 8090 	beq.w	81da6 <udc_process_setup+0x58e>
			if (conf_num >= udc_config.confdev_hs->
   81c86:	689a      	ldr	r2, [r3, #8]
   81c88:	7c52      	ldrb	r2, [r2, #17]
   81c8a:	42aa      	cmp	r2, r5
   81c8c:	f67f aed9 	bls.w	81a42 <udc_process_setup+0x22a>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81c90:	691a      	ldr	r2, [r3, #16]
			udd_set_setup_payload(
   81c92:	4b28      	ldr	r3, [pc, #160]	; (81d34 <udc_process_setup+0x51c>)
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81c94:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   81c98:	8841      	ldrh	r1, [r0, #2]
   81c9a:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   81c9c:	2202      	movs	r2, #2
   81c9e:	68a3      	ldr	r3, [r4, #8]
   81ca0:	705a      	strb	r2, [r3, #1]
		break;
   81ca2:	e7c7      	b.n	81c34 <udc_process_setup+0x41c>
		if (!udd_is_high_speed()) {
   81ca4:	4b1b      	ldr	r3, [pc, #108]	; (81d14 <udc_process_setup+0x4fc>)
   81ca6:	4798      	blx	r3
   81ca8:	2800      	cmp	r0, #0
   81caa:	d171      	bne.n	81d90 <udc_process_setup+0x578>
				(uint8_t *) udc_config.confdev_hs,
   81cac:	4a1a      	ldr	r2, [pc, #104]	; (81d18 <udc_process_setup+0x500>)
			udd_set_setup_payload(
   81cae:	4b21      	ldr	r3, [pc, #132]	; (81d34 <udc_process_setup+0x51c>)
				(uint8_t *) udc_config.confdev_hs,
   81cb0:	6890      	ldr	r0, [r2, #8]
			udd_set_setup_payload(
   81cb2:	7801      	ldrb	r1, [r0, #0]
   81cb4:	4798      	blx	r3
   81cb6:	e7bd      	b.n	81c34 <udc_process_setup+0x41c>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   81cb8:	2d03      	cmp	r5, #3
   81cba:	f63f adc1 	bhi.w	81840 <udc_process_setup+0x28>
   81cbe:	e8df f005 	tbb	[pc, r5]
   81cc2:	171a      	.short	0x171a
   81cc4:	0214      	.short	0x0214
   81cc6:	2120      	movs	r1, #32
   81cc8:	4b1d      	ldr	r3, [pc, #116]	; (81d40 <udc_process_setup+0x528>)
		for(i = 0; i < str_length; i++) {
   81cca:	4e1e      	ldr	r6, [pc, #120]	; (81d44 <udc_process_setup+0x52c>)
   81ccc:	185d      	adds	r5, r3, r1
   81cce:	4632      	mov	r2, r6
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   81cd0:	f813 0b01 	ldrb.w	r0, [r3], #1
		for(i = 0; i < str_length; i++) {
   81cd4:	42ab      	cmp	r3, r5
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   81cd6:	f822 0f02 	strh.w	r0, [r2, #2]!
		for(i = 0; i < str_length; i++) {
   81cda:	d1f9      	bne.n	81cd0 <udc_process_setup+0x4b8>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   81cdc:	0049      	lsls	r1, r1, #1
   81cde:	3102      	adds	r1, #2
		udd_set_setup_payload(
   81ce0:	4818      	ldr	r0, [pc, #96]	; (81d44 <udc_process_setup+0x52c>)
   81ce2:	4b14      	ldr	r3, [pc, #80]	; (81d34 <udc_process_setup+0x51c>)
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   81ce4:	7031      	strb	r1, [r6, #0]
		udd_set_setup_payload(
   81ce6:	4798      	blx	r3
   81ce8:	e7a4      	b.n	81c34 <udc_process_setup+0x41c>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   81cea:	2122      	movs	r1, #34	; 0x22
		str = udc_string_product_name;
   81cec:	4b16      	ldr	r3, [pc, #88]	; (81d48 <udc_process_setup+0x530>)
   81cee:	e7ec      	b.n	81cca <udc_process_setup+0x4b2>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   81cf0:	2115      	movs	r1, #21
		str = udc_string_manufacturer_name;
   81cf2:	4b16      	ldr	r3, [pc, #88]	; (81d4c <udc_process_setup+0x534>)
   81cf4:	e7e9      	b.n	81cca <udc_process_setup+0x4b2>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   81cf6:	2104      	movs	r1, #4
   81cf8:	4815      	ldr	r0, [pc, #84]	; (81d50 <udc_process_setup+0x538>)
   81cfa:	4b0e      	ldr	r3, [pc, #56]	; (81d34 <udc_process_setup+0x51c>)
   81cfc:	4798      	blx	r3
	if (str_length) {
   81cfe:	e799      	b.n	81c34 <udc_process_setup+0x41c>
				udc_config.confdev_lsfs->bNumConfigurations) {
   81d00:	f8da 2000 	ldr.w	r2, [sl]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81d04:	7c52      	ldrb	r2, [r2, #17]
   81d06:	429a      	cmp	r2, r3
   81d08:	f4bf aeda 	bcs.w	81ac0 <udc_process_setup+0x2a8>
   81d0c:	e699      	b.n	81a42 <udc_process_setup+0x22a>
   81d0e:	bf00      	nop
   81d10:	0008525d 	.word	0x0008525d
   81d14:	00085221 	.word	0x00085221
   81d18:	200709b4 	.word	0x200709b4
   81d1c:	200716a1 	.word	0x200716a1
   81d20:	200716a4 	.word	0x200716a4
   81d24:	00081635 	.word	0x00081635
   81d28:	2007169c 	.word	0x2007169c
   81d2c:	000816c1 	.word	0x000816c1
   81d30:	000815c1 	.word	0x000815c1
   81d34:	0008528d 	.word	0x0008528d
   81d38:	000853f1 	.word	0x000853f1
   81d3c:	2007020c 	.word	0x2007020c
   81d40:	200701d0 	.word	0x200701d0
   81d44:	2007037c 	.word	0x2007037c
   81d48:	200703e0 	.word	0x200703e0
   81d4c:	200703c8 	.word	0x200703c8
   81d50:	200703c4 	.word	0x200703c4
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   81d54:	7920      	ldrb	r0, [r4, #4]
   81d56:	4b32      	ldr	r3, [pc, #200]	; (81e20 <udc_process_setup+0x608>)
   81d58:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   81d5a:	7920      	ldrb	r0, [r4, #4]
   81d5c:	4b31      	ldr	r3, [pc, #196]	; (81e24 <udc_process_setup+0x60c>)
   81d5e:	4798      	blx	r3
		if (udc_reqstd()) {
   81d60:	2800      	cmp	r0, #0
   81d62:	f47f ae1b 	bne.w	8199c <udc_process_setup+0x184>
   81d66:	e66c      	b.n	81a42 <udc_process_setup+0x22a>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   81d68:	f8da 3004 	ldr.w	r3, [sl, #4]
   81d6c:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   81d70:	3a01      	subs	r2, #1
   81d72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   81d76:	e6cb      	b.n	81b10 <udc_process_setup+0x2f8>
			if (conf_num >= udc_config.confdev_lsfs->
   81d78:	681a      	ldr	r2, [r3, #0]
   81d7a:	7c52      	ldrb	r2, [r2, #17]
   81d7c:	42aa      	cmp	r2, r5
   81d7e:	f67f ae60 	bls.w	81a42 <udc_process_setup+0x22a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   81d82:	685a      	ldr	r2, [r3, #4]
			udd_set_setup_payload(
   81d84:	4b28      	ldr	r3, [pc, #160]	; (81e28 <udc_process_setup+0x610>)
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   81d86:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   81d8a:	8841      	ldrh	r1, [r0, #2]
   81d8c:	4798      	blx	r3
   81d8e:	e76a      	b.n	81c66 <udc_process_setup+0x44e>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   81d90:	2010      	movs	r0, #16
   81d92:	2102      	movs	r1, #2
   81d94:	4b25      	ldr	r3, [pc, #148]	; (81e2c <udc_process_setup+0x614>)
			udd_set_setup_payload(
   81d96:	4d24      	ldr	r5, [pc, #144]	; (81e28 <udc_process_setup+0x610>)
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   81d98:	681a      	ldr	r2, [r3, #0]
   81d9a:	7090      	strb	r0, [r2, #2]
   81d9c:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   81d9e:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   81da0:	7801      	ldrb	r1, [r0, #0]
   81da2:	47a8      	blx	r5
   81da4:	e746      	b.n	81c34 <udc_process_setup+0x41c>
			if (conf_num >= udc_config.confdev_lsfs->
   81da6:	681a      	ldr	r2, [r3, #0]
   81da8:	7c52      	ldrb	r2, [r2, #17]
   81daa:	42aa      	cmp	r2, r5
   81dac:	f67f ae49 	bls.w	81a42 <udc_process_setup+0x22a>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   81db0:	685a      	ldr	r2, [r3, #4]
			udd_set_setup_payload(
   81db2:	4b1d      	ldr	r3, [pc, #116]	; (81e28 <udc_process_setup+0x610>)
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   81db4:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   81db8:	8841      	ldrh	r1, [r0, #2]
   81dba:	4798      	blx	r3
   81dbc:	e76e      	b.n	81c9c <udc_process_setup+0x484>
	if (udc_num_configuration) {
   81dbe:	4e1c      	ldr	r6, [pc, #112]	; (81e30 <udc_process_setup+0x618>)
   81dc0:	7832      	ldrb	r2, [r6, #0]
   81dc2:	b192      	cbz	r2, 81dea <udc_process_setup+0x5d2>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81dc4:	4f1b      	ldr	r7, [pc, #108]	; (81e34 <udc_process_setup+0x61c>)
   81dc6:	683a      	ldr	r2, [r7, #0]
   81dc8:	6812      	ldr	r2, [r2, #0]
		for (iface_num = 0;
   81dca:	7912      	ldrb	r2, [r2, #4]
   81dcc:	b16a      	cbz	r2, 81dea <udc_process_setup+0x5d2>
   81dce:	4699      	mov	r9, r3
   81dd0:	4618      	mov	r0, r3
   81dd2:	f8df 8064 	ldr.w	r8, [pc, #100]	; 81e38 <udc_process_setup+0x620>
			udc_iface_disable(iface_num);
   81dd6:	47c0      	blx	r8
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81dd8:	683b      	ldr	r3, [r7, #0]
		for (iface_num = 0;
   81dda:	f109 0901 	add.w	r9, r9, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81dde:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   81de0:	fa5f f089 	uxtb.w	r0, r9
   81de4:	791b      	ldrb	r3, [r3, #4]
   81de6:	4283      	cmp	r3, r0
   81de8:	d8f5      	bhi.n	81dd6 <udc_process_setup+0x5be>
	udc_num_configuration = 0;
   81dea:	2200      	movs	r2, #0
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   81dec:	88a3      	ldrh	r3, [r4, #4]
	udc_device_status =
   81dee:	4913      	ldr	r1, [pc, #76]	; (81e3c <udc_process_setup+0x624>)
   81df0:	0a1b      	lsrs	r3, r3, #8
   81df2:	3b01      	subs	r3, #1
   81df4:	800a      	strh	r2, [r1, #0]
	udc_num_configuration = 0;
   81df6:	7032      	strb	r2, [r6, #0]
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   81df8:	2b03      	cmp	r3, #3
   81dfa:	f63f ae22 	bhi.w	81a42 <udc_process_setup+0x22a>
   81dfe:	e8df f003 	tbb	[pc, r3]
   81e02:	080b      	.short	0x080b
   81e04:	0205      	.short	0x0205
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   81e06:	4b0e      	ldr	r3, [pc, #56]	; (81e40 <udc_process_setup+0x628>)
   81e08:	6123      	str	r3, [r4, #16]
			return true;
   81e0a:	e522      	b.n	81852 <udc_process_setup+0x3a>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   81e0c:	4b0d      	ldr	r3, [pc, #52]	; (81e44 <udc_process_setup+0x62c>)
   81e0e:	6123      	str	r3, [r4, #16]
			return true;
   81e10:	e51f      	b.n	81852 <udc_process_setup+0x3a>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   81e12:	4b0d      	ldr	r3, [pc, #52]	; (81e48 <udc_process_setup+0x630>)
   81e14:	6123      	str	r3, [r4, #16]
			return true;
   81e16:	e51c      	b.n	81852 <udc_process_setup+0x3a>
			udd_g_ctrlreq.callback = udd_test_mode_j;
   81e18:	4b0c      	ldr	r3, [pc, #48]	; (81e4c <udc_process_setup+0x634>)
   81e1a:	6123      	str	r3, [r4, #16]
			return true;
   81e1c:	e519      	b.n	81852 <udc_process_setup+0x3a>
   81e1e:	bf00      	nop
   81e20:	000857dd 	.word	0x000857dd
   81e24:	00085305 	.word	0x00085305
   81e28:	0008528d 	.word	0x0008528d
   81e2c:	200709b4 	.word	0x200709b4
   81e30:	200716a1 	.word	0x200716a1
   81e34:	200716a4 	.word	0x200716a4
   81e38:	00081635 	.word	0x00081635
   81e3c:	2007169c 	.word	0x2007169c
   81e40:	0008634d 	.word	0x0008634d
   81e44:	00086339 	.word	0x00086339
   81e48:	0008631d 	.word	0x0008631d
   81e4c:	00086301 	.word	0x00086301

00081e50 <naeusb_add_in_handler>:
    return main_b_vendor_enable;
}

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers < 16) {
   81e50:	4907      	ldr	r1, [pc, #28]	; (81e70 <naeusb_add_in_handler+0x20>)
   81e52:	780a      	ldrb	r2, [r1, #0]
   81e54:	2a0f      	cmp	r2, #15
   81e56:	d901      	bls.n	81e5c <naeusb_add_in_handler+0xc>
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
        return true;
    }
    return false;
   81e58:	2000      	movs	r0, #0
    
}
   81e5a:	4770      	bx	lr
   81e5c:	4603      	mov	r3, r0
{
   81e5e:	b410      	push	{r4}
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   81e60:	1c50      	adds	r0, r2, #1
   81e62:	4c04      	ldr	r4, [pc, #16]	; (81e74 <naeusb_add_in_handler+0x24>)
   81e64:	7008      	strb	r0, [r1, #0]
   81e66:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        return true;
   81e6a:	2001      	movs	r0, #1
}
   81e6c:	bc10      	pop	{r4}
   81e6e:	4770      	bx	lr
   81e70:	20071b2c 	.word	0x20071b2c
   81e74:	20071aec 	.word	0x20071aec

00081e78 <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers < 16) {
   81e78:	4907      	ldr	r1, [pc, #28]	; (81e98 <naeusb_add_out_handler+0x20>)
   81e7a:	780a      	ldrb	r2, [r1, #0]
   81e7c:	2a0f      	cmp	r2, #15
   81e7e:	d901      	bls.n	81e84 <naeusb_add_out_handler+0xc>
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
        return true;
    }
    return false;
   81e80:	2000      	movs	r0, #0
    
}
   81e82:	4770      	bx	lr
   81e84:	4603      	mov	r3, r0
{
   81e86:	b410      	push	{r4}
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   81e88:	1c50      	adds	r0, r2, #1
   81e8a:	4c04      	ldr	r4, [pc, #16]	; (81e9c <naeusb_add_out_handler+0x24>)
   81e8c:	7008      	strb	r0, [r1, #0]
   81e8e:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        return true;
   81e92:	2001      	movs	r0, #1
}
   81e94:	bc10      	pop	{r4}
   81e96:	4770      	bx	lr
   81e98:	20071b2d 	.word	0x20071b2d
   81e9c:	20071b30 	.word	0x20071b30

00081ea0 <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
	active = false;
	ui_powerdown();
   81ea0:	4b00      	ldr	r3, [pc, #0]	; (81ea4 <main_suspend_action+0x4>)
   81ea2:	4718      	bx	r3
   81ea4:	00080d0d 	.word	0x00080d0d

00081ea8 <main_resume_action>:
}

void main_resume_action(void)
{
    ui_wakeup();
   81ea8:	4b00      	ldr	r3, [pc, #0]	; (81eac <main_resume_action+0x4>)
   81eaa:	4718      	bx	r3
   81eac:	00080d11 	.word	0x00080d11

00081eb0 <main_sof_action>:
}

void main_sof_action(void)
{
    if (!main_b_vendor_enable)
   81eb0:	4b05      	ldr	r3, [pc, #20]	; (81ec8 <main_sof_action+0x18>)
   81eb2:	781b      	ldrb	r3, [r3, #0]
   81eb4:	b903      	cbnz	r3, 81eb8 <main_sof_action+0x8>
   81eb6:	4770      	bx	lr
{
   81eb8:	b510      	push	{r4, lr}
        return;
    ui_process(udd_get_frame_number());
   81eba:	4b04      	ldr	r3, [pc, #16]	; (81ecc <main_sof_action+0x1c>)
   81ebc:	4798      	blx	r3
}
   81ebe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ui_process(udd_get_frame_number());
   81ec2:	4b03      	ldr	r3, [pc, #12]	; (81ed0 <main_sof_action+0x20>)
   81ec4:	4718      	bx	r3
   81ec6:	bf00      	nop
   81ec8:	20070403 	.word	0x20070403
   81ecc:	0008526d 	.word	0x0008526d
   81ed0:	00080d15 	.word	0x00080d15

00081ed4 <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   81ed4:	b538      	push	{r3, r4, r5, lr}
    active = true;
    main_b_vendor_enable = true;
   81ed6:	2401      	movs	r4, #1
   81ed8:	4d04      	ldr	r5, [pc, #16]	; (81eec <main_vendor_enable+0x18>)
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   81eda:	f44f 6180 	mov.w	r1, #1024	; 0x400
   81ede:	4a04      	ldr	r2, [pc, #16]	; (81ef0 <main_vendor_enable+0x1c>)
   81ee0:	4b04      	ldr	r3, [pc, #16]	; (81ef4 <main_vendor_enable+0x20>)
   81ee2:	4805      	ldr	r0, [pc, #20]	; (81ef8 <main_vendor_enable+0x24>)
    main_b_vendor_enable = true;
   81ee4:	702c      	strb	r4, [r5, #0]
    udi_vendor_bulk_out_run(
   81ee6:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
   81ee8:	4620      	mov	r0, r4
   81eea:	bd38      	pop	{r3, r4, r5, pc}
   81eec:	20070403 	.word	0x20070403
   81ef0:	0008374d 	.word	0x0008374d
   81ef4:	000844f9 	.word	0x000844f9
   81ef8:	200716ec 	.word	0x200716ec

00081efc <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
   81efc:	2200      	movs	r2, #0
   81efe:	4b01      	ldr	r3, [pc, #4]	; (81f04 <main_vendor_disable+0x8>)
   81f00:	701a      	strb	r2, [r3, #0]
}
   81f02:	4770      	bx	lr
   81f04:	20070403 	.word	0x20070403

00081f08 <main_setup_out_received>:

bool main_setup_out_received(void)
{
   81f08:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
   81f0a:	4b0f      	ldr	r3, [pc, #60]	; (81f48 <main_setup_out_received+0x40>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   81f0c:	4a0f      	ldr	r2, [pc, #60]	; (81f4c <main_setup_out_received+0x44>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   81f0e:	88d9      	ldrh	r1, [r3, #6]
    udd_g_ctrlreq.payload = ctrlbuffer;
   81f10:	480f      	ldr	r0, [pc, #60]	; (81f50 <main_setup_out_received+0x48>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   81f12:	2940      	cmp	r1, #64	; 0x40
   81f14:	bf28      	it	cs
   81f16:	2140      	movcs	r1, #64	; 0x40
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   81f18:	7812      	ldrb	r2, [r2, #0]
    udd_g_ctrlreq.payload = ctrlbuffer;
   81f1a:	6098      	str	r0, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   81f1c:	8199      	strh	r1, [r3, #12]
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   81f1e:	b18a      	cbz	r2, 81f44 <main_setup_out_received+0x3c>
   81f20:	4c0c      	ldr	r4, [pc, #48]	; (81f54 <main_setup_out_received+0x4c>)
   81f22:	1e55      	subs	r5, r2, #1
   81f24:	b2ed      	uxtb	r5, r5
   81f26:	1b53      	subs	r3, r2, r5
   81f28:	1f25      	subs	r5, r4, #4
   81f2a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81f2e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   81f32:	e001      	b.n	81f38 <main_setup_out_received+0x30>
   81f34:	42ac      	cmp	r4, r5
   81f36:	d005      	beq.n	81f44 <main_setup_out_received+0x3c>
        handler_status = naeusb_out_request_handlers[i-1]();
   81f38:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   81f3c:	4798      	blx	r3
        if (handler_status == true) {
   81f3e:	2800      	cmp	r0, #0
   81f40:	d0f8      	beq.n	81f34 <main_setup_out_received+0x2c>
        }
    }

    return false;

}
   81f42:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   81f44:	2000      	movs	r0, #0
}
   81f46:	bd38      	pop	{r3, r4, r5, pc}
   81f48:	200723a4 	.word	0x200723a4
   81f4c:	20071b2d 	.word	0x20071b2d
   81f50:	200716ac 	.word	0x200716ac
   81f54:	20071b30 	.word	0x20071b30

00081f58 <main_setup_in_received>:

bool main_setup_in_received(void)
{
   81f58:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   81f5a:	4b0b      	ldr	r3, [pc, #44]	; (81f88 <main_setup_in_received+0x30>)
   81f5c:	781a      	ldrb	r2, [r3, #0]
   81f5e:	b18a      	cbz	r2, 81f84 <main_setup_in_received+0x2c>
   81f60:	4c0a      	ldr	r4, [pc, #40]	; (81f8c <main_setup_in_received+0x34>)
   81f62:	1e55      	subs	r5, r2, #1
   81f64:	b2ed      	uxtb	r5, r5
   81f66:	1b53      	subs	r3, r2, r5
   81f68:	1f25      	subs	r5, r4, #4
   81f6a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81f6e:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   81f72:	e001      	b.n	81f78 <main_setup_in_received+0x20>
   81f74:	42ac      	cmp	r4, r5
   81f76:	d005      	beq.n	81f84 <main_setup_in_received+0x2c>
        handler_status = naeusb_in_request_handlers[i-1]();
   81f78:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   81f7c:	4798      	blx	r3
        if (handler_status == true) {
   81f7e:	2800      	cmp	r0, #0
   81f80:	d0f8      	beq.n	81f74 <main_setup_in_received+0x1c>
        }
    }

    return false;

   81f82:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   81f84:	2000      	movs	r0, #0
   81f86:	bd38      	pop	{r3, r4, r5, pc}
   81f88:	20071b2c 	.word	0x20071b2c
   81f8c:	20071aec 	.word	0x20071aec

00081f90 <naeusb_setup_out_received>:
}


bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
   81f90:	4b04      	ldr	r3, [pc, #16]	; (81fa4 <naeusb_setup_out_received+0x14>)
   81f92:	785a      	ldrb	r2, [r3, #1]
   81f94:	2a22      	cmp	r2, #34	; 0x22
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   81f96:	bf03      	ittte	eq
   81f98:	4a03      	ldreq	r2, [pc, #12]	; (81fa8 <naeusb_setup_out_received+0x18>)
            return true;
   81f9a:	2001      	moveq	r0, #1
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   81f9c:	611a      	streq	r2, [r3, #16]
            break;
    }
    return false;
   81f9e:	2000      	movne	r0, #0
}
   81fa0:	4770      	bx	lr
   81fa2:	bf00      	nop
   81fa4:	200723a4 	.word	0x200723a4
   81fa8:	00081fad 	.word	0x00081fad

00081fac <naeusb_sam_cfg_out>:
{
   81fac:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   81fae:	4b24      	ldr	r3, [pc, #144]	; (82040 <naeusb_sam_cfg_out+0x94>)
   81fb0:	789b      	ldrb	r3, [r3, #2]
   81fb2:	3b01      	subs	r3, #1
   81fb4:	2b10      	cmp	r3, #16
   81fb6:	d80a      	bhi.n	81fce <naeusb_sam_cfg_out+0x22>
   81fb8:	e8df f003 	tbb	[pc, r3]
   81fbc:	091c170a 	.word	0x091c170a
   81fc0:	09090909 	.word	0x09090909
   81fc4:	09090909 	.word	0x09090909
   81fc8:	30090909 	.word	0x30090909
   81fcc:	3d          	.byte	0x3d
   81fcd:	00          	.byte	0x00
}
   81fce:	bd10      	pop	{r4, pc}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81fd0:	213e      	movs	r1, #62	; 0x3e
   81fd2:	2000      	movs	r0, #0
   81fd4:	4b1b      	ldr	r3, [pc, #108]	; (82044 <naeusb_sam_cfg_out+0x98>)
   81fd6:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   81fd8:	4c1b      	ldr	r4, [pc, #108]	; (82048 <naeusb_sam_cfg_out+0x9c>)
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   81fda:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   81fdc:	2800      	cmp	r0, #0
   81fde:	d0fc      	beq.n	81fda <naeusb_sam_cfg_out+0x2e>
   81fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   81fe4:	2010      	movs	r0, #16
   81fe6:	4b19      	ldr	r3, [pc, #100]	; (8204c <naeusb_sam_cfg_out+0xa0>)
   81fe8:	4718      	bx	r3
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81fea:	2010      	movs	r0, #16
}
   81fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81ff0:	4b17      	ldr	r3, [pc, #92]	; (82050 <naeusb_sam_cfg_out+0xa4>)
   81ff2:	4718      	bx	r3
        board_power(0);
   81ff4:	4b17      	ldr	r3, [pc, #92]	; (82054 <naeusb_sam_cfg_out+0xa8>)
   81ff6:	4798      	blx	r3
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   81ff8:	2201      	movs	r2, #1
   81ffa:	210c      	movs	r1, #12
   81ffc:	4b16      	ldr	r3, [pc, #88]	; (82058 <naeusb_sam_cfg_out+0xac>)
   81ffe:	4817      	ldr	r0, [pc, #92]	; (8205c <naeusb_sam_cfg_out+0xb0>)
   82000:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   82002:	4b17      	ldr	r3, [pc, #92]	; (82060 <naeusb_sam_cfg_out+0xb4>)
   82004:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   82006:	4a17      	ldr	r2, [pc, #92]	; (82064 <naeusb_sam_cfg_out+0xb8>)
   82008:	6853      	ldr	r3, [r2, #4]
   8200a:	0399      	lsls	r1, r3, #14
   8200c:	d4fc      	bmi.n	82008 <naeusb_sam_cfg_out+0x5c>
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   8200e:	6813      	ldr	r3, [r2, #0]
   82010:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   82014:	f043 0305 	orr.w	r3, r3, #5
   82018:	6013      	str	r3, [r2, #0]
        while(1);
   8201a:	e7fe      	b.n	8201a <naeusb_sam_cfg_out+0x6e>
   8201c:	4b10      	ldr	r3, [pc, #64]	; (82060 <naeusb_sam_cfg_out+0xb4>)
   8201e:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   82020:	4a10      	ldr	r2, [pc, #64]	; (82064 <naeusb_sam_cfg_out+0xb8>)
   82022:	6853      	ldr	r3, [r2, #4]
   82024:	039b      	lsls	r3, r3, #14
   82026:	d4fc      	bmi.n	82022 <naeusb_sam_cfg_out+0x76>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   82028:	6813      	ldr	r3, [r2, #0]
   8202a:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   8202e:	f043 0305 	orr.w	r3, r3, #5
   82032:	6013      	str	r3, [r2, #0]
        while(1);
   82034:	e7fe      	b.n	82034 <naeusb_sam_cfg_out+0x88>
        FPGA_releaselock();
   82036:	4b0c      	ldr	r3, [pc, #48]	; (82068 <naeusb_sam_cfg_out+0xbc>)
}
   82038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FPGA_releaselock();
   8203c:	4718      	bx	r3
   8203e:	bf00      	nop
   82040:	200723a4 	.word	0x200723a4
   82044:	0008435d 	.word	0x0008435d
   82048:	000843ad 	.word	0x000843ad
   8204c:	000842a5 	.word	0x000842a5
   82050:	00084301 	.word	0x00084301
   82054:	00081279 	.word	0x00081279
   82058:	00084545 	.word	0x00084545
   8205c:	400e0a00 	.word	0x400e0a00
   82060:	00085111 	.word	0x00085111
   82064:	400e1a00 	.word	0x400e1a00
   82068:	00083ce5 	.word	0x00083ce5

0008206c <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   8206c:	b538      	push	{r3, r4, r5, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
   8206e:	4c15      	ldr	r4, [pc, #84]	; (820c4 <naeusb_setup_in_received+0x58>)
   82070:	7863      	ldrb	r3, [r4, #1]
   82072:	2b17      	cmp	r3, #23
   82074:	d01b      	beq.n	820ae <naeusb_setup_in_received+0x42>
   82076:	2b40      	cmp	r3, #64	; 0x40
   82078:	d117      	bne.n	820aa <naeusb_setup_in_received+0x3e>
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   8207a:	f04f 0c20 	mov.w	ip, #32
    strncpy(respbuf, BUILD_TIME, 64);
   8207e:	4d12      	ldr	r5, [pc, #72]	; (820c8 <naeusb_setup_in_received+0x5c>)
   82080:	4b12      	ldr	r3, [pc, #72]	; (820cc <naeusb_setup_in_received+0x60>)
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   82082:	2237      	movs	r2, #55	; 0x37
    strncpy(respbuf, BUILD_TIME, 64);
   82084:	e893 0003 	ldmia.w	r3, {r0, r1}
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   82088:	f885 c008 	strb.w	ip, [r5, #8]
    strncpy(respbuf, BUILD_TIME, 64);
   8208c:	e885 0003 	stmia.w	r5, {r0, r1}
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   82090:	4b0f      	ldr	r3, [pc, #60]	; (820d0 <naeusb_setup_in_received+0x64>)
   82092:	4910      	ldr	r1, [pc, #64]	; (820d4 <naeusb_setup_in_received+0x68>)
   82094:	f105 0009 	add.w	r0, r5, #9
   82098:	4798      	blx	r3
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   8209a:	4628      	mov	r0, r5
   8209c:	4b0e      	ldr	r3, [pc, #56]	; (820d8 <naeusb_setup_in_received+0x6c>)
    udd_g_ctrlreq.payload = respbuf;
   8209e:	60a5      	str	r5, [r4, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   820a0:	4798      	blx	r3
   820a2:	4603      	mov	r3, r0
        case REQ_FW_VERSION:
            return naeusb_fw_version_in();
            break;
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
   820a4:	2001      	movs	r0, #1
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   820a6:	81a3      	strh	r3, [r4, #12]
            break;
    }
    return false;
}
   820a8:	bd38      	pop	{r3, r4, r5, pc}
    switch (udd_g_ctrlreq.req.bRequest) {
   820aa:	2000      	movs	r0, #0
}
   820ac:	bd38      	pop	{r3, r4, r5, pc}
    respbuf[0] = FW_VER_MAJOR;
   820ae:	f240 2501 	movw	r5, #513	; 0x201
    respbuf[2] = FW_VER_DEBUG;
   820b2:	2100      	movs	r1, #0
    udd_g_ctrlreq.payload_size = 3;
   820b4:	2203      	movs	r2, #3
    respbuf[0] = FW_VER_MAJOR;
   820b6:	4b04      	ldr	r3, [pc, #16]	; (820c8 <naeusb_setup_in_received+0x5c>)
    udd_g_ctrlreq.payload_size = 3;
   820b8:	2001      	movs	r0, #1
    respbuf[0] = FW_VER_MAJOR;
   820ba:	801d      	strh	r5, [r3, #0]
    respbuf[2] = FW_VER_DEBUG;
   820bc:	7099      	strb	r1, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   820be:	60a3      	str	r3, [r4, #8]
    udd_g_ctrlreq.payload_size = 3;
   820c0:	81a2      	strh	r2, [r4, #12]
}
   820c2:	bd38      	pop	{r3, r4, r5, pc}
   820c4:	200723a4 	.word	0x200723a4
   820c8:	20071b70 	.word	0x20071b70
   820cc:	0008da60 	.word	0x0008da60
   820d0:	00086f81 	.word	0x00086f81
   820d4:	0008da54 	.word	0x0008da54
   820d8:	00086f25 	.word	0x00086f25

000820dc <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   820dc:	b510      	push	{r4, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
   820de:	4b04      	ldr	r3, [pc, #16]	; (820f0 <naeusb_register_handlers+0x14>)
   820e0:	4804      	ldr	r0, [pc, #16]	; (820f4 <naeusb_register_handlers+0x18>)
   820e2:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   820e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    naeusb_add_out_handler(naeusb_setup_out_received);
   820e8:	4803      	ldr	r0, [pc, #12]	; (820f8 <naeusb_register_handlers+0x1c>)
   820ea:	4b04      	ldr	r3, [pc, #16]	; (820fc <naeusb_register_handlers+0x20>)
   820ec:	4718      	bx	r3
   820ee:	bf00      	nop
   820f0:	00081e51 	.word	0x00081e51
   820f4:	0008206d 	.word	0x0008206d
   820f8:	00081f91 	.word	0x00081f91
   820fc:	00081e79 	.word	0x00081e79

00082100 <usart_setup_out_received>:
    }
}

bool usart_setup_out_received(void)
{
    switch(udd_g_ctrlreq.req.bRequest) {
   82100:	4a0a      	ldr	r2, [pc, #40]	; (8212c <usart_setup_out_received+0x2c>)
   82102:	7853      	ldrb	r3, [r2, #1]
   82104:	2b1b      	cmp	r3, #27
   82106:	d005      	beq.n	82114 <usart_setup_out_received+0x14>
   82108:	2b31      	cmp	r3, #49	; 0x31
   8210a:	d00b      	beq.n	82124 <usart_setup_out_received+0x24>
   8210c:	2b1a      	cmp	r3, #26
   8210e:	d005      	beq.n	8211c <usart_setup_out_received+0x1c>
   82110:	2000      	movs	r0, #0
   82112:	4770      	bx	lr
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   82114:	4b06      	ldr	r3, [pc, #24]	; (82130 <usart_setup_out_received+0x30>)
        return true;
   82116:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   82118:	6113      	str	r3, [r2, #16]
        return true;
   8211a:	4770      	bx	lr
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   8211c:	4b05      	ldr	r3, [pc, #20]	; (82134 <usart_setup_out_received+0x34>)
        return true;
   8211e:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   82120:	6113      	str	r3, [r2, #16]
        return true;
   82122:	4770      	bx	lr
    case REQ_AVR_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_avr_program_void;
        return true;
#endif
    case REQ_CDC_SETTINGS_EN:
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   82124:	4b04      	ldr	r3, [pc, #16]	; (82138 <usart_setup_out_received+0x38>)
        return true;
   82126:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   82128:	6113      	str	r3, [r2, #16]
        break;
    }
    return false;
}
   8212a:	4770      	bx	lr
   8212c:	200723a4 	.word	0x200723a4
   82130:	000824e5 	.word	0x000824e5
   82134:	00082549 	.word	0x00082549
   82138:	0008213d 	.word	0x0008213d

0008213c <naeusb_cdc_settings_out>:
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   8213c:	2300      	movs	r3, #0
{
   8213e:	b430      	push	{r4, r5}
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   82140:	4a11      	ldr	r2, [pc, #68]	; (82188 <naeusb_cdc_settings_out+0x4c>)
		if (port == 0) break;
   82142:	4d12      	ldr	r5, [pc, #72]	; (8218c <naeusb_cdc_settings_out+0x50>)
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   82144:	f8b2 c002 	ldrh.w	ip, [r2, #2]
		if (port == 0) break;
   82148:	4c11      	ldr	r4, [pc, #68]	; (82190 <naeusb_cdc_settings_out+0x54>)
   8214a:	b133      	cbz	r3, 8215a <naeusb_cdc_settings_out+0x1e>
   8214c:	2b01      	cmp	r3, #1
   8214e:	d018      	beq.n	82182 <naeusb_cdc_settings_out+0x46>
    for (uint8_t i = 0; i < 4; i++) {
   82150:	3301      	adds	r3, #1
   82152:	2b04      	cmp	r3, #4
   82154:	d1f9      	bne.n	8214a <naeusb_cdc_settings_out+0xe>
}
   82156:	bc30      	pop	{r4, r5}
   82158:	4770      	bx	lr
		if (port == 0) break;
   8215a:	4629      	mov	r1, r5
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   8215c:	fa4c f203 	asr.w	r2, ip, r3
   82160:	f012 0201 	ands.w	r2, r2, #1
   82164:	d006      	beq.n	82174 <naeusb_cdc_settings_out+0x38>
                driver->cdc_settings_change = 1;
   82166:	f891 229c 	ldrb.w	r2, [r1, #668]	; 0x29c
   8216a:	f042 0208 	orr.w	r2, r2, #8
   8216e:	f881 229c 	strb.w	r2, [r1, #668]	; 0x29c
   82172:	e7ed      	b.n	82150 <naeusb_cdc_settings_out+0x14>
                driver->cdc_settings_change = 0;
   82174:	f891 029c 	ldrb.w	r0, [r1, #668]	; 0x29c
   82178:	f362 00c3 	bfi	r0, r2, #3, #1
   8217c:	f881 029c 	strb.w	r0, [r1, #668]	; 0x29c
   82180:	e7e6      	b.n	82150 <naeusb_cdc_settings_out+0x14>
		if (port == 0) break;
   82182:	4621      	mov	r1, r4
   82184:	e7ea      	b.n	8215c <naeusb_cdc_settings_out+0x20>
   82186:	bf00      	nop
   82188:	200723a4 	.word	0x200723a4
   8218c:	20070404 	.word	0x20070404
   82190:	200706a4 	.word	0x200706a4

00082194 <generic_isr>:
{
   82194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	status = usart_get_status(driver->usart);
   82198:	4b1a      	ldr	r3, [pc, #104]	; (82204 <generic_isr+0x70>)
{
   8219a:	4604      	mov	r4, r0
	status = usart_get_status(driver->usart);
   8219c:	6800      	ldr	r0, [r0, #0]
   8219e:	4798      	blx	r3
	if (status & US_CSR_RXRDY){
   821a0:	07c1      	lsls	r1, r0, #31
	status = usart_get_status(driver->usart);
   821a2:	4605      	mov	r5, r0
	if (status & US_CSR_RXRDY){
   821a4:	d403      	bmi.n	821ae <generic_isr+0x1a>
	if (status & US_CSR_TXRDY){
   821a6:	07ab      	lsls	r3, r5, #30
   821a8:	d415      	bmi.n	821d6 <generic_isr+0x42>
}
   821aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
   821ae:	4620      	mov	r0, r4
   821b0:	f850 3b1c 	ldr.w	r3, [r0], #28
		add_to_circ_buf(&driver->rxbuf, temp, false);
   821b4:	2200      	movs	r2, #0
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
   821b6:	699e      	ldr	r6, [r3, #24]
		add_to_circ_buf(&driver->rxbuf, temp, false);
   821b8:	4f13      	ldr	r7, [pc, #76]	; (82208 <generic_isr+0x74>)
   821ba:	b2f6      	uxtb	r6, r6
   821bc:	4631      	mov	r1, r6
   821be:	47b8      	blx	r7
        if (driver->cdc_enabled)
   821c0:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   821c4:	075a      	lsls	r2, r3, #29
   821c6:	d5ee      	bpl.n	821a6 <generic_isr+0x12>
            add_to_circ_buf(&driver->rx_cdc_buf, temp, false);
   821c8:	2200      	movs	r2, #0
   821ca:	4631      	mov	r1, r6
   821cc:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   821d0:	47b8      	blx	r7
	if (status & US_CSR_TXRDY){
   821d2:	07ab      	lsls	r3, r5, #30
   821d4:	d5e9      	bpl.n	821aa <generic_isr+0x16>
		if (circ_buf_has_char(&driver->txbuf)){
   821d6:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
   821da:	4628      	mov	r0, r5
   821dc:	4b0b      	ldr	r3, [pc, #44]	; (8220c <generic_isr+0x78>)
   821de:	4798      	blx	r3
   821e0:	b148      	cbz	r0, 821f6 <generic_isr+0x62>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
   821e2:	4628      	mov	r0, r5
   821e4:	4b0a      	ldr	r3, [pc, #40]	; (82210 <generic_isr+0x7c>)
   821e6:	6824      	ldr	r4, [r4, #0]
   821e8:	4798      	blx	r3
   821ea:	4b0a      	ldr	r3, [pc, #40]	; (82214 <generic_isr+0x80>)
   821ec:	4601      	mov	r1, r0
   821ee:	4620      	mov	r0, r4
}
   821f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
   821f4:	4718      	bx	r3
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
   821f6:	6820      	ldr	r0, [r4, #0]
   821f8:	2102      	movs	r1, #2
}
   821fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
   821fe:	4b06      	ldr	r3, [pc, #24]	; (82218 <generic_isr+0x84>)
   82200:	4718      	bx	r3
   82202:	bf00      	nop
   82204:	00083f95 	.word	0x00083f95
   82208:	0008028d 	.word	0x0008028d
   8220c:	000802d9 	.word	0x000802d9
   82210:	000802b9 	.word	0x000802b9
   82214:	00083f99 	.word	0x00083f99
   82218:	00083f8d 	.word	0x00083f8d

0008221c <USART0_Handler>:
	generic_isr(&usart0_driver);
   8221c:	4801      	ldr	r0, [pc, #4]	; (82224 <USART0_Handler+0x8>)
   8221e:	4b02      	ldr	r3, [pc, #8]	; (82228 <USART0_Handler+0xc>)
   82220:	4718      	bx	r3
   82222:	bf00      	nop
   82224:	20070404 	.word	0x20070404
   82228:	00082195 	.word	0x00082195

0008222c <USART1_Handler>:
	generic_isr(&usart1_driver);
   8222c:	4801      	ldr	r0, [pc, #4]	; (82234 <USART1_Handler+0x8>)
   8222e:	4b02      	ldr	r3, [pc, #8]	; (82238 <USART1_Handler+0xc>)
   82230:	4718      	bx	r3
   82232:	bf00      	nop
   82234:	200706a4 	.word	0x200706a4
   82238:	00082195 	.word	0x00082195

0008223c <ctrl_usart_in>:
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   8223c:	4a17      	ldr	r2, [pc, #92]	; (8229c <ctrl_usart_in+0x60>)
   8223e:	8853      	ldrh	r3, [r2, #2]
		if (port == 0) break;
   82240:	0a19      	lsrs	r1, r3, #8
   82242:	d003      	beq.n	8224c <ctrl_usart_in+0x10>
   82244:	2901      	cmp	r1, #1
   82246:	d026      	beq.n	82296 <ctrl_usart_in+0x5a>
        return false;
   82248:	2000      	movs	r0, #0
}
   8224a:	4770      	bx	lr
		if (port == 0) break;
   8224c:	4814      	ldr	r0, [pc, #80]	; (822a0 <ctrl_usart_in+0x64>)
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   8224e:	b2db      	uxtb	r3, r3
   82250:	2b14      	cmp	r3, #20
{
   82252:	b510      	push	{r4, lr}
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   82254:	d017      	beq.n	82286 <ctrl_usart_in+0x4a>
   82256:	2b18      	cmp	r3, #24
   82258:	d005      	beq.n	82266 <ctrl_usart_in+0x2a>
   8225a:	f1a3 0010 	sub.w	r0, r3, #16
   8225e:	fab0 f080 	clz	r0, r0
   82262:	0940      	lsrs	r0, r0, #5
}
   82264:	bd10      	pop	{r4, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
   82266:	88d3      	ldrh	r3, [r2, #6]
   82268:	2b03      	cmp	r3, #3
   8226a:	d90a      	bls.n	82282 <ctrl_usart_in+0x46>
        udd_g_ctrlreq.payload_size = 4;
   8226c:	2104      	movs	r1, #4
        udd_g_ctrlreq.payload = respbuf;
   8226e:	4c0d      	ldr	r4, [pc, #52]	; (822a4 <ctrl_usart_in+0x68>)
        cnt = circ_buf_count(&driver->txbuf);
   82270:	4b0d      	ldr	r3, [pc, #52]	; (822a8 <ctrl_usart_in+0x6c>)
   82272:	30f0      	adds	r0, #240	; 0xf0
        udd_g_ctrlreq.payload = respbuf;
   82274:	6094      	str	r4, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   82276:	8191      	strh	r1, [r2, #12]
        cnt = circ_buf_count(&driver->txbuf);
   82278:	4798      	blx	r3
   8227a:	4603      	mov	r3, r0
        return true;
   8227c:	2001      	movs	r0, #1
        word2buf(respbuf, cnt);
   8227e:	6023      	str	r3, [r4, #0]
}
   82280:	bd10      	pop	{r4, pc}
        return false;
   82282:	2000      	movs	r0, #0
}
   82284:	bd10      	pop	{r4, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
   82286:	88d3      	ldrh	r3, [r2, #6]
   82288:	2b03      	cmp	r3, #3
   8228a:	d9fa      	bls.n	82282 <ctrl_usart_in+0x46>
        udd_g_ctrlreq.payload_size = 4;
   8228c:	2104      	movs	r1, #4
        udd_g_ctrlreq.payload = respbuf;
   8228e:	4c05      	ldr	r4, [pc, #20]	; (822a4 <ctrl_usart_in+0x68>)
        cnt = circ_buf_count(&driver->rxbuf);
   82290:	4b05      	ldr	r3, [pc, #20]	; (822a8 <ctrl_usart_in+0x6c>)
   82292:	301c      	adds	r0, #28
   82294:	e7ee      	b.n	82274 <ctrl_usart_in+0x38>
		if (port == 0) break;
   82296:	4805      	ldr	r0, [pc, #20]	; (822ac <ctrl_usart_in+0x70>)
   82298:	e7d9      	b.n	8224e <ctrl_usart_in+0x12>
   8229a:	bf00      	nop
   8229c:	200723a4 	.word	0x200723a4
   822a0:	20070404 	.word	0x20070404
   822a4:	20071b70 	.word	0x20071b70
   822a8:	000802e5 	.word	0x000802e5
   822ac:	200706a4 	.word	0x200706a4

000822b0 <configure_usart>:
{
   822b0:	b538      	push	{r3, r4, r5, lr}
    switch(stop_bits)
   822b2:	2a01      	cmp	r2, #1
{
   822b4:	4604      	mov	r4, r0
   822b6:	f89d 5010 	ldrb.w	r5, [sp, #16]
    driver->usartopts.baudrate = baud;
   822ba:	6041      	str	r1, [r0, #4]
    switch(stop_bits)
   822bc:	d00e      	beq.n	822dc <configure_usart+0x2c>
   822be:	2a02      	cmp	r2, #2
   822c0:	d008      	beq.n	822d4 <configure_usart+0x24>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   822c2:	2200      	movs	r2, #0
   822c4:	6102      	str	r2, [r0, #16]
    switch(parity)
   822c6:	3b01      	subs	r3, #1
   822c8:	2b03      	cmp	r3, #3
   822ca:	d869      	bhi.n	823a0 <configure_usart+0xf0>
   822cc:	e8df f003 	tbb	[pc, r3]
   822d0:	0a514e34 	.word	0x0a514e34
            driver->usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   822d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   822d8:	6102      	str	r2, [r0, #16]
            break;
   822da:	e7f4      	b.n	822c6 <configure_usart+0x16>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   822dc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   822e0:	6102      	str	r2, [r0, #16]
            break;
   822e2:	e7f0      	b.n	822c6 <configure_usart+0x16>
            driver->usartopts.parity_type = US_MR_PAR_SPACE;
   822e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   822e8:	60e3      	str	r3, [r4, #12]
    switch(dbits)
   822ea:	2d06      	cmp	r5, #6
   822ec:	d029      	beq.n	82342 <configure_usart+0x92>
   822ee:	2d07      	cmp	r5, #7
   822f0:	d046      	beq.n	82380 <configure_usart+0xd0>
   822f2:	2d05      	cmp	r5, #5
   822f4:	d041      	beq.n	8237a <configure_usart+0xca>
            driver->usartopts.char_length = US_MR_CHRL_8_BIT;
   822f6:	23c0      	movs	r3, #192	; 0xc0
   822f8:	60a3      	str	r3, [r4, #8]
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   822fa:	2200      	movs	r2, #0
    if (driver->usart_id == 0) {
   822fc:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   82300:	6162      	str	r2, [r4, #20]
    if (driver->usart_id == 0) {
   82302:	b333      	cbz	r3, 82352 <configure_usart+0xa2>
    } else if (driver->usart_id == 1) {
   82304:	2b01      	cmp	r3, #1
   82306:	d03e      	beq.n	82386 <configure_usart+0xd6>
    driver->enabled = 1;
   82308:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
   8230c:	4d26      	ldr	r5, [pc, #152]	; (823a8 <configure_usart+0xf8>)
    driver->enabled = 1;
   8230e:	f043 0302 	orr.w	r3, r3, #2
   82312:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
   82316:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   8231a:	47a8      	blx	r5
    init_circ_buf(&driver->rxbuf);
   8231c:	f104 001c 	add.w	r0, r4, #28
   82320:	47a8      	blx	r5
    init_circ_buf(&driver->rx_cdc_buf);
   82322:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   82326:	47a8      	blx	r5
    usart_init_rs232(driver->usart, &driver->usartopts, sysclk_get_cpu_hz());
   82328:	4621      	mov	r1, r4
   8232a:	4a20      	ldr	r2, [pc, #128]	; (823ac <configure_usart+0xfc>)
   8232c:	4b20      	ldr	r3, [pc, #128]	; (823b0 <configure_usart+0x100>)
   8232e:	f851 0b04 	ldr.w	r0, [r1], #4
   82332:	4798      	blx	r3
}
   82334:	2001      	movs	r0, #1
   82336:	bd38      	pop	{r3, r4, r5, pc}
            driver->usartopts.parity_type = US_MR_PAR_ODD;
   82338:	f44f 7300 	mov.w	r3, #512	; 0x200
    switch(dbits)
   8233c:	2d06      	cmp	r5, #6
            driver->usartopts.parity_type = US_MR_PAR_ODD;
   8233e:	60e3      	str	r3, [r4, #12]
    switch(dbits)
   82340:	d1d5      	bne.n	822ee <configure_usart+0x3e>
            driver->usartopts.char_length = US_MR_CHRL_6_BIT;
   82342:	2340      	movs	r3, #64	; 0x40
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   82344:	2200      	movs	r2, #0
            driver->usartopts.char_length = US_MR_CHRL_6_BIT;
   82346:	60a3      	str	r3, [r4, #8]
    if (driver->usart_id == 0) {
   82348:	f8d4 3298 	ldr.w	r3, [r4, #664]	; 0x298
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   8234c:	6162      	str	r2, [r4, #20]
    if (driver->usart_id == 0) {
   8234e:	2b00      	cmp	r3, #0
   82350:	d1d8      	bne.n	82304 <configure_usart+0x54>
   82352:	4b18      	ldr	r3, [pc, #96]	; (823b4 <configure_usart+0x104>)
   82354:	2011      	movs	r0, #17
   82356:	4798      	blx	r3
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   82358:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   8235c:	2130      	movs	r1, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8235e:	4b16      	ldr	r3, [pc, #88]	; (823b8 <configure_usart+0x108>)
   82360:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   82364:	f883 1311 	strb.w	r1, [r3, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   82368:	601a      	str	r2, [r3, #0]
   8236a:	e7cd      	b.n	82308 <configure_usart+0x58>
            driver->usartopts.parity_type = US_MR_PAR_EVEN;
   8236c:	2300      	movs	r3, #0
   8236e:	60e3      	str	r3, [r4, #12]
            break;
   82370:	e7bb      	b.n	822ea <configure_usart+0x3a>
            driver->usartopts.parity_type = US_MR_PAR_MARK;
   82372:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   82376:	60e3      	str	r3, [r4, #12]
            break;
   82378:	e7b7      	b.n	822ea <configure_usart+0x3a>
            driver->usartopts.char_length = US_MR_CHRL_5_BIT;
   8237a:	2300      	movs	r3, #0
   8237c:	60a3      	str	r3, [r4, #8]
            break;
   8237e:	e7bc      	b.n	822fa <configure_usart+0x4a>
            driver->usartopts.char_length = US_MR_CHRL_7_BIT;
   82380:	2380      	movs	r3, #128	; 0x80
   82382:	60a3      	str	r3, [r4, #8]
            break;
   82384:	e7b9      	b.n	822fa <configure_usart+0x4a>
   82386:	4b0b      	ldr	r3, [pc, #44]	; (823b4 <configure_usart+0x104>)
   82388:	2012      	movs	r0, #18
   8238a:	4798      	blx	r3
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8238c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   82390:	2130      	movs	r1, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   82392:	4b09      	ldr	r3, [pc, #36]	; (823b8 <configure_usart+0x108>)
   82394:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   82398:	f883 1312 	strb.w	r1, [r3, #786]	; 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8239c:	601a      	str	r2, [r3, #0]
   8239e:	e7b3      	b.n	82308 <configure_usart+0x58>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   823a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   823a4:	60e3      	str	r3, [r4, #12]
            break;
   823a6:	e7a0      	b.n	822ea <configure_usart+0x3a>
   823a8:	00080281 	.word	0x00080281
   823ac:	0501bd00 	.word	0x0501bd00
   823b0:	00083e2d 	.word	0x00083e2d
   823b4:	000843f1 	.word	0x000843f1
   823b8:	e000e100 	.word	0xe000e100

000823bc <ctrl_usart_out>:
{
   823bc:	b570      	push	{r4, r5, r6, lr}
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   823be:	4c3d      	ldr	r4, [pc, #244]	; (824b4 <ctrl_usart_out+0xf8>)
{
   823c0:	b082      	sub	sp, #8
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   823c2:	8860      	ldrh	r0, [r4, #2]
		if (port == 0) break;
   823c4:	0a03      	lsrs	r3, r0, #8
   823c6:	d003      	beq.n	823d0 <ctrl_usart_out+0x14>
   823c8:	2b01      	cmp	r3, #1
   823ca:	d048      	beq.n	8245e <ctrl_usart_out+0xa2>
}
   823cc:	b002      	add	sp, #8
   823ce:	bd70      	pop	{r4, r5, r6, pc}
		if (port == 0) break;
   823d0:	4d39      	ldr	r5, [pc, #228]	; (824b8 <ctrl_usart_out+0xfc>)
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   823d2:	b2c0      	uxtb	r0, r0
   823d4:	2811      	cmp	r0, #17
   823d6:	d017      	beq.n	82408 <ctrl_usart_out+0x4c>
   823d8:	2812      	cmp	r0, #18
   823da:	d027      	beq.n	8242c <ctrl_usart_out+0x70>
   823dc:	2810      	cmp	r0, #16
   823de:	d1f5      	bne.n	823cc <ctrl_usart_out+0x10>
        if (udd_g_ctrlreq.req.wLength != 7) return;
   823e0:	88e3      	ldrh	r3, [r4, #6]
   823e2:	2b07      	cmp	r3, #7
   823e4:	d1f2      	bne.n	823cc <ctrl_usart_out+0x10>
        buf2word(baud, udd_g_ctrlreq.payload);
   823e6:	68a0      	ldr	r0, [r4, #8]
    if (driver->usart_id == 0) {
   823e8:	f8d5 3298 	ldr.w	r3, [r5, #664]	; 0x298
        buf2word(baud, udd_g_ctrlreq.payload);
   823ec:	6806      	ldr	r6, [r0, #0]
    if (driver->usart_id == 0) {
   823ee:	2b00      	cmp	r3, #0
   823f0:	d037      	beq.n	82462 <ctrl_usart_out+0xa6>
    } else if (driver->usart_id == 1) {
   823f2:	2b01      	cmp	r3, #1
   823f4:	d050      	beq.n	82498 <ctrl_usart_out+0xdc>
        configure_usart(driver, baud, udd_g_ctrlreq.payload[4], 
   823f6:	7981      	ldrb	r1, [r0, #6]
   823f8:	7943      	ldrb	r3, [r0, #5]
   823fa:	7902      	ldrb	r2, [r0, #4]
   823fc:	4c2f      	ldr	r4, [pc, #188]	; (824bc <ctrl_usart_out+0x100>)
   823fe:	9100      	str	r1, [sp, #0]
   82400:	4628      	mov	r0, r5
   82402:	4631      	mov	r1, r6
   82404:	47a0      	blx	r4
        return ;
   82406:	e7e1      	b.n	823cc <ctrl_usart_out+0x10>
    if (driver->usart_id == 0) {
   82408:	f8d5 3298 	ldr.w	r3, [r5, #664]	; 0x298
   8240c:	b1db      	cbz	r3, 82446 <ctrl_usart_out+0x8a>
    } else if (driver->usart_id == 1) {
   8240e:	2b01      	cmp	r3, #1
   82410:	d035      	beq.n	8247e <ctrl_usart_out+0xc2>
        usart_enable_rx(driver->usart);
   82412:	6828      	ldr	r0, [r5, #0]
   82414:	4b2a      	ldr	r3, [pc, #168]	; (824c0 <ctrl_usart_out+0x104>)
   82416:	4798      	blx	r3
        usart_enable_tx(driver->usart);
   82418:	6828      	ldr	r0, [r5, #0]
   8241a:	4b2a      	ldr	r3, [pc, #168]	; (824c4 <ctrl_usart_out+0x108>)
   8241c:	4798      	blx	r3
        usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   8241e:	2101      	movs	r1, #1
   82420:	6828      	ldr	r0, [r5, #0]
   82422:	4b29      	ldr	r3, [pc, #164]	; (824c8 <ctrl_usart_out+0x10c>)
}
   82424:	b002      	add	sp, #8
   82426:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   8242a:	4718      	bx	r3
        usart_disable_rx(driver->usart);
   8242c:	6828      	ldr	r0, [r5, #0]
   8242e:	4b27      	ldr	r3, [pc, #156]	; (824cc <ctrl_usart_out+0x110>)
   82430:	4798      	blx	r3
        usart_disable_tx(driver->usart);
   82432:	6828      	ldr	r0, [r5, #0]
   82434:	4b26      	ldr	r3, [pc, #152]	; (824d0 <ctrl_usart_out+0x114>)
   82436:	4798      	blx	r3
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   82438:	2103      	movs	r1, #3
   8243a:	6828      	ldr	r0, [r5, #0]
   8243c:	4b25      	ldr	r3, [pc, #148]	; (824d4 <ctrl_usart_out+0x118>)
}
   8243e:	b002      	add	sp, #8
   82440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   82444:	4718      	bx	r3
   82446:	4b24      	ldr	r3, [pc, #144]	; (824d8 <ctrl_usart_out+0x11c>)
   82448:	4798      	blx	r3
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8244a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   8244e:	2130      	movs	r1, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   82450:	4b22      	ldr	r3, [pc, #136]	; (824dc <ctrl_usart_out+0x120>)
   82452:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   82456:	f883 1311 	strb.w	r1, [r3, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8245a:	601a      	str	r2, [r3, #0]
   8245c:	e7d9      	b.n	82412 <ctrl_usart_out+0x56>
		if (port == 0) break;
   8245e:	4d20      	ldr	r5, [pc, #128]	; (824e0 <ctrl_usart_out+0x124>)
   82460:	e7b7      	b.n	823d2 <ctrl_usart_out+0x16>
   82462:	4b1d      	ldr	r3, [pc, #116]	; (824d8 <ctrl_usart_out+0x11c>)
   82464:	2011      	movs	r0, #17
   82466:	4798      	blx	r3
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   82468:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   8246c:	2130      	movs	r1, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8246e:	4b1b      	ldr	r3, [pc, #108]	; (824dc <ctrl_usart_out+0x120>)
        configure_usart(driver, baud, udd_g_ctrlreq.payload[4], 
   82470:	68a0      	ldr	r0, [r4, #8]
   82472:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   82476:	f883 1311 	strb.w	r1, [r3, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8247a:	601a      	str	r2, [r3, #0]
   8247c:	e7bb      	b.n	823f6 <ctrl_usart_out+0x3a>
   8247e:	4b16      	ldr	r3, [pc, #88]	; (824d8 <ctrl_usart_out+0x11c>)
   82480:	2012      	movs	r0, #18
   82482:	4798      	blx	r3
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   82484:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   82488:	2130      	movs	r1, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8248a:	4b14      	ldr	r3, [pc, #80]	; (824dc <ctrl_usart_out+0x120>)
   8248c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   82490:	f883 1312 	strb.w	r1, [r3, #786]	; 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   82494:	601a      	str	r2, [r3, #0]
   82496:	e7bc      	b.n	82412 <ctrl_usart_out+0x56>
   82498:	4b0f      	ldr	r3, [pc, #60]	; (824d8 <ctrl_usart_out+0x11c>)
   8249a:	2012      	movs	r0, #18
   8249c:	4798      	blx	r3
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8249e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   824a2:	2130      	movs	r1, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   824a4:	4b0d      	ldr	r3, [pc, #52]	; (824dc <ctrl_usart_out+0x120>)
   824a6:	68a0      	ldr	r0, [r4, #8]
   824a8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   824ac:	f883 1312 	strb.w	r1, [r3, #786]	; 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   824b0:	601a      	str	r2, [r3, #0]
   824b2:	e7a0      	b.n	823f6 <ctrl_usart_out+0x3a>
   824b4:	200723a4 	.word	0x200723a4
   824b8:	20070404 	.word	0x20070404
   824bc:	000822b1 	.word	0x000822b1
   824c0:	00083f79 	.word	0x00083f79
   824c4:	00083f69 	.word	0x00083f69
   824c8:	00083f89 	.word	0x00083f89
   824cc:	00083f81 	.word	0x00083f81
   824d0:	00083f71 	.word	0x00083f71
   824d4:	00083f8d 	.word	0x00083f8d
   824d8:	000843f1 	.word	0x000843f1
   824dc:	e000e100 	.word	0xe000e100
   824e0:	200706a4 	.word	0x200706a4

000824e4 <ctrl_usart_cb>:
	ctrl_usart_out();
   824e4:	4b00      	ldr	r3, [pc, #0]	; (824e8 <ctrl_usart_cb+0x4>)
   824e6:	4718      	bx	r3
   824e8:	000823bd 	.word	0x000823bd

000824ec <usart_driver_putchar>:
{
   824ec:	b570      	push	{r4, r5, r6, lr}
   824ee:	4604      	mov	r4, r0
    add_to_circ_buf(&driver->txbuf, data, false);
   824f0:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
   824f4:	2200      	movs	r2, #0
   824f6:	4628      	mov	r0, r5
   824f8:	4b0d      	ldr	r3, [pc, #52]	; (82530 <usart_driver_putchar+0x44>)
   824fa:	4798      	blx	r3
	if ((usart_get_interrupt_mask(driver->usart) & US_CSR_TXRDY) == 0) {
   824fc:	6820      	ldr	r0, [r4, #0]
   824fe:	4b0d      	ldr	r3, [pc, #52]	; (82534 <usart_driver_putchar+0x48>)
   82500:	4798      	blx	r3
   82502:	0782      	lsls	r2, r0, #30
   82504:	d500      	bpl.n	82508 <usart_driver_putchar+0x1c>
}
   82506:	bd70      	pop	{r4, r5, r6, pc}
		if ((usart_get_status(driver->usart) & US_CSR_TXRDY))
   82508:	4b0b      	ldr	r3, [pc, #44]	; (82538 <usart_driver_putchar+0x4c>)
   8250a:	6820      	ldr	r0, [r4, #0]
   8250c:	4798      	blx	r3
   8250e:	0783      	lsls	r3, r0, #30
   82510:	d405      	bmi.n	8251e <usart_driver_putchar+0x32>
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
   82512:	6820      	ldr	r0, [r4, #0]
   82514:	2102      	movs	r1, #2
}
   82516:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
   8251a:	4b08      	ldr	r3, [pc, #32]	; (8253c <usart_driver_putchar+0x50>)
   8251c:	4718      	bx	r3
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));
   8251e:	4628      	mov	r0, r5
   82520:	4b07      	ldr	r3, [pc, #28]	; (82540 <usart_driver_putchar+0x54>)
   82522:	6825      	ldr	r5, [r4, #0]
   82524:	4798      	blx	r3
   82526:	4b07      	ldr	r3, [pc, #28]	; (82544 <usart_driver_putchar+0x58>)
   82528:	4601      	mov	r1, r0
   8252a:	4628      	mov	r0, r5
   8252c:	4798      	blx	r3
   8252e:	e7f0      	b.n	82512 <usart_driver_putchar+0x26>
   82530:	0008028d 	.word	0x0008028d
   82534:	00083f91 	.word	0x00083f91
   82538:	00083f95 	.word	0x00083f95
   8253c:	00083f89 	.word	0x00083f89
   82540:	000802b9 	.word	0x000802b9
   82544:	00083f99 	.word	0x00083f99

00082548 <ctrl_usart_cb_data>:
{		
   82548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   8254a:	4d0d      	ldr	r5, [pc, #52]	; (82580 <ctrl_usart_cb_data+0x38>)
   8254c:	886b      	ldrh	r3, [r5, #2]
		if (port == 0) break;
   8254e:	0a1b      	lsrs	r3, r3, #8
   82550:	d014      	beq.n	8257c <ctrl_usart_cb_data+0x34>
   82552:	2b01      	cmp	r3, #1
   82554:	d000      	beq.n	82558 <ctrl_usart_cb_data+0x10>
}
   82556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (port == 0) break;
   82558:	4f0a      	ldr	r7, [pc, #40]	; (82584 <ctrl_usart_cb_data+0x3c>)
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   8255a:	88eb      	ldrh	r3, [r5, #6]
   8255c:	89aa      	ldrh	r2, [r5, #12]
   8255e:	429a      	cmp	r2, r3
   82560:	d3f9      	bcc.n	82556 <ctrl_usart_cb_data+0xe>
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82562:	2b00      	cmp	r3, #0
   82564:	d0f7      	beq.n	82556 <ctrl_usart_cb_data+0xe>
   82566:	2400      	movs	r4, #0
   82568:	4e07      	ldr	r6, [pc, #28]	; (82588 <ctrl_usart_cb_data+0x40>)
		usart_driver_putchar(driver, udd_g_ctrlreq.payload[i]);
   8256a:	68ab      	ldr	r3, [r5, #8]
   8256c:	4638      	mov	r0, r7
   8256e:	5d19      	ldrb	r1, [r3, r4]
   82570:	47b0      	blx	r6
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82572:	88eb      	ldrh	r3, [r5, #6]
   82574:	3401      	adds	r4, #1
   82576:	42a3      	cmp	r3, r4
   82578:	dcf7      	bgt.n	8256a <ctrl_usart_cb_data+0x22>
}
   8257a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (port == 0) break;
   8257c:	4f03      	ldr	r7, [pc, #12]	; (8258c <ctrl_usart_cb_data+0x44>)
   8257e:	e7ec      	b.n	8255a <ctrl_usart_cb_data+0x12>
   82580:	200723a4 	.word	0x200723a4
   82584:	200706a4 	.word	0x200706a4
   82588:	000824ed 	.word	0x000824ed
   8258c:	20070404 	.word	0x20070404

00082590 <naeusart_register_handlers>:
{
   82590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82594:	2400      	movs	r4, #0
   82596:	4e18      	ldr	r6, [pc, #96]	; (825f8 <naeusart_register_handlers+0x68>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   82598:	4d18      	ldr	r5, [pc, #96]	; (825fc <naeusart_register_handlers+0x6c>)
		if (port == 0) break;
   8259a:	4f19      	ldr	r7, [pc, #100]	; (82600 <naeusart_register_handlers+0x70>)
   8259c:	b2e3      	uxtb	r3, r4
   8259e:	b164      	cbz	r4, 825ba <naeusart_register_handlers+0x2a>
   825a0:	2b01      	cmp	r3, #1
   825a2:	d026      	beq.n	825f2 <naeusart_register_handlers+0x62>
	for (uint8_t i = 0; i < 4; i++) {
   825a4:	3401      	adds	r4, #1
   825a6:	2c04      	cmp	r4, #4
   825a8:	d1f8      	bne.n	8259c <naeusart_register_handlers+0xc>
    naeusb_add_in_handler(usart_setup_in_received);
   825aa:	4b16      	ldr	r3, [pc, #88]	; (82604 <naeusart_register_handlers+0x74>)
   825ac:	4816      	ldr	r0, [pc, #88]	; (82608 <naeusart_register_handlers+0x78>)
   825ae:	4798      	blx	r3
}
   825b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    naeusb_add_out_handler(usart_setup_out_received);
   825b4:	4815      	ldr	r0, [pc, #84]	; (8260c <naeusart_register_handlers+0x7c>)
   825b6:	4b16      	ldr	r3, [pc, #88]	; (82610 <naeusart_register_handlers+0x80>)
   825b8:	4718      	bx	r3
		if (port == 0) break;
   825ba:	463b      	mov	r3, r7
    if (driver->usart_id == 0) {
   825bc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
   825c0:	b163      	cbz	r3, 825dc <naeusart_register_handlers+0x4c>
    } else if (driver->usart_id == 1) {
   825c2:	2b01      	cmp	r3, #1
   825c4:	d1ee      	bne.n	825a4 <naeusart_register_handlers+0x14>
   825c6:	2012      	movs	r0, #18
   825c8:	47b0      	blx	r6
   825ca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   825ce:	2230      	movs	r2, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   825d0:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   825d4:	f885 2312 	strb.w	r2, [r5, #786]	; 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   825d8:	602b      	str	r3, [r5, #0]
   825da:	e7e3      	b.n	825a4 <naeusart_register_handlers+0x14>
   825dc:	2011      	movs	r0, #17
   825de:	47b0      	blx	r6
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   825e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   825e4:	2230      	movs	r2, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   825e6:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   825ea:	f885 2311 	strb.w	r2, [r5, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   825ee:	602b      	str	r3, [r5, #0]
   825f0:	e7d8      	b.n	825a4 <naeusart_register_handlers+0x14>
		if (port == 0) break;
   825f2:	4b08      	ldr	r3, [pc, #32]	; (82614 <naeusart_register_handlers+0x84>)
   825f4:	e7e2      	b.n	825bc <naeusart_register_handlers+0x2c>
   825f6:	bf00      	nop
   825f8:	000843f1 	.word	0x000843f1
   825fc:	e000e100 	.word	0xe000e100
   82600:	20070404 	.word	0x20070404
   82604:	00081e51 	.word	0x00081e51
   82608:	00082665 	.word	0x00082665
   8260c:	00082101 	.word	0x00082101
   82610:	00081e79 	.word	0x00081e79
   82614:	200706a4 	.word	0x200706a4

00082618 <naeusb_cdc_settings_in>:
{
   82618:	b500      	push	{lr}
    udd_g_ctrlreq.payload = respbuf;
   8261a:	4a0e      	ldr	r2, [pc, #56]	; (82654 <naeusb_cdc_settings_in+0x3c>)
		respbuf[i] = 0;
   8261c:	f04f 0e00 	mov.w	lr, #0
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   82620:	88d1      	ldrh	r1, [r2, #6]
            respbuf[i] = driver->cdc_settings_change;
   82622:	480d      	ldr	r0, [pc, #52]	; (82658 <naeusb_cdc_settings_in+0x40>)
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   82624:	2904      	cmp	r1, #4
   82626:	bf28      	it	cs
   82628:	2104      	movcs	r1, #4
            respbuf[i] = driver->cdc_settings_change;
   8262a:	4b0c      	ldr	r3, [pc, #48]	; (8265c <naeusb_cdc_settings_in+0x44>)
   8262c:	f890 c29c 	ldrb.w	ip, [r0, #668]	; 0x29c
   82630:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
   82634:	4b0a      	ldr	r3, [pc, #40]	; (82660 <naeusb_cdc_settings_in+0x48>)
   82636:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
   8263a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   8263e:	7058      	strb	r0, [r3, #1]
   82640:	f883 c000 	strb.w	ip, [r3]
    udd_g_ctrlreq.payload = respbuf;
   82644:	6093      	str	r3, [r2, #8]
		respbuf[i] = 0;
   82646:	f8a3 e002 	strh.w	lr, [r3, #2]
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   8264a:	8191      	strh	r1, [r2, #12]
}
   8264c:	2001      	movs	r0, #1
   8264e:	f85d fb04 	ldr.w	pc, [sp], #4
   82652:	bf00      	nop
   82654:	200723a4 	.word	0x200723a4
   82658:	20070404 	.word	0x20070404
   8265c:	200706a4 	.word	0x200706a4
   82660:	20071b70 	.word	0x20071b70

00082664 <usart_setup_in_received>:

bool usart_setup_in_received(void)
{
   82664:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    switch(udd_g_ctrlreq.req.bRequest) {
   82668:	4d19      	ldr	r5, [pc, #100]	; (826d0 <usart_setup_in_received+0x6c>)
   8266a:	786b      	ldrb	r3, [r5, #1]
   8266c:	2b1b      	cmp	r3, #27
   8266e:	d006      	beq.n	8267e <usart_setup_in_received+0x1a>
   82670:	2b31      	cmp	r3, #49	; 0x31
   82672:	d026      	beq.n	826c2 <usart_setup_in_received+0x5e>
   82674:	2b1a      	cmp	r3, #26
   82676:	d006      	beq.n	82686 <usart_setup_in_received+0x22>
        
    case REQ_USART0_DATA:						
        0;
        unsigned int cnt;
		usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
		if (!driver) return false;
   82678:	2000      	movs	r0, #0
	case REQ_CDC_SETTINGS_EN:
        return naeusb_cdc_settings_in();
        break;
    }
    return false;
}
   8267a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return ctrl_usart_in();
   8267e:	4b15      	ldr	r3, [pc, #84]	; (826d4 <usart_setup_in_received+0x70>)
}
   82680:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return ctrl_usart_in();
   82684:	4718      	bx	r3
		usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   82686:	886b      	ldrh	r3, [r5, #2]
		if (port == 0) break;
   82688:	0a1b      	lsrs	r3, r3, #8
   8268a:	d01e      	beq.n	826ca <usart_setup_in_received+0x66>
   8268c:	2b01      	cmp	r3, #1
   8268e:	d1f3      	bne.n	82678 <usart_setup_in_received+0x14>
   82690:	4f11      	ldr	r7, [pc, #68]	; (826d8 <usart_setup_in_received+0x74>)
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   82692:	88ec      	ldrh	r4, [r5, #6]
   82694:	f8df 8044 	ldr.w	r8, [pc, #68]	; 826dc <usart_setup_in_received+0x78>
   82698:	b16c      	cbz	r4, 826b6 <usart_setup_in_received+0x52>
   8269a:	2400      	movs	r4, #0
   8269c:	4646      	mov	r6, r8
   8269e:	f8df 9040 	ldr.w	r9, [pc, #64]	; 826e0 <usart_setup_in_received+0x7c>
    return get_from_circ_buf(&driver->rxbuf);
   826a2:	371c      	adds	r7, #28
   826a4:	4638      	mov	r0, r7
   826a6:	47c8      	blx	r9
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   826a8:	88eb      	ldrh	r3, [r5, #6]
   826aa:	3401      	adds	r4, #1
   826ac:	429c      	cmp	r4, r3
            respbuf[cnt] = usart_driver_getchar(driver);
   826ae:	f806 0b01 	strb.w	r0, [r6], #1
        for(cnt = 0; cnt < udd_g_ctrlreq.req.wLength; cnt++){
   826b2:	d3f7      	bcc.n	826a4 <usart_setup_in_received+0x40>
        udd_g_ctrlreq.payload_size = cnt;
   826b4:	b2a4      	uxth	r4, r4
        return true;
   826b6:	2001      	movs	r0, #1
        udd_g_ctrlreq.payload = respbuf;
   826b8:	f8c5 8008 	str.w	r8, [r5, #8]
        udd_g_ctrlreq.payload_size = cnt;
   826bc:	81ac      	strh	r4, [r5, #12]
}
   826be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return naeusb_cdc_settings_in();
   826c2:	4b08      	ldr	r3, [pc, #32]	; (826e4 <usart_setup_in_received+0x80>)
}
   826c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return naeusb_cdc_settings_in();
   826c8:	4718      	bx	r3
		if (port == 0) break;
   826ca:	4f07      	ldr	r7, [pc, #28]	; (826e8 <usart_setup_in_received+0x84>)
   826cc:	e7e1      	b.n	82692 <usart_setup_in_received+0x2e>
   826ce:	bf00      	nop
   826d0:	200723a4 	.word	0x200723a4
   826d4:	0008223d 	.word	0x0008223d
   826d8:	200706a4 	.word	0x200706a4
   826dc:	20071b70 	.word	0x20071b70
   826e0:	000802b9 	.word	0x000802b9
   826e4:	00082619 	.word	0x00082619
   826e8:	20070404 	.word	0x20070404

000826ec <cdc_enable>:
   826ec:	b150      	cbz	r0, 82704 <cdc_enable+0x18>
   826ee:	2801      	cmp	r0, #1
   826f0:	d10a      	bne.n	82708 <cdc_enable+0x1c>
   826f2:	4b09      	ldr	r3, [pc, #36]	; (82718 <cdc_enable+0x2c>)
    driver->cdc_enabled = 1;
   826f4:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
}
   826f8:	2001      	movs	r0, #1
    driver->cdc_enabled = 1;
   826fa:	f042 0204 	orr.w	r2, r2, #4
   826fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
   82702:	4770      	bx	lr
		if (port == 0) break;
   82704:	4b05      	ldr	r3, [pc, #20]	; (8271c <cdc_enable+0x30>)
   82706:	e7f5      	b.n	826f4 <cdc_enable+0x8>
    driver->cdc_enabled = 1;
   82708:	2200      	movs	r2, #0
   8270a:	f892 329c 	ldrb.w	r3, [r2, #668]	; 0x29c
   8270e:	f362 0382 	bfi	r3, r2, #2, #1
   82712:	f882 329c 	strb.w	r3, [r2, #668]	; 0x29c
   82716:	deff      	udf	#255	; 0xff
   82718:	200706a4 	.word	0x200706a4
   8271c:	20070404 	.word	0x20070404

00082720 <cdc_disable>:
		if (port == 0) break;
   82720:	b160      	cbz	r0, 8273c <cdc_disable+0x1c>
   82722:	2801      	cmp	r0, #1
   82724:	d10c      	bne.n	82740 <cdc_disable+0x20>
   82726:	4b0a      	ldr	r3, [pc, #40]	; (82750 <cdc_disable+0x30>)
    NAEUSB_CDC_IS_RUNNING = false;
   82728:	2000      	movs	r0, #0
    driver->cdc_enabled = 0;
   8272a:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
    NAEUSB_CDC_IS_RUNNING = false;
   8272e:	4909      	ldr	r1, [pc, #36]	; (82754 <cdc_disable+0x34>)
    driver->cdc_enabled = 0;
   82730:	f36f 0282 	bfc	r2, #2, #1
   82734:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    NAEUSB_CDC_IS_RUNNING = false;
   82738:	7008      	strb	r0, [r1, #0]
}
   8273a:	4770      	bx	lr
		if (port == 0) break;
   8273c:	4b06      	ldr	r3, [pc, #24]	; (82758 <cdc_disable+0x38>)
   8273e:	e7f3      	b.n	82728 <cdc_disable+0x8>
    driver->cdc_enabled = 0;
   82740:	2200      	movs	r2, #0
   82742:	f892 329c 	ldrb.w	r3, [r2, #668]	; 0x29c
   82746:	f362 0382 	bfi	r3, r2, #2, #1
   8274a:	f882 329c 	strb.w	r3, [r2, #668]	; 0x29c
   8274e:	deff      	udf	#255	; 0xff
   82750:	200706a4 	.word	0x200706a4
   82754:	20071bb0 	.word	0x20071bb0
   82758:	20070404 	.word	0x20070404

0008275c <my_callback_rx_notify>:
{
   8275c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (port == 0) break;
   82760:	4681      	mov	r9, r0
   82762:	b388      	cbz	r0, 827c8 <my_callback_rx_notify+0x6c>
   82764:	2801      	cmp	r0, #1
   82766:	d131      	bne.n	827cc <my_callback_rx_notify+0x70>
   82768:	4f1c      	ldr	r7, [pc, #112]	; (827dc <my_callback_rx_notify+0x80>)
    NAEUSB_CDC_IS_RUNNING = true;
   8276a:	2101      	movs	r1, #1
    if (driver->cdc_enabled && driver->enabled) {
   8276c:	f897 329c 	ldrb.w	r3, [r7, #668]	; 0x29c
    NAEUSB_CDC_IS_RUNNING = true;
   82770:	4a1b      	ldr	r2, [pc, #108]	; (827e0 <my_callback_rx_notify+0x84>)
    if (driver->cdc_enabled && driver->enabled) {
   82772:	f003 0306 	and.w	r3, r3, #6
   82776:	2b06      	cmp	r3, #6
    NAEUSB_CDC_IS_RUNNING = true;
   82778:	7011      	strb	r1, [r2, #0]
    if (driver->cdc_enabled && driver->enabled) {
   8277a:	d001      	beq.n	82780 <my_callback_rx_notify+0x24>
}
   8277c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   82780:	4648      	mov	r0, r9
   82782:	f8df a060 	ldr.w	sl, [pc, #96]	; 827e4 <my_callback_rx_notify+0x88>
   82786:	47d0      	blx	sl
        while (num_char > 0) {
   82788:	4605      	mov	r5, r0
   8278a:	2800      	cmp	r0, #0
   8278c:	d0f6      	beq.n	8277c <my_callback_rx_notify+0x20>
   8278e:	f8df b058 	ldr.w	fp, [pc, #88]	; 827e8 <my_callback_rx_notify+0x8c>
   82792:	4e16      	ldr	r6, [pc, #88]	; (827ec <my_callback_rx_notify+0x90>)
   82794:	f8df 8058 	ldr.w	r8, [pc, #88]	; 827f0 <my_callback_rx_notify+0x94>
            num_char = (num_char > 512) ? 512 : num_char;
   82798:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   8279c:	bf28      	it	cs
   8279e:	f44f 7500 	movcs.w	r5, #512	; 0x200
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   827a2:	4631      	mov	r1, r6
   827a4:	4648      	mov	r0, r9
   827a6:	462a      	mov	r2, r5
            for (uint16_t i = 0; i < num_char; i++) {
   827a8:	2400      	movs	r4, #0
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   827aa:	47d8      	blx	fp
                usart_driver_putchar(driver, uart_buf[i]);
   827ac:	5d31      	ldrb	r1, [r6, r4]
            for (uint16_t i = 0; i < num_char; i++) {
   827ae:	3401      	adds	r4, #1
                usart_driver_putchar(driver, uart_buf[i]);
   827b0:	4638      	mov	r0, r7
            for (uint16_t i = 0; i < num_char; i++) {
   827b2:	b2a4      	uxth	r4, r4
                usart_driver_putchar(driver, uart_buf[i]);
   827b4:	47c0      	blx	r8
            for (uint16_t i = 0; i < num_char; i++) {
   827b6:	42ac      	cmp	r4, r5
   827b8:	d3f8      	bcc.n	827ac <my_callback_rx_notify+0x50>
            num_char = udi_cdc_multi_get_nb_received_data(port);
   827ba:	4648      	mov	r0, r9
   827bc:	47d0      	blx	sl
        while (num_char > 0) {
   827be:	4605      	mov	r5, r0
   827c0:	2800      	cmp	r0, #0
   827c2:	d1e9      	bne.n	82798 <my_callback_rx_notify+0x3c>
}
   827c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (port == 0) break;
   827c8:	4f0a      	ldr	r7, [pc, #40]	; (827f4 <my_callback_rx_notify+0x98>)
   827ca:	e7ce      	b.n	8276a <my_callback_rx_notify+0xe>
    NAEUSB_CDC_IS_RUNNING = true;
   827cc:	2101      	movs	r1, #1
    if (driver->cdc_enabled && driver->enabled) {
   827ce:	2300      	movs	r3, #0
    NAEUSB_CDC_IS_RUNNING = true;
   827d0:	4a03      	ldr	r2, [pc, #12]	; (827e0 <my_callback_rx_notify+0x84>)
   827d2:	7011      	strb	r1, [r2, #0]
    if (driver->cdc_enabled && driver->enabled) {
   827d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
   827d8:	deff      	udf	#255	; 0xff
   827da:	bf00      	nop
   827dc:	200706a4 	.word	0x200706a4
   827e0:	20071bb0 	.word	0x20071bb0
   827e4:	000869e9 	.word	0x000869e9
   827e8:	00086a39 	.word	0x00086a39
   827ec:	20071bb4 	.word	0x20071bb4
   827f0:	000824ed 	.word	0x000824ed
   827f4:	20070404 	.word	0x20070404

000827f8 <my_callback_config>:
{
   827f8:	b530      	push	{r4, r5, lr}
   827fa:	b083      	sub	sp, #12
		if (port == 0) break;
   827fc:	b340      	cbz	r0, 82850 <my_callback_config+0x58>
   827fe:	2801      	cmp	r0, #1
   82800:	d128      	bne.n	82854 <my_callback_config+0x5c>
   82802:	4c16      	ldr	r4, [pc, #88]	; (8285c <my_callback_config+0x64>)
    if (driver->cdc_enabled) {
   82804:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   82808:	075a      	lsls	r2, r3, #29
   8280a:	d502      	bpl.n	82812 <my_callback_config+0x1a>
        switch(cfg->bParityType) {
   8280c:	794b      	ldrb	r3, [r1, #5]
   8280e:	2b04      	cmp	r3, #4
   82810:	d901      	bls.n	82816 <my_callback_config+0x1e>
}
   82812:	b003      	add	sp, #12
   82814:	bd30      	pop	{r4, r5, pc}
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   82816:	2300      	movs	r3, #0
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
   82818:	798a      	ldrb	r2, [r1, #6]
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   8281a:	4620      	mov	r0, r4
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
   8281c:	3a05      	subs	r2, #5
   8281e:	0192      	lsls	r2, r2, #6
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   82820:	b2d2      	uxtb	r2, r2
   82822:	6809      	ldr	r1, [r1, #0]
   82824:	4d0e      	ldr	r5, [pc, #56]	; (82860 <my_callback_config+0x68>)
   82826:	9200      	str	r2, [sp, #0]
   82828:	461a      	mov	r2, r3
   8282a:	47a8      	blx	r5
		if (!(usart_get_interrupt_mask(driver->usart) & UART_IER_RXRDY)) {
   8282c:	4b0d      	ldr	r3, [pc, #52]	; (82864 <my_callback_config+0x6c>)
   8282e:	6820      	ldr	r0, [r4, #0]
   82830:	4798      	blx	r3
   82832:	07c3      	lsls	r3, r0, #31
   82834:	d4ed      	bmi.n	82812 <my_callback_config+0x1a>
			usart_enable_rx(driver->usart);
   82836:	6820      	ldr	r0, [r4, #0]
   82838:	4b0b      	ldr	r3, [pc, #44]	; (82868 <my_callback_config+0x70>)
   8283a:	4798      	blx	r3
			usart_enable_tx(driver->usart);
   8283c:	6820      	ldr	r0, [r4, #0]
   8283e:	4b0b      	ldr	r3, [pc, #44]	; (8286c <my_callback_config+0x74>)
   82840:	4798      	blx	r3
			usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   82842:	2101      	movs	r1, #1
   82844:	6820      	ldr	r0, [r4, #0]
   82846:	4b0a      	ldr	r3, [pc, #40]	; (82870 <my_callback_config+0x78>)
}
   82848:	b003      	add	sp, #12
   8284a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   8284e:	4718      	bx	r3
		if (port == 0) break;
   82850:	4c08      	ldr	r4, [pc, #32]	; (82874 <my_callback_config+0x7c>)
   82852:	e7d7      	b.n	82804 <my_callback_config+0xc>
    if (driver->cdc_enabled) {
   82854:	2300      	movs	r3, #0
   82856:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
   8285a:	deff      	udf	#255	; 0xff
   8285c:	200706a4 	.word	0x200706a4
   82860:	000822b1 	.word	0x000822b1
   82864:	00083f91 	.word	0x00083f91
   82868:	00083f79 	.word	0x00083f79
   8286c:	00083f69 	.word	0x00083f69
   82870:	00083f89 	.word	0x00083f89
   82874:	20070404 	.word	0x20070404

00082878 <cdc_send_to_pc>:

void cdc_send_to_pc(void)
{
   82878:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8287c:	2500      	movs	r5, #0
   8287e:	2401      	movs	r4, #1
    // if (!NAEUSB_CDC_IS_RUNNING) return; //fixes Pro streaming requiring connection to CDC
	for (uint8_t i = 0; i < 4; i++) {
		usart_driver *driver = get_nth_available_driver(i);
		if (!driver) continue;
		if (driver->cdc_enabled && driver->enabled && udi_cdc_multi_is_tx_ready(i)) {
   82880:	f8df a060 	ldr.w	sl, [pc, #96]	; 828e4 <cdc_send_to_pc+0x6c>
   82884:	4f18      	ldr	r7, [pc, #96]	; (828e8 <cdc_send_to_pc+0x70>)
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   82886:	f8df 9064 	ldr.w	r9, [pc, #100]	; 828ec <cdc_send_to_pc+0x74>
   8288a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 828f0 <cdc_send_to_pc+0x78>
   8288e:	b2ee      	uxtb	r6, r5
		if (port == 0) break;
   82890:	b14d      	cbz	r5, 828a6 <cdc_send_to_pc+0x2e>
   82892:	2e01      	cmp	r6, #1
   82894:	d023      	beq.n	828de <cdc_send_to_pc+0x66>
	for (uint8_t i = 0; i < 4; i++) {
   82896:	2c04      	cmp	r4, #4
   82898:	d01f      	beq.n	828da <cdc_send_to_pc+0x62>
   8289a:	3401      	adds	r4, #1
   8289c:	3501      	adds	r5, #1
   8289e:	b2e4      	uxtb	r4, r4
   828a0:	b2ee      	uxtb	r6, r5
		if (port == 0) break;
   828a2:	2d00      	cmp	r5, #0
   828a4:	d1f5      	bne.n	82892 <cdc_send_to_pc+0x1a>
   828a6:	f8df b04c 	ldr.w	fp, [pc, #76]	; 828f4 <cdc_send_to_pc+0x7c>
		if (driver->cdc_enabled && driver->enabled && udi_cdc_multi_is_tx_ready(i)) {
   828aa:	f89b 329c 	ldrb.w	r3, [fp, #668]	; 0x29c
   828ae:	f003 0306 	and.w	r3, r3, #6
   828b2:	2b06      	cmp	r3, #6
   828b4:	d1f1      	bne.n	8289a <cdc_send_to_pc+0x22>
   828b6:	4630      	mov	r0, r6
   828b8:	47d0      	blx	sl
   828ba:	2800      	cmp	r0, #0
   828bc:	d0eb      	beq.n	82896 <cdc_send_to_pc+0x1e>
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   828be:	f50b 7be2 	add.w	fp, fp, #452	; 0x1c4
   828c2:	e004      	b.n	828ce <cdc_send_to_pc+0x56>
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   828c4:	4658      	mov	r0, fp
   828c6:	47c8      	blx	r9
   828c8:	4601      	mov	r1, r0
   828ca:	4630      	mov	r0, r6
   828cc:	47c0      	blx	r8
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   828ce:	4658      	mov	r0, fp
   828d0:	47b8      	blx	r7
   828d2:	2800      	cmp	r0, #0
   828d4:	d1f6      	bne.n	828c4 <cdc_send_to_pc+0x4c>
	for (uint8_t i = 0; i < 4; i++) {
   828d6:	2c04      	cmp	r4, #4
   828d8:	d1df      	bne.n	8289a <cdc_send_to_pc+0x22>
			}
		}

	}
	
}
   828da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (port == 0) break;
   828de:	f8df b018 	ldr.w	fp, [pc, #24]	; 828f8 <cdc_send_to_pc+0x80>
   828e2:	e7e2      	b.n	828aa <cdc_send_to_pc+0x32>
   828e4:	00086b01 	.word	0x00086b01
   828e8:	000802d9 	.word	0x000802d9
   828ec:	000802b9 	.word	0x000802b9
   828f0:	00086b75 	.word	0x00086b75
   828f4:	20070404 	.word	0x20070404
   828f8:	200706a4 	.word	0x200706a4

000828fc <mpsse_setup_in_received>:
}

/* Handle ctrl transfer on interface 1/2. Mostly used for debug purposes */
bool mpsse_setup_in_received(void)
{
    if (udd_g_ctrlreq.req.bRequest == REQ_SAM_STATUS) {
   828fc:	4b39      	ldr	r3, [pc, #228]	; (829e4 <mpsse_setup_in_received+0xe8>)
   828fe:	785a      	ldrb	r2, [r3, #1]
   82900:	2a22      	cmp	r2, #34	; 0x22
   82902:	d015      	beq.n	82930 <mpsse_setup_in_received+0x34>
            udd_g_ctrlreq.payload_size = 1;
            return true;
        }
    }
    // don't handle if not sent to our interface
    if (udd_g_ctrlreq.req.wIndex != 0x01) {
   82904:	8898      	ldrh	r0, [r3, #4]
   82906:	2801      	cmp	r0, #1
   82908:	d110      	bne.n	8292c <mpsse_setup_in_received+0x30>
        return false;
    }

    // For debug, reads a bunch of internal variables back. TODO: change to using a separate buf
    if (udd_g_ctrlreq.req.bRequest == 0xA0) {
   8290a:	2aa0      	cmp	r2, #160	; 0xa0
   8290c:	d025      	beq.n	8295a <mpsse_setup_in_received+0x5e>
        return true;
    }

    // Debug commands for reading from internal buffers
    uint16_t wValue = udd_g_ctrlreq.req.wValue;
    if (udd_g_ctrlreq.req.bRequest == 0xA1) {
   8290e:	2aa1      	cmp	r2, #161	; 0xa1
        if ((udd_g_ctrlreq.req.wValue & 0xFF) == 0x42) {
   82910:	8859      	ldrh	r1, [r3, #2]
    if (udd_g_ctrlreq.req.bRequest == 0xA1) {
   82912:	d017      	beq.n	82944 <mpsse_setup_in_received+0x48>
        uint32_t addr = (uint32_t)(MPSSE_RX_BUFFER + wValue);
        addr &= ~(0b11);
        udd_g_ctrlreq.payload = (void *) addr;
        udd_g_ctrlreq.payload_size = 256;
    }
    if (udd_g_ctrlreq.req.bRequest == 0xA2) {
   82914:	2aa2      	cmp	r2, #162	; 0xa2
   82916:	d11f      	bne.n	82958 <mpsse_setup_in_received+0x5c>
        uint32_t addr = (uint32_t)(MPSSE_TX_BUFFER + wValue);
        addr &= ~(0b11);
        udd_g_ctrlreq.payload = (void *) addr;
        udd_g_ctrlreq.payload_size = 256;
   82918:	f44f 7c80 	mov.w	ip, #256	; 0x100
        uint32_t addr = (uint32_t)(MPSSE_TX_BUFFER + wValue);
   8291c:	4a32      	ldr	r2, [pc, #200]	; (829e8 <mpsse_setup_in_received+0xec>)
        udd_g_ctrlreq.payload_size = 256;
   8291e:	f8a3 c00c 	strh.w	ip, [r3, #12]
        uint32_t addr = (uint32_t)(MPSSE_TX_BUFFER + wValue);
   82922:	440a      	add	r2, r1
        addr &= ~(0b11);
   82924:	f022 0203 	bic.w	r2, r2, #3
        udd_g_ctrlreq.payload = (void *) addr;
   82928:	609a      	str	r2, [r3, #8]
        udd_g_ctrlreq.payload_size = 256;
   8292a:	4770      	bx	lr
        return false;
   8292c:	2000      	movs	r0, #0
   8292e:	4770      	bx	lr
        if ((udd_g_ctrlreq.req.wValue & 0xFF) == 0x42) {
   82930:	789a      	ldrb	r2, [r3, #2]
   82932:	2a42      	cmp	r2, #66	; 0x42
   82934:	d04c      	beq.n	829d0 <mpsse_setup_in_received+0xd4>
    if (udd_g_ctrlreq.req.wIndex != 0x01) {
   82936:	8898      	ldrh	r0, [r3, #4]
   82938:	f1a0 0001 	sub.w	r0, r0, #1
   8293c:	fab0 f080 	clz	r0, r0
   82940:	0940      	lsrs	r0, r0, #5
   82942:	4770      	bx	lr
        udd_g_ctrlreq.payload_size = 256;
   82944:	f44f 7c80 	mov.w	ip, #256	; 0x100
        uint32_t addr = (uint32_t)(MPSSE_RX_BUFFER + wValue);
   82948:	4a28      	ldr	r2, [pc, #160]	; (829ec <mpsse_setup_in_received+0xf0>)
        udd_g_ctrlreq.payload_size = 256;
   8294a:	f8a3 c00c 	strh.w	ip, [r3, #12]
        uint32_t addr = (uint32_t)(MPSSE_RX_BUFFER + wValue);
   8294e:	440a      	add	r2, r1
        addr &= ~(0b11);
   82950:	f022 0203 	bic.w	r2, r2, #3
        udd_g_ctrlreq.payload = (void *) addr;
   82954:	609a      	str	r2, [r3, #8]
    if (udd_g_ctrlreq.req.bRequest == 0xA2) {
   82956:	4770      	bx	lr
    }
    return true;
}
   82958:	4770      	bx	lr
{
   8295a:	b500      	push	{lr}
        MPSSE_RX_BUFFER[0] = mpsse_state.cur_cmd.u8;
   8295c:	4924      	ldr	r1, [pc, #144]	; (829f0 <mpsse_setup_in_received+0xf4>)
   8295e:	4a23      	ldr	r2, [pc, #140]	; (829ec <mpsse_setup_in_received+0xf0>)
   82960:	f891 e000 	ldrb.w	lr, [r1]
        MPSSE_RX_BUFFER[1] = mpsse_state.tx_idx & 0xFF;
   82964:	f9b1 c001 	ldrsh.w	ip, [r1, #1]
        MPSSE_RX_BUFFER[0] = mpsse_state.cur_cmd.u8;
   82968:	f882 e000 	strb.w	lr, [r2]
        udd_g_ctrlreq.payload_size = 11;
   8296c:	f04f 0e0b 	mov.w	lr, #11
        MPSSE_RX_BUFFER[1] = mpsse_state.tx_idx & 0xFF;
   82970:	fa5f fc8c 	uxtb.w	ip, ip
   82974:	f882 c001 	strb.w	ip, [r2, #1]
        MPSSE_RX_BUFFER[2] = mpsse_state.tx_bytes & 0xFF;
   82978:	f9b1 c003 	ldrsh.w	ip, [r1, #3]
   8297c:	fa5f fc8c 	uxtb.w	ip, ip
   82980:	f882 c002 	strb.w	ip, [r2, #2]
        MPSSE_RX_BUFFER[3] = mpsse_state.rx_bytes & 0xFF;
   82984:	f9b1 c005 	ldrsh.w	ip, [r1, #5]
        udd_g_ctrlreq.payload = MPSSE_RX_BUFFER;
   82988:	609a      	str	r2, [r3, #8]
        MPSSE_RX_BUFFER[3] = mpsse_state.rx_bytes & 0xFF;
   8298a:	fa5f fc8c 	uxtb.w	ip, ip
   8298e:	f882 c003 	strb.w	ip, [r2, #3]
        MPSSE_RX_BUFFER[4] = mpsse_state.txn_len & 0xFF;
   82992:	f9b1 c007 	ldrsh.w	ip, [r1, #7]
   82996:	fa5f fc8c 	uxtb.w	ip, ip
   8299a:	f882 c004 	strb.w	ip, [r2, #4]
        MPSSE_RX_BUFFER[5] = mpsse_state.txn_lock;
   8299e:	f891 c00a 	ldrb.w	ip, [r1, #10]
   829a2:	f882 c005 	strb.w	ip, [r2, #5]
        MPSSE_RX_BUFFER[6] =  mpsse_state.n_processed_cmds & 0xFF;
   829a6:	f8d1 c00b 	ldr.w	ip, [r1, #11]
        udd_g_ctrlreq.payload_size = 11;
   829aa:	f8a3 e00c 	strh.w	lr, [r3, #12]
        MPSSE_RX_BUFFER[6] =  mpsse_state.n_processed_cmds & 0xFF;
   829ae:	fa5f f38c 	uxtb.w	r3, ip
   829b2:	7193      	strb	r3, [r2, #6]
        MPSSE_RX_BUFFER[10] = mpsse_state.loopback_en;
   829b4:	7a49      	ldrb	r1, [r1, #9]
        MPSSE_RX_BUFFER[7] = (mpsse_state.n_processed_cmds >> 8) & 0xFF;
   829b6:	f3cc 2307 	ubfx	r3, ip, #8, #8
   829ba:	71d3      	strb	r3, [r2, #7]
        MPSSE_RX_BUFFER[8] = (mpsse_state.n_processed_cmds >> 16) & 0xFF;
   829bc:	f3cc 4307 	ubfx	r3, ip, #16, #8
        MPSSE_RX_BUFFER[9] = (mpsse_state.n_processed_cmds >> 24) & 0xFF;
   829c0:	ea4f 6c1c 	mov.w	ip, ip, lsr #24
        MPSSE_RX_BUFFER[8] = (mpsse_state.n_processed_cmds >> 16) & 0xFF;
   829c4:	7213      	strb	r3, [r2, #8]
        MPSSE_RX_BUFFER[9] = (mpsse_state.n_processed_cmds >> 24) & 0xFF;
   829c6:	f882 c009 	strb.w	ip, [r2, #9]
        MPSSE_RX_BUFFER[10] = mpsse_state.loopback_en;
   829ca:	7291      	strb	r1, [r2, #10]
}
   829cc:	f85d fb04 	ldr.w	pc, [sp], #4
            udd_g_ctrlreq.payload_size = 1;
   829d0:	2201      	movs	r2, #1
            respbuf[0] = mpsse_state.enabled;
   829d2:	4807      	ldr	r0, [pc, #28]	; (829f0 <mpsse_setup_in_received+0xf4>)
   829d4:	4907      	ldr	r1, [pc, #28]	; (829f4 <mpsse_setup_in_received+0xf8>)
   829d6:	7c80      	ldrb	r0, [r0, #18]
            udd_g_ctrlreq.payload = respbuf;
   829d8:	6099      	str	r1, [r3, #8]
            respbuf[0] = mpsse_state.enabled;
   829da:	7008      	strb	r0, [r1, #0]
            udd_g_ctrlreq.payload_size = 1;
   829dc:	819a      	strh	r2, [r3, #12]
            return true;
   829de:	4610      	mov	r0, r2
   829e0:	4770      	bx	lr
   829e2:	bf00      	nop
   829e4:	200723a4 	.word	0x200723a4
   829e8:	200749b0 	.word	0x200749b0
   829ec:	20074970 	.word	0x20074970
   829f0:	20070944 	.word	0x20070944
   829f4:	20071b70 	.word	0x20071b70

000829f8 <mpsse_setup_out_received>:
{
   829f8:	b570      	push	{r4, r5, r6, lr}
    uint8_t wValue = udd_g_ctrlreq.req.wValue & 0xFF;
   829fa:	4a2e      	ldr	r2, [pc, #184]	; (82ab4 <mpsse_setup_out_received+0xbc>)
{
   829fc:	b082      	sub	sp, #8
    uint8_t wValue = udd_g_ctrlreq.req.wValue & 0xFF;
   829fe:	7893      	ldrb	r3, [r2, #2]
    if ((wValue == 0x42) && (udd_g_ctrlreq.req.bRequest == REQ_SAM_CFG)) {
   82a00:	2b42      	cmp	r3, #66	; 0x42
   82a02:	d011      	beq.n	82a28 <mpsse_setup_out_received+0x30>
    } else if ((wValue == 0x43) && (udd_g_ctrlreq.req.bRequest == REQ_SAM_CFG)) {
   82a04:	2b43      	cmp	r3, #67	; 0x43
   82a06:	d009      	beq.n	82a1c <mpsse_setup_out_received+0x24>
    if ((udd_g_ctrlreq.req.wIndex != 0x01) && (udd_g_ctrlreq.req.wIndex != 0x02)) {
   82a08:	8893      	ldrh	r3, [r2, #4]
   82a0a:	3b01      	subs	r3, #1
   82a0c:	b29b      	uxth	r3, r3
   82a0e:	2b01      	cmp	r3, #1
   82a10:	d807      	bhi.n	82a22 <mpsse_setup_out_received+0x2a>
    if ((udd_g_ctrlreq.req.bRequest == SIO_RESET_REQUEST)) {
   82a12:	7855      	ldrb	r5, [r2, #1]
   82a14:	b1bd      	cbz	r5, 82a46 <mpsse_setup_out_received+0x4e>
   82a16:	2001      	movs	r0, #1
}
   82a18:	b002      	add	sp, #8
   82a1a:	bd70      	pop	{r4, r5, r6, pc}
    } else if ((wValue == 0x43) && (udd_g_ctrlreq.req.bRequest == REQ_SAM_CFG)) {
   82a1c:	7853      	ldrb	r3, [r2, #1]
   82a1e:	2b22      	cmp	r3, #34	; 0x22
   82a20:	d1f2      	bne.n	82a08 <mpsse_setup_out_received+0x10>
            return false;
   82a22:	2000      	movs	r0, #0
}
   82a24:	b002      	add	sp, #8
   82a26:	bd70      	pop	{r4, r5, r6, pc}
    if ((wValue == 0x42) && (udd_g_ctrlreq.req.bRequest == REQ_SAM_CFG)) {
   82a28:	7853      	ldrb	r3, [r2, #1]
   82a2a:	2b22      	cmp	r3, #34	; 0x22
   82a2c:	d1ec      	bne.n	82a08 <mpsse_setup_out_received+0x10>
        mpsse_state.enabled = 1;
   82a2e:	2401      	movs	r4, #1
        udc_stop();
   82a30:	4b21      	ldr	r3, [pc, #132]	; (82ab8 <mpsse_setup_out_received+0xc0>)
   82a32:	4798      	blx	r3
        switch_configurations(); 
   82a34:	4b21      	ldr	r3, [pc, #132]	; (82abc <mpsse_setup_out_received+0xc4>)
   82a36:	4798      	blx	r3
        mpsse_state.enabled = 1;
   82a38:	4b21      	ldr	r3, [pc, #132]	; (82ac0 <mpsse_setup_out_received+0xc8>)
        udc_start();
   82a3a:	4a22      	ldr	r2, [pc, #136]	; (82ac4 <mpsse_setup_out_received+0xcc>)
        mpsse_state.enabled = 1;
   82a3c:	749c      	strb	r4, [r3, #18]
        mpsse_state.txn_lock = 1;
   82a3e:	729c      	strb	r4, [r3, #10]
        udc_start();
   82a40:	4790      	blx	r2
        return true;
   82a42:	4620      	mov	r0, r4
   82a44:	e7e8      	b.n	82a18 <mpsse_setup_out_received+0x20>
        memset(MPSSE_RX_BUFFER, 0, sizeof(MPSSE_RX_BUFFER));
   82a46:	4c20      	ldr	r4, [pc, #128]	; (82ac8 <mpsse_setup_out_received+0xd0>)
   82a48:	4629      	mov	r1, r5
   82a4a:	2240      	movs	r2, #64	; 0x40
   82a4c:	481f      	ldr	r0, [pc, #124]	; (82acc <mpsse_setup_out_received+0xd4>)
   82a4e:	47a0      	blx	r4
        memset(MPSSE_TX_BUFFER, 0, sizeof(MPSSE_TX_BUFFER_BAK));
   82a50:	4629      	mov	r1, r5
   82a52:	2240      	movs	r2, #64	; 0x40
   82a54:	481e      	ldr	r0, [pc, #120]	; (82ad0 <mpsse_setup_out_received+0xd8>)
   82a56:	47a0      	blx	r4
        memset(MPSSE_TX_BUFFER_BAK, 0, sizeof(MPSSE_TX_BUFFER_BAK));
   82a58:	2240      	movs	r2, #64	; 0x40
   82a5a:	4629      	mov	r1, r5
   82a5c:	481d      	ldr	r0, [pc, #116]	; (82ad4 <mpsse_setup_out_received+0xdc>)
   82a5e:	47a0      	blx	r4
        udd_ep_abort(UDI_MPSSE_EP_BULK_OUT);
   82a60:	4c1d      	ldr	r4, [pc, #116]	; (82ad8 <mpsse_setup_out_received+0xe0>)
   82a62:	2006      	movs	r0, #6
   82a64:	47a0      	blx	r4
        udd_ep_abort(UDI_MPSSE_EP_BULK_IN);
   82a66:	2085      	movs	r0, #133	; 0x85
   82a68:	47a0      	blx	r4
        mpsse_state.enabled = 1;
   82a6a:	2401      	movs	r4, #1
        gpio_configure_pin(MPSSE_DIN_GPIO, PIO_DEFAULT | PIO_TYPE_PIO_INPUT);
   82a6c:	4e1b      	ldr	r6, [pc, #108]	; (82adc <mpsse_setup_out_received+0xe4>)
   82a6e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82a72:	2019      	movs	r0, #25
   82a74:	47b0      	blx	r6
        gpio_configure_pin(MPSSE_DOUT_GPIO, PIO_OUTPUT_0);
   82a76:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82a7a:	201a      	movs	r0, #26
   82a7c:	47b0      	blx	r6
        gpio_configure_pin(MPSSE_SCK_GPIO, PIO_OUTPUT_0);
   82a7e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82a82:	201b      	movs	r0, #27
   82a84:	47b0      	blx	r6
        gpio_configure_pin(MPSSE_TMS_GPIO, PIO_OUTPUT_0);
   82a86:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82a8a:	201c      	movs	r0, #28
   82a8c:	47b0      	blx	r6
        mpsse_state.enabled = 1;
   82a8e:	4a0c      	ldr	r2, [pc, #48]	; (82ac0 <mpsse_setup_out_received+0xc8>)
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
   82a90:	4913      	ldr	r1, [pc, #76]	; (82ae0 <mpsse_setup_out_received+0xe8>)
   82a92:	2340      	movs	r3, #64	; 0x40
   82a94:	9100      	str	r1, [sp, #0]
   82a96:	2006      	movs	r0, #6
   82a98:	4629      	mov	r1, r5
        mpsse_state.n_processed_cmds = 0;
   82a9a:	72d5      	strb	r5, [r2, #11]
   82a9c:	7315      	strb	r5, [r2, #12]
   82a9e:	7355      	strb	r5, [r2, #13]
   82aa0:	7395      	strb	r5, [r2, #14]
        mpsse_state.swd_mode = 0;
   82aa2:	7415      	strb	r5, [r2, #16]
        mpsse_state.enabled = 1;
   82aa4:	7494      	strb	r4, [r2, #18]
        mpsse_state.txn_lock = 1;
   82aa6:	7294      	strb	r4, [r2, #10]
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
   82aa8:	4d0e      	ldr	r5, [pc, #56]	; (82ae4 <mpsse_setup_out_received+0xec>)
   82aaa:	4a09      	ldr	r2, [pc, #36]	; (82ad0 <mpsse_setup_out_received+0xd8>)
   82aac:	47a8      	blx	r5
   82aae:	4620      	mov	r0, r4
}
   82ab0:	b002      	add	sp, #8
   82ab2:	bd70      	pop	{r4, r5, r6, pc}
   82ab4:	200723a4 	.word	0x200723a4
   82ab8:	0008174d 	.word	0x0008174d
   82abc:	00084519 	.word	0x00084519
   82ac0:	20070944 	.word	0x20070944
   82ac4:	00081745 	.word	0x00081745
   82ac8:	00086e3d 	.word	0x00086e3d
   82acc:	20074970 	.word	0x20074970
   82ad0:	200749b0 	.word	0x200749b0
   82ad4:	20074a00 	.word	0x20074a00
   82ad8:	000857dd 	.word	0x000857dd
   82adc:	00084655 	.word	0x00084655
   82ae0:	00082ae9 	.word	0x00082ae9
   82ae4:	000854b1 	.word	0x000854b1

00082ae8 <mpsse_vendor_bulk_out_received>:
}


void mpsse_vendor_bulk_out_received(udd_ep_status_t status,
                                  iram_size_t nb_transfered, udd_ep_id_t ep)
{
   82ae8:	b570      	push	{r4, r5, r6, lr}
    // we just receive stuff here, then handle in main()
    if (UDD_EP_TRANSFER_OK != status) {
        // restart
        if (mpsse_state.tx_req) {
   82aea:	4c25      	ldr	r4, [pc, #148]	; (82b80 <mpsse_vendor_bulk_out_received+0x98>)
{
   82aec:	b082      	sub	sp, #8
        if (mpsse_state.tx_req) {
   82aee:	7be3      	ldrb	r3, [r4, #15]
    if (UDD_EP_TRANSFER_OK != status) {
   82af0:	bb38      	cbnz	r0, 82b42 <mpsse_vendor_bulk_out_received+0x5a>
            sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
        mpsse_state.txn_lock = 1;
        return;
    }

    if (mpsse_state.tx_req) {
   82af2:	b1eb      	cbz	r3, 82b30 <mpsse_vendor_bulk_out_received+0x48>
        // we read into the backup buffer, move the data over to the usual one
        // extra room in the normal buffer so we always read the same amount

        // reading unususal sizes breaks USB, so don't change this
        for (uint16_t i = 0; i < nb_transfered; i++) {
   82af4:	2900      	cmp	r1, #0
   82af6:	d039      	beq.n	82b6c <mpsse_vendor_bulk_out_received+0x84>
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   82af8:	f9b4 c003 	ldrsh.w	ip, [r4, #3]
   82afc:	f9b4 3001 	ldrsh.w	r3, [r4, #1]
   82b00:	4d20      	ldr	r5, [pc, #128]	; (82b84 <mpsse_vendor_bulk_out_received+0x9c>)
   82b02:	ebac 0c03 	sub.w	ip, ip, r3
   82b06:	fa1f fe8c 	uxth.w	lr, ip
            MPSSE_TX_BUFFER[i + mpsse_tx_buffer_remaining()] = MPSSE_TX_BUFFER_BAK[i];
   82b0a:	fa0f fc8c 	sxth.w	ip, ip
   82b0e:	182b      	adds	r3, r5, r0
   82b10:	f893 2090 	ldrb.w	r2, [r3, #144]	; 0x90
   82b14:	eb00 030c 	add.w	r3, r0, ip
        for (uint16_t i = 0; i < nb_transfered; i++) {
   82b18:	3001      	adds	r0, #1
   82b1a:	b280      	uxth	r0, r0
            MPSSE_TX_BUFFER[i + mpsse_tx_buffer_remaining()] = MPSSE_TX_BUFFER_BAK[i];
   82b1c:	b2d2      	uxtb	r2, r2
   82b1e:	442b      	add	r3, r5
        for (uint16_t i = 0; i < nb_transfered; i++) {
   82b20:	4281      	cmp	r1, r0
            MPSSE_TX_BUFFER[i + mpsse_tx_buffer_remaining()] = MPSSE_TX_BUFFER_BAK[i];
   82b22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        for (uint16_t i = 0; i < nb_transfered; i++) {
   82b26:	d8f2      	bhi.n	82b0e <mpsse_vendor_bulk_out_received+0x26>
        }
        mpsse_state.tx_bytes = mpsse_tx_buffer_remaining() + nb_transfered;
   82b28:	4471      	add	r1, lr
   82b2a:	f8a4 1003 	strh.w	r1, [r4, #3]
   82b2e:	e001      	b.n	82b34 <mpsse_vendor_bulk_out_received+0x4c>
    } else {
        mpsse_state.tx_bytes = nb_transfered;
   82b30:	f8a4 1003 	strh.w	r1, [r4, #3]
    }
    mpsse_state.tx_req = 0;
   82b34:	2300      	movs	r3, #0
   82b36:	73e3      	strb	r3, [r4, #15]
    mpsse_state.tx_idx = 0;
   82b38:	7063      	strb	r3, [r4, #1]
   82b3a:	70a3      	strb	r3, [r4, #2]
    mpsse_state.txn_lock = 0;
   82b3c:	72a3      	strb	r3, [r4, #10]
}
   82b3e:	b002      	add	sp, #8
   82b40:	bd70      	pop	{r4, r5, r6, pc}
            udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER_BAK, 
   82b42:	4e11      	ldr	r6, [pc, #68]	; (82b88 <mpsse_vendor_bulk_out_received+0xa0>)
        if (mpsse_state.tx_req) {
   82b44:	b953      	cbnz	r3, 82b5c <mpsse_vendor_bulk_out_received+0x74>
   82b46:	4d11      	ldr	r5, [pc, #68]	; (82b8c <mpsse_vendor_bulk_out_received+0xa4>)
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, 
   82b48:	2340      	movs	r3, #64	; 0x40
   82b4a:	2100      	movs	r1, #0
   82b4c:	4a10      	ldr	r2, [pc, #64]	; (82b90 <mpsse_vendor_bulk_out_received+0xa8>)
   82b4e:	9600      	str	r6, [sp, #0]
   82b50:	2006      	movs	r0, #6
   82b52:	47a8      	blx	r5
        mpsse_state.txn_lock = 1;
   82b54:	2301      	movs	r3, #1
   82b56:	72a3      	strb	r3, [r4, #10]
}
   82b58:	b002      	add	sp, #8
   82b5a:	bd70      	pop	{r4, r5, r6, pc}
            udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER_BAK, 
   82b5c:	2340      	movs	r3, #64	; 0x40
   82b5e:	2100      	movs	r1, #0
   82b60:	4a0c      	ldr	r2, [pc, #48]	; (82b94 <mpsse_vendor_bulk_out_received+0xac>)
   82b62:	4d0a      	ldr	r5, [pc, #40]	; (82b8c <mpsse_vendor_bulk_out_received+0xa4>)
   82b64:	9600      	str	r6, [sp, #0]
   82b66:	2006      	movs	r0, #6
   82b68:	47a8      	blx	r5
   82b6a:	e7ed      	b.n	82b48 <mpsse_vendor_bulk_out_received+0x60>
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   82b6c:	f9b4 e003 	ldrsh.w	lr, [r4, #3]
   82b70:	f9b4 3001 	ldrsh.w	r3, [r4, #1]
   82b74:	ebae 0e03 	sub.w	lr, lr, r3
   82b78:	fa1f fe8e 	uxth.w	lr, lr
   82b7c:	e7d4      	b.n	82b28 <mpsse_vendor_bulk_out_received+0x40>
   82b7e:	bf00      	nop
   82b80:	20070944 	.word	0x20070944
   82b84:	20074970 	.word	0x20074970
   82b88:	00082ae9 	.word	0x00082ae9
   82b8c:	000854b1 	.word	0x000854b1
   82b90:	200749b0 	.word	0x200749b0
   82b94:	20074a00 	.word	0x20074a00

00082b98 <mpsse_vendor_bulk_in_received>:

void mpsse_vendor_bulk_in_received(udd_ep_status_t status, iram_size_t nb_transferred, udd_ep_id_t ep)
{
   82b98:	b530      	push	{r4, r5, lr}
   82b9a:	b083      	sub	sp, #12
    if (UDD_EP_TRANSFER_OK != status) {
   82b9c:	bb48      	cbnz	r0, 82bf2 <mpsse_vendor_bulk_in_received+0x5a>
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
        return;
    }
    for (uint16_t i = 0; i < (mpsse_state.rx_bytes - nb_transferred); i++) {
   82b9e:	4d18      	ldr	r5, [pc, #96]	; (82c00 <mpsse_vendor_bulk_in_received+0x68>)
   82ba0:	f9b5 4005 	ldrsh.w	r4, [r5, #5]
   82ba4:	ebb4 0e01 	subs.w	lr, r4, r1
   82ba8:	d00c      	beq.n	82bc4 <mpsse_vendor_bulk_in_received+0x2c>
   82baa:	4603      	mov	r3, r0
   82bac:	4a15      	ldr	r2, [pc, #84]	; (82c04 <mpsse_vendor_bulk_in_received+0x6c>)
        // if we haven't finished sending, move the rest of the stuff to the start of the buffer
        MPSSE_RX_BUFFER[i] = MPSSE_RX_BUFFER[nb_transferred + i];
   82bae:	440b      	add	r3, r1
   82bb0:	5cd3      	ldrb	r3, [r2, r3]
    for (uint16_t i = 0; i < (mpsse_state.rx_bytes - nb_transferred); i++) {
   82bb2:	f100 0c01 	add.w	ip, r0, #1
        MPSSE_RX_BUFFER[i] = MPSSE_RX_BUFFER[nb_transferred + i];
   82bb6:	b2db      	uxtb	r3, r3
   82bb8:	5413      	strb	r3, [r2, r0]
    for (uint16_t i = 0; i < (mpsse_state.rx_bytes - nb_transferred); i++) {
   82bba:	fa1f f08c 	uxth.w	r0, ip
   82bbe:	4570      	cmp	r0, lr
   82bc0:	4603      	mov	r3, r0
   82bc2:	d3f4      	bcc.n	82bae <mpsse_vendor_bulk_in_received+0x16>
    }
    mpsse_state.rx_bytes -= nb_transferred;
   82bc4:	1a61      	subs	r1, r4, r1
   82bc6:	b20b      	sxth	r3, r1
   82bc8:	f8a5 1005 	strh.w	r1, [r5, #5]
    
    if (mpsse_state.rx_bytes) {
   82bcc:	b943      	cbnz	r3, 82be0 <mpsse_vendor_bulk_in_received+0x48>
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
    } else {
        // always have 2 bytes for status
        mpsse_state.rx_bytes = 2;
   82bce:	2102      	movs	r1, #2
        MPSSE_RX_BUFFER[0] = 0x00;
   82bd0:	4a0c      	ldr	r2, [pc, #48]	; (82c04 <mpsse_vendor_bulk_in_received+0x6c>)
        mpsse_state.rx_bytes = 2;
   82bd2:	71ab      	strb	r3, [r5, #6]
        MPSSE_RX_BUFFER[0] = 0x00;
   82bd4:	7013      	strb	r3, [r2, #0]
        MPSSE_RX_BUFFER[1] = 0x00;
        mpsse_state.txn_lock = 0;
   82bd6:	72ab      	strb	r3, [r5, #10]
        MPSSE_RX_BUFFER[1] = 0x00;
   82bd8:	7053      	strb	r3, [r2, #1]
        mpsse_state.rx_bytes = 2;
   82bda:	7169      	strb	r1, [r5, #5]
    }

}
   82bdc:	b003      	add	sp, #12
   82bde:	bd30      	pop	{r4, r5, pc}
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   82be0:	2100      	movs	r1, #0
   82be2:	4809      	ldr	r0, [pc, #36]	; (82c08 <mpsse_vendor_bulk_in_received+0x70>)
   82be4:	9000      	str	r0, [sp, #0]
   82be6:	4a07      	ldr	r2, [pc, #28]	; (82c04 <mpsse_vendor_bulk_in_received+0x6c>)
   82be8:	4c08      	ldr	r4, [pc, #32]	; (82c0c <mpsse_vendor_bulk_in_received+0x74>)
   82bea:	2085      	movs	r0, #133	; 0x85
   82bec:	47a0      	blx	r4
}
   82bee:	b003      	add	sp, #12
   82bf0:	bd30      	pop	{r4, r5, pc}
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   82bf2:	4b03      	ldr	r3, [pc, #12]	; (82c00 <mpsse_vendor_bulk_in_received+0x68>)
   82bf4:	2100      	movs	r1, #0
   82bf6:	4804      	ldr	r0, [pc, #16]	; (82c08 <mpsse_vendor_bulk_in_received+0x70>)
   82bf8:	f9b3 3005 	ldrsh.w	r3, [r3, #5]
   82bfc:	e7f2      	b.n	82be4 <mpsse_vendor_bulk_in_received+0x4c>
   82bfe:	bf00      	nop
   82c00:	20070944 	.word	0x20070944
   82c04:	20074970 	.word	0x20074970
   82c08:	00082b99 	.word	0x00082b99
   82c0c:	000854b1 	.word	0x000854b1

00082c10 <mpsse_enabled>:
    return mpsse_state.enabled;
   82c10:	4b01      	ldr	r3, [pc, #4]	; (82c18 <mpsse_enabled+0x8>)
}
   82c12:	7c98      	ldrb	r0, [r3, #18]
   82c14:	4770      	bx	lr
   82c16:	bf00      	nop
   82c18:	20070944 	.word	0x20070944

00082c1c <mpsse_swd_send_bit>:
{
   82c1c:	b570      	push	{r4, r5, r6, lr}
    dpin = mpsse_state.pins[3];
   82c1e:	4c28      	ldr	r4, [pc, #160]	; (82cc0 <mpsse_swd_send_bit+0xa4>)
    if (mpsse_state.swd_out_en) {
   82c20:	7c62      	ldrb	r2, [r4, #17]
    dpin = mpsse_state.pins[3];
   82c22:	f8d4 5023 	ldr.w	r5, [r4, #35]	; 0x23
    if (mpsse_state.swd_out_en) {
   82c26:	2a00      	cmp	r2, #0
   82c28:	d13d      	bne.n	82ca6 <mpsse_swd_send_bit+0x8a>
        read_value = gpio_pin_is_high(dpin);
   82c2a:	4628      	mov	r0, r5
   82c2c:	4b25      	ldr	r3, [pc, #148]	; (82cc4 <mpsse_swd_send_bit+0xa8>)
   82c2e:	4798      	blx	r3
   82c30:	1e05      	subs	r5, r0, #0
   82c32:	bf18      	it	ne
   82c34:	2501      	movne	r5, #1
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82c36:	2300      	movs	r3, #0
   82c38:	4c23      	ldr	r4, [pc, #140]	; (82cc8 <mpsse_swd_send_bit+0xac>)
   82c3a:	7023      	strb	r3, [r4, #0]
   82c3c:	7823      	ldrb	r3, [r4, #0]
   82c3e:	2b01      	cmp	r3, #1
   82c40:	d806      	bhi.n	82c50 <mpsse_swd_send_bit+0x34>
   82c42:	7823      	ldrb	r3, [r4, #0]
   82c44:	3301      	adds	r3, #1
   82c46:	b2db      	uxtb	r3, r3
   82c48:	7023      	strb	r3, [r4, #0]
   82c4a:	7823      	ldrb	r3, [r4, #0]
   82c4c:	2b01      	cmp	r3, #1
   82c4e:	d9f8      	bls.n	82c42 <mpsse_swd_send_bit+0x26>
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   82c50:	201b      	movs	r0, #27
   82c52:	4e1e      	ldr	r6, [pc, #120]	; (82ccc <mpsse_swd_send_bit+0xb0>)
   82c54:	47b0      	blx	r6
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82c56:	2300      	movs	r3, #0
   82c58:	7023      	strb	r3, [r4, #0]
   82c5a:	7823      	ldrb	r3, [r4, #0]
   82c5c:	2b01      	cmp	r3, #1
   82c5e:	d806      	bhi.n	82c6e <mpsse_swd_send_bit+0x52>
   82c60:	7823      	ldrb	r3, [r4, #0]
   82c62:	3301      	adds	r3, #1
   82c64:	b2db      	uxtb	r3, r3
   82c66:	7023      	strb	r3, [r4, #0]
   82c68:	7823      	ldrb	r3, [r4, #0]
   82c6a:	2b01      	cmp	r3, #1
   82c6c:	d9f8      	bls.n	82c60 <mpsse_swd_send_bit+0x44>
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82c6e:	2300      	movs	r3, #0
   82c70:	7023      	strb	r3, [r4, #0]
   82c72:	7823      	ldrb	r3, [r4, #0]
   82c74:	2b01      	cmp	r3, #1
   82c76:	d806      	bhi.n	82c86 <mpsse_swd_send_bit+0x6a>
   82c78:	7823      	ldrb	r3, [r4, #0]
   82c7a:	3301      	adds	r3, #1
   82c7c:	b2db      	uxtb	r3, r3
   82c7e:	7023      	strb	r3, [r4, #0]
   82c80:	7823      	ldrb	r3, [r4, #0]
   82c82:	2b01      	cmp	r3, #1
   82c84:	d9f8      	bls.n	82c78 <mpsse_swd_send_bit+0x5c>
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   82c86:	201b      	movs	r0, #27
   82c88:	47b0      	blx	r6
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82c8a:	2300      	movs	r3, #0
   82c8c:	7023      	strb	r3, [r4, #0]
   82c8e:	7823      	ldrb	r3, [r4, #0]
   82c90:	2b01      	cmp	r3, #1
   82c92:	d806      	bhi.n	82ca2 <mpsse_swd_send_bit+0x86>
   82c94:	7823      	ldrb	r3, [r4, #0]
   82c96:	3301      	adds	r3, #1
   82c98:	b2db      	uxtb	r3, r3
   82c9a:	7023      	strb	r3, [r4, #0]
   82c9c:	7823      	ldrb	r3, [r4, #0]
   82c9e:	2b01      	cmp	r3, #1
   82ca0:	d9f8      	bls.n	82c94 <mpsse_swd_send_bit+0x78>
}
   82ca2:	4628      	mov	r0, r5
   82ca4:	bd70      	pop	{r4, r5, r6, pc}
        if (value) {
   82ca6:	4603      	mov	r3, r0
   82ca8:	07db      	lsls	r3, r3, #31
            gpio_set_pin_high(dpin);
   82caa:	bf4c      	ite	mi
   82cac:	4b08      	ldrmi	r3, [pc, #32]	; (82cd0 <mpsse_swd_send_bit+0xb4>)
            gpio_set_pin_low(dpin);
   82cae:	4b09      	ldrpl	r3, [pc, #36]	; (82cd4 <mpsse_swd_send_bit+0xb8>)
            gpio_set_pin_high(dpin);
   82cb0:	4628      	mov	r0, r5
            gpio_set_pin_low(dpin);
   82cb2:	4798      	blx	r3
    if (!mpsse_state.swd_out_en)
   82cb4:	7c63      	ldrb	r3, [r4, #17]
   82cb6:	2b00      	cmp	r3, #0
   82cb8:	d0b7      	beq.n	82c2a <mpsse_swd_send_bit+0xe>
    uint8_t read_value = 0;
   82cba:	2500      	movs	r5, #0
   82cbc:	e7bb      	b.n	82c36 <mpsse_swd_send_bit+0x1a>
   82cbe:	bf00      	nop
   82cc0:	20070944 	.word	0x20070944
   82cc4:	000845dd 	.word	0x000845dd
   82cc8:	20071db4 	.word	0x20071db4
   82ccc:	00084631 	.word	0x00084631
   82cd0:	000845f9 	.word	0x000845f9
   82cd4:	00084615 	.word	0x00084615

00082cd8 <mpsse_send_bits>:
{
   82cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82cdc:	b083      	sub	sp, #12
    for (uint8_t i = 0; i < num_bits; i++) {
   82cde:	2900      	cmp	r1, #0
   82ce0:	f000 80df 	beq.w	82ea2 <mpsse_send_bits+0x1ca>
   82ce4:	1e4e      	subs	r6, r1, #1
   82ce6:	b2f6      	uxtb	r6, r6
   82ce8:	4607      	mov	r7, r0
   82cea:	f04f 0a07 	mov.w	sl, #7
    uint8_t read_value = 0;
   82cee:	f04f 0b00 	mov.w	fp, #0
   82cf2:	4d6e      	ldr	r5, [pc, #440]	; (82eac <mpsse_send_bits+0x1d4>)
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82cf4:	4c6e      	ldr	r4, [pc, #440]	; (82eb0 <mpsse_send_bits+0x1d8>)
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   82cf6:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 82eb4 <mpsse_send_bits+0x1dc>
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   82cfa:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 82eb8 <mpsse_send_bits+0x1e0>
   82cfe:	f1c6 0606 	rsb	r6, r6, #6
   82d02:	e012      	b.n	82d2a <mpsse_send_bits+0x52>
            read_value >>= 1;
   82d04:	ea4f 0b5b 	mov.w	fp, fp, lsr #1
            if (mpsse_state.swd_mode)
   82d08:	b353      	cbz	r3, 82d60 <mpsse_send_bits+0x88>
                read_value |= mpsse_swd_send_bit((value >> i) & 0x01) << 7;
   82d0a:	f1ca 0007 	rsb	r0, sl, #7
   82d0e:	fa47 f000 	asr.w	r0, r7, r0
   82d12:	4b6a      	ldr	r3, [pc, #424]	; (82ebc <mpsse_send_bits+0x1e4>)
   82d14:	f000 0001 	and.w	r0, r0, #1
   82d18:	4798      	blx	r3
   82d1a:	ea4b 1bc0 	orr.w	fp, fp, r0, lsl #7
   82d1e:	fa5f fb8b 	uxtb.w	fp, fp
    for (uint8_t i = 0; i < num_bits; i++) {
   82d22:	f10a 3aff 	add.w	sl, sl, #4294967295
   82d26:	4556      	cmp	r6, sl
   82d28:	d016      	beq.n	82d58 <mpsse_send_bits+0x80>
        if (mpsse_state.cur_cmd.b.lendian) {
   82d2a:	782b      	ldrb	r3, [r5, #0]
   82d2c:	f013 0f08 	tst.w	r3, #8
            if (mpsse_state.swd_mode)
   82d30:	7c2b      	ldrb	r3, [r5, #16]
        if (mpsse_state.cur_cmd.b.lendian) {
   82d32:	d1e7      	bne.n	82d04 <mpsse_send_bits+0x2c>
            if (mpsse_state.swd_mode)
   82d34:	2b00      	cmp	r3, #0
   82d36:	d060      	beq.n	82dfa <mpsse_send_bits+0x122>
                read_value |= mpsse_swd_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   82d38:	fa47 f00a 	asr.w	r0, r7, sl
   82d3c:	4b5f      	ldr	r3, [pc, #380]	; (82ebc <mpsse_send_bits+0x1e4>)
   82d3e:	f000 0001 	and.w	r0, r0, #1
   82d42:	4798      	blx	r3
   82d44:	fa00 f00a 	lsl.w	r0, r0, sl
    for (uint8_t i = 0; i < num_bits; i++) {
   82d48:	f10a 3aff 	add.w	sl, sl, #4294967295
                read_value |= mpsse_swd_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   82d4c:	ea40 0b0b 	orr.w	fp, r0, fp
    for (uint8_t i = 0; i < num_bits; i++) {
   82d50:	4556      	cmp	r6, sl
                read_value |= mpsse_swd_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   82d52:	fa5f fb8b 	uxtb.w	fp, fp
    for (uint8_t i = 0; i < num_bits; i++) {
   82d56:	d1e8      	bne.n	82d2a <mpsse_send_bits+0x52>
}
   82d58:	4658      	mov	r0, fp
   82d5a:	b003      	add	sp, #12
   82d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                read_value |= mpsse_send_bit((value >> i) & 0x01) << 7;
   82d60:	f1ca 0207 	rsb	r2, sl, #7
    if (mpsse_state.loopback_en) {
   82d64:	7a6b      	ldrb	r3, [r5, #9]
                read_value |= mpsse_send_bit((value >> i) & 0x01) << 7;
   82d66:	fa47 f202 	asr.w	r2, r7, r2
   82d6a:	f002 0201 	and.w	r2, r2, #1
    if (mpsse_state.loopback_en) {
   82d6e:	2b00      	cmp	r3, #0
   82d70:	d140      	bne.n	82df4 <mpsse_send_bits+0x11c>
        gpio_set_pin_high(dpin);
   82d72:	201a      	movs	r0, #26
    if (value) {
   82d74:	2a00      	cmp	r2, #0
   82d76:	f000 8091 	beq.w	82e9c <mpsse_send_bits+0x1c4>
        gpio_set_pin_high(dpin);
   82d7a:	4b51      	ldr	r3, [pc, #324]	; (82ec0 <mpsse_send_bits+0x1e8>)
   82d7c:	4798      	blx	r3
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82d7e:	2300      	movs	r3, #0
   82d80:	7023      	strb	r3, [r4, #0]
   82d82:	7823      	ldrb	r3, [r4, #0]
   82d84:	2b01      	cmp	r3, #1
   82d86:	d806      	bhi.n	82d96 <mpsse_send_bits+0xbe>
   82d88:	7823      	ldrb	r3, [r4, #0]
   82d8a:	3301      	adds	r3, #1
   82d8c:	b2db      	uxtb	r3, r3
   82d8e:	7023      	strb	r3, [r4, #0]
   82d90:	7823      	ldrb	r3, [r4, #0]
   82d92:	2b01      	cmp	r3, #1
   82d94:	d9f8      	bls.n	82d88 <mpsse_send_bits+0xb0>
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   82d96:	201b      	movs	r0, #27
   82d98:	47c0      	blx	r8
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82d9a:	2300      	movs	r3, #0
   82d9c:	7023      	strb	r3, [r4, #0]
   82d9e:	7823      	ldrb	r3, [r4, #0]
   82da0:	2b01      	cmp	r3, #1
   82da2:	d806      	bhi.n	82db2 <mpsse_send_bits+0xda>
   82da4:	7823      	ldrb	r3, [r4, #0]
   82da6:	3301      	adds	r3, #1
   82da8:	b2db      	uxtb	r3, r3
   82daa:	7023      	strb	r3, [r4, #0]
   82dac:	7823      	ldrb	r3, [r4, #0]
   82dae:	2b01      	cmp	r3, #1
   82db0:	d9f8      	bls.n	82da4 <mpsse_send_bits+0xcc>
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   82db2:	2019      	movs	r0, #25
   82db4:	47c8      	blx	r9
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82db6:	2300      	movs	r3, #0
   82db8:	7023      	strb	r3, [r4, #0]
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   82dba:	1ac2      	subs	r2, r0, r3
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82dbc:	7823      	ldrb	r3, [r4, #0]
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   82dbe:	bf18      	it	ne
   82dc0:	2201      	movne	r2, #1
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82dc2:	2b01      	cmp	r3, #1
   82dc4:	d806      	bhi.n	82dd4 <mpsse_send_bits+0xfc>
   82dc6:	7823      	ldrb	r3, [r4, #0]
   82dc8:	3301      	adds	r3, #1
   82dca:	b2db      	uxtb	r3, r3
   82dcc:	7023      	strb	r3, [r4, #0]
   82dce:	7823      	ldrb	r3, [r4, #0]
   82dd0:	2b01      	cmp	r3, #1
   82dd2:	d9f8      	bls.n	82dc6 <mpsse_send_bits+0xee>
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   82dd4:	201b      	movs	r0, #27
   82dd6:	9201      	str	r2, [sp, #4]
   82dd8:	47c0      	blx	r8
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82dda:	2300      	movs	r3, #0
   82ddc:	7023      	strb	r3, [r4, #0]
   82dde:	7823      	ldrb	r3, [r4, #0]
   82de0:	9a01      	ldr	r2, [sp, #4]
   82de2:	2b01      	cmp	r3, #1
   82de4:	d806      	bhi.n	82df4 <mpsse_send_bits+0x11c>
   82de6:	7823      	ldrb	r3, [r4, #0]
   82de8:	3301      	adds	r3, #1
   82dea:	b2db      	uxtb	r3, r3
   82dec:	7023      	strb	r3, [r4, #0]
   82dee:	7823      	ldrb	r3, [r4, #0]
   82df0:	2b01      	cmp	r3, #1
   82df2:	d9f8      	bls.n	82de6 <mpsse_send_bits+0x10e>
                read_value |= mpsse_send_bit((value >> i) & 0x01) << 7;
   82df4:	ea4b 1bc2 	orr.w	fp, fp, r2, lsl #7
   82df8:	e793      	b.n	82d22 <mpsse_send_bits+0x4a>
    if (mpsse_state.loopback_en) {
   82dfa:	7a6b      	ldrb	r3, [r5, #9]
                read_value |= mpsse_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   82dfc:	fa47 f20a 	asr.w	r2, r7, sl
   82e00:	f002 0201 	and.w	r2, r2, #1
    if (mpsse_state.loopback_en) {
   82e04:	2b00      	cmp	r3, #0
   82e06:	d13f      	bne.n	82e88 <mpsse_send_bits+0x1b0>
        gpio_set_pin_high(dpin);
   82e08:	201a      	movs	r0, #26
    if (value) {
   82e0a:	2a00      	cmp	r2, #0
   82e0c:	d043      	beq.n	82e96 <mpsse_send_bits+0x1be>
        gpio_set_pin_high(dpin);
   82e0e:	4b2c      	ldr	r3, [pc, #176]	; (82ec0 <mpsse_send_bits+0x1e8>)
   82e10:	4798      	blx	r3
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82e12:	2300      	movs	r3, #0
   82e14:	7023      	strb	r3, [r4, #0]
   82e16:	7823      	ldrb	r3, [r4, #0]
   82e18:	2b01      	cmp	r3, #1
   82e1a:	d806      	bhi.n	82e2a <mpsse_send_bits+0x152>
   82e1c:	7823      	ldrb	r3, [r4, #0]
   82e1e:	3301      	adds	r3, #1
   82e20:	b2db      	uxtb	r3, r3
   82e22:	7023      	strb	r3, [r4, #0]
   82e24:	7823      	ldrb	r3, [r4, #0]
   82e26:	2b01      	cmp	r3, #1
   82e28:	d9f8      	bls.n	82e1c <mpsse_send_bits+0x144>
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   82e2a:	201b      	movs	r0, #27
   82e2c:	47c0      	blx	r8
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82e2e:	2300      	movs	r3, #0
   82e30:	7023      	strb	r3, [r4, #0]
   82e32:	7823      	ldrb	r3, [r4, #0]
   82e34:	2b01      	cmp	r3, #1
   82e36:	d806      	bhi.n	82e46 <mpsse_send_bits+0x16e>
   82e38:	7823      	ldrb	r3, [r4, #0]
   82e3a:	3301      	adds	r3, #1
   82e3c:	b2db      	uxtb	r3, r3
   82e3e:	7023      	strb	r3, [r4, #0]
   82e40:	7823      	ldrb	r3, [r4, #0]
   82e42:	2b01      	cmp	r3, #1
   82e44:	d9f8      	bls.n	82e38 <mpsse_send_bits+0x160>
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   82e46:	2019      	movs	r0, #25
   82e48:	47c8      	blx	r9
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82e4a:	2300      	movs	r3, #0
   82e4c:	7023      	strb	r3, [r4, #0]
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   82e4e:	1ac2      	subs	r2, r0, r3
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82e50:	7823      	ldrb	r3, [r4, #0]
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   82e52:	bf18      	it	ne
   82e54:	2201      	movne	r2, #1
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82e56:	2b01      	cmp	r3, #1
   82e58:	d806      	bhi.n	82e68 <mpsse_send_bits+0x190>
   82e5a:	7823      	ldrb	r3, [r4, #0]
   82e5c:	3301      	adds	r3, #1
   82e5e:	b2db      	uxtb	r3, r3
   82e60:	7023      	strb	r3, [r4, #0]
   82e62:	7823      	ldrb	r3, [r4, #0]
   82e64:	2b01      	cmp	r3, #1
   82e66:	d9f8      	bls.n	82e5a <mpsse_send_bits+0x182>
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   82e68:	201b      	movs	r0, #27
   82e6a:	9201      	str	r2, [sp, #4]
   82e6c:	47c0      	blx	r8
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82e6e:	2300      	movs	r3, #0
   82e70:	7023      	strb	r3, [r4, #0]
   82e72:	7823      	ldrb	r3, [r4, #0]
   82e74:	9a01      	ldr	r2, [sp, #4]
   82e76:	2b01      	cmp	r3, #1
   82e78:	d806      	bhi.n	82e88 <mpsse_send_bits+0x1b0>
   82e7a:	7823      	ldrb	r3, [r4, #0]
   82e7c:	3301      	adds	r3, #1
   82e7e:	b2db      	uxtb	r3, r3
   82e80:	7023      	strb	r3, [r4, #0]
   82e82:	7823      	ldrb	r3, [r4, #0]
   82e84:	2b01      	cmp	r3, #1
   82e86:	d9f8      	bls.n	82e7a <mpsse_send_bits+0x1a2>
                read_value |= mpsse_send_bit((value >> (7 - i)) & 0x01) << (7 - i);
   82e88:	fa02 f20a 	lsl.w	r2, r2, sl
   82e8c:	ea42 0b0b 	orr.w	fp, r2, fp
   82e90:	fa5f fb8b 	uxtb.w	fp, fp
   82e94:	e745      	b.n	82d22 <mpsse_send_bits+0x4a>
        gpio_set_pin_low(dpin);
   82e96:	4b0b      	ldr	r3, [pc, #44]	; (82ec4 <mpsse_send_bits+0x1ec>)
   82e98:	4798      	blx	r3
   82e9a:	e7ba      	b.n	82e12 <mpsse_send_bits+0x13a>
   82e9c:	4b09      	ldr	r3, [pc, #36]	; (82ec4 <mpsse_send_bits+0x1ec>)
   82e9e:	4798      	blx	r3
   82ea0:	e76d      	b.n	82d7e <mpsse_send_bits+0xa6>
    uint8_t read_value = 0;
   82ea2:	468b      	mov	fp, r1
}
   82ea4:	4658      	mov	r0, fp
   82ea6:	b003      	add	sp, #12
   82ea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82eac:	20070944 	.word	0x20070944
   82eb0:	20071db4 	.word	0x20071db4
   82eb4:	00084631 	.word	0x00084631
   82eb8:	000845dd 	.word	0x000845dd
   82ebc:	00082c1d 	.word	0x00082c1d
   82ec0:	000845f9 	.word	0x000845f9
   82ec4:	00084615 	.word	0x00084615

00082ec8 <mpsse_tms_send>:
{
   82ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82ecc:	460c      	mov	r4, r1
    if (num_bits == 7) {
   82ece:	f1a4 0507 	sub.w	r5, r4, #7
   82ed2:	fab5 f585 	clz	r5, r5
    if (bitval) {
   82ed6:	09c3      	lsrs	r3, r0, #7
        gpio_set_pin_high(MPSSE_DOUT_GPIO);
   82ed8:	bf14      	ite	ne
   82eda:	4b71      	ldrne	r3, [pc, #452]	; (830a0 <mpsse_tms_send+0x1d8>)
        gpio_set_pin_low(MPSSE_DOUT_GPIO);
   82edc:	4b71      	ldreq	r3, [pc, #452]	; (830a4 <mpsse_tms_send+0x1dc>)
{
   82ede:	4680      	mov	r8, r0
   82ee0:	b083      	sub	sp, #12
        gpio_set_pin_high(MPSSE_DOUT_GPIO);
   82ee2:	201a      	movs	r0, #26
    if (num_bits == 7) {
   82ee4:	096d      	lsrs	r5, r5, #5
        gpio_set_pin_low(MPSSE_DOUT_GPIO);
   82ee6:	4798      	blx	r3
    for (; i < num_bits; i++) {
   82ee8:	42ac      	cmp	r4, r5
   82eea:	f240 80d4 	bls.w	83096 <mpsse_tms_send+0x1ce>
   82eee:	1e63      	subs	r3, r4, #1
   82ef0:	2400      	movs	r4, #0
   82ef2:	1b5b      	subs	r3, r3, r5
   82ef4:	f1c5 0906 	rsb	r9, r5, #6
   82ef8:	b2db      	uxtb	r3, r3
   82efa:	f8df a1ac 	ldr.w	sl, [pc, #428]	; 830a8 <mpsse_tms_send+0x1e0>
   82efe:	4f6b      	ldr	r7, [pc, #428]	; (830ac <mpsse_tms_send+0x1e4>)
   82f00:	f8df b1ac 	ldr.w	fp, [pc, #428]	; 830b0 <mpsse_tms_send+0x1e8>
   82f04:	4e6b      	ldr	r6, [pc, #428]	; (830b4 <mpsse_tms_send+0x1ec>)
   82f06:	f1c5 0507 	rsb	r5, r5, #7
   82f0a:	eba9 0903 	sub.w	r9, r9, r3
        if (mpsse_state.cur_cmd.b.lendian) {
   82f0e:	f89a 2000 	ldrb.w	r2, [sl]
   82f12:	0711      	lsls	r1, r2, #28
   82f14:	d565      	bpl.n	82fe2 <mpsse_tms_send+0x11a>
            read_value |= mpsse_tms_bit_send((value >> i) & 0x01) << (7 - i);
   82f16:	f1c5 0207 	rsb	r2, r5, #7
   82f1a:	fa48 f202 	asr.w	r2, r8, r2
    if (value) {
   82f1e:	07d2      	lsls	r2, r2, #31
        gpio_set_pin_high(dpin);
   82f20:	bf4c      	ite	mi
   82f22:	4b5f      	ldrmi	r3, [pc, #380]	; (830a0 <mpsse_tms_send+0x1d8>)
        gpio_set_pin_low(dpin);
   82f24:	4b5f      	ldrpl	r3, [pc, #380]	; (830a4 <mpsse_tms_send+0x1dc>)
        gpio_set_pin_high(dpin);
   82f26:	201c      	movs	r0, #28
        gpio_set_pin_low(dpin);
   82f28:	4798      	blx	r3
    read_value = gpio_pin_is_high(dpin);
   82f2a:	201c      	movs	r0, #28
   82f2c:	47b8      	blx	r7
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82f2e:	2200      	movs	r2, #0
   82f30:	f88b 2000 	strb.w	r2, [fp]
   82f34:	f89b 2000 	ldrb.w	r2, [fp]
            read_value >>= 1;
   82f38:	0864      	lsrs	r4, r4, #1
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82f3a:	2a01      	cmp	r2, #1
   82f3c:	d809      	bhi.n	82f52 <mpsse_tms_send+0x8a>
   82f3e:	f89b 2000 	ldrb.w	r2, [fp]
   82f42:	3201      	adds	r2, #1
   82f44:	b2d2      	uxtb	r2, r2
   82f46:	f88b 2000 	strb.w	r2, [fp]
   82f4a:	f89b 2000 	ldrb.w	r2, [fp]
   82f4e:	2a01      	cmp	r2, #1
   82f50:	d9f5      	bls.n	82f3e <mpsse_tms_send+0x76>
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   82f52:	201b      	movs	r0, #27
   82f54:	47b0      	blx	r6
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82f56:	2200      	movs	r2, #0
   82f58:	f88b 2000 	strb.w	r2, [fp]
   82f5c:	f89b 2000 	ldrb.w	r2, [fp]
   82f60:	2a01      	cmp	r2, #1
   82f62:	d809      	bhi.n	82f78 <mpsse_tms_send+0xb0>
   82f64:	f89b 2000 	ldrb.w	r2, [fp]
   82f68:	3201      	adds	r2, #1
   82f6a:	b2d2      	uxtb	r2, r2
   82f6c:	f88b 2000 	strb.w	r2, [fp]
   82f70:	f89b 2000 	ldrb.w	r2, [fp]
   82f74:	2a01      	cmp	r2, #1
   82f76:	d9f5      	bls.n	82f64 <mpsse_tms_send+0x9c>
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   82f78:	2019      	movs	r0, #25
   82f7a:	47b8      	blx	r7
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82f7c:	2200      	movs	r2, #0
   82f7e:	f88b 2000 	strb.w	r2, [fp]
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   82f82:	1a81      	subs	r1, r0, r2
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82f84:	f89b 2000 	ldrb.w	r2, [fp]
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   82f88:	bf18      	it	ne
   82f8a:	2101      	movne	r1, #1
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82f8c:	2a01      	cmp	r2, #1
   82f8e:	d809      	bhi.n	82fa4 <mpsse_tms_send+0xdc>
   82f90:	f89b 2000 	ldrb.w	r2, [fp]
   82f94:	3201      	adds	r2, #1
   82f96:	b2d2      	uxtb	r2, r2
   82f98:	f88b 2000 	strb.w	r2, [fp]
   82f9c:	f89b 2000 	ldrb.w	r2, [fp]
   82fa0:	2a01      	cmp	r2, #1
   82fa2:	d9f5      	bls.n	82f90 <mpsse_tms_send+0xc8>
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   82fa4:	201b      	movs	r0, #27
   82fa6:	9101      	str	r1, [sp, #4]
   82fa8:	47b0      	blx	r6
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82faa:	2200      	movs	r2, #0
   82fac:	f88b 2000 	strb.w	r2, [fp]
   82fb0:	f89b 2000 	ldrb.w	r2, [fp]
   82fb4:	9901      	ldr	r1, [sp, #4]
   82fb6:	2a01      	cmp	r2, #1
   82fb8:	d809      	bhi.n	82fce <mpsse_tms_send+0x106>
   82fba:	f89b 2000 	ldrb.w	r2, [fp]
   82fbe:	3201      	adds	r2, #1
   82fc0:	b2d2      	uxtb	r2, r2
   82fc2:	f88b 2000 	strb.w	r2, [fp]
   82fc6:	f89b 2000 	ldrb.w	r2, [fp]
   82fca:	2a01      	cmp	r2, #1
   82fcc:	d9f5      	bls.n	82fba <mpsse_tms_send+0xf2>
            read_value |= mpsse_tms_bit_send((value >> (7 - i)) & 0x01) << (7 - i);
   82fce:	40a9      	lsls	r1, r5
    for (; i < num_bits; i++) {
   82fd0:	3d01      	subs	r5, #1
            read_value |= mpsse_tms_bit_send((value >> (7 - i)) & 0x01) << (7 - i);
   82fd2:	430c      	orrs	r4, r1
    for (; i < num_bits; i++) {
   82fd4:	45a9      	cmp	r9, r5
            read_value |= mpsse_tms_bit_send((value >> (7 - i)) & 0x01) << (7 - i);
   82fd6:	b2e4      	uxtb	r4, r4
    for (; i < num_bits; i++) {
   82fd8:	d199      	bne.n	82f0e <mpsse_tms_send+0x46>
}
   82fda:	4620      	mov	r0, r4
   82fdc:	b003      	add	sp, #12
   82fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            read_value |= mpsse_tms_bit_send((value >> (7 - i)) & 0x01) << (7 - i);
   82fe2:	fa48 f205 	asr.w	r2, r8, r5
    if (value) {
   82fe6:	07d3      	lsls	r3, r2, #31
        gpio_set_pin_high(dpin);
   82fe8:	bf4c      	ite	mi
   82fea:	4b2d      	ldrmi	r3, [pc, #180]	; (830a0 <mpsse_tms_send+0x1d8>)
        gpio_set_pin_low(dpin);
   82fec:	4b2d      	ldrpl	r3, [pc, #180]	; (830a4 <mpsse_tms_send+0x1dc>)
        gpio_set_pin_high(dpin);
   82fee:	201c      	movs	r0, #28
        gpio_set_pin_low(dpin);
   82ff0:	4798      	blx	r3
    read_value = gpio_pin_is_high(dpin);
   82ff2:	201c      	movs	r0, #28
   82ff4:	47b8      	blx	r7
    for (waitvar = 0; waitvar < numwait; waitvar++);
   82ff6:	2200      	movs	r2, #0
   82ff8:	f88b 2000 	strb.w	r2, [fp]
   82ffc:	f89b 2000 	ldrb.w	r2, [fp]
   83000:	2a01      	cmp	r2, #1
   83002:	d809      	bhi.n	83018 <mpsse_tms_send+0x150>
   83004:	f89b 2000 	ldrb.w	r2, [fp]
   83008:	3201      	adds	r2, #1
   8300a:	b2d2      	uxtb	r2, r2
   8300c:	f88b 2000 	strb.w	r2, [fp]
   83010:	f89b 2000 	ldrb.w	r2, [fp]
   83014:	2a01      	cmp	r2, #1
   83016:	d9f5      	bls.n	83004 <mpsse_tms_send+0x13c>
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   83018:	201b      	movs	r0, #27
   8301a:	47b0      	blx	r6
    for (waitvar = 0; waitvar < numwait; waitvar++);
   8301c:	2200      	movs	r2, #0
   8301e:	f88b 2000 	strb.w	r2, [fp]
   83022:	f89b 2000 	ldrb.w	r2, [fp]
   83026:	2a01      	cmp	r2, #1
   83028:	d809      	bhi.n	8303e <mpsse_tms_send+0x176>
   8302a:	f89b 2000 	ldrb.w	r2, [fp]
   8302e:	3201      	adds	r2, #1
   83030:	b2d2      	uxtb	r2, r2
   83032:	f88b 2000 	strb.w	r2, [fp]
   83036:	f89b 2000 	ldrb.w	r2, [fp]
   8303a:	2a01      	cmp	r2, #1
   8303c:	d9f5      	bls.n	8302a <mpsse_tms_send+0x162>
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   8303e:	2019      	movs	r0, #25
   83040:	47b8      	blx	r7
    for (waitvar = 0; waitvar < numwait; waitvar++);
   83042:	2200      	movs	r2, #0
   83044:	f88b 2000 	strb.w	r2, [fp]
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   83048:	1a81      	subs	r1, r0, r2
    for (waitvar = 0; waitvar < numwait; waitvar++);
   8304a:	f89b 2000 	ldrb.w	r2, [fp]
    read_value = gpio_pin_is_high(MPSSE_DIN_GPIO);
   8304e:	bf18      	it	ne
   83050:	2101      	movne	r1, #1
    for (waitvar = 0; waitvar < numwait; waitvar++);
   83052:	2a01      	cmp	r2, #1
   83054:	d809      	bhi.n	8306a <mpsse_tms_send+0x1a2>
   83056:	f89b 2000 	ldrb.w	r2, [fp]
   8305a:	3201      	adds	r2, #1
   8305c:	b2d2      	uxtb	r2, r2
   8305e:	f88b 2000 	strb.w	r2, [fp]
   83062:	f89b 2000 	ldrb.w	r2, [fp]
   83066:	2a01      	cmp	r2, #1
   83068:	d9f5      	bls.n	83056 <mpsse_tms_send+0x18e>
    gpio_toggle_pin(MPSSE_SCK_GPIO);
   8306a:	201b      	movs	r0, #27
   8306c:	9101      	str	r1, [sp, #4]
   8306e:	47b0      	blx	r6
    for (waitvar = 0; waitvar < numwait; waitvar++);
   83070:	2200      	movs	r2, #0
   83072:	f88b 2000 	strb.w	r2, [fp]
   83076:	f89b 2000 	ldrb.w	r2, [fp]
   8307a:	9901      	ldr	r1, [sp, #4]
   8307c:	2a01      	cmp	r2, #1
   8307e:	d8a6      	bhi.n	82fce <mpsse_tms_send+0x106>
   83080:	f89b 2000 	ldrb.w	r2, [fp]
   83084:	3201      	adds	r2, #1
   83086:	b2d2      	uxtb	r2, r2
   83088:	f88b 2000 	strb.w	r2, [fp]
   8308c:	f89b 2000 	ldrb.w	r2, [fp]
   83090:	2a01      	cmp	r2, #1
   83092:	d9f5      	bls.n	83080 <mpsse_tms_send+0x1b8>
   83094:	e79b      	b.n	82fce <mpsse_tms_send+0x106>
    for (; i < num_bits; i++) {
   83096:	2400      	movs	r4, #0
}
   83098:	4620      	mov	r0, r4
   8309a:	b003      	add	sp, #12
   8309c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   830a0:	000845f9 	.word	0x000845f9
   830a4:	00084615 	.word	0x00084615
   830a8:	20070944 	.word	0x20070944
   830ac:	000845dd 	.word	0x000845dd
   830b0:	20071db4 	.word	0x20071db4
   830b4:	00084631 	.word	0x00084631

000830b8 <mpsse_handle_transmission>:
{
   830b8:	b530      	push	{r4, r5, lr}
    if (mpsse_state.txn_len == 0) { 
   830ba:	4c57      	ldr	r4, [pc, #348]	; (83218 <mpsse_handle_transmission+0x160>)
{
   830bc:	b083      	sub	sp, #12
    if (mpsse_state.txn_len == 0) { 
   830be:	f9b4 3007 	ldrsh.w	r3, [r4, #7]
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   830c2:	f9b4 1001 	ldrsh.w	r1, [r4, #1]
    if (mpsse_state.txn_len == 0) { 
   830c6:	bb5b      	cbnz	r3, 83120 <mpsse_handle_transmission+0x68>
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   830c8:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   830cc:	b28a      	uxth	r2, r1
   830ce:	1a98      	subs	r0, r3, r2
        if (mpsse_tx_buffer_remaining() < 2) {
   830d0:	b200      	sxth	r0, r0
   830d2:	2801      	cmp	r0, #1
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   830d4:	b209      	sxth	r1, r1
        if (mpsse_tx_buffer_remaining() < 2) {
   830d6:	dd1f      	ble.n	83118 <mpsse_handle_transmission+0x60>
        mpsse_state.txn_len = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   830d8:	4d50      	ldr	r5, [pc, #320]	; (8321c <mpsse_handle_transmission+0x164>)
   830da:	1c50      	adds	r0, r2, #1
   830dc:	f8a4 0001 	strh.w	r0, [r4, #1]
   830e0:	fa0f fc80 	sxth.w	ip, r0
   830e4:	4429      	add	r1, r5
        if (!mpsse_state.cur_cmd.b.bit_mode) {
   830e6:	7820      	ldrb	r0, [r4, #0]
        mpsse_state.txn_len = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   830e8:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
        if (!mpsse_state.cur_cmd.b.bit_mode) {
   830ec:	f010 0f02 	tst.w	r0, #2
        mpsse_state.txn_len = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   830f0:	b2c9      	uxtb	r1, r1
        if (!mpsse_state.cur_cmd.b.bit_mode) {
   830f2:	d149      	bne.n	83188 <mpsse_handle_transmission+0xd0>
            mpsse_state.txn_len |= MPSSE_TX_BUFFER[mpsse_state.tx_idx++] << 8;
   830f4:	eb05 000c 	add.w	r0, r5, ip
   830f8:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
   830fc:	3202      	adds	r2, #2
   830fe:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
            mpsse_state.txn_len++; //0x00 sends 1 byte, 0x01 sends 2, etc
   83102:	3101      	adds	r1, #1
   83104:	f8a4 1007 	strh.w	r1, [r4, #7]
            mpsse_state.txn_len |= MPSSE_TX_BUFFER[mpsse_state.tx_idx++] << 8;
   83108:	b291      	uxth	r1, r2
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   8310a:	1a5b      	subs	r3, r3, r1
    if (mpsse_tx_buffer_remaining() < 1) {
   8310c:	b21b      	sxth	r3, r3
   8310e:	2b00      	cmp	r3, #0
            mpsse_state.txn_len |= MPSSE_TX_BUFFER[mpsse_state.tx_idx++] << 8;
   83110:	f8a4 2001 	strh.w	r2, [r4, #1]
   83114:	b212      	sxth	r2, r2
    if (mpsse_tx_buffer_remaining() < 1) {
   83116:	dc0b      	bgt.n	83130 <mpsse_handle_transmission+0x78>
            mpsse_state.tx_req = 1;
   83118:	2301      	movs	r3, #1
   8311a:	73e3      	strb	r3, [r4, #15]
}
   8311c:	b003      	add	sp, #12
   8311e:	bd30      	pop	{r4, r5, pc}
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   83120:	f8b4 3003 	ldrh.w	r3, [r4, #3]
   83124:	b20a      	sxth	r2, r1
   83126:	b289      	uxth	r1, r1
   83128:	1a5b      	subs	r3, r3, r1
    if (mpsse_tx_buffer_remaining() < 1) {
   8312a:	b21b      	sxth	r3, r3
   8312c:	2b00      	cmp	r3, #0
   8312e:	ddf3      	ble.n	83118 <mpsse_handle_transmission+0x60>
    if (mpsse_state.cur_cmd.b.wtdi) {
   83130:	7820      	ldrb	r0, [r4, #0]
   83132:	f010 0010 	ands.w	r0, r0, #16
   83136:	d11c      	bne.n	83172 <mpsse_handle_transmission+0xba>
    return mpsse_send_bits(value, 8);
   83138:	2108      	movs	r1, #8
   8313a:	4b39      	ldr	r3, [pc, #228]	; (83220 <mpsse_handle_transmission+0x168>)
   8313c:	4798      	blx	r3
    if (mpsse_state.cur_cmd.b.rtdo) {
   8313e:	7823      	ldrb	r3, [r4, #0]
   83140:	069b      	lsls	r3, r3, #26
   83142:	d50b      	bpl.n	8315c <mpsse_handle_transmission+0xa4>
        MPSSE_RX_BUFFER[mpsse_state.rx_bytes++] = read_val; //TDO data into RX buffer
   83144:	f9b4 1005 	ldrsh.w	r1, [r4, #5]
   83148:	4a34      	ldr	r2, [pc, #208]	; (8321c <mpsse_handle_transmission+0x164>)
   8314a:	1c4b      	adds	r3, r1, #1
   8314c:	f8a4 3005 	strh.w	r3, [r4, #5]
    return sizeof(MPSSE_RX_BUFFER) - mpsse_state.rx_bytes;
   83150:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
        if (mpsse_rx_buffer_remaining() > 0) {
   83154:	b21b      	sxth	r3, r3
   83156:	2b00      	cmp	r3, #0
        MPSSE_RX_BUFFER[mpsse_state.rx_bytes++] = read_val; //TDO data into RX buffer
   83158:	5450      	strb	r0, [r2, r1]
        if (mpsse_rx_buffer_remaining() > 0) {
   8315a:	dd3d      	ble.n	831d8 <mpsse_handle_transmission+0x120>
    if (--mpsse_state.txn_len == 0) {
   8315c:	f9b4 3007 	ldrsh.w	r3, [r4, #7]
   83160:	3b01      	subs	r3, #1
   83162:	b21a      	sxth	r2, r3
   83164:	f8a4 3007 	strh.w	r3, [r4, #7]
   83168:	b90a      	cbnz	r2, 8316e <mpsse_handle_transmission+0xb6>
            mpsse_state.cur_cmd.u8 = 0;
   8316a:	2300      	movs	r3, #0
   8316c:	7023      	strb	r3, [r4, #0]
}
   8316e:	b003      	add	sp, #12
   83170:	bd30      	pop	{r4, r5, pc}
        read_val = mpsse_send_byte(MPSSE_TX_BUFFER[mpsse_state.tx_idx++]);
   83172:	482a      	ldr	r0, [pc, #168]	; (8321c <mpsse_handle_transmission+0x164>)
   83174:	1c4b      	adds	r3, r1, #1
   83176:	4402      	add	r2, r0
    return mpsse_send_bits(value, 8);
   83178:	2108      	movs	r1, #8
        read_val = mpsse_send_byte(MPSSE_TX_BUFFER[mpsse_state.tx_idx++]);
   8317a:	f892 0040 	ldrb.w	r0, [r2, #64]	; 0x40
    return mpsse_send_bits(value, 8);
   8317e:	4a28      	ldr	r2, [pc, #160]	; (83220 <mpsse_handle_transmission+0x168>)
        read_val = mpsse_send_byte(MPSSE_TX_BUFFER[mpsse_state.tx_idx++]);
   83180:	f8a4 3001 	strh.w	r3, [r4, #1]
    return mpsse_send_bits(value, 8);
   83184:	4790      	blx	r2
   83186:	e7da      	b.n	8313e <mpsse_handle_transmission+0x86>
            mpsse_state.txn_len++; //0x00 sends 1 bit
   83188:	3101      	adds	r1, #1
            if (mpsse_state.cur_cmd.b.wtms) {
   8318a:	0643      	lsls	r3, r0, #25
            mpsse_state.txn_len++; //0x00 sends 1 bit
   8318c:	f8a4 1007 	strh.w	r1, [r4, #7]
            if (mpsse_state.cur_cmd.b.wtms) {
   83190:	d437      	bmi.n	83202 <mpsse_handle_transmission+0x14a>
                if (mpsse_state.cur_cmd.b.wtdi) // if we're writing, read a byte from the buffer
   83192:	f010 0010 	ands.w	r0, r0, #16
   83196:	d12b      	bne.n	831f0 <mpsse_handle_transmission+0x138>
                read_val = mpsse_send_bits(value, mpsse_state.txn_len);
   83198:	4b21      	ldr	r3, [pc, #132]	; (83220 <mpsse_handle_transmission+0x168>)
   8319a:	b2c9      	uxtb	r1, r1
   8319c:	4798      	blx	r3
            mpsse_state.txn_len = 0;
   8319e:	2100      	movs	r1, #0
            if (mpsse_state.cur_cmd.b.rtdo) {
   831a0:	7823      	ldrb	r3, [r4, #0]
            mpsse_state.txn_len = 0;
   831a2:	71e1      	strb	r1, [r4, #7]
            if (mpsse_state.cur_cmd.b.rtdo) {
   831a4:	069a      	lsls	r2, r3, #26
            mpsse_state.txn_len = 0;
   831a6:	7221      	strb	r1, [r4, #8]
            if (mpsse_state.cur_cmd.b.rtdo) {
   831a8:	d5df      	bpl.n	8316a <mpsse_handle_transmission+0xb2>
                MPSSE_RX_BUFFER[mpsse_state.rx_bytes++] = read_val; // put TDO data into RX buf
   831aa:	f9b4 3005 	ldrsh.w	r3, [r4, #5]
   831ae:	54e8      	strb	r0, [r5, r3]
   831b0:	3301      	adds	r3, #1
    return sizeof(MPSSE_RX_BUFFER) - mpsse_state.rx_bytes;
   831b2:	f1c3 0240 	rsb	r2, r3, #64	; 0x40
                MPSSE_RX_BUFFER[mpsse_state.rx_bytes++] = read_val; // put TDO data into RX buf
   831b6:	f8a4 3005 	strh.w	r3, [r4, #5]
                if (mpsse_rx_buffer_remaining() > 0) {
   831ba:	b213      	sxth	r3, r2
   831bc:	428b      	cmp	r3, r1
   831be:	dcd4      	bgt.n	8316a <mpsse_handle_transmission+0xb2>
                    mpsse_state.txn_lock = 1;
   831c0:	f04f 0c01 	mov.w	ip, #1
                    udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, 
   831c4:	4a17      	ldr	r2, [pc, #92]	; (83224 <mpsse_handle_transmission+0x16c>)
   831c6:	2340      	movs	r3, #64	; 0x40
   831c8:	9200      	str	r2, [sp, #0]
   831ca:	4d17      	ldr	r5, [pc, #92]	; (83228 <mpsse_handle_transmission+0x170>)
   831cc:	4a13      	ldr	r2, [pc, #76]	; (8321c <mpsse_handle_transmission+0x164>)
   831ce:	2085      	movs	r0, #133	; 0x85
                    mpsse_state.txn_lock = 1;
   831d0:	f884 c00a 	strb.w	ip, [r4, #10]
                    udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, 
   831d4:	47a8      	blx	r5
   831d6:	e7c8      	b.n	8316a <mpsse_handle_transmission+0xb2>
            mpsse_state.txn_lock = 1;
   831d8:	f04f 0c01 	mov.w	ip, #1
            udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, 
   831dc:	4911      	ldr	r1, [pc, #68]	; (83224 <mpsse_handle_transmission+0x16c>)
   831de:	2340      	movs	r3, #64	; 0x40
   831e0:	9100      	str	r1, [sp, #0]
   831e2:	4d11      	ldr	r5, [pc, #68]	; (83228 <mpsse_handle_transmission+0x170>)
   831e4:	2100      	movs	r1, #0
   831e6:	2085      	movs	r0, #133	; 0x85
            mpsse_state.txn_lock = 1;
   831e8:	f884 c00a 	strb.w	ip, [r4, #10]
            udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, 
   831ec:	47a8      	blx	r5
   831ee:	e7b5      	b.n	8315c <mpsse_handle_transmission+0xa4>
                     value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   831f0:	eb05 000c 	add.w	r0, r5, ip
   831f4:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
   831f8:	3202      	adds	r2, #2
   831fa:	f8a4 2001 	strh.w	r2, [r4, #1]
   831fe:	b2c0      	uxtb	r0, r0
   83200:	e7ca      	b.n	83198 <mpsse_handle_transmission+0xe0>
                read_val = mpsse_tms_send(MPSSE_TX_BUFFER[mpsse_state.tx_idx++], mpsse_state.txn_len);
   83202:	eb05 000c 	add.w	r0, r5, ip
   83206:	3202      	adds	r2, #2
   83208:	4b08      	ldr	r3, [pc, #32]	; (8322c <mpsse_handle_transmission+0x174>)
   8320a:	b2c9      	uxtb	r1, r1
   8320c:	f8a4 2001 	strh.w	r2, [r4, #1]
   83210:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
   83214:	4798      	blx	r3
                mpsse_state.txn_len = 0;
   83216:	e7c2      	b.n	8319e <mpsse_handle_transmission+0xe6>
   83218:	20070944 	.word	0x20070944
   8321c:	20074970 	.word	0x20074970
   83220:	00082cd9 	.word	0x00082cd9
   83224:	00082b99 	.word	0x00082b99
   83228:	000854b1 	.word	0x000854b1
   8322c:	00082ec9 	.word	0x00082ec9

00083230 <mpsse_handle_special>:
{
   83230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    switch (mpsse_state.cur_cmd.u8) {
   83234:	4c5e      	ldr	r4, [pc, #376]	; (833b0 <mpsse_handle_special+0x180>)
{
   83236:	b082      	sub	sp, #8
    switch (mpsse_state.cur_cmd.u8) {
   83238:	7823      	ldrb	r3, [r4, #0]
   8323a:	3b80      	subs	r3, #128	; 0x80
   8323c:	2b07      	cmp	r3, #7
   8323e:	f200 80a8 	bhi.w	83392 <mpsse_handle_special+0x162>
   83242:	e8df f003 	tbb	[pc, r3]
   83246:	7c13      	.short	0x7c13
   83248:	6c65548d 	.word	0x6c65548d
   8324c:	0472      	.short	0x0472
        mpsse_state.cur_cmd.u8 = 0x00;
   8324e:	2100      	movs	r1, #0
        mpsse_state.txn_lock = 1;
   83250:	2601      	movs	r6, #1
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   83252:	4a58      	ldr	r2, [pc, #352]	; (833b4 <mpsse_handle_special+0x184>)
   83254:	2085      	movs	r0, #133	; 0x85
   83256:	9200      	str	r2, [sp, #0]
   83258:	f9b4 3005 	ldrsh.w	r3, [r4, #5]
   8325c:	4a56      	ldr	r2, [pc, #344]	; (833b8 <mpsse_handle_special+0x188>)
   8325e:	4d57      	ldr	r5, [pc, #348]	; (833bc <mpsse_handle_special+0x18c>)
        mpsse_state.cur_cmd.u8 = 0x00;
   83260:	7021      	strb	r1, [r4, #0]
        mpsse_state.txn_lock = 1;
   83262:	72a6      	strb	r6, [r4, #10]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   83264:	47a8      	blx	r5
}
   83266:	b002      	add	sp, #8
   83268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   8326c:	f9b4 2001 	ldrsh.w	r2, [r4, #1]
   83270:	f9b4 1003 	ldrsh.w	r1, [r4, #3]
   83274:	b293      	uxth	r3, r2
   83276:	1ac9      	subs	r1, r1, r3
        if (mpsse_tx_buffer_remaining() < 2) {
   83278:	b209      	sxth	r1, r1
   8327a:	2901      	cmp	r1, #1
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   8327c:	b212      	sxth	r2, r2
        if (mpsse_tx_buffer_remaining() < 2) {
   8327e:	f340 808f 	ble.w	833a0 <mpsse_handle_special+0x170>
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83282:	494d      	ldr	r1, [pc, #308]	; (833b8 <mpsse_handle_special+0x188>)
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83284:	1c98      	adds	r0, r3, #2
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83286:	3301      	adds	r3, #1
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83288:	b21b      	sxth	r3, r3
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   8328a:	440a      	add	r2, r1
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   8328c:	440b      	add	r3, r1
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   8328e:	f892 8040 	ldrb.w	r8, [r2, #64]	; 0x40
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83292:	f893 7040 	ldrb.w	r7, [r3, #64]	; 0x40
   83296:	2601      	movs	r6, #1
   83298:	2500      	movs	r5, #0
                gpio_configure_pin(mpsse_state.pins[i], PIO_INPUT);
   8329a:	f8df 9124 	ldr.w	r9, [pc, #292]	; 833c0 <mpsse_handle_special+0x190>
                        gpio_toggle_pin(mpsse_state.pins[0]); //ignore idle high clock
   8329e:	f8df a124 	ldr.w	sl, [pc, #292]	; 833c4 <mpsse_handle_special+0x194>
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   832a2:	fa5f f888 	uxtb.w	r8, r8
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   832a6:	f8a4 0001 	strh.w	r0, [r4, #1]
   832aa:	b2ff      	uxtb	r7, r7
        for (uint8_t i = 0; i < 8; i++) {
   832ac:	e00e      	b.n	832cc <mpsse_handle_special+0x9c>
				if (value & (1 << i) || (!mpsse_state.swd_mode)) {
   832ae:	07d3      	lsls	r3, r2, #31
   832b0:	d402      	bmi.n	832b8 <mpsse_handle_special+0x88>
   832b2:	7c23      	ldrb	r3, [r4, #16]
   832b4:	2b00      	cmp	r3, #0
   832b6:	d16f      	bne.n	83398 <mpsse_handle_special+0x168>
					gpio_configure_pin(mpsse_state.pins[i], PIO_OUTPUT_1);
   832b8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   832bc:	47c8      	blx	r9
                    if (i == 0) 
   832be:	2d00      	cmp	r5, #0
   832c0:	d071      	beq.n	833a6 <mpsse_handle_special+0x176>
        for (uint8_t i = 0; i < 8; i++) {
   832c2:	2e08      	cmp	r6, #8
   832c4:	d065      	beq.n	83392 <mpsse_handle_special+0x162>
   832c6:	3601      	adds	r6, #1
   832c8:	3501      	adds	r5, #1
   832ca:	b2f6      	uxtb	r6, r6
            if (!mpsse_state.pins[i])
   832cc:	1d2b      	adds	r3, r5, #4
   832ce:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   832d2:	f8d3 0007 	ldr.w	r0, [r3, #7]
				if (value & (1 << i) || (!mpsse_state.swd_mode)) {
   832d6:	fa48 f205 	asr.w	r2, r8, r5
            if (direction & (1 << i)) {
   832da:	fa47 f305 	asr.w	r3, r7, r5
            if (!mpsse_state.pins[i])
   832de:	2800      	cmp	r0, #0
   832e0:	d0ef      	beq.n	832c2 <mpsse_handle_special+0x92>
            if (direction & (1 << i)) {
   832e2:	07d9      	lsls	r1, r3, #31
   832e4:	d4e3      	bmi.n	832ae <mpsse_handle_special+0x7e>
                gpio_configure_pin(mpsse_state.pins[i], PIO_INPUT);
   832e6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   832ea:	47c8      	blx	r9
   832ec:	e7e9      	b.n	832c2 <mpsse_handle_special+0x92>
        MPSSE_RX_BUFFER[2] = 0x01;
   832ee:	2501      	movs	r5, #1
        mpsse_state.cur_cmd.u8 = 0x00;
   832f0:	2100      	movs	r1, #0
        mpsse_state.rx_bytes = 3;
   832f2:	2303      	movs	r3, #3
        MPSSE_RX_BUFFER[2] = 0x01;
   832f4:	4a30      	ldr	r2, [pc, #192]	; (833b8 <mpsse_handle_special+0x188>)
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   832f6:	482f      	ldr	r0, [pc, #188]	; (833b4 <mpsse_handle_special+0x184>)
   832f8:	4e30      	ldr	r6, [pc, #192]	; (833bc <mpsse_handle_special+0x18c>)
   832fa:	9000      	str	r0, [sp, #0]
        MPSSE_RX_BUFFER[2] = 0x01;
   832fc:	7095      	strb	r5, [r2, #2]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   832fe:	2085      	movs	r0, #133	; 0x85
        mpsse_state.cur_cmd.u8 = 0x00;
   83300:	7021      	strb	r1, [r4, #0]
        mpsse_state.rx_bytes = 3;
   83302:	7163      	strb	r3, [r4, #5]
        mpsse_state.txn_lock = 1;
   83304:	72a5      	strb	r5, [r4, #10]
        mpsse_state.rx_bytes = 3;
   83306:	71a1      	strb	r1, [r4, #6]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   83308:	47b0      	blx	r6
}
   8330a:	b002      	add	sp, #8
   8330c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        mpsse_state.loopback_en = 1;
   83310:	2201      	movs	r2, #1
        mpsse_state.cur_cmd.u8 = 0x00;
   83312:	2300      	movs	r3, #0
        mpsse_state.loopback_en = 1;
   83314:	7262      	strb	r2, [r4, #9]
        mpsse_state.cur_cmd.u8 = 0x00;
   83316:	7023      	strb	r3, [r4, #0]
}
   83318:	b002      	add	sp, #8
   8331a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        mpsse_state.loopback_en = 0;
   8331e:	2300      	movs	r3, #0
   83320:	7263      	strb	r3, [r4, #9]
        mpsse_state.cur_cmd.u8 = 0x00;
   83322:	7023      	strb	r3, [r4, #0]
}
   83324:	b002      	add	sp, #8
   83326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        mpsse_state.cur_cmd.u8 = 0x00;
   8332a:	2200      	movs	r2, #0
        mpsse_state.tx_idx += 2;
   8332c:	f9b4 3001 	ldrsh.w	r3, [r4, #1]
        mpsse_state.cur_cmd.u8 = 0x00;
   83330:	7022      	strb	r2, [r4, #0]
        mpsse_state.tx_idx += 2;
   83332:	3302      	adds	r3, #2
   83334:	f8a4 3001 	strh.w	r3, [r4, #1]
}
   83338:	b002      	add	sp, #8
   8333a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        mpsse_state.cur_cmd.u8 = 0x00;
   8333e:	2100      	movs	r1, #0
        mpsse_state.rx_bytes = 3;
   83340:	2303      	movs	r3, #3
        mpsse_state.txn_lock = 1;
   83342:	2601      	movs	r6, #1
        MPSSE_RX_BUFFER[2] = 0x00;
   83344:	4a1c      	ldr	r2, [pc, #112]	; (833b8 <mpsse_handle_special+0x188>)
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   83346:	481b      	ldr	r0, [pc, #108]	; (833b4 <mpsse_handle_special+0x184>)
   83348:	4d1c      	ldr	r5, [pc, #112]	; (833bc <mpsse_handle_special+0x18c>)
   8334a:	9000      	str	r0, [sp, #0]
        MPSSE_RX_BUFFER[2] = 0x00;
   8334c:	7091      	strb	r1, [r2, #2]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   8334e:	2085      	movs	r0, #133	; 0x85
        mpsse_state.cur_cmd.u8 = 0x00;
   83350:	7021      	strb	r1, [r4, #0]
        mpsse_state.txn_lock = 1;
   83352:	72a6      	strb	r6, [r4, #10]
        mpsse_state.rx_bytes = 3;
   83354:	7163      	strb	r3, [r4, #5]
   83356:	71a1      	strb	r1, [r4, #6]
        udd_ep_run(UDI_MPSSE_EP_BULK_IN, 0, MPSSE_RX_BUFFER, mpsse_state.rx_bytes, mpsse_vendor_bulk_in_received);
   83358:	47a8      	blx	r5
}
   8335a:	b002      	add	sp, #8
   8335c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   83360:	f9b4 2001 	ldrsh.w	r2, [r4, #1]
   83364:	f9b4 1003 	ldrsh.w	r1, [r4, #3]
   83368:	b293      	uxth	r3, r2
   8336a:	1ac9      	subs	r1, r1, r3
        if (mpsse_tx_buffer_remaining() < 2) {
   8336c:	b209      	sxth	r1, r1
   8336e:	2901      	cmp	r1, #1
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   83370:	b212      	sxth	r2, r2
        if (mpsse_tx_buffer_remaining() < 2) {
   83372:	dd15      	ble.n	833a0 <mpsse_handle_special+0x170>
        mpsse_state.cur_cmd.u8 = 0x00;
   83374:	2000      	movs	r0, #0
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83376:	4910      	ldr	r1, [pc, #64]	; (833b8 <mpsse_handle_special+0x188>)
        mpsse_state.cur_cmd.u8 = 0x00;
   83378:	7020      	strb	r0, [r4, #0]
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   8337a:	440a      	add	r2, r1
   8337c:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83380:	1c9a      	adds	r2, r3, #2
        value = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83382:	3301      	adds	r3, #1
        direction = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83384:	b21b      	sxth	r3, r3
   83386:	440b      	add	r3, r1
   83388:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   8338c:	f8a4 2001 	strh.w	r2, [r4, #1]
        break;
   83390:	e769      	b.n	83266 <mpsse_handle_special+0x36>
        mpsse_state.cur_cmd.u8 = 0x00;
   83392:	2300      	movs	r3, #0
   83394:	7023      	strb	r3, [r4, #0]
        break;
   83396:	e766      	b.n	83266 <mpsse_handle_special+0x36>
					gpio_configure_pin(mpsse_state.pins[i], PIO_OUTPUT_0);
   83398:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8339c:	47c8      	blx	r9
   8339e:	e790      	b.n	832c2 <mpsse_handle_special+0x92>
            mpsse_state.tx_req = 1;
   833a0:	2301      	movs	r3, #1
   833a2:	73e3      	strb	r3, [r4, #15]
            return;
   833a4:	e75f      	b.n	83266 <mpsse_handle_special+0x36>
                        gpio_toggle_pin(mpsse_state.pins[0]); //ignore idle high clock
   833a6:	f8d4 0017 	ldr.w	r0, [r4, #23]
   833aa:	47d0      	blx	sl
        for (uint8_t i = 0; i < 8; i++) {
   833ac:	e78b      	b.n	832c6 <mpsse_handle_special+0x96>
   833ae:	bf00      	nop
   833b0:	20070944 	.word	0x20070944
   833b4:	00082b99 	.word	0x00082b99
   833b8:	20074970 	.word	0x20074970
   833bc:	000854b1 	.word	0x000854b1
   833c0:	00084655 	.word	0x00084655
   833c4:	00084631 	.word	0x00084631

000833c8 <mpsse_register_handlers>:

void mpsse_register_handlers(void)
{
   833c8:	b510      	push	{r4, lr}
    naeusb_add_out_handler(mpsse_setup_out_received);
   833ca:	4b04      	ldr	r3, [pc, #16]	; (833dc <mpsse_register_handlers+0x14>)
   833cc:	4804      	ldr	r0, [pc, #16]	; (833e0 <mpsse_register_handlers+0x18>)
   833ce:	4798      	blx	r3
    naeusb_add_in_handler(mpsse_setup_in_received);
}
   833d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    naeusb_add_in_handler(mpsse_setup_in_received);
   833d4:	4803      	ldr	r0, [pc, #12]	; (833e4 <mpsse_register_handlers+0x1c>)
   833d6:	4b04      	ldr	r3, [pc, #16]	; (833e8 <mpsse_register_handlers+0x20>)
   833d8:	4718      	bx	r3
   833da:	bf00      	nop
   833dc:	00081e79 	.word	0x00081e79
   833e0:	000829f9 	.word	0x000829f9
   833e4:	000828fd 	.word	0x000828fd
   833e8:	00081e51 	.word	0x00081e51

000833ec <MPSSE_main_sendrecv_byte>:

// TODO: do writing here as we have time
// TODO: if we need to implement adaptive clock, should do in a GPIO based ISR I think?
void MPSSE_main_sendrecv_byte(void)
{
   833ec:	b530      	push	{r4, r5, lr}
	if (!mpsse_state.enabled) return;
   833ee:	4c30      	ldr	r4, [pc, #192]	; (834b0 <MPSSE_main_sendrecv_byte+0xc4>)
{
   833f0:	b083      	sub	sp, #12
	if (!mpsse_state.enabled) return;
   833f2:	7ca3      	ldrb	r3, [r4, #18]
   833f4:	2b00      	cmp	r3, #0
   833f6:	d04d      	beq.n	83494 <MPSSE_main_sendrecv_byte+0xa8>

    if (mpsse_state.txn_lock) {
   833f8:	7aa3      	ldrb	r3, [r4, #10]
   833fa:	2b00      	cmp	r3, #0
   833fc:	d14a      	bne.n	83494 <MPSSE_main_sendrecv_byte+0xa8>
        // waiting on a USB transaction to/from the PC, so wait for that to be done
        // before doing anything else
        return;
    }

    if (mpsse_state.tx_req) {
   833fe:	7be1      	ldrb	r1, [r4, #15]
   83400:	bb09      	cbnz	r1, 83446 <MPSSE_main_sendrecv_byte+0x5a>
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   83402:	f9b4 2001 	ldrsh.w	r2, [r4, #1]
   83406:	f9b4 3003 	ldrsh.w	r3, [r4, #3]
   8340a:	b290      	uxth	r0, r2
   8340c:	1a1b      	subs	r3, r3, r0
            mpsse_vendor_bulk_out_received);
        return;
    }

    // we're at end of the TX buffer, so read more in
    if (mpsse_tx_buffer_remaining() <= 0) {
   8340e:	b21b      	sxth	r3, r3
   83410:	2b00      	cmp	r3, #0
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   83412:	b212      	sxth	r2, r2
    if (mpsse_tx_buffer_remaining() <= 0) {
   83414:	dd40      	ble.n	83498 <MPSSE_main_sendrecv_byte+0xac>
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
        return;
    }

    // finished processing the last command, so read a new one
    if (mpsse_state.cur_cmd.u8 == 0x00) {
   83416:	7823      	ldrb	r3, [r4, #0]
   83418:	b96b      	cbnz	r3, 83436 <MPSSE_main_sendrecv_byte+0x4a>
        mpsse_state.cur_cmd.u8 = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   8341a:	4b26      	ldr	r3, [pc, #152]	; (834b4 <MPSSE_main_sendrecv_byte+0xc8>)
        mpsse_state.n_processed_cmds++;
   8341c:	f8d4 100b 	ldr.w	r1, [r4, #11]
        mpsse_state.cur_cmd.u8 = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   83420:	441a      	add	r2, r3
   83422:	f892 3040 	ldrb.w	r3, [r2, #64]	; 0x40
   83426:	3001      	adds	r0, #1
   83428:	b2db      	uxtb	r3, r3
        mpsse_state.n_processed_cmds++;
   8342a:	1c4a      	adds	r2, r1, #1
        mpsse_state.cur_cmd.u8 = MPSSE_TX_BUFFER[mpsse_state.tx_idx++];
   8342c:	f8a4 0001 	strh.w	r0, [r4, #1]
   83430:	7023      	strb	r3, [r4, #0]
        mpsse_state.n_processed_cmds++;
   83432:	f8c4 200b 	str.w	r2, [r4, #11]
    }

    if (mpsse_state.cur_cmd.b.special) {
   83436:	061b      	lsls	r3, r3, #24
        mpsse_handle_special();
   83438:	bf4c      	ite	mi
   8343a:	4b1f      	ldrmi	r3, [pc, #124]	; (834b8 <MPSSE_main_sendrecv_byte+0xcc>)
    } else {
        mpsse_handle_transmission();
   8343c:	4b1f      	ldrpl	r3, [pc, #124]	; (834bc <MPSSE_main_sendrecv_byte+0xd0>)
    }

   8343e:	b003      	add	sp, #12
   83440:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        mpsse_handle_transmission();
   83444:	4718      	bx	r3
    return mpsse_state.tx_bytes - mpsse_state.tx_idx;
   83446:	f9b4 e001 	ldrsh.w	lr, [r4, #1]
   8344a:	f9b4 c003 	ldrsh.w	ip, [r4, #3]
   8344e:	ebac 0c0e 	sub.w	ip, ip, lr
        for (uint16_t i = 0; i < (mpsse_tx_buffer_remaining()); i++) {
   83452:	fa0f fc8c 	sxth.w	ip, ip
   83456:	f1bc 0f00 	cmp.w	ip, #0
   8345a:	dd0f      	ble.n	8347c <MPSSE_main_sendrecv_byte+0x90>
   8345c:	461a      	mov	r2, r3
   8345e:	4815      	ldr	r0, [pc, #84]	; (834b4 <MPSSE_main_sendrecv_byte+0xc8>)
            MPSSE_TX_BUFFER[i] = MPSSE_TX_BUFFER[i+mpsse_state.tx_idx];
   83460:	eb0e 0102 	add.w	r1, lr, r2
   83464:	4401      	add	r1, r0
   83466:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
        for (uint16_t i = 0; i < (mpsse_tx_buffer_remaining()); i++) {
   8346a:	3301      	adds	r3, #1
   8346c:	b29b      	uxth	r3, r3
            MPSSE_TX_BUFFER[i] = MPSSE_TX_BUFFER[i+mpsse_state.tx_idx];
   8346e:	4402      	add	r2, r0
   83470:	b2c9      	uxtb	r1, r1
        for (uint16_t i = 0; i < (mpsse_tx_buffer_remaining()); i++) {
   83472:	4563      	cmp	r3, ip
            MPSSE_TX_BUFFER[i] = MPSSE_TX_BUFFER[i+mpsse_state.tx_idx];
   83474:	f882 1040 	strb.w	r1, [r2, #64]	; 0x40
        for (uint16_t i = 0; i < (mpsse_tx_buffer_remaining()); i++) {
   83478:	461a      	mov	r2, r3
   8347a:	dbf1      	blt.n	83460 <MPSSE_main_sendrecv_byte+0x74>
        mpsse_state.txn_lock = 1;
   8347c:	f04f 0c01 	mov.w	ip, #1
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, 
   83480:	490f      	ldr	r1, [pc, #60]	; (834c0 <MPSSE_main_sendrecv_byte+0xd4>)
   83482:	2340      	movs	r3, #64	; 0x40
   83484:	9100      	str	r1, [sp, #0]
   83486:	2006      	movs	r0, #6
   83488:	2100      	movs	r1, #0
   8348a:	4a0e      	ldr	r2, [pc, #56]	; (834c4 <MPSSE_main_sendrecv_byte+0xd8>)
   8348c:	4d0e      	ldr	r5, [pc, #56]	; (834c8 <MPSSE_main_sendrecv_byte+0xdc>)
        mpsse_state.txn_lock = 1;
   8348e:	f884 c00a 	strb.w	ip, [r4, #10]
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, 
   83492:	47a8      	blx	r5
   83494:	b003      	add	sp, #12
   83496:	bd30      	pop	{r4, r5, pc}
        mpsse_state.txn_lock = 1;
   83498:	f04f 0c01 	mov.w	ip, #1
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
   8349c:	4a08      	ldr	r2, [pc, #32]	; (834c0 <MPSSE_main_sendrecv_byte+0xd4>)
   8349e:	2340      	movs	r3, #64	; 0x40
   834a0:	9200      	str	r2, [sp, #0]
   834a2:	4d09      	ldr	r5, [pc, #36]	; (834c8 <MPSSE_main_sendrecv_byte+0xdc>)
   834a4:	4a09      	ldr	r2, [pc, #36]	; (834cc <MPSSE_main_sendrecv_byte+0xe0>)
   834a6:	2006      	movs	r0, #6
        mpsse_state.txn_lock = 1;
   834a8:	f884 c00a 	strb.w	ip, [r4, #10]
        udd_ep_run(UDI_MPSSE_EP_BULK_OUT, 0, MPSSE_TX_BUFFER, sizeof(MPSSE_TX_BUFFER_BAK), mpsse_vendor_bulk_out_received);
   834ac:	47a8      	blx	r5
        return;
   834ae:	e7f1      	b.n	83494 <MPSSE_main_sendrecv_byte+0xa8>
   834b0:	20070944 	.word	0x20070944
   834b4:	20074970 	.word	0x20074970
   834b8:	00083231 	.word	0x00083231
   834bc:	000830b9 	.word	0x000830b9
   834c0:	00082ae9 	.word	0x00082ae9
   834c4:	20074a00 	.word	0x20074a00
   834c8:	000854b1 	.word	0x000854b1
   834cc:	200749b0 	.word	0x200749b0

000834d0 <fpga_target_setup_out_received>:
	}
}

bool fpga_target_setup_out_received(void)
{
    blockendpoint_usage = bep_emem;
   834d0:	2000      	movs	r0, #0
    switch(udd_g_ctrlreq.req.bRequest){
   834d2:	4a29      	ldr	r2, [pc, #164]	; (83578 <fpga_target_setup_out_received+0xa8>)
    blockendpoint_usage = bep_emem;
   834d4:	4929      	ldr	r1, [pc, #164]	; (8357c <fpga_target_setup_out_received+0xac>)
    switch(udd_g_ctrlreq.req.bRequest){
   834d6:	7853      	ldrb	r3, [r2, #1]
    blockendpoint_usage = bep_emem;
   834d8:	7008      	strb	r0, [r1, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   834da:	3b10      	subs	r3, #16
   834dc:	2b25      	cmp	r3, #37	; 0x25
   834de:	d818      	bhi.n	83512 <fpga_target_setup_out_received+0x42>
   834e0:	e8df f003 	tbb	[pc, r3]
   834e4:	2925211d 	.word	0x2925211d
   834e8:	17312d17 	.word	0x17312d17
   834ec:	17171717 	.word	0x17171717
   834f0:	17171717 	.word	0x17171717
   834f4:	17131717 	.word	0x17131717
   834f8:	17171717 	.word	0x17171717
   834fc:	17171717 	.word	0x17171717
   83500:	17171717 	.word	0x17171717
   83504:	3d173935 	.word	0x3d173935
   83508:	1941      	.short	0x1941
		case REQ_SAM_CFG:
			0;
			uint16_t wVal = udd_g_ctrlreq.req.wValue & 0xFF;
   8350a:	7893      	ldrb	r3, [r2, #2]
			if ((wVal > 0x03) && (wVal < 0x10)) {
   8350c:	3b04      	subs	r3, #4
   8350e:	2b0b      	cmp	r3, #11
   83510:	d92d      	bls.n	8356e <fpga_target_setup_out_received+0x9e>
				udd_g_ctrlreq.callback = fpga_target_sam_cfg_out;
				return true;
			} else {
				return false;
   83512:	2000      	movs	r0, #0
            return true;

        default:
            return false;
    }					
}
   83514:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_spi1util;
   83516:	4b1a      	ldr	r3, [pc, #104]	; (83580 <fpga_target_setup_out_received+0xb0>)
            return true;
   83518:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_spi1util;
   8351a:	6113      	str	r3, [r2, #16]
            return true;
   8351c:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   8351e:	4b19      	ldr	r3, [pc, #100]	; (83584 <fpga_target_setup_out_received+0xb4>)
            return true;
   83520:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   83522:	6113      	str	r3, [r2, #16]
            return true;
   83524:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   83526:	4b18      	ldr	r3, [pc, #96]	; (83588 <fpga_target_setup_out_received+0xb8>)
            return true;
   83528:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   8352a:	6113      	str	r3, [r2, #16]
            return true;
   8352c:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   8352e:	4b17      	ldr	r3, [pc, #92]	; (8358c <fpga_target_setup_out_received+0xbc>)
            return true;	
   83530:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   83532:	6113      	str	r3, [r2, #16]
            return true;	
   83534:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   83536:	4b16      	ldr	r3, [pc, #88]	; (83590 <fpga_target_setup_out_received+0xc0>)
            return true;		
   83538:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   8353a:	6113      	str	r3, [r2, #16]
            return true;		
   8353c:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl_sam3u;
   8353e:	4b15      	ldr	r3, [pc, #84]	; (83594 <fpga_target_setup_out_received+0xc4>)
            return true;		
   83540:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl_sam3u;
   83542:	6113      	str	r3, [r2, #16]
            return true;		
   83544:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   83546:	4b14      	ldr	r3, [pc, #80]	; (83598 <fpga_target_setup_out_received+0xc8>)
            return true;
   83548:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   8354a:	6113      	str	r3, [r2, #16]
            return true;
   8354c:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_cdce906_cb;
   8354e:	4b13      	ldr	r3, [pc, #76]	; (8359c <fpga_target_setup_out_received+0xcc>)
            return true;
   83550:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_cdce906_cb;
   83552:	6113      	str	r3, [r2, #16]
            return true;
   83554:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_vccint_cb;
   83556:	4b12      	ldr	r3, [pc, #72]	; (835a0 <fpga_target_setup_out_received+0xd0>)
            return true;
   83558:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_vccint_cb;
   8355a:	6113      	str	r3, [r2, #16]
            return true;
   8355c:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_progfpgaspi;
   8355e:	4b11      	ldr	r3, [pc, #68]	; (835a4 <fpga_target_setup_out_received+0xd4>)
			return true;
   83560:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_progfpgaspi;
   83562:	6113      	str	r3, [r2, #16]
			return true;
   83564:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_fpgaioutil;
   83566:	4b10      	ldr	r3, [pc, #64]	; (835a8 <fpga_target_setup_out_received+0xd8>)
            return true;
   83568:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_fpgaioutil;
   8356a:	6113      	str	r3, [r2, #16]
            return true;
   8356c:	4770      	bx	lr
				udd_g_ctrlreq.callback = fpga_target_sam_cfg_out;
   8356e:	4b0f      	ldr	r3, [pc, #60]	; (835ac <fpga_target_setup_out_received+0xdc>)
				return true;
   83570:	2001      	movs	r0, #1
				udd_g_ctrlreq.callback = fpga_target_sam_cfg_out;
   83572:	6113      	str	r3, [r2, #16]
				return true;
   83574:	4770      	bx	lr
   83576:	bf00      	nop
   83578:	200723a4 	.word	0x200723a4
   8357c:	20071db6 	.word	0x20071db6
   83580:	00083b35 	.word	0x00083b35
   83584:	00083645 	.word	0x00083645
   83588:	00083625 	.word	0x00083625
   8358c:	000835b1 	.word	0x000835b1
   83590:	000835dd 	.word	0x000835dd
   83594:	00083675 	.word	0x00083675
   83598:	00083985 	.word	0x00083985
   8359c:	00083c35 	.word	0x00083c35
   835a0:	000838f5 	.word	0x000838f5
   835a4:	00083bb5 	.word	0x00083bb5
   835a8:	00083a29 	.word	0x00083a29
   835ac:	000839d5 	.word	0x000839d5

000835b0 <ctrl_readmem_ctrl>:
void ctrl_readmem_ctrl(void){
   835b0:	b538      	push	{r3, r4, r5, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   835b2:	4b06      	ldr	r3, [pc, #24]	; (835cc <ctrl_readmem_ctrl+0x1c>)
    FPGA_setlock(fpga_ctrlmem);
   835b4:	4a06      	ldr	r2, [pc, #24]	; (835d0 <ctrl_readmem_ctrl+0x20>)
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   835b6:	685c      	ldr	r4, [r3, #4]
    FPGA_setlock(fpga_ctrlmem);
   835b8:	2005      	movs	r0, #5
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   835ba:	681d      	ldr	r5, [r3, #0]
    FPGA_setlock(fpga_ctrlmem);
   835bc:	4790      	blx	r2
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS + address;
   835be:	4a05      	ldr	r2, [pc, #20]	; (835d4 <ctrl_readmem_ctrl+0x24>)
    ctrlmemread_size = buflen;
   835c0:	4b05      	ldr	r3, [pc, #20]	; (835d8 <ctrl_readmem_ctrl+0x28>)
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS + address;
   835c2:	f104 44c0 	add.w	r4, r4, #1610612736	; 0x60000000
   835c6:	6014      	str	r4, [r2, #0]
    ctrlmemread_size = buflen;
   835c8:	601d      	str	r5, [r3, #0]
}
   835ca:	bd38      	pop	{r3, r4, r5, pc}
   835cc:	200716ac 	.word	0x200716ac
   835d0:	00083cb5 	.word	0x00083cb5
   835d4:	20071dc0 	.word	0x20071dc0
   835d8:	20071dc4 	.word	0x20071dc4

000835dc <ctrl_writemem_ctrl>:
void ctrl_writemem_ctrl(void){
   835dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   835e0:	4f0d      	ldr	r7, [pc, #52]	; (83618 <ctrl_writemem_ctrl+0x3c>)
    FPGA_setlock(fpga_generic);
   835e2:	2001      	movs	r0, #1
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   835e4:	683c      	ldr	r4, [r7, #0]
    FPGA_setlock(fpga_generic);
   835e6:	4e0d      	ldr	r6, [pc, #52]	; (8361c <ctrl_writemem_ctrl+0x40>)
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   835e8:	687d      	ldr	r5, [r7, #4]
    FPGA_setlock(fpga_generic);
   835ea:	47b0      	blx	r6
    for(unsigned int i = 0; i < buflen; i++){
   835ec:	b174      	cbz	r4, 8360c <ctrl_writemem_ctrl+0x30>
   835ee:	eb07 0c04 	add.w	ip, r7, r4
   835f2:	1fec      	subs	r4, r5, #7
   835f4:	4d0a      	ldr	r5, [pc, #40]	; (83620 <ctrl_writemem_ctrl+0x44>)
   835f6:	1dfb      	adds	r3, r7, #7
        xram[i+address] = ctrlbuf_payload[i];
   835f8:	1be4      	subs	r4, r4, r7
   835fa:	f10c 0c07 	add.w	ip, ip, #7
   835fe:	18e2      	adds	r2, r4, r3
   83600:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   83604:	6829      	ldr	r1, [r5, #0]
    for(unsigned int i = 0; i < buflen; i++){
   83606:	4563      	cmp	r3, ip
        xram[i+address] = ctrlbuf_payload[i];
   83608:	5488      	strb	r0, [r1, r2]
    for(unsigned int i = 0; i < buflen; i++){
   8360a:	d1f8      	bne.n	835fe <ctrl_writemem_ctrl+0x22>
    FPGA_setlock(fpga_unlocked);
   8360c:	4633      	mov	r3, r6
}
   8360e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    FPGA_setlock(fpga_unlocked);
   83612:	2000      	movs	r0, #0
   83614:	4718      	bx	r3
   83616:	bf00      	nop
   83618:	200716ac 	.word	0x200716ac
   8361c:	00083cb5 	.word	0x00083cb5
   83620:	20070990 	.word	0x20070990

00083624 <ctrl_writemem_bulk>:
void ctrl_writemem_bulk(void){
   83624:	b508      	push	{r3, lr}
    FPGA_setlock(fpga_blockout);
   83626:	2004      	movs	r0, #4
   83628:	4b03      	ldr	r3, [pc, #12]	; (83638 <ctrl_writemem_bulk+0x14>)
   8362a:	4798      	blx	r3
    bulk_fpga_write_addr = *(CTRLBUFFER_WORDPTR + 1);
   8362c:	4a03      	ldr	r2, [pc, #12]	; (8363c <ctrl_writemem_bulk+0x18>)
   8362e:	4b04      	ldr	r3, [pc, #16]	; (83640 <ctrl_writemem_bulk+0x1c>)
   83630:	6852      	ldr	r2, [r2, #4]
   83632:	601a      	str	r2, [r3, #0]
}
   83634:	bd08      	pop	{r3, pc}
   83636:	bf00      	nop
   83638:	00083cb5 	.word	0x00083cb5
   8363c:	200716ac 	.word	0x200716ac
   83640:	20071db8 	.word	0x20071db8

00083644 <ctrl_readmem_bulk>:
void ctrl_readmem_bulk(void){
   83644:	b570      	push	{r4, r5, r6, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);	
   83646:	4b07      	ldr	r3, [pc, #28]	; (83664 <ctrl_readmem_bulk+0x20>)
    FPGA_setlock(fpga_blockin);
   83648:	2002      	movs	r0, #2
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   8364a:	e9d3 5400 	ldrd	r5, r4, [r3]
    FPGA_setlock(fpga_blockin);
   8364e:	4b06      	ldr	r3, [pc, #24]	; (83668 <ctrl_readmem_bulk+0x24>)
   83650:	4798      	blx	r3
    udi_vendor_bulk_in_run(
   83652:	4629      	mov	r1, r5
   83654:	f104 40c0 	add.w	r0, r4, #1610612736	; 0x60000000
   83658:	4a04      	ldr	r2, [pc, #16]	; (8366c <ctrl_readmem_bulk+0x28>)
   8365a:	4b05      	ldr	r3, [pc, #20]	; (83670 <ctrl_readmem_bulk+0x2c>)
}
   8365c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    udi_vendor_bulk_in_run(
   83660:	4718      	bx	r3
   83662:	bf00      	nop
   83664:	200716ac 	.word	0x200716ac
   83668:	00083cb5 	.word	0x00083cb5
   8366c:	00083961 	.word	0x00083961
   83670:	000844d9 	.word	0x000844d9

00083674 <ctrl_writemem_ctrl_sam3u>:
void ctrl_writemem_ctrl_sam3u(void){
   83674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR) - 4; // remove the first 4 bytes of the payload who contain the flags
   83678:	492c      	ldr	r1, [pc, #176]	; (8372c <ctrl_writemem_ctrl_sam3u+0xb8>)
void ctrl_writemem_ctrl_sam3u(void){
   8367a:	b083      	sub	sp, #12
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   8367c:	e9d1 2300 	ldrd	r2, r3, [r1]
    for(unsigned int i = 0; i < buflen; i++){
   83680:	3a04      	subs	r2, #4
    uint32_t flags = *(CTRLBUFFER_WORDPTR + 2);
   83682:	688e      	ldr	r6, [r1, #8]
    for(unsigned int i = 0; i < buflen; i++){
   83684:	d004      	beq.n	83690 <ctrl_writemem_ctrl_sam3u+0x1c>
        sam3u_mem_b[i+address] = ctrlbuf_payload[i];
   83686:	482a      	ldr	r0, [pc, #168]	; (83730 <ctrl_writemem_ctrl_sam3u+0xbc>)
   83688:	310c      	adds	r1, #12
   8368a:	4418      	add	r0, r3
   8368c:	4b29      	ldr	r3, [pc, #164]	; (83734 <ctrl_writemem_ctrl_sam3u+0xc0>)
   8368e:	4798      	blx	r3
    if ( flags & 0x1 ){ // encryptions have been requested
   83690:	07f3      	lsls	r3, r6, #31
   83692:	d522      	bpl.n	836da <ctrl_writemem_ctrl_sam3u+0x66>
        uint32_t seed = sam3u_mem[0]; // load the seed at addr 0
   83694:	4b26      	ldr	r3, [pc, #152]	; (83730 <ctrl_writemem_ctrl_sam3u+0xbc>)
        for(unsigned int b = 0; b < (flags >> 16); b++){
   83696:	0c37      	lsrs	r7, r6, #16
        uint32_t seed = sam3u_mem[0]; // load the seed at addr 0
   83698:	f8d3 8000 	ldr.w	r8, [r3]
        for(unsigned int b = 0; b < (flags >> 16); b++){
   8369c:	d01d      	beq.n	836da <ctrl_writemem_ctrl_sam3u+0x66>
   8369e:	2400      	movs	r4, #0
            if ((flags >> 1) & 0x1){ // write the key
   836a0:	f3c6 0340 	ubfx	r3, r6, #1, #1
   836a4:	4d24      	ldr	r5, [pc, #144]	; (83738 <ctrl_writemem_ctrl_sam3u+0xc4>)
   836a6:	f8df a094 	ldr.w	sl, [pc, #148]	; 8373c <ctrl_writemem_ctrl_sam3u+0xc8>
   836aa:	f8df 9094 	ldr.w	r9, [pc, #148]	; 83740 <ctrl_writemem_ctrl_sam3u+0xcc>
   836ae:	f8df b094 	ldr.w	fp, [pc, #148]	; 83744 <ctrl_writemem_ctrl_sam3u+0xd0>
   836b2:	9301      	str	r3, [sp, #4]
            if ((flags >> 2) & 0x1){ // write the pts
   836b4:	f3c6 0680 	ubfx	r6, r6, #2, #1
            FPGA_setlock(fpga_generic);
   836b8:	2001      	movs	r0, #1
   836ba:	47a8      	blx	r5
            if ((flags >> 1) & 0x1){ // write the key
   836bc:	9b01      	ldr	r3, [sp, #4]
   836be:	b97b      	cbnz	r3, 836e0 <ctrl_writemem_ctrl_sam3u+0x6c>
            if ((flags >> 2) & 0x1){ // write the pts
   836c0:	bb0e      	cbnz	r6, 83706 <ctrl_writemem_ctrl_sam3u+0x92>
            FPGA_setlock(fpga_unlocked);
   836c2:	2000      	movs	r0, #0
   836c4:	47a8      	blx	r5
            gpio_set_pin_high(FPGA_TRIGGER_GPIO);
   836c6:	204d      	movs	r0, #77	; 0x4d
   836c8:	47d0      	blx	sl
            delay_cycles(50);
   836ca:	2032      	movs	r0, #50	; 0x32
   836cc:	47c8      	blx	r9
        for(unsigned int b = 0; b < (flags >> 16); b++){
   836ce:	3401      	adds	r4, #1
            gpio_set_pin_low(FPGA_TRIGGER_GPIO);
   836d0:	204d      	movs	r0, #77	; 0x4d
   836d2:	4b1d      	ldr	r3, [pc, #116]	; (83748 <ctrl_writemem_ctrl_sam3u+0xd4>)
   836d4:	4798      	blx	r3
        for(unsigned int b = 0; b < (flags >> 16); b++){
   836d6:	42bc      	cmp	r4, r7
   836d8:	d1ee      	bne.n	836b8 <ctrl_writemem_ctrl_sam3u+0x44>
}
   836da:	b003      	add	sp, #12
   836dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   836e0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
                    xram[j+0x400+0x100] = seed >> 24;
   836e4:	f8db 0000 	ldr.w	r0, [fp]
   836e8:	ea4f 6c18 	mov.w	ip, r8, lsr #24
   836ec:	f800 c002 	strb.w	ip, [r0, r2]
                    seed += (seed*seed) | 0x5;
   836f0:	fb08 f008 	mul.w	r0, r8, r8
                for(unsigned int j = 0; j < 16; j++){
   836f4:	3201      	adds	r2, #1
                    seed += (seed*seed) | 0x5;
   836f6:	f040 0005 	orr.w	r0, r0, #5
                for(unsigned int j = 0; j < 16; j++){
   836fa:	f5b2 6fa2 	cmp.w	r2, #1296	; 0x510
                    seed += (seed*seed) | 0x5;
   836fe:	4480      	add	r8, r0
                for(unsigned int j = 0; j < 16; j++){
   83700:	d1f0      	bne.n	836e4 <ctrl_writemem_ctrl_sam3u+0x70>
            if ((flags >> 2) & 0x1){ // write the pts
   83702:	2e00      	cmp	r6, #0
   83704:	d0dd      	beq.n	836c2 <ctrl_writemem_ctrl_sam3u+0x4e>
   83706:	f44f 62c0 	mov.w	r2, #1536	; 0x600
                    xram[j+0x400+0x200] = seed >> 24;
   8370a:	f8db 0000 	ldr.w	r0, [fp]
   8370e:	ea4f 6c18 	mov.w	ip, r8, lsr #24
   83712:	f800 c002 	strb.w	ip, [r0, r2]
                    seed += (seed*seed) | 0x5;
   83716:	fb08 f008 	mul.w	r0, r8, r8
                for(unsigned int j = 0; j < 16; j++){
   8371a:	3201      	adds	r2, #1
                    seed += (seed*seed) | 0x5;
   8371c:	f040 0005 	orr.w	r0, r0, #5
                for(unsigned int j = 0; j < 16; j++){
   83720:	f5b2 6fc2 	cmp.w	r2, #1552	; 0x610
                    seed += (seed*seed) | 0x5;
   83724:	4480      	add	r8, r0
                for(unsigned int j = 0; j < 16; j++){
   83726:	d1f0      	bne.n	8370a <ctrl_writemem_ctrl_sam3u+0x96>
   83728:	e7cb      	b.n	836c2 <ctrl_writemem_ctrl_sam3u+0x4e>
   8372a:	bf00      	nop
   8372c:	200716ac 	.word	0x200716ac
   83730:	20071e08 	.word	0x20071e08
   83734:	00086d51 	.word	0x00086d51
   83738:	00083cb5 	.word	0x00083cb5
   8373c:	000845f9 	.word	0x000845f9
   83740:	200701b5 	.word	0x200701b5
   83744:	20070990 	.word	0x20070990
   83748:	00084615 	.word	0x00084615

0008374c <main_vendor_bulk_out_received>:
{
   8374c:	b570      	push	{r4, r5, r6, lr}
    if (UDD_EP_TRANSFER_OK != status) {
   8374e:	b9a8      	cbnz	r0, 8377c <main_vendor_bulk_out_received+0x30>
    if (blockendpoint_usage == bep_emem){
   83750:	4b18      	ldr	r3, [pc, #96]	; (837b4 <main_vendor_bulk_out_received+0x68>)
   83752:	781b      	ldrb	r3, [r3, #0]
   83754:	b9d3      	cbnz	r3, 8378c <main_vendor_bulk_out_received+0x40>
        for(unsigned int i = 0; i < nb_transfered; i++){
   83756:	b169      	cbz	r1, 83774 <main_vendor_bulk_out_received+0x28>
   83758:	4b17      	ldr	r3, [pc, #92]	; (837b8 <main_vendor_bulk_out_received+0x6c>)
   8375a:	4e18      	ldr	r6, [pc, #96]	; (837bc <main_vendor_bulk_out_received+0x70>)
   8375c:	4818      	ldr	r0, [pc, #96]	; (837c0 <main_vendor_bulk_out_received+0x74>)
   8375e:	4419      	add	r1, r3
            xram[bulk_fpga_write_addr++] = main_buf_loopback[i];
   83760:	6802      	ldr	r2, [r0, #0]
   83762:	f813 cb01 	ldrb.w	ip, [r3], #1
   83766:	6834      	ldr	r4, [r6, #0]
   83768:	1c55      	adds	r5, r2, #1
        for(unsigned int i = 0; i < nb_transfered; i++){
   8376a:	4299      	cmp	r1, r3
            xram[bulk_fpga_write_addr++] = main_buf_loopback[i];
   8376c:	6005      	str	r5, [r0, #0]
   8376e:	f804 c002 	strb.w	ip, [r4, r2]
        for(unsigned int i = 0; i < nb_transfered; i++){
   83772:	d1f5      	bne.n	83760 <main_vendor_bulk_out_received+0x14>
        if (FPGA_lockstatus() == fpga_blockout){
   83774:	4b13      	ldr	r3, [pc, #76]	; (837c4 <main_vendor_bulk_out_received+0x78>)
   83776:	4798      	blx	r3
   83778:	2804      	cmp	r0, #4
   8377a:	d016      	beq.n	837aa <main_vendor_bulk_out_received+0x5e>
}
   8377c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        udi_vendor_bulk_out_run(
   83780:	f44f 6180 	mov.w	r1, #1024	; 0x400
   83784:	4a10      	ldr	r2, [pc, #64]	; (837c8 <main_vendor_bulk_out_received+0x7c>)
   83786:	480c      	ldr	r0, [pc, #48]	; (837b8 <main_vendor_bulk_out_received+0x6c>)
   83788:	4b10      	ldr	r3, [pc, #64]	; (837cc <main_vendor_bulk_out_received+0x80>)
   8378a:	4718      	bx	r3
    } else if (blockendpoint_usage == bep_fpgabitstream){
   8378c:	2b0a      	cmp	r3, #10
   8378e:	d1f5      	bne.n	8377c <main_vendor_bulk_out_received+0x30>
        for(unsigned int i = 0; i < nb_transfered; i++){
   83790:	b139      	cbz	r1, 837a2 <main_vendor_bulk_out_received+0x56>
   83792:	4d09      	ldr	r5, [pc, #36]	; (837b8 <main_vendor_bulk_out_received+0x6c>)
   83794:	4e0e      	ldr	r6, [pc, #56]	; (837d0 <main_vendor_bulk_out_received+0x84>)
   83796:	194c      	adds	r4, r1, r5
            fpga_program_sendbyte(main_buf_loopback[i]);
   83798:	f815 0b01 	ldrb.w	r0, [r5], #1
   8379c:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   8379e:	42a5      	cmp	r5, r4
   837a0:	d1fa      	bne.n	83798 <main_vendor_bulk_out_received+0x4c>
        FPGA_CCLK_LOW();
   837a2:	2038      	movs	r0, #56	; 0x38
   837a4:	4b0b      	ldr	r3, [pc, #44]	; (837d4 <main_vendor_bulk_out_received+0x88>)
   837a6:	4798      	blx	r3
   837a8:	e7e8      	b.n	8377c <main_vendor_bulk_out_received+0x30>
            FPGA_setlock(fpga_unlocked);
   837aa:	4b0b      	ldr	r3, [pc, #44]	; (837d8 <main_vendor_bulk_out_received+0x8c>)
   837ac:	2000      	movs	r0, #0
   837ae:	4798      	blx	r3
   837b0:	e7e4      	b.n	8377c <main_vendor_bulk_out_received+0x30>
   837b2:	bf00      	nop
   837b4:	20071db6 	.word	0x20071db6
   837b8:	200716ec 	.word	0x200716ec
   837bc:	20070990 	.word	0x20070990
   837c0:	20071db8 	.word	0x20071db8
   837c4:	00083cf1 	.word	0x00083cf1
   837c8:	0008374d 	.word	0x0008374d
   837cc:	000844f9 	.word	0x000844f9
   837d0:	00083d75 	.word	0x00083d75
   837d4:	00084615 	.word	0x00084615
   837d8:	00083cb5 	.word	0x00083cb5

000837dc <fpga_target_setup_in_received>:
{
   837dc:	b570      	push	{r4, r5, r6, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   837de:	4c3a      	ldr	r4, [pc, #232]	; (838c8 <fpga_target_setup_in_received+0xec>)
   837e0:	7863      	ldrb	r3, [r4, #1]
   837e2:	3b12      	subs	r3, #18
   837e4:	2b23      	cmp	r3, #35	; 0x23
   837e6:	d813      	bhi.n	83810 <fpga_target_setup_in_received+0x34>
   837e8:	e8df f003 	tbb	[pc, r3]
   837ec:	2612121c 	.word	0x2612121c
   837f0:	12121212 	.word	0x12121212
   837f4:	12121212 	.word	0x12121212
   837f8:	12121212 	.word	0x12121212
   837fc:	12121212 	.word	0x12121212
   83800:	12121212 	.word	0x12121212
   83804:	12121212 	.word	0x12121212
   83808:	4a3e1212 	.word	0x4a3e1212
   8380c:	14605812 	.word	0x14605812
                return false;
   83810:	2000      	movs	r0, #0
}
   83812:	bd70      	pop	{r4, r5, r6, pc}
 			if (udd_g_ctrlreq.req.wLength > sizeof(spi1util_data_buffer))
   83814:	88e3      	ldrh	r3, [r4, #6]
   83816:	2b40      	cmp	r3, #64	; 0x40
   83818:	d8fa      	bhi.n	83810 <fpga_target_setup_in_received+0x34>
			udd_g_ctrlreq.payload = spi1util_data_buffer;
   8381a:	4a2c      	ldr	r2, [pc, #176]	; (838cc <fpga_target_setup_in_received+0xf0>)
			return true;
   8381c:	2001      	movs	r0, #1
			udd_g_ctrlreq.payload = spi1util_data_buffer;
   8381e:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   83820:	81a3      	strh	r3, [r4, #12]
}
   83822:	bd70      	pop	{r4, r5, r6, pc}
            ctrlmemread_size = 0;
   83824:	2200      	movs	r2, #0
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   83826:	4b2a      	ldr	r3, [pc, #168]	; (838d0 <fpga_target_setup_in_received+0xf4>)
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   83828:	492a      	ldr	r1, [pc, #168]	; (838d4 <fpga_target_setup_in_received+0xf8>)
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   8382a:	6818      	ldr	r0, [r3, #0]
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   8382c:	6809      	ldr	r1, [r1, #0]
            ctrlmemread_size = 0;
   8382e:	601a      	str	r2, [r3, #0]
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   83830:	81a0      	strh	r0, [r4, #12]
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   83832:	60a1      	str	r1, [r4, #8]
            return true;
   83834:	2001      	movs	r0, #1
}
   83836:	bd70      	pop	{r4, r5, r6, pc}
            respbuf[0] = FPGA_ISDONE();
   83838:	4e27      	ldr	r6, [pc, #156]	; (838d8 <fpga_target_setup_in_received+0xfc>)
   8383a:	2031      	movs	r0, #49	; 0x31
   8383c:	47b0      	blx	r6
   8383e:	4603      	mov	r3, r0
   83840:	3b00      	subs	r3, #0
   83842:	bf18      	it	ne
   83844:	2301      	movne	r3, #1
   83846:	4d25      	ldr	r5, [pc, #148]	; (838dc <fpga_target_setup_in_received+0x100>)
            respbuf[1] = FPGA_INITB_STATUS();
   83848:	2032      	movs	r0, #50	; 0x32
            respbuf[0] = FPGA_ISDONE();
   8384a:	702b      	strb	r3, [r5, #0]
            respbuf[1] = FPGA_INITB_STATUS();
   8384c:	47b0      	blx	r6
            respbuf[2] = 0;
   8384e:	2100      	movs	r1, #0
            respbuf[1] = FPGA_INITB_STATUS();
   83850:	4603      	mov	r3, r0
   83852:	1a5b      	subs	r3, r3, r1
            udd_g_ctrlreq.payload_size = 4;
   83854:	f04f 0204 	mov.w	r2, #4
            respbuf[1] = FPGA_INITB_STATUS();
   83858:	bf18      	it	ne
   8385a:	2301      	movne	r3, #1
            return true;
   8385c:	2001      	movs	r0, #1
            udd_g_ctrlreq.payload = respbuf;
   8385e:	60a5      	str	r5, [r4, #8]
            respbuf[2] = 0;
   83860:	8069      	strh	r1, [r5, #2]
            udd_g_ctrlreq.payload_size = 4;
   83862:	81a2      	strh	r2, [r4, #12]
            respbuf[1] = FPGA_INITB_STATUS();
   83864:	706b      	strb	r3, [r5, #1]
}
   83866:	bd70      	pop	{r4, r5, r6, pc}
            udd_g_ctrlreq.payload_size = 2;
   83868:	2202      	movs	r2, #2
            respbuf[0] = cdce906_status;
   8386a:	481d      	ldr	r0, [pc, #116]	; (838e0 <fpga_target_setup_in_received+0x104>)
            respbuf[1] = cdce906_data;
   8386c:	491d      	ldr	r1, [pc, #116]	; (838e4 <fpga_target_setup_in_received+0x108>)
            respbuf[0] = cdce906_status;
   8386e:	4b1b      	ldr	r3, [pc, #108]	; (838dc <fpga_target_setup_in_received+0x100>)
   83870:	7800      	ldrb	r0, [r0, #0]
            respbuf[1] = cdce906_data;
   83872:	7809      	ldrb	r1, [r1, #0]
            respbuf[0] = cdce906_status;
   83874:	7018      	strb	r0, [r3, #0]
            respbuf[1] = cdce906_data;
   83876:	7059      	strb	r1, [r3, #1]
            return true;
   83878:	2001      	movs	r0, #1
            udd_g_ctrlreq.payload = respbuf;
   8387a:	60a3      	str	r3, [r4, #8]
            udd_g_ctrlreq.payload_size = 2;
   8387c:	81a2      	strh	r2, [r4, #12]
}
   8387e:	bd70      	pop	{r4, r5, r6, pc}
            udd_g_ctrlreq.payload_size = 3;
   83880:	2103      	movs	r1, #3
            respbuf[1] = (uint8_t)vccint_setting;
   83882:	4b19      	ldr	r3, [pc, #100]	; (838e8 <fpga_target_setup_in_received+0x10c>)
            respbuf[0] = vccint_status;
   83884:	4819      	ldr	r0, [pc, #100]	; (838ec <fpga_target_setup_in_received+0x110>)
            respbuf[1] = (uint8_t)vccint_setting;
   83886:	881a      	ldrh	r2, [r3, #0]
            respbuf[0] = vccint_status;
   83888:	4b14      	ldr	r3, [pc, #80]	; (838dc <fpga_target_setup_in_received+0x100>)
   8388a:	7800      	ldrb	r0, [r0, #0]
            respbuf[1] = (uint8_t)vccint_setting;
   8388c:	705a      	strb	r2, [r3, #1]
            respbuf[2] = (uint8_t)(vccint_setting >> 8);
   8388e:	0a12      	lsrs	r2, r2, #8
            respbuf[0] = vccint_status;
   83890:	7018      	strb	r0, [r3, #0]
            respbuf[2] = (uint8_t)(vccint_setting >> 8);
   83892:	709a      	strb	r2, [r3, #2]
            return true;
   83894:	2001      	movs	r0, #1
            udd_g_ctrlreq.payload = respbuf;
   83896:	60a3      	str	r3, [r4, #8]
            udd_g_ctrlreq.payload_size = 3;
   83898:	81a1      	strh	r1, [r4, #12]
}
   8389a:	bd70      	pop	{r4, r5, r6, pc}
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer))
   8389c:	88e3      	ldrh	r3, [r4, #6]
   8389e:	2b40      	cmp	r3, #64	; 0x40
   838a0:	d8b6      	bhi.n	83810 <fpga_target_setup_in_received+0x34>
			udd_g_ctrlreq.payload = fpgaspi_data_buffer;
   838a2:	4a13      	ldr	r2, [pc, #76]	; (838f0 <fpga_target_setup_in_received+0x114>)
			return true;
   838a4:	2001      	movs	r0, #1
			udd_g_ctrlreq.payload = fpgaspi_data_buffer;
   838a6:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   838a8:	81a3      	strh	r3, [r4, #12]
}
   838aa:	bd70      	pop	{r4, r5, r6, pc}
			respbuf[0] = gpio_pin_is_high(pin);
   838ac:	78a0      	ldrb	r0, [r4, #2]
   838ae:	4b0a      	ldr	r3, [pc, #40]	; (838d8 <fpga_target_setup_in_received+0xfc>)
   838b0:	4798      	blx	r3
   838b2:	1e03      	subs	r3, r0, #0
   838b4:	bf18      	it	ne
   838b6:	2301      	movne	r3, #1
			udd_g_ctrlreq.payload_size = 1;
   838b8:	2101      	movs	r1, #1
			respbuf[0] = gpio_pin_is_high(pin);
   838ba:	4a08      	ldr	r2, [pc, #32]	; (838dc <fpga_target_setup_in_received+0x100>)
			return true;
   838bc:	4608      	mov	r0, r1
			respbuf[0] = gpio_pin_is_high(pin);
   838be:	7013      	strb	r3, [r2, #0]
			udd_g_ctrlreq.payload = respbuf;
   838c0:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = 1;
   838c2:	81a1      	strh	r1, [r4, #12]
}
   838c4:	bd70      	pop	{r4, r5, r6, pc}
   838c6:	bf00      	nop
   838c8:	200723a4 	.word	0x200723a4
   838cc:	20072208 	.word	0x20072208
   838d0:	20071dc4 	.word	0x20071dc4
   838d4:	20071dc0 	.word	0x20071dc0
   838d8:	000845dd 	.word	0x000845dd
   838dc:	20071b70 	.word	0x20071b70
   838e0:	20071dbd 	.word	0x20071dbd
   838e4:	20071dbc 	.word	0x20071dbc
   838e8:	2007098c 	.word	0x2007098c
   838ec:	20072248 	.word	0x20072248
   838f0:	20071dc8 	.word	0x20071dc8

000838f4 <ctrl_vccint_cb>:
{
   838f4:	b538      	push	{r3, r4, r5, lr}
    if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   838f6:	4b16      	ldr	r3, [pc, #88]	; (83950 <ctrl_vccint_cb+0x5c>)
   838f8:	88d9      	ldrh	r1, [r3, #6]
   838fa:	899a      	ldrh	r2, [r3, #12]
   838fc:	428a      	cmp	r2, r1
   838fe:	d315      	bcc.n	8392c <ctrl_vccint_cb+0x38>
    if ((udd_g_ctrlreq.payload[0] ^ udd_g_ctrlreq.payload[1] ^ 0xAE) != (udd_g_ctrlreq.payload[2])){
   83900:	689a      	ldr	r2, [r3, #8]
   83902:	7813      	ldrb	r3, [r2, #0]
   83904:	f892 c001 	ldrb.w	ip, [r2, #1]
   83908:	7890      	ldrb	r0, [r2, #2]
   8390a:	ea83 030c 	eor.w	r3, r3, ip
   8390e:	f083 03ae 	eor.w	r3, r3, #174	; 0xae
   83912:	4298      	cmp	r0, r3
   83914:	d107      	bne.n	83926 <ctrl_vccint_cb+0x32>
    if (udd_g_ctrlreq.req.wLength < 3){
   83916:	2902      	cmp	r1, #2
   83918:	d916      	bls.n	83948 <ctrl_vccint_cb+0x54>
   8391a:	8814      	ldrh	r4, [r2, #0]
    if ((vcctemp < 600) || (vcctemp > 1200)){
   8391c:	f5a4 7316 	sub.w	r3, r4, #600	; 0x258
   83920:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   83924:	d903      	bls.n	8392e <ctrl_vccint_cb+0x3a>
        vccint_status = USB_STATUS_PARAMWRONG;
   83926:	2201      	movs	r2, #1
   83928:	4b0a      	ldr	r3, [pc, #40]	; (83954 <ctrl_vccint_cb+0x60>)
   8392a:	701a      	strb	r2, [r3, #0]
}
   8392c:	bd38      	pop	{r3, r4, r5, pc}
    vccint_status = USB_STATUS_COMMERR;
   8392e:	2203      	movs	r2, #3
   83930:	4d08      	ldr	r5, [pc, #32]	; (83954 <ctrl_vccint_cb+0x60>)
    if (tps56520_set(vcctemp)){
   83932:	4620      	mov	r0, r4
   83934:	4b08      	ldr	r3, [pc, #32]	; (83958 <ctrl_vccint_cb+0x64>)
    vccint_status = USB_STATUS_COMMERR;
   83936:	702a      	strb	r2, [r5, #0]
    if (tps56520_set(vcctemp)){
   83938:	4798      	blx	r3
   8393a:	2800      	cmp	r0, #0
   8393c:	d0f6      	beq.n	8392c <ctrl_vccint_cb+0x38>
        vccint_status = USB_STATUS_OK;
   8393e:	2302      	movs	r3, #2
        vccint_setting = vcctemp;
   83940:	4a06      	ldr	r2, [pc, #24]	; (8395c <ctrl_vccint_cb+0x68>)
        vccint_status = USB_STATUS_OK;
   83942:	702b      	strb	r3, [r5, #0]
        vccint_setting = vcctemp;
   83944:	8014      	strh	r4, [r2, #0]
}
   83946:	bd38      	pop	{r3, r4, r5, pc}
        vccint_status = USB_STATUS_CSFAIL;
   83948:	2204      	movs	r2, #4
   8394a:	4b02      	ldr	r3, [pc, #8]	; (83954 <ctrl_vccint_cb+0x60>)
   8394c:	701a      	strb	r2, [r3, #0]
}
   8394e:	bd38      	pop	{r3, r4, r5, pc}
   83950:	200723a4 	.word	0x200723a4
   83954:	20072248 	.word	0x20072248
   83958:	000815a9 	.word	0x000815a9
   8395c:	2007098c 	.word	0x2007098c

00083960 <main_vendor_bulk_in_received>:
    if (UDD_EP_TRANSFER_OK != status) {
   83960:	b100      	cbz	r0, 83964 <main_vendor_bulk_in_received+0x4>
   83962:	4770      	bx	lr
{
   83964:	b510      	push	{r4, lr}
    if (FPGA_lockstatus() == fpga_blockin){		
   83966:	4b05      	ldr	r3, [pc, #20]	; (8397c <main_vendor_bulk_in_received+0x1c>)
   83968:	4604      	mov	r4, r0
   8396a:	4798      	blx	r3
   8396c:	2802      	cmp	r0, #2
   8396e:	d000      	beq.n	83972 <main_vendor_bulk_in_received+0x12>
}
   83970:	bd10      	pop	{r4, pc}
        FPGA_setlock(fpga_unlocked);
   83972:	4620      	mov	r0, r4
}
   83974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FPGA_setlock(fpga_unlocked);
   83978:	4b01      	ldr	r3, [pc, #4]	; (83980 <main_vendor_bulk_in_received+0x20>)
   8397a:	4718      	bx	r3
   8397c:	00083cf1 	.word	0x00083cf1
   83980:	00083cb5 	.word	0x00083cb5

00083984 <ctrl_progfpga_bulk>:
    switch(udd_g_ctrlreq.req.wValue){
   83984:	4a0d      	ldr	r2, [pc, #52]	; (839bc <ctrl_progfpga_bulk+0x38>)
   83986:	8853      	ldrh	r3, [r2, #2]
   83988:	2ba1      	cmp	r3, #161	; 0xa1
   8398a:	d004      	beq.n	83996 <ctrl_progfpga_bulk+0x12>
   8398c:	2ba2      	cmp	r3, #162	; 0xa2
   8398e:	d011      	beq.n	839b4 <ctrl_progfpga_bulk+0x30>
   83990:	2ba0      	cmp	r3, #160	; 0xa0
   83992:	d007      	beq.n	839a4 <ctrl_progfpga_bulk+0x20>
   83994:	4770      	bx	lr
            fpga_program_setup2();
   83996:	4b0a      	ldr	r3, [pc, #40]	; (839c0 <ctrl_progfpga_bulk+0x3c>)
void ctrl_progfpga_bulk(void){
   83998:	b510      	push	{r4, lr}
            fpga_program_setup2();
   8399a:	4798      	blx	r3
            blockendpoint_usage = bep_fpgabitstream;
   8399c:	220a      	movs	r2, #10
   8399e:	4b09      	ldr	r3, [pc, #36]	; (839c4 <ctrl_progfpga_bulk+0x40>)
   839a0:	701a      	strb	r2, [r3, #0]
}
   839a2:	bd10      	pop	{r4, pc}
            if (udd_g_ctrlreq.req.wLength == 4) {
   839a4:	88d3      	ldrh	r3, [r2, #6]
   839a6:	2b04      	cmp	r3, #4
                prog_freq = *(CTRLBUFFER_WORDPTR);
   839a8:	bf0a      	itet	eq
   839aa:	4b07      	ldreq	r3, [pc, #28]	; (839c8 <ctrl_progfpga_bulk+0x44>)
    uint32_t prog_freq = 1E6;
   839ac:	4807      	ldrne	r0, [pc, #28]	; (839cc <ctrl_progfpga_bulk+0x48>)
                prog_freq = *(CTRLBUFFER_WORDPTR);
   839ae:	6818      	ldreq	r0, [r3, #0]
            fpga_program_setup1(prog_freq);			
   839b0:	4b07      	ldr	r3, [pc, #28]	; (839d0 <ctrl_progfpga_bulk+0x4c>)
   839b2:	4718      	bx	r3
            blockendpoint_usage = bep_emem;
   839b4:	2200      	movs	r2, #0
   839b6:	4b03      	ldr	r3, [pc, #12]	; (839c4 <ctrl_progfpga_bulk+0x40>)
   839b8:	701a      	strb	r2, [r3, #0]
}
   839ba:	4770      	bx	lr
   839bc:	200723a4 	.word	0x200723a4
   839c0:	00083d69 	.word	0x00083d69
   839c4:	20071db6 	.word	0x20071db6
   839c8:	200716ac 	.word	0x200716ac
   839cc:	000f4240 	.word	0x000f4240
   839d0:	00083cfd 	.word	0x00083cfd

000839d4 <fpga_target_sam_cfg_out>:
	switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   839d4:	4b0f      	ldr	r3, [pc, #60]	; (83a14 <fpga_target_sam_cfg_out+0x40>)
   839d6:	789b      	ldrb	r3, [r3, #2]
   839d8:	2b05      	cmp	r3, #5
   839da:	d004      	beq.n	839e6 <fpga_target_sam_cfg_out+0x12>
   839dc:	2b06      	cmp	r3, #6
   839de:	d00c      	beq.n	839fa <fpga_target_sam_cfg_out+0x26>
   839e0:	2b04      	cmp	r3, #4
   839e2:	d005      	beq.n	839f0 <fpga_target_sam_cfg_out+0x1c>
   839e4:	4770      	bx	lr
	    gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   839e6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   839ea:	2036      	movs	r0, #54	; 0x36
   839ec:	4b0a      	ldr	r3, [pc, #40]	; (83a18 <fpga_target_sam_cfg_out+0x44>)
   839ee:	4718      	bx	r3
	    gpio_configure_pin(PIN_PCK0, PIO_OUTPUT_0);
   839f0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   839f4:	2036      	movs	r0, #54	; 0x36
   839f6:	4b08      	ldr	r3, [pc, #32]	; (83a18 <fpga_target_sam_cfg_out+0x44>)
   839f8:	4718      	bx	r3
{
   839fa:	b510      	push	{r4, lr}
	    gpio_set_pin_high(FPGA_TRIGGER_GPIO);
   839fc:	204d      	movs	r0, #77	; 0x4d
   839fe:	4b07      	ldr	r3, [pc, #28]	; (83a1c <fpga_target_sam_cfg_out+0x48>)
   83a00:	4798      	blx	r3
	    delay_cycles(250);
   83a02:	20fa      	movs	r0, #250	; 0xfa
   83a04:	4b06      	ldr	r3, [pc, #24]	; (83a20 <fpga_target_sam_cfg_out+0x4c>)
   83a06:	4798      	blx	r3
}
   83a08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    gpio_set_pin_low(FPGA_TRIGGER_GPIO);
   83a0c:	204d      	movs	r0, #77	; 0x4d
   83a0e:	4b05      	ldr	r3, [pc, #20]	; (83a24 <fpga_target_sam_cfg_out+0x50>)
   83a10:	4718      	bx	r3
   83a12:	bf00      	nop
   83a14:	200723a4 	.word	0x200723a4
   83a18:	00084655 	.word	0x00084655
   83a1c:	000845f9 	.word	0x000845f9
   83a20:	200701b5 	.word	0x200701b5
   83a24:	00084615 	.word	0x00084615

00083a28 <ctrl_fpgaioutil>:
    if (udd_g_ctrlreq.req.wLength != 2){
   83a28:	4b3a      	ldr	r3, [pc, #232]	; (83b14 <ctrl_fpgaioutil+0xec>)
   83a2a:	88da      	ldrh	r2, [r3, #6]
   83a2c:	2a02      	cmp	r2, #2
   83a2e:	d000      	beq.n	83a32 <ctrl_fpgaioutil+0xa>
   83a30:	4770      	bx	lr
static void ctrl_fpgaioutil(void){
   83a32:	b570      	push	{r4, r5, r6, lr}
    int pin = udd_g_ctrlreq.payload[0];
   83a34:	689a      	ldr	r2, [r3, #8]
   83a36:	7814      	ldrb	r4, [r2, #0]
    if ((pin < 0) || (pin > 106)){
   83a38:	2c6a      	cmp	r4, #106	; 0x6a
   83a3a:	d807      	bhi.n	83a4c <ctrl_fpgaioutil+0x24>
	switch(udd_g_ctrlreq.req.wValue){
   83a3c:	885b      	ldrh	r3, [r3, #2]
    int config = udd_g_ctrlreq.payload[1];
   83a3e:	7852      	ldrb	r2, [r2, #1]
	switch(udd_g_ctrlreq.req.wValue){
   83a40:	2ba1      	cmp	r3, #161	; 0xa1
   83a42:	d013      	beq.n	83a6c <ctrl_fpgaioutil+0x44>
   83a44:	2ba2      	cmp	r3, #162	; 0xa2
   83a46:	d017      	beq.n	83a78 <ctrl_fpgaioutil+0x50>
   83a48:	2ba0      	cmp	r3, #160	; 0xa0
   83a4a:	d000      	beq.n	83a4e <ctrl_fpgaioutil+0x26>
}
   83a4c:	bd70      	pop	{r4, r5, r6, pc}
            switch(config)
   83a4e:	3a01      	subs	r2, #1
   83a50:	2a12      	cmp	r2, #18
   83a52:	d80b      	bhi.n	83a6c <ctrl_fpgaioutil+0x44>
   83a54:	e8df f002 	tbb	[pc, r2]
   83a58:	0a0a3a49 	.word	0x0a0a3a49
   83a5c:	0a0a0a0a 	.word	0x0a0a0a0a
   83a60:	0a0a0a0a 	.word	0x0a0a0a0a
   83a64:	410a0a0a 	.word	0x410a0a0a
   83a68:	242f      	.short	0x242f
   83a6a:	19          	.byte	0x19
   83a6b:	00          	.byte	0x00
            gpio_configure_pin(pin, PIO_DEFAULT);
   83a6c:	4620      	mov	r0, r4
}
   83a6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            gpio_configure_pin(pin, PIO_DEFAULT);
   83a72:	2100      	movs	r1, #0
   83a74:	4b28      	ldr	r3, [pc, #160]	; (83b18 <ctrl_fpgaioutil+0xf0>)
   83a76:	4718      	bx	r3
            if (config == 0){
   83a78:	2a00      	cmp	r2, #0
   83a7a:	d03d      	beq.n	83af8 <ctrl_fpgaioutil+0xd0>
            if (config == 1){
   83a7c:	2a01      	cmp	r2, #1
   83a7e:	d1e5      	bne.n	83a4c <ctrl_fpgaioutil+0x24>
                gpio_set_pin_high(pin);
   83a80:	4620      	mov	r0, r4
}
   83a82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                gpio_set_pin_high(pin);
   83a86:	4b25      	ldr	r3, [pc, #148]	; (83b1c <ctrl_fpgaioutil+0xf4>)
   83a88:	4718      	bx	r3
                    if(pin_spi1_cs > -1){
   83a8a:	4e25      	ldr	r6, [pc, #148]	; (83b20 <ctrl_fpgaioutil+0xf8>)
   83a8c:	6830      	ldr	r0, [r6, #0]
   83a8e:	2800      	cmp	r0, #0
   83a90:	da3b      	bge.n	83b0a <ctrl_fpgaioutil+0xe2>
   83a92:	4d21      	ldr	r5, [pc, #132]	; (83b18 <ctrl_fpgaioutil+0xf0>)
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   83a94:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83a98:	4620      	mov	r0, r4
   83a9a:	47a8      	blx	r5
                    pin_spi1_cs = pin;                    
   83a9c:	6034      	str	r4, [r6, #0]
}
   83a9e:	bd70      	pop	{r4, r5, r6, pc}
                    if(pin_spi1_sck > -1){
   83aa0:	4e20      	ldr	r6, [pc, #128]	; (83b24 <ctrl_fpgaioutil+0xfc>)
   83aa2:	6830      	ldr	r0, [r6, #0]
   83aa4:	2800      	cmp	r0, #0
   83aa6:	da1c      	bge.n	83ae2 <ctrl_fpgaioutil+0xba>
   83aa8:	4d1b      	ldr	r5, [pc, #108]	; (83b18 <ctrl_fpgaioutil+0xf0>)
                    gpio_configure_pin(pin, PIO_OUTPUT_0);
   83aaa:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   83aae:	4620      	mov	r0, r4
   83ab0:	47a8      	blx	r5
                    pin_spi1_sck = pin;
   83ab2:	6034      	str	r4, [r6, #0]
}
   83ab4:	bd70      	pop	{r4, r5, r6, pc}
                    if(pin_spi1_miso > -1){
   83ab6:	4e1c      	ldr	r6, [pc, #112]	; (83b28 <ctrl_fpgaioutil+0x100>)
   83ab8:	6830      	ldr	r0, [r6, #0]
   83aba:	2800      	cmp	r0, #0
   83abc:	da21      	bge.n	83b02 <ctrl_fpgaioutil+0xda>
   83abe:	4d16      	ldr	r5, [pc, #88]	; (83b18 <ctrl_fpgaioutil+0xf0>)
                    gpio_configure_pin(pin, PIO_INPUT);
   83ac0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   83ac4:	4620      	mov	r0, r4
   83ac6:	47a8      	blx	r5
                    pin_spi1_miso = pin;
   83ac8:	6034      	str	r4, [r6, #0]
}
   83aca:	bd70      	pop	{r4, r5, r6, pc}
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   83acc:	4620      	mov	r0, r4
}
   83ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   83ad2:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   83ad6:	4b10      	ldr	r3, [pc, #64]	; (83b18 <ctrl_fpgaioutil+0xf0>)
   83ad8:	4718      	bx	r3
                    if(pin_spi1_mosi > -1){
   83ada:	4e14      	ldr	r6, [pc, #80]	; (83b2c <ctrl_fpgaioutil+0x104>)
   83adc:	6830      	ldr	r0, [r6, #0]
   83ade:	2800      	cmp	r0, #0
   83ae0:	dbe2      	blt.n	83aa8 <ctrl_fpgaioutil+0x80>
                        gpio_configure_pin(pin_spi1_sck, PIO_DEFAULT);
   83ae2:	2100      	movs	r1, #0
   83ae4:	4d0c      	ldr	r5, [pc, #48]	; (83b18 <ctrl_fpgaioutil+0xf0>)
   83ae6:	47a8      	blx	r5
   83ae8:	e7df      	b.n	83aaa <ctrl_fpgaioutil+0x82>
                    gpio_configure_pin(pin, PIO_INPUT);
   83aea:	4620      	mov	r0, r4
}
   83aec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    gpio_configure_pin(pin, PIO_INPUT);
   83af0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   83af4:	4b08      	ldr	r3, [pc, #32]	; (83b18 <ctrl_fpgaioutil+0xf0>)
   83af6:	4718      	bx	r3
                gpio_set_pin_low(pin);
   83af8:	4620      	mov	r0, r4
}
   83afa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                gpio_set_pin_low(pin);
   83afe:	4b0c      	ldr	r3, [pc, #48]	; (83b30 <ctrl_fpgaioutil+0x108>)
   83b00:	4718      	bx	r3
                        gpio_configure_pin(pin_spi1_miso, PIO_DEFAULT);
   83b02:	2100      	movs	r1, #0
   83b04:	4d04      	ldr	r5, [pc, #16]	; (83b18 <ctrl_fpgaioutil+0xf0>)
   83b06:	47a8      	blx	r5
   83b08:	e7da      	b.n	83ac0 <ctrl_fpgaioutil+0x98>
                        gpio_configure_pin(pin_spi1_cs, PIO_DEFAULT);
   83b0a:	2100      	movs	r1, #0
   83b0c:	4d02      	ldr	r5, [pc, #8]	; (83b18 <ctrl_fpgaioutil+0xf0>)
   83b0e:	47a8      	blx	r5
   83b10:	e7c0      	b.n	83a94 <ctrl_fpgaioutil+0x6c>
   83b12:	bf00      	nop
   83b14:	200723a4 	.word	0x200723a4
   83b18:	00084655 	.word	0x00084655
   83b1c:	000845f9 	.word	0x000845f9
   83b20:	200701c0 	.word	0x200701c0
   83b24:	200701cc 	.word	0x200701cc
   83b28:	200701c4 	.word	0x200701c4
   83b2c:	200701c8 	.word	0x200701c8
   83b30:	00084615 	.word	0x00084615

00083b34 <ctrl_spi1util>:
static void ctrl_spi1util(void){
   83b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(udd_g_ctrlreq.req.wValue){
   83b38:	4c17      	ldr	r4, [pc, #92]	; (83b98 <ctrl_spi1util+0x64>)
   83b3a:	8863      	ldrh	r3, [r4, #2]
   83b3c:	3ba0      	subs	r3, #160	; 0xa0
   83b3e:	2b04      	cmp	r3, #4
   83b40:	d817      	bhi.n	83b72 <ctrl_spi1util+0x3e>
   83b42:	e8df f003 	tbb	[pc, r3]
   83b46:	1c18      	.short	0x1c18
   83b48:	2420      	.short	0x2420
   83b4a:	03          	.byte	0x03
   83b4b:	00          	.byte	0x00
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   83b4c:	88e3      	ldrh	r3, [r4, #6]
   83b4e:	89a2      	ldrh	r2, [r4, #12]
   83b50:	429a      	cmp	r2, r3
   83b52:	d30e      	bcc.n	83b72 <ctrl_spi1util+0x3e>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer)){
   83b54:	3b01      	subs	r3, #1
   83b56:	2b3f      	cmp	r3, #63	; 0x3f
   83b58:	d80b      	bhi.n	83b72 <ctrl_spi1util+0x3e>
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   83b5a:	2500      	movs	r5, #0
   83b5c:	4e0f      	ldr	r6, [pc, #60]	; (83b9c <ctrl_spi1util+0x68>)
   83b5e:	4f10      	ldr	r7, [pc, #64]	; (83ba0 <ctrl_spi1util+0x6c>)
				spi1util_data_buffer[i] = spi1util_xferbyte(udd_g_ctrlreq.payload[i]);
   83b60:	68a3      	ldr	r3, [r4, #8]
   83b62:	5d58      	ldrb	r0, [r3, r5]
   83b64:	47b8      	blx	r7
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   83b66:	88e3      	ldrh	r3, [r4, #6]
   83b68:	3501      	adds	r5, #1
   83b6a:	429d      	cmp	r5, r3
				spi1util_data_buffer[i] = spi1util_xferbyte(udd_g_ctrlreq.payload[i]);
   83b6c:	f806 0b01 	strb.w	r0, [r6], #1
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   83b70:	dbf6      	blt.n	83b60 <ctrl_spi1util+0x2c>
}
   83b72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			spi1util_init();			
   83b76:	4b0b      	ldr	r3, [pc, #44]	; (83ba4 <ctrl_spi1util+0x70>)
}
   83b78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_init();			
   83b7c:	4718      	bx	r3
			spi1util_deinit();
   83b7e:	4b0a      	ldr	r3, [pc, #40]	; (83ba8 <ctrl_spi1util+0x74>)
}
   83b80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_deinit();
   83b84:	4718      	bx	r3
			spi1util_cs_low();
   83b86:	4b09      	ldr	r3, [pc, #36]	; (83bac <ctrl_spi1util+0x78>)
}
   83b88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_cs_low();
   83b8c:	4718      	bx	r3
			spi1util_cs_high();
   83b8e:	4b08      	ldr	r3, [pc, #32]	; (83bb0 <ctrl_spi1util+0x7c>)
}
   83b90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_cs_high();
   83b94:	4718      	bx	r3
   83b96:	bf00      	nop
   83b98:	200723a4 	.word	0x200723a4
   83b9c:	20072208 	.word	0x20072208
   83ba0:	0008041d 	.word	0x0008041d
   83ba4:	000803d5 	.word	0x000803d5
   83ba8:	000804a5 	.word	0x000804a5
   83bac:	000803fd 	.word	0x000803fd
   83bb0:	0008040d 	.word	0x0008040d

00083bb4 <ctrl_progfpgaspi>:
static void ctrl_progfpgaspi(void){
   83bb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(udd_g_ctrlreq.req.wValue){
   83bb8:	4c17      	ldr	r4, [pc, #92]	; (83c18 <ctrl_progfpgaspi+0x64>)
   83bba:	8863      	ldrh	r3, [r4, #2]
   83bbc:	3ba0      	subs	r3, #160	; 0xa0
   83bbe:	2b04      	cmp	r3, #4
   83bc0:	d817      	bhi.n	83bf2 <ctrl_progfpgaspi+0x3e>
   83bc2:	e8df f003 	tbb	[pc, r3]
   83bc6:	1c18      	.short	0x1c18
   83bc8:	2420      	.short	0x2420
   83bca:	03          	.byte	0x03
   83bcb:	00          	.byte	0x00
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   83bcc:	88e3      	ldrh	r3, [r4, #6]
   83bce:	89a2      	ldrh	r2, [r4, #12]
   83bd0:	429a      	cmp	r2, r3
   83bd2:	d30e      	bcc.n	83bf2 <ctrl_progfpgaspi+0x3e>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer)){
   83bd4:	3b01      	subs	r3, #1
   83bd6:	2b3f      	cmp	r3, #63	; 0x3f
   83bd8:	d80b      	bhi.n	83bf2 <ctrl_progfpgaspi+0x3e>
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   83bda:	2500      	movs	r5, #0
   83bdc:	4e0f      	ldr	r6, [pc, #60]	; (83c1c <ctrl_progfpgaspi+0x68>)
   83bde:	4f10      	ldr	r7, [pc, #64]	; (83c20 <ctrl_progfpgaspi+0x6c>)
				fpgaspi_data_buffer[i] = fpgaspi_xferbyte(udd_g_ctrlreq.payload[i]);
   83be0:	68a3      	ldr	r3, [r4, #8]
   83be2:	5d58      	ldrb	r0, [r3, r5]
   83be4:	47b8      	blx	r7
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   83be6:	88e3      	ldrh	r3, [r4, #6]
   83be8:	3501      	adds	r5, #1
   83bea:	429d      	cmp	r5, r3
				fpgaspi_data_buffer[i] = fpgaspi_xferbyte(udd_g_ctrlreq.payload[i]);
   83bec:	f806 0b01 	strb.w	r0, [r6], #1
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   83bf0:	dbf6      	blt.n	83be0 <ctrl_progfpgaspi+0x2c>
}
   83bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fpgaspi_program_init();			
   83bf6:	4b0b      	ldr	r3, [pc, #44]	; (83c24 <ctrl_progfpgaspi+0x70>)
}
   83bf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_program_init();			
   83bfc:	4718      	bx	r3
			fpgaspi_program_deinit();
   83bfe:	4b0a      	ldr	r3, [pc, #40]	; (83c28 <ctrl_progfpgaspi+0x74>)
}
   83c00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_program_deinit();
   83c04:	4718      	bx	r3
			fpgaspi_cs_low();
   83c06:	4b09      	ldr	r3, [pc, #36]	; (83c2c <ctrl_progfpgaspi+0x78>)
}
   83c08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_cs_low();
   83c0c:	4718      	bx	r3
			fpgaspi_cs_high();
   83c0e:	4b08      	ldr	r3, [pc, #32]	; (83c30 <ctrl_progfpgaspi+0x7c>)
}
   83c10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_cs_high();
   83c14:	4718      	bx	r3
   83c16:	bf00      	nop
   83c18:	200723a4 	.word	0x200723a4
   83c1c:	20071dc8 	.word	0x20071dc8
   83c20:	00080349 	.word	0x00080349
   83c24:	000802f1 	.word	0x000802f1
   83c28:	000803b5 	.word	0x000803b5
   83c2c:	00080331 	.word	0x00080331
   83c30:	0008033d 	.word	0x0008033d

00083c34 <ctrl_cdce906_cb>:
    if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   83c34:	4b11      	ldr	r3, [pc, #68]	; (83c7c <ctrl_cdce906_cb+0x48>)
   83c36:	88da      	ldrh	r2, [r3, #6]
   83c38:	8999      	ldrh	r1, [r3, #12]
   83c3a:	4291      	cmp	r1, r2
   83c3c:	d316      	bcc.n	83c6c <ctrl_cdce906_cb+0x38>
    if (udd_g_ctrlreq.req.wLength < 3){
   83c3e:	2a02      	cmp	r2, #2
{
   83c40:	b510      	push	{r4, lr}
    if (udd_g_ctrlreq.req.wLength < 3){
   83c42:	d90f      	bls.n	83c64 <ctrl_cdce906_cb+0x30>
    cdce906_status = USB_STATUS_COMMERR;
   83c44:	2103      	movs	r1, #3
    if (udd_g_ctrlreq.payload[0] == 0x00){
   83c46:	689b      	ldr	r3, [r3, #8]
    cdce906_status = USB_STATUS_COMMERR;
   83c48:	4c0d      	ldr	r4, [pc, #52]	; (83c80 <ctrl_cdce906_cb+0x4c>)
    if (udd_g_ctrlreq.payload[0] == 0x00){
   83c4a:	781a      	ldrb	r2, [r3, #0]
    cdce906_status = USB_STATUS_COMMERR;
   83c4c:	7021      	strb	r1, [r4, #0]
    if (udd_g_ctrlreq.payload[0] == 0x00){
   83c4e:	b172      	cbz	r2, 83c6e <ctrl_cdce906_cb+0x3a>
    } else if (udd_g_ctrlreq.payload[0] == 0x01){
   83c50:	2a01      	cmp	r2, #1
   83c52:	d108      	bne.n	83c66 <ctrl_cdce906_cb+0x32>
        if (cdce906_write(udd_g_ctrlreq.payload[1], udd_g_ctrlreq.payload[2])){
   83c54:	7899      	ldrb	r1, [r3, #2]
   83c56:	7858      	ldrb	r0, [r3, #1]
   83c58:	4b0a      	ldr	r3, [pc, #40]	; (83c84 <ctrl_cdce906_cb+0x50>)
   83c5a:	4798      	blx	r3
   83c5c:	b108      	cbz	r0, 83c62 <ctrl_cdce906_cb+0x2e>
            cdce906_status = USB_STATUS_OK;
   83c5e:	2302      	movs	r3, #2
   83c60:	7023      	strb	r3, [r4, #0]
}
   83c62:	bd10      	pop	{r4, pc}
   83c64:	4c06      	ldr	r4, [pc, #24]	; (83c80 <ctrl_cdce906_cb+0x4c>)
        cdce906_status = USB_STATUS_PARAMWRONG;
   83c66:	2301      	movs	r3, #1
   83c68:	7023      	strb	r3, [r4, #0]
}
   83c6a:	bd10      	pop	{r4, pc}
   83c6c:	4770      	bx	lr
        if (cdce906_read(udd_g_ctrlreq.payload[1], &cdce906_data)){
   83c6e:	7858      	ldrb	r0, [r3, #1]
   83c70:	4905      	ldr	r1, [pc, #20]	; (83c88 <ctrl_cdce906_cb+0x54>)
   83c72:	4b06      	ldr	r3, [pc, #24]	; (83c8c <ctrl_cdce906_cb+0x58>)
   83c74:	4798      	blx	r3
   83c76:	2800      	cmp	r0, #0
   83c78:	d0f3      	beq.n	83c62 <ctrl_cdce906_cb+0x2e>
   83c7a:	e7f0      	b.n	83c5e <ctrl_cdce906_cb+0x2a>
   83c7c:	200723a4 	.word	0x200723a4
   83c80:	20071dbd 	.word	0x20071dbd
   83c84:	000801c9 	.word	0x000801c9
   83c88:	20071dbc 	.word	0x20071dbc
   83c8c:	00080229 	.word	0x00080229

00083c90 <fpga_target_register_handlers>:

void fpga_target_register_handlers(void)
{
   83c90:	b510      	push	{r4, lr}
    naeusb_add_in_handler(fpga_target_setup_in_received);
   83c92:	4b04      	ldr	r3, [pc, #16]	; (83ca4 <fpga_target_register_handlers+0x14>)
   83c94:	4804      	ldr	r0, [pc, #16]	; (83ca8 <fpga_target_register_handlers+0x18>)
   83c96:	4798      	blx	r3
    naeusb_add_out_handler(fpga_target_setup_out_received);
   83c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    naeusb_add_out_handler(fpga_target_setup_out_received);
   83c9c:	4803      	ldr	r0, [pc, #12]	; (83cac <fpga_target_register_handlers+0x1c>)
   83c9e:	4b04      	ldr	r3, [pc, #16]	; (83cb0 <fpga_target_register_handlers+0x20>)
   83ca0:	4718      	bx	r3
   83ca2:	bf00      	nop
   83ca4:	00081e51 	.word	0x00081e51
   83ca8:	000837dd 	.word	0x000837dd
   83cac:	000834d1 	.word	0x000834d1
   83cb0:	00081e79 	.word	0x00081e79

00083cb4 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   83cb4:	b538      	push	{r3, r4, r5, lr}
  int ret = 0;
  cpu_irq_enter_critical();
   83cb6:	4b08      	ldr	r3, [pc, #32]	; (83cd8 <FPGA_setlock+0x24>)
{
   83cb8:	4604      	mov	r4, r0
  cpu_irq_enter_critical();
   83cba:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   83cbc:	4b07      	ldr	r3, [pc, #28]	; (83cdc <FPGA_setlock+0x28>)
   83cbe:	781a      	ldrb	r2, [r3, #0]
   83cc0:	b92a      	cbnz	r2, 83cce <FPGA_setlock+0x1a>
  {
    ret = 1;
   83cc2:	2501      	movs	r5, #1
    _fpga_locked = lockstatus;
   83cc4:	701c      	strb	r4, [r3, #0]
  }
  cpu_irq_leave_critical();
   83cc6:	4b06      	ldr	r3, [pc, #24]	; (83ce0 <FPGA_setlock+0x2c>)
   83cc8:	4798      	blx	r3
  return ret;
}
   83cca:	4628      	mov	r0, r5
   83ccc:	bd38      	pop	{r3, r4, r5, pc}
  int ret = 0;
   83cce:	2500      	movs	r5, #0
  cpu_irq_leave_critical();
   83cd0:	4b03      	ldr	r3, [pc, #12]	; (83ce0 <FPGA_setlock+0x2c>)
   83cd2:	4798      	blx	r3
}
   83cd4:	4628      	mov	r0, r5
   83cd6:	bd38      	pop	{r3, r4, r5, pc}
   83cd8:	000863f5 	.word	0x000863f5
   83cdc:	20072249 	.word	0x20072249
   83ce0:	00086435 	.word	0x00086435

00083ce4 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
  _fpga_locked = fpga_unlocked;
   83ce4:	2200      	movs	r2, #0
   83ce6:	4b01      	ldr	r3, [pc, #4]	; (83cec <FPGA_releaselock+0x8>)
   83ce8:	701a      	strb	r2, [r3, #0]
}
   83cea:	4770      	bx	lr
   83cec:	20072249 	.word	0x20072249

00083cf0 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
  return _fpga_locked;
   83cf0:	4b01      	ldr	r3, [pc, #4]	; (83cf8 <FPGA_lockstatus+0x8>)
   83cf2:	7818      	ldrb	r0, [r3, #0]
}
   83cf4:	4770      	bx	lr
   83cf6:	bf00      	nop
   83cf8:	20072249 	.word	0x20072249

00083cfc <fpga_program_setup1>:
    FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(uint32_t prog_freq)
{
   83cfc:	b5f0      	push	{r4, r5, r6, r7, lr}
	/* Init - set program low to erase FPGA */
	FPGA_NPROG_LOW();
   83cfe:	4b12      	ldr	r3, [pc, #72]	; (83d48 <fpga_program_setup1+0x4c>)
{
   83d00:	b085      	sub	sp, #20
   83d02:	4605      	mov	r5, r0
	FPGA_NPROG_LOW();
   83d04:	2033      	movs	r0, #51	; 0x33
   83d06:	4798      	blx	r3
#if (USB_DEVICE_PRODUCT_ID == 0xACE5) || (USB_DEVICE_PRODUCT_ID == 0xC610) || (USB_DEVICE_PRODUCT_ID == 0xC310)
    
    usart_spi_opt_t spiopts;
    spiopts.baudrate = prog_freq;
    spiopts.char_length = US_MR_CHRL_8_BIT;
    spiopts.channel_mode = US_MR_CHMODE_NORMAL;
   83d08:	2400      	movs	r4, #0
    spiopts.char_length = US_MR_CHRL_8_BIT;
   83d0a:	22c0      	movs	r2, #192	; 0xc0
    spiopts.spi_mode = SPI_MODE_0;

    sysclk_enable_peripheral_clock(FPGA_PROG_USART_ID);
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   83d0c:	4e0f      	ldr	r6, [pc, #60]	; (83d4c <fpga_program_setup1+0x50>)
   83d0e:	4b10      	ldr	r3, [pc, #64]	; (83d50 <fpga_program_setup1+0x54>)
   83d10:	2013      	movs	r0, #19
    spiopts.char_length = US_MR_CHRL_8_BIT;
   83d12:	e9cd 5200 	strd	r5, r2, [sp]
    spiopts.spi_mode = SPI_MODE_0;
   83d16:	e9cd 4402 	strd	r4, r4, [sp, #8]
   83d1a:	4798      	blx	r3
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   83d1c:	4a0d      	ldr	r2, [pc, #52]	; (83d54 <fpga_program_setup1+0x58>)
   83d1e:	4b0e      	ldr	r3, [pc, #56]	; (83d58 <fpga_program_setup1+0x5c>)
   83d20:	4669      	mov	r1, sp
   83d22:	4630      	mov	r0, r6
   83d24:	4798      	blx	r3
    FPGA_DO_SETUP();
   83d26:	4f0d      	ldr	r7, [pc, #52]	; (83d5c <fpga_program_setup1+0x60>)
   83d28:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83d2c:	2034      	movs	r0, #52	; 0x34
   83d2e:	47b8      	blx	r7
    FPGA_CCLK_SETUP();
   83d30:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   83d34:	2038      	movs	r0, #56	; 0x38
   83d36:	47b8      	blx	r7

    //pin setup doesn't transfer control over to USART, so have to do it manually
    PIOA->PIO_PDR = (1 << PIN_FPGA_DO_GPIO) | (1 << PIN_FPGA_CCLK_GPIO);
   83d38:	4a09      	ldr	r2, [pc, #36]	; (83d60 <fpga_program_setup1+0x64>)
    usart_enable_tx(FPGA_PROG_USART);
   83d3a:	4630      	mov	r0, r6
   83d3c:	4b09      	ldr	r3, [pc, #36]	; (83d64 <fpga_program_setup1+0x68>)
    PIOA->PIO_PDR = (1 << PIN_FPGA_DO_GPIO) | (1 << PIN_FPGA_CCLK_GPIO);
   83d3e:	6054      	str	r4, [r2, #4]
    usart_enable_tx(FPGA_PROG_USART);
   83d40:	4798      	blx	r3

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
	#endif
#endif
}
   83d42:	b005      	add	sp, #20
   83d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83d46:	bf00      	nop
   83d48:	00084615 	.word	0x00084615
   83d4c:	400a0000 	.word	0x400a0000
   83d50:	000843f1 	.word	0x000843f1
   83d54:	0501bd00 	.word	0x0501bd00
   83d58:	00083e9d 	.word	0x00083e9d
   83d5c:	00084655 	.word	0x00084655
   83d60:	400e0e00 	.word	0x400e0e00
   83d64:	00083f69 	.word	0x00083f69

00083d68 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
    FPGA_NPROG_HIGH();
   83d68:	2033      	movs	r0, #51	; 0x33
   83d6a:	4b01      	ldr	r3, [pc, #4]	; (83d70 <fpga_program_setup2+0x8>)
   83d6c:	4718      	bx	r3
   83d6e:	bf00      	nop
   83d70:	000845f9 	.word	0x000845f9

00083d74 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   83d74:	4601      	mov	r1, r0
			
			FPGA_CCLK_HIGH();
			databyte = databyte >> 1;
		}
		#elif FPGA_USE_USART
		usart_putchar(FPGA_PROG_USART, databyte);
   83d76:	4b01      	ldr	r3, [pc, #4]	; (83d7c <fpga_program_sendbyte+0x8>)
   83d78:	4801      	ldr	r0, [pc, #4]	; (83d80 <fpga_program_sendbyte+0xc>)
   83d7a:	4718      	bx	r3
   83d7c:	00083f99 	.word	0x00083f99
   83d80:	400a0000 	.word	0x400a0000

00083d84 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   83d84:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   83d86:	2604      	movs	r6, #4
{
   83d88:	b087      	sub	sp, #28
   83d8a:	4604      	mov	r4, r0
   83d8c:	460d      	mov	r5, r1
	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   83d8e:	220f      	movs	r2, #15
   83d90:	210e      	movs	r1, #14
   83d92:	480c      	ldr	r0, [pc, #48]	; (83dc4 <flash_read_unique_id+0x40>)
   83d94:	4f0c      	ldr	r7, [pc, #48]	; (83dc8 <flash_read_unique_id+0x44>)
   83d96:	ab02      	add	r3, sp, #8
   83d98:	9600      	str	r6, [sp, #0]
   83d9a:	47b8      	blx	r7
   83d9c:	b970      	cbnz	r0, 83dbc <flash_read_unique_id+0x38>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
	}

	if (ul_size > 4) {
   83d9e:	2d04      	cmp	r5, #4
   83da0:	4626      	mov	r6, r4
   83da2:	462a      	mov	r2, r5
   83da4:	4604      	mov	r4, r0
   83da6:	bf28      	it	cs
   83da8:	2204      	movcs	r2, #4
		/* Only 4 dword to store unique ID */
		ul_size = 4;
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   83daa:	b125      	cbz	r5, 83db6 <flash_read_unique_id+0x32>
		pul_data[ul_idx] = uid_buf[ul_idx];
   83dac:	4630      	mov	r0, r6
   83dae:	4b07      	ldr	r3, [pc, #28]	; (83dcc <flash_read_unique_id+0x48>)
   83db0:	a902      	add	r1, sp, #8
   83db2:	0092      	lsls	r2, r2, #2
   83db4:	4798      	blx	r3
	}

	return FLASH_RC_OK;
}
   83db6:	4620      	mov	r0, r4
   83db8:	b007      	add	sp, #28
   83dba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return FLASH_RC_ERROR;
   83dbc:	2410      	movs	r4, #16
}
   83dbe:	4620      	mov	r0, r4
   83dc0:	b007      	add	sp, #28
   83dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83dc4:	400e0a00 	.word	0x400e0a00
   83dc8:	20070111 	.word	0x20070111
   83dcc:	00086d51 	.word	0x00086d51

00083dd0 <usart_set_async_baudrate>:
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   83dd0:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
{
   83dd4:	4684      	mov	ip, r0
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   83dd6:	ea4f 1001 	mov.w	r0, r1, lsl #4
   83dda:	d312      	bcc.n	83e02 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   83ddc:	0843      	lsrs	r3, r0, #1
   83dde:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   83de2:	fbb2 f2f0 	udiv	r2, r2, r0
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   83de6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	cd = cd_fp >> 3;
   83dea:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   83dec:	1e58      	subs	r0, r3, #1
   83dee:	4288      	cmp	r0, r1
   83df0:	d813      	bhi.n	83e1a <usart_set_async_baudrate+0x4a>
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   83df2:	0412      	lsls	r2, r2, #16
   83df4:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   83df8:	431a      	orrs	r2, r3

	return 0;
   83dfa:	2000      	movs	r0, #0
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   83dfc:	f8cc 2020 	str.w	r2, [ip, #32]
	return 0;
   83e00:	4770      	bx	lr
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   83e02:	00c9      	lsls	r1, r1, #3
   83e04:	084b      	lsrs	r3, r1, #1
   83e06:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   83e0a:	fbb2 f2f1 	udiv	r2, r2, r1
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   83e0e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	cd = cd_fp >> 3;
   83e12:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   83e14:	1e58      	subs	r0, r3, #1
   83e16:	4288      	cmp	r0, r1
   83e18:	d901      	bls.n	83e1e <usart_set_async_baudrate+0x4e>
		return 1;
   83e1a:	2001      	movs	r0, #1
}
   83e1c:	4770      	bx	lr
		p_usart->US_MR |= US_MR_OVER;
   83e1e:	f8dc 1004 	ldr.w	r1, [ip, #4]
   83e22:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   83e26:	f8cc 1004 	str.w	r1, [ip, #4]
   83e2a:	e7e2      	b.n	83df2 <usart_set_async_baudrate+0x22>

00083e2c <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   83e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   83e30:	f44f 7c80 	mov.w	ip, #256	; 0x100
	p_usart->US_MR = 0;
   83e34:	2300      	movs	r3, #0
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   83e36:	f04f 0888 	mov.w	r8, #136	; 0x88
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   83e3a:	f04f 0e24 	mov.w	lr, #36	; 0x24
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   83e3e:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   83e42:	f8df 904c 	ldr.w	r9, [pc, #76]	; 83e90 <usart_init_rs232+0x64>
	ul_reg_val = 0;
   83e46:	4e13      	ldr	r6, [pc, #76]	; (83e94 <usart_init_rs232+0x68>)
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   83e48:	f8c0 90e4 	str.w	r9, [r0, #228]	; 0xe4
	ul_reg_val = 0;
   83e4c:	6033      	str	r3, [r6, #0]
	p_usart->US_MR = 0;
   83e4e:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   83e50:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   83e52:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   83e54:	f8c0 8000 	str.w	r8, [r0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   83e58:	f8c0 e000 	str.w	lr, [r0]
	p_usart->US_CR = US_CR_RSTSTA;
   83e5c:	f8c0 c000 	str.w	ip, [r0]
	p_usart->US_CR = US_CR_RTSDIS;
   83e60:	6007      	str	r7, [r0, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   83e62:	b191      	cbz	r1, 83e8a <usart_init_rs232+0x5e>
   83e64:	460d      	mov	r5, r1
   83e66:	4b0c      	ldr	r3, [pc, #48]	; (83e98 <usart_init_rs232+0x6c>)
   83e68:	6809      	ldr	r1, [r1, #0]
   83e6a:	4604      	mov	r4, r0
   83e6c:	4798      	blx	r3
   83e6e:	b960      	cbnz	r0, 83e8a <usart_init_rs232+0x5e>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   83e70:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   83e74:	4313      	orrs	r3, r2
   83e76:	692a      	ldr	r2, [r5, #16]
   83e78:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   83e7a:	68ea      	ldr	r2, [r5, #12]
   83e7c:	4313      	orrs	r3, r2
	p_usart->US_MR |= ul_reg_val;
   83e7e:	6862      	ldr	r2, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   83e80:	6033      	str	r3, [r6, #0]
	p_usart->US_MR |= ul_reg_val;
   83e82:	4313      	orrs	r3, r2
   83e84:	6063      	str	r3, [r4, #4]
}
   83e86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   83e8a:	2001      	movs	r0, #1
}
   83e8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83e90:	55534100 	.word	0x55534100
   83e94:	20072250 	.word	0x20072250
   83e98:	00083dd1 	.word	0x00083dd1

00083e9c <usart_init_spi_master>:
{
   83e9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   83ea0:	f04f 0c24 	mov.w	ip, #36	; 0x24
	p_usart->US_MR = 0;
   83ea4:	2400      	movs	r4, #0
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   83ea6:	f04f 0e88 	mov.w	lr, #136	; 0x88
	p_usart->US_CR = US_CR_RSTSTA;
   83eaa:	f44f 7780 	mov.w	r7, #256	; 0x100
	p_usart->US_CR = US_CR_RTSDIS;
   83eae:	f44f 2600 	mov.w	r6, #524288	; 0x80000
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   83eb2:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 83f60 <usart_init_spi_master+0xc4>
	ul_reg_val = 0;
   83eb6:	4d2b      	ldr	r5, [pc, #172]	; (83f64 <usart_init_spi_master+0xc8>)
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   83eb8:	f8c0 80e4 	str.w	r8, [r0, #228]	; 0xe4
	ul_reg_val = 0;
   83ebc:	602c      	str	r4, [r5, #0]
	p_usart->US_MR = 0;
   83ebe:	6044      	str	r4, [r0, #4]
	p_usart->US_RTOR = 0;
   83ec0:	6244      	str	r4, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   83ec2:	6284      	str	r4, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   83ec4:	f8c0 e000 	str.w	lr, [r0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   83ec8:	f8c0 c000 	str.w	ip, [r0]
	p_usart->US_CR = US_CR_RSTSTA;
   83ecc:	6007      	str	r7, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   83ece:	6006      	str	r6, [r0, #0]
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   83ed0:	b1f1      	cbz	r1, 83f10 <usart_init_spi_master+0x74>
   83ed2:	4603      	mov	r3, r0
   83ed4:	6888      	ldr	r0, [r1, #8]
   83ed6:	2803      	cmp	r0, #3
   83ed8:	d81a      	bhi.n	83f10 <usart_init_spi_master+0x74>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   83eda:	6808      	ldr	r0, [r1, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   83edc:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   83ee0:	fbb2 f2f0 	udiv	r2, r2, r0
	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   83ee4:	f64f 70fb 	movw	r0, #65531	; 0xfffb
   83ee8:	1f14      	subs	r4, r2, #4
   83eea:	4284      	cmp	r4, r0
   83eec:	d810      	bhi.n	83f10 <usart_init_spi_master+0x74>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   83eee:	621a      	str	r2, [r3, #32]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   83ef0:	684a      	ldr	r2, [r1, #4]
	switch (p_usart_opt->spi_mode) {
   83ef2:	e9d1 0402 	ldrd	r0, r4, [r1, #8]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   83ef6:	ea42 0104 	orr.w	r1, r2, r4
   83efa:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
   83efe:	f042 020e 	orr.w	r2, r2, #14
   83f02:	602a      	str	r2, [r5, #0]
	switch (p_usart_opt->spi_mode) {
   83f04:	2803      	cmp	r0, #3
   83f06:	d80d      	bhi.n	83f24 <usart_init_spi_master+0x88>
   83f08:	e8df f000 	tbb	[pc, r0]
   83f0c:	121a2005 	.word	0x121a2005
		return 1;
   83f10:	2001      	movs	r0, #1
}
   83f12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ul_reg_val &= ~US_MR_CPOL;
   83f16:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
   83f1a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   83f1e:	f442 7287 	orr.w	r2, r2, #270	; 0x10e
   83f22:	602a      	str	r2, [r5, #0]
	p_usart->US_MR |= ul_reg_val;
   83f24:	6859      	ldr	r1, [r3, #4]
	return 0;
   83f26:	2000      	movs	r0, #0
	p_usart->US_MR |= ul_reg_val;
   83f28:	430a      	orrs	r2, r1
   83f2a:	605a      	str	r2, [r3, #4]
}
   83f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ul_reg_val |= US_MR_CPOL;
   83f30:	f421 7280 	bic.w	r2, r1, #256	; 0x100
   83f34:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
   83f38:	f042 020e 	orr.w	r2, r2, #14
   83f3c:	602a      	str	r2, [r5, #0]
		break;
   83f3e:	e7f1      	b.n	83f24 <usart_init_spi_master+0x88>
		ul_reg_val |= US_MR_CPOL;
   83f40:	f441 22a0 	orr.w	r2, r1, #327680	; 0x50000
   83f44:	f442 7287 	orr.w	r2, r2, #270	; 0x10e
   83f48:	602a      	str	r2, [r5, #0]
		break;
   83f4a:	e7eb      	b.n	83f24 <usart_init_spi_master+0x88>
		ul_reg_val &= ~US_MR_CPOL;
   83f4c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
   83f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   83f54:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   83f58:	f042 020e 	orr.w	r2, r2, #14
   83f5c:	602a      	str	r2, [r5, #0]
		break;
   83f5e:	e7e1      	b.n	83f24 <usart_init_spi_master+0x88>
   83f60:	55534100 	.word	0x55534100
   83f64:	2007224c 	.word	0x2007224c

00083f68 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   83f68:	2340      	movs	r3, #64	; 0x40
   83f6a:	6003      	str	r3, [r0, #0]
}
   83f6c:	4770      	bx	lr
   83f6e:	bf00      	nop

00083f70 <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   83f70:	2380      	movs	r3, #128	; 0x80
   83f72:	6003      	str	r3, [r0, #0]
}
   83f74:	4770      	bx	lr
   83f76:	bf00      	nop

00083f78 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   83f78:	2310      	movs	r3, #16
   83f7a:	6003      	str	r3, [r0, #0]
}
   83f7c:	4770      	bx	lr
   83f7e:	bf00      	nop

00083f80 <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   83f80:	2320      	movs	r3, #32
   83f82:	6003      	str	r3, [r0, #0]
}
   83f84:	4770      	bx	lr
   83f86:	bf00      	nop

00083f88 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   83f88:	6081      	str	r1, [r0, #8]
}
   83f8a:	4770      	bx	lr

00083f8c <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   83f8c:	60c1      	str	r1, [r0, #12]
}
   83f8e:	4770      	bx	lr

00083f90 <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   83f90:	6900      	ldr	r0, [r0, #16]
}
   83f92:	4770      	bx	lr

00083f94 <usart_get_status>:
	return p_usart->US_CSR;
   83f94:	6940      	ldr	r0, [r0, #20]
}
   83f96:	4770      	bx	lr

00083f98 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   83f98:	6943      	ldr	r3, [r0, #20]
   83f9a:	079b      	lsls	r3, r3, #30
   83f9c:	d5fc      	bpl.n	83f98 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   83f9e:	f3c1 0108 	ubfx	r1, r1, #0, #9
   83fa2:	61c1      	str	r1, [r0, #28]
}
   83fa4:	2000      	movs	r0, #0
   83fa6:	4770      	bx	lr

00083fa8 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83fa8:	4a31      	ldr	r2, [pc, #196]	; (84070 <SystemCoreClockUpdate+0xc8>)
   83faa:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83fac:	f003 0303 	and.w	r3, r3, #3
   83fb0:	2b01      	cmp	r3, #1
   83fb2:	d02c      	beq.n	8400e <SystemCoreClockUpdate+0x66>
   83fb4:	3b02      	subs	r3, #2
   83fb6:	2b01      	cmp	r3, #1
   83fb8:	d81e      	bhi.n	83ff8 <SystemCoreClockUpdate+0x50>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83fba:	6a13      	ldr	r3, [r2, #32]
   83fbc:	01d9      	lsls	r1, r3, #7
   83fbe:	d538      	bpl.n	84032 <SystemCoreClockUpdate+0x8a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83fc0:	482c      	ldr	r0, [pc, #176]	; (84074 <SystemCoreClockUpdate+0xcc>)
   83fc2:	4b2d      	ldr	r3, [pc, #180]	; (84078 <SystemCoreClockUpdate+0xd0>)
   83fc4:	6003      	str	r3, [r0, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   83fc6:	4a2a      	ldr	r2, [pc, #168]	; (84070 <SystemCoreClockUpdate+0xc8>)
   83fc8:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83fca:	f003 0303 	and.w	r3, r3, #3
   83fce:	2b02      	cmp	r3, #2
   83fd0:	d03c      	beq.n	8404c <SystemCoreClockUpdate+0xa4>
   83fd2:	4b2a      	ldr	r3, [pc, #168]	; (8407c <SystemCoreClockUpdate+0xd4>)
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83fd4:	4926      	ldr	r1, [pc, #152]	; (84070 <SystemCoreClockUpdate+0xc8>)
   83fd6:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   83fd8:	f002 0270 	and.w	r2, r2, #112	; 0x70
   83fdc:	2a70      	cmp	r2, #112	; 0x70
   83fde:	d005      	beq.n	83fec <SystemCoreClockUpdate+0x44>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   83fe0:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   83fe2:	f3c2 1202 	ubfx	r2, r2, #4, #3
   83fe6:	40d3      	lsrs	r3, r2
   83fe8:	6003      	str	r3, [r0, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   83fea:	4770      	bx	lr
		SystemCoreClock /= 3U;
   83fec:	4a24      	ldr	r2, [pc, #144]	; (84080 <SystemCoreClockUpdate+0xd8>)
   83fee:	fba2 2303 	umull	r2, r3, r2, r3
   83ff2:	085b      	lsrs	r3, r3, #1
   83ff4:	6003      	str	r3, [r0, #0]
}
   83ff6:	4770      	bx	lr
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   83ff8:	4b22      	ldr	r3, [pc, #136]	; (84084 <SystemCoreClockUpdate+0xdc>)
   83ffa:	481e      	ldr	r0, [pc, #120]	; (84074 <SystemCoreClockUpdate+0xcc>)
   83ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   83ffe:	f013 0f80 	tst.w	r3, #128	; 0x80
   84002:	bf14      	ite	ne
   84004:	f44f 4300 	movne.w	r3, #32768	; 0x8000
   84008:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
   8400c:	e7e2      	b.n	83fd4 <SystemCoreClockUpdate+0x2c>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8400e:	6a13      	ldr	r3, [r2, #32]
   84010:	01db      	lsls	r3, r3, #7
   84012:	d40b      	bmi.n	8402c <SystemCoreClockUpdate+0x84>
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84014:	6a12      	ldr	r2, [r2, #32]
   84016:	f002 0270 	and.w	r2, r2, #112	; 0x70
   8401a:	2a10      	cmp	r2, #16
   8401c:	d021      	beq.n	84062 <SystemCoreClockUpdate+0xba>
   8401e:	4b16      	ldr	r3, [pc, #88]	; (84078 <SystemCoreClockUpdate+0xd0>)
   84020:	4919      	ldr	r1, [pc, #100]	; (84088 <SystemCoreClockUpdate+0xe0>)
   84022:	4814      	ldr	r0, [pc, #80]	; (84074 <SystemCoreClockUpdate+0xcc>)
   84024:	2a20      	cmp	r2, #32
   84026:	bf18      	it	ne
   84028:	460b      	movne	r3, r1
   8402a:	e7d3      	b.n	83fd4 <SystemCoreClockUpdate+0x2c>
   8402c:	4b12      	ldr	r3, [pc, #72]	; (84078 <SystemCoreClockUpdate+0xd0>)
   8402e:	4811      	ldr	r0, [pc, #68]	; (84074 <SystemCoreClockUpdate+0xcc>)
   84030:	e7d0      	b.n	83fd4 <SystemCoreClockUpdate+0x2c>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   84032:	4b15      	ldr	r3, [pc, #84]	; (84088 <SystemCoreClockUpdate+0xe0>)
   84034:	480f      	ldr	r0, [pc, #60]	; (84074 <SystemCoreClockUpdate+0xcc>)
   84036:	6003      	str	r3, [r0, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   84038:	6a13      	ldr	r3, [r2, #32]
   8403a:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8403e:	2b10      	cmp	r3, #16
   84040:	d012      	beq.n	84068 <SystemCoreClockUpdate+0xc0>
   84042:	2b20      	cmp	r3, #32
   84044:	d1bf      	bne.n	83fc6 <SystemCoreClockUpdate+0x1e>
				SystemCoreClock *= 3U;
   84046:	4b0c      	ldr	r3, [pc, #48]	; (84078 <SystemCoreClockUpdate+0xd0>)
   84048:	6003      	str	r3, [r0, #0]
				break;
   8404a:	e7bc      	b.n	83fc6 <SystemCoreClockUpdate+0x1e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8404c:	6a91      	ldr	r1, [r2, #40]	; 0x28
   8404e:	6803      	ldr	r3, [r0, #0]
   84050:	f3c1 410a 	ubfx	r1, r1, #16, #11
   84054:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   84058:	6a92      	ldr	r2, [r2, #40]	; 0x28
   8405a:	b2d2      	uxtb	r2, r2
   8405c:	fbb3 f3f2 	udiv	r3, r3, r2
   84060:	e7b8      	b.n	83fd4 <SystemCoreClockUpdate+0x2c>
   84062:	4b0a      	ldr	r3, [pc, #40]	; (8408c <SystemCoreClockUpdate+0xe4>)
   84064:	4803      	ldr	r0, [pc, #12]	; (84074 <SystemCoreClockUpdate+0xcc>)
   84066:	e7b5      	b.n	83fd4 <SystemCoreClockUpdate+0x2c>
				SystemCoreClock *= 2U;
   84068:	4b08      	ldr	r3, [pc, #32]	; (8408c <SystemCoreClockUpdate+0xe4>)
   8406a:	6003      	str	r3, [r0, #0]
				break;
   8406c:	e7ab      	b.n	83fc6 <SystemCoreClockUpdate+0x1e>
   8406e:	bf00      	nop
   84070:	400e0600 	.word	0x400e0600
   84074:	20070994 	.word	0x20070994
   84078:	00b71b00 	.word	0x00b71b00
   8407c:	0e4e1c00 	.word	0x0e4e1c00
   84080:	aaaaaaab 	.word	0xaaaaaaab
   84084:	400e1a00 	.word	0x400e1a00
   84088:	003d0900 	.word	0x003d0900
   8408c:	007a1200 	.word	0x007a1200

00084090 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   84090:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   84094:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   84098:	670a      	str	r2, [r1, #112]	; 0x70
}
   8409a:	4770      	bx	lr

0008409c <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   8409c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   840a0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   840a4:	674a      	str	r2, [r1, #116]	; 0x74
}
   840a6:	4770      	bx	lr

000840a8 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   840a8:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   840ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   840b0:	678a      	str	r2, [r1, #120]	; 0x78
}
   840b2:	4770      	bx	lr

000840b4 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   840b4:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   840b8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   840bc:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
}
   840c0:	4770      	bx	lr
   840c2:	bf00      	nop

000840c4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   840c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   840c6:	4b12      	ldr	r3, [pc, #72]	; (84110 <pio_handler_process+0x4c>)
{
   840c8:	4604      	mov	r4, r0
   840ca:	460e      	mov	r6, r1
	status = pio_get_interrupt_status(p_pio);
   840cc:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
   840ce:	4b11      	ldr	r3, [pc, #68]	; (84114 <pio_handler_process+0x50>)
	status = pio_get_interrupt_status(p_pio);
   840d0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   840d2:	4620      	mov	r0, r4
   840d4:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   840d6:	4005      	ands	r5, r0
   840d8:	d019      	beq.n	8410e <pio_handler_process+0x4a>
   840da:	4c0f      	ldr	r4, [pc, #60]	; (84118 <pio_handler_process+0x54>)
   840dc:	f104 0760 	add.w	r7, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   840e0:	6823      	ldr	r3, [r4, #0]
   840e2:	42b3      	cmp	r3, r6
   840e4:	d005      	beq.n	840f2 <pio_handler_process+0x2e>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   840e6:	42bc      	cmp	r4, r7
   840e8:	d011      	beq.n	8410e <pio_handler_process+0x4a>
			if (gs_interrupt_sources[i].id == ul_id) {
   840ea:	6923      	ldr	r3, [r4, #16]
		while (status != 0) {
   840ec:	3410      	adds	r4, #16
			if (gs_interrupt_sources[i].id == ul_id) {
   840ee:	42b3      	cmp	r3, r6
   840f0:	d1f9      	bne.n	840e6 <pio_handler_process+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   840f2:	6861      	ldr	r1, [r4, #4]
   840f4:	4229      	tst	r1, r5
   840f6:	d0f6      	beq.n	840e6 <pio_handler_process+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   840f8:	68e3      	ldr	r3, [r4, #12]
   840fa:	4630      	mov	r0, r6
   840fc:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   840fe:	6863      	ldr	r3, [r4, #4]
			if (i >= MAX_INTERRUPT_SOURCES) {
   84100:	42bc      	cmp	r4, r7
					status &= ~(gs_interrupt_sources[i].mask);
   84102:	ea25 0503 	bic.w	r5, r5, r3
			if (i >= MAX_INTERRUPT_SOURCES) {
   84106:	d002      	beq.n	8410e <pio_handler_process+0x4a>
		while (status != 0) {
   84108:	3410      	adds	r4, #16
   8410a:	2d00      	cmp	r5, #0
   8410c:	d1e8      	bne.n	840e0 <pio_handler_process+0x1c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   8410e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   84110:	000845d5 	.word	0x000845d5
   84114:	000845d9 	.word	0x000845d9
   84118:	20072254 	.word	0x20072254

0008411c <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   8411c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   84120:	4f1d      	ldr	r7, [pc, #116]	; (84198 <pio_handler_set+0x7c>)
   84122:	683e      	ldr	r6, [r7, #0]
   84124:	2e06      	cmp	r6, #6
   84126:	d828      	bhi.n	8417a <pio_handler_set+0x5e>
   84128:	460d      	mov	r5, r1
   8412a:	4611      	mov	r1, r2
   8412c:	461a      	mov	r2, r3
   8412e:	4b1b      	ldr	r3, [pc, #108]	; (8419c <pio_handler_set+0x80>)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   84130:	f04f 0e00 	mov.w	lr, #0
   84134:	469c      	mov	ip, r3
   84136:	f106 0801 	add.w	r8, r6, #1
   8413a:	e004      	b.n	84146 <pio_handler_set+0x2a>
   8413c:	4576      	cmp	r6, lr
   8413e:	f10c 0c10 	add.w	ip, ip, #16
   84142:	d01d      	beq.n	84180 <pio_handler_set+0x64>
   84144:	46a6      	mov	lr, r4
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   84146:	f8dc 9000 	ldr.w	r9, [ip]
   8414a:	f10e 0401 	add.w	r4, lr, #1
   8414e:	45a9      	cmp	r9, r5
   84150:	d1f4      	bne.n	8413c <pio_handler_set+0x20>
   84152:	f8dc 9004 	ldr.w	r9, [ip, #4]
   84156:	4589      	cmp	r9, r1
   84158:	d1f0      	bne.n	8413c <pio_handler_set+0x20>

	/* Define new source */
	pSource->id = ul_id;
	pSource->mask = ul_mask;
	pSource->attr = ul_attr;
	pSource->handler = p_handler;
   8415a:	9e08      	ldr	r6, [sp, #32]
	pSource->id = ul_id;
   8415c:	eb03 140e 	add.w	r4, r3, lr, lsl #4
	pSource->attr = ul_attr;
   84160:	e9c4 1201 	strd	r1, r2, [r4, #4]
	pSource->handler = p_handler;
   84164:	60e6      	str	r6, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   84166:	45f0      	cmp	r8, lr
	pSource->id = ul_id;
   84168:	ea4f 140e 	mov.w	r4, lr, lsl #4
   8416c:	511d      	str	r5, [r3, r4]
	if (i == gs_ul_nb_sources + 1) {
   8416e:	d00f      	beq.n	84190 <pio_handler_set+0x74>
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   84170:	4b0b      	ldr	r3, [pc, #44]	; (841a0 <pio_handler_set+0x84>)
   84172:	4798      	blx	r3

	return 0;
   84174:	2000      	movs	r0, #0
}
   84176:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   8417a:	2001      	movs	r0, #1
}
   8417c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	pSource->id = ul_id;
   84180:	eb03 1406 	add.w	r4, r3, r6, lsl #4
   84184:	0136      	lsls	r6, r6, #4
   84186:	519d      	str	r5, [r3, r6]
	pSource->attr = ul_attr;
   84188:	e9c4 1201 	strd	r1, r2, [r4, #4]
	pSource->handler = p_handler;
   8418c:	9b08      	ldr	r3, [sp, #32]
   8418e:	60e3      	str	r3, [r4, #12]
		gs_ul_nb_sources++;
   84190:	f8c7 8000 	str.w	r8, [r7]
   84194:	e7ec      	b.n	84170 <pio_handler_set+0x54>
   84196:	bf00      	nop
   84198:	200722c4 	.word	0x200722c4
   8419c:	20072254 	.word	0x20072254
   841a0:	000845a9 	.word	0x000845a9

000841a4 <PIOA_Handler>:
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
	pio_handler_process(PIOA, ID_PIOA);
   841a4:	210b      	movs	r1, #11
   841a6:	4801      	ldr	r0, [pc, #4]	; (841ac <PIOA_Handler+0x8>)
   841a8:	4b01      	ldr	r3, [pc, #4]	; (841b0 <PIOA_Handler+0xc>)
   841aa:	4718      	bx	r3
   841ac:	400e0e00 	.word	0x400e0e00
   841b0:	000840c5 	.word	0x000840c5

000841b4 <PIOB_Handler>:
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
    pio_handler_process(PIOB, ID_PIOB);
   841b4:	210c      	movs	r1, #12
   841b6:	4801      	ldr	r0, [pc, #4]	; (841bc <PIOB_Handler+0x8>)
   841b8:	4b01      	ldr	r3, [pc, #4]	; (841c0 <PIOB_Handler+0xc>)
   841ba:	4718      	bx	r3
   841bc:	400e1000 	.word	0x400e1000
   841c0:	000840c5 	.word	0x000840c5

000841c4 <PIOC_Handler>:
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
	pio_handler_process(PIOC, ID_PIOC);
   841c4:	210d      	movs	r1, #13
   841c6:	4801      	ldr	r0, [pc, #4]	; (841cc <PIOC_Handler+0x8>)
   841c8:	4b01      	ldr	r3, [pc, #4]	; (841d0 <PIOC_Handler+0xc>)
   841ca:	4718      	bx	r3
   841cc:	400e1200 	.word	0x400e1200
   841d0:	000840c5 	.word	0x000840c5

000841d4 <PIOD_Handler>:
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
	pio_handler_process(PIOD, ID_PIOD);
   841d4:	210e      	movs	r1, #14
   841d6:	4801      	ldr	r0, [pc, #4]	; (841dc <PIOD_Handler+0x8>)
   841d8:	4b01      	ldr	r3, [pc, #4]	; (841e0 <PIOD_Handler+0xc>)
   841da:	4718      	bx	r3
   841dc:	400e1400 	.word	0x400e1400
   841e0:	000840c5 	.word	0x000840c5

000841e4 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   841e4:	3801      	subs	r0, #1
   841e6:	2802      	cmp	r0, #2
   841e8:	d81a      	bhi.n	84220 <_write+0x3c>
		return -1;
	}

	for (; len != 0; --len) {
   841ea:	b1da      	cbz	r2, 84224 <_write+0x40>
{
   841ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   841f0:	460d      	mov	r5, r1
	for (; len != 0; --len) {
   841f2:	4614      	mov	r4, r2
   841f4:	4f0c      	ldr	r7, [pc, #48]	; (84228 <_write+0x44>)
   841f6:	f8df 8034 	ldr.w	r8, [pc, #52]	; 8422c <_write+0x48>
   841fa:	1c56      	adds	r6, r2, #1
   841fc:	e001      	b.n	84202 <_write+0x1e>
   841fe:	3c01      	subs	r4, #1
   84200:	d00b      	beq.n	8421a <_write+0x36>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   84202:	6838      	ldr	r0, [r7, #0]
   84204:	f8d8 3000 	ldr.w	r3, [r8]
   84208:	f815 1b01 	ldrb.w	r1, [r5], #1
   8420c:	4798      	blx	r3
   8420e:	2800      	cmp	r0, #0
   84210:	eba6 0204 	sub.w	r2, r6, r4
   84214:	daf3      	bge.n	841fe <_write+0x1a>
		return -1;
   84216:	f04f 32ff 	mov.w	r2, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   8421a:	4610      	mov	r0, r2
   8421c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   84220:	f04f 32ff 	mov.w	r2, #4294967295
}
   84224:	4610      	mov	r0, r2
   84226:	4770      	bx	lr
   84228:	200722cc 	.word	0x200722cc
   8422c:	200722c8 	.word	0x200722c8

00084230 <sysclk_enable_usb>:
		pmc_enable_upll_clock();
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
		pmc_enable_udpck();
		return;
	}
}
   84230:	4770      	bx	lr
   84232:	bf00      	nop

00084234 <sysclk_disable_usb>:
 *
 * \note This implementation does not switch off the PLL, it just turns off the USB clock.
 */
void sysclk_disable_usb(void)
{
	pmc_disable_udpck();
   84234:	4b00      	ldr	r3, [pc, #0]	; (84238 <sysclk_disable_usb+0x4>)
   84236:	4718      	bx	r3
   84238:	00084441 	.word	0x00084441

0008423c <sysclk_init>:
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8423c:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8423e:	480f      	ldr	r0, [pc, #60]	; (8427c <sysclk_init+0x40>)
   84240:	4d0f      	ldr	r5, [pc, #60]	; (84280 <sysclk_init+0x44>)
   84242:	47a8      	blx	r5
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   84244:	213e      	movs	r1, #62	; 0x3e
   84246:	2000      	movs	r0, #0
   84248:	4b0e      	ldr	r3, [pc, #56]	; (84284 <sysclk_init+0x48>)
   8424a:	4798      	blx	r3
		break;
   8424c:	4c0e      	ldr	r4, [pc, #56]	; (84288 <sysclk_init+0x4c>)
		return pmc_osc_is_ready_mainck();
   8424e:	47a0      	blx	r4
   84250:	2800      	cmp	r0, #0
   84252:	d0fc      	beq.n	8424e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   84254:	4b0d      	ldr	r3, [pc, #52]	; (8428c <sysclk_init+0x50>)
   84256:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   84258:	4b0d      	ldr	r3, [pc, #52]	; (84290 <sysclk_init+0x54>)
   8425a:	4a0e      	ldr	r2, [pc, #56]	; (84294 <sysclk_init+0x58>)
   8425c:	4c0e      	ldr	r4, [pc, #56]	; (84298 <sysclk_init+0x5c>)
   8425e:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   84260:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   84262:	2800      	cmp	r0, #0
   84264:	d0fc      	beq.n	84260 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   84266:	4b0d      	ldr	r3, [pc, #52]	; (8429c <sysclk_init+0x60>)
   84268:	2010      	movs	r0, #16
   8426a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8426c:	4b0c      	ldr	r3, [pc, #48]	; (842a0 <sysclk_init+0x64>)
   8426e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   84270:	462b      	mov	r3, r5

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   84272:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
   84276:	4801      	ldr	r0, [pc, #4]	; (8427c <sysclk_init+0x40>)
   84278:	4718      	bx	r3
   8427a:	bf00      	nop
   8427c:	0501bd00 	.word	0x0501bd00
   84280:	2007008d 	.word	0x2007008d
   84284:	0008435d 	.word	0x0008435d
   84288:	000843ad 	.word	0x000843ad
   8428c:	000843bd 	.word	0x000843bd
   84290:	400e0600 	.word	0x400e0600
   84294:	200d3f01 	.word	0x200d3f01
   84298:	000843cd 	.word	0x000843cd
   8429c:	00084301 	.word	0x00084301
   842a0:	00083fa9 	.word	0x00083fa9

000842a4 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   842a4:	4915      	ldr	r1, [pc, #84]	; (842fc <pmc_switch_mck_to_mainck+0x58>)
   842a6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   842a8:	f023 0303 	bic.w	r3, r3, #3
   842ac:	f043 0301 	orr.w	r3, r3, #1
   842b0:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   842b2:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   842b4:	071b      	lsls	r3, r3, #28
   842b6:	bf58      	it	pl
   842b8:	f44f 6300 	movpl.w	r3, #2048	; 0x800
   842bc:	d502      	bpl.n	842c4 <pmc_switch_mck_to_mainck+0x20>
   842be:	e004      	b.n	842ca <pmc_switch_mck_to_mainck+0x26>
			--ul_timeout) {
		if (ul_timeout == 0) {
   842c0:	3b01      	subs	r3, #1
   842c2:	d016      	beq.n	842f2 <pmc_switch_mck_to_mainck+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   842c4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   842c6:	0712      	lsls	r2, r2, #28
   842c8:	d5fa      	bpl.n	842c0 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   842ca:	490c      	ldr	r1, [pc, #48]	; (842fc <pmc_switch_mck_to_mainck+0x58>)
   842cc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   842ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   842d2:	4303      	orrs	r3, r0
   842d4:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   842d6:	6e88      	ldr	r0, [r1, #104]	; 0x68
   842d8:	f010 0008 	ands.w	r0, r0, #8
   842dc:	bf08      	it	eq
   842de:	f44f 6300 	moveq.w	r3, #2048	; 0x800
   842e2:	d002      	beq.n	842ea <pmc_switch_mck_to_mainck+0x46>
   842e4:	e007      	b.n	842f6 <pmc_switch_mck_to_mainck+0x52>
			--ul_timeout) {
		if (ul_timeout == 0) {
   842e6:	3b01      	subs	r3, #1
   842e8:	d003      	beq.n	842f2 <pmc_switch_mck_to_mainck+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   842ea:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   842ec:	0712      	lsls	r2, r2, #28
   842ee:	d5fa      	bpl.n	842e6 <pmc_switch_mck_to_mainck+0x42>
			return 1;
		}
	}

	return 0;
}
   842f0:	4770      	bx	lr
			return 1;
   842f2:	2001      	movs	r0, #1
   842f4:	4770      	bx	lr
	return 0;
   842f6:	2000      	movs	r0, #0
   842f8:	4770      	bx	lr
   842fa:	bf00      	nop
   842fc:	400e0600 	.word	0x400e0600

00084300 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   84300:	4915      	ldr	r1, [pc, #84]	; (84358 <pmc_switch_mck_to_pllack+0x58>)
   84302:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84304:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   84308:	4303      	orrs	r3, r0
   8430a:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8430c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   8430e:	071b      	lsls	r3, r3, #28
   84310:	bf58      	it	pl
   84312:	f44f 6300 	movpl.w	r3, #2048	; 0x800
   84316:	d502      	bpl.n	8431e <pmc_switch_mck_to_pllack+0x1e>
   84318:	e004      	b.n	84324 <pmc_switch_mck_to_pllack+0x24>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8431a:	3b01      	subs	r3, #1
   8431c:	d017      	beq.n	8434e <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8431e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   84320:	0710      	lsls	r0, r2, #28
   84322:	d5fa      	bpl.n	8431a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   84324:	490c      	ldr	r1, [pc, #48]	; (84358 <pmc_switch_mck_to_pllack+0x58>)
   84326:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   84328:	f023 0303 	bic.w	r3, r3, #3
   8432c:	f043 0302 	orr.w	r3, r3, #2
   84330:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84332:	6e88      	ldr	r0, [r1, #104]	; 0x68
   84334:	f010 0008 	ands.w	r0, r0, #8
   84338:	bf08      	it	eq
   8433a:	f44f 6300 	moveq.w	r3, #2048	; 0x800
   8433e:	d002      	beq.n	84346 <pmc_switch_mck_to_pllack+0x46>
   84340:	e007      	b.n	84352 <pmc_switch_mck_to_pllack+0x52>
			--ul_timeout) {
		if (ul_timeout == 0) {
   84342:	3b01      	subs	r3, #1
   84344:	d003      	beq.n	8434e <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   84346:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   84348:	0712      	lsls	r2, r2, #28
   8434a:	d5fa      	bpl.n	84342 <pmc_switch_mck_to_pllack+0x42>
			return 1;
		}
	}

	return 0;
}
   8434c:	4770      	bx	lr
			return 1;
   8434e:	2001      	movs	r0, #1
   84350:	4770      	bx	lr
	return 0;
   84352:	2000      	movs	r0, #0
   84354:	4770      	bx	lr
   84356:	bf00      	nop
   84358:	400e0600 	.word	0x400e0600

0008435c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8435c:	b138      	cbz	r0, 8436e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8435e:	4910      	ldr	r1, [pc, #64]	; (843a0 <pmc_switch_mainck_to_xtal+0x44>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   84360:	4a10      	ldr	r2, [pc, #64]	; (843a4 <pmc_switch_mainck_to_xtal+0x48>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   84362:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   84364:	4b10      	ldr	r3, [pc, #64]	; (843a8 <pmc_switch_mainck_to_xtal+0x4c>)
   84366:	4002      	ands	r2, r0
   84368:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8436a:	620b      	str	r3, [r1, #32]
   8436c:	4770      	bx	lr
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8436e:	4a0c      	ldr	r2, [pc, #48]	; (843a0 <pmc_switch_mainck_to_xtal+0x44>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   84370:	0209      	lsls	r1, r1, #8
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   84372:	6a10      	ldr	r0, [r2, #32]
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   84374:	b28b      	uxth	r3, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   84376:	f420 115c 	bic.w	r1, r0, #3604480	; 0x370000
   8437a:	f021 0103 	bic.w	r1, r1, #3
   8437e:	430b      	orrs	r3, r1
   84380:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   84384:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   84388:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8438a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8438c:	07db      	lsls	r3, r3, #31
   8438e:	d5fc      	bpl.n	8438a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   84390:	6a13      	ldr	r3, [r2, #32]
   84392:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   84396:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8439a:	6213      	str	r3, [r2, #32]
	}
}
   8439c:	4770      	bx	lr
   8439e:	bf00      	nop
   843a0:	400e0600 	.word	0x400e0600
   843a4:	fec8fffc 	.word	0xfec8fffc
   843a8:	01370002 	.word	0x01370002

000843ac <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   843ac:	4b02      	ldr	r3, [pc, #8]	; (843b8 <pmc_osc_is_ready_mainck+0xc>)
   843ae:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   843b0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   843b4:	4770      	bx	lr
   843b6:	bf00      	nop
   843b8:	400e0600 	.word	0x400e0600

000843bc <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   843bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   843c0:	4b01      	ldr	r3, [pc, #4]	; (843c8 <pmc_disable_pllack+0xc>)
   843c2:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   843c4:	4770      	bx	lr
   843c6:	bf00      	nop
   843c8:	400e0600 	.word	0x400e0600

000843cc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   843cc:	4b02      	ldr	r3, [pc, #8]	; (843d8 <pmc_is_locked_pllack+0xc>)
   843ce:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   843d0:	f000 0002 	and.w	r0, r0, #2
   843d4:	4770      	bx	lr
   843d6:	bf00      	nop
   843d8:	400e0600 	.word	0x400e0600

000843dc <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   843dc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
   843e0:	4a02      	ldr	r2, [pc, #8]	; (843ec <pmc_enable_upll_clock+0x10>)
   843e2:	61d3      	str	r3, [r2, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   843e4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   843e6:	065b      	lsls	r3, r3, #25
   843e8:	d5fc      	bpl.n	843e4 <pmc_enable_upll_clock+0x8>
}
   843ea:	4770      	bx	lr
   843ec:	400e0600 	.word	0x400e0600

000843f0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   843f0:	4602      	mov	r2, r0
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   843f2:	4b06      	ldr	r3, [pc, #24]	; (8440c <pmc_enable_periph_clk+0x1c>)
   843f4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   843f8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   843fc:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   84400:	2000      	movs	r0, #0
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   84402:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   84406:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   8440a:	4770      	bx	lr
   8440c:	400e0600 	.word	0x400e0600

00084410 <pmc_disable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_disable_periph_clk(uint32_t ul_id)
{
   84410:	4602      	mov	r2, r0
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   84412:	4b06      	ldr	r3, [pc, #24]	; (8442c <pmc_disable_periph_clk+0x1c>)
   84414:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   84418:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
   8441c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
		}
#endif
	}
	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   84420:	2000      	movs	r0, #0
	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
   84422:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
	PMC->PMC_PCR = pcr;
   84426:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   8442a:	4770      	bx	lr
   8442c:	400e0600 	.word	0x400e0600

00084430 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   84430:	f44f 7380 	mov.w	r3, #256	; 0x100
   84434:	4a01      	ldr	r2, [pc, #4]	; (8443c <pmc_enable_pck+0xc>)
   84436:	4083      	lsls	r3, r0
   84438:	6013      	str	r3, [r2, #0]
}
   8443a:	4770      	bx	lr
   8443c:	400e0600 	.word	0x400e0600

00084440 <pmc_disable_udpck>:
#if (SAM3S || SAM4S || SAM4E || SAMG55)
	PMC->PMC_SCDR = PMC_SCDR_UDP;
#elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
	PMC->PMC_SCDR = PMC_SCDR_USBCLK;
#else
	PMC->PMC_SCDR = PMC_SCDR_UOTGCLK;
   84440:	2220      	movs	r2, #32
   84442:	4b01      	ldr	r3, [pc, #4]	; (84448 <pmc_disable_udpck+0x8>)
   84444:	605a      	str	r2, [r3, #4]
# endif
}
   84446:	4770      	bx	lr
   84448:	400e0600 	.word	0x400e0600

0008444c <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   8444c:	4b03      	ldr	r3, [pc, #12]	; (8445c <pmc_set_fast_startup_input+0x10>)
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   8444e:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   84452:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   84454:	4310      	orrs	r0, r2
   84456:	6718      	str	r0, [r3, #112]	; 0x70
}
   84458:	4770      	bx	lr
   8445a:	bf00      	nop
   8445c:	400e0600 	.word	0x400e0600

00084460 <udi_vendor_getsetting>:
	return false; // Not supported request
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
   84460:	4b01      	ldr	r3, [pc, #4]	; (84468 <udi_vendor_getsetting+0x8>)
}
   84462:	7818      	ldrb	r0, [r3, #0]
   84464:	4770      	bx	lr
   84466:	bf00      	nop
   84468:	200722d0 	.word	0x200722d0

0008446c <udi_vendor_disable>:
	if (0 == udi_vendor_alternate_setting) {
   8446c:	4b02      	ldr	r3, [pc, #8]	; (84478 <udi_vendor_disable+0xc>)
   8446e:	781b      	ldrb	r3, [r3, #0]
   84470:	b103      	cbz	r3, 84474 <udi_vendor_disable+0x8>
}
   84472:	4770      	bx	lr
		UDI_VENDOR_DISABLE_EXT();
   84474:	4b01      	ldr	r3, [pc, #4]	; (8447c <udi_vendor_disable+0x10>)
   84476:	4718      	bx	r3
   84478:	200722d0 	.word	0x200722d0
   8447c:	00081efd 	.word	0x00081efd

00084480 <udi_vendor_setup>:
	if (Udd_setup_is_in()) {
   84480:	4b08      	ldr	r3, [pc, #32]	; (844a4 <udi_vendor_setup+0x24>)
   84482:	f993 2000 	ldrsb.w	r2, [r3]
   84486:	781b      	ldrb	r3, [r3, #0]
   84488:	2a00      	cmp	r2, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8448a:	f003 0360 	and.w	r3, r3, #96	; 0x60
	if (Udd_setup_is_in()) {
   8448e:	db03      	blt.n	84498 <udi_vendor_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84490:	2b40      	cmp	r3, #64	; 0x40
   84492:	d005      	beq.n	844a0 <udi_vendor_setup+0x20>
}
   84494:	2000      	movs	r0, #0
   84496:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   84498:	2b40      	cmp	r3, #64	; 0x40
   8449a:	d1fb      	bne.n	84494 <udi_vendor_setup+0x14>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   8449c:	4b02      	ldr	r3, [pc, #8]	; (844a8 <udi_vendor_setup+0x28>)
   8449e:	4718      	bx	r3
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   844a0:	4b02      	ldr	r3, [pc, #8]	; (844ac <udi_vendor_setup+0x2c>)
   844a2:	4718      	bx	r3
   844a4:	200723a4 	.word	0x200723a4
   844a8:	00081f59 	.word	0x00081f59
   844ac:	00081f09 	.word	0x00081f09

000844b0 <udi_vendor_enable>:
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   844b0:	4b06      	ldr	r3, [pc, #24]	; (844cc <udi_vendor_enable+0x1c>)
{
   844b2:	b510      	push	{r4, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   844b4:	4798      	blx	r3
   844b6:	4a06      	ldr	r2, [pc, #24]	; (844d0 <udi_vendor_enable+0x20>)
   844b8:	78c3      	ldrb	r3, [r0, #3]
   844ba:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   844bc:	b10b      	cbz	r3, 844c2 <udi_vendor_enable+0x12>
}
   844be:	2001      	movs	r0, #1
   844c0:	bd10      	pop	{r4, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   844c2:	4b04      	ldr	r3, [pc, #16]	; (844d4 <udi_vendor_enable+0x24>)
}
   844c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   844c8:	4718      	bx	r3
   844ca:	bf00      	nop
   844cc:	00081739 	.word	0x00081739
   844d0:	200722d0 	.word	0x200722d0
   844d4:	00081ed5 	.word	0x00081ed5

000844d8 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   844d8:	b530      	push	{r4, r5, lr}
   844da:	4684      	mov	ip, r0
   844dc:	4615      	mov	r5, r2
   844de:	b083      	sub	sp, #12
   844e0:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   844e2:	4662      	mov	r2, ip
   844e4:	2100      	movs	r1, #0
   844e6:	4c03      	ldr	r4, [pc, #12]	; (844f4 <udi_vendor_bulk_in_run+0x1c>)
   844e8:	9500      	str	r5, [sp, #0]
   844ea:	2081      	movs	r0, #129	; 0x81
   844ec:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   844ee:	b003      	add	sp, #12
   844f0:	bd30      	pop	{r4, r5, pc}
   844f2:	bf00      	nop
   844f4:	000854b1 	.word	0x000854b1

000844f8 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   844f8:	b530      	push	{r4, r5, lr}
   844fa:	4684      	mov	ip, r0
   844fc:	4615      	mov	r5, r2
   844fe:	b083      	sub	sp, #12
   84500:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   84502:	4662      	mov	r2, ip
   84504:	2100      	movs	r1, #0
   84506:	4c03      	ldr	r4, [pc, #12]	; (84514 <udi_vendor_bulk_out_run+0x1c>)
   84508:	9500      	str	r5, [sp, #0]
   8450a:	2002      	movs	r0, #2
   8450c:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   8450e:	b003      	add	sp, #12
   84510:	bd30      	pop	{r4, r5, pc}
   84512:	bf00      	nop
   84514:	000854b1 	.word	0x000854b1

00084518 <switch_configurations>:

// hack to get around windows being unable to handle multiple configurations
#if NAEUSB_MPSSE_SUPPORT == 1
void switch_configurations()
{
	udc_config.conf_lsfs->desc = (usb_conf_desc_t *)&udc_desc_fs_mpsse;
   84518:	4b06      	ldr	r3, [pc, #24]	; (84534 <switch_configurations+0x1c>)
   8451a:	4807      	ldr	r0, [pc, #28]	; (84538 <switch_configurations+0x20>)
   8451c:	6859      	ldr	r1, [r3, #4]
	udc_config.conf_lsfs->udi_apis = mpsse_udi_apis;
   8451e:	4a07      	ldr	r2, [pc, #28]	; (8453c <switch_configurations+0x24>)
	udc_config.conf_lsfs->desc = (usb_conf_desc_t *)&udc_desc_fs_mpsse;
   84520:	6008      	str	r0, [r1, #0]
	udc_config.conf_lsfs->udi_apis = mpsse_udi_apis;
   84522:	6859      	ldr	r1, [r3, #4]
	#ifdef USB_DEVICE_HS_SUPPORT
	udc_config.conf_hs->desc = (usb_conf_desc_t *)&udc_desc_hs_mpsse;
   84524:	4806      	ldr	r0, [pc, #24]	; (84540 <switch_configurations+0x28>)
	udc_config.conf_lsfs->udi_apis = mpsse_udi_apis;
   84526:	604a      	str	r2, [r1, #4]
	udc_config.conf_hs->desc = (usb_conf_desc_t *)&udc_desc_hs_mpsse;
   84528:	6919      	ldr	r1, [r3, #16]
   8452a:	6008      	str	r0, [r1, #0]
	udc_config.conf_hs->udi_apis = mpsse_udi_apis;
   8452c:	691b      	ldr	r3, [r3, #16]
   8452e:	605a      	str	r2, [r3, #4]
	#endif
}
   84530:	4770      	bx	lr
   84532:	bf00      	nop
   84534:	200709b4 	.word	0x200709b4
   84538:	20070a80 	.word	0x20070a80
   8453c:	200709ac 	.word	0x200709ac
   84540:	20070bc8 	.word	0x20070bc8

00084544 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   84544:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   84546:	f1a1 030e 	sub.w	r3, r1, #14
   8454a:	2b01      	cmp	r3, #1
   8454c:	d917      	bls.n	8457e <efc_perform_command+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8454e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84552:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84554:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   84558:	2300      	movs	r3, #0
   8455a:	4c0a      	ldr	r4, [pc, #40]	; (84584 <efc_perform_command+0x40>)

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
   8455c:	b2c9      	uxtb	r1, r1
   8455e:	7023      	strb	r3, [r4, #0]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   84560:	4b09      	ldr	r3, [pc, #36]	; (84588 <efc_perform_command+0x44>)
   84562:	ea03 2202 	and.w	r2, r3, r2, lsl #8
   84566:	4311      	orrs	r1, r2
	result = efc_perform_fcr(p_efc,
   84568:	4b08      	ldr	r3, [pc, #32]	; (8458c <efc_perform_command+0x48>)
   8456a:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
   8456e:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   84570:	b925      	cbnz	r5, 8457c <efc_perform_command+0x38>
		cpu_irq_enable();
   84572:	2301      	movs	r3, #1
   84574:	7023      	strb	r3, [r4, #0]
   84576:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8457a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   8457c:	bd38      	pop	{r3, r4, r5, pc}
		return EFC_RC_NOT_SUPPORT;
   8457e:	f04f 30ff 	mov.w	r0, #4294967295
}
   84582:	bd38      	pop	{r3, r4, r5, pc}
   84584:	20070ca0 	.word	0x20070ca0
   84588:	00ffff00 	.word	0x00ffff00
   8458c:	2007019d 	.word	0x2007019d

00084590 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   84590:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   84594:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   84598:	bf0c      	ite	eq
   8459a:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   8459c:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   8459e:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   845a0:	bf14      	ite	ne
   845a2:	2001      	movne	r0, #1
   845a4:	2000      	moveq	r0, #0
   845a6:	4770      	bx	lr

000845a8 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   845a8:	06d3      	lsls	r3, r2, #27
   845aa:	d50e      	bpl.n	845ca <pio_configure_interrupt+0x22>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   845ac:	0693      	lsls	r3, r2, #26
		p_pio->PIO_AIMER = ul_mask;
   845ae:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   845b2:	bf4c      	ite	mi
   845b4:	f8c0 10d4 	strmi.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   845b8:	f8c0 10d0 	strpl.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   845bc:	0653      	lsls	r3, r2, #25
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   845be:	bf4c      	ite	mi
   845c0:	f8c0 10c0 	strmi.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   845c4:	f8c0 10c4 	strpl.w	r1, [r0, #196]	; 0xc4
   845c8:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   845ca:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
	}
}
   845ce:	4770      	bx	lr

000845d0 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
   845d0:	6401      	str	r1, [r0, #64]	; 0x40
}
   845d2:	4770      	bx	lr

000845d4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   845d4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   845d6:	4770      	bx	lr

000845d8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   845d8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   845da:	4770      	bx	lr

000845dc <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   845dc:	0943      	lsrs	r3, r0, #5
   845de:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   845e2:	f203 7307 	addw	r3, r3, #1799	; 0x707
   845e6:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   845e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   845ea:	f000 001f 	and.w	r0, r0, #31
   845ee:	fa23 f000 	lsr.w	r0, r3, r0
}
   845f2:	f000 0001 	and.w	r0, r0, #1
   845f6:	4770      	bx	lr

000845f8 <pio_set_pin_high>:
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   845f8:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   845fa:	0943      	lsrs	r3, r0, #5
   845fc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84600:	f203 7307 	addw	r3, r3, #1799	; 0x707
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   84604:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84608:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8460a:	fa02 f000 	lsl.w	r0, r2, r0
   8460e:	6318      	str	r0, [r3, #48]	; 0x30
}
   84610:	4770      	bx	lr
   84612:	bf00      	nop

00084614 <pio_set_pin_low>:
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   84614:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84616:	0943      	lsrs	r3, r0, #5
   84618:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8461c:	f203 7307 	addw	r3, r3, #1799	; 0x707
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   84620:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84624:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   84626:	fa02 f000 	lsl.w	r0, r2, r0
   8462a:	6358      	str	r0, [r3, #52]	; 0x34
}
   8462c:	4770      	bx	lr
   8462e:	bf00      	nop

00084630 <pio_toggle_pin>:
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   84630:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84632:	0943      	lsrs	r3, r0, #5
   84634:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   84638:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8463c:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   8463e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   84640:	f000 001f 	and.w	r0, r0, #31
   84644:	fa02 f000 	lsl.w	r0, r2, r0
   84648:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8464a:	bf14      	ite	ne
   8464c:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8464e:	6318      	streq	r0, [r3, #48]	; 0x30
}
   84650:	4770      	bx	lr
   84652:	bf00      	nop

00084654 <pio_configure_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84654:	0943      	lsrs	r3, r0, #5
   84656:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
	switch (ul_flags & PIO_TYPE_Msk) {
   8465a:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8465e:	f203 7307 	addw	r3, r3, #1799	; 0x707
	switch (ul_flags & PIO_TYPE_Msk) {
   84662:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   84666:	ea4f 2343 	mov.w	r3, r3, lsl #9
	switch (ul_flags & PIO_TYPE_Msk) {
   8466a:	d035      	beq.n	846d8 <pio_configure_pin+0x84>
{
   8466c:	b410      	push	{r4}
	switch (ul_flags & PIO_TYPE_Msk) {
   8466e:	d816      	bhi.n	8469e <pio_configure_pin+0x4a>
   84670:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
   84674:	d01b      	beq.n	846ae <pio_configure_pin+0x5a>
   84676:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
   8467a:	d115      	bne.n	846a8 <pio_configure_pin+0x54>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8467c:	f04f 0c01 	mov.w	ip, #1
   84680:	f000 001f 	and.w	r0, r0, #31
   84684:	fa0c f200 	lsl.w	r2, ip, r0
	p_pio->PIO_IDR = ul_mask;
   84688:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   8468a:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8468c:	4310      	orrs	r0, r2
   8468e:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   84690:	ea11 000c 	ands.w	r0, r1, ip
	p_pio->PIO_PDR = ul_mask;
   84694:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
   84696:	d01b      	beq.n	846d0 <pio_configure_pin+0x7c>
		p_pio->PIO_PUER = ul_mask;
   84698:	665a      	str	r2, [r3, #100]	; 0x64
}
   8469a:	bc10      	pop	{r4}
   8469c:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
   8469e:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   846a2:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
   846a6:	d02f      	beq.n	84708 <pio_configure_pin+0xb4>
   846a8:	2000      	movs	r0, #0
}
   846aa:	bc10      	pop	{r4}
   846ac:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   846ae:	f04f 0c01 	mov.w	ip, #1
   846b2:	f000 001f 	and.w	r0, r0, #31
   846b6:	fa0c f200 	lsl.w	r2, ip, r0
	p_pio->PIO_IDR = ul_mask;
   846ba:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   846bc:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   846be:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   846c0:	4020      	ands	r0, r4
   846c2:	ea20 0002 	bic.w	r0, r0, r2
   846c6:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   846c8:	ea11 000c 	ands.w	r0, r1, ip
	p_pio->PIO_PDR = ul_mask;
   846cc:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
   846ce:	d1e3      	bne.n	84698 <pio_configure_pin+0x44>
		p_pio->PIO_PUDR = ul_mask;
   846d0:	661a      	str	r2, [r3, #96]	; 0x60
	return 1;
   846d2:	4660      	mov	r0, ip
}
   846d4:	bc10      	pop	{r4}
   846d6:	4770      	bx	lr
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   846d8:	2201      	movs	r2, #1
   846da:	f000 001f 	and.w	r0, r0, #31
   846de:	4082      	lsls	r2, r0
	if (ul_pull_up_enable) {
   846e0:	07c8      	lsls	r0, r1, #31
	p_pio->PIO_IDR = ul_mask;
   846e2:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   846e4:	bf4c      	ite	mi
   846e6:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   846e8:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   846ea:	f011 0f0a 	tst.w	r1, #10
		p_pio->PIO_IFER = ul_mask;
   846ee:	bf14      	ite	ne
   846f0:	621a      	strne	r2, [r3, #32]
		p_pio->PIO_IFDR = ul_mask;
   846f2:	625a      	streq	r2, [r3, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   846f4:	0788      	lsls	r0, r1, #30
   846f6:	d422      	bmi.n	8473e <pio_configure_pin+0xea>
		if (ul_attribute & PIO_DEBOUNCE) {
   846f8:	0708      	lsls	r0, r1, #28
			p_pio->PIO_DIFSR = ul_mask;
   846fa:	bf48      	it	mi
   846fc:	f8c3 2084 	strmi.w	r2, [r3, #132]	; 0x84
	return 1;
   84700:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   84702:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   84704:	601a      	str	r2, [r3, #0]
}
   84706:	4770      	bx	lr
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   84708:	2201      	movs	r2, #1
   8470a:	f000 001f 	and.w	r0, r0, #31
   8470e:	4082      	lsls	r2, r0
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   84710:	f001 5c60 	and.w	ip, r1, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   84714:	f3c1 0480 	ubfx	r4, r1, #2, #1
	if (ul_pull_up_enable) {
   84718:	07c9      	lsls	r1, r1, #31
	p_pio->PIO_IDR = ul_mask;
   8471a:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   8471c:	bf4c      	ite	mi
   8471e:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   84720:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_multidrive_enable) {
   84722:	b954      	cbnz	r4, 8473a <pio_configure_pin+0xe6>
		p_pio->PIO_MDDR = ul_mask;
   84724:	655a      	str	r2, [r3, #84]	; 0x54
	if (ul_default_level) {
   84726:	f1bc 5f60 	cmp.w	ip, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
   8472a:	bf0c      	ite	eq
   8472c:	631a      	streq	r2, [r3, #48]	; 0x30
		p_pio->PIO_CODR = ul_mask;
   8472e:	635a      	strne	r2, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   84730:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   84732:	601a      	str	r2, [r3, #0]
	return 1;
   84734:	2001      	movs	r0, #1
}
   84736:	bc10      	pop	{r4}
   84738:	4770      	bx	lr
		p_pio->PIO_MDER = ul_mask;
   8473a:	651a      	str	r2, [r3, #80]	; 0x50
   8473c:	e7f3      	b.n	84726 <pio_configure_pin+0xd2>
		p_pio->PIO_SCIFSR = ul_mask;
   8473e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	return 1;
   84742:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   84744:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   84746:	601a      	str	r2, [r3, #0]
}
   84748:	4770      	bx	lr
   8474a:	bf00      	nop

0008474c <pio_configure_pin_group>:
{
   8474c:	4603      	mov	r3, r0
	switch (ul_flags & PIO_TYPE_Msk) {
   8474e:	f002 40f0 	and.w	r0, r2, #2013265920	; 0x78000000
   84752:	f1b0 5f20 	cmp.w	r0, #671088640	; 0x28000000
   84756:	d029      	beq.n	847ac <pio_configure_pin_group+0x60>
{
   84758:	b410      	push	{r4}
	switch (ul_flags & PIO_TYPE_Msk) {
   8475a:	d810      	bhi.n	8477e <pio_configure_pin_group+0x32>
   8475c:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
   84760:	d015      	beq.n	8478e <pio_configure_pin_group+0x42>
   84762:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   84766:	d10f      	bne.n	84788 <pio_configure_pin_group+0x3c>
	p_pio->PIO_IDR = ul_mask;
   84768:	6459      	str	r1, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   8476a:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   8476c:	4308      	orrs	r0, r1
   8476e:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   84770:	f012 0001 	ands.w	r0, r2, #1
	p_pio->PIO_PDR = ul_mask;
   84774:	6059      	str	r1, [r3, #4]
	if (ul_pull_up_enable) {
   84776:	d015      	beq.n	847a4 <pio_configure_pin_group+0x58>
		p_pio->PIO_PUER = ul_mask;
   84778:	6659      	str	r1, [r3, #100]	; 0x64
}
   8477a:	bc10      	pop	{r4}
   8477c:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
   8477e:	f002 40e0 	and.w	r0, r2, #1879048192	; 0x70000000
   84782:	f1b0 5f40 	cmp.w	r0, #805306368	; 0x30000000
   84786:	d025      	beq.n	847d4 <pio_configure_pin_group+0x88>
   84788:	2000      	movs	r0, #0
}
   8478a:	bc10      	pop	{r4}
   8478c:	4770      	bx	lr
	p_pio->PIO_IDR = ul_mask;
   8478e:	6459      	str	r1, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   84790:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   84792:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   84794:	4020      	ands	r0, r4
   84796:	ea20 0001 	bic.w	r0, r0, r1
   8479a:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   8479c:	f012 0001 	ands.w	r0, r2, #1
	p_pio->PIO_PDR = ul_mask;
   847a0:	6059      	str	r1, [r3, #4]
	if (ul_pull_up_enable) {
   847a2:	d1e9      	bne.n	84778 <pio_configure_pin_group+0x2c>
		p_pio->PIO_PUDR = ul_mask;
   847a4:	6619      	str	r1, [r3, #96]	; 0x60
	return 1;
   847a6:	2001      	movs	r0, #1
}
   847a8:	bc10      	pop	{r4}
   847aa:	4770      	bx	lr
	if (ul_pull_up_enable) {
   847ac:	07d0      	lsls	r0, r2, #31
	p_pio->PIO_IDR = ul_mask;
   847ae:	6459      	str	r1, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   847b0:	bf4c      	ite	mi
   847b2:	6659      	strmi	r1, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   847b4:	6619      	strpl	r1, [r3, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   847b6:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   847ba:	bf14      	ite	ne
   847bc:	6219      	strne	r1, [r3, #32]
		p_pio->PIO_IFDR = ul_mask;
   847be:	6259      	streq	r1, [r3, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   847c0:	0790      	lsls	r0, r2, #30
   847c2:	d41e      	bmi.n	84802 <pio_configure_pin_group+0xb6>
		if (ul_attribute & PIO_DEBOUNCE) {
   847c4:	0710      	lsls	r0, r2, #28
			p_pio->PIO_DIFSR = ul_mask;
   847c6:	bf48      	it	mi
   847c8:	f8c3 1084 	strmi.w	r1, [r3, #132]	; 0x84
	return 1;
   847cc:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   847ce:	6159      	str	r1, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   847d0:	6019      	str	r1, [r3, #0]
}
   847d2:	4770      	bx	lr
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   847d4:	f002 5060 	and.w	r0, r2, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   847d8:	f3c2 0480 	ubfx	r4, r2, #2, #1
	if (ul_pull_up_enable) {
   847dc:	07d2      	lsls	r2, r2, #31
	p_pio->PIO_IDR = ul_mask;
   847de:	6459      	str	r1, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   847e0:	bf4c      	ite	mi
   847e2:	6659      	strmi	r1, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   847e4:	6619      	strpl	r1, [r3, #96]	; 0x60
	if (ul_multidrive_enable) {
   847e6:	b954      	cbnz	r4, 847fe <pio_configure_pin_group+0xb2>
		p_pio->PIO_MDDR = ul_mask;
   847e8:	6559      	str	r1, [r3, #84]	; 0x54
	if (ul_default_level) {
   847ea:	f1b0 5f60 	cmp.w	r0, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
   847ee:	bf0c      	ite	eq
   847f0:	6319      	streq	r1, [r3, #48]	; 0x30
		p_pio->PIO_CODR = ul_mask;
   847f2:	6359      	strne	r1, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   847f4:	6119      	str	r1, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   847f6:	6019      	str	r1, [r3, #0]
	return 1;
   847f8:	2001      	movs	r0, #1
}
   847fa:	bc10      	pop	{r4}
   847fc:	4770      	bx	lr
		p_pio->PIO_MDER = ul_mask;
   847fe:	6519      	str	r1, [r3, #80]	; 0x50
   84800:	e7f3      	b.n	847ea <pio_configure_pin_group+0x9e>
		p_pio->PIO_SCIFSR = ul_mask;
   84802:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	return 1;
   84806:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   84808:	6159      	str	r1, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   8480a:	6019      	str	r1, [r3, #0]
}
   8480c:	4770      	bx	lr
   8480e:	bf00      	nop

00084810 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
   84810:	e7fe      	b.n	84810 <Dummy_Handler>
   84812:	bf00      	nop

00084814 <Reset_Handler>:

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   84814:	4917      	ldr	r1, [pc, #92]	; (84874 <Reset_Handler+0x60>)
   84816:	4818      	ldr	r0, [pc, #96]	; (84878 <Reset_Handler+0x64>)
{
   84818:	b508      	push	{r3, lr}
	if (pSrc != pDest) {
   8481a:	4281      	cmp	r1, r0
   8481c:	d009      	beq.n	84832 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   8481e:	4a17      	ldr	r2, [pc, #92]	; (8487c <Reset_Handler+0x68>)
   84820:	4290      	cmp	r0, r2
   84822:	d206      	bcs.n	84832 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   84824:	3a01      	subs	r2, #1
   84826:	1a12      	subs	r2, r2, r0
   84828:	f022 0203 	bic.w	r2, r2, #3
   8482c:	4b14      	ldr	r3, [pc, #80]	; (84880 <Reset_Handler+0x6c>)
   8482e:	3204      	adds	r2, #4
   84830:	4798      	blx	r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   84832:	4814      	ldr	r0, [pc, #80]	; (84884 <Reset_Handler+0x70>)
   84834:	4a14      	ldr	r2, [pc, #80]	; (84888 <Reset_Handler+0x74>)
   84836:	4290      	cmp	r0, r2
   84838:	d207      	bcs.n	8484a <Reset_Handler+0x36>
		*pDest++ = 0;
   8483a:	3a01      	subs	r2, #1
   8483c:	1a12      	subs	r2, r2, r0
   8483e:	f022 0203 	bic.w	r2, r2, #3
   84842:	2100      	movs	r1, #0
   84844:	4b11      	ldr	r3, [pc, #68]	; (8488c <Reset_Handler+0x78>)
   84846:	3204      	adds	r2, #4
   84848:	4798      	blx	r3
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8484a:	4b11      	ldr	r3, [pc, #68]	; (84890 <Reset_Handler+0x7c>)
   8484c:	4911      	ldr	r1, [pc, #68]	; (84894 <Reset_Handler+0x80>)
   8484e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   84852:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   84856:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   8485a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8485e:	608a      	str	r2, [r1, #8]
	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   84860:	d203      	bcs.n	8486a <Reset_Handler+0x56>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   84862:	688b      	ldr	r3, [r1, #8]
   84864:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   84868:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8486a:	4b0b      	ldr	r3, [pc, #44]	; (84898 <Reset_Handler+0x84>)
   8486c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8486e:	4b0b      	ldr	r3, [pc, #44]	; (8489c <Reset_Handler+0x88>)
   84870:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   84872:	e7fe      	b.n	84872 <Reset_Handler+0x5e>
   84874:	0008ded4 	.word	0x0008ded4
   84878:	20070000 	.word	0x20070000
   8487c:	20071678 	.word	0x20071678
   84880:	00086d51 	.word	0x00086d51
   84884:	20071678 	.word	0x20071678
   84888:	20073470 	.word	0x20073470
   8488c:	00086e3d 	.word	0x00086e3d
   84890:	00080000 	.word	0x00080000
   84894:	e000ed00 	.word	0xe000ed00
   84898:	00086d09 	.word	0x00086d09
   8489c:	000808b1 	.word	0x000808b1

000848a0 <twi_set_speed.part.0>:
	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   848a0:	4b26      	ldr	r3, [pc, #152]	; (8493c <twi_set_speed.part.0+0x9c>)
   848a2:	4299      	cmp	r1, r3
   848a4:	d92b      	bls.n	848fe <twi_set_speed.part.0+0x5e>
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
   848a6:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   848a8:	4c25      	ldr	r4, [pc, #148]	; (84940 <twi_set_speed.part.0+0xa0>)
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   848aa:	4b26      	ldr	r3, [pc, #152]	; (84944 <twi_set_speed.part.0+0xa4>)
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   848ac:	440c      	add	r4, r1
   848ae:	00a1      	lsls	r1, r4, #2
   848b0:	fbb2 f1f1 	udiv	r1, r2, r1
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   848b4:	fba3 2302 	umull	r2, r3, r3, r2
   848b8:	0b9b      	lsrs	r3, r3, #14
   848ba:	3b04      	subs	r3, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   848bc:	2bff      	cmp	r3, #255	; 0xff
	uint32_t ckdiv = 0;
   848be:	f04f 0200 	mov.w	r2, #0
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   848c2:	f1a1 0104 	sub.w	r1, r1, #4
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   848c6:	d935      	bls.n	84934 <twi_set_speed.part.0+0x94>
			/* Increase clock divider */
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   848c8:	085b      	lsrs	r3, r3, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   848ca:	2bff      	cmp	r3, #255	; 0xff
			ckdiv++;
   848cc:	f102 0201 	add.w	r2, r2, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   848d0:	d910      	bls.n	848f4 <twi_set_speed.part.0+0x54>
   848d2:	2a07      	cmp	r2, #7
   848d4:	d1f8      	bne.n	848c8 <twi_set_speed.part.0+0x28>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   848d6:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   848da:	0209      	lsls	r1, r1, #8
   848dc:	b2db      	uxtb	r3, r3
   848de:	b289      	uxth	r1, r1
   848e0:	4313      	orrs	r3, r2
   848e2:	430b      	orrs	r3, r1
		p_twi->TWI_CWGR =
   848e4:	6103      	str	r3, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
   848e6:	bc10      	pop	{r4}
   848e8:	2000      	movs	r0, #0
   848ea:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   848ec:	2a07      	cmp	r2, #7
   848ee:	d0f2      	beq.n	848d6 <twi_set_speed.part.0+0x36>
			chdiv /= TWI_CLK_DIVIDER;
   848f0:	0849      	lsrs	r1, r1, #1
			ckdiv++;
   848f2:	3201      	adds	r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   848f4:	29ff      	cmp	r1, #255	; 0xff
				TWI_CWGR_CKDIV(ckdiv);		
   848f6:	bf98      	it	ls
   848f8:	0412      	lslls	r2, r2, #16
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   848fa:	d8f7      	bhi.n	848ec <twi_set_speed.part.0+0x4c>
   848fc:	e7ed      	b.n	848da <twi_set_speed.part.0+0x3a>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   848fe:	004b      	lsls	r3, r1, #1
   84900:	fbb2 f3f3 	udiv	r3, r2, r3
   84904:	3b04      	subs	r3, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   84906:	2bff      	cmp	r3, #255	; 0xff
	uint32_t ckdiv = 0;
   84908:	f04f 0200 	mov.w	r2, #0
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8490c:	d908      	bls.n	84920 <twi_set_speed.part.0+0x80>
			c_lh_div /= TWI_CLK_DIVIDER;
   8490e:	085b      	lsrs	r3, r3, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   84910:	2bff      	cmp	r3, #255	; 0xff
			ckdiv++;
   84912:	f102 0201 	add.w	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   84916:	d90b      	bls.n	84930 <twi_set_speed.part.0+0x90>
   84918:	2a07      	cmp	r2, #7
   8491a:	d1f8      	bne.n	8490e <twi_set_speed.part.0+0x6e>
   8491c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   84920:	b2d9      	uxtb	r1, r3
   84922:	021b      	lsls	r3, r3, #8
   84924:	430a      	orrs	r2, r1
   84926:	b29b      	uxth	r3, r3
   84928:	4313      	orrs	r3, r2
		p_twi->TWI_CWGR =
   8492a:	6103      	str	r3, [r0, #16]
}
   8492c:	2000      	movs	r0, #0
   8492e:	4770      	bx	lr
				TWI_CWGR_CKDIV(ckdiv);
   84930:	0412      	lsls	r2, r2, #16
   84932:	e7f5      	b.n	84920 <twi_set_speed.part.0+0x80>
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   84934:	29ff      	cmp	r1, #255	; 0xff
   84936:	d8db      	bhi.n	848f0 <twi_set_speed.part.0+0x50>
   84938:	e7cf      	b.n	848da <twi_set_speed.part.0+0x3a>
   8493a:	bf00      	nop
   8493c:	0005dc00 	.word	0x0005dc00
   84940:	7ffd1200 	.word	0x7ffd1200
   84944:	057619f1 	.word	0x057619f1

00084948 <twi_master_init>:
{
   84948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	p_twi->TWI_IDR = ~0UL;
   8494a:	f04f 3eff 	mov.w	lr, #4294967295
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   8494e:	f04f 0c80 	mov.w	ip, #128	; 0x80
	p_twi->TWI_CR = TWI_CR_MSDIS;
   84952:	2708      	movs	r7, #8
	p_twi->TWI_CR = TWI_CR_SVDIS;
   84954:	2620      	movs	r6, #32
	p_twi->TWI_CR = TWI_CR_MSEN;
   84956:	2204      	movs	r2, #4
{
   84958:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
   8495a:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
	p_twi->TWI_SR;
   8495e:	6a01      	ldr	r1, [r0, #32]
	p_twi->TWI_CR = TWI_CR_SWRST;
   84960:	f8c0 c000 	str.w	ip, [r0]
	p_twi->TWI_RHR;
   84964:	6b01      	ldr	r1, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
   84966:	6007      	str	r7, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   84968:	6006      	str	r6, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
   8496a:	6002      	str	r2, [r0, #0]
	if (ul_speed > I2C_FAST_MODE_SPEED) {
   8496c:	4b0a      	ldr	r3, [pc, #40]	; (84998 <twi_master_init+0x50>)
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   8496e:	6869      	ldr	r1, [r5, #4]
{
   84970:	4604      	mov	r4, r0
	if (ul_speed > I2C_FAST_MODE_SPEED) {
   84972:	4299      	cmp	r1, r3
   84974:	d80d      	bhi.n	84992 <twi_master_init+0x4a>
   84976:	682a      	ldr	r2, [r5, #0]
   84978:	4b08      	ldr	r3, [pc, #32]	; (8499c <twi_master_init+0x54>)
   8497a:	4798      	blx	r3
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   8497c:	f1a0 0001 	sub.w	r0, r0, #1
   84980:	fab0 f080 	clz	r0, r0
   84984:	0940      	lsrs	r0, r0, #5
	if (p_opt->smbus == 1) {
   84986:	7a6b      	ldrb	r3, [r5, #9]
   84988:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   8498a:	bf04      	itt	eq
   8498c:	2340      	moveq	r3, #64	; 0x40
   8498e:	6023      	streq	r3, [r4, #0]
}
   84990:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		status = TWI_INVALID_ARGUMENT;
   84992:	2001      	movs	r0, #1
   84994:	e7f7      	b.n	84986 <twi_master_init+0x3e>
   84996:	bf00      	nop
   84998:	00061a80 	.word	0x00061a80
   8499c:	000848a1 	.word	0x000848a1

000849a0 <twi_master_read>:
{
   849a0:	4684      	mov	ip, r0
	uint32_t cnt = p_packet->length;
   849a2:	68c8      	ldr	r0, [r1, #12]
	if (cnt == 0) {
   849a4:	2800      	cmp	r0, #0
   849a6:	d061      	beq.n	84a6c <twi_master_read+0xcc>
{
   849a8:	b470      	push	{r4, r5, r6}
	p_twi->TWI_MMR = 0;
   849aa:	2500      	movs	r5, #0
	uint8_t *buffer = p_packet->buffer;
   849ac:	688c      	ldr	r4, [r1, #8]
	p_twi->TWI_MMR = 0;
   849ae:	f8cc 5004 	str.w	r5, [ip, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   849b2:	7c0b      	ldrb	r3, [r1, #16]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   849b4:	684a      	ldr	r2, [r1, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   849b6:	041b      	lsls	r3, r3, #16
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   849b8:	0212      	lsls	r2, r2, #8
   849ba:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   849be:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   849c2:	4313      	orrs	r3, r2
   849c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   849c8:	f8cc 3004 	str.w	r3, [ip, #4]
	p_twi->TWI_IADR = 0;
   849cc:	f8cc 500c 	str.w	r5, [ip, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   849d0:	684a      	ldr	r2, [r1, #4]
	if (len == 0)
   849d2:	2a00      	cmp	r2, #0
   849d4:	d03a      	beq.n	84a4c <twi_master_read+0xac>
	if (len > 1) {
   849d6:	2a01      	cmp	r2, #1
	val = addr[0];
   849d8:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
   849da:	dd02      	ble.n	849e2 <twi_master_read+0x42>
		val |= addr[1];
   849dc:	880b      	ldrh	r3, [r1, #0]
   849de:	ba5b      	rev16	r3, r3
   849e0:	b29b      	uxth	r3, r3
	if (len > 2) {
   849e2:	2a02      	cmp	r2, #2
   849e4:	dd02      	ble.n	849ec <twi_master_read+0x4c>
		val |= addr[2];
   849e6:	788a      	ldrb	r2, [r1, #2]
   849e8:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	if (cnt == 1) {
   849ec:	2801      	cmp	r0, #1
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   849ee:	f8cc 300c 	str.w	r3, [ip, #12]
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   849f2:	bf0b      	itete	eq
   849f4:	2303      	moveq	r3, #3
		p_twi->TWI_CR = TWI_CR_START;
   849f6:	2301      	movne	r3, #1
		stop_sent = 1;
   849f8:	4605      	moveq	r5, r0
		stop_sent = 0;
   849fa:	2500      	movne	r5, #0
   849fc:	f247 5230 	movw	r2, #30000	; 0x7530
			p_twi->TWI_CR = TWI_CR_STOP;
   84a00:	2602      	movs	r6, #2
		p_twi->TWI_CR = TWI_CR_START;
   84a02:	f8cc 3000 	str.w	r3, [ip]
		status = p_twi->TWI_SR;
   84a06:	f8dc 3020 	ldr.w	r3, [ip, #32]
		if (status & TWI_SR_NACK) {
   84a0a:	05d9      	lsls	r1, r3, #23
   84a0c:	d413      	bmi.n	84a36 <twi_master_read+0x96>
		if (!timeout--) {
   84a0e:	1e51      	subs	r1, r2, #1
   84a10:	b372      	cbz	r2, 84a70 <twi_master_read+0xd0>
		if (cnt == 1  && !stop_sent) {
   84a12:	2801      	cmp	r0, #1
   84a14:	d01c      	beq.n	84a50 <twi_master_read+0xb0>
		if (!(status & TWI_SR_RXRDY)) {
   84a16:	079b      	lsls	r3, r3, #30
   84a18:	d521      	bpl.n	84a5e <twi_master_read+0xbe>
		*buffer++ = p_twi->TWI_RHR;
   84a1a:	4623      	mov	r3, r4
   84a1c:	f8dc 2030 	ldr.w	r2, [ip, #48]	; 0x30
	while (cnt > 0) {
   84a20:	3801      	subs	r0, #1
		*buffer++ = p_twi->TWI_RHR;
   84a22:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt > 0) {
   84a26:	d009      	beq.n	84a3c <twi_master_read+0x9c>
		timeout = TWI_TIMEOUT;
   84a28:	f247 5230 	movw	r2, #30000	; 0x7530
   84a2c:	461c      	mov	r4, r3
		status = p_twi->TWI_SR;
   84a2e:	f8dc 3020 	ldr.w	r3, [ip, #32]
		if (status & TWI_SR_NACK) {
   84a32:	05d9      	lsls	r1, r3, #23
   84a34:	d5eb      	bpl.n	84a0e <twi_master_read+0x6e>
			return TWI_RECEIVE_NACK;
   84a36:	2005      	movs	r0, #5
}
   84a38:	bc70      	pop	{r4, r5, r6}
   84a3a:	4770      	bx	lr
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   84a3c:	f8dc 3020 	ldr.w	r3, [ip, #32]
   84a40:	07da      	lsls	r2, r3, #31
   84a42:	d5fb      	bpl.n	84a3c <twi_master_read+0x9c>
}
   84a44:	bc70      	pop	{r4, r5, r6}
	p_twi->TWI_SR;
   84a46:	f8dc 3020 	ldr.w	r3, [ip, #32]
}
   84a4a:	4770      	bx	lr
		return 0;
   84a4c:	4613      	mov	r3, r2
   84a4e:	e7cd      	b.n	849ec <twi_master_read+0x4c>
		if (cnt == 1  && !stop_sent) {
   84a50:	b90d      	cbnz	r5, 84a56 <twi_master_read+0xb6>
			p_twi->TWI_CR = TWI_CR_STOP;
   84a52:	f8cc 6000 	str.w	r6, [ip]
		if (!(status & TWI_SR_RXRDY)) {
   84a56:	079b      	lsls	r3, r3, #30
   84a58:	d505      	bpl.n	84a66 <twi_master_read+0xc6>
   84a5a:	2501      	movs	r5, #1
   84a5c:	e7dd      	b.n	84a1a <twi_master_read+0x7a>
   84a5e:	4623      	mov	r3, r4
   84a60:	460a      	mov	r2, r1
		timeout = TWI_TIMEOUT;
   84a62:	461c      	mov	r4, r3
   84a64:	e7e3      	b.n	84a2e <twi_master_read+0x8e>
		if (!(status & TWI_SR_RXRDY)) {
   84a66:	460a      	mov	r2, r1
   84a68:	2501      	movs	r5, #1
   84a6a:	e7cc      	b.n	84a06 <twi_master_read+0x66>
		return TWI_INVALID_ARGUMENT;
   84a6c:	2001      	movs	r0, #1
}
   84a6e:	4770      	bx	lr
			return TWI_ERROR_TIMEOUT;
   84a70:	2009      	movs	r0, #9
}
   84a72:	bc70      	pop	{r4, r5, r6}
   84a74:	4770      	bx	lr
   84a76:	bf00      	nop

00084a78 <twi_master_write>:
	uint32_t cnt = p_packet->length;
   84a78:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
   84a7a:	2a00      	cmp	r2, #0
   84a7c:	d038      	beq.n	84af0 <twi_master_write+0x78>
{
   84a7e:	b430      	push	{r4, r5}
   84a80:	4603      	mov	r3, r0
	p_twi->TWI_MMR = 0;
   84a82:	2500      	movs	r5, #0
	uint8_t *buffer = p_packet->buffer;
   84a84:	6888      	ldr	r0, [r1, #8]
	p_twi->TWI_MMR = 0;
   84a86:	605d      	str	r5, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   84a88:	7c0c      	ldrb	r4, [r1, #16]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   84a8a:	f8d1 c004 	ldr.w	ip, [r1, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   84a8e:	0424      	lsls	r4, r4, #16
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   84a90:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   84a94:	f404 04fe 	and.w	r4, r4, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   84a98:	f40c 7c40 	and.w	ip, ip, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   84a9c:	ea44 040c 	orr.w	r4, r4, ip
   84aa0:	605c      	str	r4, [r3, #4]
	p_twi->TWI_IADR = 0;
   84aa2:	60dd      	str	r5, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   84aa4:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
   84aa6:	b30d      	cbz	r5, 84aec <twi_master_write+0x74>
	if (len > 1) {
   84aa8:	2d01      	cmp	r5, #1
	val = addr[0];
   84aaa:	780c      	ldrb	r4, [r1, #0]
	if (len > 1) {
   84aac:	dd02      	ble.n	84ab4 <twi_master_write+0x3c>
		val |= addr[1];
   84aae:	880c      	ldrh	r4, [r1, #0]
   84ab0:	ba64      	rev16	r4, r4
   84ab2:	b2a4      	uxth	r4, r4
	if (len > 2) {
   84ab4:	2d02      	cmp	r5, #2
   84ab6:	dd02      	ble.n	84abe <twi_master_write+0x46>
		val |= addr[2];
   84ab8:	7889      	ldrb	r1, [r1, #2]
   84aba:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   84abe:	60dc      	str	r4, [r3, #12]
	while (cnt > 0) {
   84ac0:	1881      	adds	r1, r0, r2
   84ac2:	e007      	b.n	84ad4 <twi_master_write+0x5c>
		status = p_twi->TWI_SR;
   84ac4:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   84ac6:	05d5      	lsls	r5, r2, #23
   84ac8:	d40d      	bmi.n	84ae6 <twi_master_write+0x6e>
		if (!(status & TWI_SR_TXRDY)) {
   84aca:	0754      	lsls	r4, r2, #29
		p_twi->TWI_THR = *buffer++;
   84acc:	bf44      	itt	mi
   84ace:	f810 2b01 	ldrbmi.w	r2, [r0], #1
   84ad2:	635a      	strmi	r2, [r3, #52]	; 0x34
	while (cnt > 0) {
   84ad4:	4288      	cmp	r0, r1
   84ad6:	d1f5      	bne.n	84ac4 <twi_master_write+0x4c>
   84ad8:	e001      	b.n	84ade <twi_master_write+0x66>
		if (status & TWI_SR_TXRDY) {
   84ada:	0751      	lsls	r1, r2, #29
   84adc:	d40a      	bmi.n	84af4 <twi_master_write+0x7c>
		status = p_twi->TWI_SR;
   84ade:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   84ae0:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   84ae4:	d0f9      	beq.n	84ada <twi_master_write+0x62>
			return TWI_RECEIVE_NACK;
   84ae6:	2005      	movs	r0, #5
}
   84ae8:	bc30      	pop	{r4, r5}
   84aea:	4770      	bx	lr
		return 0;
   84aec:	462c      	mov	r4, r5
   84aee:	e7e6      	b.n	84abe <twi_master_write+0x46>
		return TWI_INVALID_ARGUMENT;
   84af0:	2001      	movs	r0, #1
}
   84af2:	4770      	bx	lr
	p_twi->TWI_CR = TWI_CR_STOP;
   84af4:	2202      	movs	r2, #2
   84af6:	601a      	str	r2, [r3, #0]
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   84af8:	6a1a      	ldr	r2, [r3, #32]
   84afa:	07d2      	lsls	r2, r2, #31
   84afc:	d5fc      	bpl.n	84af8 <twi_master_write+0x80>
}
   84afe:	bc30      	pop	{r4, r5}
   84b00:	4770      	bx	lr
   84b02:	bf00      	nop

00084b04 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   84b04:	4b02      	ldr	r3, [pc, #8]	; (84b10 <pmc_is_wakeup_clocks_restored+0xc>)
   84b06:	7818      	ldrb	r0, [r3, #0]
}
   84b08:	f080 0001 	eor.w	r0, r0, #1
   84b0c:	4770      	bx	lr
   84b0e:	bf00      	nop
   84b10:	200722d1 	.word	0x200722d1

00084b14 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   84b14:	4a0c      	ldr	r2, [pc, #48]	; (84b48 <_sbrk+0x34>)
{
   84b16:	4603      	mov	r3, r0
	if (heap == NULL) {
   84b18:	6810      	ldr	r0, [r2, #0]
	int ramend = (int)&__ram_end__;
   84b1a:	490c      	ldr	r1, [pc, #48]	; (84b4c <_sbrk+0x38>)
	if (heap == NULL) {
   84b1c:	b130      	cbz	r0, 84b2c <_sbrk+0x18>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
   84b1e:	4403      	add	r3, r0
   84b20:	428b      	cmp	r3, r1
		return (caddr_t) -1;	
   84b22:	bfcc      	ite	gt
   84b24:	f04f 30ff 	movgt.w	r0, #4294967295
	}

	heap += incr;
   84b28:	6013      	strle	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   84b2a:	4770      	bx	lr
{
   84b2c:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
   84b2e:	4c08      	ldr	r4, [pc, #32]	; (84b50 <_sbrk+0x3c>)
	if (((int)prev_heap + incr) > ramend) {
   84b30:	4423      	add	r3, r4
   84b32:	428b      	cmp	r3, r1
		heap = (unsigned char *)&_end;
   84b34:	6014      	str	r4, [r2, #0]
	heap += incr;
   84b36:	bfd8      	it	le
   84b38:	6013      	strle	r3, [r2, #0]
		heap = (unsigned char *)&_end;
   84b3a:	4620      	mov	r0, r4
		return (caddr_t) -1;	
   84b3c:	bfc8      	it	gt
   84b3e:	f04f 30ff 	movgt.w	r0, #4294967295
}
   84b42:	bc10      	pop	{r4}
   84b44:	4770      	bx	lr
   84b46:	bf00      	nop
   84b48:	200722d4 	.word	0x200722d4
   84b4c:	20087ffc 	.word	0x20087ffc
   84b50:	20074a40 	.word	0x20074a40

00084b54 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   84b54:	f04f 30ff 	mov.w	r0, #4294967295
   84b58:	4770      	bx	lr
   84b5a:	bf00      	nop

00084b5c <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   84b5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
   84b60:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   84b62:	604b      	str	r3, [r1, #4]
}
   84b64:	4770      	bx	lr
   84b66:	bf00      	nop

00084b68 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   84b68:	2001      	movs	r0, #1
   84b6a:	4770      	bx	lr

00084b6c <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   84b6c:	2000      	movs	r0, #0
   84b6e:	4770      	bx	lr

00084b70 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
   84b70:	be00      	bkpt	0x0000
	for (;;);
   84b72:	e7fe      	b.n	84b72 <_exit+0x2>

00084b74 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
   84b74:	4770      	bx	lr
   84b76:	bf00      	nop

00084b78 <_getpid>:

extern int _getpid(void)
{
	return -1;
}
   84b78:	f04f 30ff 	mov.w	r0, #4294967295
   84b7c:	4770      	bx	lr
   84b7e:	bf00      	nop

00084b80 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
   84b80:	f890 c014 	ldrb.w	ip, [r0, #20]
{
   84b84:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
   84b86:	f01c 0f01 	tst.w	ip, #1
   84b8a:	d014      	beq.n	84bb6 <udd_ep_finish_job+0x36>
{
   84b8c:	b410      	push	{r4}
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
	if (NULL == ptr_job->call_trans) {
   84b8e:	6804      	ldr	r4, [r0, #0]
	ptr_job->busy = false;
   84b90:	f36f 0c00 	bfc	ip, #0, #1
   84b94:	f880 c014 	strb.w	ip, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   84b98:	b15c      	cbz	r4, 84bb2 <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
		ep_num |= USB_EP_DIR_IN;
   84b9a:	4608      	mov	r0, r1
	if (Is_udd_endpoint_in(ep_num)) {
   84b9c:	4906      	ldr	r1, [pc, #24]	; (84bb8 <udd_ep_finish_job+0x38>)
   84b9e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   84ba2:	05c9      	lsls	r1, r1, #23
		ep_num |= USB_EP_DIR_IN;
   84ba4:	bf48      	it	mi
   84ba6:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   84baa:	6899      	ldr	r1, [r3, #8]
   84bac:	4623      	mov	r3, r4
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   84bae:	bc10      	pop	{r4}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   84bb0:	4718      	bx	r3
}
   84bb2:	bc10      	pop	{r4}
   84bb4:	4770      	bx	lr
   84bb6:	4770      	bx	lr
   84bb8:	400ac100 	.word	0x400ac100

00084bbc <udd_ep_trans_done>:

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   84bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if (!ptr_job->busy) {
   84bc0:	4d5e      	ldr	r5, [pc, #376]	; (84d3c <udd_ep_trans_done+0x180>)
	ptr_job = &udd_ep_job[ep - 1];
   84bc2:	f100 3eff 	add.w	lr, r0, #4294967295
	if (!ptr_job->busy) {
   84bc6:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   84bca:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   84bce:	7d19      	ldrb	r1, [r3, #20]
   84bd0:	07ca      	lsls	r2, r1, #31
   84bd2:	d57c      	bpl.n	84cce <udd_ep_trans_done+0x112>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   84bd4:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
   84bd8:	42a1      	cmp	r1, r4
   84bda:	4602      	mov	r2, r0
   84bdc:	ea4f 004e 	mov.w	r0, lr, lsl #1
   84be0:	d04c      	beq.n	84c7c <udd_ep_trans_done+0xc0>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   84be2:	1a64      	subs	r4, r4, r1

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   84be4:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   84be8:	d818      	bhi.n	84c1c <udd_ep_trans_done+0x60>
			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
		}
		if (Is_udd_endpoint_in(ep)) {
   84bea:	4f55      	ldr	r7, [pc, #340]	; (84d40 <udd_ep_trans_done+0x184>)
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   84bec:	0426      	lsls	r6, r4, #16
		if (Is_udd_endpoint_in(ep)) {
   84bee:	f857 c022 	ldr.w	ip, [r7, r2, lsl #2]
   84bf2:	f41c 7f80 	tst.w	ip, #256	; 0x100
   84bf6:	d06c      	beq.n	84cd2 <udd_ep_trans_done+0x116>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   84bf8:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   84bfc:	f3c7 1c02 	ubfx	ip, r7, #4, #3
   84c00:	2708      	movs	r7, #8
   84c02:	fa07 f70c 	lsl.w	r7, r7, ip
   84c06:	3f01      	subs	r7, #1
   84c08:	4227      	tst	r7, r4
   84c0a:	f000 8093 	beq.w	84d34 <udd_ep_trans_done+0x178>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   84c0e:	7d1f      	ldrb	r7, [r3, #20]
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   84c10:	f046 0629 	orr.w	r6, r6, #41	; 0x29
				ptr_job->b_shortpacket = false;
   84c14:	f36f 0741 	bfc	r7, #1, #1
   84c18:	751f      	strb	r7, [r3, #20]
   84c1a:	e009      	b.n	84c30 <udd_ep_trans_done+0x74>
		if (Is_udd_endpoint_in(ep)) {
   84c1c:	4b48      	ldr	r3, [pc, #288]	; (84d40 <udd_ep_trans_done+0x184>)
   84c1e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
   84c22:	05e4      	lsls	r4, r4, #23
   84c24:	d55e      	bpl.n	84ce4 <udd_ep_trans_done+0x128>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   84c26:	2621      	movs	r6, #33	; 0x21
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   84c28:	f44f 3480 	mov.w	r4, #65536	; 0x10000
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   84c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   84c30:	eb00 0c0e 	add.w	ip, r0, lr
   84c34:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
   84c38:	f8dc 3004 	ldr.w	r3, [ip, #4]
   84c3c:	4419      	add	r1, r3
   84c3e:	4b41      	ldr	r3, [pc, #260]	; (84d44 <udd_ep_trans_done+0x188>)
   84c40:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   84c44:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84c46:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84c4a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84c4c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84c50:	f04f 0800 	mov.w	r8, #0
   84c54:	493c      	ldr	r1, [pc, #240]	; (84d48 <udd_ep_trans_done+0x18c>)
   84c56:	f881 8000 	strb.w	r8, [r1]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   84c5a:	f8d3 800c 	ldr.w	r8, [r3, #12]
   84c5e:	f018 0f10 	tst.w	r8, #16
   84c62:	d049      	beq.n	84cf8 <udd_ep_trans_done+0x13c>
	if (cpu_irq_is_enabled_flags(flags))
   84c64:	b927      	cbnz	r7, 84c70 <udd_ep_trans_done+0xb4>
		cpu_irq_enable();
   84c66:	2301      	movs	r3, #1
   84c68:	700b      	strb	r3, [r1, #0]
   84c6a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84c6e:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   84c70:	eb00 030e 	add.w	r3, r0, lr
   84c74:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   84c78:	68d9      	ldr	r1, [r3, #12]
   84c7a:	6099      	str	r1, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   84c7c:	4b30      	ldr	r3, [pc, #192]	; (84d40 <udd_ep_trans_done+0x184>)
   84c7e:	0091      	lsls	r1, r2, #2
   84c80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   84c84:	05df      	lsls	r7, r3, #23
   84c86:	d506      	bpl.n	84c96 <udd_ep_trans_done+0xda>
		if (ptr_job->b_shortpacket) {
   84c88:	eb00 030e 	add.w	r3, r0, lr
   84c8c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   84c90:	7d1b      	ldrb	r3, [r3, #20]
   84c92:	079e      	lsls	r6, r3, #30
   84c94:	d407      	bmi.n	84ca6 <udd_ep_trans_done+0xea>
	ptr_job = &udd_ep_job[ep - 1];
   84c96:	4470      	add	r0, lr
			return;
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   84c98:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   84c9c:	2100      	movs	r1, #0
}
   84c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	udd_ep_finish_job(ptr_job, false, ep);
   84ca2:	4b2a      	ldr	r3, [pc, #168]	; (84d4c <udd_ep_trans_done+0x190>)
   84ca4:	4718      	bx	r3
			udd_ack_in_send(ep);
   84ca6:	2301      	movs	r3, #1
   84ca8:	4c29      	ldr	r4, [pc, #164]	; (84d50 <udd_ep_trans_done+0x194>)
			if (Is_udd_write_enabled(ep)) {
   84caa:	482a      	ldr	r0, [pc, #168]	; (84d54 <udd_ep_trans_done+0x198>)
			udd_ack_in_send(ep);
   84cac:	510b      	str	r3, [r1, r4]
			if (Is_udd_write_enabled(ep)) {
   84cae:	5808      	ldr	r0, [r1, r0]
			udd_enable_in_send_interrupt(ep);
   84cb0:	4c29      	ldr	r4, [pc, #164]	; (84d58 <udd_ep_trans_done+0x19c>)
			if (Is_udd_write_enabled(ep)) {
   84cb2:	03c5      	lsls	r5, r0, #15
				udd_raise_in_send(ep);
   84cb4:	bf48      	it	mi
   84cb6:	4829      	ldrmi	r0, [pc, #164]	; (84d5c <udd_ep_trans_done+0x1a0>)
			udd_enable_in_send_interrupt(ep);
   84cb8:	f04f 0501 	mov.w	r5, #1
				udd_raise_in_send(ep);
   84cbc:	bf48      	it	mi
   84cbe:	500b      	strmi	r3, [r1, r0]
			udd_enable_endpoint_interrupt(ep);
   84cc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   84cc4:	4826      	ldr	r0, [pc, #152]	; (84d60 <udd_ep_trans_done+0x1a4>)
   84cc6:	fa03 f202 	lsl.w	r2, r3, r2
			udd_enable_in_send_interrupt(ep);
   84cca:	510d      	str	r5, [r1, r4]
			udd_enable_endpoint_interrupt(ep);
   84ccc:	6182      	str	r2, [r0, #24]
}
   84cce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   84cd2:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   84cd6:	f3c3 23c1 	ubfx	r3, r3, #11, #2
   84cda:	2b01      	cmp	r3, #1
   84cdc:	d022      	beq.n	84d24 <udd_ep_trans_done+0x168>
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   84cde:	f046 0635 	orr.w	r6, r6, #53	; 0x35
   84ce2:	e7a5      	b.n	84c30 <udd_ep_trans_done+0x74>
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   84ce4:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
   84ce8:	f3c4 24c1 	ubfx	r4, r4, #11, #2
   84cec:	2c01      	cmp	r4, #1
   84cee:	d09a      	beq.n	84c26 <udd_ep_trans_done+0x6a>
   84cf0:	2635      	movs	r6, #53	; 0x35
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   84cf2:	f44f 3480 	mov.w	r4, #65536	; 0x10000
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   84cf6:	e79b      	b.n	84c30 <udd_ep_trans_done+0x74>
			udd_enable_endpoint_dma_interrupt(ep);
   84cf8:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   84cfc:	609e      	str	r6, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   84cfe:	f8dc 300c 	ldr.w	r3, [ip, #12]
			ptr_job->buf_load = next_trans;
   84d02:	f8cc 4010 	str.w	r4, [ip, #16]
			ptr_job->buf_cnt += next_trans;
   84d06:	441c      	add	r4, r3
			udd_enable_endpoint_dma_interrupt(ep);
   84d08:	4b15      	ldr	r3, [pc, #84]	; (84d60 <udd_ep_trans_done+0x1a4>)
   84d0a:	fa00 f00e 	lsl.w	r0, r0, lr
			ptr_job->buf_cnt += next_trans;
   84d0e:	f8cc 400c 	str.w	r4, [ip, #12]
			udd_enable_endpoint_dma_interrupt(ep);
   84d12:	6198      	str	r0, [r3, #24]
	if (cpu_irq_is_enabled_flags(flags))
   84d14:	2f00      	cmp	r7, #0
   84d16:	d1da      	bne.n	84cce <udd_ep_trans_done+0x112>
		cpu_irq_enable();
   84d18:	2301      	movs	r3, #1
   84d1a:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   84d1c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84d20:	b662      	cpsie	i
}
   84d22:	e7d4      	b.n	84cce <udd_ep_trans_done+0x112>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   84d24:	2308      	movs	r3, #8
   84d26:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   84d2a:	f3c7 1702 	ubfx	r7, r7, #4, #3
   84d2e:	40bb      	lsls	r3, r7
   84d30:	42a3      	cmp	r3, r4
   84d32:	d2d4      	bcs.n	84cde <udd_ep_trans_done+0x122>
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   84d34:	f046 0621 	orr.w	r6, r6, #33	; 0x21
   84d38:	e77a      	b.n	84c30 <udd_ep_trans_done+0x74>
   84d3a:	bf00      	nop
   84d3c:	200722e4 	.word	0x200722e4
   84d40:	400ac100 	.word	0x400ac100
   84d44:	400ac300 	.word	0x400ac300
   84d48:	20070ca0 	.word	0x20070ca0
   84d4c:	00084b81 	.word	0x00084b81
   84d50:	400ac160 	.word	0x400ac160
   84d54:	400ac130 	.word	0x400ac130
   84d58:	400ac1f0 	.word	0x400ac1f0
   84d5c:	400ac190 	.word	0x400ac190
   84d60:	400ac000 	.word	0x400ac000

00084d64 <udd_ctrl_in_sent>:
{
   84d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84d68:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84d6c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84d6e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84d72:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   84d74:	2301      	movs	r3, #1
   84d76:	4d56      	ldr	r5, [pc, #344]	; (84ed0 <udd_ctrl_in_sent+0x16c>)
   84d78:	4956      	ldr	r1, [pc, #344]	; (84ed4 <udd_ctrl_in_sent+0x170>)
   84d7a:	7028      	strb	r0, [r5, #0]
   84d7c:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   84d80:	b91a      	cbnz	r2, 84d8a <udd_ctrl_in_sent+0x26>
		cpu_irq_enable();
   84d82:	702b      	strb	r3, [r5, #0]
   84d84:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84d88:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   84d8a:	f8df 814c 	ldr.w	r8, [pc, #332]	; 84ed8 <udd_ctrl_in_sent+0x174>
   84d8e:	f898 3000 	ldrb.w	r3, [r8]
   84d92:	2b03      	cmp	r3, #3
   84d94:	d05c      	beq.n	84e50 <udd_ctrl_in_sent+0xec>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   84d96:	4f51      	ldr	r7, [pc, #324]	; (84edc <udd_ctrl_in_sent+0x178>)
   84d98:	4e51      	ldr	r6, [pc, #324]	; (84ee0 <udd_ctrl_in_sent+0x17c>)
   84d9a:	883a      	ldrh	r2, [r7, #0]
   84d9c:	89b4      	ldrh	r4, [r6, #12]
   84d9e:	1aa4      	subs	r4, r4, r2
   84da0:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   84da2:	2c00      	cmp	r4, #0
   84da4:	d032      	beq.n	84e0c <udd_ctrl_in_sent+0xa8>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84da6:	4613      	mov	r3, r2
   84da8:	f8df 9138 	ldr.w	r9, [pc, #312]	; 84ee4 <udd_ctrl_in_sent+0x180>
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   84dac:	2c3f      	cmp	r4, #63	; 0x3f
		b_shortpacket = false;
   84dae:	bf86      	itte	hi
   84db0:	2200      	movhi	r2, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   84db2:	2440      	movhi	r4, #64	; 0x40
		b_shortpacket = true;
   84db4:	2201      	movls	r2, #1
   84db6:	f889 2000 	strb.w	r2, [r9]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84dba:	68b2      	ldr	r2, [r6, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84dbc:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84dc0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84dc2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84dc6:	2100      	movs	r1, #0
   84dc8:	7029      	strb	r1, [r5, #0]
	if (Is_udd_out_received(0)) {
   84dca:	4942      	ldr	r1, [pc, #264]	; (84ed4 <udd_ctrl_in_sent+0x170>)
   84dcc:	f8d1 1130 	ldr.w	r1, [r1, #304]	; 0x130
   84dd0:	0789      	lsls	r1, r1, #30
   84dd2:	d432      	bmi.n	84e3a <udd_ctrl_in_sent+0xd6>
	for (i = 0; i < nb_remain; i++) {
   84dd4:	b154      	cbz	r4, 84dec <udd_ctrl_in_sent+0x88>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84dd6:	441a      	add	r2, r3
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   84dd8:	4b43      	ldr	r3, [pc, #268]	; (84ee8 <udd_ctrl_in_sent+0x184>)
		*ptr_dest++ = *ptr_src++;
   84dda:	4618      	mov	r0, r3
   84ddc:	3301      	adds	r3, #1
   84dde:	f812 cb01 	ldrb.w	ip, [r2], #1
	for (i = 0; i < nb_remain; i++) {
   84de2:	b2d9      	uxtb	r1, r3
   84de4:	42a1      	cmp	r1, r4
		*ptr_dest++ = *ptr_src++;
   84de6:	f880 c000 	strb.w	ip, [r0]
	for (i = 0; i < nb_remain; i++) {
   84dea:	d3f6      	bcc.n	84dda <udd_ctrl_in_sent+0x76>
	udd_ctrl_payload_buf_cnt += nb_remain;
   84dec:	883b      	ldrh	r3, [r7, #0]
	udd_ack_in_send(0);
   84dee:	4a39      	ldr	r2, [pc, #228]	; (84ed4 <udd_ctrl_in_sent+0x170>)
	udd_ctrl_payload_buf_cnt += nb_remain;
   84df0:	441c      	add	r4, r3
	udd_ack_in_send(0);
   84df2:	2301      	movs	r3, #1
	udd_ctrl_payload_buf_cnt += nb_remain;
   84df4:	803c      	strh	r4, [r7, #0]
	udd_ack_in_send(0);
   84df6:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	udd_enable_in_send_interrupt(0);
   84dfa:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   84dfe:	b91e      	cbnz	r6, 84e08 <udd_ctrl_in_sent+0xa4>
		cpu_irq_enable();
   84e00:	702b      	strb	r3, [r5, #0]
   84e02:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84e06:	b662      	cpsie	i
}
   84e08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   84e0c:	4937      	ldr	r1, [pc, #220]	; (84eec <udd_ctrl_in_sent+0x188>)
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   84e0e:	88f0      	ldrh	r0, [r6, #6]
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   84e10:	880b      	ldrh	r3, [r1, #0]
   84e12:	4413      	add	r3, r2
   84e14:	b29b      	uxth	r3, r3
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   84e16:	4298      	cmp	r0, r3
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   84e18:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   84e1a:	d03c      	beq.n	84e96 <udd_ctrl_in_sent+0x132>
					|| b_shortpacket) {
   84e1c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 84ee4 <udd_ctrl_in_sent+0x180>
   84e20:	f899 a000 	ldrb.w	sl, [r9]
   84e24:	f1ba 0f00 	cmp.w	sl, #0
   84e28:	d135      	bne.n	84e96 <udd_ctrl_in_sent+0x132>
		if ((!udd_g_ctrlreq.over_under_run)
   84e2a:	6973      	ldr	r3, [r6, #20]
   84e2c:	b383      	cbz	r3, 84e90 <udd_ctrl_in_sent+0x12c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   84e2e:	4798      	blx	r3
   84e30:	2800      	cmp	r0, #0
   84e32:	d148      	bne.n	84ec6 <udd_ctrl_in_sent+0x162>
		b_shortpacket = true;
   84e34:	2201      	movs	r2, #1
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84e36:	883b      	ldrh	r3, [r7, #0]
   84e38:	e7bd      	b.n	84db6 <udd_ctrl_in_sent+0x52>
	if (cpu_irq_is_enabled_flags(flags))
   84e3a:	b926      	cbnz	r6, 84e46 <udd_ctrl_in_sent+0xe2>
		cpu_irq_enable();
   84e3c:	2301      	movs	r3, #1
   84e3e:	702b      	strb	r3, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   84e40:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84e44:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   84e46:	2304      	movs	r3, #4
   84e48:	f888 3000 	strb.w	r3, [r8]
}
   84e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (udd_g_ctrlreq.callback) {
   84e50:	4e23      	ldr	r6, [pc, #140]	; (84ee0 <udd_ctrl_in_sent+0x17c>)
   84e52:	6933      	ldr	r3, [r6, #16]
   84e54:	b103      	cbz	r3, 84e58 <udd_ctrl_in_sent+0xf4>
		udd_g_ctrlreq.callback();
   84e56:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84e58:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84e5c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84e5e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84e62:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   84e64:	2301      	movs	r3, #1
   84e66:	491b      	ldr	r1, [pc, #108]	; (84ed4 <udd_ctrl_in_sent+0x170>)
   84e68:	7028      	strb	r0, [r5, #0]
   84e6a:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   84e6e:	b91a      	cbnz	r2, 84e78 <udd_ctrl_in_sent+0x114>
		cpu_irq_enable();
   84e70:	702b      	strb	r3, [r5, #0]
   84e72:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84e76:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   84e78:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   84e7a:	2102      	movs	r1, #2
   84e7c:	4a15      	ldr	r2, [pc, #84]	; (84ed4 <udd_ctrl_in_sent+0x170>)
   84e7e:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
	udd_g_ctrlreq.over_under_run = NULL;
   84e82:	e9c6 3304 	strd	r3, r3, [r6, #16]
	udd_g_ctrlreq.payload_size = 0;
   84e86:	81b3      	strh	r3, [r6, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84e88:	f888 3000 	strb.w	r3, [r8]
}
   84e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84e90:	4613      	mov	r3, r2
		b_shortpacket = true;
   84e92:	2201      	movs	r2, #1
   84e94:	e78f      	b.n	84db6 <udd_ctrl_in_sent+0x52>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   84e96:	2304      	movs	r3, #4
   84e98:	f888 3000 	strb.w	r3, [r8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84e9c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84ea0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84ea2:	f3bf 8f5f 	dmb	sy
	udd_ack_nak_in(0);
   84ea6:	2210      	movs	r2, #16
	cpu_irq_disable();
   84ea8:	2000      	movs	r0, #0
   84eaa:	4b0a      	ldr	r3, [pc, #40]	; (84ed4 <udd_ctrl_in_sent+0x170>)
   84eac:	7028      	strb	r0, [r5, #0]
   84eae:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	udd_enable_nak_in_interrupt(0);
   84eb2:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   84eb6:	2900      	cmp	r1, #0
   84eb8:	d1a6      	bne.n	84e08 <udd_ctrl_in_sent+0xa4>
		cpu_irq_enable();
   84eba:	2301      	movs	r3, #1
   84ebc:	702b      	strb	r3, [r5, #0]
   84ebe:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84ec2:	b662      	cpsie	i
}
   84ec4:	e7a0      	b.n	84e08 <udd_ctrl_in_sent+0xa4>
			udd_ctrl_payload_buf_cnt = 0;
   84ec6:	803c      	strh	r4, [r7, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   84ec8:	4653      	mov	r3, sl
   84eca:	89b4      	ldrh	r4, [r6, #12]
   84ecc:	e76e      	b.n	84dac <udd_ctrl_in_sent+0x48>
   84ece:	bf00      	nop
   84ed0:	20070ca0 	.word	0x20070ca0
   84ed4:	400ac000 	.word	0x400ac000
   84ed8:	200722e0 	.word	0x200722e0
   84edc:	200722dc 	.word	0x200722dc
   84ee0:	200723a4 	.word	0x200723a4
   84ee4:	200722d8 	.word	0x200722d8
   84ee8:	20180000 	.word	0x20180000
   84eec:	200722de 	.word	0x200722de

00084ef0 <udd_enable>:
{
   84ef0:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84ef2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84ef6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84ef8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84efc:	2200      	movs	r2, #0
   84efe:	4c50      	ldr	r4, [pc, #320]	; (85040 <udd_enable+0x150>)
	pmc_enable_periph_clk(ID_UOTGHS);
   84f00:	4b50      	ldr	r3, [pc, #320]	; (85044 <udd_enable+0x154>)
   84f02:	2028      	movs	r0, #40	; 0x28
   84f04:	7022      	strb	r2, [r4, #0]
   84f06:	4798      	blx	r3
	sysclk_enable_usb();
   84f08:	4b4f      	ldr	r3, [pc, #316]	; (85048 <udd_enable+0x158>)
   84f0a:	4798      	blx	r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   84f0c:	f04f 0c50 	mov.w	ip, #80	; 0x50
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   84f10:	f44f 7180 	mov.w	r1, #256	; 0x100
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   84f14:	4b4d      	ldr	r3, [pc, #308]	; (8504c <udd_enable+0x15c>)
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   84f16:	4a4e      	ldr	r2, [pc, #312]	; (85050 <udd_enable+0x160>)
   84f18:	f883 c328 	strb.w	ip, [r3, #808]	; 0x328
   84f1c:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   84f20:	6059      	str	r1, [r3, #4]
   84f22:	4790      	blx	r2
	otg_disable_id_pin();
   84f24:	4b4b      	ldr	r3, [pc, #300]	; (85054 <udd_enable+0x164>)
   84f26:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84f2a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   84f2e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_force_device_mode();
   84f32:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84f36:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   84f3a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   84f3e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84f42:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   84f46:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable_pad();
   84f4a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84f4e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   84f52:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable();
   84f56:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84f5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   84f5e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_low_speed_disable();
   84f62:	681a      	ldr	r2, [r3, #0]
   84f64:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   84f68:	601a      	str	r2, [r3, #0]
	udd_high_speed_enable();
   84f6a:	681a      	ldr	r2, [r3, #0]
   84f6c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
   84f70:	601a      	str	r2, [r3, #0]
	otg_unfreeze_clock();
   84f72:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84f76:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   84f7a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   84f7e:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   84f82:	0450      	lsls	r0, r2, #17
   84f84:	d5fb      	bpl.n	84f7e <udd_enable+0x8e>
   84f86:	2300      	movs	r3, #0
   84f88:	4833      	ldr	r0, [pc, #204]	; (85058 <udd_enable+0x168>)
		udd_ep_job[i].stall_requested = false;
   84f8a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   84f8e:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
		udd_ep_job[i].busy = false;
   84f92:	7d11      	ldrb	r1, [r2, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84f94:	3301      	adds	r3, #1
		udd_ep_job[i].busy = false;
   84f96:	f021 0105 	bic.w	r1, r1, #5
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84f9a:	2b08      	cmp	r3, #8
		udd_ep_job[i].busy = false;
   84f9c:	7511      	strb	r1, [r2, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84f9e:	d1f4      	bne.n	84f8a <udd_enable+0x9a>
	otg_ack_vbus_transition();
   84fa0:	2202      	movs	r2, #2
   84fa2:	4b2c      	ldr	r3, [pc, #176]	; (85054 <udd_enable+0x164>)
   84fa4:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
	if (Is_otg_vbus_high()) {
   84fa8:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   84fac:	0509      	lsls	r1, r1, #20
		otg_raise_vbus_transition();
   84fae:	bf48      	it	mi
   84fb0:	f8c3 280c 	strmi.w	r2, [r3, #2060]	; 0x80c
	otg_enable_vbus_interrupt();
   84fb4:	4b27      	ldr	r3, [pc, #156]	; (85054 <udd_enable+0x164>)
	if (!udd_b_sleep_initialized) {
   84fb6:	4929      	ldr	r1, [pc, #164]	; (8505c <udd_enable+0x16c>)
	otg_enable_vbus_interrupt();
   84fb8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84fbc:	f042 0202 	orr.w	r2, r2, #2
   84fc0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_freeze_clock();
   84fc4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84fc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   84fcc:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (!udd_b_sleep_initialized) {
   84fd0:	780b      	ldrb	r3, [r1, #0]
   84fd2:	b9ab      	cbnz	r3, 85000 <udd_enable+0x110>
		udd_b_sleep_initialized = true;
   84fd4:	2001      	movs	r0, #1
		udd_b_idle = false;
   84fd6:	4a22      	ldr	r2, [pc, #136]	; (85060 <udd_enable+0x170>)
		udd_b_sleep_initialized = true;
   84fd8:	7008      	strb	r0, [r1, #0]
		udd_b_idle = false;
   84fda:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84fdc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84fe0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84fe2:	f3bf 8f5f 	dmb	sy
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   84fe6:	4a1f      	ldr	r2, [pc, #124]	; (85064 <udd_enable+0x174>)
   84fe8:	7023      	strb	r3, [r4, #0]
   84fea:	78d3      	ldrb	r3, [r2, #3]
   84fec:	4403      	add	r3, r0
   84fee:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   84ff0:	b161      	cbz	r1, 8500c <udd_enable+0x11c>
   84ff2:	b925      	cbnz	r5, 84ffe <udd_enable+0x10e>
		cpu_irq_enable();
   84ff4:	2301      	movs	r3, #1
   84ff6:	7023      	strb	r3, [r4, #0]
   84ff8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84ffc:	b662      	cpsie	i
}
   84ffe:	bd38      	pop	{r3, r4, r5, pc}
	if (!b_idle && udd_b_idle) {
   85000:	4b17      	ldr	r3, [pc, #92]	; (85060 <udd_enable+0x170>)
   85002:	781a      	ldrb	r2, [r3, #0]
   85004:	b93a      	cbnz	r2, 85016 <udd_enable+0x126>
	udd_b_idle = b_idle;
   85006:	2200      	movs	r2, #0
   85008:	701a      	strb	r2, [r3, #0]
}
   8500a:	e7f2      	b.n	84ff2 <udd_enable+0x102>
   8500c:	7020      	strb	r0, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   8500e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85012:	b662      	cpsie	i
}
   85014:	e7ed      	b.n	84ff2 <udd_enable+0x102>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85016:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   8501a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8501c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85020:	f04f 0c00 	mov.w	ip, #0
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   85024:	490f      	ldr	r1, [pc, #60]	; (85064 <udd_enable+0x174>)
   85026:	788a      	ldrb	r2, [r1, #2]
   85028:	3a01      	subs	r2, #1
   8502a:	708a      	strb	r2, [r1, #2]
   8502c:	f884 c000 	strb.w	ip, [r4]
	if (cpu_irq_is_enabled_flags(flags))
   85030:	2800      	cmp	r0, #0
   85032:	d1e8      	bne.n	85006 <udd_enable+0x116>
		cpu_irq_enable();
   85034:	2201      	movs	r2, #1
   85036:	7022      	strb	r2, [r4, #0]
   85038:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8503c:	b662      	cpsie	i
}
   8503e:	e7e2      	b.n	85006 <udd_enable+0x116>
   85040:	20070ca0 	.word	0x20070ca0
   85044:	000843f1 	.word	0x000843f1
   85048:	00084231 	.word	0x00084231
   8504c:	e000e100 	.word	0xe000e100
   85050:	0008444d 	.word	0x0008444d
   85054:	400ac000 	.word	0x400ac000
   85058:	200722e4 	.word	0x200722e4
   8505c:	200722da 	.word	0x200722da
   85060:	200722d9 	.word	0x200722d9
   85064:	20073420 	.word	0x20073420

00085068 <udd_attach>:
{
   85068:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8506a:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   8506e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85070:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85074:	2100      	movs	r1, #0
	if (b_idle && !udd_b_idle) {
   85076:	4a22      	ldr	r2, [pc, #136]	; (85100 <udd_attach+0x98>)
   85078:	4d22      	ldr	r5, [pc, #136]	; (85104 <udd_attach+0x9c>)
   8507a:	7813      	ldrb	r3, [r2, #0]
   8507c:	7029      	strb	r1, [r5, #0]
   8507e:	b363      	cbz	r3, 850da <udd_attach+0x72>
	udd_b_idle = b_idle;
   85080:	2101      	movs	r1, #1
	otg_unfreeze_clock();
   85082:	4b21      	ldr	r3, [pc, #132]	; (85108 <udd_attach+0xa0>)
	udd_b_idle = b_idle;
   85084:	7011      	strb	r1, [r2, #0]
	otg_unfreeze_clock();
   85086:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8508a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   8508e:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   85092:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   85096:	0452      	lsls	r2, r2, #17
   85098:	d5fb      	bpl.n	85092 <udd_attach+0x2a>
	udd_attach_device();
   8509a:	681a      	ldr	r2, [r3, #0]
	udd_enable_reset_interrupt();
   8509c:	2708      	movs	r7, #8
	udd_attach_device();
   8509e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   850a2:	601a      	str	r2, [r3, #0]
	udd_enable_suspend_interrupt();
   850a4:	2101      	movs	r1, #1
	udd_enable_wake_up_interrupt();
   850a6:	2210      	movs	r2, #16
	udd_enable_sof_interrupt();
   850a8:	2404      	movs	r4, #4
	udd_enable_msof_interrupt();
   850aa:	2002      	movs	r0, #2
	udd_enable_reset_interrupt();
   850ac:	619f      	str	r7, [r3, #24]
	udd_enable_suspend_interrupt();
   850ae:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   850b0:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   850b2:	619c      	str	r4, [r3, #24]
	udd_enable_msof_interrupt();
   850b4:	6198      	str	r0, [r3, #24]
	udd_ack_reset();
   850b6:	609f      	str	r7, [r3, #8]
	udd_ack_sof();
   850b8:	609c      	str	r4, [r3, #8]
	udd_ack_msof();
   850ba:	6098      	str	r0, [r3, #8]
	udd_raise_suspend();
   850bc:	60d9      	str	r1, [r3, #12]
	udd_ack_wake_up();
   850be:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   850c0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   850c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   850c8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (cpu_irq_is_enabled_flags(flags))
   850cc:	b91e      	cbnz	r6, 850d6 <udd_attach+0x6e>
		cpu_irq_enable();
   850ce:	7029      	strb	r1, [r5, #0]
   850d0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   850d4:	b662      	cpsie	i
}
   850d6:	bcf0      	pop	{r4, r5, r6, r7}
   850d8:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   850da:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   850de:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   850e0:	f3bf 8f5f 	dmb	sy
	++sleepmgr_locks[mode];
   850e4:	4909      	ldr	r1, [pc, #36]	; (8510c <udd_attach+0xa4>)
	cpu_irq_disable();
   850e6:	702b      	strb	r3, [r5, #0]
   850e8:	788b      	ldrb	r3, [r1, #2]
   850ea:	3301      	adds	r3, #1
   850ec:	708b      	strb	r3, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   850ee:	2800      	cmp	r0, #0
   850f0:	d1c6      	bne.n	85080 <udd_attach+0x18>
		cpu_irq_enable();
   850f2:	2301      	movs	r3, #1
   850f4:	702b      	strb	r3, [r5, #0]
   850f6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   850fa:	b662      	cpsie	i
}
   850fc:	e7c0      	b.n	85080 <udd_attach+0x18>
   850fe:	bf00      	nop
   85100:	200722d9 	.word	0x200722d9
   85104:	20070ca0 	.word	0x20070ca0
   85108:	400ac000 	.word	0x400ac000
   8510c:	20073420 	.word	0x20073420

00085110 <udd_detach>:
	otg_unfreeze_clock();
   85110:	4b17      	ldr	r3, [pc, #92]	; (85170 <udd_detach+0x60>)
	if (!b_idle && udd_b_idle) {
   85112:	4918      	ldr	r1, [pc, #96]	; (85174 <udd_detach+0x64>)
	otg_unfreeze_clock();
   85114:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   85118:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   8511c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_detach_device();
   85120:	681a      	ldr	r2, [r3, #0]
   85122:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   85126:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   85128:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8512c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   85130:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (!b_idle && udd_b_idle) {
   85134:	780b      	ldrb	r3, [r1, #0]
   85136:	b913      	cbnz	r3, 8513e <udd_detach+0x2e>
	udd_b_idle = b_idle;
   85138:	2300      	movs	r3, #0
   8513a:	700b      	strb	r3, [r1, #0]
   8513c:	4770      	bx	lr
{
   8513e:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85140:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85144:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85146:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8514a:	f04f 0c00 	mov.w	ip, #0
	--sleepmgr_locks[mode];
   8514e:	4a0a      	ldr	r2, [pc, #40]	; (85178 <udd_detach+0x68>)
   85150:	480a      	ldr	r0, [pc, #40]	; (8517c <udd_detach+0x6c>)
   85152:	7893      	ldrb	r3, [r2, #2]
   85154:	3b01      	subs	r3, #1
   85156:	7093      	strb	r3, [r2, #2]
   85158:	f880 c000 	strb.w	ip, [r0]
	if (cpu_irq_is_enabled_flags(flags))
   8515c:	b924      	cbnz	r4, 85168 <udd_detach+0x58>
		cpu_irq_enable();
   8515e:	2301      	movs	r3, #1
   85160:	7003      	strb	r3, [r0, #0]
   85162:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85166:	b662      	cpsie	i
	udd_b_idle = b_idle;
   85168:	2300      	movs	r3, #0
   8516a:	700b      	strb	r3, [r1, #0]
}
   8516c:	bc10      	pop	{r4}
   8516e:	4770      	bx	lr
   85170:	400ac000 	.word	0x400ac000
   85174:	200722d9 	.word	0x200722d9
   85178:	20073420 	.word	0x20073420
   8517c:	20070ca0 	.word	0x20070ca0

00085180 <udd_disable>:
{
   85180:	b570      	push	{r4, r5, r6, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85182:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85186:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85188:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8518c:	2600      	movs	r6, #0
   8518e:	4c1d      	ldr	r4, [pc, #116]	; (85204 <udd_disable+0x84>)
	otg_unfreeze_clock();
   85190:	4a1d      	ldr	r2, [pc, #116]	; (85208 <udd_disable+0x88>)
   85192:	7026      	strb	r6, [r4, #0]
   85194:	f8d2 3800 	ldr.w	r3, [r2, #2048]	; 0x800
	udd_detach();
   85198:	491c      	ldr	r1, [pc, #112]	; (8520c <udd_disable+0x8c>)
	otg_unfreeze_clock();
   8519a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   8519e:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
	udd_detach();
   851a2:	4788      	blx	r1
	if (udd_b_sleep_initialized) {
   851a4:	4b1a      	ldr	r3, [pc, #104]	; (85210 <udd_disable+0x90>)
   851a6:	781a      	ldrb	r2, [r3, #0]
   851a8:	b9c2      	cbnz	r2, 851dc <udd_disable+0x5c>
	otg_disable();
   851aa:	4b17      	ldr	r3, [pc, #92]	; (85208 <udd_disable+0x88>)
	sysclk_disable_usb();
   851ac:	4919      	ldr	r1, [pc, #100]	; (85214 <udd_disable+0x94>)
	otg_disable();
   851ae:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   851b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
   851b6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_disable_pad();
   851ba:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   851be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   851c2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	sysclk_disable_usb();
   851c6:	4788      	blx	r1
	pmc_disable_periph_clk(ID_UOTGHS);
   851c8:	2028      	movs	r0, #40	; 0x28
   851ca:	4b13      	ldr	r3, [pc, #76]	; (85218 <udd_disable+0x98>)
   851cc:	4798      	blx	r3
	if (cpu_irq_is_enabled_flags(flags))
   851ce:	b925      	cbnz	r5, 851da <udd_disable+0x5a>
		cpu_irq_enable();
   851d0:	2301      	movs	r3, #1
   851d2:	7023      	strb	r3, [r4, #0]
   851d4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   851d8:	b662      	cpsie	i
}
   851da:	bd70      	pop	{r4, r5, r6, pc}
		udd_b_sleep_initialized = false;
   851dc:	701e      	strb	r6, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   851de:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   851e2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   851e4:	f3bf 8f5f 	dmb	sy
   851e8:	4a0c      	ldr	r2, [pc, #48]	; (8521c <udd_disable+0x9c>)
	cpu_irq_disable();
   851ea:	7026      	strb	r6, [r4, #0]
   851ec:	78d3      	ldrb	r3, [r2, #3]
   851ee:	3b01      	subs	r3, #1
   851f0:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   851f2:	2900      	cmp	r1, #0
   851f4:	d1d9      	bne.n	851aa <udd_disable+0x2a>
		cpu_irq_enable();
   851f6:	2301      	movs	r3, #1
   851f8:	7023      	strb	r3, [r4, #0]
   851fa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   851fe:	b662      	cpsie	i
}
   85200:	e7d3      	b.n	851aa <udd_disable+0x2a>
   85202:	bf00      	nop
   85204:	20070ca0 	.word	0x20070ca0
   85208:	400ac000 	.word	0x400ac000
   8520c:	00085111 	.word	0x00085111
   85210:	200722da 	.word	0x200722da
   85214:	00084235 	.word	0x00084235
   85218:	00084411 	.word	0x00084411
   8521c:	20073420 	.word	0x20073420

00085220 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   85220:	4b03      	ldr	r3, [pc, #12]	; (85230 <udd_is_high_speed+0x10>)
   85222:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
}
   85226:	f410 5040 	ands.w	r0, r0, #12288	; 0x3000
   8522a:	bf18      	it	ne
   8522c:	2001      	movne	r0, #1
   8522e:	4770      	bx	lr
   85230:	400ac000 	.word	0x400ac000

00085234 <udd_set_address>:
	udd_disable_address();
   85234:	4b08      	ldr	r3, [pc, #32]	; (85258 <udd_set_address+0x24>)
	udd_configure_address(address);
   85236:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	udd_disable_address();
   8523a:	681a      	ldr	r2, [r3, #0]
   8523c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   85240:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   85242:	681a      	ldr	r2, [r3, #0]
   85244:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   85248:	4302      	orrs	r2, r0
   8524a:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   8524c:	681a      	ldr	r2, [r3, #0]
   8524e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   85252:	601a      	str	r2, [r3, #0]
}
   85254:	4770      	bx	lr
   85256:	bf00      	nop
   85258:	400ac000 	.word	0x400ac000

0008525c <udd_getaddress>:
	return udd_get_configured_address();
   8525c:	4b02      	ldr	r3, [pc, #8]	; (85268 <udd_getaddress+0xc>)
   8525e:	6818      	ldr	r0, [r3, #0]
}
   85260:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   85264:	4770      	bx	lr
   85266:	bf00      	nop
   85268:	400ac000 	.word	0x400ac000

0008526c <udd_get_frame_number>:
	return udd_frame_number();
   8526c:	4b02      	ldr	r3, [pc, #8]	; (85278 <udd_get_frame_number+0xc>)
   8526e:	6a18      	ldr	r0, [r3, #32]
}
   85270:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   85274:	4770      	bx	lr
   85276:	bf00      	nop
   85278:	400ac000 	.word	0x400ac000

0008527c <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   8527c:	4b02      	ldr	r3, [pc, #8]	; (85288 <udd_get_micro_frame_number+0xc>)
   8527e:	6a18      	ldr	r0, [r3, #32]
}
   85280:	f3c0 000d 	ubfx	r0, r0, #0, #14
   85284:	4770      	bx	lr
   85286:	bf00      	nop
   85288:	400ac000 	.word	0x400ac000

0008528c <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   8528c:	4b01      	ldr	r3, [pc, #4]	; (85294 <udd_set_setup_payload+0x8>)
   8528e:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   85290:	8199      	strh	r1, [r3, #12]
}
   85292:	4770      	bx	lr
   85294:	200723a4 	.word	0x200723a4

00085298 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   85298:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   8529c:	2a08      	cmp	r2, #8
   8529e:	d900      	bls.n	852a2 <udd_ep_free+0xa>
   852a0:	4770      	bx	lr
	udd_disable_endpoint(ep_index);
   852a2:	2101      	movs	r1, #1
{
   852a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_disable_endpoint(ep_index);
   852a6:	4f0e      	ldr	r7, [pc, #56]	; (852e0 <udd_ep_free+0x48>)
   852a8:	fa01 fc02 	lsl.w	ip, r1, r2
   852ac:	69fb      	ldr	r3, [r7, #28]
	udd_unallocate_memory(ep_index);
   852ae:	4d0d      	ldr	r5, [pc, #52]	; (852e4 <udd_ep_free+0x4c>)
	udd_disable_endpoint(ep_index);
   852b0:	ea23 030c 	bic.w	r3, r3, ip
   852b4:	61fb      	str	r3, [r7, #28]
	udd_unallocate_memory(ep_index);
   852b6:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   852ba:	1e50      	subs	r0, r2, #1
   852bc:	4c0a      	ldr	r4, [pc, #40]	; (852e8 <udd_ep_free+0x50>)
   852be:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   852c2:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
	udd_unallocate_memory(ep_index);
   852c6:	f023 0302 	bic.w	r3, r3, #2
   852ca:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   852ce:	4620      	mov	r0, r4
   852d0:	4e06      	ldr	r6, [pc, #24]	; (852ec <udd_ep_free+0x54>)
   852d2:	47b0      	blx	r6
	udd_ep_job[ep_index - 1].stall_requested = false;
   852d4:	7d23      	ldrb	r3, [r4, #20]
   852d6:	f36f 0382 	bfc	r3, #2, #1
   852da:	7523      	strb	r3, [r4, #20]
}
   852dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   852de:	bf00      	nop
   852e0:	400ac000 	.word	0x400ac000
   852e4:	400ac100 	.word	0x400ac100
   852e8:	200722e4 	.word	0x200722e4
   852ec:	00084b81 	.word	0x00084b81

000852f0 <udd_ep_is_halted>:
	return Is_udd_endpoint_stall_requested(ep_index);
   852f0:	4b03      	ldr	r3, [pc, #12]	; (85300 <udd_ep_is_halted+0x10>)
   852f2:	f000 000f 	and.w	r0, r0, #15
   852f6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   852fa:	f3c0 40c0 	ubfx	r0, r0, #19, #1
   852fe:	4770      	bx	lr
   85300:	400ac1c0 	.word	0x400ac1c0

00085304 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   85304:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   85308:	2b08      	cmp	r3, #8
   8530a:	d834      	bhi.n	85376 <udd_ep_set_halt+0x72>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   8530c:	4a2f      	ldr	r2, [pc, #188]	; (853cc <udd_ep_set_halt+0xc8>)
   8530e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   85312:	0311      	lsls	r1, r2, #12
   85314:	d431      	bmi.n	8537a <udd_ep_set_halt+0x76>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   85316:	492e      	ldr	r1, [pc, #184]	; (853d0 <udd_ep_set_halt+0xcc>)
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   85318:	1e5a      	subs	r2, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   8531a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   8531e:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
   85322:	f89c 1014 	ldrb.w	r1, [ip, #20]
   85326:	f011 0204 	ands.w	r2, r1, #4
   8532a:	d126      	bne.n	8537a <udd_ep_set_halt+0x76>
	if (ptr_job->busy == true) {
   8532c:	f011 0101 	ands.w	r1, r1, #1
   85330:	d121      	bne.n	85376 <udd_ep_set_halt+0x72>
{
   85332:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85334:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85338:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8533a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8533e:	4c25      	ldr	r4, [pc, #148]	; (853d4 <udd_ep_set_halt+0xd0>)
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   85340:	0602      	lsls	r2, r0, #24
   85342:	7021      	strb	r1, [r4, #0]
   85344:	d41b      	bmi.n	8537e <udd_ep_set_halt+0x7a>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   85346:	4924      	ldr	r1, [pc, #144]	; (853d8 <udd_ep_set_halt+0xd4>)
	udd_ack_stall(ep_index);
   85348:	2040      	movs	r0, #64	; 0x40
	udd_disable_endpoint_bank_autoswitch(ep_index);
   8534a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   8534e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   85352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   85356:	f44f 2100 	mov.w	r1, #524288	; 0x80000
	udd_ack_stall(ep_index);
   8535a:	4a20      	ldr	r2, [pc, #128]	; (853dc <udd_ep_set_halt+0xd8>)
   8535c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   85360:	3290      	adds	r2, #144	; 0x90
   85362:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (cpu_irq_is_enabled_flags(flags))
   85366:	bb6d      	cbnz	r5, 853c4 <udd_ep_set_halt+0xc0>
		cpu_irq_enable();
   85368:	2001      	movs	r0, #1
   8536a:	7020      	strb	r0, [r4, #0]
   8536c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85370:	b662      	cpsie	i
}
   85372:	bcf0      	pop	{r4, r5, r6, r7}
   85374:	4770      	bx	lr
		return false;
   85376:	2000      	movs	r0, #0
   85378:	4770      	bx	lr
		return true; // Already STALL
   8537a:	2001      	movs	r0, #1
}
   8537c:	4770      	bx	lr
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   8537e:	4a18      	ldr	r2, [pc, #96]	; (853e0 <udd_ep_set_halt+0xdc>)
   85380:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   85384:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   85388:	d0dd      	beq.n	85346 <udd_ep_set_halt+0x42>
		udd_disable_in_send_interrupt(ep_index);
   8538a:	2001      	movs	r0, #1
		ptr_job->stall_requested = true;
   8538c:	f89c 2014 	ldrb.w	r2, [ip, #20]
		udd_disable_in_send_interrupt(ep_index);
   85390:	4914      	ldr	r1, [pc, #80]	; (853e4 <udd_ep_set_halt+0xe0>)
		ptr_job->stall_requested = true;
   85392:	f042 0204 	orr.w	r2, r2, #4
   85396:	f88c 2014 	strb.w	r2, [ip, #20]
		udd_enable_bank_interrupt(ep_index);
   8539a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		udd_enable_endpoint_bank_autoswitch(ep_index);
   8539e:	4e0e      	ldr	r6, [pc, #56]	; (853d8 <udd_ep_set_halt+0xd4>)
		udd_disable_in_send_interrupt(ep_index);
   853a0:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   853a4:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
		udd_enable_bank_interrupt(ep_index);
   853a8:	f8df c03c 	ldr.w	ip, [pc, #60]	; 853e8 <udd_ep_set_halt+0xe4>
		udd_enable_endpoint_interrupt(ep_index);
   853ac:	4f0f      	ldr	r7, [pc, #60]	; (853ec <udd_ep_set_halt+0xe8>)
		udd_enable_endpoint_bank_autoswitch(ep_index);
   853ae:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   853b2:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
		udd_enable_bank_interrupt(ep_index);
   853b6:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   853ba:	fa02 f303 	lsl.w	r3, r2, r3
   853be:	61bb      	str	r3, [r7, #24]
	if (cpu_irq_is_enabled_flags(flags))
   853c0:	2d00      	cmp	r5, #0
   853c2:	d0d2      	beq.n	8536a <udd_ep_set_halt+0x66>
}
   853c4:	bcf0      	pop	{r4, r5, r6, r7}
		return true; // Already STALL
   853c6:	2001      	movs	r0, #1
}
   853c8:	4770      	bx	lr
   853ca:	bf00      	nop
   853cc:	400ac1c0 	.word	0x400ac1c0
   853d0:	200722e4 	.word	0x200722e4
   853d4:	20070ca0 	.word	0x20070ca0
   853d8:	400ac100 	.word	0x400ac100
   853dc:	400ac160 	.word	0x400ac160
   853e0:	400ac130 	.word	0x400ac130
   853e4:	400ac220 	.word	0x400ac220
   853e8:	400ac1f0 	.word	0x400ac1f0
   853ec:	400ac000 	.word	0x400ac000

000853f0 <udd_ep_clear_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   853f0:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index)
   853f4:	2808      	cmp	r0, #8
   853f6:	d84b      	bhi.n	85490 <udd_ep_clear_halt+0xa0>
{
   853f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   853fa:	1e41      	subs	r1, r0, #1
	if (ptr_job->stall_requested) {
   853fc:	4c25      	ldr	r4, [pc, #148]	; (85494 <udd_ep_clear_halt+0xa4>)
   853fe:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   85402:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   85406:	7d15      	ldrb	r5, [r2, #20]
   85408:	004b      	lsls	r3, r1, #1
   8540a:	076d      	lsls	r5, r5, #29
   8540c:	d524      	bpl.n	85458 <udd_ep_clear_halt+0x68>
		udd_disable_bank_interrupt(ep_index);
   8540e:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		ptr_job->stall_requested = false;
   85412:	7d16      	ldrb	r6, [r2, #20]
		udd_disable_bank_interrupt(ep_index);
   85414:	4f20      	ldr	r7, [pc, #128]	; (85498 <udd_ep_clear_halt+0xa8>)
		ptr_job->stall_requested = false;
   85416:	f36f 0682 	bfc	r6, #2, #1
		udd_disable_endpoint_interrupt(ep_index);
   8541a:	f8df e080 	ldr.w	lr, [pc, #128]	; 8549c <udd_ep_clear_halt+0xac>
		ptr_job->stall_requested = false;
   8541e:	7516      	strb	r6, [r2, #20]
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   85420:	f8df c07c 	ldr.w	ip, [pc, #124]	; 854a0 <udd_ep_clear_halt+0xb0>
		udd_disable_bank_interrupt(ep_index);
   85424:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   85428:	4085      	lsls	r5, r0
   8542a:	f8ce 5014 	str.w	r5, [lr, #20]
		udd_disable_bank_interrupt(ep_index);
   8542e:	eb07 0680 	add.w	r6, r7, r0, lsl #2
   85432:	0082      	lsls	r2, r0, #2
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   85434:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
   85438:	0307      	lsls	r7, r0, #12
   8543a:	d415      	bmi.n	85468 <udd_ep_clear_halt+0x78>
		if (ptr_job->busy == true) {
   8543c:	440b      	add	r3, r1
   8543e:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   85442:	7d11      	ldrb	r1, [r2, #20]
   85444:	00db      	lsls	r3, r3, #3
   85446:	07c8      	lsls	r0, r1, #31
   85448:	d504      	bpl.n	85454 <udd_ep_clear_halt+0x64>
			ptr_job->busy = false;
   8544a:	f36f 0100 	bfc	r1, #0, #1
			ptr_job->call_nohalt();
   8544e:	58e3      	ldr	r3, [r4, r3]
			ptr_job->busy = false;
   85450:	7511      	strb	r1, [r2, #20]
			ptr_job->call_nohalt();
   85452:	4798      	blx	r3
	return true;
   85454:	2001      	movs	r0, #1
}
   85456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   85458:	4d11      	ldr	r5, [pc, #68]	; (854a0 <udd_ep_clear_halt+0xb0>)
   8545a:	0082      	lsls	r2, r0, #2
   8545c:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   85460:	0300      	lsls	r0, r0, #12
   85462:	d5f7      	bpl.n	85454 <udd_ep_clear_halt+0x64>
		udd_disable_bank_interrupt(ep_index);
   85464:	4e0c      	ldr	r6, [pc, #48]	; (85498 <udd_ep_clear_halt+0xa8>)
   85466:	4416      	add	r6, r2
		if (Is_udd_stall(ep_index)) {
   85468:	480e      	ldr	r0, [pc, #56]	; (854a4 <udd_ep_clear_halt+0xb4>)
   8546a:	5810      	ldr	r0, [r2, r0]
   8546c:	0645      	lsls	r5, r0, #25
   8546e:	d506      	bpl.n	8547e <udd_ep_clear_halt+0x8e>
			udd_ack_stall(ep_index);
   85470:	2740      	movs	r7, #64	; 0x40
			udd_reset_data_toggle(ep_index);
   85472:	f44f 2580 	mov.w	r5, #262144	; 0x40000
			udd_ack_stall(ep_index);
   85476:	480c      	ldr	r0, [pc, #48]	; (854a8 <udd_ep_clear_halt+0xb8>)
   85478:	5017      	str	r7, [r2, r0]
			udd_reset_data_toggle(ep_index);
   8547a:	3090      	adds	r0, #144	; 0x90
   8547c:	5015      	str	r5, [r2, r0]
		udd_disable_stall_handshake(ep_index);
   8547e:	f44f 2000 	mov.w	r0, #524288	; 0x80000
		udd_enable_endpoint_bank_autoswitch(ep_index);
   85482:	4d0a      	ldr	r5, [pc, #40]	; (854ac <udd_ep_clear_halt+0xbc>)
		udd_disable_stall_handshake(ep_index);
   85484:	6030      	str	r0, [r6, #0]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   85486:	5950      	ldr	r0, [r2, r5]
   85488:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   8548c:	5150      	str	r0, [r2, r5]
	if (b_stall_cleared) {
   8548e:	e7d5      	b.n	8543c <udd_ep_clear_halt+0x4c>
		return false;
   85490:	2000      	movs	r0, #0
}
   85492:	4770      	bx	lr
   85494:	200722e4 	.word	0x200722e4
   85498:	400ac220 	.word	0x400ac220
   8549c:	400ac000 	.word	0x400ac000
   854a0:	400ac1c0 	.word	0x400ac1c0
   854a4:	400ac130 	.word	0x400ac130
   854a8:	400ac160 	.word	0x400ac160
   854ac:	400ac100 	.word	0x400ac100

000854b0 <udd_ep_run>:
{
   854b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   854b4:	f000 000f 	and.w	r0, r0, #15
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
   854b8:	4d43      	ldr	r5, [pc, #268]	; (855c8 <udd_ep_run+0x118>)
	if (USB_DEVICE_MAX_EP < ep) {
   854ba:	2808      	cmp	r0, #8
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
   854bc:	f855 8020 	ldr.w	r8, [r5, r0, lsl #2]
	if (USB_DEVICE_MAX_EP < ep) {
   854c0:	d874      	bhi.n	855ac <udd_ep_run+0xfc>
	if ((!Is_udd_endpoint_enabled(ep))
   854c2:	2601      	movs	r6, #1
   854c4:	4c41      	ldr	r4, [pc, #260]	; (855cc <udd_ep_run+0x11c>)
   854c6:	fa06 f700 	lsl.w	r7, r6, r0
   854ca:	69e4      	ldr	r4, [r4, #28]
   854cc:	4227      	tst	r7, r4
   854ce:	d06d      	beq.n	855ac <udd_ep_run+0xfc>
			|| Is_udd_endpoint_stall_requested(ep)
   854d0:	4c3f      	ldr	r4, [pc, #252]	; (855d0 <udd_ep_run+0x120>)
   854d2:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   854d6:	0324      	lsls	r4, r4, #12
   854d8:	d468      	bmi.n	855ac <udd_ep_run+0xfc>
	ptr_job = &udd_ep_job[ep - 1];
   854da:	f100 3cff 	add.w	ip, r0, #4294967295
			|| ptr_job->stall_requested) {
   854de:	4f3d      	ldr	r7, [pc, #244]	; (855d4 <udd_ep_run+0x124>)
   854e0:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
   854e4:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
   854e8:	f89e 4014 	ldrb.w	r4, [lr, #20]
   854ec:	fa0c fa06 	lsl.w	sl, ip, r6
   854f0:	f014 0b04 	ands.w	fp, r4, #4
   854f4:	d15a      	bne.n	855ac <udd_ep_run+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   854f6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   854fa:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   854fc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85500:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 855d8 <udd_ep_run+0x128>
   85504:	f889 b000 	strb.w	fp, [r9]
	if (ptr_job->busy == true) {
   85508:	f89e b014 	ldrb.w	fp, [lr, #20]
   8550c:	f01b 0f01 	tst.w	fp, #1
   85510:	d14b      	bne.n	855aa <udd_ep_run+0xfa>
	ptr_job->busy = true;
   85512:	f89e b014 	ldrb.w	fp, [lr, #20]
   85516:	f04b 0b01 	orr.w	fp, fp, #1
   8551a:	f88e b014 	strb.w	fp, [lr, #20]
	if (cpu_irq_is_enabled_flags(flags))
   8551e:	b924      	cbnz	r4, 8552a <udd_ep_run+0x7a>
		cpu_irq_enable();
   85520:	f889 6000 	strb.w	r6, [r9]
   85524:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85528:	b662      	cpsie	i
	ptr_job->buf_cnt = 0;
   8552a:	2600      	movs	r6, #0
	ptr_job->call_trans = callback;
   8552c:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
	ptr_job->buf = buf;
   85530:	eb0a 040c 	add.w	r4, sl, ip
	ptr_job->call_trans = callback;
   85534:	f847 e034 	str.w	lr, [r7, r4, lsl #3]
	ptr_job->buf = buf;
   85538:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
	ptr_job->buf_size = buf_size;
   8553c:	e9c4 2301 	strd	r2, r3, [r4, #4]
	ptr_job->buf_load = 0;
   85540:	e9c4 6603 	strd	r6, r6, [r4, #12]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   85544:	b911      	cbnz	r1, 8554c <udd_ep_run+0x9c>
   85546:	fab3 f183 	clz	r1, r3
   8554a:	0949      	lsrs	r1, r1, #5
   8554c:	44e2      	add	sl, ip
   8554e:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
   85552:	7d3b      	ldrb	r3, [r7, #20]
	if (!Is_udd_endpoint_dma_supported(ep)) {
   85554:	fa5f fc8c 	uxtb.w	ip, ip
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   85558:	f361 0341 	bfi	r3, r1, #1, #1
	if (!Is_udd_endpoint_dma_supported(ep)) {
   8555c:	f1bc 0f05 	cmp.w	ip, #5
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   85560:	753b      	strb	r3, [r7, #20]
	if (!Is_udd_endpoint_dma_supported(ep)) {
   85562:	d926      	bls.n	855b2 <udd_ep_run+0x102>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85564:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85568:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8556a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8556e:	2100      	movs	r1, #0
		udd_enable_endpoint_interrupt(ep);
   85570:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   85574:	f889 1000 	strb.w	r1, [r9]
   85578:	4914      	ldr	r1, [pc, #80]	; (855cc <udd_ep_run+0x11c>)
   8557a:	4083      	lsls	r3, r0
		if (b_dir_in) {
   8557c:	f418 7f80 	tst.w	r8, #256	; 0x100
		udd_enable_endpoint_interrupt(ep);
   85580:	618b      	str	r3, [r1, #24]
			udd_enable_in_send_interrupt(ep);
   85582:	bf14      	ite	ne
   85584:	2101      	movne	r1, #1
			udd_enable_out_received_interrupt(ep);
   85586:	2102      	moveq	r1, #2
			udd_disable_endpoint_bank_autoswitch(ep);
   85588:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
   8558c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   85590:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
			udd_enable_out_received_interrupt(ep);
   85594:	4b11      	ldr	r3, [pc, #68]	; (855dc <udd_ep_run+0x12c>)
   85596:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
		cpu_irq_enable();
   8559a:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
   8559c:	b93a      	cbnz	r2, 855ae <udd_ep_run+0xfe>
		cpu_irq_enable();
   8559e:	f889 0000 	strb.w	r0, [r9]
   855a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   855a6:	b662      	cpsie	i
}
   855a8:	e001      	b.n	855ae <udd_ep_run+0xfe>
	if (cpu_irq_is_enabled_flags(flags))
   855aa:	b134      	cbz	r4, 855ba <udd_ep_run+0x10a>
		return false;
   855ac:	2000      	movs	r0, #0
}
   855ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	udd_ep_trans_done(ep);
   855b2:	4b0b      	ldr	r3, [pc, #44]	; (855e0 <udd_ep_run+0x130>)
   855b4:	4798      	blx	r3
	return true;
   855b6:	2001      	movs	r0, #1
   855b8:	e7f9      	b.n	855ae <udd_ep_run+0xfe>
		cpu_irq_enable();
   855ba:	f889 6000 	strb.w	r6, [r9]
  __ASM volatile ("dmb 0xF":::"memory");
   855be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   855c2:	b662      	cpsie	i
		return false; // Job already on going
   855c4:	4620      	mov	r0, r4
}
   855c6:	e7f2      	b.n	855ae <udd_ep_run+0xfe>
   855c8:	400ac100 	.word	0x400ac100
   855cc:	400ac000 	.word	0x400ac000
   855d0:	400ac1c0 	.word	0x400ac1c0
   855d4:	200722e4 	.word	0x200722e4
   855d8:	20070ca0 	.word	0x20070ca0
   855dc:	400ac1f0 	.word	0x400ac1f0
   855e0:	00084bbd 	.word	0x00084bbd

000855e4 <udd_ep_alloc>:
	ep = ep & USB_EP_ADDR_MASK;
   855e4:	f000 030f 	and.w	r3, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   855e8:	2b08      	cmp	r3, #8
   855ea:	f200 80da 	bhi.w	857a2 <udd_ep_alloc+0x1be>
{
   855ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (Is_udd_endpoint_enabled(ep)) {
   855f2:	4c74      	ldr	r4, [pc, #464]	; (857c4 <udd_ep_alloc+0x1e0>)
{
   855f4:	b085      	sub	sp, #20
	if (Is_udd_endpoint_enabled(ep)) {
   855f6:	69e5      	ldr	r5, [r4, #28]
   855f8:	2401      	movs	r4, #1
   855fa:	409c      	lsls	r4, r3
   855fc:	4025      	ands	r5, r4
   855fe:	f040 80cc 	bne.w	8579a <udd_ep_alloc+0x1b6>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   85602:	f001 0403 	and.w	r4, r1, #3
   85606:	3c01      	subs	r4, #1
   85608:	b2e4      	uxtb	r4, r4
   8560a:	2c02      	cmp	r4, #2
   8560c:	f200 80c5 	bhi.w	8579a <udd_ep_alloc+0x1b6>
   85610:	4e6d      	ldr	r6, [pc, #436]	; (857c8 <udd_ep_alloc+0x1e4>)
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   85612:	4f6e      	ldr	r7, [pc, #440]	; (857cc <udd_ep_alloc+0x1e8>)
   85614:	5d34      	ldrb	r4, [r6, r4]
	if (ep > 2) nb_bank = 1;
   85616:	2b02      	cmp	r3, #2
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   85618:	ea4f 21c1 	mov.w	r1, r1, lsl #11
	switch (nb_bank) {
   8561c:	bf98      	it	ls
   8561e:	f104 36ff 	addls.w	r6, r4, #4294967295
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   85622:	f401 5cc0 	and.w	ip, r1, #6144	; 0x1800
   85626:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   8562a:	bf96      	itet	ls
   8562c:	b2f6      	uxtbls	r6, r6
   8562e:	462e      	movhi	r6, r5
   85630:	00b6      	lslls	r6, r6, #2
   85632:	f421 51cb 	bic.w	r1, r1, #6496	; 0x1960
   85636:	f010 0f80 	tst.w	r0, #128	; 0x80
   8563a:	bf18      	it	ne
   8563c:	f44f 7580 	movne.w	r5, #256	; 0x100
   85640:	f021 011c 	bic.w	r1, r1, #28
   85644:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   85648:	461c      	mov	r4, r3
   8564a:	ea41 010c 	orr.w	r1, r1, ip
   8564e:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
   85652:	f0c0 80a8 	bcc.w	857a6 <udd_ep_alloc+0x1c2>
   85656:	2270      	movs	r2, #112	; 0x70
	ep_allocated = 1 << ep;
   85658:	f04f 0801 	mov.w	r8, #1
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8565c:	4331      	orrs	r1, r6
   8565e:	430d      	orrs	r5, r1
   85660:	432a      	orrs	r2, r5
   85662:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   85666:	0701      	lsls	r1, r0, #28
	ep_allocated = 1 << ep;
   85668:	fa08 f703 	lsl.w	r7, r8, r3
   8566c:	b2be      	uxth	r6, r7
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8566e:	d41b      	bmi.n	856a8 <udd_ep_alloc+0xc4>
   85670:	2208      	movs	r2, #8
		if (Is_udd_endpoint_enabled(i)) {
   85672:	469c      	mov	ip, r3
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   85674:	4956      	ldr	r1, [pc, #344]	; (857d0 <udd_ep_alloc+0x1ec>)
		if (Is_udd_endpoint_enabled(i)) {
   85676:	4f53      	ldr	r7, [pc, #332]	; (857c4 <udd_ep_alloc+0x1e0>)
   85678:	69fb      	ldr	r3, [r7, #28]
   8567a:	fa08 f002 	lsl.w	r0, r8, r2
   8567e:	4203      	tst	r3, r0
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   85680:	f102 32ff 	add.w	r2, r2, #4294967295
   85684:	b2d5      	uxtb	r5, r2
		if (Is_udd_endpoint_enabled(i)) {
   85686:	d009      	beq.n	8569c <udd_ep_alloc+0xb8>
			udd_disable_endpoint(i);
   85688:	69fb      	ldr	r3, [r7, #28]
			ep_allocated |= 1 << i;
   8568a:	4306      	orrs	r6, r0
			udd_disable_endpoint(i);
   8568c:	ea23 0000 	bic.w	r0, r3, r0
   85690:	61f8      	str	r0, [r7, #28]
			udd_unallocate_memory(i);
   85692:	6808      	ldr	r0, [r1, #0]
			ep_allocated |= 1 << i;
   85694:	b2b6      	uxth	r6, r6
			udd_unallocate_memory(i);
   85696:	f020 0002 	bic.w	r0, r0, #2
   8569a:	6008      	str	r0, [r1, #0]
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8569c:	4565      	cmp	r5, ip
   8569e:	f1a1 0104 	sub.w	r1, r1, #4
   856a2:	d8e9      	bhi.n	85678 <udd_ep_alloc+0x94>
		if (ep_allocated & (1 << i)) {
   856a4:	4663      	mov	r3, ip
   856a6:	4637      	mov	r7, r6
   856a8:	f8df 9128 	ldr.w	r9, [pc, #296]	; 857d4 <udd_ep_alloc+0x1f0>
   856ac:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   856b0:	4675      	mov	r5, lr
			udd_enable_endpoint(i);
   856b2:	f8df 8110 	ldr.w	r8, [pc, #272]	; 857c4 <udd_ep_alloc+0x1e0>
   856b6:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
   856ba:	b2db      	uxtb	r3, r3
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   856bc:	9703      	str	r7, [sp, #12]
   856be:	e029      	b.n	85714 <udd_ep_alloc+0x130>
					&& !Is_udd_endpoint_in(i)) {
   856c0:	682a      	ldr	r2, [r5, #0]
   856c2:	05d2      	lsls	r2, r2, #23
   856c4:	d456      	bmi.n	85774 <udd_ep_alloc+0x190>
					ptr_job->buf_cnt -= ptr_job->buf_load;
   856c6:	e956 7203 	ldrd	r7, r2, [r6, #-12]
   856ca:	1aba      	subs	r2, r7, r2
   856cc:	f846 2c0c 	str.w	r2, [r6, #-12]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   856d0:	f8d5 c000 	ldr.w	ip, [r5]
   856d4:	f856 7c14 	ldr.w	r7, [r6, #-20]
   856d8:	f41c 7f80 	tst.w	ip, #256	; 0x100
   856dc:	bf18      	it	ne
   856de:	f043 0080 	orrne.w	r0, r3, #128	; 0x80
						ptr_job->b_shortpacket,
   856e2:	4471      	add	r1, lr
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   856e4:	f856 3c10 	ldr.w	r3, [r6, #-16]
						ptr_job->b_shortpacket,
   856e8:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
   856ec:	7d09      	ldrb	r1, [r1, #20]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   856ee:	1a9b      	subs	r3, r3, r2
   856f0:	443a      	add	r2, r7
   856f2:	f856 7c18 	ldr.w	r7, [r6, #-24]
   856f6:	f3c1 0140 	ubfx	r1, r1, #1, #1
   856fa:	9700      	str	r7, [sp, #0]
   856fc:	4f36      	ldr	r7, [pc, #216]	; (857d8 <udd_ep_alloc+0x1f4>)
   856fe:	47b8      	blx	r7
				if (!b_restart) {
   85700:	2800      	cmp	r0, #0
   85702:	d04a      	beq.n	8579a <udd_ep_alloc+0x1b6>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   85704:	3401      	adds	r4, #1
   85706:	b2e3      	uxtb	r3, r4
   85708:	2b09      	cmp	r3, #9
   8570a:	f105 0504 	add.w	r5, r5, #4
   8570e:	f106 0618 	add.w	r6, r6, #24
   85712:	d053      	beq.n	857bc <udd_ep_alloc+0x1d8>
		if (ep_allocated & (1 << i)) {
   85714:	9a03      	ldr	r2, [sp, #12]
   85716:	4618      	mov	r0, r3
   85718:	4122      	asrs	r2, r4
   8571a:	07d2      	lsls	r2, r2, #31
   8571c:	d5f2      	bpl.n	85704 <udd_ep_alloc+0x120>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   8571e:	1e61      	subs	r1, r4, #1
			bool b_restart = ptr_job->busy;
   85720:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
   85724:	eb09 0ccc 	add.w	ip, r9, ip, lsl #3
   85728:	f89c a014 	ldrb.w	sl, [ip, #20]
			udd_enable_endpoint(i);
   8572c:	2201      	movs	r2, #1
			ptr_job->busy = false;
   8572e:	46d3      	mov	fp, sl
   85730:	f36f 0b00 	bfc	fp, #0, #1
   85734:	f88c b014 	strb.w	fp, [ip, #20]
			udd_allocate_memory(i);
   85738:	f8d5 b000 	ldr.w	fp, [r5]
			udd_enable_endpoint(i);
   8573c:	40a2      	lsls	r2, r4
			udd_allocate_memory(i);
   8573e:	f04b 0b02 	orr.w	fp, fp, #2
   85742:	f8c5 b000 	str.w	fp, [r5]
			udd_enable_endpoint(i);
   85746:	f8d8 b01c 	ldr.w	fp, [r8, #28]
			bool b_restart = ptr_job->busy;
   8574a:	f00a 0a01 	and.w	sl, sl, #1
			udd_enable_endpoint(i);
   8574e:	ea42 020b 	orr.w	r2, r2, fp
   85752:	f8c8 201c 	str.w	r2, [r8, #28]
			if ((!Is_udd_endpoint_configured(i)) && (1)) { //this is dumb
   85756:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			bool b_restart = ptr_job->busy;
   85758:	ea4f 0e41 	mov.w	lr, r1, lsl #1
			if ((!Is_udd_endpoint_configured(i)) && (1)) { //this is dumb
   8575c:	0357      	lsls	r7, r2, #13
   8575e:	d50c      	bpl.n	8577a <udd_ep_alloc+0x196>
			udd_enable_endpoint_bank_autoswitch(i);
   85760:	682a      	ldr	r2, [r5, #0]
   85762:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   85766:	602a      	str	r2, [r5, #0]
			if (b_restart) {
   85768:	f1ba 0f00 	cmp.w	sl, #0
   8576c:	d0ca      	beq.n	85704 <udd_ep_alloc+0x120>
				if (!Is_udd_endpoint_dma_supported(i)
   8576e:	1e5a      	subs	r2, r3, #1
   85770:	2a05      	cmp	r2, #5
   85772:	d8a5      	bhi.n	856c0 <udd_ep_alloc+0xdc>
						&ptr_job->buf[ptr_job->buf_cnt],
   85774:	f856 2c0c 	ldr.w	r2, [r6, #-12]
   85778:	e7aa      	b.n	856d0 <udd_ep_alloc+0xec>
				if (NULL == ptr_job->call_trans) {
   8577a:	f8dc 3000 	ldr.w	r3, [ip]
   8577e:	b163      	cbz	r3, 8579a <udd_ep_alloc+0x1b6>
				if (Is_udd_endpoint_in(i)) {
   85780:	682a      	ldr	r2, [r5, #0]
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   85782:	4471      	add	r1, lr
				if (Is_udd_endpoint_in(i)) {
   85784:	05d4      	lsls	r4, r2, #23
					i |= USB_EP_DIR_IN;
   85786:	bf48      	it	mi
   85788:	f040 0080 	orrmi.w	r0, r0, #128	; 0x80
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   8578c:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
   85790:	4602      	mov	r2, r0
   85792:	f8d9 100c 	ldr.w	r1, [r9, #12]
   85796:	2001      	movs	r0, #1
   85798:	4798      	blx	r3
				return false;
   8579a:	2000      	movs	r0, #0
}
   8579c:	b005      	add	sp, #20
   8579e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   857a2:	2000      	movs	r0, #0
}
   857a4:	4770      	bx	lr
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   857a6:	2a08      	cmp	r2, #8
   857a8:	bf38      	it	cc
   857aa:	2208      	movcc	r2, #8
   857ac:	0052      	lsls	r2, r2, #1
   857ae:	3a01      	subs	r2, #1
   857b0:	fab2 f282 	clz	r2, r2
   857b4:	f1c2 021c 	rsb	r2, r2, #28
   857b8:	0112      	lsls	r2, r2, #4
   857ba:	e74d      	b.n	85658 <udd_ep_alloc+0x74>
	return true;
   857bc:	2001      	movs	r0, #1
}
   857be:	b005      	add	sp, #20
   857c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   857c4:	400ac000 	.word	0x400ac000
   857c8:	0008daa4 	.word	0x0008daa4
   857cc:	400ac100 	.word	0x400ac100
   857d0:	400ac120 	.word	0x400ac120
   857d4:	200722e4 	.word	0x200722e4
   857d8:	000854b1 	.word	0x000854b1

000857dc <udd_ep_abort>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   857dc:	f000 020f 	and.w	r2, r0, #15
	if (!Is_udd_endpoint_dma_supported(ep_index)) {
   857e0:	f102 3cff 	add.w	ip, r2, #4294967295
   857e4:	fa5f f38c 	uxtb.w	r3, ip
   857e8:	2b05      	cmp	r3, #5
{
   857ea:	b570      	push	{r4, r5, r6, lr}
	if (!Is_udd_endpoint_dma_supported(ep_index)) {
   857ec:	d919      	bls.n	85822 <udd_ep_abort+0x46>
		udd_disable_endpoint_interrupt(ep_index);
   857ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		udd_disable_out_received_interrupt(ep_index);
   857f2:	2502      	movs	r5, #2
		udd_disable_in_send_interrupt(ep_index);
   857f4:	2401      	movs	r4, #1
		udd_disable_out_received_interrupt(ep_index);
   857f6:	4920      	ldr	r1, [pc, #128]	; (85878 <udd_ep_abort+0x9c>)
		udd_disable_endpoint_interrupt(ep_index);
   857f8:	4e20      	ldr	r6, [pc, #128]	; (8587c <udd_ep_abort+0xa0>)
   857fa:	4093      	lsls	r3, r2
   857fc:	6173      	str	r3, [r6, #20]
		udd_disable_out_received_interrupt(ep_index);
   857fe:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
		udd_disable_in_send_interrupt(ep_index);
   85802:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
	udd_disable_endpoint_interrupt(ep_index);
   85806:	491d      	ldr	r1, [pc, #116]	; (8587c <udd_ep_abort+0xa0>)
   85808:	614b      	str	r3, [r1, #20]
	if (ep & USB_EP_DIR_IN) {
   8580a:	0601      	lsls	r1, r0, #24
   8580c:	d41b      	bmi.n	85846 <udd_ep_abort+0x6a>
}
   8580e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   85812:	481b      	ldr	r0, [pc, #108]	; (85880 <udd_ep_abort+0xa4>)
   85814:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   85818:	2101      	movs	r1, #1
   8581a:	4b1a      	ldr	r3, [pc, #104]	; (85884 <udd_ep_abort+0xa8>)
   8581c:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
   85820:	4718      	bx	r3
		udd_disable_endpoint_dma_interrupt(ep_index);
   85822:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
		udd_endpoint_dma_set_control(ep_index, 0);
   85826:	2500      	movs	r5, #0
		udd_disable_endpoint_interrupt(ep_index);
   85828:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		udd_endpoint_dma_set_control(ep_index, 0);
   8582c:	4916      	ldr	r1, [pc, #88]	; (85888 <udd_ep_abort+0xac>)
		udd_disable_endpoint_dma_interrupt(ep_index);
   8582e:	4e13      	ldr	r6, [pc, #76]	; (8587c <udd_ep_abort+0xa0>)
		udd_endpoint_dma_set_control(ep_index, 0);
   85830:	eb01 1102 	add.w	r1, r1, r2, lsl #4
		udd_disable_endpoint_dma_interrupt(ep_index);
   85834:	fa04 f40c 	lsl.w	r4, r4, ip
   85838:	6174      	str	r4, [r6, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   8583a:	608d      	str	r5, [r1, #8]
	udd_disable_endpoint_interrupt(ep_index);
   8583c:	490f      	ldr	r1, [pc, #60]	; (8587c <udd_ep_abort+0xa0>)
		udd_disable_endpoint_interrupt(ep_index);
   8583e:	4093      	lsls	r3, r2
	udd_disable_endpoint_interrupt(ep_index);
   85840:	614b      	str	r3, [r1, #20]
	if (ep & USB_EP_DIR_IN) {
   85842:	0601      	lsls	r1, r0, #24
   85844:	d5e3      	bpl.n	8580e <udd_ep_abort+0x32>
		while(udd_nb_busy_bank(ep_index)) {
   85846:	4b11      	ldr	r3, [pc, #68]	; (8588c <udd_ep_abort+0xb0>)
   85848:	0095      	lsls	r5, r2, #2
   8584a:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
   8584e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   85852:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   85856:	d0da      	beq.n	8580e <udd_ep_abort+0x32>
			udd_kill_last_in_bank(ep_index);
   85858:	f44f 5400 	mov.w	r4, #8192	; 0x2000
   8585c:	480c      	ldr	r0, [pc, #48]	; (85890 <udd_ep_abort+0xb4>)
			while(Is_udd_kill_last(ep_index));
   8585e:	490d      	ldr	r1, [pc, #52]	; (85894 <udd_ep_abort+0xb8>)
			udd_kill_last_in_bank(ep_index);
   85860:	4428      	add	r0, r5
			while(Is_udd_kill_last(ep_index));
   85862:	4429      	add	r1, r5
			udd_kill_last_in_bank(ep_index);
   85864:	6004      	str	r4, [r0, #0]
			while(Is_udd_kill_last(ep_index));
   85866:	680b      	ldr	r3, [r1, #0]
   85868:	049b      	lsls	r3, r3, #18
   8586a:	d4fc      	bmi.n	85866 <udd_ep_abort+0x8a>
		while(udd_nb_busy_bank(ep_index)) {
   8586c:	f8de 3000 	ldr.w	r3, [lr]
   85870:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   85874:	d1f6      	bne.n	85864 <udd_ep_abort+0x88>
   85876:	e7ca      	b.n	8580e <udd_ep_abort+0x32>
   85878:	400ac220 	.word	0x400ac220
   8587c:	400ac000 	.word	0x400ac000
   85880:	200722e4 	.word	0x200722e4
   85884:	00084b81 	.word	0x00084b81
   85888:	400ac300 	.word	0x400ac300
   8588c:	400ac130 	.word	0x400ac130
   85890:	400ac1f0 	.word	0x400ac1f0
   85894:	400ac1c0 	.word	0x400ac1c0

00085898 <UOTGHS_Handler>:
{
   85898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   8589c:	4bb1      	ldr	r3, [pc, #708]	; (85b64 <UOTGHS_Handler+0x2cc>)
{
   8589e:	b083      	sub	sp, #12
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   858a0:	4798      	blx	r3
   858a2:	b928      	cbnz	r0, 858b0 <UOTGHS_Handler+0x18>
   858a4:	4bb0      	ldr	r3, [pc, #704]	; (85b68 <UOTGHS_Handler+0x2d0>)
   858a6:	685b      	ldr	r3, [r3, #4]
   858a8:	f013 0301 	ands.w	r3, r3, #1
   858ac:	f000 80b8 	beq.w	85a20 <UOTGHS_Handler+0x188>
	if (Is_udd_sof()) {
   858b0:	4aad      	ldr	r2, [pc, #692]	; (85b68 <UOTGHS_Handler+0x2d0>)
   858b2:	6853      	ldr	r3, [r2, #4]
   858b4:	075f      	lsls	r7, r3, #29
   858b6:	f100 80a0 	bmi.w	859fa <UOTGHS_Handler+0x162>
	if (Is_udd_msof()) {
   858ba:	6853      	ldr	r3, [r2, #4]
   858bc:	f013 0302 	ands.w	r3, r3, #2
   858c0:	f040 80a7 	bne.w	85a12 <UOTGHS_Handler+0x17a>
	if (!Is_udd_endpoint_interrupt(0)) {
   858c4:	6851      	ldr	r1, [r2, #4]
   858c6:	04ce      	lsls	r6, r1, #19
   858c8:	d523      	bpl.n	85912 <UOTGHS_Handler+0x7a>
	udd_disable_nak_out_interrupt(0);
   858ca:	2108      	movs	r1, #8
	udd_disable_nak_in_interrupt(0);
   858cc:	2010      	movs	r0, #16
   858ce:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	udd_disable_nak_out_interrupt(0);
   858d2:	f8c2 1220 	str.w	r1, [r2, #544]	; 0x220
	if (Is_udd_setup_received(0)) {
   858d6:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   858da:	074d      	lsls	r5, r1, #29
   858dc:	f100 8181 	bmi.w	85be2 <UOTGHS_Handler+0x34a>
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   858e0:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   858e4:	07cc      	lsls	r4, r1, #31
   858e6:	d504      	bpl.n	858f2 <UOTGHS_Handler+0x5a>
   858e8:	f8d2 21c0 	ldr.w	r2, [r2, #448]	; 0x1c0
   858ec:	07d0      	lsls	r0, r2, #31
   858ee:	f100 832c 	bmi.w	85f4a <UOTGHS_Handler+0x6b2>
	if (Is_udd_out_received(0)) {
   858f2:	4a9d      	ldr	r2, [pc, #628]	; (85b68 <UOTGHS_Handler+0x2d0>)
   858f4:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   858f8:	0789      	lsls	r1, r1, #30
   858fa:	f100 8221 	bmi.w	85d40 <UOTGHS_Handler+0x4a8>
	if (Is_udd_nak_out(0)) {
   858fe:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   85902:	070f      	lsls	r7, r1, #28
   85904:	f100 8249 	bmi.w	85d9a <UOTGHS_Handler+0x502>
	if (Is_udd_nak_in(0)) {
   85908:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   8590c:	06cd      	lsls	r5, r1, #27
   8590e:	f100 819b 	bmi.w	85c48 <UOTGHS_Handler+0x3b0>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   85912:	4e96      	ldr	r6, [pc, #600]	; (85b6c <UOTGHS_Handler+0x2d4>)
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85914:	2101      	movs	r1, #1
   85916:	4635      	mov	r5, r6
   85918:	4634      	mov	r4, r6
   8591a:	f04f 0e04 	mov.w	lr, #4
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8591e:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
		}
#endif
#ifdef UDD_EP_FIFO_SUPPORTED
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_dma_supported(ep)
				&& Is_udd_endpoint_interrupt_enabled(ep)) {
   85922:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85926:	4f92      	ldr	r7, [pc, #584]	; (85b70 <UOTGHS_Handler+0x2d8>)
   85928:	4a92      	ldr	r2, [pc, #584]	; (85b74 <UOTGHS_Handler+0x2dc>)
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8592a:	f8df 823c 	ldr.w	r8, [pc, #572]	; 85b68 <UOTGHS_Handler+0x2d0>
   8592e:	e029      	b.n	85984 <UOTGHS_Handler+0xec>
				&& Is_udd_endpoint_interrupt_enabled(ep)) {
   85930:	fa0a fc01 	lsl.w	ip, sl, r1
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   85934:	f8d8 b010 	ldr.w	fp, [r8, #16]
   85938:	ea1b 0f0c 	tst.w	fp, ip
   8593c:	d014      	beq.n	85968 <UOTGHS_Handler+0xd0>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   8593e:	f8d7 b000 	ldr.w	fp, [r7]
   85942:	f01b 0f01 	tst.w	fp, #1
   85946:	d005      	beq.n	85954 <UOTGHS_Handler+0xbc>
					&& Is_udd_in_send(ep)) {
   85948:	f8d2 b000 	ldr.w	fp, [r2]
   8594c:	f01b 0f01 	tst.w	fp, #1
   85950:	f040 83a8 	bne.w	860a4 <UOTGHS_Handler+0x80c>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   85954:	6838      	ldr	r0, [r7, #0]
   85956:	04c0      	lsls	r0, r0, #19
   85958:	d506      	bpl.n	85968 <UOTGHS_Handler+0xd0>
					&& (0 == udd_nb_busy_bank(ep))) {
   8595a:	6810      	ldr	r0, [r2, #0]
   8595c:	f410 5f40 	tst.w	r0, #12288	; 0x3000
   85960:	f3c0 3b01 	ubfx	fp, r0, #12, #2
   85964:	f000 83af 	beq.w	860c6 <UOTGHS_Handler+0x82e>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   85968:	3301      	adds	r3, #1
   8596a:	2b08      	cmp	r3, #8
   8596c:	f10e 0e04 	add.w	lr, lr, #4
   85970:	f102 0204 	add.w	r2, r2, #4
   85974:	f107 0704 	add.w	r7, r7, #4
   85978:	f104 0418 	add.w	r4, r4, #24
   8597c:	f101 0101 	add.w	r1, r1, #1
   85980:	f000 80a5 	beq.w	85ace <UOTGHS_Handler+0x236>
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   85984:	f8d8 b010 	ldr.w	fp, [r8, #16]
   85988:	fa09 fc03 	lsl.w	ip, r9, r3
   8598c:	ea1b 0f0c 	tst.w	fp, ip
   85990:	b2c8      	uxtb	r0, r1
   85992:	d005      	beq.n	859a0 <UOTGHS_Handler+0x108>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   85994:	f8d8 b004 	ldr.w	fp, [r8, #4]
   85998:	ea1c 0f0b 	tst.w	ip, fp
   8599c:	f040 8316 	bne.w	85fcc <UOTGHS_Handler+0x734>
		if (!Is_udd_endpoint_dma_supported(ep)
   859a0:	2b05      	cmp	r3, #5
   859a2:	d9c5      	bls.n	85930 <UOTGHS_Handler+0x98>
				&& Is_udd_endpoint_interrupt_enabled(ep)) {
   859a4:	f8d8 b010 	ldr.w	fp, [r8, #16]
   859a8:	fa0a fc01 	lsl.w	ip, sl, r1
   859ac:	ea1b 0f0c 	tst.w	fp, ip
   859b0:	d0c0      	beq.n	85934 <UOTGHS_Handler+0x9c>
			if (Is_udd_out_received(ep)
   859b2:	f8d2 b000 	ldr.w	fp, [r2]
   859b6:	f01b 0f02 	tst.w	fp, #2
   859ba:	d005      	beq.n	859c8 <UOTGHS_Handler+0x130>
				&& Is_udd_out_received_interrupt_enabled(ep)) {
   859bc:	f8d7 b000 	ldr.w	fp, [r7]
   859c0:	f01b 0f02 	tst.w	fp, #2
   859c4:	f040 8156 	bne.w	85c74 <UOTGHS_Handler+0x3dc>
			if (Is_udd_in_send(ep)
   859c8:	f8d2 b000 	ldr.w	fp, [r2]
   859cc:	f01b 0f01 	tst.w	fp, #1
   859d0:	d12e      	bne.n	85a30 <UOTGHS_Handler+0x198>
			if (Is_udd_overflow(ep)
   859d2:	f8d2 b000 	ldr.w	fp, [r2]
   859d6:	f01b 0f20 	tst.w	fp, #32
   859da:	d109      	bne.n	859f0 <UOTGHS_Handler+0x158>
					|| Is_udd_underflow(ep)
   859dc:	f8d2 b000 	ldr.w	fp, [r2]
   859e0:	f01b 0f04 	tst.w	fp, #4
   859e4:	d104      	bne.n	859f0 <UOTGHS_Handler+0x158>
					|| Is_udd_crc_error(ep)) {
   859e6:	f8d2 b000 	ldr.w	fp, [r2]
   859ea:	f01b 0f40 	tst.w	fp, #64	; 0x40
   859ee:	d0a1      	beq.n	85934 <UOTGHS_Handler+0x9c>
				udd_ep_abort(ep);
   859f0:	4b61      	ldr	r3, [pc, #388]	; (85b78 <UOTGHS_Handler+0x2e0>)
}
   859f2:	b003      	add	sp, #12
   859f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				udd_ep_abort(ep);
   859f8:	4718      	bx	r3
		udd_ack_sof();
   859fa:	2304      	movs	r3, #4
   859fc:	6093      	str	r3, [r2, #8]
		if (Is_udd_full_speed_mode()) {
   859fe:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   85a02:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   85a06:	d05f      	beq.n	85ac8 <UOTGHS_Handler+0x230>
		UDC_SOF_EVENT();
   85a08:	4b5c      	ldr	r3, [pc, #368]	; (85b7c <UOTGHS_Handler+0x2e4>)
}
   85a0a:	b003      	add	sp, #12
   85a0c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udc_sof_notify();
   85a10:	4718      	bx	r3
		udd_ack_msof();
   85a12:	2102      	movs	r1, #2
		udc_sof_notify();
   85a14:	4b5a      	ldr	r3, [pc, #360]	; (85b80 <UOTGHS_Handler+0x2e8>)
		udd_ack_msof();
   85a16:	6091      	str	r1, [r2, #8]
}
   85a18:	b003      	add	sp, #12
   85a1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udc_sof_notify();
   85a1e:	4718      	bx	r3
  __ASM volatile ("cpsid i" : : : "memory");
   85a20:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85a22:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   85a26:	4a57      	ldr	r2, [pc, #348]	; (85b84 <UOTGHS_Handler+0x2ec>)
   85a28:	7013      	strb	r3, [r2, #0]
}
   85a2a:	b003      	add	sp, #12
   85a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					&& Is_udd_in_send_interrupt_enabled(ep)) {
   85a30:	f8d7 b000 	ldr.w	fp, [r7]
   85a34:	f01b 0f01 	tst.w	fp, #1
   85a38:	d0cb      	beq.n	859d2 <UOTGHS_Handler+0x13a>
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   85a3a:	2708      	movs	r7, #8
   85a3c:	4a52      	ldr	r2, [pc, #328]	; (85b88 <UOTGHS_Handler+0x2f0>)
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   85a3e:	eb03 0843 	add.w	r8, r3, r3, lsl #1
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   85a42:	f85e 2002 	ldr.w	r2, [lr, r2]
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   85a46:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   85a4a:	f3c2 1202 	ubfx	r2, r2, #4, #3
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
   85a4e:	f8d8 900c 	ldr.w	r9, [r8, #12]
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   85a52:	4097      	lsls	r7, r2
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
   85a54:	f8d8 2008 	ldr.w	r2, [r8, #8]
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   85a58:	005e      	lsls	r6, r3, #1
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
   85a5a:	4591      	cmp	r9, r2
   85a5c:	d305      	bcc.n	85a6a <UOTGHS_Handler+0x1d2>
   85a5e:	f898 2014 	ldrb.w	r2, [r8, #20]
   85a62:	f012 0202 	ands.w	r2, r2, #2
   85a66:	f000 83fe 	beq.w	86266 <UOTGHS_Handler+0x9ce>
		udd_ack_in_send(ep);
   85a6a:	2401      	movs	r4, #1
   85a6c:	4a47      	ldr	r2, [pc, #284]	; (85b8c <UOTGHS_Handler+0x2f4>)
		ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   85a6e:	18f0      	adds	r0, r6, r3
   85a70:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
		udd_ack_in_send(ep);
   85a74:	f84e 4002 	str.w	r4, [lr, r2]
		nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   85a78:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
   85a7c:	1b12      	subs	r2, r2, r4
		nb_data = min(nb_remain, pkt_size);
   85a7e:	42ba      	cmp	r2, r7
   85a80:	bf28      	it	cs
   85a82:	463a      	movcs	r2, r7
   85a84:	4616      	mov	r6, r2
		ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   85a86:	6842      	ldr	r2, [r0, #4]
   85a88:	4422      	add	r2, r4
		ptr_job->buf_cnt += nb_data;
   85a8a:	4434      	add	r4, r6
		ptr_job->buf_load = nb_data;
   85a8c:	e9c0 4603 	strd	r4, r6, [r0, #12]
		for (i = 0; i < nb_data; i++) {
   85a90:	2e00      	cmp	r6, #0
   85a92:	f000 8407 	beq.w	862a4 <UOTGHS_Handler+0xa0c>
   85a96:	483e      	ldr	r0, [pc, #248]	; (85b90 <UOTGHS_Handler+0x2f8>)
	uint8_t *ptr_dst = (uint8_t *) & udd_get_endpoint_fifo_access(ep, 8);
   85a98:	03c9      	lsls	r1, r1, #15
   85a9a:	4408      	add	r0, r1
   85a9c:	1994      	adds	r4, r2, r6
			*ptr_dst++ = *ptr_src++;
   85a9e:	f812 1b01 	ldrb.w	r1, [r2], #1
		for (i = 0; i < nb_data; i++) {
   85aa2:	42a2      	cmp	r2, r4
			*ptr_dst++ = *ptr_src++;
   85aa4:	f800 1f01 	strb.w	r1, [r0, #1]!
		for (i = 0; i < nb_data; i++) {
   85aa8:	d1f9      	bne.n	85a9e <UOTGHS_Handler+0x206>
		udd_ack_fifocon(ep);
   85aaa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   85aae:	4a39      	ldr	r2, [pc, #228]	; (85b94 <UOTGHS_Handler+0x2fc>)
		if (nb_data < pkt_size) {
   85ab0:	42b7      	cmp	r7, r6
		udd_ack_fifocon(ep);
   85ab2:	f84e 1002 	str.w	r1, [lr, r2]
		if (nb_data < pkt_size) {
   85ab6:	d9b8      	bls.n	85a2a <UOTGHS_Handler+0x192>
			ptr_job->b_shortpacket = false;
   85ab8:	2218      	movs	r2, #24
   85aba:	fb02 5303 	mla	r3, r2, r3, r5
   85abe:	7d1a      	ldrb	r2, [r3, #20]
   85ac0:	f36f 0241 	bfc	r2, #1, #1
   85ac4:	751a      	strb	r2, [r3, #20]
   85ac6:	e7b0      	b.n	85a2a <UOTGHS_Handler+0x192>
			udc_sof_notify();
   85ac8:	4b2d      	ldr	r3, [pc, #180]	; (85b80 <UOTGHS_Handler+0x2e8>)
   85aca:	4798      	blx	r3
   85acc:	e79c      	b.n	85a08 <UOTGHS_Handler+0x170>
	if (Is_udd_reset()) {
   85ace:	4926      	ldr	r1, [pc, #152]	; (85b68 <UOTGHS_Handler+0x2d0>)
   85ad0:	684a      	ldr	r2, [r1, #4]
   85ad2:	f012 0208 	ands.w	r2, r2, #8
   85ad6:	f040 81c5 	bne.w	85e64 <UOTGHS_Handler+0x5cc>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   85ada:	690b      	ldr	r3, [r1, #16]
   85adc:	07df      	lsls	r7, r3, #31
   85ade:	d51e      	bpl.n	85b1e <UOTGHS_Handler+0x286>
   85ae0:	684b      	ldr	r3, [r1, #4]
   85ae2:	07de      	lsls	r6, r3, #31
   85ae4:	d51b      	bpl.n	85b1e <UOTGHS_Handler+0x286>
		udd_enable_wake_up_interrupt();
   85ae6:	2010      	movs	r0, #16
		udd_disable_suspend_interrupt();
   85ae8:	2401      	movs	r4, #1
		otg_unfreeze_clock();
   85aea:	f8d1 3800 	ldr.w	r3, [r1, #2048]	; 0x800
   85aee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   85af2:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		udd_disable_suspend_interrupt();
   85af6:	614c      	str	r4, [r1, #20]
		udd_enable_wake_up_interrupt();
   85af8:	6188      	str	r0, [r1, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   85afa:	f8d1 0800 	ldr.w	r0, [r1, #2048]	; 0x800
	if (!b_idle && udd_b_idle) {
   85afe:	4b26      	ldr	r3, [pc, #152]	; (85b98 <UOTGHS_Handler+0x300>)
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   85b00:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
   85b04:	f8c1 0800 	str.w	r0, [r1, #2048]	; 0x800
	if (!b_idle && udd_b_idle) {
   85b08:	7819      	ldrb	r1, [r3, #0]
   85b0a:	2900      	cmp	r1, #0
   85b0c:	f040 8342 	bne.w	86194 <UOTGHS_Handler+0x8fc>
	udd_b_idle = b_idle;
   85b10:	2100      	movs	r1, #0
		UDC_SUSPEND_EVENT();
   85b12:	4a22      	ldr	r2, [pc, #136]	; (85b9c <UOTGHS_Handler+0x304>)
	udd_b_idle = b_idle;
   85b14:	7019      	strb	r1, [r3, #0]
}
   85b16:	b003      	add	sp, #12
   85b18:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		UDC_RESUME_EVENT();
   85b1c:	4710      	bx	r2
	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   85b1e:	4b12      	ldr	r3, [pc, #72]	; (85b68 <UOTGHS_Handler+0x2d0>)
   85b20:	691a      	ldr	r2, [r3, #16]
   85b22:	06d5      	lsls	r5, r2, #27
   85b24:	d53e      	bpl.n	85ba4 <UOTGHS_Handler+0x30c>
   85b26:	685a      	ldr	r2, [r3, #4]
   85b28:	06d4      	lsls	r4, r2, #27
   85b2a:	d53b      	bpl.n	85ba4 <UOTGHS_Handler+0x30c>
		otg_unfreeze_clock();
   85b2c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   85b30:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   85b34:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		while (!Is_otg_clock_usable()) {
   85b38:	e002      	b.n	85b40 <UOTGHS_Handler+0x2a8>
			if (Is_udd_suspend()) {
   85b3a:	685a      	ldr	r2, [r3, #4]
   85b3c:	07d0      	lsls	r0, r2, #31
   85b3e:	d403      	bmi.n	85b48 <UOTGHS_Handler+0x2b0>
		while (!Is_otg_clock_usable()) {
   85b40:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   85b44:	0451      	lsls	r1, r2, #17
   85b46:	d5f8      	bpl.n	85b3a <UOTGHS_Handler+0x2a2>
		udd_disable_wake_up_interrupt();
   85b48:	2010      	movs	r0, #16
		udd_enable_suspend_interrupt();
   85b4a:	2101      	movs	r1, #1
		udd_disable_wake_up_interrupt();
   85b4c:	4a06      	ldr	r2, [pc, #24]	; (85b68 <UOTGHS_Handler+0x2d0>)
	if (b_idle && !udd_b_idle) {
   85b4e:	4b12      	ldr	r3, [pc, #72]	; (85b98 <UOTGHS_Handler+0x300>)
		udd_disable_wake_up_interrupt();
   85b50:	6150      	str	r0, [r2, #20]
		udd_enable_suspend_interrupt();
   85b52:	6191      	str	r1, [r2, #24]
	if (b_idle && !udd_b_idle) {
   85b54:	781a      	ldrb	r2, [r3, #0]
   85b56:	2a00      	cmp	r2, #0
   85b58:	f000 82d7 	beq.w	8610a <UOTGHS_Handler+0x872>
	udd_b_idle = b_idle;
   85b5c:	2101      	movs	r1, #1
		UDC_RESUME_EVENT();
   85b5e:	4a10      	ldr	r2, [pc, #64]	; (85ba0 <UOTGHS_Handler+0x308>)
   85b60:	e7d8      	b.n	85b14 <UOTGHS_Handler+0x27c>
   85b62:	bf00      	nop
   85b64:	00084b05 	.word	0x00084b05
   85b68:	400ac000 	.word	0x400ac000
   85b6c:	200722e4 	.word	0x200722e4
   85b70:	400ac1c4 	.word	0x400ac1c4
   85b74:	400ac134 	.word	0x400ac134
   85b78:	000857dd 	.word	0x000857dd
   85b7c:	00081eb1 	.word	0x00081eb1
   85b80:	000817dd 	.word	0x000817dd
   85b84:	20070ca0 	.word	0x20070ca0
   85b88:	400ac100 	.word	0x400ac100
   85b8c:	400ac160 	.word	0x400ac160
   85b90:	2017ffff 	.word	0x2017ffff
   85b94:	400ac220 	.word	0x400ac220
   85b98:	200722d9 	.word	0x200722d9
   85b9c:	00081ea1 	.word	0x00081ea1
   85ba0:	00081ea9 	.word	0x00081ea9
	if (Is_otg_vbus_transition()) {
   85ba4:	4ba0      	ldr	r3, [pc, #640]	; (85e28 <UOTGHS_Handler+0x590>)
   85ba6:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   85baa:	0792      	lsls	r2, r2, #30
   85bac:	f57f af3d 	bpl.w	85a2a <UOTGHS_Handler+0x192>
		otg_ack_vbus_transition();
   85bb0:	2102      	movs	r1, #2
		otg_unfreeze_clock();
   85bb2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   85bb6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   85bba:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   85bbe:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
		otg_freeze_clock();
   85bc2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   85bc6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   85bca:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		if (Is_otg_vbus_high()) {
   85bce:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   85bd2:	051b      	lsls	r3, r3, #20
   85bd4:	f140 81f5 	bpl.w	85fc2 <UOTGHS_Handler+0x72a>
			udd_attach();
   85bd8:	4b94      	ldr	r3, [pc, #592]	; (85e2c <UOTGHS_Handler+0x594>)
}
   85bda:	b003      	add	sp, #12
   85bdc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			udd_attach();
   85be0:	4718      	bx	r3
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   85be2:	4d93      	ldr	r5, [pc, #588]	; (85e30 <UOTGHS_Handler+0x598>)
   85be4:	782b      	ldrb	r3, [r5, #0]
   85be6:	b1eb      	cbz	r3, 85c24 <UOTGHS_Handler+0x38c>
	if (udd_g_ctrlreq.callback) {
   85be8:	4c92      	ldr	r4, [pc, #584]	; (85e34 <UOTGHS_Handler+0x59c>)
   85bea:	6923      	ldr	r3, [r4, #16]
   85bec:	b103      	cbz	r3, 85bf0 <UOTGHS_Handler+0x358>
		udd_g_ctrlreq.callback();
   85bee:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85bf0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85bf4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85bf6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85bfa:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   85bfc:	2201      	movs	r2, #1
   85bfe:	4b8e      	ldr	r3, [pc, #568]	; (85e38 <UOTGHS_Handler+0x5a0>)
   85c00:	7018      	strb	r0, [r3, #0]
   85c02:	4889      	ldr	r0, [pc, #548]	; (85e28 <UOTGHS_Handler+0x590>)
   85c04:	f8c0 2220 	str.w	r2, [r0, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   85c08:	b919      	cbnz	r1, 85c12 <UOTGHS_Handler+0x37a>
		cpu_irq_enable();
   85c0a:	701a      	strb	r2, [r3, #0]
   85c0c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85c10:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   85c12:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   85c14:	2102      	movs	r1, #2
   85c16:	4a84      	ldr	r2, [pc, #528]	; (85e28 <UOTGHS_Handler+0x590>)
   85c18:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
	udd_g_ctrlreq.over_under_run = NULL;
   85c1c:	e9c4 3304 	strd	r3, r3, [r4, #16]
	udd_g_ctrlreq.payload_size = 0;
   85c20:	81a3      	strh	r3, [r4, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   85c22:	702b      	strb	r3, [r5, #0]
	if (8 != udd_byte_count(0)) {
   85c24:	4a80      	ldr	r2, [pc, #512]	; (85e28 <UOTGHS_Handler+0x590>)
   85c26:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   85c2a:	f3c3 530a 	ubfx	r3, r3, #20, #11
   85c2e:	2b08      	cmp	r3, #8
   85c30:	f000 80c1 	beq.w	85db6 <UOTGHS_Handler+0x51e>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   85c34:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   85c36:	f44f 2100 	mov.w	r1, #524288	; 0x80000
		udd_ack_setup_received(0);
   85c3a:	2304      	movs	r3, #4
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   85c3c:	7028      	strb	r0, [r5, #0]
	udd_enable_stall_handshake(0);
   85c3e:	f8c2 11f0 	str.w	r1, [r2, #496]	; 0x1f0
		udd_ack_setup_received(0);
   85c42:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
		return; // Error data number doesn't correspond to SETUP packet
   85c46:	e6f0      	b.n	85a2a <UOTGHS_Handler+0x192>
		udd_ack_nak_in(0);
   85c48:	2310      	movs	r3, #16
   85c4a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	if (Is_udd_out_received(0))
   85c4e:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   85c52:	f013 0302 	ands.w	r3, r3, #2
   85c56:	f47f aee8 	bne.w	85a2a <UOTGHS_Handler+0x192>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   85c5a:	4875      	ldr	r0, [pc, #468]	; (85e30 <UOTGHS_Handler+0x598>)
   85c5c:	7801      	ldrb	r1, [r0, #0]
   85c5e:	2901      	cmp	r1, #1
   85c60:	f000 82ab 	beq.w	861ba <UOTGHS_Handler+0x922>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   85c64:	2904      	cmp	r1, #4
   85c66:	f47f aee0 	bne.w	85a2a <UOTGHS_Handler+0x192>
		udd_enable_stall_handshake(0);
   85c6a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   85c6e:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
   85c72:	e6da      	b.n	85a2a <UOTGHS_Handler+0x192>
	udd_ack_out_received(ep);
   85c74:	f04f 0b02 	mov.w	fp, #2
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   85c78:	f04f 0808 	mov.w	r8, #8
   85c7c:	4e6f      	ldr	r6, [pc, #444]	; (85e3c <UOTGHS_Handler+0x5a4>)
	udd_ack_out_received(ep);
   85c7e:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 85e40 <UOTGHS_Handler+0x5a8>
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   85c82:	f85e 6006 	ldr.w	r6, [lr, r6]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   85c86:	eb03 0743 	add.w	r7, r3, r3, lsl #1
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   85c8a:	f3c6 1602 	ubfx	r6, r6, #4, #3
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   85c8e:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   85c92:	fa08 f806 	lsl.w	r8, r8, r6
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   85c96:	e9d7 6902 	ldrd	r6, r9, [r7, #8]
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
   85c9a:	687f      	ldr	r7, [r7, #4]
	udd_ack_out_received(ep);
   85c9c:	f84e b00a 	str.w	fp, [lr, sl]
	nb_data = udd_byte_count(ep);
   85ca0:	6812      	ldr	r2, [r2, #0]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   85ca2:	eba6 0b09 	sub.w	fp, r6, r9
	nb_data = udd_byte_count(ep);
   85ca6:	f3c2 5a0a 	ubfx	sl, r2, #20, #11
	if (nb_data < pkt_size) {
   85caa:	45d0      	cmp	r8, sl
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   85cac:	ea4f 0643 	mov.w	r6, r3, lsl #1
	if (nb_data < pkt_size) {
   85cb0:	f200 82bb 	bhi.w	8622a <UOTGHS_Handler+0x992>
		if (nb_data >= nb_remain) {
   85cb4:	45d3      	cmp	fp, sl
   85cb6:	f200 82fb 	bhi.w	862b0 <UOTGHS_Handler+0xa18>
	bool b_full = false, b_short = false;
   85cba:	f04f 0800 	mov.w	r8, #0
		ptr_job->buf_cnt += nb_data;
   85cbe:	f04f 0a18 	mov.w	sl, #24
   85cc2:	fb0a 5a03 	mla	sl, sl, r3, r5
   85cc6:	f8da 200c 	ldr.w	r2, [sl, #12]
		ptr_job->buf_load = nb_data;
   85cca:	f8ca b010 	str.w	fp, [sl, #16]
		ptr_job->buf_cnt += nb_data;
   85cce:	445a      	add	r2, fp
   85cd0:	f8ca 200c 	str.w	r2, [sl, #12]
		for (i = 0; i < nb_data; i++) {
   85cd4:	f1bb 0f00 	cmp.w	fp, #0
   85cd8:	f000 82be 	beq.w	86258 <UOTGHS_Handler+0x9c0>
   85cdc:	2201      	movs	r2, #1
   85cde:	46da      	mov	sl, fp
   85ce0:	9201      	str	r2, [sp, #4]
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(ep, 8);
   85ce2:	03c9      	lsls	r1, r1, #15
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
   85ce4:	444f      	add	r7, r9
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(ep, 8);
   85ce6:	f101 5900 	add.w	r9, r1, #536870912	; 0x20000000
   85cea:	f509 19c0 	add.w	r9, r9, #1572864	; 0x180000
   85cee:	1e79      	subs	r1, r7, #1
			*ptr_dst++ = *ptr_src++;
   85cf0:	460a      	mov	r2, r1
		for (i = 0; i < nb_data; i++) {
   85cf2:	3202      	adds	r2, #2
			*ptr_dst++ = *ptr_src++;
   85cf4:	f819 bb01 	ldrb.w	fp, [r9], #1
		for (i = 0; i < nb_data; i++) {
   85cf8:	1bd2      	subs	r2, r2, r7
   85cfa:	4552      	cmp	r2, sl
			*ptr_dst++ = *ptr_src++;
   85cfc:	f801 bf01 	strb.w	fp, [r1, #1]!
		for (i = 0; i < nb_data; i++) {
   85d00:	d3f6      	bcc.n	85cf0 <UOTGHS_Handler+0x458>
	udd_ack_fifocon(ep);
   85d02:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   85d06:	4a4f      	ldr	r2, [pc, #316]	; (85e44 <UOTGHS_Handler+0x5ac>)
   85d08:	f84e 1002 	str.w	r1, [lr, r2]
   85d0c:	4496      	add	lr, r2
	if (b_full || b_short) {
   85d0e:	9a01      	ldr	r2, [sp, #4]
   85d10:	b91a      	cbnz	r2, 85d1a <UOTGHS_Handler+0x482>
   85d12:	f1b8 0f00 	cmp.w	r8, #0
   85d16:	f43f ae88 	beq.w	85a2a <UOTGHS_Handler+0x192>
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   85d1a:	4433      	add	r3, r6
   85d1c:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		udd_disable_out_received_interrupt(ep);
   85d20:	2302      	movs	r3, #2
		udd_ep_finish_job(ptr_job, false, ep);
   85d22:	4602      	mov	r2, r0
   85d24:	2100      	movs	r1, #0
   85d26:	4620      	mov	r0, r4
		udd_disable_out_received_interrupt(ep);
   85d28:	f8ce 3000 	str.w	r3, [lr]
		udd_disable_endpoint_interrupt(ep);
   85d2c:	4b3e      	ldr	r3, [pc, #248]	; (85e28 <UOTGHS_Handler+0x590>)
   85d2e:	f8c3 c014 	str.w	ip, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   85d32:	68eb      	ldr	r3, [r5, #12]
   85d34:	60ab      	str	r3, [r5, #8]
		udd_ep_finish_job(ptr_job, false, ep);
   85d36:	4b44      	ldr	r3, [pc, #272]	; (85e48 <UOTGHS_Handler+0x5b0>)
}
   85d38:	b003      	add	sp, #12
   85d3a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udd_ep_finish_job(ptr_job, false, ep);
   85d3e:	4718      	bx	r3
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   85d40:	4d3b      	ldr	r5, [pc, #236]	; (85e30 <UOTGHS_Handler+0x598>)
   85d42:	782b      	ldrb	r3, [r5, #0]
   85d44:	2b01      	cmp	r3, #1
   85d46:	f000 8105 	beq.w	85f54 <UOTGHS_Handler+0x6bc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   85d4a:	2b02      	cmp	r3, #2
   85d4c:	f000 8154 	beq.w	85ff8 <UOTGHS_Handler+0x760>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   85d50:	2b04      	cmp	r3, #4
   85d52:	f000 8151 	beq.w	85ff8 <UOTGHS_Handler+0x760>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   85d56:	2105      	movs	r1, #5
	udd_enable_stall_handshake(0);
   85d58:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   85d5c:	4c35      	ldr	r4, [pc, #212]	; (85e34 <UOTGHS_Handler+0x59c>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   85d5e:	7029      	strb	r1, [r5, #0]
	udd_enable_stall_handshake(0);
   85d60:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85d64:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85d68:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85d6a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85d6e:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   85d70:	2201      	movs	r2, #1
   85d72:	4b31      	ldr	r3, [pc, #196]	; (85e38 <UOTGHS_Handler+0x5a0>)
   85d74:	7018      	strb	r0, [r3, #0]
   85d76:	482c      	ldr	r0, [pc, #176]	; (85e28 <UOTGHS_Handler+0x590>)
   85d78:	f8c0 2220 	str.w	r2, [r0, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   85d7c:	b919      	cbnz	r1, 85d86 <UOTGHS_Handler+0x4ee>
		cpu_irq_enable();
   85d7e:	701a      	strb	r2, [r3, #0]
   85d80:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85d84:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   85d86:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   85d88:	2102      	movs	r1, #2
   85d8a:	4a27      	ldr	r2, [pc, #156]	; (85e28 <UOTGHS_Handler+0x590>)
   85d8c:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
	udd_g_ctrlreq.over_under_run = NULL;
   85d90:	e9c4 3304 	strd	r3, r3, [r4, #16]
	udd_g_ctrlreq.payload_size = 0;
   85d94:	81a3      	strh	r3, [r4, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   85d96:	702b      	strb	r3, [r5, #0]
   85d98:	e647      	b.n	85a2a <UOTGHS_Handler+0x192>
		udd_ack_nak_out(0);
   85d9a:	2308      	movs	r3, #8
   85d9c:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	if (Is_udd_in_send(0))
   85da0:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   85da4:	07de      	lsls	r6, r3, #31
   85da6:	f53f ae40 	bmi.w	85a2a <UOTGHS_Handler+0x192>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   85daa:	4b21      	ldr	r3, [pc, #132]	; (85e30 <UOTGHS_Handler+0x598>)
   85dac:	781b      	ldrb	r3, [r3, #0]
   85dae:	2b03      	cmp	r3, #3
   85db0:	f47f ae3b 	bne.w	85a2a <UOTGHS_Handler+0x192>
   85db4:	e759      	b.n	85c6a <UOTGHS_Handler+0x3d2>
   85db6:	4a25      	ldr	r2, [pc, #148]	; (85e4c <UOTGHS_Handler+0x5b4>)
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
   85db8:	4b25      	ldr	r3, [pc, #148]	; (85e50 <UOTGHS_Handler+0x5b8>)
	for (i = 0; i < 8; i++) {
   85dba:	4826      	ldr	r0, [pc, #152]	; (85e54 <UOTGHS_Handler+0x5bc>)
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   85dbc:	4619      	mov	r1, r3
   85dbe:	3301      	adds	r3, #1
   85dc0:	7809      	ldrb	r1, [r1, #0]
	for (i = 0; i < 8; i++) {
   85dc2:	4283      	cmp	r3, r0
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   85dc4:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   85dc8:	d1f8      	bne.n	85dbc <UOTGHS_Handler+0x524>
	if (udc_process_setup() == false) {
   85dca:	4b23      	ldr	r3, [pc, #140]	; (85e58 <UOTGHS_Handler+0x5c0>)
   85dcc:	4798      	blx	r3
   85dce:	2800      	cmp	r0, #0
   85dd0:	f000 8119 	beq.w	86006 <UOTGHS_Handler+0x76e>
	udd_ack_setup_received(0);
   85dd4:	2104      	movs	r1, #4
   85dd6:	4b14      	ldr	r3, [pc, #80]	; (85e28 <UOTGHS_Handler+0x590>)
	if (Udd_setup_is_in()) {
   85dd8:	4a16      	ldr	r2, [pc, #88]	; (85e34 <UOTGHS_Handler+0x59c>)
	udd_ack_setup_received(0);
   85dda:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	if (Udd_setup_is_in()) {
   85dde:	f992 1000 	ldrsb.w	r1, [r2]
   85de2:	2900      	cmp	r1, #0
   85de4:	f2c0 81a4 	blt.w	86130 <UOTGHS_Handler+0x898>
		if (0 == udd_g_ctrlreq.req.wLength) {
   85de8:	88d2      	ldrh	r2, [r2, #6]
   85dea:	2a00      	cmp	r2, #0
   85dec:	f000 81ff 	beq.w	861ee <UOTGHS_Handler+0x956>
		udd_ctrl_prev_payload_buf_cnt = 0;
   85df0:	2200      	movs	r2, #0
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   85df2:	2401      	movs	r4, #1
		udd_ack_nak_in(0);
   85df4:	2110      	movs	r1, #16
		udd_ctrl_prev_payload_buf_cnt = 0;
   85df6:	4819      	ldr	r0, [pc, #100]	; (85e5c <UOTGHS_Handler+0x5c4>)
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   85df8:	702c      	strb	r4, [r5, #0]
		udd_ctrl_prev_payload_buf_cnt = 0;
   85dfa:	8002      	strh	r2, [r0, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85dfc:	4818      	ldr	r0, [pc, #96]	; (85e60 <UOTGHS_Handler+0x5c8>)
   85dfe:	8002      	strh	r2, [r0, #0]
		udd_ack_nak_in(0);
   85e00:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85e04:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85e08:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85e0a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85e0e:	480a      	ldr	r0, [pc, #40]	; (85e38 <UOTGHS_Handler+0x5a0>)
   85e10:	7002      	strb	r2, [r0, #0]
		udd_enable_nak_in_interrupt(0);
   85e12:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   85e16:	2d00      	cmp	r5, #0
   85e18:	f47f ae07 	bne.w	85a2a <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   85e1c:	7004      	strb	r4, [r0, #0]
   85e1e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85e22:	b662      	cpsie	i
   85e24:	e601      	b.n	85a2a <UOTGHS_Handler+0x192>
   85e26:	bf00      	nop
   85e28:	400ac000 	.word	0x400ac000
   85e2c:	00085069 	.word	0x00085069
   85e30:	200722e0 	.word	0x200722e0
   85e34:	200723a4 	.word	0x200723a4
   85e38:	20070ca0 	.word	0x20070ca0
   85e3c:	400ac100 	.word	0x400ac100
   85e40:	400ac160 	.word	0x400ac160
   85e44:	400ac220 	.word	0x400ac220
   85e48:	00084b81 	.word	0x00084b81
   85e4c:	200723a3 	.word	0x200723a3
   85e50:	20180000 	.word	0x20180000
   85e54:	20180008 	.word	0x20180008
   85e58:	00081819 	.word	0x00081819
   85e5c:	200722de 	.word	0x200722de
   85e60:	200722dc 	.word	0x200722dc
		udd_ack_reset();
   85e64:	2401      	movs	r4, #1
   85e66:	4fb8      	ldr	r7, [pc, #736]	; (86148 <UOTGHS_Handler+0x8b0>)
   85e68:	608b      	str	r3, [r1, #8]
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   85e6a:	1e63      	subs	r3, r4, #1
	if (ptr_job->busy == false) {
   85e6c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   85e70:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   85e74:	7d19      	ldrb	r1, [r3, #20]
   85e76:	b2e2      	uxtb	r2, r4
   85e78:	07c8      	lsls	r0, r1, #31
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85e7a:	f104 0401 	add.w	r4, r4, #1
	if (ptr_job->busy == false) {
   85e7e:	d50c      	bpl.n	85e9a <UOTGHS_Handler+0x602>
	ptr_job->busy = false;
   85e80:	f36f 0100 	bfc	r1, #0, #1
   85e84:	7519      	strb	r1, [r3, #20]
	if (NULL == ptr_job->call_trans) {
   85e86:	6833      	ldr	r3, [r6, #0]
   85e88:	b13b      	cbz	r3, 85e9a <UOTGHS_Handler+0x602>
	if (Is_udd_endpoint_in(ep_num)) {
   85e8a:	6839      	ldr	r1, [r7, #0]
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   85e8c:	2001      	movs	r0, #1
	if (Is_udd_endpoint_in(ep_num)) {
   85e8e:	05c9      	lsls	r1, r1, #23
		ep_num |= USB_EP_DIR_IN;
   85e90:	bf48      	it	mi
   85e92:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   85e96:	68b1      	ldr	r1, [r6, #8]
   85e98:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   85e9a:	2c09      	cmp	r4, #9
   85e9c:	f106 0618 	add.w	r6, r6, #24
   85ea0:	f107 0704 	add.w	r7, r7, #4
   85ea4:	d1e1      	bne.n	85e6a <UOTGHS_Handler+0x5d2>
		udc_reset();
   85ea6:	4ba9      	ldr	r3, [pc, #676]	; (8614c <UOTGHS_Handler+0x8b4>)
   85ea8:	4798      	blx	r3
	udd_configure_address(0);
   85eaa:	4ba9      	ldr	r3, [pc, #676]	; (86150 <UOTGHS_Handler+0x8b8>)
   85eac:	681a      	ldr	r2, [r3, #0]
   85eae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   85eb2:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   85eb4:	681a      	ldr	r2, [r3, #0]
   85eb6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   85eba:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   85ebc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   85ec0:	f422 52cb 	bic.w	r2, r2, #6496	; 0x1960
   85ec4:	f022 021c 	bic.w	r2, r2, #28
   85ec8:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   85ecc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_allocate_memory(0);
   85ed0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   85ed4:	f042 0202 	orr.w	r2, r2, #2
   85ed8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   85edc:	69da      	ldr	r2, [r3, #28]
   85ede:	f042 0201 	orr.w	r2, r2, #1
   85ee2:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85ee4:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85ee8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85eea:	f3bf 8f5f 	dmb	sy
	udd_enable_setup_received_interrupt(0);
   85eee:	2004      	movs	r0, #4
	cpu_irq_disable();
   85ef0:	2500      	movs	r5, #0
   85ef2:	4a98      	ldr	r2, [pc, #608]	; (86154 <UOTGHS_Handler+0x8bc>)
	udd_enable_out_received_interrupt(0);
   85ef4:	2402      	movs	r4, #2
   85ef6:	7015      	strb	r5, [r2, #0]
	udd_enable_setup_received_interrupt(0);
   85ef8:	f8c3 01f0 	str.w	r0, [r3, #496]	; 0x1f0
	udd_enable_endpoint_interrupt(0);
   85efc:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	udd_enable_out_received_interrupt(0);
   85f00:	f8c3 41f0 	str.w	r4, [r3, #496]	; 0x1f0
	udd_enable_endpoint_interrupt(0);
   85f04:	6198      	str	r0, [r3, #24]
	if (cpu_irq_is_enabled_flags(flags))
   85f06:	b921      	cbnz	r1, 85f12 <UOTGHS_Handler+0x67a>
		cpu_irq_enable();
   85f08:	2301      	movs	r3, #1
   85f0a:	7013      	strb	r3, [r2, #0]
   85f0c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85f10:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85f12:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85f16:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85f18:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85f1c:	2400      	movs	r4, #0
	udd_disable_in_send_interrupt(0);
   85f1e:	2301      	movs	r3, #1
   85f20:	488b      	ldr	r0, [pc, #556]	; (86150 <UOTGHS_Handler+0x8b8>)
   85f22:	7014      	strb	r4, [r2, #0]
   85f24:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   85f28:	b919      	cbnz	r1, 85f32 <UOTGHS_Handler+0x69a>
		cpu_irq_enable();
   85f2a:	7013      	strb	r3, [r2, #0]
   85f2c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85f30:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   85f32:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   85f34:	2402      	movs	r4, #2
	udd_g_ctrlreq.callback = NULL;
   85f36:	4a88      	ldr	r2, [pc, #544]	; (86158 <UOTGHS_Handler+0x8c0>)
	udd_ack_out_received(0);
   85f38:	4885      	ldr	r0, [pc, #532]	; (86150 <UOTGHS_Handler+0x8b8>)
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   85f3a:	4988      	ldr	r1, [pc, #544]	; (8615c <UOTGHS_Handler+0x8c4>)
	udd_g_ctrlreq.callback = NULL;
   85f3c:	6113      	str	r3, [r2, #16]
	udd_ack_out_received(0);
   85f3e:	f8c0 4160 	str.w	r4, [r0, #352]	; 0x160
	udd_g_ctrlreq.over_under_run = NULL;
   85f42:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   85f44:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   85f46:	700b      	strb	r3, [r1, #0]
		goto udd_interrupt_end;
   85f48:	e56f      	b.n	85a2a <UOTGHS_Handler+0x192>
		udd_ctrl_in_sent();
   85f4a:	4b85      	ldr	r3, [pc, #532]	; (86160 <UOTGHS_Handler+0x8c8>)
}
   85f4c:	b003      	add	sp, #12
   85f4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udd_ctrl_in_sent();
   85f52:	4718      	bx	r3
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   85f54:	4f83      	ldr	r7, [pc, #524]	; (86164 <UOTGHS_Handler+0x8cc>)
	nb_data = udd_byte_count(0);
   85f56:	f8d2 6130 	ldr.w	r6, [r2, #304]	; 0x130
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   85f5a:	4c7f      	ldr	r4, [pc, #508]	; (86158 <UOTGHS_Handler+0x8c0>)
   85f5c:	883b      	ldrh	r3, [r7, #0]
   85f5e:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
	nb_data = udd_byte_count(0);
   85f62:	f3c6 560a 	ubfx	r6, r6, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   85f66:	199a      	adds	r2, r3, r6
   85f68:	4594      	cmp	ip, r2
	udd_ctrl_payload_buf_cnt += nb_data;
   85f6a:	bfac      	ite	ge
   85f6c:	fa1f fc82 	uxthge.w	ip, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   85f70:	ebac 0603 	sublt.w	r6, ip, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85f74:	68a2      	ldr	r2, [r4, #8]
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   85f76:	bfb8      	it	lt
   85f78:	b2b6      	uxthlt	r6, r6
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85f7a:	441a      	add	r2, r3
	for (i = 0; i < nb_data; i++) {
   85f7c:	2e00      	cmp	r6, #0
   85f7e:	f000 8151 	beq.w	86224 <UOTGHS_Handler+0x98c>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   85f82:	4b79      	ldr	r3, [pc, #484]	; (86168 <UOTGHS_Handler+0x8d0>)
		*ptr_dest++ = *ptr_src++;
   85f84:	4618      	mov	r0, r3
   85f86:	3301      	adds	r3, #1
   85f88:	7800      	ldrb	r0, [r0, #0]
	for (i = 0; i < nb_data; i++) {
   85f8a:	b2d9      	uxtb	r1, r3
   85f8c:	42b1      	cmp	r1, r6
		*ptr_dest++ = *ptr_src++;
   85f8e:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < nb_data; i++) {
   85f92:	d3f7      	bcc.n	85f84 <UOTGHS_Handler+0x6ec>
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   85f94:	2e40      	cmp	r6, #64	; 0x40
	udd_ctrl_payload_buf_cnt += nb_data;
   85f96:	f8a7 c000 	strh.w	ip, [r7]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   85f9a:	d05f      	beq.n	8605c <UOTGHS_Handler+0x7c4>
		if (NULL != udd_g_ctrlreq.over_under_run) {
   85f9c:	6963      	ldr	r3, [r4, #20]
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   85f9e:	f8a4 c00c 	strh.w	ip, [r4, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   85fa2:	2b00      	cmp	r3, #0
   85fa4:	d03a      	beq.n	8601c <UOTGHS_Handler+0x784>
			if (!udd_g_ctrlreq.over_under_run()) {
   85fa6:	4798      	blx	r3
   85fa8:	2800      	cmp	r0, #0
   85faa:	d137      	bne.n	8601c <UOTGHS_Handler+0x784>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   85fac:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   85fae:	f44f 2100 	mov.w	r1, #524288	; 0x80000
			udd_ack_out_received(0);
   85fb2:	2202      	movs	r2, #2
	udd_enable_stall_handshake(0);
   85fb4:	4b66      	ldr	r3, [pc, #408]	; (86150 <UOTGHS_Handler+0x8b8>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   85fb6:	7028      	strb	r0, [r5, #0]
	udd_enable_stall_handshake(0);
   85fb8:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
			udd_ack_out_received(0);
   85fbc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
			return;
   85fc0:	e533      	b.n	85a2a <UOTGHS_Handler+0x192>
			udd_detach();
   85fc2:	4b6a      	ldr	r3, [pc, #424]	; (8616c <UOTGHS_Handler+0x8d4>)
}
   85fc4:	b003      	add	sp, #12
   85fc6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			udd_detach();
   85fca:	4718      	bx	r3
			if (udd_endpoint_dma_get_status(ep)
   85fcc:	4a68      	ldr	r2, [pc, #416]	; (86170 <UOTGHS_Handler+0x8d8>)
   85fce:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   85fd2:	68ca      	ldr	r2, [r1, #12]
   85fd4:	07d4      	lsls	r4, r2, #31
   85fd6:	f53f ad28 	bmi.w	85a2a <UOTGHS_Handler+0x192>
			udd_disable_endpoint_dma_interrupt(ep);
   85fda:	f8c8 c014 	str.w	ip, [r8, #20]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   85fde:	68ca      	ldr	r2, [r1, #12]
			if (nb_remaining) {
   85fe0:	0c12      	lsrs	r2, r2, #16
   85fe2:	d007      	beq.n	85ff4 <UOTGHS_Handler+0x75c>
				ptr_job->buf_cnt -= nb_remaining;
   85fe4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   85fe8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   85fec:	68eb      	ldr	r3, [r5, #12]
   85fee:	1a9a      	subs	r2, r3, r2
				ptr_job->buf_size = ptr_job->buf_cnt;
   85ff0:	e9c5 2202 	strd	r2, r2, [r5, #8]
			udd_ep_trans_done(ep);
   85ff4:	4b5f      	ldr	r3, [pc, #380]	; (86174 <UOTGHS_Handler+0x8dc>)
   85ff6:	e4fc      	b.n	859f2 <UOTGHS_Handler+0x15a>
	if (udd_g_ctrlreq.callback) {
   85ff8:	4c57      	ldr	r4, [pc, #348]	; (86158 <UOTGHS_Handler+0x8c0>)
   85ffa:	6923      	ldr	r3, [r4, #16]
   85ffc:	2b00      	cmp	r3, #0
   85ffe:	f43f aeb1 	beq.w	85d64 <UOTGHS_Handler+0x4cc>
		udd_g_ctrlreq.callback();
   86002:	4798      	blx	r3
   86004:	e6ae      	b.n	85d64 <UOTGHS_Handler+0x4cc>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   86006:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   86008:	f44f 2100 	mov.w	r1, #524288	; 0x80000
		udd_ack_setup_received(0);
   8600c:	2204      	movs	r2, #4
	udd_enable_stall_handshake(0);
   8600e:	4b50      	ldr	r3, [pc, #320]	; (86150 <UOTGHS_Handler+0x8b8>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   86010:	7028      	strb	r0, [r5, #0]
	udd_enable_stall_handshake(0);
   86012:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
		udd_ack_setup_received(0);
   86016:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
		return;
   8601a:	e506      	b.n	85a2a <UOTGHS_Handler+0x192>
		udd_ack_out_received(0);
   8601c:	2102      	movs	r1, #2
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   8601e:	2203      	movs	r2, #3
		udd_ack_out_received(0);
   86020:	4b4b      	ldr	r3, [pc, #300]	; (86150 <UOTGHS_Handler+0x8b8>)
   86022:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   86026:	702a      	strb	r2, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   86028:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   8602c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8602e:	f3bf 8f5f 	dmb	sy
	udd_ack_in_send(0);
   86032:	2201      	movs	r2, #1
	udd_ack_nak_out(0);
   86034:	2108      	movs	r1, #8
	cpu_irq_disable();
   86036:	2500      	movs	r5, #0
   86038:	4846      	ldr	r0, [pc, #280]	; (86154 <UOTGHS_Handler+0x8bc>)
   8603a:	7005      	strb	r5, [r0, #0]
	udd_ack_in_send(0);
   8603c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	udd_enable_in_send_interrupt(0);
   86040:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	udd_ack_nak_out(0);
   86044:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	udd_enable_nak_out_interrupt(0);
   86048:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   8604c:	2c00      	cmp	r4, #0
   8604e:	f47f acec 	bne.w	85a2a <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   86052:	7002      	strb	r2, [r0, #0]
   86054:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   86058:	b662      	cpsie	i
   8605a:	e4e6      	b.n	85a2a <UOTGHS_Handler+0x192>
					(udd_ctrl_prev_payload_buf_cnt +
   8605c:	4e46      	ldr	r6, [pc, #280]	; (86178 <UOTGHS_Handler+0x8e0>)
			|| (udd_g_ctrlreq.req.wLength <=
   8605e:	88e2      	ldrh	r2, [r4, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   86060:	8833      	ldrh	r3, [r6, #0]
   86062:	4463      	add	r3, ip
			|| (udd_g_ctrlreq.req.wLength <=
   86064:	429a      	cmp	r2, r3
   86066:	dd99      	ble.n	85f9c <UOTGHS_Handler+0x704>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   86068:	89a3      	ldrh	r3, [r4, #12]
   8606a:	4563      	cmp	r3, ip
   8606c:	f000 80e5 	beq.w	8623a <UOTGHS_Handler+0x9a2>
	udd_ack_out_received(0);
   86070:	2102      	movs	r1, #2
	udd_ack_nak_in(0);
   86072:	2210      	movs	r2, #16
	udd_ack_out_received(0);
   86074:	4b36      	ldr	r3, [pc, #216]	; (86150 <UOTGHS_Handler+0x8b8>)
   86076:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	udd_ack_nak_in(0);
   8607a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8607e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   86082:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   86084:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   86088:	2400      	movs	r4, #0
   8608a:	4932      	ldr	r1, [pc, #200]	; (86154 <UOTGHS_Handler+0x8bc>)
   8608c:	700c      	strb	r4, [r1, #0]
	udd_enable_nak_in_interrupt(0);
   8608e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   86092:	2800      	cmp	r0, #0
   86094:	f47f acc9 	bne.w	85a2a <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   86098:	2301      	movs	r3, #1
   8609a:	700b      	strb	r3, [r1, #0]
   8609c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   860a0:	b662      	cpsie	i
   860a2:	e4c2      	b.n	85a2a <UOTGHS_Handler+0x192>
				udd_disable_in_send_interrupt(ep);
   860a4:	2501      	movs	r5, #1
				udd_ack_fifocon(ep);
   860a6:	f44f 4680 	mov.w	r6, #16384	; 0x4000
				udd_disable_in_send_interrupt(ep);
   860aa:	4b34      	ldr	r3, [pc, #208]	; (8617c <UOTGHS_Handler+0x8e4>)
				udd_ep_finish_job(ptr_job, false, ep);
   860ac:	4602      	mov	r2, r0
				udd_ack_in_send(ep);
   860ae:	4f34      	ldr	r7, [pc, #208]	; (86180 <UOTGHS_Handler+0x8e8>)
				udd_ep_finish_job(ptr_job, false, ep);
   860b0:	4620      	mov	r0, r4
   860b2:	4c34      	ldr	r4, [pc, #208]	; (86184 <UOTGHS_Handler+0x8ec>)
				udd_disable_in_send_interrupt(ep);
   860b4:	f84e 5003 	str.w	r5, [lr, r3]
				udd_ep_finish_job(ptr_job, false, ep);
   860b8:	2100      	movs	r1, #0
				udd_ack_in_send(ep);
   860ba:	f84e 5007 	str.w	r5, [lr, r7]
				udd_ack_fifocon(ep);
   860be:	f84e 6003 	str.w	r6, [lr, r3]
		udd_ep_finish_job(ptr_job, false, ep);
   860c2:	4623      	mov	r3, r4
   860c4:	e638      	b.n	85d38 <UOTGHS_Handler+0x4a0>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   860c6:	f44f 5280 	mov.w	r2, #4096	; 0x1000

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
				udd_disable_endpoint_bank_autoswitch(ep);
				udd_enable_stall_handshake(ep);
   860ca:	f44f 2000 	mov.w	r0, #524288	; 0x80000
				udd_reset_data_toggle(ep);
   860ce:	f44f 2180 	mov.w	r1, #262144	; 0x40000
				ptr_job->stall_requested = false;
   860d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   860d6:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
				udd_disable_bank_interrupt(ep);
   860da:	4b28      	ldr	r3, [pc, #160]	; (8617c <UOTGHS_Handler+0x8e4>)
   860dc:	f84e 2003 	str.w	r2, [lr, r3]
				udd_disable_endpoint_interrupt(ep);
   860e0:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
   860e4:	f8c3 c014 	str.w	ip, [r3, #20]
				ptr_job->stall_requested = false;
   860e8:	7d2b      	ldrb	r3, [r5, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   860ea:	4a27      	ldr	r2, [pc, #156]	; (86188 <UOTGHS_Handler+0x8f0>)
				ptr_job->stall_requested = false;
   860ec:	f36b 0382 	bfi	r3, fp, #2, #1
   860f0:	752b      	strb	r3, [r5, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   860f2:	f85e 3002 	ldr.w	r3, [lr, r2]
   860f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   860fa:	f84e 3002 	str.w	r3, [lr, r2]
				udd_enable_stall_handshake(ep);
   860fe:	4b23      	ldr	r3, [pc, #140]	; (8618c <UOTGHS_Handler+0x8f4>)
   86100:	f84e 0003 	str.w	r0, [lr, r3]
				udd_reset_data_toggle(ep);
   86104:	f84e 1003 	str.w	r1, [lr, r3]
				return true;
   86108:	e48f      	b.n	85a2a <UOTGHS_Handler+0x192>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8610a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   8610e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   86110:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   86114:	4c0f      	ldr	r4, [pc, #60]	; (86154 <UOTGHS_Handler+0x8bc>)
	++sleepmgr_locks[mode];
   86116:	481e      	ldr	r0, [pc, #120]	; (86190 <UOTGHS_Handler+0x8f8>)
   86118:	7022      	strb	r2, [r4, #0]
   8611a:	7882      	ldrb	r2, [r0, #2]
   8611c:	440a      	add	r2, r1
   8611e:	7082      	strb	r2, [r0, #2]
	if (cpu_irq_is_enabled_flags(flags))
   86120:	2d00      	cmp	r5, #0
   86122:	f47f ad1b 	bne.w	85b5c <UOTGHS_Handler+0x2c4>
		cpu_irq_enable();
   86126:	7021      	strb	r1, [r4, #0]
   86128:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8612c:	b662      	cpsie	i
}
   8612e:	e515      	b.n	85b5c <UOTGHS_Handler+0x2c4>
		udd_ctrl_prev_payload_buf_cnt = 0;
   86130:	2300      	movs	r3, #0
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   86132:	2102      	movs	r1, #2
		udd_ctrl_prev_payload_buf_cnt = 0;
   86134:	4c10      	ldr	r4, [pc, #64]	; (86178 <UOTGHS_Handler+0x8e0>)
		udd_ctrl_payload_buf_cnt = 0;
   86136:	480b      	ldr	r0, [pc, #44]	; (86164 <UOTGHS_Handler+0x8cc>)
		udd_ctrl_in_sent(); // Send first data transfer
   86138:	4a09      	ldr	r2, [pc, #36]	; (86160 <UOTGHS_Handler+0x8c8>)
		udd_ctrl_prev_payload_buf_cnt = 0;
   8613a:	8023      	strh	r3, [r4, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8613c:	8003      	strh	r3, [r0, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   8613e:	7029      	strb	r1, [r5, #0]
}
   86140:	b003      	add	sp, #12
   86142:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udd_ctrl_in_sent(); // Send first data transfer
   86146:	4710      	bx	r2
   86148:	400ac104 	.word	0x400ac104
   8614c:	00081799 	.word	0x00081799
   86150:	400ac000 	.word	0x400ac000
   86154:	20070ca0 	.word	0x20070ca0
   86158:	200723a4 	.word	0x200723a4
   8615c:	200722e0 	.word	0x200722e0
   86160:	00084d65 	.word	0x00084d65
   86164:	200722dc 	.word	0x200722dc
   86168:	20180000 	.word	0x20180000
   8616c:	00085111 	.word	0x00085111
   86170:	400ac300 	.word	0x400ac300
   86174:	00084bbd 	.word	0x00084bbd
   86178:	200722de 	.word	0x200722de
   8617c:	400ac220 	.word	0x400ac220
   86180:	400ac160 	.word	0x400ac160
   86184:	00084b81 	.word	0x00084b81
   86188:	400ac100 	.word	0x400ac100
   8618c:	400ac1f0 	.word	0x400ac1f0
   86190:	20073420 	.word	0x20073420
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   86194:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   86198:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8619a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8619e:	4854      	ldr	r0, [pc, #336]	; (862f0 <UOTGHS_Handler+0xa58>)
	--sleepmgr_locks[mode];
   861a0:	4954      	ldr	r1, [pc, #336]	; (862f4 <UOTGHS_Handler+0xa5c>)
   861a2:	7002      	strb	r2, [r0, #0]
   861a4:	788a      	ldrb	r2, [r1, #2]
   861a6:	3a01      	subs	r2, #1
   861a8:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   861aa:	2d00      	cmp	r5, #0
   861ac:	f47f acb0 	bne.w	85b10 <UOTGHS_Handler+0x278>
		cpu_irq_enable();
   861b0:	7004      	strb	r4, [r0, #0]
   861b2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   861b6:	b662      	cpsie	i
}
   861b8:	e4aa      	b.n	85b10 <UOTGHS_Handler+0x278>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   861ba:	2403      	movs	r4, #3
   861bc:	7004      	strb	r4, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   861be:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   861c2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   861c4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   861c8:	4849      	ldr	r0, [pc, #292]	; (862f0 <UOTGHS_Handler+0xa58>)
   861ca:	7003      	strb	r3, [r0, #0]
	udd_ack_nak_out(0);
   861cc:	2308      	movs	r3, #8
	udd_ack_in_send(0);
   861ce:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
	udd_enable_in_send_interrupt(0);
   861d2:	f8c2 11f0 	str.w	r1, [r2, #496]	; 0x1f0
	udd_ack_nak_out(0);
   861d6:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	udd_enable_nak_out_interrupt(0);
   861da:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   861de:	2c00      	cmp	r4, #0
   861e0:	f47f ac23 	bne.w	85a2a <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   861e4:	7001      	strb	r1, [r0, #0]
   861e6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   861ea:	b662      	cpsie	i
   861ec:	e41d      	b.n	85a2a <UOTGHS_Handler+0x192>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   861ee:	2103      	movs	r1, #3
   861f0:	7029      	strb	r1, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   861f2:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   861f6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   861f8:	f3bf 8f5f 	dmb	sy
	udd_ack_in_send(0);
   861fc:	2101      	movs	r1, #1
	udd_ack_nak_out(0);
   861fe:	2008      	movs	r0, #8
	cpu_irq_disable();
   86200:	4c3b      	ldr	r4, [pc, #236]	; (862f0 <UOTGHS_Handler+0xa58>)
   86202:	7022      	strb	r2, [r4, #0]
	udd_ack_in_send(0);
   86204:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	udd_enable_in_send_interrupt(0);
   86208:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
	udd_ack_nak_out(0);
   8620c:	f8c3 0160 	str.w	r0, [r3, #352]	; 0x160
	udd_enable_nak_out_interrupt(0);
   86210:	f8c3 01f0 	str.w	r0, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   86214:	2d00      	cmp	r5, #0
   86216:	f47f ac08 	bne.w	85a2a <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   8621a:	7021      	strb	r1, [r4, #0]
   8621c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   86220:	b662      	cpsie	i
   86222:	e402      	b.n	85a2a <UOTGHS_Handler+0x192>
	udd_ctrl_payload_buf_cnt += nb_data;
   86224:	f8a7 c000 	strh.w	ip, [r7]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   86228:	e6b8      	b.n	85f9c <UOTGHS_Handler+0x704>
	if (nb_data > 0) {
   8622a:	f1ba 0f00 	cmp.w	sl, #0
   8622e:	d013      	beq.n	86258 <UOTGHS_Handler+0x9c0>
		if (nb_data >= nb_remain) {
   86230:	45d3      	cmp	fp, sl
   86232:	d84d      	bhi.n	862d0 <UOTGHS_Handler+0xa38>
		b_short = true;
   86234:	f04f 0801 	mov.w	r8, #1
   86238:	e541      	b.n	85cbe <UOTGHS_Handler+0x426>
		if (!udd_g_ctrlreq.over_under_run) {
   8623a:	6963      	ldr	r3, [r4, #20]
   8623c:	2b00      	cmp	r3, #0
   8623e:	f43f aeb5 	beq.w	85fac <UOTGHS_Handler+0x714>
		if (!udd_g_ctrlreq.over_under_run()) {
   86242:	4798      	blx	r3
   86244:	2800      	cmp	r0, #0
   86246:	f43f aeb1 	beq.w	85fac <UOTGHS_Handler+0x714>
		udd_ctrl_payload_buf_cnt = 0;
   8624a:	2200      	movs	r2, #0
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8624c:	8833      	ldrh	r3, [r6, #0]
   8624e:	8839      	ldrh	r1, [r7, #0]
		udd_ctrl_payload_buf_cnt = 0;
   86250:	803a      	strh	r2, [r7, #0]
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   86252:	440b      	add	r3, r1
   86254:	8033      	strh	r3, [r6, #0]
		udd_ctrl_payload_buf_cnt = 0;
   86256:	e70b      	b.n	86070 <UOTGHS_Handler+0x7d8>
	udd_ack_fifocon(ep);
   86258:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   8625c:	4a26      	ldr	r2, [pc, #152]	; (862f8 <UOTGHS_Handler+0xa60>)
   8625e:	f84e 1002 	str.w	r1, [lr, r2]
   86262:	4496      	add	lr, r2
   86264:	e559      	b.n	85d1a <UOTGHS_Handler+0x482>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   86266:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   8626a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8626c:	f3bf 8f5f 	dmb	sy
		udd_disable_in_send_interrupt(ep);
   86270:	2601      	movs	r6, #1
	cpu_irq_disable();
   86272:	491f      	ldr	r1, [pc, #124]	; (862f0 <UOTGHS_Handler+0xa58>)
   86274:	700a      	strb	r2, [r1, #0]
   86276:	4a20      	ldr	r2, [pc, #128]	; (862f8 <UOTGHS_Handler+0xa60>)
   86278:	f84e 6002 	str.w	r6, [lr, r2]
		udd_disable_endpoint_interrupt(ep);
   8627c:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
   86280:	f8c2 c014 	str.w	ip, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
   86284:	b91f      	cbnz	r7, 8628e <UOTGHS_Handler+0x9f6>
		cpu_irq_enable();
   86286:	700e      	strb	r6, [r1, #0]
   86288:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8628c:	b662      	cpsie	i
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   8628e:	2618      	movs	r6, #24
   86290:	fb06 5303 	mla	r3, r6, r3, r5
		udd_ep_finish_job(ptr_job, false, ep);
   86294:	4602      	mov	r2, r0
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   86296:	68dd      	ldr	r5, [r3, #12]
		udd_ep_finish_job(ptr_job, false, ep);
   86298:	4620      	mov	r0, r4
   8629a:	4c18      	ldr	r4, [pc, #96]	; (862fc <UOTGHS_Handler+0xa64>)
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   8629c:	609d      	str	r5, [r3, #8]
		udd_ep_finish_job(ptr_job, false, ep);
   8629e:	2100      	movs	r1, #0
   862a0:	4623      	mov	r3, r4
   862a2:	e549      	b.n	85d38 <UOTGHS_Handler+0x4a0>
		udd_ack_fifocon(ep);
   862a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   862a8:	4a13      	ldr	r2, [pc, #76]	; (862f8 <UOTGHS_Handler+0xa60>)
   862aa:	f84e 1002 	str.w	r1, [lr, r2]
		if (nb_data < pkt_size) {
   862ae:	e403      	b.n	85ab8 <UOTGHS_Handler+0x220>
		ptr_job->buf_cnt += nb_data;
   862b0:	f04f 0b18 	mov.w	fp, #24
	bool b_full = false, b_short = false;
   862b4:	f04f 0800 	mov.w	r8, #0
		ptr_job->buf_cnt += nb_data;
   862b8:	fb0b 5b03 	mla	fp, fp, r3, r5
   862bc:	f8db 200c 	ldr.w	r2, [fp, #12]
		ptr_job->buf_load = nb_data;
   862c0:	f8cb a010 	str.w	sl, [fp, #16]
		ptr_job->buf_cnt += nb_data;
   862c4:	4452      	add	r2, sl
   862c6:	f8cb 200c 	str.w	r2, [fp, #12]
	bool b_full = false, b_short = false;
   862ca:	f8cd 8004 	str.w	r8, [sp, #4]
   862ce:	e508      	b.n	85ce2 <UOTGHS_Handler+0x44a>
		ptr_job->buf_cnt += nb_data;
   862d0:	f04f 0b18 	mov.w	fp, #24
	bool b_full = false, b_short = false;
   862d4:	2200      	movs	r2, #0
		ptr_job->buf_cnt += nb_data;
   862d6:	fb0b 5b03 	mla	fp, fp, r3, r5
	bool b_full = false, b_short = false;
   862da:	9201      	str	r2, [sp, #4]
		ptr_job->buf_cnt += nb_data;
   862dc:	f8db 200c 	ldr.w	r2, [fp, #12]
		b_short = true;
   862e0:	f04f 0801 	mov.w	r8, #1
		ptr_job->buf_cnt += nb_data;
   862e4:	4452      	add	r2, sl
		ptr_job->buf_load = nb_data;
   862e6:	f8cb a010 	str.w	sl, [fp, #16]
		ptr_job->buf_cnt += nb_data;
   862ea:	f8cb 200c 	str.w	r2, [fp, #12]
		for (i = 0; i < nb_data; i++) {
   862ee:	e4f8      	b.n	85ce2 <UOTGHS_Handler+0x44a>
   862f0:	20070ca0 	.word	0x20070ca0
   862f4:	20073420 	.word	0x20073420
   862f8:	400ac220 	.word	0x400ac220
   862fc:	00084b81 	.word	0x00084b81

00086300 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   86300:	4a05      	ldr	r2, [pc, #20]	; (86318 <udd_test_mode_j+0x18>)
   86302:	6813      	ldr	r3, [r2, #0]
   86304:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   86308:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8630c:	6013      	str	r3, [r2, #0]
	udd_enable_hs_test_mode_j();
   8630e:	6813      	ldr	r3, [r2, #0]
   86310:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   86314:	6013      	str	r3, [r2, #0]
}
   86316:	4770      	bx	lr
   86318:	400ac000 	.word	0x400ac000

0008631c <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   8631c:	4a05      	ldr	r2, [pc, #20]	; (86334 <udd_test_mode_k+0x18>)
   8631e:	6813      	ldr	r3, [r2, #0]
   86320:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   86324:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   86328:	6013      	str	r3, [r2, #0]
	udd_enable_hs_test_mode_k();
   8632a:	6813      	ldr	r3, [r2, #0]
   8632c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   86330:	6013      	str	r3, [r2, #0]
}
   86332:	4770      	bx	lr
   86334:	400ac000 	.word	0x400ac000

00086338 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   86338:	4a03      	ldr	r2, [pc, #12]	; (86348 <udd_test_mode_se0_nak+0x10>)
   8633a:	6813      	ldr	r3, [r2, #0]
   8633c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   86340:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   86344:	6013      	str	r3, [r2, #0]
}
   86346:	4770      	bx	lr
   86348:	400ac000 	.word	0x400ac000

0008634c <udd_test_mode_packet>:
{
   8634c:	b410      	push	{r4}
   8634e:	b08f      	sub	sp, #60	; 0x3c
	const uint8_t test_packet[] = {
   86350:	46ec      	mov	ip, sp
   86352:	4c25      	ldr	r4, [pc, #148]	; (863e8 <udd_test_mode_packet+0x9c>)
   86354:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   86356:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   8635a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   8635c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   86360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   86362:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   86366:	e894 0003 	ldmia.w	r4, {r0, r1}
	ptr_src = test_packet;
   8636a:	466b      	mov	r3, sp
	udd_disable_endpoint(0);
   8636c:	4a1f      	ldr	r2, [pc, #124]	; (863ec <udd_test_mode_packet+0xa0>)
	const uint8_t test_packet[] = {
   8636e:	f84c 0b04 	str.w	r0, [ip], #4
   86372:	f88c 1000 	strb.w	r1, [ip]
	udd_disable_endpoint(0);
   86376:	69d1      	ldr	r1, [r2, #28]
   86378:	f1c3 5000 	rsb	r0, r3, #536870912	; 0x20000000
   8637c:	f021 0101 	bic.w	r1, r1, #1
   86380:	61d1      	str	r1, [r2, #28]
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
   86382:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   86386:	f10d 0c35 	add.w	ip, sp, #53	; 0x35
   8638a:	f421 51cb 	bic.w	r1, r1, #6496	; 0x1960
   8638e:	f021 011c 	bic.w	r1, r1, #28
   86392:	f441 5189 	orr.w	r1, r1, #4384	; 0x1120
   86396:	f041 0110 	orr.w	r1, r1, #16
   8639a:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	udd_allocate_memory(0);
   8639e:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   863a2:	f500 10c0 	add.w	r0, r0, #1572864	; 0x180000
   863a6:	f041 0102 	orr.w	r1, r1, #2
   863aa:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	udd_enable_endpoint(0);
   863ae:	69d1      	ldr	r1, [r2, #28]
   863b0:	f041 0101 	orr.w	r1, r1, #1
   863b4:	61d1      	str	r1, [r2, #28]
	udd_enable_hs_test_mode();
   863b6:	6811      	ldr	r1, [r2, #0]
   863b8:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
   863bc:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   863c0:	6011      	str	r1, [r2, #0]
	udd_enable_hs_test_mode_packet();
   863c2:	6811      	ldr	r1, [r2, #0]
   863c4:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   863c8:	6011      	str	r1, [r2, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   863ca:	181a      	adds	r2, r3, r0
		*ptr_dest++ = *ptr_src++;
   863cc:	f813 1b01 	ldrb.w	r1, [r3], #1
	for (i = 0; i < sizeof(test_packet); i++) {
   863d0:	4563      	cmp	r3, ip
		*ptr_dest++ = *ptr_src++;
   863d2:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   863d4:	d1f9      	bne.n	863ca <udd_test_mode_packet+0x7e>
	udd_ack_fifocon(0);
   863d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   863da:	4b04      	ldr	r3, [pc, #16]	; (863ec <udd_test_mode_packet+0xa0>)
   863dc:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
}
   863e0:	b00f      	add	sp, #60	; 0x3c
   863e2:	bc10      	pop	{r4}
   863e4:	4770      	bx	lr
   863e6:	bf00      	nop
   863e8:	0008da6c 	.word	0x0008da6c
   863ec:	400ac000 	.word	0x400ac000

000863f0 <board_init>:
#include "ioport.h"

void board_init(void)
{

}
   863f0:	4770      	bx	lr
   863f2:	bf00      	nop

000863f4 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   863f4:	4b0c      	ldr	r3, [pc, #48]	; (86428 <cpu_irq_enter_critical+0x34>)
   863f6:	681a      	ldr	r2, [r3, #0]
   863f8:	b922      	cbnz	r2, 86404 <cpu_irq_enter_critical+0x10>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   863fa:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
   863fe:	b129      	cbz	r1, 8640c <cpu_irq_enter_critical+0x18>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   86400:	490a      	ldr	r1, [pc, #40]	; (8642c <cpu_irq_enter_critical+0x38>)
   86402:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   86404:	681a      	ldr	r2, [r3, #0]
   86406:	3201      	adds	r2, #1
   86408:	601a      	str	r2, [r3, #0]
   8640a:	4770      	bx	lr
{
   8640c:	b410      	push	{r4}
  __ASM volatile ("cpsid i" : : : "memory");
   8640e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   86410:	f3bf 8f5f 	dmb	sy
			cpu_irq_prev_interrupt_state = true;
   86414:	2001      	movs	r0, #1
			cpu_irq_disable();
   86416:	4c06      	ldr	r4, [pc, #24]	; (86430 <cpu_irq_enter_critical+0x3c>)
			cpu_irq_prev_interrupt_state = true;
   86418:	4a04      	ldr	r2, [pc, #16]	; (8642c <cpu_irq_enter_critical+0x38>)
			cpu_irq_disable();
   8641a:	7021      	strb	r1, [r4, #0]
			cpu_irq_prev_interrupt_state = true;
   8641c:	7010      	strb	r0, [r2, #0]
	cpu_irq_critical_section_counter++;
   8641e:	681a      	ldr	r2, [r3, #0]
   86420:	3201      	adds	r2, #1
   86422:	601a      	str	r2, [r3, #0]
}
   86424:	bc10      	pop	{r4}
   86426:	4770      	bx	lr
   86428:	200723bc 	.word	0x200723bc
   8642c:	200723c0 	.word	0x200723c0
   86430:	20070ca0 	.word	0x20070ca0

00086434 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   86434:	4b07      	ldr	r3, [pc, #28]	; (86454 <cpu_irq_leave_critical+0x20>)
   86436:	681a      	ldr	r2, [r3, #0]
   86438:	3a01      	subs	r2, #1
   8643a:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   8643c:	681b      	ldr	r3, [r3, #0]
   8643e:	b943      	cbnz	r3, 86452 <cpu_irq_leave_critical+0x1e>
   86440:	4b05      	ldr	r3, [pc, #20]	; (86458 <cpu_irq_leave_critical+0x24>)
   86442:	781b      	ldrb	r3, [r3, #0]
   86444:	b12b      	cbz	r3, 86452 <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   86446:	2201      	movs	r2, #1
   86448:	4b04      	ldr	r3, [pc, #16]	; (8645c <cpu_irq_leave_critical+0x28>)
   8644a:	701a      	strb	r2, [r3, #0]
   8644c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   86450:	b662      	cpsie	i
	}
}
   86452:	4770      	bx	lr
   86454:	200723bc 	.word	0x200723bc
   86458:	200723c0 	.word	0x200723c0
   8645c:	20070ca0 	.word	0x20070ca0

00086460 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   86460:	4a02      	ldr	r2, [pc, #8]	; (8646c <udi_cdc_comm_disable+0xc>)
   86462:	7813      	ldrb	r3, [r2, #0]
   86464:	3b01      	subs	r3, #1
   86466:	b2db      	uxtb	r3, r3
   86468:	7013      	strb	r3, [r2, #0]
}
   8646a:	4770      	bx	lr
   8646c:	200723d6 	.word	0x200723d6

00086470 <udi_cdc_comm_setup>:

static uint8_t udi_cdc_setup_to_port(void)
{
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   86470:	4b20      	ldr	r3, [pc, #128]	; (864f4 <udi_cdc_comm_setup+0x84>)
   86472:	791a      	ldrb	r2, [r3, #4]
	if (Udd_setup_is_in()) {
   86474:	f993 0000 	ldrsb.w	r0, [r3]
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   86478:	f1a2 0103 	sub.w	r1, r2, #3
   8647c:	fab1 f181 	clz	r1, r1
	if (Udd_setup_is_in()) {
   86480:	781a      	ldrb	r2, [r3, #0]
   86482:	2800      	cmp	r0, #0
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   86484:	ea4f 1151 	mov.w	r1, r1, lsr #5
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   86488:	f002 0260 	and.w	r2, r2, #96	; 0x60
	if (Udd_setup_is_in()) {
   8648c:	db03      	blt.n	86496 <udi_cdc_comm_setup+0x26>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8648e:	2a20      	cmp	r2, #32
   86490:	d014      	beq.n	864bc <udi_cdc_comm_setup+0x4c>
	return false;  // request Not supported
   86492:	2000      	movs	r0, #0
}
   86494:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   86496:	2a20      	cmp	r2, #32
   86498:	d1fb      	bne.n	86492 <udi_cdc_comm_setup+0x22>
			switch (udd_g_ctrlreq.req.bRequest) {
   8649a:	785a      	ldrb	r2, [r3, #1]
   8649c:	2a21      	cmp	r2, #33	; 0x21
   8649e:	d1f8      	bne.n	86492 <udi_cdc_comm_setup+0x22>
				if (sizeof(usb_cdc_line_coding_t) !=
   864a0:	f8b3 c006 	ldrh.w	ip, [r3, #6]
   864a4:	f1bc 0f07 	cmp.w	ip, #7
   864a8:	d1f3      	bne.n	86492 <udi_cdc_comm_setup+0x22>
						(uint8_t *) &
   864aa:	4813      	ldr	r0, [pc, #76]	; (864f8 <udi_cdc_comm_setup+0x88>)
   864ac:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
   864b0:	4402      	add	r2, r0
				udd_g_ctrlreq.payload =
   864b2:	609a      	str	r2, [r3, #8]
				return true;
   864b4:	2001      	movs	r0, #1
				udd_g_ctrlreq.payload_size =
   864b6:	f8a3 c00c 	strh.w	ip, [r3, #12]
				return true;
   864ba:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   864bc:	7858      	ldrb	r0, [r3, #1]
   864be:	2820      	cmp	r0, #32
   864c0:	d005      	beq.n	864ce <udi_cdc_comm_setup+0x5e>
   864c2:	f1a0 0022 	sub.w	r0, r0, #34	; 0x22
   864c6:	fab0 f080 	clz	r0, r0
   864ca:	0940      	lsrs	r0, r0, #5
   864cc:	4770      	bx	lr
				if (sizeof(usb_cdc_line_coding_t) !=
   864ce:	f8b3 c006 	ldrh.w	ip, [r3, #6]
   864d2:	f1bc 0f07 	cmp.w	ip, #7
   864d6:	d1dc      	bne.n	86492 <udi_cdc_comm_setup+0x22>
						(uint8_t *) &
   864d8:	4807      	ldr	r0, [pc, #28]	; (864f8 <udi_cdc_comm_setup+0x88>)
{
   864da:	b410      	push	{r4}
						(uint8_t *) &
   864dc:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
				udd_g_ctrlreq.callback =
   864e0:	4c06      	ldr	r4, [pc, #24]	; (864fc <udi_cdc_comm_setup+0x8c>)
						(uint8_t *) &
   864e2:	4402      	add	r2, r0
				udd_g_ctrlreq.callback =
   864e4:	611c      	str	r4, [r3, #16]
				udd_g_ctrlreq.payload =
   864e6:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   864e8:	f8a3 c00c 	strh.w	ip, [r3, #12]
				return true;
   864ec:	2001      	movs	r0, #1
}
   864ee:	bc10      	pop	{r4}
   864f0:	4770      	bx	lr
   864f2:	bf00      	nop
   864f4:	200723a4 	.word	0x200723a4
   864f8:	200723c8 	.word	0x200723c8
   864fc:	00086509 	.word	0x00086509

00086500 <udi_cdc_data_setup>:
}
   86500:	2000      	movs	r0, #0
   86502:	4770      	bx	lr

00086504 <udi_cdc_getsetting>:
}
   86504:	2000      	movs	r0, #0
   86506:	4770      	bx	lr

00086508 <udi_cdc_line_coding_received>:
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   86508:	4b06      	ldr	r3, [pc, #24]	; (86524 <udi_cdc_line_coding_received+0x1c>)
static void udi_cdc_line_coding_received(void)
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   8650a:	4907      	ldr	r1, [pc, #28]	; (86528 <udi_cdc_line_coding_received+0x20>)
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   8650c:	7918      	ldrb	r0, [r3, #4]
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   8650e:	4b07      	ldr	r3, [pc, #28]	; (8652c <udi_cdc_line_coding_received+0x24>)
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   86510:	f1a0 0003 	sub.w	r0, r0, #3
   86514:	fab0 f080 	clz	r0, r0
   86518:	0940      	lsrs	r0, r0, #5
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   8651a:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   8651e:	4411      	add	r1, r2
   86520:	4718      	bx	r3
   86522:	bf00      	nop
   86524:	200723a4 	.word	0x200723a4
   86528:	200723c8 	.word	0x200723c8
   8652c:	000827f9 	.word	0x000827f9

00086530 <udi_cdc_comm_enable>:
{
   86530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (udi_cdc_nb_comm_enabled > UDI_CDC_PORT_NB) {
   86532:	4d1e      	ldr	r5, [pc, #120]	; (865ac <udi_cdc_comm_enable+0x7c>)
	udi_cdc_state[port] = CPU_TO_LE16(0);
   86534:	2200      	movs	r2, #0
	if (udi_cdc_nb_comm_enabled > UDI_CDC_PORT_NB) {
   86536:	782b      	ldrb	r3, [r5, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
   86538:	f242 06a1 	movw	r6, #8353	; 0x20a1
	if (udi_cdc_nb_comm_enabled > UDI_CDC_PORT_NB) {
   8653c:	2b02      	cmp	r3, #2
		udi_cdc_nb_comm_enabled = 0;
   8653e:	bf84      	itt	hi
   86540:	2300      	movhi	r3, #0
   86542:	702b      	strbhi	r3, [r5, #0]
	port = udi_cdc_nb_comm_enabled;
   86544:	782c      	ldrb	r4, [r5, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   86546:	481a      	ldr	r0, [pc, #104]	; (865b0 <udi_cdc_comm_enable+0x80>)
	port = udi_cdc_nb_comm_enabled;
   86548:	b2e4      	uxtb	r4, r4
	switch (port) {
   8654a:	2c01      	cmp	r4, #1
	udi_cdc_state[port] = CPU_TO_LE16(0);
   8654c:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
	uid_cdc_state_msg[port].header.bmRequestType =
   86550:	4b18      	ldr	r3, [pc, #96]	; (865b4 <udi_cdc_comm_enable+0x84>)
	switch (port) {
   86552:	bf14      	ite	ne
   86554:	2001      	movne	r0, #1
   86556:	2003      	moveq	r0, #3
	uid_cdc_state_msg[port].header.bmRequestType =
   86558:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   8655c:	f823 6011 	strh.w	r6, [r3, r1, lsl #1]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   86560:	f04f 0c02 	mov.w	ip, #2
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   86564:	f04f 0e08 	mov.w	lr, #8
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   86568:	f06f 073d 	mvn.w	r7, #61	; 0x3d
   8656c:	2601      	movs	r6, #1
	uid_cdc_state_msg[port].header.bmRequestType =
   8656e:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   86572:	4911      	ldr	r1, [pc, #68]	; (865b8 <udi_cdc_comm_enable+0x88>)
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   86574:	8098      	strh	r0, [r3, #4]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   86576:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   8657a:	540a      	strb	r2, [r1, r0]
   8657c:	4401      	add	r1, r0
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   8657e:	805a      	strh	r2, [r3, #2]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   86580:	4620      	mov	r0, r4
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   86582:	811a      	strh	r2, [r3, #8]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   86584:	f8a3 c006 	strh.w	ip, [r3, #6]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   86588:	70ca      	strb	r2, [r1, #3]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   8658a:	4b0c      	ldr	r3, [pc, #48]	; (865bc <udi_cdc_comm_enable+0x8c>)
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   8658c:	710a      	strb	r2, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   8658e:	714a      	strb	r2, [r1, #5]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   86590:	704f      	strb	r7, [r1, #1]
   86592:	708e      	strb	r6, [r1, #2]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   86594:	f881 e006 	strb.w	lr, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   86598:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   8659a:	4620      	mov	r0, r4
   8659c:	4b08      	ldr	r3, [pc, #32]	; (865c0 <udi_cdc_comm_enable+0x90>)
   8659e:	4798      	blx	r3
   865a0:	b118      	cbz	r0, 865aa <udi_cdc_comm_enable+0x7a>
	udi_cdc_nb_comm_enabled++;
   865a2:	782b      	ldrb	r3, [r5, #0]
   865a4:	4433      	add	r3, r6
   865a6:	b2db      	uxtb	r3, r3
   865a8:	702b      	strb	r3, [r5, #0]
}
   865aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   865ac:	200723d6 	.word	0x200723d6
   865b0:	20072bec 	.word	0x20072bec
   865b4:	20073408 	.word	0x20073408
   865b8:	200723c8 	.word	0x200723c8
   865bc:	000827f9 	.word	0x000827f9
   865c0:	000826ed 	.word	0x000826ed

000865c4 <udi_cdc_data_disable>:
{
   865c4:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   865c6:	4a06      	ldr	r2, [pc, #24]	; (865e0 <udi_cdc_data_disable+0x1c>)
	UDI_CDC_DISABLE_EXT(port);
   865c8:	4906      	ldr	r1, [pc, #24]	; (865e4 <udi_cdc_data_disable+0x20>)
	udi_cdc_nb_data_enabled--;
   865ca:	7813      	ldrb	r3, [r2, #0]
   865cc:	3b01      	subs	r3, #1
   865ce:	b2db      	uxtb	r3, r3
   865d0:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   865d2:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   865d4:	4788      	blx	r1
	udi_cdc_data_running = false;
   865d6:	2200      	movs	r2, #0
   865d8:	4b03      	ldr	r3, [pc, #12]	; (865e8 <udi_cdc_data_disable+0x24>)
   865da:	701a      	strb	r2, [r3, #0]
}
   865dc:	bd08      	pop	{r3, pc}
   865de:	bf00      	nop
   865e0:	200723d7 	.word	0x200723d7
   865e4:	00082721 	.word	0x00082721
   865e8:	200723c4 	.word	0x200723c4

000865ec <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
   865ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   865f0:	4e4b      	ldr	r6, [pc, #300]	; (86720 <udi_cdc_tx_send+0x134>)
{
   865f2:	b085      	sub	sp, #20
	if (udi_cdc_tx_trans_ongoing[port]) {
   865f4:	5c33      	ldrb	r3, [r6, r0]
   865f6:	b113      	cbz	r3, 865fe <udi_cdc_tx_send+0x12>
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   865f8:	b005      	add	sp, #20
   865fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (udd_is_high_speed()) {
   865fe:	f8df 9124 	ldr.w	r9, [pc, #292]	; 86724 <udi_cdc_tx_send+0x138>
   86602:	4604      	mov	r4, r0
   86604:	47c8      	blx	r9
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   86606:	f8df a120 	ldr.w	sl, [pc, #288]	; 86728 <udi_cdc_tx_send+0x13c>
   8660a:	f83a 5014 	ldrh.w	r5, [sl, r4, lsl #1]
	if (udd_is_high_speed()) {
   8660e:	2800      	cmp	r0, #0
   86610:	d04f      	beq.n	866b2 <udi_cdc_tx_send+0xc6>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   86612:	4b46      	ldr	r3, [pc, #280]	; (8672c <udi_cdc_tx_send+0x140>)
   86614:	4798      	blx	r3
   86616:	4285      	cmp	r5, r0
   86618:	d0ee      	beq.n	865f8 <udi_cdc_tx_send+0xc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8661a:	f3ef 8310 	mrs	r3, PRIMASK
   8661e:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
   86620:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   86622:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   86626:	2300      	movs	r3, #0
   86628:	4a41      	ldr	r2, [pc, #260]	; (86730 <udi_cdc_tx_send+0x144>)
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   8662a:	4942      	ldr	r1, [pc, #264]	; (86734 <udi_cdc_tx_send+0x148>)
   8662c:	7013      	strb	r3, [r2, #0]
   8662e:	5d0d      	ldrb	r5, [r1, r4]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   86630:	f8df b104 	ldr.w	fp, [pc, #260]	; 86738 <udi_cdc_tx_send+0x14c>
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   86634:	b2ed      	uxtb	r5, r5
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   86636:	eb05 0344 	add.w	r3, r5, r4, lsl #1
   8663a:	f83b 3013 	ldrh.w	r3, [fp, r3, lsl #1]
   8663e:	46a8      	mov	r8, r5
   86640:	0067      	lsls	r7, r4, #1
   86642:	2b00      	cmp	r3, #0
   86644:	d043      	beq.n	866ce <udi_cdc_tx_send+0xe2>
   86646:	4b3d      	ldr	r3, [pc, #244]	; (8673c <udi_cdc_tx_send+0x150>)
	sof_zlp_counter = 0;
   86648:	2000      	movs	r0, #0
   8664a:	8018      	strh	r0, [r3, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
   8664c:	4b3c      	ldr	r3, [pc, #240]	; (86740 <udi_cdc_tx_send+0x154>)
   8664e:	5d1b      	ldrb	r3, [r3, r4]
   86650:	2b00      	cmp	r3, #0
   86652:	d033      	beq.n	866bc <udi_cdc_tx_send+0xd0>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   86654:	fab5 f885 	clz	r8, r5
   86658:	ea4f 1858 	mov.w	r8, r8, lsr #5
	udi_cdc_tx_trans_ongoing[port] = true;
   8665c:	2301      	movs	r3, #1
	if (cpu_irq_is_enabled_flags(flags))
   8665e:	9902      	ldr	r1, [sp, #8]
   86660:	5533      	strb	r3, [r6, r4]
   86662:	b919      	cbnz	r1, 8666c <udi_cdc_tx_send+0x80>
		cpu_irq_enable();
   86664:	7013      	strb	r3, [r2, #0]
   86666:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8666a:	b662      	cpsie	i
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   8666c:	eb07 0508 	add.w	r5, r7, r8
   86670:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
   86674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   86678:	bf14      	ite	ne
   8667a:	2601      	movne	r6, #1
   8667c:	2600      	moveq	r6, #0
	if (b_short_packet) {
   8667e:	d022      	beq.n	866c6 <udi_cdc_tx_send+0xda>
		if (udd_is_high_speed()) {
   86680:	47c8      	blx	r9
   86682:	2800      	cmp	r0, #0
   86684:	d044      	beq.n	86710 <udi_cdc_tx_send+0x124>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   86686:	4b29      	ldr	r3, [pc, #164]	; (8672c <udi_cdc_tx_send+0x140>)
   86688:	4798      	blx	r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   8668a:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   8668e:	f82a 0014 	strh.w	r0, [sl, r4, lsl #1]
	udd_ep_run( ep,
   86692:	482c      	ldr	r0, [pc, #176]	; (86744 <udi_cdc_tx_send+0x158>)
			udi_cdc_tx_buf[port][buf_sel_trans],
   86694:	4a2c      	ldr	r2, [pc, #176]	; (86748 <udi_cdc_tx_send+0x15c>)
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
   86696:	2c01      	cmp	r4, #1
			udi_cdc_tx_buf[port][buf_sel_trans],
   86698:	4447      	add	r7, r8
	udd_ep_run( ep,
   8669a:	9000      	str	r0, [sp, #0]
   8669c:	4631      	mov	r1, r6
   8669e:	bf14      	ite	ne
   866a0:	2083      	movne	r0, #131	; 0x83
   866a2:	2085      	moveq	r0, #133	; 0x85
   866a4:	4c29      	ldr	r4, [pc, #164]	; (8674c <udi_cdc_tx_send+0x160>)
   866a6:	eb02 2247 	add.w	r2, r2, r7, lsl #9
   866aa:	47a0      	blx	r4
}
   866ac:	b005      	add	sp, #20
   866ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   866b2:	4b27      	ldr	r3, [pc, #156]	; (86750 <udi_cdc_tx_send+0x164>)
   866b4:	4798      	blx	r3
   866b6:	4285      	cmp	r5, r0
   866b8:	d1af      	bne.n	8661a <udi_cdc_tx_send+0x2e>
   866ba:	e79d      	b.n	865f8 <udi_cdc_tx_send+0xc>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   866bc:	fab5 f585 	clz	r5, r5
   866c0:	096d      	lsrs	r5, r5, #5
   866c2:	550d      	strb	r5, [r1, r4]
   866c4:	e7ca      	b.n	8665c <udi_cdc_tx_send+0x70>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   866c6:	2200      	movs	r2, #0
   866c8:	f82a 2014 	strh.w	r2, [sl, r4, lsl #1]
   866cc:	e7e1      	b.n	86692 <udi_cdc_tx_send+0xa6>
		sof_zlp_counter++;
   866ce:	4b1b      	ldr	r3, [pc, #108]	; (8673c <udi_cdc_tx_send+0x150>)
   866d0:	8818      	ldrh	r0, [r3, #0]
   866d2:	9303      	str	r3, [sp, #12]
   866d4:	3001      	adds	r0, #1
   866d6:	8018      	strh	r0, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   866d8:	47c8      	blx	r9
   866da:	9b03      	ldr	r3, [sp, #12]
   866dc:	4a14      	ldr	r2, [pc, #80]	; (86730 <udi_cdc_tx_send+0x144>)
   866de:	b910      	cbnz	r0, 866e6 <udi_cdc_tx_send+0xfa>
   866e0:	8818      	ldrh	r0, [r3, #0]
   866e2:	2863      	cmp	r0, #99	; 0x63
   866e4:	d90a      	bls.n	866fc <udi_cdc_tx_send+0x110>
   866e6:	9303      	str	r3, [sp, #12]
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   866e8:	47c8      	blx	r9
   866ea:	4a11      	ldr	r2, [pc, #68]	; (86730 <udi_cdc_tx_send+0x144>)
   866ec:	4911      	ldr	r1, [pc, #68]	; (86734 <udi_cdc_tx_send+0x148>)
   866ee:	9b03      	ldr	r3, [sp, #12]
   866f0:	2800      	cmp	r0, #0
   866f2:	d0a9      	beq.n	86648 <udi_cdc_tx_send+0x5c>
   866f4:	8818      	ldrh	r0, [r3, #0]
   866f6:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   866fa:	d2a5      	bcs.n	86648 <udi_cdc_tx_send+0x5c>
	if (cpu_irq_is_enabled_flags(flags))
   866fc:	9b02      	ldr	r3, [sp, #8]
   866fe:	2b00      	cmp	r3, #0
   86700:	f47f af7a 	bne.w	865f8 <udi_cdc_tx_send+0xc>
		cpu_irq_enable();
   86704:	2301      	movs	r3, #1
   86706:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   86708:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8670c:	b662      	cpsie	i
}
   8670e:	e773      	b.n	865f8 <udi_cdc_tx_send+0xc>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   86710:	4b0f      	ldr	r3, [pc, #60]	; (86750 <udi_cdc_tx_send+0x164>)
   86712:	4798      	blx	r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   86714:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   86718:	f82a 0014 	strh.w	r0, [sl, r4, lsl #1]
   8671c:	e7b9      	b.n	86692 <udi_cdc_tx_send+0xa6>
   8671e:	bf00      	nop
   86720:	20073404 	.word	0x20073404
   86724:	00085221 	.word	0x00085221
   86728:	20073400 	.word	0x20073400
   8672c:	0008527d 	.word	0x0008527d
   86730:	20070ca0 	.word	0x20070ca0
   86734:	200733fc 	.word	0x200733fc
   86738:	200733f4 	.word	0x200733f4
   8673c:	200723c2 	.word	0x200723c2
   86740:	20072bf0 	.word	0x20072bf0
   86744:	00086755 	.word	0x00086755
   86748:	20072bf4 	.word	0x20072bf4
   8674c:	000854b1 	.word	0x000854b1
   86750:	0008526d 	.word	0x0008526d

00086754 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   86754:	b100      	cbz	r0, 86758 <udi_cdc_data_sent+0x4>
   86756:	4770      	bx	lr
   86758:	4603      	mov	r3, r0
	switch (ep) {
   8675a:	f1a2 0085 	sub.w	r0, r2, #133	; 0x85
   8675e:	fab0 f080 	clz	r0, r0
{
   86762:	b470      	push	{r4, r5, r6}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   86764:	4a09      	ldr	r2, [pc, #36]	; (8678c <udi_cdc_data_sent+0x38>)
	switch (ep) {
   86766:	0940      	lsrs	r0, r0, #5
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   86768:	f812 c000 	ldrb.w	ip, [r2, r0]
   8676c:	0042      	lsls	r2, r0, #1
   8676e:	f1bc 0f00 	cmp.w	ip, #0
   86772:	bf08      	it	eq
   86774:	3201      	addeq	r2, #1
   86776:	4c06      	ldr	r4, [pc, #24]	; (86790 <udi_cdc_data_sent+0x3c>)
	udi_cdc_tx_both_buf_to_send[port] = false;
   86778:	4e06      	ldr	r6, [pc, #24]	; (86794 <udi_cdc_data_sent+0x40>)
	udi_cdc_tx_trans_ongoing[port] = false;
   8677a:	4d07      	ldr	r5, [pc, #28]	; (86798 <udi_cdc_data_sent+0x44>)
	udi_cdc_tx_both_buf_to_send[port] = false;
   8677c:	5433      	strb	r3, [r6, r0]
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   8677e:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
	udi_cdc_tx_trans_ongoing[port] = false;
   86782:	542b      	strb	r3, [r5, r0]
	udi_cdc_tx_send(port);
   86784:	4905      	ldr	r1, [pc, #20]	; (8679c <udi_cdc_data_sent+0x48>)
}
   86786:	bc70      	pop	{r4, r5, r6}
	udi_cdc_tx_send(port);
   86788:	4708      	bx	r1
   8678a:	bf00      	nop
   8678c:	200733fc 	.word	0x200733fc
   86790:	200733f4 	.word	0x200733f4
   86794:	20072bf0 	.word	0x20072bf0
   86798:	20073404 	.word	0x20073404
   8679c:	000865ed 	.word	0x000865ed

000867a0 <udi_cdc_data_sof_notify>:
{
   867a0:	b510      	push	{r4, lr}
	udi_cdc_tx_send(port_notify);
   867a2:	4c06      	ldr	r4, [pc, #24]	; (867bc <udi_cdc_data_sof_notify+0x1c>)
   867a4:	4b06      	ldr	r3, [pc, #24]	; (867c0 <udi_cdc_data_sof_notify+0x20>)
   867a6:	7820      	ldrb	r0, [r4, #0]
   867a8:	4798      	blx	r3
	port_notify++;
   867aa:	7823      	ldrb	r3, [r4, #0]
   867ac:	3301      	adds	r3, #1
   867ae:	b2db      	uxtb	r3, r3
	if (port_notify >= UDI_CDC_PORT_NB) {
   867b0:	2b01      	cmp	r3, #1
		port_notify = 0;
   867b2:	bf88      	it	hi
   867b4:	2300      	movhi	r3, #0
   867b6:	7023      	strb	r3, [r4, #0]
}
   867b8:	bd10      	pop	{r4, pc}
   867ba:	bf00      	nop
   867bc:	200723c1 	.word	0x200723c1
   867c0:	000865ed 	.word	0x000865ed

000867c4 <udi_cdc_rx_start>:
{
   867c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   867c8:	4604      	mov	r4, r0
   867ca:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   867cc:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   867d0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   867d2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   867d6:	2200      	movs	r2, #0
   867d8:	4b34      	ldr	r3, [pc, #208]	; (868ac <udi_cdc_rx_start+0xe8>)
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   867da:	4935      	ldr	r1, [pc, #212]	; (868b0 <udi_cdc_rx_start+0xec>)
	if (udi_cdc_rx_trans_ongoing[port] ||
   867dc:	4e35      	ldr	r6, [pc, #212]	; (868b4 <udi_cdc_rx_start+0xf0>)
   867de:	701a      	strb	r2, [r3, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   867e0:	5d0d      	ldrb	r5, [r1, r4]
	if (udi_cdc_rx_trans_ongoing[port] ||
   867e2:	5d32      	ldrb	r2, [r6, r4]
   867e4:	2a00      	cmp	r2, #0
   867e6:	d14f      	bne.n	86888 <udi_cdc_rx_start+0xc4>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   867e8:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 868b8 <udi_cdc_rx_start+0xf4>
   867ec:	b2ed      	uxtb	r5, r5
   867ee:	f002 08ff 	and.w	r8, r2, #255	; 0xff
   867f2:	4a32      	ldr	r2, [pc, #200]	; (868bc <udi_cdc_rx_start+0xf8>)
   867f4:	eb05 0744 	add.w	r7, r5, r4, lsl #1
   867f8:	f832 e014 	ldrh.w	lr, [r2, r4, lsl #1]
   867fc:	f839 c017 	ldrh.w	ip, [r9, r7, lsl #1]
   86800:	fa1f fe8e 	uxth.w	lr, lr
   86804:	fa1f fc8c 	uxth.w	ip, ip
	if (udi_cdc_rx_trans_ongoing[port] ||
   86808:	45e6      	cmp	lr, ip
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   8680a:	ea4f 0744 	mov.w	r7, r4, lsl #1
	if (udi_cdc_rx_trans_ongoing[port] ||
   8680e:	d33b      	bcc.n	86888 <udi_cdc_rx_start+0xc4>
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   86810:	fab5 fc85 	clz	ip, r5
	udi_cdc_rx_trans_ongoing[port] = true;
   86814:	f04f 0e01 	mov.w	lr, #1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   86818:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
	udi_cdc_rx_pos[port] = 0;
   8681c:	f822 8014 	strh.w	r8, [r2, r4, lsl #1]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   86820:	f801 c004 	strb.w	ip, [r1, r4]
	udi_cdc_rx_trans_ongoing[port] = true;
   86824:	f806 e004 	strb.w	lr, [r6, r4]
	if (cpu_irq_is_enabled_flags(flags))
   86828:	b920      	cbnz	r0, 86834 <udi_cdc_rx_start+0x70>
		cpu_irq_enable();
   8682a:	f883 e000 	strb.w	lr, [r3]
   8682e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   86832:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   86834:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   86838:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8683a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8683e:	2000      	movs	r0, #0
   86840:	7018      	strb	r0, [r3, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   86842:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   86846:	5d08      	ldrb	r0, [r1, r4]
	pos = udi_cdc_rx_pos[port];
   86848:	b291      	uxth	r1, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   8684a:	183a      	adds	r2, r7, r0
   8684c:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
   86850:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   86852:	b926      	cbnz	r6, 8685e <udi_cdc_rx_start+0x9a>
		cpu_irq_enable();
   86854:	2001      	movs	r0, #1
   86856:	7018      	strb	r0, [r3, #0]
   86858:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8685c:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   8685e:	4291      	cmp	r1, r2
   86860:	d11f      	bne.n	868a2 <udi_cdc_rx_start+0xde>
	return udd_ep_run(ep,
   86862:	4817      	ldr	r0, [pc, #92]	; (868c0 <udi_cdc_rx_start+0xfc>)
			udi_cdc_rx_buf[port][buf_sel_trans],
   86864:	4a17      	ldr	r2, [pc, #92]	; (868c4 <udi_cdc_rx_start+0x100>)
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
   86866:	2c01      	cmp	r4, #1
			udi_cdc_rx_buf[port][buf_sel_trans],
   86868:	443d      	add	r5, r7
	return udd_ep_run(ep,
   8686a:	9000      	str	r0, [sp, #0]
   8686c:	f44f 7300 	mov.w	r3, #512	; 0x200
   86870:	f04f 0101 	mov.w	r1, #1
   86874:	bf14      	ite	ne
   86876:	2004      	movne	r0, #4
   86878:	2006      	moveq	r0, #6
   8687a:	4c13      	ldr	r4, [pc, #76]	; (868c8 <udi_cdc_rx_start+0x104>)
   8687c:	eb02 2245 	add.w	r2, r2, r5, lsl #9
   86880:	47a0      	blx	r4
}
   86882:	b003      	add	sp, #12
   86884:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cpu_irq_is_enabled_flags(flags))
   86888:	b938      	cbnz	r0, 8689a <udi_cdc_rx_start+0xd6>
		cpu_irq_enable();
   8688a:	2201      	movs	r2, #1
   8688c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   8688e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   86892:	b662      	cpsie	i
   86894:	b003      	add	sp, #12
   86896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return false;
   8689a:	2000      	movs	r0, #0
}
   8689c:	b003      	add	sp, #12
   8689e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		UDI_CDC_RX_NOTIFY(port);
   868a2:	4620      	mov	r0, r4
   868a4:	4b09      	ldr	r3, [pc, #36]	; (868cc <udi_cdc_rx_start+0x108>)
   868a6:	4798      	blx	r3
   868a8:	e7db      	b.n	86862 <udi_cdc_rx_start+0x9e>
   868aa:	bf00      	nop
   868ac:	20070ca0 	.word	0x20070ca0
   868b0:	20072be0 	.word	0x20072be0
   868b4:	20072be8 	.word	0x20072be8
   868b8:	20072bd8 	.word	0x20072bd8
   868bc:	20072be4 	.word	0x20072be4
   868c0:	00086971 	.word	0x00086971
   868c4:	200723d8 	.word	0x200723d8
   868c8:	000854b1 	.word	0x000854b1
   868cc:	0008275d 	.word	0x0008275d

000868d0 <udi_cdc_data_enable>:
{
   868d0:	b570      	push	{r4, r5, r6, lr}
	if (udi_cdc_nb_data_enabled > UDI_CDC_PORT_NB) {
   868d2:	4e1a      	ldr	r6, [pc, #104]	; (8693c <udi_cdc_data_enable+0x6c>)
	udi_cdc_tx_trans_ongoing[port] = false;
   868d4:	2500      	movs	r5, #0
	if (udi_cdc_nb_data_enabled > UDI_CDC_PORT_NB) {
   868d6:	7833      	ldrb	r3, [r6, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   868d8:	4919      	ldr	r1, [pc, #100]	; (86940 <udi_cdc_data_enable+0x70>)
	if (udi_cdc_nb_data_enabled > UDI_CDC_PORT_NB) {
   868da:	2b02      	cmp	r3, #2
		udi_cdc_nb_data_enabled = 0;
   868dc:	bf84      	itt	hi
   868de:	2300      	movhi	r3, #0
   868e0:	7033      	strbhi	r3, [r6, #0]
	port = udi_cdc_nb_data_enabled;
   868e2:	7834      	ldrb	r4, [r6, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   868e4:	4b17      	ldr	r3, [pc, #92]	; (86944 <udi_cdc_data_enable+0x74>)
	udi_cdc_tx_buf_nb[port][0] = 0;
   868e6:	4818      	ldr	r0, [pc, #96]	; (86948 <udi_cdc_data_enable+0x78>)
	port = udi_cdc_nb_data_enabled;
   868e8:	b2e4      	uxtb	r4, r4
	udi_cdc_tx_buf_nb[port][0] = 0;
   868ea:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
	udi_cdc_tx_buf_sel[port] = 0;
   868ee:	4a17      	ldr	r2, [pc, #92]	; (8694c <udi_cdc_data_enable+0x7c>)
	udi_cdc_tx_trans_ongoing[port] = false;
   868f0:	550d      	strb	r5, [r1, r4]
	udi_cdc_tx_both_buf_to_send[port] = false;
   868f2:	551d      	strb	r5, [r3, r4]
	udi_cdc_tx_sof_num[port] = 0;
   868f4:	4b16      	ldr	r3, [pc, #88]	; (86950 <udi_cdc_data_enable+0x80>)
	udi_cdc_tx_send(port);
   868f6:	4620      	mov	r0, r4
	udi_cdc_tx_buf_sel[port] = 0;
   868f8:	5515      	strb	r5, [r2, r4]
	udi_cdc_tx_sof_num[port] = 0;
   868fa:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
	udi_cdc_tx_send(port);
   868fe:	4b15      	ldr	r3, [pc, #84]	; (86954 <udi_cdc_data_enable+0x84>)
   86900:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   86902:	4a15      	ldr	r2, [pc, #84]	; (86958 <udi_cdc_data_enable+0x88>)
	udi_cdc_rx_buf_nb[port][0] = 0;
   86904:	4b15      	ldr	r3, [pc, #84]	; (8695c <udi_cdc_data_enable+0x8c>)
	udi_cdc_rx_trans_ongoing[port] = false;
   86906:	5515      	strb	r5, [r2, r4]
	udi_cdc_rx_buf_sel[port] = 0;
   86908:	4a15      	ldr	r2, [pc, #84]	; (86960 <udi_cdc_data_enable+0x90>)
	if (!udi_cdc_rx_start(port)) {
   8690a:	4620      	mov	r0, r4
	udi_cdc_rx_buf_sel[port] = 0;
   8690c:	5515      	strb	r5, [r2, r4]
	udi_cdc_rx_buf_nb[port][0] = 0;
   8690e:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
	udi_cdc_rx_buf_nb[port][1] = 0;
   86912:	eb03 0284 	add.w	r2, r3, r4, lsl #2
	udi_cdc_rx_pos[port] = 0;
   86916:	4b13      	ldr	r3, [pc, #76]	; (86964 <udi_cdc_data_enable+0x94>)
	udi_cdc_rx_buf_nb[port][1] = 0;
   86918:	8055      	strh	r5, [r2, #2]
	udi_cdc_rx_pos[port] = 0;
   8691a:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
	if (!udi_cdc_rx_start(port)) {
   8691e:	4b12      	ldr	r3, [pc, #72]	; (86968 <udi_cdc_data_enable+0x98>)
   86920:	4798      	blx	r3
   86922:	b130      	cbz	r0, 86932 <udi_cdc_data_enable+0x62>
	udi_cdc_nb_data_enabled++;
   86924:	7833      	ldrb	r3, [r6, #0]
   86926:	3301      	adds	r3, #1
   86928:	b2db      	uxtb	r3, r3
   8692a:	7033      	strb	r3, [r6, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   8692c:	7833      	ldrb	r3, [r6, #0]
   8692e:	2b02      	cmp	r3, #2
   86930:	d000      	beq.n	86934 <udi_cdc_data_enable+0x64>
}
   86932:	bd70      	pop	{r4, r5, r6, pc}
		udi_cdc_data_running = true;
   86934:	2201      	movs	r2, #1
   86936:	4b0d      	ldr	r3, [pc, #52]	; (8696c <udi_cdc_data_enable+0x9c>)
   86938:	701a      	strb	r2, [r3, #0]
}
   8693a:	bd70      	pop	{r4, r5, r6, pc}
   8693c:	200723d7 	.word	0x200723d7
   86940:	20073404 	.word	0x20073404
   86944:	20072bf0 	.word	0x20072bf0
   86948:	200733f4 	.word	0x200733f4
   8694c:	200733fc 	.word	0x200733fc
   86950:	20073400 	.word	0x20073400
   86954:	000865ed 	.word	0x000865ed
   86958:	20072be8 	.word	0x20072be8
   8695c:	20072bd8 	.word	0x20072bd8
   86960:	20072be0 	.word	0x20072be0
   86964:	20072be4 	.word	0x20072be4
   86968:	000867c5 	.word	0x000867c5
   8696c:	200723c4 	.word	0x200723c4

00086970 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   86970:	bb50      	cbnz	r0, 869c8 <udi_cdc_data_received+0x58>
{
   86972:	b510      	push	{r4, lr}
   86974:	4686      	mov	lr, r0
	switch (ep) {
   86976:	f1a2 0006 	sub.w	r0, r2, #6
   8697a:	fab0 f080 	clz	r0, r0
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   8697e:	4b13      	ldr	r3, [pc, #76]	; (869cc <udi_cdc_data_received+0x5c>)
	switch (ep) {
   86980:	0940      	lsrs	r0, r0, #5
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   86982:	5c1b      	ldrb	r3, [r3, r0]
{
   86984:	b082      	sub	sp, #8
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   86986:	fab3 f383 	clz	r3, r3
   8698a:	095b      	lsrs	r3, r3, #5
	if (!n) {
   8698c:	b169      	cbz	r1, 869aa <udi_cdc_data_received+0x3a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   8698e:	4a10      	ldr	r2, [pc, #64]	; (869d0 <udi_cdc_data_received+0x60>)
   86990:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   86994:	b289      	uxth	r1, r1
   86996:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   8699a:	4a0e      	ldr	r2, [pc, #56]	; (869d4 <udi_cdc_data_received+0x64>)
	udi_cdc_rx_start(port);
   8699c:	4b0e      	ldr	r3, [pc, #56]	; (869d8 <udi_cdc_data_received+0x68>)
	udi_cdc_rx_trans_ongoing[port] = false;
   8699e:	f802 e000 	strb.w	lr, [r2, r0]
}
   869a2:	b002      	add	sp, #8
   869a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	udi_cdc_rx_start(port);
   869a8:	4718      	bx	r3
				udi_cdc_rx_buf[port][buf_sel_trans],
   869aa:	4c0c      	ldr	r4, [pc, #48]	; (869dc <udi_cdc_data_received+0x6c>)
		udd_ep_run( ep,
   869ac:	490c      	ldr	r1, [pc, #48]	; (869e0 <udi_cdc_data_received+0x70>)
				udi_cdc_rx_buf[port][buf_sel_trans],
   869ae:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
		udd_ep_run( ep,
   869b2:	9100      	str	r1, [sp, #0]
   869b4:	4610      	mov	r0, r2
   869b6:	f44f 7300 	mov.w	r3, #512	; 0x200
   869ba:	eb04 224c 	add.w	r2, r4, ip, lsl #9
   869be:	2101      	movs	r1, #1
   869c0:	4c08      	ldr	r4, [pc, #32]	; (869e4 <udi_cdc_data_received+0x74>)
   869c2:	47a0      	blx	r4
}
   869c4:	b002      	add	sp, #8
   869c6:	bd10      	pop	{r4, pc}
   869c8:	4770      	bx	lr
   869ca:	bf00      	nop
   869cc:	20072be0 	.word	0x20072be0
   869d0:	20072bd8 	.word	0x20072bd8
   869d4:	20072be8 	.word	0x20072be8
   869d8:	000867c5 	.word	0x000867c5
   869dc:	200723d8 	.word	0x200723d8
   869e0:	00086971 	.word	0x00086971
   869e4:	000854b1 	.word	0x000854b1

000869e8 <udi_cdc_multi_get_nb_received_data>:
{
   869e8:	b430      	push	{r4, r5}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   869ea:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   869ee:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   869f0:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   869f4:	f04f 0c00 	mov.w	ip, #0
   869f8:	490b      	ldr	r1, [pc, #44]	; (86a28 <udi_cdc_multi_get_nb_received_data+0x40>)
	pos = udi_cdc_rx_pos[port];
   869fa:	4b0c      	ldr	r3, [pc, #48]	; (86a2c <udi_cdc_multi_get_nb_received_data+0x44>)
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   869fc:	4a0c      	ldr	r2, [pc, #48]	; (86a30 <udi_cdc_multi_get_nb_received_data+0x48>)
   869fe:	f881 c000 	strb.w	ip, [r1]
	pos = udi_cdc_rx_pos[port];
   86a02:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   86a06:	5c12      	ldrb	r2, [r2, r0]
   86a08:	4d0a      	ldr	r5, [pc, #40]	; (86a34 <udi_cdc_multi_get_nb_received_data+0x4c>)
   86a0a:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   86a0e:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
	pos = udi_cdc_rx_pos[port];
   86a12:	b29b      	uxth	r3, r3
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   86a14:	b280      	uxth	r0, r0
   86a16:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
   86a18:	b924      	cbnz	r4, 86a24 <udi_cdc_multi_get_nb_received_data+0x3c>
		cpu_irq_enable();
   86a1a:	2301      	movs	r3, #1
   86a1c:	700b      	strb	r3, [r1, #0]
   86a1e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   86a22:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   86a24:	bc30      	pop	{r4, r5}
   86a26:	4770      	bx	lr
   86a28:	20070ca0 	.word	0x20070ca0
   86a2c:	20072be4 	.word	0x20072be4
   86a30:	20072be0 	.word	0x20072be0
   86a34:	20072bd8 	.word	0x20072bd8

00086a38 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   86a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86a3c:	ea4f 0840 	mov.w	r8, r0, lsl #1
   86a40:	46c2      	mov	sl, r8
   86a42:	4617      	mov	r7, r2
   86a44:	460b      	mov	r3, r1
   86a46:	4680      	mov	r8, r0
   86a48:	4e25      	ldr	r6, [pc, #148]	; (86ae0 <udi_cdc_multi_read_buf+0xa8>)
   86a4a:	4d26      	ldr	r5, [pc, #152]	; (86ae4 <udi_cdc_multi_read_buf+0xac>)
   86a4c:	f8df b098 	ldr.w	fp, [pc, #152]	; 86ae8 <udi_cdc_multi_read_buf+0xb0>
   86a50:	f8df 9098 	ldr.w	r9, [pc, #152]	; 86aec <udi_cdc_multi_read_buf+0xb4>
   86a54:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   86a56:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   86a5a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   86a5c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   86a60:	2200      	movs	r2, #0
   86a62:	7032      	strb	r2, [r6, #0]
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   86a64:	f835 0018 	ldrh.w	r0, [r5, r8, lsl #1]
	buf_sel = udi_cdc_rx_buf_sel[port];
   86a68:	f81b 1008 	ldrb.w	r1, [fp, r8]
	pos = udi_cdc_rx_pos[port];
   86a6c:	b280      	uxth	r0, r0
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   86a6e:	eb0a 0201 	add.w	r2, sl, r1
   86a72:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
	buf_sel = udi_cdc_rx_buf_sel[port];
   86a76:	b2c9      	uxtb	r1, r1
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   86a78:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   86a7a:	b924      	cbnz	r4, 86a86 <udi_cdc_multi_read_buf+0x4e>
		cpu_irq_enable();
   86a7c:	2401      	movs	r4, #1
   86a7e:	7034      	strb	r4, [r6, #0]
   86a80:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   86a84:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (again) {
   86a86:	4282      	cmp	r2, r0
		if (!udi_cdc_data_running) {
   86a88:	4c19      	ldr	r4, [pc, #100]	; (86af0 <udi_cdc_multi_read_buf+0xb8>)
	while (again) {
   86a8a:	d806      	bhi.n	86a9a <udi_cdc_multi_read_buf+0x62>
		if (!udi_cdc_data_running) {
   86a8c:	7822      	ldrb	r2, [r4, #0]
   86a8e:	2a00      	cmp	r2, #0
   86a90:	d1e1      	bne.n	86a56 <udi_cdc_multi_read_buf+0x1e>

	if (size) {
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   86a92:	4638      	mov	r0, r7
   86a94:	b003      	add	sp, #12
   86a96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   86a9a:	4451      	add	r1, sl
   86a9c:	f839 4011 	ldrh.w	r4, [r9, r1, lsl #1]
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   86aa0:	4a14      	ldr	r2, [pc, #80]	; (86af4 <udi_cdc_multi_read_buf+0xbc>)
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   86aa2:	b2a4      	uxth	r4, r4
   86aa4:	1a24      	subs	r4, r4, r0
	if (copy_nb>size) {
   86aa6:	42bc      	cmp	r4, r7
   86aa8:	bf28      	it	cs
   86aaa:	463c      	movcs	r4, r7
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   86aac:	eb00 2141 	add.w	r1, r0, r1, lsl #9
   86ab0:	4618      	mov	r0, r3
	ptr_buf += copy_nb;
   86ab2:	4423      	add	r3, r4
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   86ab4:	4411      	add	r1, r2
	ptr_buf += copy_nb;
   86ab6:	9301      	str	r3, [sp, #4]
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   86ab8:	4622      	mov	r2, r4
   86aba:	4b0f      	ldr	r3, [pc, #60]	; (86af8 <udi_cdc_multi_read_buf+0xc0>)
   86abc:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   86abe:	f835 2018 	ldrh.w	r2, [r5, r8, lsl #1]
	size -= copy_nb;
   86ac2:	1b3f      	subs	r7, r7, r4
	udi_cdc_rx_pos[port] += copy_nb;
   86ac4:	4414      	add	r4, r2
   86ac6:	b2a4      	uxth	r4, r4
	udi_cdc_rx_start(port);
   86ac8:	4b0c      	ldr	r3, [pc, #48]	; (86afc <udi_cdc_multi_read_buf+0xc4>)
   86aca:	4640      	mov	r0, r8
	udi_cdc_rx_pos[port] += copy_nb;
   86acc:	f825 4018 	strh.w	r4, [r5, r8, lsl #1]
	udi_cdc_rx_start(port);
   86ad0:	4798      	blx	r3
	if (size) {
   86ad2:	9b01      	ldr	r3, [sp, #4]
   86ad4:	2f00      	cmp	r7, #0
   86ad6:	d1be      	bne.n	86a56 <udi_cdc_multi_read_buf+0x1e>
}
   86ad8:	4638      	mov	r0, r7
   86ada:	b003      	add	sp, #12
   86adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86ae0:	20070ca0 	.word	0x20070ca0
   86ae4:	20072be4 	.word	0x20072be4
   86ae8:	20072be0 	.word	0x20072be0
   86aec:	20072bd8 	.word	0x20072bd8
   86af0:	200723c4 	.word	0x200723c4
   86af4:	200723d8 	.word	0x200723d8
   86af8:	00086d51 	.word	0x00086d51
   86afc:	000867c5 	.word	0x000867c5

00086b00 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   86b00:	4603      	mov	r3, r0
   86b02:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   86b04:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   86b08:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   86b0a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   86b0e:	2100      	movs	r1, #0
   86b10:	4d13      	ldr	r5, [pc, #76]	; (86b60 <udi_cdc_multi_is_tx_ready+0x60>)
	buf_sel = udi_cdc_tx_buf_sel[port];
   86b12:	4e14      	ldr	r6, [pc, #80]	; (86b64 <udi_cdc_multi_is_tx_ready+0x64>)
   86b14:	7029      	strb	r1, [r5, #0]
   86b16:	5cf2      	ldrb	r2, [r6, r3]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   86b18:	4813      	ldr	r0, [pc, #76]	; (86b68 <udi_cdc_multi_is_tx_ready+0x68>)
   86b1a:	eb02 0c43 	add.w	ip, r2, r3, lsl #1
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   86b1e:	f830 001c 	ldrh.w	r0, [r0, ip, lsl #1]
   86b22:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   86b26:	d008      	beq.n	86b3a <udi_cdc_multi_is_tx_ready+0x3a>
   86b28:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
   86b2a:	b924      	cbnz	r4, 86b36 <udi_cdc_multi_is_tx_ready+0x36>
		cpu_irq_enable();
   86b2c:	2301      	movs	r3, #1
   86b2e:	702b      	strb	r3, [r5, #0]
   86b30:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   86b34:	b662      	cpsie	i
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
}
   86b36:	bcf0      	pop	{r4, r5, r6, r7}
   86b38:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
   86b3a:	480c      	ldr	r0, [pc, #48]	; (86b6c <udi_cdc_multi_is_tx_ready+0x6c>)
   86b3c:	5cc7      	ldrb	r7, [r0, r3]
   86b3e:	f007 00ff 	and.w	r0, r7, #255	; 0xff
   86b42:	b95f      	cbnz	r7, 86b5c <udi_cdc_multi_is_tx_ready+0x5c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   86b44:	490a      	ldr	r1, [pc, #40]	; (86b70 <udi_cdc_multi_is_tx_ready+0x70>)
   86b46:	5ccf      	ldrb	r7, [r1, r3]
   86b48:	2f00      	cmp	r7, #0
   86b4a:	d1ee      	bne.n	86b2a <udi_cdc_multi_is_tx_ready+0x2a>
			udi_cdc_tx_both_buf_to_send[port] = true;
   86b4c:	b2d2      	uxtb	r2, r2
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   86b4e:	fab2 f282 	clz	r2, r2
			udi_cdc_tx_both_buf_to_send[port] = true;
   86b52:	2001      	movs	r0, #1
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   86b54:	0952      	lsrs	r2, r2, #5
			udi_cdc_tx_both_buf_to_send[port] = true;
   86b56:	54c8      	strb	r0, [r1, r3]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   86b58:	54f2      	strb	r2, [r6, r3]
			buf_sel_nb = 0;
   86b5a:	e7e6      	b.n	86b2a <udi_cdc_multi_is_tx_ready+0x2a>
   86b5c:	4608      	mov	r0, r1
   86b5e:	e7e4      	b.n	86b2a <udi_cdc_multi_is_tx_ready+0x2a>
   86b60:	20070ca0 	.word	0x20070ca0
   86b64:	200733fc 	.word	0x200733fc
   86b68:	200733f4 	.word	0x200733f4
   86b6c:	20073404 	.word	0x20073404
   86b70:	20072bf0 	.word	0x20072bf0

00086b74 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   86b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   86b78:	4b39      	ldr	r3, [pc, #228]	; (86c60 <udi_cdc_multi_putc+0xec>)
   86b7a:	ebc0 06c0 	rsb	r6, r0, r0, lsl #3
   86b7e:	4433      	add	r3, r6
   86b80:	799b      	ldrb	r3, [r3, #6]
   86b82:	f04f 0801 	mov.w	r8, #1
   86b86:	f1a3 0309 	sub.w	r3, r3, #9
   86b8a:	fab3 f383 	clz	r3, r3
	cpu_irq_disable();
   86b8e:	f04f 0e00 	mov.w	lr, #0
   86b92:	4a34      	ldr	r2, [pc, #208]	; (86c64 <udi_cdc_multi_putc+0xf0>)
   86b94:	4d34      	ldr	r5, [pc, #208]	; (86c68 <udi_cdc_multi_putc+0xf4>)
   86b96:	4c35      	ldr	r4, [pc, #212]	; (86c6c <udi_cdc_multi_putc+0xf8>)
		if ((!udi_cdc_tx_trans_ongoing[port])
   86b98:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 86c70 <udi_cdc_multi_putc+0xfc>
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   86b9c:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 86c74 <udi_cdc_multi_putc+0x100>
{
   86ba0:	b083      	sub	sp, #12
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   86ba2:	095b      	lsrs	r3, r3, #5
   86ba4:	fa00 fc08 	lsl.w	ip, r0, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   86ba8:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   86bac:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   86bae:	f3bf 8f5f 	dmb	sy
   86bb2:	f882 e000 	strb.w	lr, [r2]
	buf_sel = udi_cdc_tx_buf_sel[port];
   86bb6:	5c2e      	ldrb	r6, [r5, r0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   86bb8:	eb0c 0a06 	add.w	sl, ip, r6
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   86bbc:	f834 a01a 	ldrh.w	sl, [r4, sl, lsl #1]
	buf_sel = udi_cdc_tx_buf_sel[port];
   86bc0:	b2f6      	uxtb	r6, r6
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   86bc2:	f5ba 7f00 	cmp.w	sl, #512	; 0x200
   86bc6:	d024      	beq.n	86c12 <udi_cdc_multi_putc+0x9e>
	if (cpu_irq_is_enabled_flags(flags))
   86bc8:	b927      	cbnz	r7, 86bd4 <udi_cdc_multi_putc+0x60>
		cpu_irq_enable();
   86bca:	f882 8000 	strb.w	r8, [r2]
   86bce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   86bd2:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   86bd4:	f3ef 8610 	mrs	r6, PRIMASK
   86bd8:	9601      	str	r6, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   86bda:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   86bdc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   86be0:	f882 e000 	strb.w	lr, [r2]
	buf_sel = udi_cdc_tx_buf_sel[port];
   86be4:	5c2e      	ldrb	r6, [r5, r0]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   86be6:	4466      	add	r6, ip
   86be8:	f834 7016 	ldrh.w	r7, [r4, r6, lsl #1]
   86bec:	eb0b 2a46 	add.w	sl, fp, r6, lsl #9
   86bf0:	f80a 1007 	strb.w	r1, [sl, r7]
   86bf4:	3701      	adds	r7, #1
   86bf6:	f824 7016 	strh.w	r7, [r4, r6, lsl #1]
	if (cpu_irq_is_enabled_flags(flags))
   86bfa:	9e01      	ldr	r6, [sp, #4]
   86bfc:	b11e      	cbz	r6, 86c06 <udi_cdc_multi_putc+0x92>
	cpu_irq_restore(flags);

	if (b_databit_9) {
   86bfe:	b363      	cbz	r3, 86c5a <udi_cdc_multi_putc+0xe6>
		// Send MSB
		b_databit_9 = false;
   86c00:	2300      	movs	r3, #0
		value = value >> 8;
   86c02:	1209      	asrs	r1, r1, #8
		goto udi_cdc_putc_process_one_byte;
   86c04:	e7d0      	b.n	86ba8 <udi_cdc_multi_putc+0x34>
		cpu_irq_enable();
   86c06:	f882 8000 	strb.w	r8, [r2]
   86c0a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   86c0e:	b662      	cpsie	i
}
   86c10:	e7f5      	b.n	86bfe <udi_cdc_multi_putc+0x8a>
		if ((!udi_cdc_tx_trans_ongoing[port])
   86c12:	f819 a000 	ldrb.w	sl, [r9, r0]
   86c16:	f1ba 0f00 	cmp.w	sl, #0
   86c1a:	d106      	bne.n	86c2a <udi_cdc_multi_putc+0xb6>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   86c1c:	f8df a058 	ldr.w	sl, [pc, #88]	; 86c78 <udi_cdc_multi_putc+0x104>
   86c20:	f81a a000 	ldrb.w	sl, [sl, r0]
   86c24:	f1ba 0f00 	cmp.w	sl, #0
   86c28:	d006      	beq.n	86c38 <udi_cdc_multi_putc+0xc4>
	if (cpu_irq_is_enabled_flags(flags))
   86c2a:	b187      	cbz	r7, 86c4e <udi_cdc_multi_putc+0xda>
			return false;
   86c2c:	2000      	movs	r0, #0
		if (!udi_cdc_data_running) {
   86c2e:	4b13      	ldr	r3, [pc, #76]	; (86c7c <udi_cdc_multi_putc+0x108>)
   86c30:	781b      	ldrb	r3, [r3, #0]
	}
	return true;
}
   86c32:	b003      	add	sp, #12
   86c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   86c38:	fab6 f686 	clz	r6, r6
			udi_cdc_tx_both_buf_to_send[port] = true;
   86c3c:	f8df a038 	ldr.w	sl, [pc, #56]	; 86c78 <udi_cdc_multi_putc+0x104>
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   86c40:	0976      	lsrs	r6, r6, #5
			udi_cdc_tx_both_buf_to_send[port] = true;
   86c42:	f80a 8000 	strb.w	r8, [sl, r0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   86c46:	542e      	strb	r6, [r5, r0]
   86c48:	2f00      	cmp	r7, #0
   86c4a:	d0be      	beq.n	86bca <udi_cdc_multi_putc+0x56>
   86c4c:	e7c2      	b.n	86bd4 <udi_cdc_multi_putc+0x60>
		cpu_irq_enable();
   86c4e:	2301      	movs	r3, #1
   86c50:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   86c52:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   86c56:	b662      	cpsie	i
	return retval;
   86c58:	e7e8      	b.n	86c2c <udi_cdc_multi_putc+0xb8>
	return true;
   86c5a:	2001      	movs	r0, #1
   86c5c:	e7e9      	b.n	86c32 <udi_cdc_multi_putc+0xbe>
   86c5e:	bf00      	nop
   86c60:	200723c8 	.word	0x200723c8
   86c64:	20070ca0 	.word	0x20070ca0
   86c68:	200733fc 	.word	0x200733fc
   86c6c:	200733f4 	.word	0x200733f4
   86c70:	20073404 	.word	0x20073404
   86c74:	20072bf4 	.word	0x20072bf4
   86c78:	20072bf0 	.word	0x20072bf0
   86c7c:	200723c4 	.word	0x200723c4

00086c80 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   86c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   86c84:	b9a0      	cbnz	r0, 86cb0 <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
   86c86:	2a00      	cmp	r2, #0
   86c88:	4690      	mov	r8, r2
   86c8a:	dd0d      	ble.n	86ca8 <_read+0x28>
   86c8c:	460c      	mov	r4, r1
   86c8e:	4f0a      	ldr	r7, [pc, #40]	; (86cb8 <_read+0x38>)
   86c90:	4e0a      	ldr	r6, [pc, #40]	; (86cbc <_read+0x3c>)
   86c92:	188d      	adds	r5, r1, r2
		ptr_get(stdio_base, ptr);
   86c94:	4621      	mov	r1, r4
   86c96:	6838      	ldr	r0, [r7, #0]
   86c98:	6833      	ldr	r3, [r6, #0]
		ptr++;
   86c9a:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
   86c9c:	4798      	blx	r3
	for (; len > 0; --len) {
   86c9e:	42ac      	cmp	r4, r5
   86ca0:	d1f8      	bne.n	86c94 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   86ca2:	4640      	mov	r0, r8
   86ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int nChars = 0;
   86ca8:	4680      	mov	r8, r0
}
   86caa:	4640      	mov	r0, r8
   86cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   86cb0:	f04f 38ff 	mov.w	r8, #4294967295
   86cb4:	e7f5      	b.n	86ca2 <_read+0x22>
   86cb6:	bf00      	nop
   86cb8:	200722cc 	.word	0x200722cc
   86cbc:	2007341c 	.word	0x2007341c

00086cc0 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   86cc0:	b410      	push	{r4}

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   86cc2:	f04f 33ff 	mov.w	r3, #4294967295
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   86cc6:	2402      	movs	r4, #2
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   86cc8:	ea4f 1c81 	mov.w	ip, r1, lsl #6
   86ccc:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   86cd0:	f840 400c 	str.w	r4, [r0, ip]
	tc_channel->TC_IDR = 0xFFFFFFFF;
   86cd4:	628b      	str	r3, [r1, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   86cd6:	6a0b      	ldr	r3, [r1, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   86cd8:	604a      	str	r2, [r1, #4]
}
   86cda:	bc10      	pop	{r4}
   86cdc:	4770      	bx	lr
   86cde:	bf00      	nop

00086ce0 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   86ce0:	2305      	movs	r3, #5
   86ce2:	0189      	lsls	r1, r1, #6
   86ce4:	5043      	str	r3, [r0, r1]
}
   86ce6:	4770      	bx	lr

00086ce8 <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
   86ce8:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   86cec:	6142      	str	r2, [r0, #20]
}
   86cee:	4770      	bx	lr

00086cf0 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   86cf0:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   86cf4:	61c2      	str	r2, [r0, #28]
}
   86cf6:	4770      	bx	lr

00086cf8 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   86cf8:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   86cfc:	6242      	str	r2, [r0, #36]	; 0x24
}
   86cfe:	4770      	bx	lr

00086d00 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   86d00:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	return tc_channel->TC_SR;
   86d04:	6a00      	ldr	r0, [r0, #32]
}
   86d06:	4770      	bx	lr

00086d08 <__libc_init_array>:
   86d08:	b570      	push	{r4, r5, r6, lr}
   86d0a:	4e0d      	ldr	r6, [pc, #52]	; (86d40 <__libc_init_array+0x38>)
   86d0c:	4d0d      	ldr	r5, [pc, #52]	; (86d44 <__libc_init_array+0x3c>)
   86d0e:	1b76      	subs	r6, r6, r5
   86d10:	10b6      	asrs	r6, r6, #2
   86d12:	d006      	beq.n	86d22 <__libc_init_array+0x1a>
   86d14:	2400      	movs	r4, #0
   86d16:	f855 3b04 	ldr.w	r3, [r5], #4
   86d1a:	3401      	adds	r4, #1
   86d1c:	4798      	blx	r3
   86d1e:	42a6      	cmp	r6, r4
   86d20:	d1f9      	bne.n	86d16 <__libc_init_array+0xe>
   86d22:	4e09      	ldr	r6, [pc, #36]	; (86d48 <__libc_init_array+0x40>)
   86d24:	4d09      	ldr	r5, [pc, #36]	; (86d4c <__libc_init_array+0x44>)
   86d26:	f007 f8bf 	bl	8dea8 <_init>
   86d2a:	1b76      	subs	r6, r6, r5
   86d2c:	10b6      	asrs	r6, r6, #2
   86d2e:	d006      	beq.n	86d3e <__libc_init_array+0x36>
   86d30:	2400      	movs	r4, #0
   86d32:	f855 3b04 	ldr.w	r3, [r5], #4
   86d36:	3401      	adds	r4, #1
   86d38:	4798      	blx	r3
   86d3a:	42a6      	cmp	r6, r4
   86d3c:	d1f9      	bne.n	86d32 <__libc_init_array+0x2a>
   86d3e:	bd70      	pop	{r4, r5, r6, pc}
   86d40:	0008deb4 	.word	0x0008deb4
   86d44:	0008deb4 	.word	0x0008deb4
   86d48:	0008debc 	.word	0x0008debc
   86d4c:	0008deb4 	.word	0x0008deb4

00086d50 <memcpy>:
   86d50:	4684      	mov	ip, r0
   86d52:	ea41 0300 	orr.w	r3, r1, r0
   86d56:	f013 0303 	ands.w	r3, r3, #3
   86d5a:	d149      	bne.n	86df0 <memcpy+0xa0>
   86d5c:	3a40      	subs	r2, #64	; 0x40
   86d5e:	d323      	bcc.n	86da8 <memcpy+0x58>
   86d60:	680b      	ldr	r3, [r1, #0]
   86d62:	6003      	str	r3, [r0, #0]
   86d64:	684b      	ldr	r3, [r1, #4]
   86d66:	6043      	str	r3, [r0, #4]
   86d68:	688b      	ldr	r3, [r1, #8]
   86d6a:	6083      	str	r3, [r0, #8]
   86d6c:	68cb      	ldr	r3, [r1, #12]
   86d6e:	60c3      	str	r3, [r0, #12]
   86d70:	690b      	ldr	r3, [r1, #16]
   86d72:	6103      	str	r3, [r0, #16]
   86d74:	694b      	ldr	r3, [r1, #20]
   86d76:	6143      	str	r3, [r0, #20]
   86d78:	698b      	ldr	r3, [r1, #24]
   86d7a:	6183      	str	r3, [r0, #24]
   86d7c:	69cb      	ldr	r3, [r1, #28]
   86d7e:	61c3      	str	r3, [r0, #28]
   86d80:	6a0b      	ldr	r3, [r1, #32]
   86d82:	6203      	str	r3, [r0, #32]
   86d84:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   86d86:	6243      	str	r3, [r0, #36]	; 0x24
   86d88:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   86d8a:	6283      	str	r3, [r0, #40]	; 0x28
   86d8c:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   86d8e:	62c3      	str	r3, [r0, #44]	; 0x2c
   86d90:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   86d92:	6303      	str	r3, [r0, #48]	; 0x30
   86d94:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   86d96:	6343      	str	r3, [r0, #52]	; 0x34
   86d98:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   86d9a:	6383      	str	r3, [r0, #56]	; 0x38
   86d9c:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   86d9e:	63c3      	str	r3, [r0, #60]	; 0x3c
   86da0:	3040      	adds	r0, #64	; 0x40
   86da2:	3140      	adds	r1, #64	; 0x40
   86da4:	3a40      	subs	r2, #64	; 0x40
   86da6:	d2db      	bcs.n	86d60 <memcpy+0x10>
   86da8:	3230      	adds	r2, #48	; 0x30
   86daa:	d30b      	bcc.n	86dc4 <memcpy+0x74>
   86dac:	680b      	ldr	r3, [r1, #0]
   86dae:	6003      	str	r3, [r0, #0]
   86db0:	684b      	ldr	r3, [r1, #4]
   86db2:	6043      	str	r3, [r0, #4]
   86db4:	688b      	ldr	r3, [r1, #8]
   86db6:	6083      	str	r3, [r0, #8]
   86db8:	68cb      	ldr	r3, [r1, #12]
   86dba:	60c3      	str	r3, [r0, #12]
   86dbc:	3010      	adds	r0, #16
   86dbe:	3110      	adds	r1, #16
   86dc0:	3a10      	subs	r2, #16
   86dc2:	d2f3      	bcs.n	86dac <memcpy+0x5c>
   86dc4:	320c      	adds	r2, #12
   86dc6:	d305      	bcc.n	86dd4 <memcpy+0x84>
   86dc8:	f851 3b04 	ldr.w	r3, [r1], #4
   86dcc:	f840 3b04 	str.w	r3, [r0], #4
   86dd0:	3a04      	subs	r2, #4
   86dd2:	d2f9      	bcs.n	86dc8 <memcpy+0x78>
   86dd4:	3204      	adds	r2, #4
   86dd6:	d008      	beq.n	86dea <memcpy+0x9a>
   86dd8:	07d2      	lsls	r2, r2, #31
   86dda:	bf1c      	itt	ne
   86ddc:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86de0:	f800 3b01 	strbne.w	r3, [r0], #1
   86de4:	d301      	bcc.n	86dea <memcpy+0x9a>
   86de6:	880b      	ldrh	r3, [r1, #0]
   86de8:	8003      	strh	r3, [r0, #0]
   86dea:	4660      	mov	r0, ip
   86dec:	4770      	bx	lr
   86dee:	bf00      	nop
   86df0:	2a08      	cmp	r2, #8
   86df2:	d313      	bcc.n	86e1c <memcpy+0xcc>
   86df4:	078b      	lsls	r3, r1, #30
   86df6:	d0b1      	beq.n	86d5c <memcpy+0xc>
   86df8:	f010 0303 	ands.w	r3, r0, #3
   86dfc:	d0ae      	beq.n	86d5c <memcpy+0xc>
   86dfe:	f1c3 0304 	rsb	r3, r3, #4
   86e02:	1ad2      	subs	r2, r2, r3
   86e04:	07db      	lsls	r3, r3, #31
   86e06:	bf1c      	itt	ne
   86e08:	f811 3b01 	ldrbne.w	r3, [r1], #1
   86e0c:	f800 3b01 	strbne.w	r3, [r0], #1
   86e10:	d3a4      	bcc.n	86d5c <memcpy+0xc>
   86e12:	f831 3b02 	ldrh.w	r3, [r1], #2
   86e16:	f820 3b02 	strh.w	r3, [r0], #2
   86e1a:	e79f      	b.n	86d5c <memcpy+0xc>
   86e1c:	3a04      	subs	r2, #4
   86e1e:	d3d9      	bcc.n	86dd4 <memcpy+0x84>
   86e20:	3a01      	subs	r2, #1
   86e22:	f811 3b01 	ldrb.w	r3, [r1], #1
   86e26:	f800 3b01 	strb.w	r3, [r0], #1
   86e2a:	d2f9      	bcs.n	86e20 <memcpy+0xd0>
   86e2c:	780b      	ldrb	r3, [r1, #0]
   86e2e:	7003      	strb	r3, [r0, #0]
   86e30:	784b      	ldrb	r3, [r1, #1]
   86e32:	7043      	strb	r3, [r0, #1]
   86e34:	788b      	ldrb	r3, [r1, #2]
   86e36:	7083      	strb	r3, [r0, #2]
   86e38:	4660      	mov	r0, ip
   86e3a:	4770      	bx	lr

00086e3c <memset>:
   86e3c:	0783      	lsls	r3, r0, #30
   86e3e:	b530      	push	{r4, r5, lr}
   86e40:	d048      	beq.n	86ed4 <memset+0x98>
   86e42:	1e54      	subs	r4, r2, #1
   86e44:	2a00      	cmp	r2, #0
   86e46:	d03f      	beq.n	86ec8 <memset+0x8c>
   86e48:	4603      	mov	r3, r0
   86e4a:	b2ca      	uxtb	r2, r1
   86e4c:	e001      	b.n	86e52 <memset+0x16>
   86e4e:	3c01      	subs	r4, #1
   86e50:	d33a      	bcc.n	86ec8 <memset+0x8c>
   86e52:	f803 2b01 	strb.w	r2, [r3], #1
   86e56:	079d      	lsls	r5, r3, #30
   86e58:	d1f9      	bne.n	86e4e <memset+0x12>
   86e5a:	2c03      	cmp	r4, #3
   86e5c:	d92d      	bls.n	86eba <memset+0x7e>
   86e5e:	b2cd      	uxtb	r5, r1
   86e60:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   86e64:	2c0f      	cmp	r4, #15
   86e66:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   86e6a:	d936      	bls.n	86eda <memset+0x9e>
   86e6c:	f1a4 0210 	sub.w	r2, r4, #16
   86e70:	f022 0c0f 	bic.w	ip, r2, #15
   86e74:	f103 0e20 	add.w	lr, r3, #32
   86e78:	44e6      	add	lr, ip
   86e7a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   86e7e:	f103 0210 	add.w	r2, r3, #16
   86e82:	e942 5504 	strd	r5, r5, [r2, #-16]
   86e86:	e942 5502 	strd	r5, r5, [r2, #-8]
   86e8a:	3210      	adds	r2, #16
   86e8c:	4572      	cmp	r2, lr
   86e8e:	d1f8      	bne.n	86e82 <memset+0x46>
   86e90:	f10c 0201 	add.w	r2, ip, #1
   86e94:	f014 0f0c 	tst.w	r4, #12
   86e98:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   86e9c:	f004 0c0f 	and.w	ip, r4, #15
   86ea0:	d013      	beq.n	86eca <memset+0x8e>
   86ea2:	f1ac 0304 	sub.w	r3, ip, #4
   86ea6:	f023 0303 	bic.w	r3, r3, #3
   86eaa:	3304      	adds	r3, #4
   86eac:	4413      	add	r3, r2
   86eae:	f842 5b04 	str.w	r5, [r2], #4
   86eb2:	4293      	cmp	r3, r2
   86eb4:	d1fb      	bne.n	86eae <memset+0x72>
   86eb6:	f00c 0403 	and.w	r4, ip, #3
   86eba:	b12c      	cbz	r4, 86ec8 <memset+0x8c>
   86ebc:	b2ca      	uxtb	r2, r1
   86ebe:	441c      	add	r4, r3
   86ec0:	f803 2b01 	strb.w	r2, [r3], #1
   86ec4:	429c      	cmp	r4, r3
   86ec6:	d1fb      	bne.n	86ec0 <memset+0x84>
   86ec8:	bd30      	pop	{r4, r5, pc}
   86eca:	4664      	mov	r4, ip
   86ecc:	4613      	mov	r3, r2
   86ece:	2c00      	cmp	r4, #0
   86ed0:	d1f4      	bne.n	86ebc <memset+0x80>
   86ed2:	e7f9      	b.n	86ec8 <memset+0x8c>
   86ed4:	4603      	mov	r3, r0
   86ed6:	4614      	mov	r4, r2
   86ed8:	e7bf      	b.n	86e5a <memset+0x1e>
   86eda:	461a      	mov	r2, r3
   86edc:	46a4      	mov	ip, r4
   86ede:	e7e0      	b.n	86ea2 <memset+0x66>

00086ee0 <sprintf>:
   86ee0:	b40e      	push	{r1, r2, r3}
   86ee2:	b530      	push	{r4, r5, lr}
   86ee4:	4604      	mov	r4, r0
   86ee6:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   86eea:	b09c      	sub	sp, #112	; 0x70
   86eec:	4a0b      	ldr	r2, [pc, #44]	; (86f1c <sprintf+0x3c>)
   86eee:	ab1f      	add	r3, sp, #124	; 0x7c
   86ef0:	490b      	ldr	r1, [pc, #44]	; (86f20 <sprintf+0x40>)
   86ef2:	9205      	str	r2, [sp, #20]
   86ef4:	f853 2b04 	ldr.w	r2, [r3], #4
   86ef8:	6808      	ldr	r0, [r1, #0]
   86efa:	a902      	add	r1, sp, #8
   86efc:	e9cd 3401 	strd	r3, r4, [sp, #4]
   86f00:	9507      	str	r5, [sp, #28]
   86f02:	9504      	str	r5, [sp, #16]
   86f04:	9406      	str	r4, [sp, #24]
   86f06:	f000 f86f 	bl	86fe8 <_svfprintf_r>
   86f0a:	2200      	movs	r2, #0
   86f0c:	9b02      	ldr	r3, [sp, #8]
   86f0e:	701a      	strb	r2, [r3, #0]
   86f10:	b01c      	add	sp, #112	; 0x70
   86f12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   86f16:	b003      	add	sp, #12
   86f18:	4770      	bx	lr
   86f1a:	bf00      	nop
   86f1c:	ffff0208 	.word	0xffff0208
   86f20:	20070ccc 	.word	0x20070ccc

00086f24 <strlen>:
   86f24:	f020 0103 	bic.w	r1, r0, #3
   86f28:	f010 0003 	ands.w	r0, r0, #3
   86f2c:	f1c0 0000 	rsb	r0, r0, #0
   86f30:	f851 3b04 	ldr.w	r3, [r1], #4
   86f34:	f100 0c04 	add.w	ip, r0, #4
   86f38:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   86f3c:	f06f 0200 	mvn.w	r2, #0
   86f40:	bf1c      	itt	ne
   86f42:	fa22 f20c 	lsrne.w	r2, r2, ip
   86f46:	4313      	orrne	r3, r2
   86f48:	f04f 0c01 	mov.w	ip, #1
   86f4c:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   86f50:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   86f54:	eba3 020c 	sub.w	r2, r3, ip
   86f58:	ea22 0203 	bic.w	r2, r2, r3
   86f5c:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   86f60:	bf04      	itt	eq
   86f62:	f851 3b04 	ldreq.w	r3, [r1], #4
   86f66:	3004      	addeq	r0, #4
   86f68:	d0f4      	beq.n	86f54 <strlen+0x30>
   86f6a:	f1c2 0100 	rsb	r1, r2, #0
   86f6e:	ea02 0201 	and.w	r2, r2, r1
   86f72:	fab2 f282 	clz	r2, r2
   86f76:	f1c2 021f 	rsb	r2, r2, #31
   86f7a:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   86f7e:	4770      	bx	lr

00086f80 <strncpy>:
   86f80:	b530      	push	{r4, r5, lr}
   86f82:	ea40 0401 	orr.w	r4, r0, r1
   86f86:	07a3      	lsls	r3, r4, #30
   86f88:	d122      	bne.n	86fd0 <strncpy+0x50>
   86f8a:	2a03      	cmp	r2, #3
   86f8c:	d920      	bls.n	86fd0 <strncpy+0x50>
   86f8e:	460b      	mov	r3, r1
   86f90:	4684      	mov	ip, r0
   86f92:	4619      	mov	r1, r3
   86f94:	f853 5b04 	ldr.w	r5, [r3], #4
   86f98:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   86f9c:	ea24 0405 	bic.w	r4, r4, r5
   86fa0:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   86fa4:	d115      	bne.n	86fd2 <strncpy+0x52>
   86fa6:	3a04      	subs	r2, #4
   86fa8:	2a03      	cmp	r2, #3
   86faa:	4619      	mov	r1, r3
   86fac:	f84c 5b04 	str.w	r5, [ip], #4
   86fb0:	d8ef      	bhi.n	86f92 <strncpy+0x12>
   86fb2:	f101 3eff 	add.w	lr, r1, #4294967295
   86fb6:	b152      	cbz	r2, 86fce <strncpy+0x4e>
   86fb8:	4663      	mov	r3, ip
   86fba:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   86fbe:	1e54      	subs	r4, r2, #1
   86fc0:	f803 1b01 	strb.w	r1, [r3], #1
   86fc4:	b141      	cbz	r1, 86fd8 <strncpy+0x58>
   86fc6:	4622      	mov	r2, r4
   86fc8:	469c      	mov	ip, r3
   86fca:	2a00      	cmp	r2, #0
   86fcc:	d1f4      	bne.n	86fb8 <strncpy+0x38>
   86fce:	bd30      	pop	{r4, r5, pc}
   86fd0:	4684      	mov	ip, r0
   86fd2:	f101 3eff 	add.w	lr, r1, #4294967295
   86fd6:	e7ee      	b.n	86fb6 <strncpy+0x36>
   86fd8:	4462      	add	r2, ip
   86fda:	2c00      	cmp	r4, #0
   86fdc:	d0f7      	beq.n	86fce <strncpy+0x4e>
   86fde:	f803 1b01 	strb.w	r1, [r3], #1
   86fe2:	4293      	cmp	r3, r2
   86fe4:	d1fb      	bne.n	86fde <strncpy+0x5e>
   86fe6:	bd30      	pop	{r4, r5, pc}

00086fe8 <_svfprintf_r>:
   86fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86fec:	b0d5      	sub	sp, #340	; 0x154
   86fee:	460c      	mov	r4, r1
   86ff0:	910c      	str	r1, [sp, #48]	; 0x30
   86ff2:	4691      	mov	r9, r2
   86ff4:	930e      	str	r3, [sp, #56]	; 0x38
   86ff6:	900a      	str	r0, [sp, #40]	; 0x28
   86ff8:	f002 feba 	bl	89d70 <_localeconv_r>
   86ffc:	6803      	ldr	r3, [r0, #0]
   86ffe:	4618      	mov	r0, r3
   87000:	9317      	str	r3, [sp, #92]	; 0x5c
   87002:	f7ff ff8f 	bl	86f24 <strlen>
   87006:	89a3      	ldrh	r3, [r4, #12]
   87008:	9016      	str	r0, [sp, #88]	; 0x58
   8700a:	0619      	lsls	r1, r3, #24
   8700c:	d503      	bpl.n	87016 <_svfprintf_r+0x2e>
   8700e:	6923      	ldr	r3, [r4, #16]
   87010:	2b00      	cmp	r3, #0
   87012:	f000 878f 	beq.w	87f34 <_svfprintf_r+0xf4c>
   87016:	2400      	movs	r4, #0
   87018:	ab2b      	add	r3, sp, #172	; 0xac
   8701a:	4622      	mov	r2, r4
   8701c:	4698      	mov	r8, r3
   8701e:	464d      	mov	r5, r9
   87020:	e9cd 4429 	strd	r4, r4, [sp, #164]	; 0xa4
   87024:	9328      	str	r3, [sp, #160]	; 0xa0
   87026:	9412      	str	r4, [sp, #72]	; 0x48
   87028:	2300      	movs	r3, #0
   8702a:	2400      	movs	r4, #0
   8702c:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   87030:	782b      	ldrb	r3, [r5, #0]
   87032:	e9cd 2219 	strd	r2, r2, [sp, #100]	; 0x64
   87036:	e9cd 221b 	strd	r2, r2, [sp, #108]	; 0x6c
   8703a:	9218      	str	r2, [sp, #96]	; 0x60
   8703c:	9208      	str	r2, [sp, #32]
   8703e:	2b00      	cmp	r3, #0
   87040:	f000 81ce 	beq.w	873e0 <_svfprintf_r+0x3f8>
   87044:	46aa      	mov	sl, r5
   87046:	e004      	b.n	87052 <_svfprintf_r+0x6a>
   87048:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
   8704c:	2b00      	cmp	r3, #0
   8704e:	f000 8109 	beq.w	87264 <_svfprintf_r+0x27c>
   87052:	2b25      	cmp	r3, #37	; 0x25
   87054:	d1f8      	bne.n	87048 <_svfprintf_r+0x60>
   87056:	ebba 0605 	subs.w	r6, sl, r5
   8705a:	f040 8107 	bne.w	8726c <_svfprintf_r+0x284>
   8705e:	f89a 3000 	ldrb.w	r3, [sl]
   87062:	2b00      	cmp	r3, #0
   87064:	f000 81bc 	beq.w	873e0 <_svfprintf_r+0x3f8>
   87068:	2300      	movs	r3, #0
   8706a:	f04f 32ff 	mov.w	r2, #4294967295
   8706e:	f04f 092b 	mov.w	r9, #43	; 0x2b
   87072:	2420      	movs	r4, #32
   87074:	461f      	mov	r7, r3
   87076:	f89a 6001 	ldrb.w	r6, [sl, #1]
   8707a:	9207      	str	r2, [sp, #28]
   8707c:	f10a 0a01 	add.w	sl, sl, #1
   87080:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   87084:	9309      	str	r3, [sp, #36]	; 0x24
   87086:	f10a 0a01 	add.w	sl, sl, #1
   8708a:	f1a6 0320 	sub.w	r3, r6, #32
   8708e:	2b5a      	cmp	r3, #90	; 0x5a
   87090:	f200 8120 	bhi.w	872d4 <_svfprintf_r+0x2ec>
   87094:	e8df f013 	tbh	[pc, r3, lsl #1]
   87098:	011e02ca 	.word	0x011e02ca
   8709c:	02c5011e 	.word	0x02c5011e
   870a0:	011e011e 	.word	0x011e011e
   870a4:	02a3011e 	.word	0x02a3011e
   870a8:	011e011e 	.word	0x011e011e
   870ac:	02f3006a 	.word	0x02f3006a
   870b0:	0247011e 	.word	0x0247011e
   870b4:	011e02d9 	.word	0x011e02d9
   870b8:	005b02d4 	.word	0x005b02d4
   870bc:	005b005b 	.word	0x005b005b
   870c0:	005b005b 	.word	0x005b005b
   870c4:	005b005b 	.word	0x005b005b
   870c8:	005b005b 	.word	0x005b005b
   870cc:	011e011e 	.word	0x011e011e
   870d0:	011e011e 	.word	0x011e011e
   870d4:	011e011e 	.word	0x011e011e
   870d8:	01b0011e 	.word	0x01b0011e
   870dc:	020b011e 	.word	0x020b011e
   870e0:	01b0007a 	.word	0x01b0007a
   870e4:	01b001b0 	.word	0x01b001b0
   870e8:	011e011e 	.word	0x011e011e
   870ec:	011e011e 	.word	0x011e011e
   870f0:	011e029e 	.word	0x011e029e
   870f4:	00b6011e 	.word	0x00b6011e
   870f8:	011e011e 	.word	0x011e011e
   870fc:	0219011e 	.word	0x0219011e
   87100:	024c011e 	.word	0x024c011e
   87104:	011e011e 	.word	0x011e011e
   87108:	011e073f 	.word	0x011e073f
   8710c:	011e011e 	.word	0x011e011e
   87110:	011e011e 	.word	0x011e011e
   87114:	011e011e 	.word	0x011e011e
   87118:	01b0011e 	.word	0x01b0011e
   8711c:	020b011e 	.word	0x020b011e
   87120:	01b0007c 	.word	0x01b0007c
   87124:	01b001b0 	.word	0x01b001b0
   87128:	007c0291 	.word	0x007c0291
   8712c:	011e0075 	.word	0x011e0075
   87130:	011e0284 	.word	0x011e0284
   87134:	00b80270 	.word	0x00b80270
   87138:	0075025e 	.word	0x0075025e
   8713c:	0219011e 	.word	0x0219011e
   87140:	071c0072 	.word	0x071c0072
   87144:	011e011e 	.word	0x011e011e
   87148:	011e071f 	.word	0x011e071f
   8714c:	0072      	.short	0x0072
   8714e:	2200      	movs	r2, #0
   87150:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87154:	f81a 6b01 	ldrb.w	r6, [sl], #1
   87158:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8715c:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   87160:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87164:	2b09      	cmp	r3, #9
   87166:	d9f5      	bls.n	87154 <_svfprintf_r+0x16c>
   87168:	9209      	str	r2, [sp, #36]	; 0x24
   8716a:	e78e      	b.n	8708a <_svfprintf_r+0xa2>
   8716c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8716e:	f853 2b04 	ldr.w	r2, [r3], #4
   87172:	2a00      	cmp	r2, #0
   87174:	9209      	str	r2, [sp, #36]	; 0x24
   87176:	930e      	str	r3, [sp, #56]	; 0x38
   87178:	f2c0 81d2 	blt.w	87520 <_svfprintf_r+0x538>
   8717c:	f89a 6000 	ldrb.w	r6, [sl]
   87180:	e781      	b.n	87086 <_svfprintf_r+0x9e>
   87182:	f89a 6000 	ldrb.w	r6, [sl]
   87186:	f047 0720 	orr.w	r7, r7, #32
   8718a:	e77c      	b.n	87086 <_svfprintf_r+0x9e>
   8718c:	f047 0710 	orr.w	r7, r7, #16
   87190:	06ba      	lsls	r2, r7, #26
   87192:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87194:	f140 817d 	bpl.w	87492 <_svfprintf_r+0x4aa>
   87198:	3307      	adds	r3, #7
   8719a:	f023 0307 	bic.w	r3, r3, #7
   8719e:	461a      	mov	r2, r3
   871a0:	685b      	ldr	r3, [r3, #4]
   871a2:	f852 4b08 	ldr.w	r4, [r2], #8
   871a6:	4699      	mov	r9, r3
   871a8:	920e      	str	r2, [sp, #56]	; 0x38
   871aa:	2b00      	cmp	r3, #0
   871ac:	f2c0 857f 	blt.w	87cae <_svfprintf_r+0xcc6>
   871b0:	9b07      	ldr	r3, [sp, #28]
   871b2:	3301      	adds	r3, #1
   871b4:	f001 8039 	beq.w	8822a <_svfprintf_r+0x1242>
   871b8:	ea54 0309 	orrs.w	r3, r4, r9
   871bc:	f027 0b80 	bic.w	fp, r7, #128	; 0x80
   871c0:	f000 8505 	beq.w	87bce <_svfprintf_r+0xbe6>
   871c4:	2c0a      	cmp	r4, #10
   871c6:	f179 0300 	sbcs.w	r3, r9, #0
   871ca:	f080 8793 	bcs.w	880f4 <_svfprintf_r+0x110c>
   871ce:	2301      	movs	r3, #1
   871d0:	465f      	mov	r7, fp
   871d2:	3430      	adds	r4, #48	; 0x30
   871d4:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
   871d8:	930b      	str	r3, [sp, #44]	; 0x2c
   871da:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   871de:	9a07      	ldr	r2, [sp, #28]
   871e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   871e2:	2300      	movs	r3, #0
   871e4:	428a      	cmp	r2, r1
   871e6:	bfb8      	it	lt
   871e8:	460a      	movlt	r2, r1
   871ea:	9206      	str	r2, [sp, #24]
   871ec:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   871f0:	930d      	str	r3, [sp, #52]	; 0x34
   871f2:	930f      	str	r3, [sp, #60]	; 0x3c
   871f4:	9313      	str	r3, [sp, #76]	; 0x4c
   871f6:	9310      	str	r3, [sp, #64]	; 0x40
   871f8:	2a00      	cmp	r2, #0
   871fa:	d07c      	beq.n	872f6 <_svfprintf_r+0x30e>
   871fc:	9b06      	ldr	r3, [sp, #24]
   871fe:	3301      	adds	r3, #1
   87200:	9306      	str	r3, [sp, #24]
   87202:	e078      	b.n	872f6 <_svfprintf_r+0x30e>
   87204:	f047 0710 	orr.w	r7, r7, #16
   87208:	f017 0920 	ands.w	r9, r7, #32
   8720c:	f000 8132 	beq.w	87474 <_svfprintf_r+0x48c>
   87210:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87212:	3307      	adds	r3, #7
   87214:	f023 0307 	bic.w	r3, r3, #7
   87218:	f8d3 9004 	ldr.w	r9, [r3, #4]
   8721c:	f853 4b08 	ldr.w	r4, [r3], #8
   87220:	930e      	str	r3, [sp, #56]	; 0x38
   87222:	2300      	movs	r3, #0
   87224:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   87228:	2200      	movs	r2, #0
   8722a:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   8722e:	9a07      	ldr	r2, [sp, #28]
   87230:	1c51      	adds	r1, r2, #1
   87232:	f000 822a 	beq.w	8768a <_svfprintf_r+0x6a2>
   87236:	ea54 0109 	orrs.w	r1, r4, r9
   8723a:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
   8723e:	f040 8223 	bne.w	87688 <_svfprintf_r+0x6a0>
   87242:	2a00      	cmp	r2, #0
   87244:	f041 802b 	bne.w	8829e <_svfprintf_r+0x12b6>
   87248:	2b00      	cmp	r3, #0
   8724a:	f040 84c5 	bne.w	87bd8 <_svfprintf_r+0xbf0>
   8724e:	f01b 0301 	ands.w	r3, fp, #1
   87252:	930b      	str	r3, [sp, #44]	; 0x2c
   87254:	f000 8554 	beq.w	87d00 <_svfprintf_r+0xd18>
   87258:	2330      	movs	r3, #48	; 0x30
   8725a:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   8725e:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
   87262:	e7bc      	b.n	871de <_svfprintf_r+0x1f6>
   87264:	ebba 0605 	subs.w	r6, sl, r5
   87268:	f000 80ba 	beq.w	873e0 <_svfprintf_r+0x3f8>
   8726c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   8726e:	e9c8 5600 	strd	r5, r6, [r8]
   87272:	4433      	add	r3, r6
   87274:	932a      	str	r3, [sp, #168]	; 0xa8
   87276:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87278:	3301      	adds	r3, #1
   8727a:	2b07      	cmp	r3, #7
   8727c:	9329      	str	r3, [sp, #164]	; 0xa4
   8727e:	dc05      	bgt.n	8728c <_svfprintf_r+0x2a4>
   87280:	f108 0808 	add.w	r8, r8, #8
   87284:	9b08      	ldr	r3, [sp, #32]
   87286:	4433      	add	r3, r6
   87288:	9308      	str	r3, [sp, #32]
   8728a:	e6e8      	b.n	8705e <_svfprintf_r+0x76>
   8728c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8728e:	980a      	ldr	r0, [sp, #40]	; 0x28
   87290:	aa28      	add	r2, sp, #160	; 0xa0
   87292:	f003 fc67 	bl	8ab64 <__ssprint_r>
   87296:	b980      	cbnz	r0, 872ba <_svfprintf_r+0x2d2>
   87298:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8729c:	e7f2      	b.n	87284 <_svfprintf_r+0x29c>
   8729e:	990c      	ldr	r1, [sp, #48]	; 0x30
   872a0:	980a      	ldr	r0, [sp, #40]	; 0x28
   872a2:	aa28      	add	r2, sp, #160	; 0xa0
   872a4:	f003 fc5e 	bl	8ab64 <__ssprint_r>
   872a8:	2800      	cmp	r0, #0
   872aa:	f000 808a 	beq.w	873c2 <_svfprintf_r+0x3da>
   872ae:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   872b0:	b11b      	cbz	r3, 872ba <_svfprintf_r+0x2d2>
   872b2:	990d      	ldr	r1, [sp, #52]	; 0x34
   872b4:	980a      	ldr	r0, [sp, #40]	; 0x28
   872b6:	f002 fc5b 	bl	89b70 <_free_r>
   872ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   872bc:	899b      	ldrh	r3, [r3, #12]
   872be:	f013 0f40 	tst.w	r3, #64	; 0x40
   872c2:	9b08      	ldr	r3, [sp, #32]
   872c4:	bf18      	it	ne
   872c6:	f04f 33ff 	movne.w	r3, #4294967295
   872ca:	9308      	str	r3, [sp, #32]
   872cc:	9808      	ldr	r0, [sp, #32]
   872ce:	b055      	add	sp, #340	; 0x154
   872d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   872d4:	2e00      	cmp	r6, #0
   872d6:	f000 8083 	beq.w	873e0 <_svfprintf_r+0x3f8>
   872da:	2301      	movs	r3, #1
   872dc:	2200      	movs	r2, #0
   872de:	f88d 60ec 	strb.w	r6, [sp, #236]	; 0xec
   872e2:	9306      	str	r3, [sp, #24]
   872e4:	ad3b      	add	r5, sp, #236	; 0xec
   872e6:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   872ea:	930b      	str	r3, [sp, #44]	; 0x2c
   872ec:	920d      	str	r2, [sp, #52]	; 0x34
   872ee:	9207      	str	r2, [sp, #28]
   872f0:	920f      	str	r2, [sp, #60]	; 0x3c
   872f2:	9213      	str	r2, [sp, #76]	; 0x4c
   872f4:	9210      	str	r2, [sp, #64]	; 0x40
   872f6:	f017 0302 	ands.w	r3, r7, #2
   872fa:	d002      	beq.n	87302 <_svfprintf_r+0x31a>
   872fc:	9906      	ldr	r1, [sp, #24]
   872fe:	3102      	adds	r1, #2
   87300:	9106      	str	r1, [sp, #24]
   87302:	f017 0b84 	ands.w	fp, r7, #132	; 0x84
   87306:	d107      	bne.n	87318 <_svfprintf_r+0x330>
   87308:	9909      	ldr	r1, [sp, #36]	; 0x24
   8730a:	9806      	ldr	r0, [sp, #24]
   8730c:	eba1 0900 	sub.w	r9, r1, r0
   87310:	f1b9 0f00 	cmp.w	r9, #0
   87314:	f300 8336 	bgt.w	87984 <_svfprintf_r+0x99c>
   87318:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8731a:	b182      	cbz	r2, 8733e <_svfprintf_r+0x356>
   8731c:	2201      	movs	r2, #1
   8731e:	f8c8 2004 	str.w	r2, [r8, #4]
   87322:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   87324:	3401      	adds	r4, #1
   87326:	3201      	adds	r2, #1
   87328:	f10d 0183 	add.w	r1, sp, #131	; 0x83
   8732c:	2a07      	cmp	r2, #7
   8732e:	942a      	str	r4, [sp, #168]	; 0xa8
   87330:	9229      	str	r2, [sp, #164]	; 0xa4
   87332:	f8c8 1000 	str.w	r1, [r8]
   87336:	f300 8369 	bgt.w	87a0c <_svfprintf_r+0xa24>
   8733a:	f108 0808 	add.w	r8, r8, #8
   8733e:	b17b      	cbz	r3, 87360 <_svfprintf_r+0x378>
   87340:	2302      	movs	r3, #2
   87342:	f8c8 3004 	str.w	r3, [r8, #4]
   87346:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87348:	3402      	adds	r4, #2
   8734a:	3301      	adds	r3, #1
   8734c:	aa21      	add	r2, sp, #132	; 0x84
   8734e:	2b07      	cmp	r3, #7
   87350:	942a      	str	r4, [sp, #168]	; 0xa8
   87352:	9329      	str	r3, [sp, #164]	; 0xa4
   87354:	f8c8 2000 	str.w	r2, [r8]
   87358:	f300 836c 	bgt.w	87a34 <_svfprintf_r+0xa4c>
   8735c:	f108 0808 	add.w	r8, r8, #8
   87360:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
   87364:	f000 822e 	beq.w	877c4 <_svfprintf_r+0x7dc>
   87368:	9b07      	ldr	r3, [sp, #28]
   8736a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   8736c:	eba3 0b02 	sub.w	fp, r3, r2
   87370:	f1bb 0f00 	cmp.w	fp, #0
   87374:	f300 8271 	bgt.w	8785a <_svfprintf_r+0x872>
   87378:	05fb      	lsls	r3, r7, #23
   8737a:	f100 81c5 	bmi.w	87708 <_svfprintf_r+0x720>
   8737e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87380:	f8c8 5000 	str.w	r5, [r8]
   87384:	441c      	add	r4, r3
   87386:	f8c8 3004 	str.w	r3, [r8, #4]
   8738a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8738c:	942a      	str	r4, [sp, #168]	; 0xa8
   8738e:	3301      	adds	r3, #1
   87390:	2b07      	cmp	r3, #7
   87392:	9329      	str	r3, [sp, #164]	; 0xa4
   87394:	f300 82ea 	bgt.w	8796c <_svfprintf_r+0x984>
   87398:	f108 0808 	add.w	r8, r8, #8
   8739c:	077b      	lsls	r3, r7, #29
   8739e:	d505      	bpl.n	873ac <_svfprintf_r+0x3c4>
   873a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   873a2:	9a06      	ldr	r2, [sp, #24]
   873a4:	1a9d      	subs	r5, r3, r2
   873a6:	2d00      	cmp	r5, #0
   873a8:	f300 8350 	bgt.w	87a4c <_svfprintf_r+0xa64>
   873ac:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   873b0:	9906      	ldr	r1, [sp, #24]
   873b2:	428a      	cmp	r2, r1
   873b4:	bfac      	ite	ge
   873b6:	189b      	addge	r3, r3, r2
   873b8:	185b      	addlt	r3, r3, r1
   873ba:	9308      	str	r3, [sp, #32]
   873bc:	2c00      	cmp	r4, #0
   873be:	f47f af6e 	bne.w	8729e <_svfprintf_r+0x2b6>
   873c2:	2300      	movs	r3, #0
   873c4:	9329      	str	r3, [sp, #164]	; 0xa4
   873c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   873c8:	b11b      	cbz	r3, 873d2 <_svfprintf_r+0x3ea>
   873ca:	990d      	ldr	r1, [sp, #52]	; 0x34
   873cc:	980a      	ldr	r0, [sp, #40]	; 0x28
   873ce:	f002 fbcf 	bl	89b70 <_free_r>
   873d2:	4655      	mov	r5, sl
   873d4:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   873d8:	782b      	ldrb	r3, [r5, #0]
   873da:	2b00      	cmp	r3, #0
   873dc:	f47f ae32 	bne.w	87044 <_svfprintf_r+0x5c>
   873e0:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   873e2:	2b00      	cmp	r3, #0
   873e4:	f43f af69 	beq.w	872ba <_svfprintf_r+0x2d2>
   873e8:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   873ea:	980a      	ldr	r0, [sp, #40]	; 0x28
   873ec:	4621      	mov	r1, r4
   873ee:	aa28      	add	r2, sp, #160	; 0xa0
   873f0:	f003 fbb8 	bl	8ab64 <__ssprint_r>
   873f4:	89a3      	ldrh	r3, [r4, #12]
   873f6:	e762      	b.n	872be <_svfprintf_r+0x2d6>
   873f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   873fa:	3307      	adds	r3, #7
   873fc:	f023 0207 	bic.w	r2, r3, #7
   87400:	e8f2 3402 	ldrd	r3, r4, [r2], #8
   87404:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   87408:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   8740c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   87410:	4699      	mov	r9, r3
   87412:	4618      	mov	r0, r3
   87414:	920e      	str	r2, [sp, #56]	; 0x38
   87416:	4621      	mov	r1, r4
   87418:	f04f 32ff 	mov.w	r2, #4294967295
   8741c:	4bb6      	ldr	r3, [pc, #728]	; (876f8 <_svfprintf_r+0x710>)
   8741e:	f006 f949 	bl	8d6b4 <__aeabi_dcmpun>
   87422:	2800      	cmp	r0, #0
   87424:	f040 8496 	bne.w	87d54 <_svfprintf_r+0xd6c>
   87428:	4648      	mov	r0, r9
   8742a:	4621      	mov	r1, r4
   8742c:	f04f 32ff 	mov.w	r2, #4294967295
   87430:	4bb1      	ldr	r3, [pc, #708]	; (876f8 <_svfprintf_r+0x710>)
   87432:	f006 f921 	bl	8d678 <__aeabi_dcmple>
   87436:	2800      	cmp	r0, #0
   87438:	f040 848c 	bne.w	87d54 <_svfprintf_r+0xd6c>
   8743c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87440:	2200      	movs	r2, #0
   87442:	2300      	movs	r3, #0
   87444:	f006 f90e 	bl	8d664 <__aeabi_dcmplt>
   87448:	2800      	cmp	r0, #0
   8744a:	f040 87a6 	bne.w	8839a <_svfprintf_r+0x13b2>
   8744e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87452:	2100      	movs	r1, #0
   87454:	2003      	movs	r0, #3
   87456:	4da9      	ldr	r5, [pc, #676]	; (876fc <_svfprintf_r+0x714>)
   87458:	4ba9      	ldr	r3, [pc, #676]	; (87700 <_svfprintf_r+0x718>)
   8745a:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   8745e:	910d      	str	r1, [sp, #52]	; 0x34
   87460:	9006      	str	r0, [sp, #24]
   87462:	2e47      	cmp	r6, #71	; 0x47
   87464:	bfc8      	it	gt
   87466:	461d      	movgt	r5, r3
   87468:	9107      	str	r1, [sp, #28]
   8746a:	900b      	str	r0, [sp, #44]	; 0x2c
   8746c:	910f      	str	r1, [sp, #60]	; 0x3c
   8746e:	9113      	str	r1, [sp, #76]	; 0x4c
   87470:	9110      	str	r1, [sp, #64]	; 0x40
   87472:	e6c1      	b.n	871f8 <_svfprintf_r+0x210>
   87474:	f017 0310 	ands.w	r3, r7, #16
   87478:	f040 8462 	bne.w	87d40 <_svfprintf_r+0xd58>
   8747c:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   87480:	f000 877b 	beq.w	8837a <_svfprintf_r+0x1392>
   87484:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87486:	4699      	mov	r9, r3
   87488:	f852 4b04 	ldr.w	r4, [r2], #4
   8748c:	920e      	str	r2, [sp, #56]	; 0x38
   8748e:	b2a4      	uxth	r4, r4
   87490:	e6c7      	b.n	87222 <_svfprintf_r+0x23a>
   87492:	f853 4b04 	ldr.w	r4, [r3], #4
   87496:	930e      	str	r3, [sp, #56]	; 0x38
   87498:	06fb      	lsls	r3, r7, #27
   8749a:	f100 8441 	bmi.w	87d20 <_svfprintf_r+0xd38>
   8749e:	067d      	lsls	r5, r7, #25
   874a0:	f140 843b 	bpl.w	87d1a <_svfprintf_r+0xd32>
   874a4:	f344 39c0 	sbfx	r9, r4, #15, #1
   874a8:	464b      	mov	r3, r9
   874aa:	b224      	sxth	r4, r4
   874ac:	e67d      	b.n	871aa <_svfprintf_r+0x1c2>
   874ae:	2001      	movs	r0, #1
   874b0:	2200      	movs	r2, #0
   874b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   874b4:	9006      	str	r0, [sp, #24]
   874b6:	f853 1b04 	ldr.w	r1, [r3], #4
   874ba:	ad3b      	add	r5, sp, #236	; 0xec
   874bc:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   874c0:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
   874c4:	930e      	str	r3, [sp, #56]	; 0x38
   874c6:	900b      	str	r0, [sp, #44]	; 0x2c
   874c8:	e710      	b.n	872ec <_svfprintf_r+0x304>
   874ca:	f04f 0900 	mov.w	r9, #0
   874ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   874d0:	9b07      	ldr	r3, [sp, #28]
   874d2:	f854 5b04 	ldr.w	r5, [r4], #4
   874d6:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   874da:	2d00      	cmp	r5, #0
   874dc:	f000 86ee 	beq.w	882bc <_svfprintf_r+0x12d4>
   874e0:	1c5a      	adds	r2, r3, #1
   874e2:	f000 8560 	beq.w	87fa6 <_svfprintf_r+0xfbe>
   874e6:	461a      	mov	r2, r3
   874e8:	4649      	mov	r1, r9
   874ea:	4628      	mov	r0, r5
   874ec:	f002 fef8 	bl	8a2e0 <memchr>
   874f0:	900d      	str	r0, [sp, #52]	; 0x34
   874f2:	2800      	cmp	r0, #0
   874f4:	f001 809e 	beq.w	88634 <_svfprintf_r+0x164c>
   874f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   874fa:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   874fe:	1b5b      	subs	r3, r3, r5
   87500:	930b      	str	r3, [sp, #44]	; 0x2c
   87502:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   87506:	f8cd 901c 	str.w	r9, [sp, #28]
   8750a:	940e      	str	r4, [sp, #56]	; 0x38
   8750c:	9306      	str	r3, [sp, #24]
   8750e:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   87512:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   87516:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   8751a:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   8751e:	e66b      	b.n	871f8 <_svfprintf_r+0x210>
   87520:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87522:	425b      	negs	r3, r3
   87524:	9309      	str	r3, [sp, #36]	; 0x24
   87526:	f89a 6000 	ldrb.w	r6, [sl]
   8752a:	f047 0704 	orr.w	r7, r7, #4
   8752e:	e5aa      	b.n	87086 <_svfprintf_r+0x9e>
   87530:	f047 0b10 	orr.w	fp, r7, #16
   87534:	f01b 0920 	ands.w	r9, fp, #32
   87538:	f000 83aa 	beq.w	87c90 <_svfprintf_r+0xca8>
   8753c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8753e:	3307      	adds	r3, #7
   87540:	f023 0307 	bic.w	r3, r3, #7
   87544:	461a      	mov	r2, r3
   87546:	f852 4b08 	ldr.w	r4, [r2], #8
   8754a:	f8d3 9004 	ldr.w	r9, [r3, #4]
   8754e:	920e      	str	r2, [sp, #56]	; 0x38
   87550:	2301      	movs	r3, #1
   87552:	e669      	b.n	87228 <_svfprintf_r+0x240>
   87554:	2230      	movs	r2, #48	; 0x30
   87556:	2678      	movs	r6, #120	; 0x78
   87558:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8755a:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   8755e:	f853 4b04 	ldr.w	r4, [r3], #4
   87562:	4a68      	ldr	r2, [pc, #416]	; (87704 <_svfprintf_r+0x71c>)
   87564:	930e      	str	r3, [sp, #56]	; 0x38
   87566:	f04f 0900 	mov.w	r9, #0
   8756a:	2302      	movs	r3, #2
   8756c:	f047 0b02 	orr.w	fp, r7, #2
   87570:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   87574:	9218      	str	r2, [sp, #96]	; 0x60
   87576:	e657      	b.n	87228 <_svfprintf_r+0x240>
   87578:	06bd      	lsls	r5, r7, #26
   8757a:	f100 83d6 	bmi.w	87d2a <_svfprintf_r+0xd42>
   8757e:	06fc      	lsls	r4, r7, #27
   87580:	f100 8693 	bmi.w	882aa <_svfprintf_r+0x12c2>
   87584:	0678      	lsls	r0, r7, #25
   87586:	f100 875d 	bmi.w	88444 <_svfprintf_r+0x145c>
   8758a:	05b9      	lsls	r1, r7, #22
   8758c:	f140 868d 	bpl.w	882aa <_svfprintf_r+0x12c2>
   87590:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87592:	9908      	ldr	r1, [sp, #32]
   87594:	f853 2b04 	ldr.w	r2, [r3], #4
   87598:	4655      	mov	r5, sl
   8759a:	7011      	strb	r1, [r2, #0]
   8759c:	930e      	str	r3, [sp, #56]	; 0x38
   8759e:	e71b      	b.n	873d8 <_svfprintf_r+0x3f0>
   875a0:	f89a 6000 	ldrb.w	r6, [sl]
   875a4:	2e6c      	cmp	r6, #108	; 0x6c
   875a6:	bf03      	ittte	eq
   875a8:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   875ac:	f047 0720 	orreq.w	r7, r7, #32
   875b0:	f10a 0a01 	addeq.w	sl, sl, #1
   875b4:	f047 0710 	orrne.w	r7, r7, #16
   875b8:	e565      	b.n	87086 <_svfprintf_r+0x9e>
   875ba:	f89a 6000 	ldrb.w	r6, [sl]
   875be:	2e68      	cmp	r6, #104	; 0x68
   875c0:	bf03      	ittte	eq
   875c2:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   875c6:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   875ca:	f10a 0a01 	addeq.w	sl, sl, #1
   875ce:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   875d2:	e558      	b.n	87086 <_svfprintf_r+0x9e>
   875d4:	f89a 6000 	ldrb.w	r6, [sl]
   875d8:	f047 0708 	orr.w	r7, r7, #8
   875dc:	e553      	b.n	87086 <_svfprintf_r+0x9e>
   875de:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   875e0:	4630      	mov	r0, r6
   875e2:	f002 fbc5 	bl	89d70 <_localeconv_r>
   875e6:	6843      	ldr	r3, [r0, #4]
   875e8:	4618      	mov	r0, r3
   875ea:	931b      	str	r3, [sp, #108]	; 0x6c
   875ec:	f7ff fc9a 	bl	86f24 <strlen>
   875f0:	4603      	mov	r3, r0
   875f2:	4630      	mov	r0, r6
   875f4:	931c      	str	r3, [sp, #112]	; 0x70
   875f6:	461e      	mov	r6, r3
   875f8:	f002 fbba 	bl	89d70 <_localeconv_r>
   875fc:	6883      	ldr	r3, [r0, #8]
   875fe:	9319      	str	r3, [sp, #100]	; 0x64
   87600:	2e00      	cmp	r6, #0
   87602:	f43f adbb 	beq.w	8717c <_svfprintf_r+0x194>
   87606:	9b19      	ldr	r3, [sp, #100]	; 0x64
   87608:	2b00      	cmp	r3, #0
   8760a:	f43f adb7 	beq.w	8717c <_svfprintf_r+0x194>
   8760e:	9b19      	ldr	r3, [sp, #100]	; 0x64
   87610:	781b      	ldrb	r3, [r3, #0]
   87612:	2b00      	cmp	r3, #0
   87614:	f43f adb2 	beq.w	8717c <_svfprintf_r+0x194>
   87618:	f89a 6000 	ldrb.w	r6, [sl]
   8761c:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   87620:	e531      	b.n	87086 <_svfprintf_r+0x9e>
   87622:	f89a 6000 	ldrb.w	r6, [sl]
   87626:	f047 0701 	orr.w	r7, r7, #1
   8762a:	e52c      	b.n	87086 <_svfprintf_r+0x9e>
   8762c:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
   87630:	2b00      	cmp	r3, #0
   87632:	f47f ada3 	bne.w	8717c <_svfprintf_r+0x194>
   87636:	f89a 6000 	ldrb.w	r6, [sl]
   8763a:	f88d 4083 	strb.w	r4, [sp, #131]	; 0x83
   8763e:	e522      	b.n	87086 <_svfprintf_r+0x9e>
   87640:	f89a 6000 	ldrb.w	r6, [sl]
   87644:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   87648:	e51d      	b.n	87086 <_svfprintf_r+0x9e>
   8764a:	4652      	mov	r2, sl
   8764c:	f812 6b01 	ldrb.w	r6, [r2], #1
   87650:	2e2a      	cmp	r6, #42	; 0x2a
   87652:	f001 81eb 	beq.w	88a2c <_svfprintf_r+0x1a44>
   87656:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8765a:	2b09      	cmp	r3, #9
   8765c:	4692      	mov	sl, r2
   8765e:	bf98      	it	ls
   87660:	2200      	movls	r2, #0
   87662:	f201 8003 	bhi.w	8866c <_svfprintf_r+0x1684>
   87666:	f81a 6b01 	ldrb.w	r6, [sl], #1
   8766a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8766e:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   87672:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   87676:	2b09      	cmp	r3, #9
   87678:	d9f5      	bls.n	87666 <_svfprintf_r+0x67e>
   8767a:	9207      	str	r2, [sp, #28]
   8767c:	e505      	b.n	8708a <_svfprintf_r+0xa2>
   8767e:	f89a 6000 	ldrb.w	r6, [sl]
   87682:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   87686:	e4fe      	b.n	87086 <_svfprintf_r+0x9e>
   87688:	46bb      	mov	fp, r7
   8768a:	2b01      	cmp	r3, #1
   8768c:	f43f ad9a 	beq.w	871c4 <_svfprintf_r+0x1dc>
   87690:	2b02      	cmp	r3, #2
   87692:	ad54      	add	r5, sp, #336	; 0x150
   87694:	d112      	bne.n	876bc <_svfprintf_r+0x6d4>
   87696:	9a18      	ldr	r2, [sp, #96]	; 0x60
   87698:	f004 030f 	and.w	r3, r4, #15
   8769c:	5cd3      	ldrb	r3, [r2, r3]
   8769e:	0924      	lsrs	r4, r4, #4
   876a0:	ea44 7409 	orr.w	r4, r4, r9, lsl #28
   876a4:	ea4f 1919 	mov.w	r9, r9, lsr #4
   876a8:	f805 3d01 	strb.w	r3, [r5, #-1]!
   876ac:	ea54 0309 	orrs.w	r3, r4, r9
   876b0:	d1f2      	bne.n	87698 <_svfprintf_r+0x6b0>
   876b2:	ab54      	add	r3, sp, #336	; 0x150
   876b4:	1b5b      	subs	r3, r3, r5
   876b6:	465f      	mov	r7, fp
   876b8:	930b      	str	r3, [sp, #44]	; 0x2c
   876ba:	e590      	b.n	871de <_svfprintf_r+0x1f6>
   876bc:	f004 0307 	and.w	r3, r4, #7
   876c0:	08e4      	lsrs	r4, r4, #3
   876c2:	ea44 7449 	orr.w	r4, r4, r9, lsl #29
   876c6:	ea4f 09d9 	mov.w	r9, r9, lsr #3
   876ca:	3330      	adds	r3, #48	; 0x30
   876cc:	ea54 0109 	orrs.w	r1, r4, r9
   876d0:	462a      	mov	r2, r5
   876d2:	f805 3d01 	strb.w	r3, [r5, #-1]!
   876d6:	d1f1      	bne.n	876bc <_svfprintf_r+0x6d4>
   876d8:	f01b 0f01 	tst.w	fp, #1
   876dc:	d0e9      	beq.n	876b2 <_svfprintf_r+0x6ca>
   876de:	2b30      	cmp	r3, #48	; 0x30
   876e0:	d0e7      	beq.n	876b2 <_svfprintf_r+0x6ca>
   876e2:	2330      	movs	r3, #48	; 0x30
   876e4:	3a02      	subs	r2, #2
   876e6:	f805 3c01 	strb.w	r3, [r5, #-1]
   876ea:	ab54      	add	r3, sp, #336	; 0x150
   876ec:	1a9b      	subs	r3, r3, r2
   876ee:	465f      	mov	r7, fp
   876f0:	4615      	mov	r5, r2
   876f2:	930b      	str	r3, [sp, #44]	; 0x2c
   876f4:	e573      	b.n	871de <_svfprintf_r+0x1f6>
   876f6:	bf00      	nop
   876f8:	7fefffff 	.word	0x7fefffff
   876fc:	0008daac 	.word	0x0008daac
   87700:	0008dab0 	.word	0x0008dab0
   87704:	0008dabc 	.word	0x0008dabc
   87708:	2e65      	cmp	r6, #101	; 0x65
   8770a:	f340 80e9 	ble.w	878e0 <_svfprintf_r+0x8f8>
   8770e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87712:	2200      	movs	r2, #0
   87714:	2300      	movs	r3, #0
   87716:	f005 ff9b 	bl	8d650 <__aeabi_dcmpeq>
   8771a:	2800      	cmp	r0, #0
   8771c:	f000 81d2 	beq.w	87ac4 <_svfprintf_r+0xadc>
   87720:	2301      	movs	r3, #1
   87722:	f8c8 3004 	str.w	r3, [r8, #4]
   87726:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87728:	4abf      	ldr	r2, [pc, #764]	; (87a28 <_svfprintf_r+0xa40>)
   8772a:	3301      	adds	r3, #1
   8772c:	3401      	adds	r4, #1
   8772e:	2b07      	cmp	r3, #7
   87730:	942a      	str	r4, [sp, #168]	; 0xa8
   87732:	9329      	str	r3, [sp, #164]	; 0xa4
   87734:	f8c8 2000 	str.w	r2, [r8]
   87738:	f300 857a 	bgt.w	88230 <_svfprintf_r+0x1248>
   8773c:	f108 0808 	add.w	r8, r8, #8
   87740:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87742:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87744:	4293      	cmp	r3, r2
   87746:	f280 82d7 	bge.w	87cf8 <_svfprintf_r+0xd10>
   8774a:	9b16      	ldr	r3, [sp, #88]	; 0x58
   8774c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   8774e:	441c      	add	r4, r3
   87750:	e9c8 2300 	strd	r2, r3, [r8]
   87754:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87756:	942a      	str	r4, [sp, #168]	; 0xa8
   87758:	3301      	adds	r3, #1
   8775a:	2b07      	cmp	r3, #7
   8775c:	9329      	str	r3, [sp, #164]	; 0xa4
   8775e:	f300 83dd 	bgt.w	87f1c <_svfprintf_r+0xf34>
   87762:	f108 0808 	add.w	r8, r8, #8
   87766:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87768:	1e5d      	subs	r5, r3, #1
   8776a:	2d00      	cmp	r5, #0
   8776c:	f77f ae16 	ble.w	8739c <_svfprintf_r+0x3b4>
   87770:	2d10      	cmp	r5, #16
   87772:	f341 8141 	ble.w	889f8 <_svfprintf_r+0x1a10>
   87776:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 87a2c <_svfprintf_r+0xa44>
   8777a:	4622      	mov	r2, r4
   8777c:	4649      	mov	r1, r9
   8777e:	2610      	movs	r6, #16
   87780:	46b9      	mov	r9, r7
   87782:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87784:	460f      	mov	r7, r1
   87786:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   8778a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   8778c:	e005      	b.n	8779a <_svfprintf_r+0x7b2>
   8778e:	f108 0808 	add.w	r8, r8, #8
   87792:	3d10      	subs	r5, #16
   87794:	2d10      	cmp	r5, #16
   87796:	f340 8558 	ble.w	8824a <_svfprintf_r+0x1262>
   8779a:	3301      	adds	r3, #1
   8779c:	3210      	adds	r2, #16
   8779e:	2b07      	cmp	r3, #7
   877a0:	e9c8 7600 	strd	r7, r6, [r8]
   877a4:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   877a8:	ddf1      	ble.n	8778e <_svfprintf_r+0x7a6>
   877aa:	4621      	mov	r1, r4
   877ac:	4658      	mov	r0, fp
   877ae:	aa28      	add	r2, sp, #160	; 0xa0
   877b0:	f003 f9d8 	bl	8ab64 <__ssprint_r>
   877b4:	2800      	cmp	r0, #0
   877b6:	f47f ad7a 	bne.w	872ae <_svfprintf_r+0x2c6>
   877ba:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   877be:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   877c2:	e7e6      	b.n	87792 <_svfprintf_r+0x7aa>
   877c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   877c6:	9a06      	ldr	r2, [sp, #24]
   877c8:	eba3 0b02 	sub.w	fp, r3, r2
   877cc:	f1bb 0f00 	cmp.w	fp, #0
   877d0:	f77f adca 	ble.w	87368 <_svfprintf_r+0x380>
   877d4:	f1bb 0f10 	cmp.w	fp, #16
   877d8:	f341 8005 	ble.w	887e6 <_svfprintf_r+0x17fe>
   877dc:	f8df 924c 	ldr.w	r9, [pc, #588]	; 87a2c <_svfprintf_r+0xa44>
   877e0:	4641      	mov	r1, r8
   877e2:	4620      	mov	r0, r4
   877e4:	46a8      	mov	r8, r5
   877e6:	464c      	mov	r4, r9
   877e8:	2310      	movs	r3, #16
   877ea:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   877ec:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   877ee:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   877f2:	e006      	b.n	87802 <_svfprintf_r+0x81a>
   877f4:	f1ab 0b10 	sub.w	fp, fp, #16
   877f8:	f1bb 0f10 	cmp.w	fp, #16
   877fc:	f101 0108 	add.w	r1, r1, #8
   87800:	dd19      	ble.n	87836 <_svfprintf_r+0x84e>
   87802:	3201      	adds	r2, #1
   87804:	3010      	adds	r0, #16
   87806:	2a07      	cmp	r2, #7
   87808:	e9c1 4300 	strd	r4, r3, [r1]
   8780c:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   87810:	ddf0      	ble.n	877f4 <_svfprintf_r+0x80c>
   87812:	4629      	mov	r1, r5
   87814:	4648      	mov	r0, r9
   87816:	aa28      	add	r2, sp, #160	; 0xa0
   87818:	f003 f9a4 	bl	8ab64 <__ssprint_r>
   8781c:	2800      	cmp	r0, #0
   8781e:	f47f ad46 	bne.w	872ae <_svfprintf_r+0x2c6>
   87822:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   87826:	f1ab 0b10 	sub.w	fp, fp, #16
   8782a:	f1bb 0f10 	cmp.w	fp, #16
   8782e:	f04f 0310 	mov.w	r3, #16
   87832:	a92b      	add	r1, sp, #172	; 0xac
   87834:	dce5      	bgt.n	87802 <_svfprintf_r+0x81a>
   87836:	4645      	mov	r5, r8
   87838:	46a1      	mov	r9, r4
   8783a:	4688      	mov	r8, r1
   8783c:	4604      	mov	r4, r0
   8783e:	3201      	adds	r2, #1
   87840:	445c      	add	r4, fp
   87842:	2a07      	cmp	r2, #7
   87844:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   87848:	f8c8 9000 	str.w	r9, [r8]
   8784c:	f8c8 b004 	str.w	fp, [r8, #4]
   87850:	f300 8518 	bgt.w	88284 <_svfprintf_r+0x129c>
   87854:	f108 0808 	add.w	r8, r8, #8
   87858:	e586      	b.n	87368 <_svfprintf_r+0x380>
   8785a:	f1bb 0f10 	cmp.w	fp, #16
   8785e:	f340 8597 	ble.w	88390 <_svfprintf_r+0x13a8>
   87862:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 87a2c <_svfprintf_r+0xa44>
   87866:	4641      	mov	r1, r8
   87868:	4620      	mov	r0, r4
   8786a:	46a8      	mov	r8, r5
   8786c:	464c      	mov	r4, r9
   8786e:	2310      	movs	r3, #16
   87870:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   87872:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   87874:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   87878:	e006      	b.n	87888 <_svfprintf_r+0x8a0>
   8787a:	f1ab 0b10 	sub.w	fp, fp, #16
   8787e:	f1bb 0f10 	cmp.w	fp, #16
   87882:	f101 0108 	add.w	r1, r1, #8
   87886:	dd19      	ble.n	878bc <_svfprintf_r+0x8d4>
   87888:	3201      	adds	r2, #1
   8788a:	3010      	adds	r0, #16
   8788c:	2a07      	cmp	r2, #7
   8788e:	e9c1 4300 	strd	r4, r3, [r1]
   87892:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   87896:	ddf0      	ble.n	8787a <_svfprintf_r+0x892>
   87898:	4629      	mov	r1, r5
   8789a:	4648      	mov	r0, r9
   8789c:	aa28      	add	r2, sp, #160	; 0xa0
   8789e:	f003 f961 	bl	8ab64 <__ssprint_r>
   878a2:	2800      	cmp	r0, #0
   878a4:	f47f ad03 	bne.w	872ae <_svfprintf_r+0x2c6>
   878a8:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   878ac:	f1ab 0b10 	sub.w	fp, fp, #16
   878b0:	f1bb 0f10 	cmp.w	fp, #16
   878b4:	f04f 0310 	mov.w	r3, #16
   878b8:	a92b      	add	r1, sp, #172	; 0xac
   878ba:	dce5      	bgt.n	87888 <_svfprintf_r+0x8a0>
   878bc:	4645      	mov	r5, r8
   878be:	46a1      	mov	r9, r4
   878c0:	4688      	mov	r8, r1
   878c2:	4604      	mov	r4, r0
   878c4:	3201      	adds	r2, #1
   878c6:	445c      	add	r4, fp
   878c8:	2a07      	cmp	r2, #7
   878ca:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   878ce:	f8c8 9000 	str.w	r9, [r8]
   878d2:	f8c8 b004 	str.w	fp, [r8, #4]
   878d6:	f300 81ce 	bgt.w	87c76 <_svfprintf_r+0xc8e>
   878da:	f108 0808 	add.w	r8, r8, #8
   878de:	e54b      	b.n	87378 <_svfprintf_r+0x390>
   878e0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   878e2:	2b01      	cmp	r3, #1
   878e4:	f340 817e 	ble.w	87be4 <_svfprintf_r+0xbfc>
   878e8:	2301      	movs	r3, #1
   878ea:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   878ec:	3401      	adds	r4, #1
   878ee:	441e      	add	r6, r3
   878f0:	2e07      	cmp	r6, #7
   878f2:	f8c8 5000 	str.w	r5, [r8]
   878f6:	942a      	str	r4, [sp, #168]	; 0xa8
   878f8:	f8c8 3004 	str.w	r3, [r8, #4]
   878fc:	9629      	str	r6, [sp, #164]	; 0xa4
   878fe:	f300 81e1 	bgt.w	87cc4 <_svfprintf_r+0xcdc>
   87902:	f108 0808 	add.w	r8, r8, #8
   87906:	9b16      	ldr	r3, [sp, #88]	; 0x58
   87908:	3601      	adds	r6, #1
   8790a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   8790c:	441c      	add	r4, r3
   8790e:	2e07      	cmp	r6, #7
   87910:	e9c8 2300 	strd	r2, r3, [r8]
   87914:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   87918:	f300 81e1 	bgt.w	87cde <_svfprintf_r+0xcf6>
   8791c:	f108 0808 	add.w	r8, r8, #8
   87920:	2200      	movs	r2, #0
   87922:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87926:	2300      	movs	r3, #0
   87928:	f005 fe92 	bl	8d650 <__aeabi_dcmpeq>
   8792c:	2800      	cmp	r0, #0
   8792e:	f040 8176 	bne.w	87c1e <_svfprintf_r+0xc36>
   87932:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87934:	3601      	adds	r6, #1
   87936:	3b01      	subs	r3, #1
   87938:	3501      	adds	r5, #1
   8793a:	441c      	add	r4, r3
   8793c:	2e07      	cmp	r6, #7
   8793e:	f8c8 5000 	str.w	r5, [r8]
   87942:	9629      	str	r6, [sp, #164]	; 0xa4
   87944:	f8c8 3004 	str.w	r3, [r8, #4]
   87948:	942a      	str	r4, [sp, #168]	; 0xa8
   8794a:	f300 815b 	bgt.w	87c04 <_svfprintf_r+0xc1c>
   8794e:	f108 0808 	add.w	r8, r8, #8
   87952:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   87954:	3601      	adds	r6, #1
   87956:	441c      	add	r4, r3
   87958:	f8c8 3004 	str.w	r3, [r8, #4]
   8795c:	2e07      	cmp	r6, #7
   8795e:	ab24      	add	r3, sp, #144	; 0x90
   87960:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   87964:	f8c8 3000 	str.w	r3, [r8]
   87968:	f77f ad16 	ble.w	87398 <_svfprintf_r+0x3b0>
   8796c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8796e:	980a      	ldr	r0, [sp, #40]	; 0x28
   87970:	aa28      	add	r2, sp, #160	; 0xa0
   87972:	f003 f8f7 	bl	8ab64 <__ssprint_r>
   87976:	2800      	cmp	r0, #0
   87978:	f47f ac99 	bne.w	872ae <_svfprintf_r+0x2c6>
   8797c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8797e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87982:	e50b      	b.n	8739c <_svfprintf_r+0x3b4>
   87984:	f1b9 0f10 	cmp.w	r9, #16
   87988:	f340 8650 	ble.w	8862c <_svfprintf_r+0x1644>
   8798c:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   87990:	4640      	mov	r0, r8
   87992:	e9cd 361d 	strd	r3, r6, [sp, #116]	; 0x74
   87996:	46b8      	mov	r8, r7
   87998:	2410      	movs	r4, #16
   8799a:	464f      	mov	r7, r9
   8799c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   8799e:	46a9      	mov	r9, r5
   879a0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   879a2:	e004      	b.n	879ae <_svfprintf_r+0x9c6>
   879a4:	3f10      	subs	r7, #16
   879a6:	2f10      	cmp	r7, #16
   879a8:	f100 0008 	add.w	r0, r0, #8
   879ac:	dd16      	ble.n	879dc <_svfprintf_r+0x9f4>
   879ae:	3201      	adds	r2, #1
   879b0:	4b1f      	ldr	r3, [pc, #124]	; (87a30 <_svfprintf_r+0xa48>)
   879b2:	3110      	adds	r1, #16
   879b4:	2a07      	cmp	r2, #7
   879b6:	e9c0 3400 	strd	r3, r4, [r0]
   879ba:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   879be:	ddf1      	ble.n	879a4 <_svfprintf_r+0x9bc>
   879c0:	4631      	mov	r1, r6
   879c2:	4628      	mov	r0, r5
   879c4:	aa28      	add	r2, sp, #160	; 0xa0
   879c6:	f003 f8cd 	bl	8ab64 <__ssprint_r>
   879ca:	2800      	cmp	r0, #0
   879cc:	f47f ac6f 	bne.w	872ae <_svfprintf_r+0x2c6>
   879d0:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   879d4:	3f10      	subs	r7, #16
   879d6:	2f10      	cmp	r7, #16
   879d8:	a82b      	add	r0, sp, #172	; 0xac
   879da:	dce8      	bgt.n	879ae <_svfprintf_r+0x9c6>
   879dc:	464d      	mov	r5, r9
   879de:	e9dd 361d 	ldrd	r3, r6, [sp, #116]	; 0x74
   879e2:	46b9      	mov	r9, r7
   879e4:	4647      	mov	r7, r8
   879e6:	4680      	mov	r8, r0
   879e8:	eb09 0401 	add.w	r4, r9, r1
   879ec:	3201      	adds	r2, #1
   879ee:	4910      	ldr	r1, [pc, #64]	; (87a30 <_svfprintf_r+0xa48>)
   879f0:	2a07      	cmp	r2, #7
   879f2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   879f6:	f8c8 9004 	str.w	r9, [r8, #4]
   879fa:	f8c8 1000 	str.w	r1, [r8]
   879fe:	f300 83c3 	bgt.w	88188 <_svfprintf_r+0x11a0>
   87a02:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87a06:	f108 0808 	add.w	r8, r8, #8
   87a0a:	e486      	b.n	8731a <_svfprintf_r+0x332>
   87a0c:	990c      	ldr	r1, [sp, #48]	; 0x30
   87a0e:	980a      	ldr	r0, [sp, #40]	; 0x28
   87a10:	aa28      	add	r2, sp, #160	; 0xa0
   87a12:	931d      	str	r3, [sp, #116]	; 0x74
   87a14:	f003 f8a6 	bl	8ab64 <__ssprint_r>
   87a18:	2800      	cmp	r0, #0
   87a1a:	f47f ac48 	bne.w	872ae <_svfprintf_r+0x2c6>
   87a1e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87a20:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   87a22:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87a26:	e48a      	b.n	8733e <_svfprintf_r+0x356>
   87a28:	0008daec 	.word	0x0008daec
   87a2c:	0008db00 	.word	0x0008db00
   87a30:	0008daf0 	.word	0x0008daf0
   87a34:	990c      	ldr	r1, [sp, #48]	; 0x30
   87a36:	980a      	ldr	r0, [sp, #40]	; 0x28
   87a38:	aa28      	add	r2, sp, #160	; 0xa0
   87a3a:	f003 f893 	bl	8ab64 <__ssprint_r>
   87a3e:	2800      	cmp	r0, #0
   87a40:	f47f ac35 	bne.w	872ae <_svfprintf_r+0x2c6>
   87a44:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87a46:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87a4a:	e489      	b.n	87360 <_svfprintf_r+0x378>
   87a4c:	2d10      	cmp	r5, #16
   87a4e:	f340 86c4 	ble.w	887da <_svfprintf_r+0x17f2>
   87a52:	2610      	movs	r6, #16
   87a54:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87a56:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   87a58:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   87a5c:	e004      	b.n	87a68 <_svfprintf_r+0xa80>
   87a5e:	3d10      	subs	r5, #16
   87a60:	2d10      	cmp	r5, #16
   87a62:	f108 0808 	add.w	r8, r8, #8
   87a66:	dd17      	ble.n	87a98 <_svfprintf_r+0xab0>
   87a68:	3301      	adds	r3, #1
   87a6a:	4ab8      	ldr	r2, [pc, #736]	; (87d4c <_svfprintf_r+0xd64>)
   87a6c:	3410      	adds	r4, #16
   87a6e:	2b07      	cmp	r3, #7
   87a70:	e9c8 2600 	strd	r2, r6, [r8]
   87a74:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   87a78:	ddf1      	ble.n	87a5e <_svfprintf_r+0xa76>
   87a7a:	4649      	mov	r1, r9
   87a7c:	4638      	mov	r0, r7
   87a7e:	aa28      	add	r2, sp, #160	; 0xa0
   87a80:	f003 f870 	bl	8ab64 <__ssprint_r>
   87a84:	2800      	cmp	r0, #0
   87a86:	f47f ac12 	bne.w	872ae <_svfprintf_r+0x2c6>
   87a8a:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
   87a8e:	3d10      	subs	r5, #16
   87a90:	2d10      	cmp	r5, #16
   87a92:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87a96:	dce7      	bgt.n	87a68 <_svfprintf_r+0xa80>
   87a98:	3301      	adds	r3, #1
   87a9a:	4aac      	ldr	r2, [pc, #688]	; (87d4c <_svfprintf_r+0xd64>)
   87a9c:	442c      	add	r4, r5
   87a9e:	2b07      	cmp	r3, #7
   87aa0:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   87aa4:	f8c8 5004 	str.w	r5, [r8, #4]
   87aa8:	f8c8 2000 	str.w	r2, [r8]
   87aac:	f77f ac7e 	ble.w	873ac <_svfprintf_r+0x3c4>
   87ab0:	990c      	ldr	r1, [sp, #48]	; 0x30
   87ab2:	980a      	ldr	r0, [sp, #40]	; 0x28
   87ab4:	aa28      	add	r2, sp, #160	; 0xa0
   87ab6:	f003 f855 	bl	8ab64 <__ssprint_r>
   87aba:	2800      	cmp	r0, #0
   87abc:	f47f abf7 	bne.w	872ae <_svfprintf_r+0x2c6>
   87ac0:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87ac2:	e473      	b.n	873ac <_svfprintf_r+0x3c4>
   87ac4:	9922      	ldr	r1, [sp, #136]	; 0x88
   87ac6:	2900      	cmp	r1, #0
   87ac8:	f340 836f 	ble.w	881aa <_svfprintf_r+0x11c2>
   87acc:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   87ad0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87ad2:	4599      	cmp	r9, r3
   87ad4:	bfa8      	it	ge
   87ad6:	4699      	movge	r9, r3
   87ad8:	f1b9 0f00 	cmp.w	r9, #0
   87adc:	dd0b      	ble.n	87af6 <_svfprintf_r+0xb0e>
   87ade:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87ae0:	444c      	add	r4, r9
   87ae2:	3301      	adds	r3, #1
   87ae4:	2b07      	cmp	r3, #7
   87ae6:	e9c8 5900 	strd	r5, r9, [r8]
   87aea:	942a      	str	r4, [sp, #168]	; 0xa8
   87aec:	9329      	str	r3, [sp, #164]	; 0xa4
   87aee:	f300 851d 	bgt.w	8852c <_svfprintf_r+0x1544>
   87af2:	f108 0808 	add.w	r8, r8, #8
   87af6:	9e10      	ldr	r6, [sp, #64]	; 0x40
   87af8:	f1b9 0f00 	cmp.w	r9, #0
   87afc:	bfa8      	it	ge
   87afe:	eba6 0609 	subge.w	r6, r6, r9
   87b02:	2e00      	cmp	r6, #0
   87b04:	f300 8225 	bgt.w	87f52 <_svfprintf_r+0xf6a>
   87b08:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
   87b0c:	0578      	lsls	r0, r7, #21
   87b0e:	44ab      	add	fp, r5
   87b10:	f100 825f 	bmi.w	87fd2 <_svfprintf_r+0xfea>
   87b14:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87b16:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87b18:	4293      	cmp	r3, r2
   87b1a:	db02      	blt.n	87b22 <_svfprintf_r+0xb3a>
   87b1c:	07f9      	lsls	r1, r7, #31
   87b1e:	f140 8476 	bpl.w	8840e <_svfprintf_r+0x1426>
   87b22:	9a16      	ldr	r2, [sp, #88]	; 0x58
   87b24:	9917      	ldr	r1, [sp, #92]	; 0x5c
   87b26:	4414      	add	r4, r2
   87b28:	e9c8 1200 	strd	r1, r2, [r8]
   87b2c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   87b2e:	942a      	str	r4, [sp, #168]	; 0xa8
   87b30:	3201      	adds	r2, #1
   87b32:	2a07      	cmp	r2, #7
   87b34:	9229      	str	r2, [sp, #164]	; 0xa4
   87b36:	f300 8513 	bgt.w	88560 <_svfprintf_r+0x1578>
   87b3a:	f108 0808 	add.w	r8, r8, #8
   87b3e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87b40:	18ae      	adds	r6, r5, r2
   87b42:	eba6 060b 	sub.w	r6, r6, fp
   87b46:	1ad5      	subs	r5, r2, r3
   87b48:	42ae      	cmp	r6, r5
   87b4a:	bfa8      	it	ge
   87b4c:	462e      	movge	r6, r5
   87b4e:	2e00      	cmp	r6, #0
   87b50:	dd0d      	ble.n	87b6e <_svfprintf_r+0xb86>
   87b52:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87b54:	4434      	add	r4, r6
   87b56:	3301      	adds	r3, #1
   87b58:	2b07      	cmp	r3, #7
   87b5a:	f8c8 b000 	str.w	fp, [r8]
   87b5e:	f8c8 6004 	str.w	r6, [r8, #4]
   87b62:	942a      	str	r4, [sp, #168]	; 0xa8
   87b64:	9329      	str	r3, [sp, #164]	; 0xa4
   87b66:	f300 8571 	bgt.w	8864c <_svfprintf_r+0x1664>
   87b6a:	f108 0808 	add.w	r8, r8, #8
   87b6e:	2e00      	cmp	r6, #0
   87b70:	bfa8      	it	ge
   87b72:	1bad      	subge	r5, r5, r6
   87b74:	2d00      	cmp	r5, #0
   87b76:	f77f ac11 	ble.w	8739c <_svfprintf_r+0x3b4>
   87b7a:	2d10      	cmp	r5, #16
   87b7c:	f340 873c 	ble.w	889f8 <_svfprintf_r+0x1a10>
   87b80:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 87d50 <_svfprintf_r+0xd68>
   87b84:	4622      	mov	r2, r4
   87b86:	4649      	mov	r1, r9
   87b88:	2610      	movs	r6, #16
   87b8a:	46b9      	mov	r9, r7
   87b8c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87b8e:	460f      	mov	r7, r1
   87b90:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   87b94:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   87b96:	e005      	b.n	87ba4 <_svfprintf_r+0xbbc>
   87b98:	f108 0808 	add.w	r8, r8, #8
   87b9c:	3d10      	subs	r5, #16
   87b9e:	2d10      	cmp	r5, #16
   87ba0:	f340 8353 	ble.w	8824a <_svfprintf_r+0x1262>
   87ba4:	3301      	adds	r3, #1
   87ba6:	3210      	adds	r2, #16
   87ba8:	2b07      	cmp	r3, #7
   87baa:	e9c8 7600 	strd	r7, r6, [r8]
   87bae:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   87bb2:	ddf1      	ble.n	87b98 <_svfprintf_r+0xbb0>
   87bb4:	4621      	mov	r1, r4
   87bb6:	4658      	mov	r0, fp
   87bb8:	aa28      	add	r2, sp, #160	; 0xa0
   87bba:	f002 ffd3 	bl	8ab64 <__ssprint_r>
   87bbe:	2800      	cmp	r0, #0
   87bc0:	f47f ab75 	bne.w	872ae <_svfprintf_r+0x2c6>
   87bc4:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   87bc8:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87bcc:	e7e6      	b.n	87b9c <_svfprintf_r+0xbb4>
   87bce:	9b07      	ldr	r3, [sp, #28]
   87bd0:	2b00      	cmp	r3, #0
   87bd2:	f47f aafc 	bne.w	871ce <_svfprintf_r+0x1e6>
   87bd6:	465f      	mov	r7, fp
   87bd8:	2300      	movs	r3, #0
   87bda:	ad54      	add	r5, sp, #336	; 0x150
   87bdc:	9307      	str	r3, [sp, #28]
   87bde:	930b      	str	r3, [sp, #44]	; 0x2c
   87be0:	f7ff bafd 	b.w	871de <_svfprintf_r+0x1f6>
   87be4:	07fa      	lsls	r2, r7, #31
   87be6:	f53f ae7f 	bmi.w	878e8 <_svfprintf_r+0x900>
   87bea:	2301      	movs	r3, #1
   87bec:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   87bee:	3401      	adds	r4, #1
   87bf0:	441e      	add	r6, r3
   87bf2:	2e07      	cmp	r6, #7
   87bf4:	f8c8 5000 	str.w	r5, [r8]
   87bf8:	942a      	str	r4, [sp, #168]	; 0xa8
   87bfa:	f8c8 3004 	str.w	r3, [r8, #4]
   87bfe:	9629      	str	r6, [sp, #164]	; 0xa4
   87c00:	f77f aea5 	ble.w	8794e <_svfprintf_r+0x966>
   87c04:	990c      	ldr	r1, [sp, #48]	; 0x30
   87c06:	980a      	ldr	r0, [sp, #40]	; 0x28
   87c08:	aa28      	add	r2, sp, #160	; 0xa0
   87c0a:	f002 ffab 	bl	8ab64 <__ssprint_r>
   87c0e:	2800      	cmp	r0, #0
   87c10:	f47f ab4d 	bne.w	872ae <_svfprintf_r+0x2c6>
   87c14:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   87c18:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87c1c:	e699      	b.n	87952 <_svfprintf_r+0x96a>
   87c1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87c20:	1e5d      	subs	r5, r3, #1
   87c22:	2d00      	cmp	r5, #0
   87c24:	f77f ae95 	ble.w	87952 <_svfprintf_r+0x96a>
   87c28:	2d10      	cmp	r5, #16
   87c2a:	f340 86df 	ble.w	889ec <_svfprintf_r+0x1a04>
   87c2e:	4622      	mov	r2, r4
   87c30:	9707      	str	r7, [sp, #28]
   87c32:	f04f 0b10 	mov.w	fp, #16
   87c36:	f8df 9118 	ldr.w	r9, [pc, #280]	; 87d50 <_svfprintf_r+0xd68>
   87c3a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   87c3c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   87c3e:	e005      	b.n	87c4c <_svfprintf_r+0xc64>
   87c40:	f108 0808 	add.w	r8, r8, #8
   87c44:	3d10      	subs	r5, #16
   87c46:	2d10      	cmp	r5, #16
   87c48:	f340 837f 	ble.w	8834a <_svfprintf_r+0x1362>
   87c4c:	3601      	adds	r6, #1
   87c4e:	3210      	adds	r2, #16
   87c50:	2e07      	cmp	r6, #7
   87c52:	e9c8 9b00 	strd	r9, fp, [r8]
   87c56:	e9cd 6229 	strd	r6, r2, [sp, #164]	; 0xa4
   87c5a:	ddf1      	ble.n	87c40 <_svfprintf_r+0xc58>
   87c5c:	4639      	mov	r1, r7
   87c5e:	4620      	mov	r0, r4
   87c60:	aa28      	add	r2, sp, #160	; 0xa0
   87c62:	f002 ff7f 	bl	8ab64 <__ssprint_r>
   87c66:	2800      	cmp	r0, #0
   87c68:	f47f ab21 	bne.w	872ae <_svfprintf_r+0x2c6>
   87c6c:	e9dd 6229 	ldrd	r6, r2, [sp, #164]	; 0xa4
   87c70:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87c74:	e7e6      	b.n	87c44 <_svfprintf_r+0xc5c>
   87c76:	990c      	ldr	r1, [sp, #48]	; 0x30
   87c78:	980a      	ldr	r0, [sp, #40]	; 0x28
   87c7a:	aa28      	add	r2, sp, #160	; 0xa0
   87c7c:	f002 ff72 	bl	8ab64 <__ssprint_r>
   87c80:	2800      	cmp	r0, #0
   87c82:	f47f ab14 	bne.w	872ae <_svfprintf_r+0x2c6>
   87c86:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87c88:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87c8c:	f7ff bb74 	b.w	87378 <_svfprintf_r+0x390>
   87c90:	f01b 0310 	ands.w	r3, fp, #16
   87c94:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87c96:	d13a      	bne.n	87d0e <_svfprintf_r+0xd26>
   87c98:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
   87c9c:	d033      	beq.n	87d06 <_svfprintf_r+0xd1e>
   87c9e:	f852 4b04 	ldr.w	r4, [r2], #4
   87ca2:	4699      	mov	r9, r3
   87ca4:	920e      	str	r2, [sp, #56]	; 0x38
   87ca6:	2301      	movs	r3, #1
   87ca8:	b2a4      	uxth	r4, r4
   87caa:	f7ff babd 	b.w	87228 <_svfprintf_r+0x240>
   87cae:	232d      	movs	r3, #45	; 0x2d
   87cb0:	4264      	negs	r4, r4
   87cb2:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   87cb6:	46bb      	mov	fp, r7
   87cb8:	f04f 0301 	mov.w	r3, #1
   87cbc:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
   87cc0:	f7ff bab5 	b.w	8722e <_svfprintf_r+0x246>
   87cc4:	990c      	ldr	r1, [sp, #48]	; 0x30
   87cc6:	980a      	ldr	r0, [sp, #40]	; 0x28
   87cc8:	aa28      	add	r2, sp, #160	; 0xa0
   87cca:	f002 ff4b 	bl	8ab64 <__ssprint_r>
   87cce:	2800      	cmp	r0, #0
   87cd0:	f47f aaed 	bne.w	872ae <_svfprintf_r+0x2c6>
   87cd4:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   87cd8:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87cdc:	e613      	b.n	87906 <_svfprintf_r+0x91e>
   87cde:	990c      	ldr	r1, [sp, #48]	; 0x30
   87ce0:	980a      	ldr	r0, [sp, #40]	; 0x28
   87ce2:	aa28      	add	r2, sp, #160	; 0xa0
   87ce4:	f002 ff3e 	bl	8ab64 <__ssprint_r>
   87ce8:	2800      	cmp	r0, #0
   87cea:	f47f aae0 	bne.w	872ae <_svfprintf_r+0x2c6>
   87cee:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   87cf2:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87cf6:	e613      	b.n	87920 <_svfprintf_r+0x938>
   87cf8:	07fd      	lsls	r5, r7, #31
   87cfa:	f57f ab4f 	bpl.w	8739c <_svfprintf_r+0x3b4>
   87cfe:	e524      	b.n	8774a <_svfprintf_r+0x762>
   87d00:	ad54      	add	r5, sp, #336	; 0x150
   87d02:	f7ff ba6c 	b.w	871de <_svfprintf_r+0x1f6>
   87d06:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
   87d0a:	f040 838a 	bne.w	88422 <_svfprintf_r+0x143a>
   87d0e:	f852 4b04 	ldr.w	r4, [r2], #4
   87d12:	2301      	movs	r3, #1
   87d14:	920e      	str	r2, [sp, #56]	; 0x38
   87d16:	f7ff ba87 	b.w	87228 <_svfprintf_r+0x240>
   87d1a:	05b8      	lsls	r0, r7, #22
   87d1c:	f100 839b 	bmi.w	88456 <_svfprintf_r+0x146e>
   87d20:	ea4f 79e4 	mov.w	r9, r4, asr #31
   87d24:	464b      	mov	r3, r9
   87d26:	f7ff ba40 	b.w	871aa <_svfprintf_r+0x1c2>
   87d2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87d2c:	9808      	ldr	r0, [sp, #32]
   87d2e:	f853 1b04 	ldr.w	r1, [r3], #4
   87d32:	17c2      	asrs	r2, r0, #31
   87d34:	4655      	mov	r5, sl
   87d36:	e9c1 0200 	strd	r0, r2, [r1]
   87d3a:	930e      	str	r3, [sp, #56]	; 0x38
   87d3c:	f7ff bb4c 	b.w	873d8 <_svfprintf_r+0x3f0>
   87d40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87d42:	f853 4b04 	ldr.w	r4, [r3], #4
   87d46:	930e      	str	r3, [sp, #56]	; 0x38
   87d48:	f7ff ba6b 	b.w	87222 <_svfprintf_r+0x23a>
   87d4c:	0008daf0 	.word	0x0008daf0
   87d50:	0008db00 	.word	0x0008db00
   87d54:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   87d58:	4602      	mov	r2, r0
   87d5a:	460b      	mov	r3, r1
   87d5c:	f005 fcaa 	bl	8d6b4 <__aeabi_dcmpun>
   87d60:	2800      	cmp	r0, #0
   87d62:	f040 85e9 	bne.w	88938 <_svfprintf_r+0x1950>
   87d66:	2e61      	cmp	r6, #97	; 0x61
   87d68:	f000 857d 	beq.w	88866 <_svfprintf_r+0x187e>
   87d6c:	2e41      	cmp	r6, #65	; 0x41
   87d6e:	f000 848b 	beq.w	88688 <_svfprintf_r+0x16a0>
   87d72:	9b07      	ldr	r3, [sp, #28]
   87d74:	3301      	adds	r3, #1
   87d76:	f000 838f 	beq.w	88498 <_svfprintf_r+0x14b0>
   87d7a:	f026 0320 	bic.w	r3, r6, #32
   87d7e:	2b47      	cmp	r3, #71	; 0x47
   87d80:	9306      	str	r3, [sp, #24]
   87d82:	f000 858f 	beq.w	888a4 <_svfprintf_r+0x18bc>
   87d86:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   87d8a:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   87d8e:	930f      	str	r3, [sp, #60]	; 0x3c
   87d90:	4613      	mov	r3, r2
   87d92:	2b00      	cmp	r3, #0
   87d94:	f2c0 85b0 	blt.w	888f8 <_svfprintf_r+0x1910>
   87d98:	930b      	str	r3, [sp, #44]	; 0x2c
   87d9a:	2300      	movs	r3, #0
   87d9c:	468b      	mov	fp, r1
   87d9e:	931d      	str	r3, [sp, #116]	; 0x74
   87da0:	930d      	str	r3, [sp, #52]	; 0x34
   87da2:	9b06      	ldr	r3, [sp, #24]
   87da4:	2b46      	cmp	r3, #70	; 0x46
   87da6:	f000 83e9 	beq.w	8857c <_svfprintf_r+0x1594>
   87daa:	2b45      	cmp	r3, #69	; 0x45
   87dac:	f000 8546 	beq.w	8883c <_svfprintf_r+0x1854>
   87db0:	9907      	ldr	r1, [sp, #28]
   87db2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87db4:	9101      	str	r1, [sp, #4]
   87db6:	2102      	movs	r1, #2
   87db8:	9100      	str	r1, [sp, #0]
   87dba:	a926      	add	r1, sp, #152	; 0x98
   87dbc:	9104      	str	r1, [sp, #16]
   87dbe:	a923      	add	r1, sp, #140	; 0x8c
   87dc0:	9103      	str	r1, [sp, #12]
   87dc2:	a922      	add	r1, sp, #136	; 0x88
   87dc4:	465a      	mov	r2, fp
   87dc6:	980a      	ldr	r0, [sp, #40]	; 0x28
   87dc8:	9102      	str	r1, [sp, #8]
   87dca:	f000 ff05 	bl	88bd8 <_dtoa_r>
   87dce:	9b06      	ldr	r3, [sp, #24]
   87dd0:	4605      	mov	r5, r0
   87dd2:	2b47      	cmp	r3, #71	; 0x47
   87dd4:	f040 863a 	bne.w	88a4c <_svfprintf_r+0x1a64>
   87dd8:	f017 0f01 	tst.w	r7, #1
   87ddc:	46b9      	mov	r9, r7
   87dde:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   87de0:	f040 84fe 	bne.w	887e0 <_svfprintf_r+0x17f8>
   87de4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87de6:	1b5b      	subs	r3, r3, r5
   87de8:	9312      	str	r3, [sp, #72]	; 0x48
   87dea:	9b06      	ldr	r3, [sp, #24]
   87dec:	2b47      	cmp	r3, #71	; 0x47
   87dee:	f000 836e 	beq.w	884ce <_svfprintf_r+0x14e6>
   87df2:	9b06      	ldr	r3, [sp, #24]
   87df4:	2b46      	cmp	r3, #70	; 0x46
   87df6:	f000 83f0 	beq.w	885da <_svfprintf_r+0x15f2>
   87dfa:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87dfc:	9310      	str	r3, [sp, #64]	; 0x40
   87dfe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87e00:	9a06      	ldr	r2, [sp, #24]
   87e02:	3b01      	subs	r3, #1
   87e04:	2a41      	cmp	r2, #65	; 0x41
   87e06:	9322      	str	r3, [sp, #136]	; 0x88
   87e08:	f000 85bb 	beq.w	88982 <_svfprintf_r+0x199a>
   87e0c:	2100      	movs	r1, #0
   87e0e:	b2f2      	uxtb	r2, r6
   87e10:	2b00      	cmp	r3, #0
   87e12:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
   87e16:	bfb6      	itet	lt
   87e18:	222d      	movlt	r2, #45	; 0x2d
   87e1a:	222b      	movge	r2, #43	; 0x2b
   87e1c:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   87e1e:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
   87e22:	bfb8      	it	lt
   87e24:	f1c3 0301 	rsblt	r3, r3, #1
   87e28:	2b09      	cmp	r3, #9
   87e2a:	f340 859b 	ble.w	88964 <_svfprintf_r+0x197c>
   87e2e:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
   87e32:	4662      	mov	r2, ip
   87e34:	4fb6      	ldr	r7, [pc, #728]	; (88110 <_svfprintf_r+0x1128>)
   87e36:	461c      	mov	r4, r3
   87e38:	4610      	mov	r0, r2
   87e3a:	fb87 1203 	smull	r1, r2, r7, r3
   87e3e:	17d9      	asrs	r1, r3, #31
   87e40:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   87e44:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   87e48:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   87e4c:	3230      	adds	r2, #48	; 0x30
   87e4e:	2c63      	cmp	r4, #99	; 0x63
   87e50:	f800 2c01 	strb.w	r2, [r0, #-1]
   87e54:	460b      	mov	r3, r1
   87e56:	f100 32ff 	add.w	r2, r0, #4294967295
   87e5a:	dcec      	bgt.n	87e36 <_svfprintf_r+0xe4e>
   87e5c:	3330      	adds	r3, #48	; 0x30
   87e5e:	1e81      	subs	r1, r0, #2
   87e60:	b2db      	uxtb	r3, r3
   87e62:	458c      	cmp	ip, r1
   87e64:	f802 3c01 	strb.w	r3, [r2, #-1]
   87e68:	f240 85f9 	bls.w	88a5e <_svfprintf_r+0x1a76>
   87e6c:	f10d 0192 	add.w	r1, sp, #146	; 0x92
   87e70:	e001      	b.n	87e76 <_svfprintf_r+0xe8e>
   87e72:	f812 3b01 	ldrb.w	r3, [r2], #1
   87e76:	4594      	cmp	ip, r2
   87e78:	f801 3b01 	strb.w	r3, [r1], #1
   87e7c:	d1f9      	bne.n	87e72 <_svfprintf_r+0xe8a>
   87e7e:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
   87e82:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   87e86:	1a1b      	subs	r3, r3, r0
   87e88:	4413      	add	r3, r2
   87e8a:	aa24      	add	r2, sp, #144	; 0x90
   87e8c:	1a9b      	subs	r3, r3, r2
   87e8e:	931a      	str	r3, [sp, #104]	; 0x68
   87e90:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87e92:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   87e94:	2b01      	cmp	r3, #1
   87e96:	441a      	add	r2, r3
   87e98:	920b      	str	r2, [sp, #44]	; 0x2c
   87e9a:	f340 8581 	ble.w	889a0 <_svfprintf_r+0x19b8>
   87e9e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87ea0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   87ea2:	4413      	add	r3, r2
   87ea4:	930b      	str	r3, [sp, #44]	; 0x2c
   87ea6:	2300      	movs	r3, #0
   87ea8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87eaa:	f429 6780 	bic.w	r7, r9, #1024	; 0x400
   87eae:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   87eb2:	f447 7780 	orr.w	r7, r7, #256	; 0x100
   87eb6:	930f      	str	r3, [sp, #60]	; 0x3c
   87eb8:	9206      	str	r2, [sp, #24]
   87eba:	9313      	str	r3, [sp, #76]	; 0x4c
   87ebc:	9310      	str	r3, [sp, #64]	; 0x40
   87ebe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   87ec0:	2b00      	cmp	r3, #0
   87ec2:	f040 832c 	bne.w	8851e <_svfprintf_r+0x1536>
   87ec6:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87eca:	9307      	str	r3, [sp, #28]
   87ecc:	f7ff b994 	b.w	871f8 <_svfprintf_r+0x210>
   87ed0:	46bb      	mov	fp, r7
   87ed2:	f7ff bb2f 	b.w	87534 <_svfprintf_r+0x54c>
   87ed6:	4b8f      	ldr	r3, [pc, #572]	; (88114 <_svfprintf_r+0x112c>)
   87ed8:	9318      	str	r3, [sp, #96]	; 0x60
   87eda:	f017 0920 	ands.w	r9, r7, #32
   87ede:	f000 80f5 	beq.w	880cc <_svfprintf_r+0x10e4>
   87ee2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87ee4:	3307      	adds	r3, #7
   87ee6:	f023 0307 	bic.w	r3, r3, #7
   87eea:	f8d3 9004 	ldr.w	r9, [r3, #4]
   87eee:	f853 4b08 	ldr.w	r4, [r3], #8
   87ef2:	930e      	str	r3, [sp, #56]	; 0x38
   87ef4:	07f8      	lsls	r0, r7, #31
   87ef6:	d509      	bpl.n	87f0c <_svfprintf_r+0xf24>
   87ef8:	ea54 0309 	orrs.w	r3, r4, r9
   87efc:	d006      	beq.n	87f0c <_svfprintf_r+0xf24>
   87efe:	2330      	movs	r3, #48	; 0x30
   87f00:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   87f04:	f047 0702 	orr.w	r7, r7, #2
   87f08:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   87f0c:	2302      	movs	r3, #2
   87f0e:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   87f12:	f7ff b989 	b.w	87228 <_svfprintf_r+0x240>
   87f16:	4b80      	ldr	r3, [pc, #512]	; (88118 <_svfprintf_r+0x1130>)
   87f18:	9318      	str	r3, [sp, #96]	; 0x60
   87f1a:	e7de      	b.n	87eda <_svfprintf_r+0xef2>
   87f1c:	990c      	ldr	r1, [sp, #48]	; 0x30
   87f1e:	980a      	ldr	r0, [sp, #40]	; 0x28
   87f20:	aa28      	add	r2, sp, #160	; 0xa0
   87f22:	f002 fe1f 	bl	8ab64 <__ssprint_r>
   87f26:	2800      	cmp	r0, #0
   87f28:	f47f a9c1 	bne.w	872ae <_svfprintf_r+0x2c6>
   87f2c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87f2e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87f32:	e418      	b.n	87766 <_svfprintf_r+0x77e>
   87f34:	2140      	movs	r1, #64	; 0x40
   87f36:	980a      	ldr	r0, [sp, #40]	; 0x28
   87f38:	f001 ff26 	bl	89d88 <_malloc_r>
   87f3c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87f3e:	6018      	str	r0, [r3, #0]
   87f40:	6118      	str	r0, [r3, #16]
   87f42:	2800      	cmp	r0, #0
   87f44:	f000 8597 	beq.w	88a76 <_svfprintf_r+0x1a8e>
   87f48:	2340      	movs	r3, #64	; 0x40
   87f4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87f4c:	6153      	str	r3, [r2, #20]
   87f4e:	f7ff b862 	b.w	87016 <_svfprintf_r+0x2e>
   87f52:	2e10      	cmp	r6, #16
   87f54:	f340 8576 	ble.w	88a44 <_svfprintf_r+0x1a5c>
   87f58:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 8811c <_svfprintf_r+0x1134>
   87f5c:	4642      	mov	r2, r8
   87f5e:	4648      	mov	r0, r9
   87f60:	4621      	mov	r1, r4
   87f62:	46a8      	mov	r8, r5
   87f64:	46b9      	mov	r9, r7
   87f66:	f04f 0b10 	mov.w	fp, #16
   87f6a:	4607      	mov	r7, r0
   87f6c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87f6e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   87f70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   87f72:	e004      	b.n	87f7e <_svfprintf_r+0xf96>
   87f74:	3208      	adds	r2, #8
   87f76:	3e10      	subs	r6, #16
   87f78:	2e10      	cmp	r6, #16
   87f7a:	f340 8213 	ble.w	883a4 <_svfprintf_r+0x13bc>
   87f7e:	3301      	adds	r3, #1
   87f80:	3110      	adds	r1, #16
   87f82:	2b07      	cmp	r3, #7
   87f84:	e9c2 7b00 	strd	r7, fp, [r2]
   87f88:	e9cd 3129 	strd	r3, r1, [sp, #164]	; 0xa4
   87f8c:	ddf2      	ble.n	87f74 <_svfprintf_r+0xf8c>
   87f8e:	4629      	mov	r1, r5
   87f90:	4620      	mov	r0, r4
   87f92:	aa28      	add	r2, sp, #160	; 0xa0
   87f94:	f002 fde6 	bl	8ab64 <__ssprint_r>
   87f98:	2800      	cmp	r0, #0
   87f9a:	f47f a988 	bne.w	872ae <_svfprintf_r+0x2c6>
   87f9e:	e9dd 3129 	ldrd	r3, r1, [sp, #164]	; 0xa4
   87fa2:	aa2b      	add	r2, sp, #172	; 0xac
   87fa4:	e7e7      	b.n	87f76 <_svfprintf_r+0xf8e>
   87fa6:	4628      	mov	r0, r5
   87fa8:	f8cd 901c 	str.w	r9, [sp, #28]
   87fac:	940e      	str	r4, [sp, #56]	; 0x38
   87fae:	f7fe ffb9 	bl	86f24 <strlen>
   87fb2:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   87fb6:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87fba:	900b      	str	r0, [sp, #44]	; 0x2c
   87fbc:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   87fc0:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   87fc4:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   87fc8:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   87fcc:	9306      	str	r3, [sp, #24]
   87fce:	f7ff b913 	b.w	871f8 <_svfprintf_r+0x210>
   87fd2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87fd4:	4642      	mov	r2, r8
   87fd6:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   87fda:	18eb      	adds	r3, r5, r3
   87fdc:	465e      	mov	r6, fp
   87fde:	9307      	str	r3, [sp, #28]
   87fe0:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   87fe4:	9710      	str	r7, [sp, #64]	; 0x40
   87fe6:	4621      	mov	r1, r4
   87fe8:	9f19      	ldr	r7, [sp, #100]	; 0x64
   87fea:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
   87fee:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   87ff2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   87ff6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87ff8:	9513      	str	r5, [sp, #76]	; 0x4c
   87ffa:	f1b8 0f00 	cmp.w	r8, #0
   87ffe:	d02e      	beq.n	8805e <_svfprintf_r+0x1076>
   88000:	bb83      	cbnz	r3, 88064 <_svfprintf_r+0x107c>
   88002:	3f01      	subs	r7, #1
   88004:	f108 38ff 	add.w	r8, r8, #4294967295
   88008:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   8800a:	4449      	add	r1, r9
   8800c:	e9c2 3900 	strd	r3, r9, [r2]
   88010:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   88012:	912a      	str	r1, [sp, #168]	; 0xa8
   88014:	3301      	adds	r3, #1
   88016:	2b07      	cmp	r3, #7
   88018:	9329      	str	r3, [sp, #164]	; 0xa4
   8801a:	dc60      	bgt.n	880de <_svfprintf_r+0x10f6>
   8801c:	3208      	adds	r2, #8
   8801e:	9b07      	ldr	r3, [sp, #28]
   88020:	7838      	ldrb	r0, [r7, #0]
   88022:	1b9b      	subs	r3, r3, r6
   88024:	4283      	cmp	r3, r0
   88026:	bfa8      	it	ge
   88028:	4603      	movge	r3, r0
   8802a:	2b00      	cmp	r3, #0
   8802c:	461c      	mov	r4, r3
   8802e:	dd0b      	ble.n	88048 <_svfprintf_r+0x1060>
   88030:	9829      	ldr	r0, [sp, #164]	; 0xa4
   88032:	4419      	add	r1, r3
   88034:	3001      	adds	r0, #1
   88036:	2807      	cmp	r0, #7
   88038:	e9c2 6300 	strd	r6, r3, [r2]
   8803c:	912a      	str	r1, [sp, #168]	; 0xa8
   8803e:	9029      	str	r0, [sp, #164]	; 0xa4
   88040:	f300 8114 	bgt.w	8826c <_svfprintf_r+0x1284>
   88044:	7838      	ldrb	r0, [r7, #0]
   88046:	3208      	adds	r2, #8
   88048:	2c00      	cmp	r4, #0
   8804a:	bfb4      	ite	lt
   8804c:	4605      	movlt	r5, r0
   8804e:	1b05      	subge	r5, r0, r4
   88050:	2d00      	cmp	r5, #0
   88052:	dc0b      	bgt.n	8806c <_svfprintf_r+0x1084>
   88054:	4406      	add	r6, r0
   88056:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88058:	f1b8 0f00 	cmp.w	r8, #0
   8805c:	d1d0      	bne.n	88000 <_svfprintf_r+0x1018>
   8805e:	2b00      	cmp	r3, #0
   88060:	f000 8226 	beq.w	884b0 <_svfprintf_r+0x14c8>
   88064:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   88066:	3b01      	subs	r3, #1
   88068:	930f      	str	r3, [sp, #60]	; 0x3c
   8806a:	e7cd      	b.n	88008 <_svfprintf_r+0x1020>
   8806c:	2d10      	cmp	r5, #16
   8806e:	f340 849d 	ble.w	889ac <_svfprintf_r+0x19c4>
   88072:	2410      	movs	r4, #16
   88074:	9829      	ldr	r0, [sp, #164]	; 0xa4
   88076:	e004      	b.n	88082 <_svfprintf_r+0x109a>
   88078:	3d10      	subs	r5, #16
   8807a:	2d10      	cmp	r5, #16
   8807c:	f102 0208 	add.w	r2, r2, #8
   88080:	dd16      	ble.n	880b0 <_svfprintf_r+0x10c8>
   88082:	3001      	adds	r0, #1
   88084:	4b25      	ldr	r3, [pc, #148]	; (8811c <_svfprintf_r+0x1134>)
   88086:	3110      	adds	r1, #16
   88088:	2807      	cmp	r0, #7
   8808a:	e9c2 3400 	strd	r3, r4, [r2]
   8808e:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   88092:	ddf1      	ble.n	88078 <_svfprintf_r+0x1090>
   88094:	4659      	mov	r1, fp
   88096:	4650      	mov	r0, sl
   88098:	aa28      	add	r2, sp, #160	; 0xa0
   8809a:	f002 fd63 	bl	8ab64 <__ssprint_r>
   8809e:	2800      	cmp	r0, #0
   880a0:	f47f a905 	bne.w	872ae <_svfprintf_r+0x2c6>
   880a4:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
   880a8:	3d10      	subs	r5, #16
   880aa:	2d10      	cmp	r5, #16
   880ac:	aa2b      	add	r2, sp, #172	; 0xac
   880ae:	dce8      	bgt.n	88082 <_svfprintf_r+0x109a>
   880b0:	3001      	adds	r0, #1
   880b2:	4b1a      	ldr	r3, [pc, #104]	; (8811c <_svfprintf_r+0x1134>)
   880b4:	4429      	add	r1, r5
   880b6:	2807      	cmp	r0, #7
   880b8:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   880bc:	6055      	str	r5, [r2, #4]
   880be:	6013      	str	r3, [r2, #0]
   880c0:	f300 8241 	bgt.w	88546 <_svfprintf_r+0x155e>
   880c4:	7838      	ldrb	r0, [r7, #0]
   880c6:	3208      	adds	r2, #8
   880c8:	4406      	add	r6, r0
   880ca:	e7c4      	b.n	88056 <_svfprintf_r+0x106e>
   880cc:	f017 0310 	ands.w	r3, r7, #16
   880d0:	f000 80a0 	beq.w	88214 <_svfprintf_r+0x122c>
   880d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   880d6:	f853 4b04 	ldr.w	r4, [r3], #4
   880da:	930e      	str	r3, [sp, #56]	; 0x38
   880dc:	e70a      	b.n	87ef4 <_svfprintf_r+0xf0c>
   880de:	4659      	mov	r1, fp
   880e0:	4650      	mov	r0, sl
   880e2:	aa28      	add	r2, sp, #160	; 0xa0
   880e4:	f002 fd3e 	bl	8ab64 <__ssprint_r>
   880e8:	2800      	cmp	r0, #0
   880ea:	f47f a8e0 	bne.w	872ae <_svfprintf_r+0x2c6>
   880ee:	992a      	ldr	r1, [sp, #168]	; 0xa8
   880f0:	aa2b      	add	r2, sp, #172	; 0xac
   880f2:	e794      	b.n	8801e <_svfprintf_r+0x1036>
   880f4:	2300      	movs	r3, #0
   880f6:	f40b 6280 	and.w	r2, fp, #1024	; 0x400
   880fa:	9606      	str	r6, [sp, #24]
   880fc:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   88100:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   88104:	4692      	mov	sl, r2
   88106:	461e      	mov	r6, r3
   88108:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
   8810c:	af54      	add	r7, sp, #336	; 0x150
   8810e:	e014      	b.n	8813a <_svfprintf_r+0x1152>
   88110:	66666667 	.word	0x66666667
   88114:	0008dabc 	.word	0x0008dabc
   88118:	0008dad0 	.word	0x0008dad0
   8811c:	0008db00 	.word	0x0008db00
   88120:	2300      	movs	r3, #0
   88122:	4620      	mov	r0, r4
   88124:	4649      	mov	r1, r9
   88126:	220a      	movs	r2, #10
   88128:	f005 fb02 	bl	8d730 <__aeabi_uldivmod>
   8812c:	2c0a      	cmp	r4, #10
   8812e:	f179 0300 	sbcs.w	r3, r9, #0
   88132:	d31b      	bcc.n	8816c <_svfprintf_r+0x1184>
   88134:	4604      	mov	r4, r0
   88136:	4689      	mov	r9, r1
   88138:	462f      	mov	r7, r5
   8813a:	4620      	mov	r0, r4
   8813c:	220a      	movs	r2, #10
   8813e:	2300      	movs	r3, #0
   88140:	4649      	mov	r1, r9
   88142:	f005 faf5 	bl	8d730 <__aeabi_uldivmod>
   88146:	3230      	adds	r2, #48	; 0x30
   88148:	1e7d      	subs	r5, r7, #1
   8814a:	3601      	adds	r6, #1
   8814c:	f807 2c01 	strb.w	r2, [r7, #-1]
   88150:	f1ba 0f00 	cmp.w	sl, #0
   88154:	d0e4      	beq.n	88120 <_svfprintf_r+0x1138>
   88156:	f898 3000 	ldrb.w	r3, [r8]
   8815a:	429e      	cmp	r6, r3
   8815c:	d1e0      	bne.n	88120 <_svfprintf_r+0x1138>
   8815e:	2eff      	cmp	r6, #255	; 0xff
   88160:	d0de      	beq.n	88120 <_svfprintf_r+0x1138>
   88162:	2c0a      	cmp	r4, #10
   88164:	f179 0300 	sbcs.w	r3, r9, #0
   88168:	f080 8130 	bcs.w	883cc <_svfprintf_r+0x13e4>
   8816c:	ab54      	add	r3, sp, #336	; 0x150
   8816e:	1b5b      	subs	r3, r3, r5
   88170:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   88174:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
   88178:	9612      	str	r6, [sp, #72]	; 0x48
   8817a:	465f      	mov	r7, fp
   8817c:	9e06      	ldr	r6, [sp, #24]
   8817e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   88182:	930b      	str	r3, [sp, #44]	; 0x2c
   88184:	f7ff b82b 	b.w	871de <_svfprintf_r+0x1f6>
   88188:	990c      	ldr	r1, [sp, #48]	; 0x30
   8818a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8818c:	aa28      	add	r2, sp, #160	; 0xa0
   8818e:	931d      	str	r3, [sp, #116]	; 0x74
   88190:	f002 fce8 	bl	8ab64 <__ssprint_r>
   88194:	2800      	cmp	r0, #0
   88196:	f47f a88a 	bne.w	872ae <_svfprintf_r+0x2c6>
   8819a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   8819e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   881a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   881a2:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   881a6:	f7ff b8b8 	b.w	8731a <_svfprintf_r+0x332>
   881aa:	2301      	movs	r3, #1
   881ac:	f8c8 3004 	str.w	r3, [r8, #4]
   881b0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   881b2:	4abc      	ldr	r2, [pc, #752]	; (884a4 <_svfprintf_r+0x14bc>)
   881b4:	3301      	adds	r3, #1
   881b6:	3401      	adds	r4, #1
   881b8:	2b07      	cmp	r3, #7
   881ba:	942a      	str	r4, [sp, #168]	; 0xa8
   881bc:	9329      	str	r3, [sp, #164]	; 0xa4
   881be:	f8c8 2000 	str.w	r2, [r8]
   881c2:	f300 8117 	bgt.w	883f4 <_svfprintf_r+0x140c>
   881c6:	f108 0808 	add.w	r8, r8, #8
   881ca:	2900      	cmp	r1, #0
   881cc:	f040 8086 	bne.w	882dc <_svfprintf_r+0x12f4>
   881d0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   881d2:	f007 0301 	and.w	r3, r7, #1
   881d6:	4313      	orrs	r3, r2
   881d8:	f43f a8e0 	beq.w	8739c <_svfprintf_r+0x3b4>
   881dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   881de:	9917      	ldr	r1, [sp, #92]	; 0x5c
   881e0:	191a      	adds	r2, r3, r4
   881e2:	e9c8 1300 	strd	r1, r3, [r8]
   881e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   881e8:	922a      	str	r2, [sp, #168]	; 0xa8
   881ea:	3301      	adds	r3, #1
   881ec:	2b07      	cmp	r3, #7
   881ee:	9329      	str	r3, [sp, #164]	; 0xa4
   881f0:	f300 8137 	bgt.w	88462 <_svfprintf_r+0x147a>
   881f4:	f108 0808 	add.w	r8, r8, #8
   881f8:	9912      	ldr	r1, [sp, #72]	; 0x48
   881fa:	3301      	adds	r3, #1
   881fc:	188c      	adds	r4, r1, r2
   881fe:	2b07      	cmp	r3, #7
   88200:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   88204:	f8c8 5000 	str.w	r5, [r8]
   88208:	f8c8 1004 	str.w	r1, [r8, #4]
   8820c:	f77f a8c4 	ble.w	87398 <_svfprintf_r+0x3b0>
   88210:	f7ff bbac 	b.w	8796c <_svfprintf_r+0x984>
   88214:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   88218:	f000 80a5 	beq.w	88366 <_svfprintf_r+0x137e>
   8821c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8821e:	4699      	mov	r9, r3
   88220:	f852 4b04 	ldr.w	r4, [r2], #4
   88224:	920e      	str	r2, [sp, #56]	; 0x38
   88226:	b2a4      	uxth	r4, r4
   88228:	e664      	b.n	87ef4 <_svfprintf_r+0xf0c>
   8822a:	46bb      	mov	fp, r7
   8822c:	f7fe bfca 	b.w	871c4 <_svfprintf_r+0x1dc>
   88230:	990c      	ldr	r1, [sp, #48]	; 0x30
   88232:	980a      	ldr	r0, [sp, #40]	; 0x28
   88234:	aa28      	add	r2, sp, #160	; 0xa0
   88236:	f002 fc95 	bl	8ab64 <__ssprint_r>
   8823a:	2800      	cmp	r0, #0
   8823c:	f47f a837 	bne.w	872ae <_svfprintf_r+0x2c6>
   88240:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   88242:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   88246:	f7ff ba7b 	b.w	87740 <_svfprintf_r+0x758>
   8824a:	4614      	mov	r4, r2
   8824c:	463a      	mov	r2, r7
   8824e:	464f      	mov	r7, r9
   88250:	4691      	mov	r9, r2
   88252:	3301      	adds	r3, #1
   88254:	442c      	add	r4, r5
   88256:	2b07      	cmp	r3, #7
   88258:	f8c8 9000 	str.w	r9, [r8]
   8825c:	f8c8 5004 	str.w	r5, [r8, #4]
   88260:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   88264:	f77f a898 	ble.w	87398 <_svfprintf_r+0x3b0>
   88268:	f7ff bb80 	b.w	8796c <_svfprintf_r+0x984>
   8826c:	4659      	mov	r1, fp
   8826e:	4650      	mov	r0, sl
   88270:	aa28      	add	r2, sp, #160	; 0xa0
   88272:	f002 fc77 	bl	8ab64 <__ssprint_r>
   88276:	2800      	cmp	r0, #0
   88278:	f47f a819 	bne.w	872ae <_svfprintf_r+0x2c6>
   8827c:	7838      	ldrb	r0, [r7, #0]
   8827e:	992a      	ldr	r1, [sp, #168]	; 0xa8
   88280:	aa2b      	add	r2, sp, #172	; 0xac
   88282:	e6e1      	b.n	88048 <_svfprintf_r+0x1060>
   88284:	990c      	ldr	r1, [sp, #48]	; 0x30
   88286:	980a      	ldr	r0, [sp, #40]	; 0x28
   88288:	aa28      	add	r2, sp, #160	; 0xa0
   8828a:	f002 fc6b 	bl	8ab64 <__ssprint_r>
   8828e:	2800      	cmp	r0, #0
   88290:	f47f a80d 	bne.w	872ae <_svfprintf_r+0x2c6>
   88294:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   88296:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8829a:	f7ff b865 	b.w	87368 <_svfprintf_r+0x380>
   8829e:	2b01      	cmp	r3, #1
   882a0:	46bb      	mov	fp, r7
   882a2:	f47f a9f5 	bne.w	87690 <_svfprintf_r+0x6a8>
   882a6:	f7fe bf92 	b.w	871ce <_svfprintf_r+0x1e6>
   882aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   882ac:	9908      	ldr	r1, [sp, #32]
   882ae:	f853 2b04 	ldr.w	r2, [r3], #4
   882b2:	4655      	mov	r5, sl
   882b4:	6011      	str	r1, [r2, #0]
   882b6:	930e      	str	r3, [sp, #56]	; 0x38
   882b8:	f7ff b88e 	b.w	873d8 <_svfprintf_r+0x3f0>
   882bc:	2b06      	cmp	r3, #6
   882be:	4629      	mov	r1, r5
   882c0:	bf28      	it	cs
   882c2:	2306      	movcs	r3, #6
   882c4:	462a      	mov	r2, r5
   882c6:	9507      	str	r5, [sp, #28]
   882c8:	950d      	str	r5, [sp, #52]	; 0x34
   882ca:	9306      	str	r3, [sp, #24]
   882cc:	4d76      	ldr	r5, [pc, #472]	; (884a8 <_svfprintf_r+0x14c0>)
   882ce:	940e      	str	r4, [sp, #56]	; 0x38
   882d0:	930b      	str	r3, [sp, #44]	; 0x2c
   882d2:	910f      	str	r1, [sp, #60]	; 0x3c
   882d4:	9113      	str	r1, [sp, #76]	; 0x4c
   882d6:	9110      	str	r1, [sp, #64]	; 0x40
   882d8:	f7fe bf8e 	b.w	871f8 <_svfprintf_r+0x210>
   882dc:	9b16      	ldr	r3, [sp, #88]	; 0x58
   882de:	9817      	ldr	r0, [sp, #92]	; 0x5c
   882e0:	191a      	adds	r2, r3, r4
   882e2:	e9c8 0300 	strd	r0, r3, [r8]
   882e6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   882e8:	922a      	str	r2, [sp, #168]	; 0xa8
   882ea:	3301      	adds	r3, #1
   882ec:	2b07      	cmp	r3, #7
   882ee:	9329      	str	r3, [sp, #164]	; 0xa4
   882f0:	f300 80b7 	bgt.w	88462 <_svfprintf_r+0x147a>
   882f4:	f108 0808 	add.w	r8, r8, #8
   882f8:	2900      	cmp	r1, #0
   882fa:	f6bf af7d 	bge.w	881f8 <_svfprintf_r+0x1210>
   882fe:	424e      	negs	r6, r1
   88300:	3110      	adds	r1, #16
   88302:	f280 83a9 	bge.w	88a58 <_svfprintf_r+0x1a70>
   88306:	4641      	mov	r1, r8
   88308:	2410      	movs	r4, #16
   8830a:	46a8      	mov	r8, r5
   8830c:	f8df 919c 	ldr.w	r9, [pc, #412]	; 884ac <_svfprintf_r+0x14c4>
   88310:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   88314:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   88316:	e004      	b.n	88322 <_svfprintf_r+0x133a>
   88318:	3108      	adds	r1, #8
   8831a:	3e10      	subs	r6, #16
   8831c:	2e10      	cmp	r6, #16
   8831e:	f340 82a7 	ble.w	88870 <_svfprintf_r+0x1888>
   88322:	3301      	adds	r3, #1
   88324:	3210      	adds	r2, #16
   88326:	2b07      	cmp	r3, #7
   88328:	e9c1 9400 	strd	r9, r4, [r1]
   8832c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   88330:	ddf2      	ble.n	88318 <_svfprintf_r+0x1330>
   88332:	4629      	mov	r1, r5
   88334:	4658      	mov	r0, fp
   88336:	aa28      	add	r2, sp, #160	; 0xa0
   88338:	f002 fc14 	bl	8ab64 <__ssprint_r>
   8833c:	2800      	cmp	r0, #0
   8833e:	f47e afb6 	bne.w	872ae <_svfprintf_r+0x2c6>
   88342:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   88346:	a92b      	add	r1, sp, #172	; 0xac
   88348:	e7e7      	b.n	8831a <_svfprintf_r+0x1332>
   8834a:	4614      	mov	r4, r2
   8834c:	9f07      	ldr	r7, [sp, #28]
   8834e:	3601      	adds	r6, #1
   88350:	442c      	add	r4, r5
   88352:	2e07      	cmp	r6, #7
   88354:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   88358:	f8c8 9000 	str.w	r9, [r8]
   8835c:	f8c8 5004 	str.w	r5, [r8, #4]
   88360:	f77f aaf5 	ble.w	8794e <_svfprintf_r+0x966>
   88364:	e44e      	b.n	87c04 <_svfprintf_r+0xc1c>
   88366:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   8836a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8836c:	d066      	beq.n	8843c <_svfprintf_r+0x1454>
   8836e:	f853 4b04 	ldr.w	r4, [r3], #4
   88372:	4691      	mov	r9, r2
   88374:	930e      	str	r3, [sp, #56]	; 0x38
   88376:	b2e4      	uxtb	r4, r4
   88378:	e5bc      	b.n	87ef4 <_svfprintf_r+0xf0c>
   8837a:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   8837e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88380:	d057      	beq.n	88432 <_svfprintf_r+0x144a>
   88382:	f853 4b04 	ldr.w	r4, [r3], #4
   88386:	4691      	mov	r9, r2
   88388:	930e      	str	r3, [sp, #56]	; 0x38
   8838a:	b2e4      	uxtb	r4, r4
   8838c:	f7fe bf49 	b.w	87222 <_svfprintf_r+0x23a>
   88390:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   88392:	f8df 9118 	ldr.w	r9, [pc, #280]	; 884ac <_svfprintf_r+0x14c4>
   88396:	f7ff ba95 	b.w	878c4 <_svfprintf_r+0x8dc>
   8839a:	222d      	movs	r2, #45	; 0x2d
   8839c:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   883a0:	f7ff b857 	b.w	87452 <_svfprintf_r+0x46a>
   883a4:	4645      	mov	r5, r8
   883a6:	4690      	mov	r8, r2
   883a8:	463a      	mov	r2, r7
   883aa:	460c      	mov	r4, r1
   883ac:	464f      	mov	r7, r9
   883ae:	4691      	mov	r9, r2
   883b0:	3301      	adds	r3, #1
   883b2:	4434      	add	r4, r6
   883b4:	2b07      	cmp	r3, #7
   883b6:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   883ba:	f8c8 9000 	str.w	r9, [r8]
   883be:	f8c8 6004 	str.w	r6, [r8, #4]
   883c2:	dc5c      	bgt.n	8847e <_svfprintf_r+0x1496>
   883c4:	f108 0808 	add.w	r8, r8, #8
   883c8:	f7ff bb9e 	b.w	87b08 <_svfprintf_r+0xb20>
   883cc:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   883ce:	991b      	ldr	r1, [sp, #108]	; 0x6c
   883d0:	1aed      	subs	r5, r5, r3
   883d2:	461a      	mov	r2, r3
   883d4:	4628      	mov	r0, r5
   883d6:	f7fe fdd3 	bl	86f80 <strncpy>
   883da:	f898 3001 	ldrb.w	r3, [r8, #1]
   883de:	b10b      	cbz	r3, 883e4 <_svfprintf_r+0x13fc>
   883e0:	f108 0801 	add.w	r8, r8, #1
   883e4:	4620      	mov	r0, r4
   883e6:	4649      	mov	r1, r9
   883e8:	220a      	movs	r2, #10
   883ea:	2300      	movs	r3, #0
   883ec:	2600      	movs	r6, #0
   883ee:	f005 f99f 	bl	8d730 <__aeabi_uldivmod>
   883f2:	e69f      	b.n	88134 <_svfprintf_r+0x114c>
   883f4:	990c      	ldr	r1, [sp, #48]	; 0x30
   883f6:	980a      	ldr	r0, [sp, #40]	; 0x28
   883f8:	aa28      	add	r2, sp, #160	; 0xa0
   883fa:	f002 fbb3 	bl	8ab64 <__ssprint_r>
   883fe:	2800      	cmp	r0, #0
   88400:	f47e af55 	bne.w	872ae <_svfprintf_r+0x2c6>
   88404:	9922      	ldr	r1, [sp, #136]	; 0x88
   88406:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   88408:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8840c:	e6dd      	b.n	881ca <_svfprintf_r+0x11e2>
   8840e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   88410:	18ae      	adds	r6, r5, r2
   88412:	eba6 060b 	sub.w	r6, r6, fp
   88416:	1ad5      	subs	r5, r2, r3
   88418:	42ae      	cmp	r6, r5
   8841a:	bfa8      	it	ge
   8841c:	462e      	movge	r6, r5
   8841e:	f7ff bba6 	b.w	87b6e <_svfprintf_r+0xb86>
   88422:	f852 4b04 	ldr.w	r4, [r2], #4
   88426:	4689      	mov	r9, r1
   88428:	2301      	movs	r3, #1
   8842a:	920e      	str	r2, [sp, #56]	; 0x38
   8842c:	b2e4      	uxtb	r4, r4
   8842e:	f7fe befb 	b.w	87228 <_svfprintf_r+0x240>
   88432:	f853 4b04 	ldr.w	r4, [r3], #4
   88436:	930e      	str	r3, [sp, #56]	; 0x38
   88438:	f7fe bef3 	b.w	87222 <_svfprintf_r+0x23a>
   8843c:	f853 4b04 	ldr.w	r4, [r3], #4
   88440:	930e      	str	r3, [sp, #56]	; 0x38
   88442:	e557      	b.n	87ef4 <_svfprintf_r+0xf0c>
   88444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88446:	9908      	ldr	r1, [sp, #32]
   88448:	f853 2b04 	ldr.w	r2, [r3], #4
   8844c:	4655      	mov	r5, sl
   8844e:	8011      	strh	r1, [r2, #0]
   88450:	930e      	str	r3, [sp, #56]	; 0x38
   88452:	f7fe bfc1 	b.w	873d8 <_svfprintf_r+0x3f0>
   88456:	f344 19c0 	sbfx	r9, r4, #7, #1
   8845a:	464b      	mov	r3, r9
   8845c:	b264      	sxtb	r4, r4
   8845e:	f7fe bea4 	b.w	871aa <_svfprintf_r+0x1c2>
   88462:	990c      	ldr	r1, [sp, #48]	; 0x30
   88464:	980a      	ldr	r0, [sp, #40]	; 0x28
   88466:	aa28      	add	r2, sp, #160	; 0xa0
   88468:	f002 fb7c 	bl	8ab64 <__ssprint_r>
   8846c:	2800      	cmp	r0, #0
   8846e:	f47e af1e 	bne.w	872ae <_svfprintf_r+0x2c6>
   88472:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   88476:	9922      	ldr	r1, [sp, #136]	; 0x88
   88478:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8847c:	e73c      	b.n	882f8 <_svfprintf_r+0x1310>
   8847e:	990c      	ldr	r1, [sp, #48]	; 0x30
   88480:	980a      	ldr	r0, [sp, #40]	; 0x28
   88482:	aa28      	add	r2, sp, #160	; 0xa0
   88484:	f002 fb6e 	bl	8ab64 <__ssprint_r>
   88488:	2800      	cmp	r0, #0
   8848a:	f47e af10 	bne.w	872ae <_svfprintf_r+0x2c6>
   8848e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   88490:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   88494:	f7ff bb38 	b.w	87b08 <_svfprintf_r+0xb20>
   88498:	2306      	movs	r3, #6
   8849a:	9307      	str	r3, [sp, #28]
   8849c:	f026 0320 	bic.w	r3, r6, #32
   884a0:	9306      	str	r3, [sp, #24]
   884a2:	e470      	b.n	87d86 <_svfprintf_r+0xd9e>
   884a4:	0008daec 	.word	0x0008daec
   884a8:	0008dae4 	.word	0x0008dae4
   884ac:	0008db00 	.word	0x0008db00
   884b0:	e9dd 3512 	ldrd	r3, r5, [sp, #72]	; 0x48
   884b4:	18eb      	adds	r3, r5, r3
   884b6:	429e      	cmp	r6, r3
   884b8:	46b3      	mov	fp, r6
   884ba:	9719      	str	r7, [sp, #100]	; 0x64
   884bc:	4690      	mov	r8, r2
   884be:	460c      	mov	r4, r1
   884c0:	bf28      	it	cs
   884c2:	469b      	movcs	fp, r3
   884c4:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   884c8:	9f10      	ldr	r7, [sp, #64]	; 0x40
   884ca:	f7ff bb23 	b.w	87b14 <_svfprintf_r+0xb2c>
   884ce:	9b22      	ldr	r3, [sp, #136]	; 0x88
   884d0:	1cda      	adds	r2, r3, #3
   884d2:	9310      	str	r3, [sp, #64]	; 0x40
   884d4:	db02      	blt.n	884dc <_svfprintf_r+0x14f4>
   884d6:	9a07      	ldr	r2, [sp, #28]
   884d8:	4293      	cmp	r3, r2
   884da:	dd04      	ble.n	884e6 <_svfprintf_r+0x14fe>
   884dc:	3e02      	subs	r6, #2
   884de:	f026 0320 	bic.w	r3, r6, #32
   884e2:	9306      	str	r3, [sp, #24]
   884e4:	e48b      	b.n	87dfe <_svfprintf_r+0xe16>
   884e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   884e8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   884ea:	4293      	cmp	r3, r2
   884ec:	f2c0 80c2 	blt.w	88674 <_svfprintf_r+0x168c>
   884f0:	f019 0f01 	tst.w	r9, #1
   884f4:	f000 821d 	beq.w	88932 <_svfprintf_r+0x194a>
   884f8:	9a16      	ldr	r2, [sp, #88]	; 0x58
   884fa:	4413      	add	r3, r2
   884fc:	930b      	str	r3, [sp, #44]	; 0x2c
   884fe:	f419 6f80 	tst.w	r9, #1024	; 0x400
   88502:	f000 8214 	beq.w	8892e <_svfprintf_r+0x1946>
   88506:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88508:	2667      	movs	r6, #103	; 0x67
   8850a:	2b00      	cmp	r3, #0
   8850c:	dc76      	bgt.n	885fc <_svfprintf_r+0x1614>
   8850e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88510:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   88514:	9306      	str	r3, [sp, #24]
   88516:	2300      	movs	r3, #0
   88518:	930f      	str	r3, [sp, #60]	; 0x3c
   8851a:	9313      	str	r3, [sp, #76]	; 0x4c
   8851c:	e4cf      	b.n	87ebe <_svfprintf_r+0xed6>
   8851e:	222d      	movs	r2, #45	; 0x2d
   88520:	2300      	movs	r3, #0
   88522:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   88526:	9307      	str	r3, [sp, #28]
   88528:	f7fe be68 	b.w	871fc <_svfprintf_r+0x214>
   8852c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8852e:	980a      	ldr	r0, [sp, #40]	; 0x28
   88530:	aa28      	add	r2, sp, #160	; 0xa0
   88532:	f002 fb17 	bl	8ab64 <__ssprint_r>
   88536:	2800      	cmp	r0, #0
   88538:	f47e aeb9 	bne.w	872ae <_svfprintf_r+0x2c6>
   8853c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8853e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   88542:	f7ff bad8 	b.w	87af6 <_svfprintf_r+0xb0e>
   88546:	4659      	mov	r1, fp
   88548:	4650      	mov	r0, sl
   8854a:	aa28      	add	r2, sp, #160	; 0xa0
   8854c:	f002 fb0a 	bl	8ab64 <__ssprint_r>
   88550:	2800      	cmp	r0, #0
   88552:	f47e aeac 	bne.w	872ae <_svfprintf_r+0x2c6>
   88556:	7838      	ldrb	r0, [r7, #0]
   88558:	992a      	ldr	r1, [sp, #168]	; 0xa8
   8855a:	aa2b      	add	r2, sp, #172	; 0xac
   8855c:	4406      	add	r6, r0
   8855e:	e57a      	b.n	88056 <_svfprintf_r+0x106e>
   88560:	990c      	ldr	r1, [sp, #48]	; 0x30
   88562:	980a      	ldr	r0, [sp, #40]	; 0x28
   88564:	aa28      	add	r2, sp, #160	; 0xa0
   88566:	f002 fafd 	bl	8ab64 <__ssprint_r>
   8856a:	2800      	cmp	r0, #0
   8856c:	f47e ae9f 	bne.w	872ae <_svfprintf_r+0x2c6>
   88570:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88572:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   88574:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   88578:	f7ff bae1 	b.w	87b3e <_svfprintf_r+0xb56>
   8857c:	9907      	ldr	r1, [sp, #28]
   8857e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88580:	9101      	str	r1, [sp, #4]
   88582:	2103      	movs	r1, #3
   88584:	9100      	str	r1, [sp, #0]
   88586:	a926      	add	r1, sp, #152	; 0x98
   88588:	9104      	str	r1, [sp, #16]
   8858a:	a923      	add	r1, sp, #140	; 0x8c
   8858c:	9103      	str	r1, [sp, #12]
   8858e:	a922      	add	r1, sp, #136	; 0x88
   88590:	465a      	mov	r2, fp
   88592:	980a      	ldr	r0, [sp, #40]	; 0x28
   88594:	9102      	str	r1, [sp, #8]
   88596:	f000 fb1f 	bl	88bd8 <_dtoa_r>
   8859a:	7803      	ldrb	r3, [r0, #0]
   8859c:	4605      	mov	r5, r0
   8859e:	2b30      	cmp	r3, #48	; 0x30
   885a0:	f000 8216 	beq.w	889d0 <_svfprintf_r+0x19e8>
   885a4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   885a6:	9a07      	ldr	r2, [sp, #28]
   885a8:	46b9      	mov	r9, r7
   885aa:	4413      	add	r3, r2
   885ac:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   885ae:	18ec      	adds	r4, r5, r3
   885b0:	4658      	mov	r0, fp
   885b2:	2200      	movs	r2, #0
   885b4:	2300      	movs	r3, #0
   885b6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   885b8:	f005 f84a 	bl	8d650 <__aeabi_dcmpeq>
   885bc:	b108      	cbz	r0, 885c2 <_svfprintf_r+0x15da>
   885be:	4623      	mov	r3, r4
   885c0:	e411      	b.n	87de6 <_svfprintf_r+0xdfe>
   885c2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   885c4:	42a3      	cmp	r3, r4
   885c6:	f4bf ac0e 	bcs.w	87de6 <_svfprintf_r+0xdfe>
   885ca:	2130      	movs	r1, #48	; 0x30
   885cc:	1c5a      	adds	r2, r3, #1
   885ce:	9226      	str	r2, [sp, #152]	; 0x98
   885d0:	7019      	strb	r1, [r3, #0]
   885d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   885d4:	429c      	cmp	r4, r3
   885d6:	d8f9      	bhi.n	885cc <_svfprintf_r+0x15e4>
   885d8:	e405      	b.n	87de6 <_svfprintf_r+0xdfe>
   885da:	9a22      	ldr	r2, [sp, #136]	; 0x88
   885dc:	2a00      	cmp	r2, #0
   885de:	9210      	str	r2, [sp, #64]	; 0x40
   885e0:	f340 820e 	ble.w	88a00 <_svfprintf_r+0x1a18>
   885e4:	9907      	ldr	r1, [sp, #28]
   885e6:	f009 0301 	and.w	r3, r9, #1
   885ea:	430b      	orrs	r3, r1
   885ec:	f040 817e 	bne.w	888ec <_svfprintf_r+0x1904>
   885f0:	2666      	movs	r6, #102	; 0x66
   885f2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   885f4:	930b      	str	r3, [sp, #44]	; 0x2c
   885f6:	f419 6f80 	tst.w	r9, #1024	; 0x400
   885fa:	d088      	beq.n	8850e <_svfprintf_r+0x1526>
   885fc:	9919      	ldr	r1, [sp, #100]	; 0x64
   885fe:	780b      	ldrb	r3, [r1, #0]
   88600:	2bff      	cmp	r3, #255	; 0xff
   88602:	f000 8225 	beq.w	88a50 <_svfprintf_r+0x1a68>
   88606:	2400      	movs	r4, #0
   88608:	9a10      	ldr	r2, [sp, #64]	; 0x40
   8860a:	4620      	mov	r0, r4
   8860c:	e004      	b.n	88618 <_svfprintf_r+0x1630>
   8860e:	3001      	adds	r0, #1
   88610:	3101      	adds	r1, #1
   88612:	2bff      	cmp	r3, #255	; 0xff
   88614:	f000 8159 	beq.w	888ca <_svfprintf_r+0x18e2>
   88618:	4293      	cmp	r3, r2
   8861a:	f280 8156 	bge.w	888ca <_svfprintf_r+0x18e2>
   8861e:	1ad2      	subs	r2, r2, r3
   88620:	784b      	ldrb	r3, [r1, #1]
   88622:	2b00      	cmp	r3, #0
   88624:	d1f3      	bne.n	8860e <_svfprintf_r+0x1626>
   88626:	780b      	ldrb	r3, [r1, #0]
   88628:	3401      	adds	r4, #1
   8862a:	e7f2      	b.n	88612 <_svfprintf_r+0x162a>
   8862c:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   88630:	f7ff b9da 	b.w	879e8 <_svfprintf_r+0xa00>
   88634:	9b07      	ldr	r3, [sp, #28]
   88636:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   8863a:	940e      	str	r4, [sp, #56]	; 0x38
   8863c:	9306      	str	r3, [sp, #24]
   8863e:	930b      	str	r3, [sp, #44]	; 0x2c
   88640:	9007      	str	r0, [sp, #28]
   88642:	900f      	str	r0, [sp, #60]	; 0x3c
   88644:	9013      	str	r0, [sp, #76]	; 0x4c
   88646:	9010      	str	r0, [sp, #64]	; 0x40
   88648:	f7fe bdd6 	b.w	871f8 <_svfprintf_r+0x210>
   8864c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8864e:	980a      	ldr	r0, [sp, #40]	; 0x28
   88650:	aa28      	add	r2, sp, #160	; 0xa0
   88652:	f002 fa87 	bl	8ab64 <__ssprint_r>
   88656:	2800      	cmp	r0, #0
   88658:	f47e ae29 	bne.w	872ae <_svfprintf_r+0x2c6>
   8865c:	9d22      	ldr	r5, [sp, #136]	; 0x88
   8865e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88660:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   88662:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   88666:	1b5d      	subs	r5, r3, r5
   88668:	f7ff ba81 	b.w	87b6e <_svfprintf_r+0xb86>
   8866c:	2300      	movs	r3, #0
   8866e:	9307      	str	r3, [sp, #28]
   88670:	f7fe bd0b 	b.w	8708a <_svfprintf_r+0xa2>
   88674:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88676:	9a16      	ldr	r2, [sp, #88]	; 0x58
   88678:	189a      	adds	r2, r3, r2
   8867a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8867c:	920b      	str	r2, [sp, #44]	; 0x2c
   8867e:	2b00      	cmp	r3, #0
   88680:	f340 8185 	ble.w	8898e <_svfprintf_r+0x19a6>
   88684:	2667      	movs	r6, #103	; 0x67
   88686:	e7b6      	b.n	885f6 <_svfprintf_r+0x160e>
   88688:	2330      	movs	r3, #48	; 0x30
   8868a:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   8868e:	2358      	movs	r3, #88	; 0x58
   88690:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
   88694:	9b07      	ldr	r3, [sp, #28]
   88696:	f047 0402 	orr.w	r4, r7, #2
   8869a:	2b63      	cmp	r3, #99	; 0x63
   8869c:	f300 80c4 	bgt.w	88828 <_svfprintf_r+0x1840>
   886a0:	2300      	movs	r3, #0
   886a2:	ad3b      	add	r5, sp, #236	; 0xec
   886a4:	930d      	str	r3, [sp, #52]	; 0x34
   886a6:	f447 7381 	orr.w	r3, r7, #258	; 0x102
   886aa:	930f      	str	r3, [sp, #60]	; 0x3c
   886ac:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   886b0:	4613      	mov	r3, r2
   886b2:	2b00      	cmp	r3, #0
   886b4:	4627      	mov	r7, r4
   886b6:	f2c0 8084 	blt.w	887c2 <_svfprintf_r+0x17da>
   886ba:	930b      	str	r3, [sp, #44]	; 0x2c
   886bc:	2300      	movs	r3, #0
   886be:	468b      	mov	fp, r1
   886c0:	931d      	str	r3, [sp, #116]	; 0x74
   886c2:	f026 0320 	bic.w	r3, r6, #32
   886c6:	9306      	str	r3, [sp, #24]
   886c8:	2e61      	cmp	r6, #97	; 0x61
   886ca:	f000 8118 	beq.w	888fe <_svfprintf_r+0x1916>
   886ce:	2e41      	cmp	r6, #65	; 0x41
   886d0:	f47f ab67 	bne.w	87da2 <_svfprintf_r+0xdba>
   886d4:	aa22      	add	r2, sp, #136	; 0x88
   886d6:	4658      	mov	r0, fp
   886d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   886da:	f002 f9f9 	bl	8aad0 <frexp>
   886de:	2200      	movs	r2, #0
   886e0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   886e4:	f004 fd4c 	bl	8d180 <__aeabi_dmul>
   886e8:	4602      	mov	r2, r0
   886ea:	460b      	mov	r3, r1
   886ec:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   886f0:	2200      	movs	r2, #0
   886f2:	2300      	movs	r3, #0
   886f4:	f004 ffac 	bl	8d650 <__aeabi_dcmpeq>
   886f8:	b108      	cbz	r0, 886fe <_svfprintf_r+0x1716>
   886fa:	2301      	movs	r3, #1
   886fc:	9322      	str	r3, [sp, #136]	; 0x88
   886fe:	4bad      	ldr	r3, [pc, #692]	; (889b4 <_svfprintf_r+0x19cc>)
   88700:	930b      	str	r3, [sp, #44]	; 0x2c
   88702:	9b07      	ldr	r3, [sp, #28]
   88704:	e9cd a612 	strd	sl, r6, [sp, #72]	; 0x48
   88708:	e9cd 781e 	strd	r7, r8, [sp, #120]	; 0x78
   8870c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   88710:	46ab      	mov	fp, r5
   88712:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   88716:	f103 39ff 	add.w	r9, r3, #4294967295
   8871a:	9510      	str	r5, [sp, #64]	; 0x40
   8871c:	e006      	b.n	8872c <_svfprintf_r+0x1744>
   8871e:	2200      	movs	r2, #0
   88720:	2300      	movs	r3, #0
   88722:	f109 39ff 	add.w	r9, r9, #4294967295
   88726:	f004 ff93 	bl	8d650 <__aeabi_dcmpeq>
   8872a:	b9e8      	cbnz	r0, 88768 <_svfprintf_r+0x1780>
   8872c:	2200      	movs	r2, #0
   8872e:	4ba2      	ldr	r3, [pc, #648]	; (889b8 <_svfprintf_r+0x19d0>)
   88730:	4630      	mov	r0, r6
   88732:	4639      	mov	r1, r7
   88734:	f004 fd24 	bl	8d180 <__aeabi_dmul>
   88738:	460f      	mov	r7, r1
   8873a:	4606      	mov	r6, r0
   8873c:	f004 ffd0 	bl	8d6e0 <__aeabi_d2iz>
   88740:	4604      	mov	r4, r0
   88742:	f004 fcb3 	bl	8d0ac <__aeabi_i2d>
   88746:	460b      	mov	r3, r1
   88748:	4602      	mov	r2, r0
   8874a:	4639      	mov	r1, r7
   8874c:	4630      	mov	r0, r6
   8874e:	f004 fb5f 	bl	8ce10 <__aeabi_dsub>
   88752:	f81a 3004 	ldrb.w	r3, [sl, r4]
   88756:	f1b9 3fff 	cmp.w	r9, #4294967295
   8875a:	46d8      	mov	r8, fp
   8875c:	464d      	mov	r5, r9
   8875e:	4606      	mov	r6, r0
   88760:	460f      	mov	r7, r1
   88762:	f80b 3b01 	strb.w	r3, [fp], #1
   88766:	d1da      	bne.n	8871e <_svfprintf_r+0x1736>
   88768:	4630      	mov	r0, r6
   8876a:	4639      	mov	r1, r7
   8876c:	2200      	movs	r2, #0
   8876e:	4b93      	ldr	r3, [pc, #588]	; (889bc <_svfprintf_r+0x19d4>)
   88770:	46a9      	mov	r9, r5
   88772:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   88776:	9d10      	ldr	r5, [sp, #64]	; 0x40
   88778:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   8877c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88780:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
   88784:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   88786:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   88788:	f004 ff8a 	bl	8d6a0 <__aeabi_dcmpgt>
   8878c:	bb80      	cbnz	r0, 887f0 <_svfprintf_r+0x1808>
   8878e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   88792:	2200      	movs	r2, #0
   88794:	4b89      	ldr	r3, [pc, #548]	; (889bc <_svfprintf_r+0x19d4>)
   88796:	f004 ff5b 	bl	8d650 <__aeabi_dcmpeq>
   8879a:	b108      	cbz	r0, 887a0 <_svfprintf_r+0x17b8>
   8879c:	07e1      	lsls	r1, r4, #31
   8879e:	d427      	bmi.n	887f0 <_svfprintf_r+0x1808>
   887a0:	464b      	mov	r3, r9
   887a2:	2b00      	cmp	r3, #0
   887a4:	db06      	blt.n	887b4 <_svfprintf_r+0x17cc>
   887a6:	2230      	movs	r2, #48	; 0x30
   887a8:	3301      	adds	r3, #1
   887aa:	445b      	add	r3, fp
   887ac:	f80b 2b01 	strb.w	r2, [fp], #1
   887b0:	455b      	cmp	r3, fp
   887b2:	d1fb      	bne.n	887ac <_svfprintf_r+0x17c4>
   887b4:	ebab 0305 	sub.w	r3, fp, r5
   887b8:	46b9      	mov	r9, r7
   887ba:	9312      	str	r3, [sp, #72]	; 0x48
   887bc:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   887be:	f7ff bb14 	b.w	87dea <_svfprintf_r+0xe02>
   887c2:	f026 0320 	bic.w	r3, r6, #32
   887c6:	9306      	str	r3, [sp, #24]
   887c8:	222d      	movs	r2, #45	; 0x2d
   887ca:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   887ce:	469b      	mov	fp, r3
   887d0:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   887d4:	921d      	str	r2, [sp, #116]	; 0x74
   887d6:	930b      	str	r3, [sp, #44]	; 0x2c
   887d8:	e776      	b.n	886c8 <_svfprintf_r+0x16e0>
   887da:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   887dc:	f7ff b95c 	b.w	87a98 <_svfprintf_r+0xab0>
   887e0:	9b07      	ldr	r3, [sp, #28]
   887e2:	18ec      	adds	r4, r5, r3
   887e4:	e6e4      	b.n	885b0 <_svfprintf_r+0x15c8>
   887e6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   887e8:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 889c0 <_svfprintf_r+0x19d8>
   887ec:	f7ff b827 	b.w	8783e <_svfprintf_r+0x856>
   887f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   887f2:	9326      	str	r3, [sp, #152]	; 0x98
   887f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   887f6:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   887fa:	7bd9      	ldrb	r1, [r3, #15]
   887fc:	465b      	mov	r3, fp
   887fe:	428a      	cmp	r2, r1
   88800:	d109      	bne.n	88816 <_svfprintf_r+0x182e>
   88802:	2030      	movs	r0, #48	; 0x30
   88804:	f803 0c01 	strb.w	r0, [r3, #-1]
   88808:	9b26      	ldr	r3, [sp, #152]	; 0x98
   8880a:	1e5a      	subs	r2, r3, #1
   8880c:	9226      	str	r2, [sp, #152]	; 0x98
   8880e:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   88812:	4291      	cmp	r1, r2
   88814:	d0f6      	beq.n	88804 <_svfprintf_r+0x181c>
   88816:	2a39      	cmp	r2, #57	; 0x39
   88818:	bf0b      	itete	eq
   8881a:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
   8881c:	3201      	addne	r2, #1
   8881e:	7a92      	ldrbeq	r2, [r2, #10]
   88820:	b2d2      	uxtbne	r2, r2
   88822:	f803 2c01 	strb.w	r2, [r3, #-1]
   88826:	e7c5      	b.n	887b4 <_svfprintf_r+0x17cc>
   88828:	980a      	ldr	r0, [sp, #40]	; 0x28
   8882a:	1c59      	adds	r1, r3, #1
   8882c:	f001 faac 	bl	89d88 <_malloc_r>
   88830:	4605      	mov	r5, r0
   88832:	2800      	cmp	r0, #0
   88834:	f000 8117 	beq.w	88a66 <_svfprintf_r+0x1a7e>
   88838:	900d      	str	r0, [sp, #52]	; 0x34
   8883a:	e734      	b.n	886a6 <_svfprintf_r+0x16be>
   8883c:	2102      	movs	r1, #2
   8883e:	9100      	str	r1, [sp, #0]
   88840:	9907      	ldr	r1, [sp, #28]
   88842:	465a      	mov	r2, fp
   88844:	1c4c      	adds	r4, r1, #1
   88846:	a926      	add	r1, sp, #152	; 0x98
   88848:	9104      	str	r1, [sp, #16]
   8884a:	a923      	add	r1, sp, #140	; 0x8c
   8884c:	9103      	str	r1, [sp, #12]
   8884e:	a922      	add	r1, sp, #136	; 0x88
   88850:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   88852:	980a      	ldr	r0, [sp, #40]	; 0x28
   88854:	9401      	str	r4, [sp, #4]
   88856:	9102      	str	r1, [sp, #8]
   88858:	f000 f9be 	bl	88bd8 <_dtoa_r>
   8885c:	4605      	mov	r5, r0
   8885e:	46b9      	mov	r9, r7
   88860:	442c      	add	r4, r5
   88862:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   88864:	e6a4      	b.n	885b0 <_svfprintf_r+0x15c8>
   88866:	2330      	movs	r3, #48	; 0x30
   88868:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   8886c:	2378      	movs	r3, #120	; 0x78
   8886e:	e70f      	b.n	88690 <_svfprintf_r+0x16a8>
   88870:	4645      	mov	r5, r8
   88872:	4688      	mov	r8, r1
   88874:	3301      	adds	r3, #1
   88876:	4432      	add	r2, r6
   88878:	2b07      	cmp	r3, #7
   8887a:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   8887e:	f8c8 9000 	str.w	r9, [r8]
   88882:	f8c8 6004 	str.w	r6, [r8, #4]
   88886:	f77f acb5 	ble.w	881f4 <_svfprintf_r+0x120c>
   8888a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8888c:	980a      	ldr	r0, [sp, #40]	; 0x28
   8888e:	aa28      	add	r2, sp, #160	; 0xa0
   88890:	f002 f968 	bl	8ab64 <__ssprint_r>
   88894:	2800      	cmp	r0, #0
   88896:	f47e ad0a 	bne.w	872ae <_svfprintf_r+0x2c6>
   8889a:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   8889e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   888a2:	e4a9      	b.n	881f8 <_svfprintf_r+0x1210>
   888a4:	9b07      	ldr	r3, [sp, #28]
   888a6:	2b00      	cmp	r3, #0
   888a8:	bf08      	it	eq
   888aa:	2301      	moveq	r3, #1
   888ac:	9307      	str	r3, [sp, #28]
   888ae:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   888b2:	930f      	str	r3, [sp, #60]	; 0x3c
   888b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   888b6:	2b00      	cmp	r3, #0
   888b8:	f2c0 80b6 	blt.w	88a28 <_svfprintf_r+0x1a40>
   888bc:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
   888c0:	900d      	str	r0, [sp, #52]	; 0x34
   888c2:	930b      	str	r3, [sp, #44]	; 0x2c
   888c4:	901d      	str	r0, [sp, #116]	; 0x74
   888c6:	f7ff ba73 	b.w	87db0 <_svfprintf_r+0xdc8>
   888ca:	9119      	str	r1, [sp, #100]	; 0x64
   888cc:	9210      	str	r2, [sp, #64]	; 0x40
   888ce:	9013      	str	r0, [sp, #76]	; 0x4c
   888d0:	940f      	str	r4, [sp, #60]	; 0x3c
   888d2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   888d4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   888d6:	991c      	ldr	r1, [sp, #112]	; 0x70
   888d8:	4413      	add	r3, r2
   888da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   888dc:	fb01 2303 	mla	r3, r1, r3, r2
   888e0:	930b      	str	r3, [sp, #44]	; 0x2c
   888e2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   888e6:	9306      	str	r3, [sp, #24]
   888e8:	f7ff bae9 	b.w	87ebe <_svfprintf_r+0xed6>
   888ec:	9b16      	ldr	r3, [sp, #88]	; 0x58
   888ee:	2666      	movs	r6, #102	; 0x66
   888f0:	18d3      	adds	r3, r2, r3
   888f2:	4419      	add	r1, r3
   888f4:	910b      	str	r1, [sp, #44]	; 0x2c
   888f6:	e67e      	b.n	885f6 <_svfprintf_r+0x160e>
   888f8:	2300      	movs	r3, #0
   888fa:	930d      	str	r3, [sp, #52]	; 0x34
   888fc:	e764      	b.n	887c8 <_svfprintf_r+0x17e0>
   888fe:	aa22      	add	r2, sp, #136	; 0x88
   88900:	4658      	mov	r0, fp
   88902:	990b      	ldr	r1, [sp, #44]	; 0x2c
   88904:	f002 f8e4 	bl	8aad0 <frexp>
   88908:	2200      	movs	r2, #0
   8890a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   8890e:	f004 fc37 	bl	8d180 <__aeabi_dmul>
   88912:	4602      	mov	r2, r0
   88914:	460b      	mov	r3, r1
   88916:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   8891a:	2200      	movs	r2, #0
   8891c:	2300      	movs	r3, #0
   8891e:	f004 fe97 	bl	8d650 <__aeabi_dcmpeq>
   88922:	b108      	cbz	r0, 88928 <_svfprintf_r+0x1940>
   88924:	2301      	movs	r3, #1
   88926:	9322      	str	r3, [sp, #136]	; 0x88
   88928:	4b26      	ldr	r3, [pc, #152]	; (889c4 <_svfprintf_r+0x19dc>)
   8892a:	930b      	str	r3, [sp, #44]	; 0x2c
   8892c:	e6e9      	b.n	88702 <_svfprintf_r+0x171a>
   8892e:	2667      	movs	r6, #103	; 0x67
   88930:	e5ed      	b.n	8850e <_svfprintf_r+0x1526>
   88932:	9b10      	ldr	r3, [sp, #64]	; 0x40
   88934:	930b      	str	r3, [sp, #44]	; 0x2c
   88936:	e5e2      	b.n	884fe <_svfprintf_r+0x1516>
   88938:	9b15      	ldr	r3, [sp, #84]	; 0x54
   8893a:	2003      	movs	r0, #3
   8893c:	2b00      	cmp	r3, #0
   8893e:	bfb8      	it	lt
   88940:	222d      	movlt	r2, #45	; 0x2d
   88942:	f04f 0300 	mov.w	r3, #0
   88946:	bfa8      	it	ge
   88948:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
   8894c:	4619      	mov	r1, r3
   8894e:	930d      	str	r3, [sp, #52]	; 0x34
   88950:	4d1d      	ldr	r5, [pc, #116]	; (889c8 <_svfprintf_r+0x19e0>)
   88952:	4b1e      	ldr	r3, [pc, #120]	; (889cc <_svfprintf_r+0x19e4>)
   88954:	bfb8      	it	lt
   88956:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
   8895a:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   8895e:	9006      	str	r0, [sp, #24]
   88960:	f7fe bd7f 	b.w	87462 <_svfprintf_r+0x47a>
   88964:	2900      	cmp	r1, #0
   88966:	d144      	bne.n	889f2 <_svfprintf_r+0x1a0a>
   88968:	2230      	movs	r2, #48	; 0x30
   8896a:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
   8896e:	f10d 0293 	add.w	r2, sp, #147	; 0x93
   88972:	3330      	adds	r3, #48	; 0x30
   88974:	f802 3b01 	strb.w	r3, [r2], #1
   88978:	ab24      	add	r3, sp, #144	; 0x90
   8897a:	1ad3      	subs	r3, r2, r3
   8897c:	931a      	str	r3, [sp, #104]	; 0x68
   8897e:	f7ff ba87 	b.w	87e90 <_svfprintf_r+0xea8>
   88982:	f106 020f 	add.w	r2, r6, #15
   88986:	2101      	movs	r1, #1
   88988:	b2d2      	uxtb	r2, r2
   8898a:	f7ff ba41 	b.w	87e10 <_svfprintf_r+0xe28>
   8898e:	f1c3 0301 	rsb	r3, r3, #1
   88992:	441a      	add	r2, r3
   88994:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   88998:	2667      	movs	r6, #103	; 0x67
   8899a:	920b      	str	r2, [sp, #44]	; 0x2c
   8899c:	9306      	str	r3, [sp, #24]
   8899e:	e5ba      	b.n	88516 <_svfprintf_r+0x152e>
   889a0:	f019 0f01 	tst.w	r9, #1
   889a4:	f43f aa7f 	beq.w	87ea6 <_svfprintf_r+0xebe>
   889a8:	f7ff ba79 	b.w	87e9e <_svfprintf_r+0xeb6>
   889ac:	9829      	ldr	r0, [sp, #164]	; 0xa4
   889ae:	f7ff bb7f 	b.w	880b0 <_svfprintf_r+0x10c8>
   889b2:	bf00      	nop
   889b4:	0008dad0 	.word	0x0008dad0
   889b8:	40300000 	.word	0x40300000
   889bc:	3fe00000 	.word	0x3fe00000
   889c0:	0008db00 	.word	0x0008db00
   889c4:	0008dabc 	.word	0x0008dabc
   889c8:	0008dab4 	.word	0x0008dab4
   889cc:	0008dab8 	.word	0x0008dab8
   889d0:	4658      	mov	r0, fp
   889d2:	2200      	movs	r2, #0
   889d4:	2300      	movs	r3, #0
   889d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   889d8:	f004 fe3a 	bl	8d650 <__aeabi_dcmpeq>
   889dc:	2800      	cmp	r0, #0
   889de:	f47f ade1 	bne.w	885a4 <_svfprintf_r+0x15bc>
   889e2:	9b07      	ldr	r3, [sp, #28]
   889e4:	f1c3 0301 	rsb	r3, r3, #1
   889e8:	9322      	str	r3, [sp, #136]	; 0x88
   889ea:	e5dc      	b.n	885a6 <_svfprintf_r+0x15be>
   889ec:	f8df 9098 	ldr.w	r9, [pc, #152]	; 88a88 <_svfprintf_r+0x1aa0>
   889f0:	e4ad      	b.n	8834e <_svfprintf_r+0x1366>
   889f2:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   889f6:	e7bc      	b.n	88972 <_svfprintf_r+0x198a>
   889f8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   889fa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 88a88 <_svfprintf_r+0x1aa0>
   889fe:	e428      	b.n	88252 <_svfprintf_r+0x126a>
   88a00:	9a07      	ldr	r2, [sp, #28]
   88a02:	f009 0901 	and.w	r9, r9, #1
   88a06:	ea59 0302 	orrs.w	r3, r9, r2
   88a0a:	d104      	bne.n	88a16 <_svfprintf_r+0x1a2e>
   88a0c:	2301      	movs	r3, #1
   88a0e:	2666      	movs	r6, #102	; 0x66
   88a10:	9306      	str	r3, [sp, #24]
   88a12:	930b      	str	r3, [sp, #44]	; 0x2c
   88a14:	e57f      	b.n	88516 <_svfprintf_r+0x152e>
   88a16:	9b16      	ldr	r3, [sp, #88]	; 0x58
   88a18:	2666      	movs	r6, #102	; 0x66
   88a1a:	3301      	adds	r3, #1
   88a1c:	441a      	add	r2, r3
   88a1e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   88a22:	920b      	str	r2, [sp, #44]	; 0x2c
   88a24:	9306      	str	r3, [sp, #24]
   88a26:	e576      	b.n	88516 <_svfprintf_r+0x152e>
   88a28:	900d      	str	r0, [sp, #52]	; 0x34
   88a2a:	e6cd      	b.n	887c8 <_svfprintf_r+0x17e0>
   88a2c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88a2e:	f89a 6001 	ldrb.w	r6, [sl, #1]
   88a32:	4692      	mov	sl, r2
   88a34:	f853 2b04 	ldr.w	r2, [r3], #4
   88a38:	930e      	str	r3, [sp, #56]	; 0x38
   88a3a:	ea42 73e2 	orr.w	r3, r2, r2, asr #31
   88a3e:	9307      	str	r3, [sp, #28]
   88a40:	f7fe bb21 	b.w	87086 <_svfprintf_r+0x9e>
   88a44:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   88a46:	f8df 9040 	ldr.w	r9, [pc, #64]	; 88a88 <_svfprintf_r+0x1aa0>
   88a4a:	e4b1      	b.n	883b0 <_svfprintf_r+0x13c8>
   88a4c:	9c07      	ldr	r4, [sp, #28]
   88a4e:	e706      	b.n	8885e <_svfprintf_r+0x1876>
   88a50:	2300      	movs	r3, #0
   88a52:	930f      	str	r3, [sp, #60]	; 0x3c
   88a54:	9313      	str	r3, [sp, #76]	; 0x4c
   88a56:	e73c      	b.n	888d2 <_svfprintf_r+0x18ea>
   88a58:	f8df 902c 	ldr.w	r9, [pc, #44]	; 88a88 <_svfprintf_r+0x1aa0>
   88a5c:	e70a      	b.n	88874 <_svfprintf_r+0x188c>
   88a5e:	2302      	movs	r3, #2
   88a60:	931a      	str	r3, [sp, #104]	; 0x68
   88a62:	f7ff ba15 	b.w	87e90 <_svfprintf_r+0xea8>
   88a66:	990c      	ldr	r1, [sp, #48]	; 0x30
   88a68:	898b      	ldrh	r3, [r1, #12]
   88a6a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   88a6e:	4613      	mov	r3, r2
   88a70:	818a      	strh	r2, [r1, #12]
   88a72:	f7fe bc24 	b.w	872be <_svfprintf_r+0x2d6>
   88a76:	f04f 32ff 	mov.w	r2, #4294967295
   88a7a:	230c      	movs	r3, #12
   88a7c:	9208      	str	r2, [sp, #32]
   88a7e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   88a80:	6013      	str	r3, [r2, #0]
   88a82:	f7fe bc23 	b.w	872cc <_svfprintf_r+0x2e4>
   88a86:	bf00      	nop
   88a88:	0008db00 	.word	0x0008db00

00088a8c <register_fini>:
   88a8c:	4b02      	ldr	r3, [pc, #8]	; (88a98 <register_fini+0xc>)
   88a8e:	b113      	cbz	r3, 88a96 <register_fini+0xa>
   88a90:	4802      	ldr	r0, [pc, #8]	; (88a9c <register_fini+0x10>)
   88a92:	f000 b805 	b.w	88aa0 <atexit>
   88a96:	4770      	bx	lr
   88a98:	00000000 	.word	0x00000000
   88a9c:	00089aa5 	.word	0x00089aa5

00088aa0 <atexit>:
   88aa0:	2300      	movs	r3, #0
   88aa2:	4601      	mov	r1, r0
   88aa4:	461a      	mov	r2, r3
   88aa6:	4618      	mov	r0, r3
   88aa8:	f002 b8da 	b.w	8ac60 <__register_exitproc>

00088aac <quorem>:
   88aac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88ab0:	6903      	ldr	r3, [r0, #16]
   88ab2:	690c      	ldr	r4, [r1, #16]
   88ab4:	b085      	sub	sp, #20
   88ab6:	42a3      	cmp	r3, r4
   88ab8:	f2c0 8089 	blt.w	88bce <quorem+0x122>
   88abc:	3c01      	subs	r4, #1
   88abe:	f101 0514 	add.w	r5, r1, #20
   88ac2:	00a3      	lsls	r3, r4, #2
   88ac4:	f100 0814 	add.w	r8, r0, #20
   88ac8:	9301      	str	r3, [sp, #4]
   88aca:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   88ace:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   88ad2:	3301      	adds	r3, #1
   88ad4:	468a      	mov	sl, r1
   88ad6:	429a      	cmp	r2, r3
   88ad8:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   88adc:	4681      	mov	r9, r0
   88ade:	fbb2 f6f3 	udiv	r6, r2, r3
   88ae2:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   88ae6:	9102      	str	r1, [sp, #8]
   88ae8:	d33a      	bcc.n	88b60 <quorem+0xb4>
   88aea:	2100      	movs	r1, #0
   88aec:	46ae      	mov	lr, r5
   88aee:	4640      	mov	r0, r8
   88af0:	460a      	mov	r2, r1
   88af2:	46a3      	mov	fp, r4
   88af4:	9503      	str	r5, [sp, #12]
   88af6:	f85e 5b04 	ldr.w	r5, [lr], #4
   88afa:	6804      	ldr	r4, [r0, #0]
   88afc:	b2ab      	uxth	r3, r5
   88afe:	fb06 1303 	mla	r3, r6, r3, r1
   88b02:	0c2d      	lsrs	r5, r5, #16
   88b04:	0c19      	lsrs	r1, r3, #16
   88b06:	fb06 1105 	mla	r1, r6, r5, r1
   88b0a:	b29b      	uxth	r3, r3
   88b0c:	1ad2      	subs	r2, r2, r3
   88b0e:	fa1f fc84 	uxth.w	ip, r4
   88b12:	4494      	add	ip, r2
   88b14:	b28a      	uxth	r2, r1
   88b16:	ebc2 4214 	rsb	r2, r2, r4, lsr #16
   88b1a:	eb02 422c 	add.w	r2, r2, ip, asr #16
   88b1e:	fa1f fc8c 	uxth.w	ip, ip
   88b22:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   88b26:	4577      	cmp	r7, lr
   88b28:	f840 3b04 	str.w	r3, [r0], #4
   88b2c:	ea4f 4111 	mov.w	r1, r1, lsr #16
   88b30:	ea4f 4222 	mov.w	r2, r2, asr #16
   88b34:	d2df      	bcs.n	88af6 <quorem+0x4a>
   88b36:	9b01      	ldr	r3, [sp, #4]
   88b38:	465c      	mov	r4, fp
   88b3a:	f858 3003 	ldr.w	r3, [r8, r3]
   88b3e:	9d03      	ldr	r5, [sp, #12]
   88b40:	b973      	cbnz	r3, 88b60 <quorem+0xb4>
   88b42:	9b02      	ldr	r3, [sp, #8]
   88b44:	3b04      	subs	r3, #4
   88b46:	4598      	cmp	r8, r3
   88b48:	d304      	bcc.n	88b54 <quorem+0xa8>
   88b4a:	e007      	b.n	88b5c <quorem+0xb0>
   88b4c:	4598      	cmp	r8, r3
   88b4e:	f104 34ff 	add.w	r4, r4, #4294967295
   88b52:	d203      	bcs.n	88b5c <quorem+0xb0>
   88b54:	f853 2904 	ldr.w	r2, [r3], #-4
   88b58:	2a00      	cmp	r2, #0
   88b5a:	d0f7      	beq.n	88b4c <quorem+0xa0>
   88b5c:	f8c9 4010 	str.w	r4, [r9, #16]
   88b60:	4651      	mov	r1, sl
   88b62:	4648      	mov	r0, r9
   88b64:	f001 fe8c 	bl	8a880 <__mcmp>
   88b68:	2800      	cmp	r0, #0
   88b6a:	db2c      	blt.n	88bc6 <quorem+0x11a>
   88b6c:	4640      	mov	r0, r8
   88b6e:	2300      	movs	r3, #0
   88b70:	3601      	adds	r6, #1
   88b72:	f855 1b04 	ldr.w	r1, [r5], #4
   88b76:	f8d0 c000 	ldr.w	ip, [r0]
   88b7a:	b28a      	uxth	r2, r1
   88b7c:	1a9a      	subs	r2, r3, r2
   88b7e:	fa1f fe8c 	uxth.w	lr, ip
   88b82:	0c0b      	lsrs	r3, r1, #16
   88b84:	4472      	add	r2, lr
   88b86:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   88b8a:	eb03 4322 	add.w	r3, r3, r2, asr #16
   88b8e:	b292      	uxth	r2, r2
   88b90:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   88b94:	42af      	cmp	r7, r5
   88b96:	f840 2b04 	str.w	r2, [r0], #4
   88b9a:	ea4f 4323 	mov.w	r3, r3, asr #16
   88b9e:	d2e8      	bcs.n	88b72 <quorem+0xc6>
   88ba0:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   88ba4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   88ba8:	b96a      	cbnz	r2, 88bc6 <quorem+0x11a>
   88baa:	3b04      	subs	r3, #4
   88bac:	4598      	cmp	r8, r3
   88bae:	d304      	bcc.n	88bba <quorem+0x10e>
   88bb0:	e007      	b.n	88bc2 <quorem+0x116>
   88bb2:	4598      	cmp	r8, r3
   88bb4:	f104 34ff 	add.w	r4, r4, #4294967295
   88bb8:	d203      	bcs.n	88bc2 <quorem+0x116>
   88bba:	f853 2904 	ldr.w	r2, [r3], #-4
   88bbe:	2a00      	cmp	r2, #0
   88bc0:	d0f7      	beq.n	88bb2 <quorem+0x106>
   88bc2:	f8c9 4010 	str.w	r4, [r9, #16]
   88bc6:	4630      	mov	r0, r6
   88bc8:	b005      	add	sp, #20
   88bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88bce:	2000      	movs	r0, #0
   88bd0:	b005      	add	sp, #20
   88bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88bd6:	bf00      	nop

00088bd8 <_dtoa_r>:
   88bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88bdc:	4690      	mov	r8, r2
   88bde:	4699      	mov	r9, r3
   88be0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   88be2:	b099      	sub	sp, #100	; 0x64
   88be4:	4604      	mov	r4, r0
   88be6:	e9cd 8904 	strd	r8, r9, [sp, #16]
   88bea:	9d25      	ldr	r5, [sp, #148]	; 0x94
   88bec:	b141      	cbz	r1, 88c00 <_dtoa_r+0x28>
   88bee:	2301      	movs	r3, #1
   88bf0:	6c42      	ldr	r2, [r0, #68]	; 0x44
   88bf2:	4093      	lsls	r3, r2
   88bf4:	608b      	str	r3, [r1, #8]
   88bf6:	604a      	str	r2, [r1, #4]
   88bf8:	f001 fbec 	bl	8a3d4 <_Bfree>
   88bfc:	2300      	movs	r3, #0
   88bfe:	6423      	str	r3, [r4, #64]	; 0x40
   88c00:	f1b9 0a00 	subs.w	sl, r9, #0
   88c04:	bfb4      	ite	lt
   88c06:	2301      	movlt	r3, #1
   88c08:	2300      	movge	r3, #0
   88c0a:	602b      	str	r3, [r5, #0]
   88c0c:	4b76      	ldr	r3, [pc, #472]	; (88de8 <_dtoa_r+0x210>)
   88c0e:	bfbc      	itt	lt
   88c10:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   88c14:	f8cd a014 	strlt.w	sl, [sp, #20]
   88c18:	ea33 030a 	bics.w	r3, r3, sl
   88c1c:	f000 80aa 	beq.w	88d74 <_dtoa_r+0x19c>
   88c20:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   88c24:	4610      	mov	r0, r2
   88c26:	4619      	mov	r1, r3
   88c28:	2200      	movs	r2, #0
   88c2a:	2300      	movs	r3, #0
   88c2c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   88c30:	f004 fd0e 	bl	8d650 <__aeabi_dcmpeq>
   88c34:	4607      	mov	r7, r0
   88c36:	b170      	cbz	r0, 88c56 <_dtoa_r+0x7e>
   88c38:	2301      	movs	r3, #1
   88c3a:	9a24      	ldr	r2, [sp, #144]	; 0x90
   88c3c:	6013      	str	r3, [r2, #0]
   88c3e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88c40:	2b00      	cmp	r3, #0
   88c42:	f000 82e6 	beq.w	89212 <_dtoa_r+0x63a>
   88c46:	4869      	ldr	r0, [pc, #420]	; (88dec <_dtoa_r+0x214>)
   88c48:	6018      	str	r0, [r3, #0]
   88c4a:	1e43      	subs	r3, r0, #1
   88c4c:	9303      	str	r3, [sp, #12]
   88c4e:	9803      	ldr	r0, [sp, #12]
   88c50:	b019      	add	sp, #100	; 0x64
   88c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88c56:	ab16      	add	r3, sp, #88	; 0x58
   88c58:	9301      	str	r3, [sp, #4]
   88c5a:	ab17      	add	r3, sp, #92	; 0x5c
   88c5c:	9300      	str	r3, [sp, #0]
   88c5e:	4620      	mov	r0, r4
   88c60:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   88c64:	f001 fed2 	bl	8aa0c <__d2b>
   88c68:	ea5f 561a 	movs.w	r6, sl, lsr #20
   88c6c:	4605      	mov	r5, r0
   88c6e:	f040 8097 	bne.w	88da0 <_dtoa_r+0x1c8>
   88c72:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   88c76:	443e      	add	r6, r7
   88c78:	f206 4032 	addw	r0, r6, #1074	; 0x432
   88c7c:	2820      	cmp	r0, #32
   88c7e:	f340 83b7 	ble.w	893f0 <_dtoa_r+0x818>
   88c82:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   88c86:	fa0a fa00 	lsl.w	sl, sl, r0
   88c8a:	f206 4012 	addw	r0, r6, #1042	; 0x412
   88c8e:	fa28 f000 	lsr.w	r0, r8, r0
   88c92:	ea4a 0000 	orr.w	r0, sl, r0
   88c96:	f004 f9f9 	bl	8d08c <__aeabi_ui2d>
   88c9a:	2301      	movs	r3, #1
   88c9c:	3e01      	subs	r6, #1
   88c9e:	930f      	str	r3, [sp, #60]	; 0x3c
   88ca0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   88ca4:	2200      	movs	r2, #0
   88ca6:	4b52      	ldr	r3, [pc, #328]	; (88df0 <_dtoa_r+0x218>)
   88ca8:	f004 f8b2 	bl	8ce10 <__aeabi_dsub>
   88cac:	a348      	add	r3, pc, #288	; (adr r3, 88dd0 <_dtoa_r+0x1f8>)
   88cae:	e9d3 2300 	ldrd	r2, r3, [r3]
   88cb2:	f004 fa65 	bl	8d180 <__aeabi_dmul>
   88cb6:	a348      	add	r3, pc, #288	; (adr r3, 88dd8 <_dtoa_r+0x200>)
   88cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   88cbc:	f004 f8aa 	bl	8ce14 <__adddf3>
   88cc0:	4680      	mov	r8, r0
   88cc2:	4630      	mov	r0, r6
   88cc4:	4689      	mov	r9, r1
   88cc6:	f004 f9f1 	bl	8d0ac <__aeabi_i2d>
   88cca:	a345      	add	r3, pc, #276	; (adr r3, 88de0 <_dtoa_r+0x208>)
   88ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
   88cd0:	f004 fa56 	bl	8d180 <__aeabi_dmul>
   88cd4:	4602      	mov	r2, r0
   88cd6:	460b      	mov	r3, r1
   88cd8:	4640      	mov	r0, r8
   88cda:	4649      	mov	r1, r9
   88cdc:	f004 f89a 	bl	8ce14 <__adddf3>
   88ce0:	4680      	mov	r8, r0
   88ce2:	4689      	mov	r9, r1
   88ce4:	f004 fcfc 	bl	8d6e0 <__aeabi_d2iz>
   88ce8:	2200      	movs	r2, #0
   88cea:	4683      	mov	fp, r0
   88cec:	2300      	movs	r3, #0
   88cee:	4640      	mov	r0, r8
   88cf0:	4649      	mov	r1, r9
   88cf2:	f004 fcb7 	bl	8d664 <__aeabi_dcmplt>
   88cf6:	2800      	cmp	r0, #0
   88cf8:	f040 827e 	bne.w	891f8 <_dtoa_r+0x620>
   88cfc:	f1bb 0f16 	cmp.w	fp, #22
   88d00:	f200 826d 	bhi.w	891de <_dtoa_r+0x606>
   88d04:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   88d08:	4b3a      	ldr	r3, [pc, #232]	; (88df4 <_dtoa_r+0x21c>)
   88d0a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   88d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
   88d12:	f004 fca7 	bl	8d664 <__aeabi_dcmplt>
   88d16:	2800      	cmp	r0, #0
   88d18:	d072      	beq.n	88e00 <_dtoa_r+0x228>
   88d1a:	2300      	movs	r3, #0
   88d1c:	1bbe      	subs	r6, r7, r6
   88d1e:	930e      	str	r3, [sp, #56]	; 0x38
   88d20:	1e73      	subs	r3, r6, #1
   88d22:	f10b 3bff 	add.w	fp, fp, #4294967295
   88d26:	9306      	str	r3, [sp, #24]
   88d28:	f100 8260 	bmi.w	891ec <_dtoa_r+0x614>
   88d2c:	2300      	movs	r3, #0
   88d2e:	9309      	str	r3, [sp, #36]	; 0x24
   88d30:	f1bb 0f00 	cmp.w	fp, #0
   88d34:	da6b      	bge.n	88e0e <_dtoa_r+0x236>
   88d36:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88d38:	f8cd b01c 	str.w	fp, [sp, #28]
   88d3c:	eba3 030b 	sub.w	r3, r3, fp
   88d40:	9309      	str	r3, [sp, #36]	; 0x24
   88d42:	f1cb 0300 	rsb	r3, fp, #0
   88d46:	930d      	str	r3, [sp, #52]	; 0x34
   88d48:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88d4a:	f04f 0b00 	mov.w	fp, #0
   88d4e:	2b09      	cmp	r3, #9
   88d50:	d866      	bhi.n	88e20 <_dtoa_r+0x248>
   88d52:	2b05      	cmp	r3, #5
   88d54:	f340 834a 	ble.w	893ec <_dtoa_r+0x814>
   88d58:	2600      	movs	r6, #0
   88d5a:	3b04      	subs	r3, #4
   88d5c:	9322      	str	r3, [sp, #136]	; 0x88
   88d5e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88d60:	3b02      	subs	r3, #2
   88d62:	2b03      	cmp	r3, #3
   88d64:	f200 866c 	bhi.w	89a40 <_dtoa_r+0xe68>
   88d68:	e8df f013 	tbh	[pc, r3, lsl #1]
   88d6c:	045e0461 	.word	0x045e0461
   88d70:	04380455 	.word	0x04380455
   88d74:	f242 730f 	movw	r3, #9999	; 0x270f
   88d78:	9a24      	ldr	r2, [sp, #144]	; 0x90
   88d7a:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   88d7e:	6013      	str	r3, [r2, #0]
   88d80:	ea5a 0308 	orrs.w	r3, sl, r8
   88d84:	d11a      	bne.n	88dbc <_dtoa_r+0x1e4>
   88d86:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88d88:	2b00      	cmp	r3, #0
   88d8a:	f000 8668 	beq.w	89a5e <_dtoa_r+0xe86>
   88d8e:	4b1a      	ldr	r3, [pc, #104]	; (88df8 <_dtoa_r+0x220>)
   88d90:	9303      	str	r3, [sp, #12]
   88d92:	3308      	adds	r3, #8
   88d94:	9a26      	ldr	r2, [sp, #152]	; 0x98
   88d96:	9803      	ldr	r0, [sp, #12]
   88d98:	6013      	str	r3, [r2, #0]
   88d9a:	b019      	add	sp, #100	; 0x64
   88d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88da0:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   88da4:	f3c2 0313 	ubfx	r3, r2, #0, #20
   88da8:	4608      	mov	r0, r1
   88daa:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   88dae:	970f      	str	r7, [sp, #60]	; 0x3c
   88db0:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   88db4:	9f16      	ldr	r7, [sp, #88]	; 0x58
   88db6:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   88dba:	e773      	b.n	88ca4 <_dtoa_r+0xcc>
   88dbc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88dbe:	2b00      	cmp	r3, #0
   88dc0:	f040 83ef 	bne.w	895a2 <_dtoa_r+0x9ca>
   88dc4:	4b0d      	ldr	r3, [pc, #52]	; (88dfc <_dtoa_r+0x224>)
   88dc6:	9303      	str	r3, [sp, #12]
   88dc8:	e741      	b.n	88c4e <_dtoa_r+0x76>
   88dca:	bf00      	nop
   88dcc:	f3af 8000 	nop.w
   88dd0:	636f4361 	.word	0x636f4361
   88dd4:	3fd287a7 	.word	0x3fd287a7
   88dd8:	8b60c8b3 	.word	0x8b60c8b3
   88ddc:	3fc68a28 	.word	0x3fc68a28
   88de0:	509f79fb 	.word	0x509f79fb
   88de4:	3fd34413 	.word	0x3fd34413
   88de8:	7ff00000 	.word	0x7ff00000
   88dec:	0008daed 	.word	0x0008daed
   88df0:	3ff80000 	.word	0x3ff80000
   88df4:	0008dc60 	.word	0x0008dc60
   88df8:	0008db14 	.word	0x0008db14
   88dfc:	0008db10 	.word	0x0008db10
   88e00:	1bbe      	subs	r6, r7, r6
   88e02:	1e73      	subs	r3, r6, #1
   88e04:	9306      	str	r3, [sp, #24]
   88e06:	f100 848a 	bmi.w	8971e <_dtoa_r+0xb46>
   88e0a:	900e      	str	r0, [sp, #56]	; 0x38
   88e0c:	9009      	str	r0, [sp, #36]	; 0x24
   88e0e:	9b06      	ldr	r3, [sp, #24]
   88e10:	445b      	add	r3, fp
   88e12:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   88e16:	2300      	movs	r3, #0
   88e18:	930d      	str	r3, [sp, #52]	; 0x34
   88e1a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88e1c:	2b09      	cmp	r3, #9
   88e1e:	d998      	bls.n	88d52 <_dtoa_r+0x17a>
   88e20:	2300      	movs	r3, #0
   88e22:	9322      	str	r3, [sp, #136]	; 0x88
   88e24:	f04f 33ff 	mov.w	r3, #4294967295
   88e28:	2601      	movs	r6, #1
   88e2a:	9308      	str	r3, [sp, #32]
   88e2c:	2300      	movs	r3, #0
   88e2e:	960c      	str	r6, [sp, #48]	; 0x30
   88e30:	9323      	str	r3, [sp, #140]	; 0x8c
   88e32:	2100      	movs	r1, #0
   88e34:	9b08      	ldr	r3, [sp, #32]
   88e36:	6461      	str	r1, [r4, #68]	; 0x44
   88e38:	9312      	str	r3, [sp, #72]	; 0x48
   88e3a:	4620      	mov	r0, r4
   88e3c:	f001 faa4 	bl	8a388 <_Balloc>
   88e40:	9003      	str	r0, [sp, #12]
   88e42:	2800      	cmp	r0, #0
   88e44:	f000 8604 	beq.w	89a50 <_dtoa_r+0xe78>
   88e48:	9b03      	ldr	r3, [sp, #12]
   88e4a:	6423      	str	r3, [r4, #64]	; 0x40
   88e4c:	9b08      	ldr	r3, [sp, #32]
   88e4e:	2b0e      	cmp	r3, #14
   88e50:	f200 8114 	bhi.w	8907c <_dtoa_r+0x4a4>
   88e54:	2e00      	cmp	r6, #0
   88e56:	f000 8111 	beq.w	8907c <_dtoa_r+0x4a4>
   88e5a:	9907      	ldr	r1, [sp, #28]
   88e5c:	2900      	cmp	r1, #0
   88e5e:	f340 8460 	ble.w	89722 <_dtoa_r+0xb4a>
   88e62:	4baf      	ldr	r3, [pc, #700]	; (89120 <_dtoa_r+0x548>)
   88e64:	f001 020f 	and.w	r2, r1, #15
   88e68:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   88e6c:	460a      	mov	r2, r1
   88e6e:	e9d3 6700 	ldrd	r6, r7, [r3]
   88e72:	ea4f 1821 	mov.w	r8, r1, asr #4
   88e76:	05d1      	lsls	r1, r2, #23
   88e78:	f140 8417 	bpl.w	896aa <_dtoa_r+0xad2>
   88e7c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   88e80:	4ba8      	ldr	r3, [pc, #672]	; (89124 <_dtoa_r+0x54c>)
   88e82:	f04f 0a03 	mov.w	sl, #3
   88e86:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   88e8a:	f004 faa3 	bl	8d3d4 <__aeabi_ddiv>
   88e8e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88e92:	f008 080f 	and.w	r8, r8, #15
   88e96:	f1b8 0f00 	cmp.w	r8, #0
   88e9a:	d013      	beq.n	88ec4 <_dtoa_r+0x2ec>
   88e9c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 89124 <_dtoa_r+0x54c>
   88ea0:	f018 0f01 	tst.w	r8, #1
   88ea4:	d009      	beq.n	88eba <_dtoa_r+0x2e2>
   88ea6:	e9d9 2300 	ldrd	r2, r3, [r9]
   88eaa:	4630      	mov	r0, r6
   88eac:	4639      	mov	r1, r7
   88eae:	f004 f967 	bl	8d180 <__aeabi_dmul>
   88eb2:	4606      	mov	r6, r0
   88eb4:	460f      	mov	r7, r1
   88eb6:	f10a 0a01 	add.w	sl, sl, #1
   88eba:	ea5f 0868 	movs.w	r8, r8, asr #1
   88ebe:	f109 0908 	add.w	r9, r9, #8
   88ec2:	d1ed      	bne.n	88ea0 <_dtoa_r+0x2c8>
   88ec4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   88ec8:	4632      	mov	r2, r6
   88eca:	463b      	mov	r3, r7
   88ecc:	f004 fa82 	bl	8d3d4 <__aeabi_ddiv>
   88ed0:	4680      	mov	r8, r0
   88ed2:	4689      	mov	r9, r1
   88ed4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   88ed6:	b143      	cbz	r3, 88eea <_dtoa_r+0x312>
   88ed8:	2200      	movs	r2, #0
   88eda:	4640      	mov	r0, r8
   88edc:	4649      	mov	r1, r9
   88ede:	4b92      	ldr	r3, [pc, #584]	; (89128 <_dtoa_r+0x550>)
   88ee0:	f004 fbc0 	bl	8d664 <__aeabi_dcmplt>
   88ee4:	2800      	cmp	r0, #0
   88ee6:	f040 8535 	bne.w	89954 <_dtoa_r+0xd7c>
   88eea:	4650      	mov	r0, sl
   88eec:	f004 f8de 	bl	8d0ac <__aeabi_i2d>
   88ef0:	4642      	mov	r2, r8
   88ef2:	464b      	mov	r3, r9
   88ef4:	f004 f944 	bl	8d180 <__aeabi_dmul>
   88ef8:	4b8c      	ldr	r3, [pc, #560]	; (8912c <_dtoa_r+0x554>)
   88efa:	2200      	movs	r2, #0
   88efc:	f003 ff8a 	bl	8ce14 <__adddf3>
   88f00:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   88f04:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88f08:	9311      	str	r3, [sp, #68]	; 0x44
   88f0a:	9b08      	ldr	r3, [sp, #32]
   88f0c:	2b00      	cmp	r3, #0
   88f0e:	f000 8097 	beq.w	89040 <_dtoa_r+0x468>
   88f12:	9b07      	ldr	r3, [sp, #28]
   88f14:	9314      	str	r3, [sp, #80]	; 0x50
   88f16:	9b08      	ldr	r3, [sp, #32]
   88f18:	9313      	str	r3, [sp, #76]	; 0x4c
   88f1a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88f1c:	2b00      	cmp	r3, #0
   88f1e:	f000 84a9 	beq.w	89874 <_dtoa_r+0xc9c>
   88f22:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   88f24:	4b7e      	ldr	r3, [pc, #504]	; (89120 <_dtoa_r+0x548>)
   88f26:	2000      	movs	r0, #0
   88f28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   88f2c:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   88f30:	497f      	ldr	r1, [pc, #508]	; (89130 <_dtoa_r+0x558>)
   88f32:	f004 fa4f 	bl	8d3d4 <__aeabi_ddiv>
   88f36:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   88f3a:	f003 ff69 	bl	8ce10 <__aeabi_dsub>
   88f3e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88f42:	4649      	mov	r1, r9
   88f44:	4640      	mov	r0, r8
   88f46:	f004 fbcb 	bl	8d6e0 <__aeabi_d2iz>
   88f4a:	4607      	mov	r7, r0
   88f4c:	f004 f8ae 	bl	8d0ac <__aeabi_i2d>
   88f50:	4602      	mov	r2, r0
   88f52:	460b      	mov	r3, r1
   88f54:	4640      	mov	r0, r8
   88f56:	4649      	mov	r1, r9
   88f58:	f003 ff5a 	bl	8ce10 <__aeabi_dsub>
   88f5c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   88f60:	9e03      	ldr	r6, [sp, #12]
   88f62:	3730      	adds	r7, #48	; 0x30
   88f64:	f806 7b01 	strb.w	r7, [r6], #1
   88f68:	4680      	mov	r8, r0
   88f6a:	4689      	mov	r9, r1
   88f6c:	f004 fb7a 	bl	8d664 <__aeabi_dcmplt>
   88f70:	2800      	cmp	r0, #0
   88f72:	f040 852e 	bne.w	899d2 <_dtoa_r+0xdfa>
   88f76:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   88f7a:	2700      	movs	r7, #0
   88f7c:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   88f80:	9510      	str	r5, [sp, #64]	; 0x40
   88f82:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   88f84:	9413      	str	r4, [sp, #76]	; 0x4c
   88f86:	e02a      	b.n	88fde <_dtoa_r+0x406>
   88f88:	3701      	adds	r7, #1
   88f8a:	42af      	cmp	r7, r5
   88f8c:	f280 852e 	bge.w	899ec <_dtoa_r+0xe14>
   88f90:	4650      	mov	r0, sl
   88f92:	4659      	mov	r1, fp
   88f94:	2200      	movs	r2, #0
   88f96:	4b67      	ldr	r3, [pc, #412]	; (89134 <_dtoa_r+0x55c>)
   88f98:	f004 f8f2 	bl	8d180 <__aeabi_dmul>
   88f9c:	2200      	movs	r2, #0
   88f9e:	4b65      	ldr	r3, [pc, #404]	; (89134 <_dtoa_r+0x55c>)
   88fa0:	4682      	mov	sl, r0
   88fa2:	468b      	mov	fp, r1
   88fa4:	4640      	mov	r0, r8
   88fa6:	4649      	mov	r1, r9
   88fa8:	f004 f8ea 	bl	8d180 <__aeabi_dmul>
   88fac:	4689      	mov	r9, r1
   88fae:	4680      	mov	r8, r0
   88fb0:	f004 fb96 	bl	8d6e0 <__aeabi_d2iz>
   88fb4:	4604      	mov	r4, r0
   88fb6:	f004 f879 	bl	8d0ac <__aeabi_i2d>
   88fba:	4602      	mov	r2, r0
   88fbc:	460b      	mov	r3, r1
   88fbe:	4640      	mov	r0, r8
   88fc0:	4649      	mov	r1, r9
   88fc2:	f003 ff25 	bl	8ce10 <__aeabi_dsub>
   88fc6:	3430      	adds	r4, #48	; 0x30
   88fc8:	4652      	mov	r2, sl
   88fca:	465b      	mov	r3, fp
   88fcc:	f806 4b01 	strb.w	r4, [r6], #1
   88fd0:	4680      	mov	r8, r0
   88fd2:	4689      	mov	r9, r1
   88fd4:	f004 fb46 	bl	8d664 <__aeabi_dcmplt>
   88fd8:	2800      	cmp	r0, #0
   88fda:	f040 84f8 	bne.w	899ce <_dtoa_r+0xdf6>
   88fde:	4642      	mov	r2, r8
   88fe0:	464b      	mov	r3, r9
   88fe2:	2000      	movs	r0, #0
   88fe4:	4950      	ldr	r1, [pc, #320]	; (89128 <_dtoa_r+0x550>)
   88fe6:	f003 ff13 	bl	8ce10 <__aeabi_dsub>
   88fea:	4652      	mov	r2, sl
   88fec:	465b      	mov	r3, fp
   88fee:	f004 fb39 	bl	8d664 <__aeabi_dcmplt>
   88ff2:	2800      	cmp	r0, #0
   88ff4:	d0c8      	beq.n	88f88 <_dtoa_r+0x3b0>
   88ff6:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   88ffa:	9d10      	ldr	r5, [sp, #64]	; 0x40
   88ffc:	9a03      	ldr	r2, [sp, #12]
   88ffe:	9307      	str	r3, [sp, #28]
   89000:	e002      	b.n	89008 <_dtoa_r+0x430>
   89002:	4296      	cmp	r6, r2
   89004:	f000 84cd 	beq.w	899a2 <_dtoa_r+0xdca>
   89008:	46b2      	mov	sl, r6
   8900a:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   8900e:	2b39      	cmp	r3, #57	; 0x39
   89010:	d0f7      	beq.n	89002 <_dtoa_r+0x42a>
   89012:	3301      	adds	r3, #1
   89014:	b2db      	uxtb	r3, r3
   89016:	7033      	strb	r3, [r6, #0]
   89018:	9b07      	ldr	r3, [sp, #28]
   8901a:	3301      	adds	r3, #1
   8901c:	9307      	str	r3, [sp, #28]
   8901e:	e1c8      	b.n	893b2 <_dtoa_r+0x7da>
   89020:	4650      	mov	r0, sl
   89022:	f004 f843 	bl	8d0ac <__aeabi_i2d>
   89026:	4642      	mov	r2, r8
   89028:	464b      	mov	r3, r9
   8902a:	f004 f8a9 	bl	8d180 <__aeabi_dmul>
   8902e:	4b3f      	ldr	r3, [pc, #252]	; (8912c <_dtoa_r+0x554>)
   89030:	2200      	movs	r2, #0
   89032:	f003 feef 	bl	8ce14 <__adddf3>
   89036:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   8903a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8903e:	9311      	str	r3, [sp, #68]	; 0x44
   89040:	4640      	mov	r0, r8
   89042:	4649      	mov	r1, r9
   89044:	2200      	movs	r2, #0
   89046:	4b3c      	ldr	r3, [pc, #240]	; (89138 <_dtoa_r+0x560>)
   89048:	f003 fee2 	bl	8ce10 <__aeabi_dsub>
   8904c:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   89050:	464b      	mov	r3, r9
   89052:	4642      	mov	r2, r8
   89054:	4606      	mov	r6, r0
   89056:	460f      	mov	r7, r1
   89058:	f004 fb22 	bl	8d6a0 <__aeabi_dcmpgt>
   8905c:	4681      	mov	r9, r0
   8905e:	2800      	cmp	r0, #0
   89060:	f040 84af 	bne.w	899c2 <_dtoa_r+0xdea>
   89064:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   89068:	4602      	mov	r2, r0
   8906a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   8906e:	4630      	mov	r0, r6
   89070:	4639      	mov	r1, r7
   89072:	f004 faf7 	bl	8d664 <__aeabi_dcmplt>
   89076:	2800      	cmp	r0, #0
   89078:	f040 8348 	bne.w	8970c <_dtoa_r+0xb34>
   8907c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   8907e:	2b00      	cmp	r3, #0
   89080:	f2c0 808c 	blt.w	8919c <_dtoa_r+0x5c4>
   89084:	9a07      	ldr	r2, [sp, #28]
   89086:	2a0e      	cmp	r2, #14
   89088:	f300 8088 	bgt.w	8919c <_dtoa_r+0x5c4>
   8908c:	4b24      	ldr	r3, [pc, #144]	; (89120 <_dtoa_r+0x548>)
   8908e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89092:	e9d3 ab00 	ldrd	sl, fp, [r3]
   89096:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   89098:	2b00      	cmp	r3, #0
   8909a:	da1b      	bge.n	890d4 <_dtoa_r+0x4fc>
   8909c:	9b08      	ldr	r3, [sp, #32]
   8909e:	2b00      	cmp	r3, #0
   890a0:	dc18      	bgt.n	890d4 <_dtoa_r+0x4fc>
   890a2:	f040 8331 	bne.w	89708 <_dtoa_r+0xb30>
   890a6:	2200      	movs	r2, #0
   890a8:	4b23      	ldr	r3, [pc, #140]	; (89138 <_dtoa_r+0x560>)
   890aa:	4650      	mov	r0, sl
   890ac:	4659      	mov	r1, fp
   890ae:	f004 f867 	bl	8d180 <__aeabi_dmul>
   890b2:	4602      	mov	r2, r0
   890b4:	460b      	mov	r3, r1
   890b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   890ba:	f004 fadd 	bl	8d678 <__aeabi_dcmple>
   890be:	f8dd 9020 	ldr.w	r9, [sp, #32]
   890c2:	464e      	mov	r6, r9
   890c4:	2800      	cmp	r0, #0
   890c6:	f000 82ca 	beq.w	8965e <_dtoa_r+0xa86>
   890ca:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   890cc:	f8dd 800c 	ldr.w	r8, [sp, #12]
   890d0:	43df      	mvns	r7, r3
   890d2:	e2cc      	b.n	8966e <_dtoa_r+0xa96>
   890d4:	4652      	mov	r2, sl
   890d6:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   890da:	465b      	mov	r3, fp
   890dc:	4638      	mov	r0, r7
   890de:	4641      	mov	r1, r8
   890e0:	f004 f978 	bl	8d3d4 <__aeabi_ddiv>
   890e4:	f004 fafc 	bl	8d6e0 <__aeabi_d2iz>
   890e8:	4681      	mov	r9, r0
   890ea:	9009      	str	r0, [sp, #36]	; 0x24
   890ec:	f003 ffde 	bl	8d0ac <__aeabi_i2d>
   890f0:	4652      	mov	r2, sl
   890f2:	465b      	mov	r3, fp
   890f4:	f004 f844 	bl	8d180 <__aeabi_dmul>
   890f8:	9e03      	ldr	r6, [sp, #12]
   890fa:	460b      	mov	r3, r1
   890fc:	4602      	mov	r2, r0
   890fe:	4641      	mov	r1, r8
   89100:	4638      	mov	r0, r7
   89102:	f003 fe85 	bl	8ce10 <__aeabi_dsub>
   89106:	f109 0330 	add.w	r3, r9, #48	; 0x30
   8910a:	f806 3b01 	strb.w	r3, [r6], #1
   8910e:	9b08      	ldr	r3, [sp, #32]
   89110:	2b01      	cmp	r3, #1
   89112:	f000 835f 	beq.w	897d4 <_dtoa_r+0xbfc>
   89116:	9406      	str	r4, [sp, #24]
   89118:	2701      	movs	r7, #1
   8911a:	461c      	mov	r4, r3
   8911c:	9504      	str	r5, [sp, #16]
   8911e:	e02a      	b.n	89176 <_dtoa_r+0x59e>
   89120:	0008dc60 	.word	0x0008dc60
   89124:	0008dc38 	.word	0x0008dc38
   89128:	3ff00000 	.word	0x3ff00000
   8912c:	401c0000 	.word	0x401c0000
   89130:	3fe00000 	.word	0x3fe00000
   89134:	40240000 	.word	0x40240000
   89138:	40140000 	.word	0x40140000
   8913c:	4652      	mov	r2, sl
   8913e:	465b      	mov	r3, fp
   89140:	4640      	mov	r0, r8
   89142:	4649      	mov	r1, r9
   89144:	f004 f946 	bl	8d3d4 <__aeabi_ddiv>
   89148:	f004 faca 	bl	8d6e0 <__aeabi_d2iz>
   8914c:	4605      	mov	r5, r0
   8914e:	f003 ffad 	bl	8d0ac <__aeabi_i2d>
   89152:	4652      	mov	r2, sl
   89154:	465b      	mov	r3, fp
   89156:	f004 f813 	bl	8d180 <__aeabi_dmul>
   8915a:	3701      	adds	r7, #1
   8915c:	460b      	mov	r3, r1
   8915e:	4602      	mov	r2, r0
   89160:	4649      	mov	r1, r9
   89162:	4640      	mov	r0, r8
   89164:	f003 fe54 	bl	8ce10 <__aeabi_dsub>
   89168:	f105 0330 	add.w	r3, r5, #48	; 0x30
   8916c:	42a7      	cmp	r7, r4
   8916e:	f806 3b01 	strb.w	r3, [r6], #1
   89172:	f000 832c 	beq.w	897ce <_dtoa_r+0xbf6>
   89176:	2200      	movs	r2, #0
   89178:	4bab      	ldr	r3, [pc, #684]	; (89428 <_dtoa_r+0x850>)
   8917a:	f004 f801 	bl	8d180 <__aeabi_dmul>
   8917e:	2200      	movs	r2, #0
   89180:	2300      	movs	r3, #0
   89182:	4680      	mov	r8, r0
   89184:	4689      	mov	r9, r1
   89186:	f004 fa63 	bl	8d650 <__aeabi_dcmpeq>
   8918a:	2800      	cmp	r0, #0
   8918c:	d0d6      	beq.n	8913c <_dtoa_r+0x564>
   8918e:	9d04      	ldr	r5, [sp, #16]
   89190:	9c06      	ldr	r4, [sp, #24]
   89192:	9b07      	ldr	r3, [sp, #28]
   89194:	46b2      	mov	sl, r6
   89196:	3301      	adds	r3, #1
   89198:	9307      	str	r3, [sp, #28]
   8919a:	e10a      	b.n	893b2 <_dtoa_r+0x7da>
   8919c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8919e:	2a00      	cmp	r2, #0
   891a0:	d03d      	beq.n	8921e <_dtoa_r+0x646>
   891a2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   891a4:	2a01      	cmp	r2, #1
   891a6:	f340 829f 	ble.w	896e8 <_dtoa_r+0xb10>
   891aa:	9b08      	ldr	r3, [sp, #32]
   891ac:	f103 38ff 	add.w	r8, r3, #4294967295
   891b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   891b2:	4543      	cmp	r3, r8
   891b4:	f2c0 8270 	blt.w	89698 <_dtoa_r+0xac0>
   891b8:	eba3 0808 	sub.w	r8, r3, r8
   891bc:	9b08      	ldr	r3, [sp, #32]
   891be:	2b00      	cmp	r3, #0
   891c0:	f2c0 8340 	blt.w	89844 <_dtoa_r+0xc6c>
   891c4:	9a06      	ldr	r2, [sp, #24]
   891c6:	441a      	add	r2, r3
   891c8:	9206      	str	r2, [sp, #24]
   891ca:	9a09      	ldr	r2, [sp, #36]	; 0x24
   891cc:	4617      	mov	r7, r2
   891ce:	441a      	add	r2, r3
   891d0:	9209      	str	r2, [sp, #36]	; 0x24
   891d2:	2101      	movs	r1, #1
   891d4:	4620      	mov	r0, r4
   891d6:	f001 f9a5 	bl	8a524 <__i2b>
   891da:	4606      	mov	r6, r0
   891dc:	e023      	b.n	89226 <_dtoa_r+0x64e>
   891de:	2301      	movs	r3, #1
   891e0:	1bbe      	subs	r6, r7, r6
   891e2:	930e      	str	r3, [sp, #56]	; 0x38
   891e4:	1e73      	subs	r3, r6, #1
   891e6:	9306      	str	r3, [sp, #24]
   891e8:	f57f ada0 	bpl.w	88d2c <_dtoa_r+0x154>
   891ec:	f1c6 0301 	rsb	r3, r6, #1
   891f0:	9309      	str	r3, [sp, #36]	; 0x24
   891f2:	2300      	movs	r3, #0
   891f4:	9306      	str	r3, [sp, #24]
   891f6:	e59b      	b.n	88d30 <_dtoa_r+0x158>
   891f8:	4658      	mov	r0, fp
   891fa:	f003 ff57 	bl	8d0ac <__aeabi_i2d>
   891fe:	4642      	mov	r2, r8
   89200:	464b      	mov	r3, r9
   89202:	f004 fa25 	bl	8d650 <__aeabi_dcmpeq>
   89206:	2800      	cmp	r0, #0
   89208:	f47f ad78 	bne.w	88cfc <_dtoa_r+0x124>
   8920c:	f10b 3bff 	add.w	fp, fp, #4294967295
   89210:	e574      	b.n	88cfc <_dtoa_r+0x124>
   89212:	4b86      	ldr	r3, [pc, #536]	; (8942c <_dtoa_r+0x854>)
   89214:	9303      	str	r3, [sp, #12]
   89216:	9803      	ldr	r0, [sp, #12]
   89218:	b019      	add	sp, #100	; 0x64
   8921a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8921e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   89222:	9f09      	ldr	r7, [sp, #36]	; 0x24
   89224:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   89226:	2f00      	cmp	r7, #0
   89228:	dd0c      	ble.n	89244 <_dtoa_r+0x66c>
   8922a:	9906      	ldr	r1, [sp, #24]
   8922c:	2900      	cmp	r1, #0
   8922e:	460b      	mov	r3, r1
   89230:	dd08      	ble.n	89244 <_dtoa_r+0x66c>
   89232:	42b9      	cmp	r1, r7
   89234:	bfa8      	it	ge
   89236:	463b      	movge	r3, r7
   89238:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8923a:	1aff      	subs	r7, r7, r3
   8923c:	1ad2      	subs	r2, r2, r3
   8923e:	1acb      	subs	r3, r1, r3
   89240:	9209      	str	r2, [sp, #36]	; 0x24
   89242:	9306      	str	r3, [sp, #24]
   89244:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   89246:	b1e3      	cbz	r3, 89282 <_dtoa_r+0x6aa>
   89248:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8924a:	2b00      	cmp	r3, #0
   8924c:	f000 8260 	beq.w	89710 <_dtoa_r+0xb38>
   89250:	f1b8 0f00 	cmp.w	r8, #0
   89254:	dd10      	ble.n	89278 <_dtoa_r+0x6a0>
   89256:	4631      	mov	r1, r6
   89258:	4642      	mov	r2, r8
   8925a:	4620      	mov	r0, r4
   8925c:	f001 fa3e 	bl	8a6dc <__pow5mult>
   89260:	4606      	mov	r6, r0
   89262:	462a      	mov	r2, r5
   89264:	4631      	mov	r1, r6
   89266:	4620      	mov	r0, r4
   89268:	f001 f98a 	bl	8a580 <__multiply>
   8926c:	4603      	mov	r3, r0
   8926e:	4629      	mov	r1, r5
   89270:	4620      	mov	r0, r4
   89272:	461d      	mov	r5, r3
   89274:	f001 f8ae 	bl	8a3d4 <_Bfree>
   89278:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8927a:	ebb3 0208 	subs.w	r2, r3, r8
   8927e:	f040 82db 	bne.w	89838 <_dtoa_r+0xc60>
   89282:	2101      	movs	r1, #1
   89284:	4620      	mov	r0, r4
   89286:	f001 f94d 	bl	8a524 <__i2b>
   8928a:	f1bb 0f00 	cmp.w	fp, #0
   8928e:	4681      	mov	r9, r0
   89290:	f300 80b3 	bgt.w	893fa <_dtoa_r+0x822>
   89294:	9b22      	ldr	r3, [sp, #136]	; 0x88
   89296:	2b01      	cmp	r3, #1
   89298:	f340 8188 	ble.w	895ac <_dtoa_r+0x9d4>
   8929c:	f04f 0a00 	mov.w	sl, #0
   892a0:	2001      	movs	r0, #1
   892a2:	f1bb 0f00 	cmp.w	fp, #0
   892a6:	f040 80b4 	bne.w	89412 <_dtoa_r+0x83a>
   892aa:	9a06      	ldr	r2, [sp, #24]
   892ac:	4410      	add	r0, r2
   892ae:	f010 001f 	ands.w	r0, r0, #31
   892b2:	f000 8092 	beq.w	893da <_dtoa_r+0x802>
   892b6:	f1c0 0320 	rsb	r3, r0, #32
   892ba:	2b04      	cmp	r3, #4
   892bc:	f340 83d3 	ble.w	89a66 <_dtoa_r+0xe8e>
   892c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   892c2:	f1c0 001c 	rsb	r0, r0, #28
   892c6:	4403      	add	r3, r0
   892c8:	4402      	add	r2, r0
   892ca:	9309      	str	r3, [sp, #36]	; 0x24
   892cc:	4407      	add	r7, r0
   892ce:	9206      	str	r2, [sp, #24]
   892d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   892d2:	2b00      	cmp	r3, #0
   892d4:	dd05      	ble.n	892e2 <_dtoa_r+0x70a>
   892d6:	4629      	mov	r1, r5
   892d8:	461a      	mov	r2, r3
   892da:	4620      	mov	r0, r4
   892dc:	f001 fa5a 	bl	8a794 <__lshift>
   892e0:	4605      	mov	r5, r0
   892e2:	9b06      	ldr	r3, [sp, #24]
   892e4:	2b00      	cmp	r3, #0
   892e6:	dd05      	ble.n	892f4 <_dtoa_r+0x71c>
   892e8:	4649      	mov	r1, r9
   892ea:	461a      	mov	r2, r3
   892ec:	4620      	mov	r0, r4
   892ee:	f001 fa51 	bl	8a794 <__lshift>
   892f2:	4681      	mov	r9, r0
   892f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   892f6:	2b00      	cmp	r3, #0
   892f8:	f040 8138 	bne.w	8956c <_dtoa_r+0x994>
   892fc:	9b08      	ldr	r3, [sp, #32]
   892fe:	2b00      	cmp	r3, #0
   89300:	f340 811e 	ble.w	89540 <_dtoa_r+0x968>
   89304:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89306:	2b00      	cmp	r3, #0
   89308:	f040 809f 	bne.w	8944a <_dtoa_r+0x872>
   8930c:	9b07      	ldr	r3, [sp, #28]
   8930e:	3301      	adds	r3, #1
   89310:	9307      	str	r3, [sp, #28]
   89312:	2701      	movs	r7, #1
   89314:	f8dd 800c 	ldr.w	r8, [sp, #12]
   89318:	f8dd a020 	ldr.w	sl, [sp, #32]
   8931c:	e007      	b.n	8932e <_dtoa_r+0x756>
   8931e:	4629      	mov	r1, r5
   89320:	2300      	movs	r3, #0
   89322:	220a      	movs	r2, #10
   89324:	4620      	mov	r0, r4
   89326:	f001 f85f 	bl	8a3e8 <__multadd>
   8932a:	4605      	mov	r5, r0
   8932c:	3701      	adds	r7, #1
   8932e:	4649      	mov	r1, r9
   89330:	4628      	mov	r0, r5
   89332:	f7ff fbbb 	bl	88aac <quorem>
   89336:	4557      	cmp	r7, sl
   89338:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8933c:	f808 3b01 	strb.w	r3, [r8], #1
   89340:	dbed      	blt.n	8931e <_dtoa_r+0x746>
   89342:	9a08      	ldr	r2, [sp, #32]
   89344:	2700      	movs	r7, #0
   89346:	2a00      	cmp	r2, #0
   89348:	bfcc      	ite	gt
   8934a:	4693      	movgt	fp, r2
   8934c:	f04f 0b01 	movle.w	fp, #1
   89350:	9a03      	ldr	r2, [sp, #12]
   89352:	4493      	add	fp, r2
   89354:	4629      	mov	r1, r5
   89356:	2201      	movs	r2, #1
   89358:	4620      	mov	r0, r4
   8935a:	9304      	str	r3, [sp, #16]
   8935c:	f001 fa1a 	bl	8a794 <__lshift>
   89360:	4649      	mov	r1, r9
   89362:	4605      	mov	r5, r0
   89364:	f001 fa8c 	bl	8a880 <__mcmp>
   89368:	2800      	cmp	r0, #0
   8936a:	f340 81ab 	ble.w	896c4 <_dtoa_r+0xaec>
   8936e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   89372:	9a03      	ldr	r2, [sp, #12]
   89374:	f10b 3bff 	add.w	fp, fp, #4294967295
   89378:	e004      	b.n	89384 <_dtoa_r+0x7ac>
   8937a:	455a      	cmp	r2, fp
   8937c:	f000 81ad 	beq.w	896da <_dtoa_r+0xb02>
   89380:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   89384:	2b39      	cmp	r3, #57	; 0x39
   89386:	f10b 0a01 	add.w	sl, fp, #1
   8938a:	d0f6      	beq.n	8937a <_dtoa_r+0x7a2>
   8938c:	3301      	adds	r3, #1
   8938e:	f88b 3000 	strb.w	r3, [fp]
   89392:	4649      	mov	r1, r9
   89394:	4620      	mov	r0, r4
   89396:	f001 f81d 	bl	8a3d4 <_Bfree>
   8939a:	b156      	cbz	r6, 893b2 <_dtoa_r+0x7da>
   8939c:	b12f      	cbz	r7, 893aa <_dtoa_r+0x7d2>
   8939e:	42b7      	cmp	r7, r6
   893a0:	d003      	beq.n	893aa <_dtoa_r+0x7d2>
   893a2:	4639      	mov	r1, r7
   893a4:	4620      	mov	r0, r4
   893a6:	f001 f815 	bl	8a3d4 <_Bfree>
   893aa:	4631      	mov	r1, r6
   893ac:	4620      	mov	r0, r4
   893ae:	f001 f811 	bl	8a3d4 <_Bfree>
   893b2:	4629      	mov	r1, r5
   893b4:	4620      	mov	r0, r4
   893b6:	f001 f80d 	bl	8a3d4 <_Bfree>
   893ba:	2300      	movs	r3, #0
   893bc:	9a07      	ldr	r2, [sp, #28]
   893be:	f88a 3000 	strb.w	r3, [sl]
   893c2:	9b24      	ldr	r3, [sp, #144]	; 0x90
   893c4:	601a      	str	r2, [r3, #0]
   893c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   893c8:	2b00      	cmp	r3, #0
   893ca:	f43f ac40 	beq.w	88c4e <_dtoa_r+0x76>
   893ce:	9803      	ldr	r0, [sp, #12]
   893d0:	f8c3 a000 	str.w	sl, [r3]
   893d4:	b019      	add	sp, #100	; 0x64
   893d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   893da:	201c      	movs	r0, #28
   893dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   893de:	4407      	add	r7, r0
   893e0:	4403      	add	r3, r0
   893e2:	9309      	str	r3, [sp, #36]	; 0x24
   893e4:	9b06      	ldr	r3, [sp, #24]
   893e6:	4403      	add	r3, r0
   893e8:	9306      	str	r3, [sp, #24]
   893ea:	e771      	b.n	892d0 <_dtoa_r+0x6f8>
   893ec:	2601      	movs	r6, #1
   893ee:	e4b6      	b.n	88d5e <_dtoa_r+0x186>
   893f0:	f1c0 0020 	rsb	r0, r0, #32
   893f4:	fa08 f000 	lsl.w	r0, r8, r0
   893f8:	e44d      	b.n	88c96 <_dtoa_r+0xbe>
   893fa:	4601      	mov	r1, r0
   893fc:	465a      	mov	r2, fp
   893fe:	4620      	mov	r0, r4
   89400:	f001 f96c 	bl	8a6dc <__pow5mult>
   89404:	9b22      	ldr	r3, [sp, #136]	; 0x88
   89406:	4681      	mov	r9, r0
   89408:	2b01      	cmp	r3, #1
   8940a:	f340 81b6 	ble.w	8977a <_dtoa_r+0xba2>
   8940e:	f04f 0a00 	mov.w	sl, #0
   89412:	f8d9 3010 	ldr.w	r3, [r9, #16]
   89416:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   8941a:	6918      	ldr	r0, [r3, #16]
   8941c:	f001 f836 	bl	8a48c <__hi0bits>
   89420:	f1c0 0020 	rsb	r0, r0, #32
   89424:	e741      	b.n	892aa <_dtoa_r+0x6d2>
   89426:	bf00      	nop
   89428:	40240000 	.word	0x40240000
   8942c:	0008daec 	.word	0x0008daec
   89430:	4631      	mov	r1, r6
   89432:	2300      	movs	r3, #0
   89434:	220a      	movs	r2, #10
   89436:	4620      	mov	r0, r4
   89438:	f000 ffd6 	bl	8a3e8 <__multadd>
   8943c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8943e:	4606      	mov	r6, r0
   89440:	2b00      	cmp	r3, #0
   89442:	f340 82e9 	ble.w	89a18 <_dtoa_r+0xe40>
   89446:	e9cd 8307 	strd	r8, r3, [sp, #28]
   8944a:	2f00      	cmp	r7, #0
   8944c:	f300 811d 	bgt.w	8968a <_dtoa_r+0xab2>
   89450:	f1ba 0f00 	cmp.w	sl, #0
   89454:	f040 81d9 	bne.w	8980a <_dtoa_r+0xc32>
   89458:	46b0      	mov	r8, r6
   8945a:	9b04      	ldr	r3, [sp, #16]
   8945c:	9908      	ldr	r1, [sp, #32]
   8945e:	f003 0201 	and.w	r2, r3, #1
   89462:	9b03      	ldr	r3, [sp, #12]
   89464:	920a      	str	r2, [sp, #40]	; 0x28
   89466:	461f      	mov	r7, r3
   89468:	3b01      	subs	r3, #1
   8946a:	4419      	add	r1, r3
   8946c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8946e:	9108      	str	r1, [sp, #32]
   89470:	4313      	orrs	r3, r2
   89472:	9309      	str	r3, [sp, #36]	; 0x24
   89474:	4649      	mov	r1, r9
   89476:	4628      	mov	r0, r5
   89478:	f7ff fb18 	bl	88aac <quorem>
   8947c:	4631      	mov	r1, r6
   8947e:	4683      	mov	fp, r0
   89480:	4628      	mov	r0, r5
   89482:	f001 f9fd 	bl	8a880 <__mcmp>
   89486:	4642      	mov	r2, r8
   89488:	4649      	mov	r1, r9
   8948a:	4682      	mov	sl, r0
   8948c:	4620      	mov	r0, r4
   8948e:	f001 fa17 	bl	8a8c0 <__mdiff>
   89492:	68c2      	ldr	r2, [r0, #12]
   89494:	4601      	mov	r1, r0
   89496:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   8949a:	2a00      	cmp	r2, #0
   8949c:	d143      	bne.n	89526 <_dtoa_r+0x94e>
   8949e:	9004      	str	r0, [sp, #16]
   894a0:	4628      	mov	r0, r5
   894a2:	9306      	str	r3, [sp, #24]
   894a4:	f001 f9ec 	bl	8a880 <__mcmp>
   894a8:	4602      	mov	r2, r0
   894aa:	9904      	ldr	r1, [sp, #16]
   894ac:	4620      	mov	r0, r4
   894ae:	9204      	str	r2, [sp, #16]
   894b0:	f000 ff90 	bl	8a3d4 <_Bfree>
   894b4:	9a04      	ldr	r2, [sp, #16]
   894b6:	9b06      	ldr	r3, [sp, #24]
   894b8:	b91a      	cbnz	r2, 894c2 <_dtoa_r+0x8ea>
   894ba:	9909      	ldr	r1, [sp, #36]	; 0x24
   894bc:	2900      	cmp	r1, #0
   894be:	f000 829b 	beq.w	899f8 <_dtoa_r+0xe20>
   894c2:	f1ba 0f00 	cmp.w	sl, #0
   894c6:	f2c0 8164 	blt.w	89792 <_dtoa_r+0xbba>
   894ca:	9922      	ldr	r1, [sp, #136]	; 0x88
   894cc:	ea4a 0a01 	orr.w	sl, sl, r1
   894d0:	990a      	ldr	r1, [sp, #40]	; 0x28
   894d2:	ea51 010a 	orrs.w	r1, r1, sl
   894d6:	f000 815c 	beq.w	89792 <_dtoa_r+0xbba>
   894da:	2a00      	cmp	r2, #0
   894dc:	f300 81b6 	bgt.w	8984c <_dtoa_r+0xc74>
   894e0:	9a08      	ldr	r2, [sp, #32]
   894e2:	f107 0a01 	add.w	sl, r7, #1
   894e6:	4297      	cmp	r7, r2
   894e8:	46d3      	mov	fp, sl
   894ea:	703b      	strb	r3, [r7, #0]
   894ec:	f000 81b4 	beq.w	89858 <_dtoa_r+0xc80>
   894f0:	4629      	mov	r1, r5
   894f2:	2300      	movs	r3, #0
   894f4:	220a      	movs	r2, #10
   894f6:	4620      	mov	r0, r4
   894f8:	f000 ff76 	bl	8a3e8 <__multadd>
   894fc:	4546      	cmp	r6, r8
   894fe:	4605      	mov	r5, r0
   89500:	4631      	mov	r1, r6
   89502:	f04f 0300 	mov.w	r3, #0
   89506:	f04f 020a 	mov.w	r2, #10
   8950a:	4620      	mov	r0, r4
   8950c:	d012      	beq.n	89534 <_dtoa_r+0x95c>
   8950e:	f000 ff6b 	bl	8a3e8 <__multadd>
   89512:	4641      	mov	r1, r8
   89514:	4606      	mov	r6, r0
   89516:	2300      	movs	r3, #0
   89518:	220a      	movs	r2, #10
   8951a:	4620      	mov	r0, r4
   8951c:	f000 ff64 	bl	8a3e8 <__multadd>
   89520:	4657      	mov	r7, sl
   89522:	4680      	mov	r8, r0
   89524:	e7a6      	b.n	89474 <_dtoa_r+0x89c>
   89526:	4620      	mov	r0, r4
   89528:	9304      	str	r3, [sp, #16]
   8952a:	f000 ff53 	bl	8a3d4 <_Bfree>
   8952e:	2201      	movs	r2, #1
   89530:	9b04      	ldr	r3, [sp, #16]
   89532:	e7c6      	b.n	894c2 <_dtoa_r+0x8ea>
   89534:	f000 ff58 	bl	8a3e8 <__multadd>
   89538:	4657      	mov	r7, sl
   8953a:	4606      	mov	r6, r0
   8953c:	4680      	mov	r8, r0
   8953e:	e799      	b.n	89474 <_dtoa_r+0x89c>
   89540:	9b22      	ldr	r3, [sp, #136]	; 0x88
   89542:	2b02      	cmp	r3, #2
   89544:	dc7a      	bgt.n	8963c <_dtoa_r+0xa64>
   89546:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89548:	2b00      	cmp	r3, #0
   8954a:	f47f af7e 	bne.w	8944a <_dtoa_r+0x872>
   8954e:	9b07      	ldr	r3, [sp, #28]
   89550:	4649      	mov	r1, r9
   89552:	3301      	adds	r3, #1
   89554:	4628      	mov	r0, r5
   89556:	9307      	str	r3, [sp, #28]
   89558:	f7ff faa8 	bl	88aac <quorem>
   8955c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   89560:	f100 0330 	add.w	r3, r0, #48	; 0x30
   89564:	2700      	movs	r7, #0
   89566:	f80b 3b01 	strb.w	r3, [fp], #1
   8956a:	e6f3      	b.n	89354 <_dtoa_r+0x77c>
   8956c:	4649      	mov	r1, r9
   8956e:	4628      	mov	r0, r5
   89570:	f001 f986 	bl	8a880 <__mcmp>
   89574:	2800      	cmp	r0, #0
   89576:	f6bf aec1 	bge.w	892fc <_dtoa_r+0x724>
   8957a:	4629      	mov	r1, r5
   8957c:	2300      	movs	r3, #0
   8957e:	220a      	movs	r2, #10
   89580:	4620      	mov	r0, r4
   89582:	f000 ff31 	bl	8a3e8 <__multadd>
   89586:	9b07      	ldr	r3, [sp, #28]
   89588:	4605      	mov	r5, r0
   8958a:	f103 38ff 	add.w	r8, r3, #4294967295
   8958e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   89590:	2b00      	cmp	r3, #0
   89592:	f47f af4d 	bne.w	89430 <_dtoa_r+0x858>
   89596:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89598:	2b00      	cmp	r3, #0
   8959a:	f340 8234 	ble.w	89a06 <_dtoa_r+0xe2e>
   8959e:	9308      	str	r3, [sp, #32]
   895a0:	e6b7      	b.n	89312 <_dtoa_r+0x73a>
   895a2:	4bb0      	ldr	r3, [pc, #704]	; (89864 <_dtoa_r+0xc8c>)
   895a4:	9303      	str	r3, [sp, #12]
   895a6:	3303      	adds	r3, #3
   895a8:	f7ff bbf4 	b.w	88d94 <_dtoa_r+0x1bc>
   895ac:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   895b0:	2900      	cmp	r1, #0
   895b2:	f47f ae73 	bne.w	8929c <_dtoa_r+0x6c4>
   895b6:	f3c2 0313 	ubfx	r3, r2, #0, #20
   895ba:	2b00      	cmp	r3, #0
   895bc:	f47f ae6e 	bne.w	8929c <_dtoa_r+0x6c4>
   895c0:	4ba9      	ldr	r3, [pc, #676]	; (89868 <_dtoa_r+0xc90>)
   895c2:	4013      	ands	r3, r2
   895c4:	2b00      	cmp	r3, #0
   895c6:	f000 8200 	beq.w	899ca <_dtoa_r+0xdf2>
   895ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
   895cc:	f04f 0a01 	mov.w	sl, #1
   895d0:	3301      	adds	r3, #1
   895d2:	9309      	str	r3, [sp, #36]	; 0x24
   895d4:	9b06      	ldr	r3, [sp, #24]
   895d6:	3301      	adds	r3, #1
   895d8:	9306      	str	r3, [sp, #24]
   895da:	e661      	b.n	892a0 <_dtoa_r+0x6c8>
   895dc:	2301      	movs	r3, #1
   895de:	930c      	str	r3, [sp, #48]	; 0x30
   895e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   895e2:	9a07      	ldr	r2, [sp, #28]
   895e4:	4413      	add	r3, r2
   895e6:	9312      	str	r3, [sp, #72]	; 0x48
   895e8:	3301      	adds	r3, #1
   895ea:	2b01      	cmp	r3, #1
   895ec:	461f      	mov	r7, r3
   895ee:	bfb8      	it	lt
   895f0:	2701      	movlt	r7, #1
   895f2:	9308      	str	r3, [sp, #32]
   895f4:	2100      	movs	r1, #0
   895f6:	2f17      	cmp	r7, #23
   895f8:	6461      	str	r1, [r4, #68]	; 0x44
   895fa:	f77f ac1e 	ble.w	88e3a <_dtoa_r+0x262>
   895fe:	2201      	movs	r2, #1
   89600:	2304      	movs	r3, #4
   89602:	005b      	lsls	r3, r3, #1
   89604:	f103 0014 	add.w	r0, r3, #20
   89608:	42b8      	cmp	r0, r7
   8960a:	4611      	mov	r1, r2
   8960c:	f102 0201 	add.w	r2, r2, #1
   89610:	d9f7      	bls.n	89602 <_dtoa_r+0xa2a>
   89612:	6461      	str	r1, [r4, #68]	; 0x44
   89614:	e411      	b.n	88e3a <_dtoa_r+0x262>
   89616:	2301      	movs	r3, #1
   89618:	930c      	str	r3, [sp, #48]	; 0x30
   8961a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8961c:	2b00      	cmp	r3, #0
   8961e:	dd4c      	ble.n	896ba <_dtoa_r+0xae2>
   89620:	461f      	mov	r7, r3
   89622:	9312      	str	r3, [sp, #72]	; 0x48
   89624:	9308      	str	r3, [sp, #32]
   89626:	e7e5      	b.n	895f4 <_dtoa_r+0xa1c>
   89628:	2300      	movs	r3, #0
   8962a:	930c      	str	r3, [sp, #48]	; 0x30
   8962c:	e7d8      	b.n	895e0 <_dtoa_r+0xa08>
   8962e:	2300      	movs	r3, #0
   89630:	930c      	str	r3, [sp, #48]	; 0x30
   89632:	e7f2      	b.n	8961a <_dtoa_r+0xa42>
   89634:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89636:	f8cd 801c 	str.w	r8, [sp, #28]
   8963a:	9308      	str	r3, [sp, #32]
   8963c:	9b08      	ldr	r3, [sp, #32]
   8963e:	2b00      	cmp	r3, #0
   89640:	f47f ad43 	bne.w	890ca <_dtoa_r+0x4f2>
   89644:	4649      	mov	r1, r9
   89646:	2205      	movs	r2, #5
   89648:	4620      	mov	r0, r4
   8964a:	f000 fecd 	bl	8a3e8 <__multadd>
   8964e:	4681      	mov	r9, r0
   89650:	4628      	mov	r0, r5
   89652:	4649      	mov	r1, r9
   89654:	f001 f914 	bl	8a880 <__mcmp>
   89658:	2800      	cmp	r0, #0
   8965a:	f77f ad36 	ble.w	890ca <_dtoa_r+0x4f2>
   8965e:	2331      	movs	r3, #49	; 0x31
   89660:	9803      	ldr	r0, [sp, #12]
   89662:	9f07      	ldr	r7, [sp, #28]
   89664:	4680      	mov	r8, r0
   89666:	f800 3b01 	strb.w	r3, [r0], #1
   8966a:	3701      	adds	r7, #1
   8966c:	9003      	str	r0, [sp, #12]
   8966e:	4649      	mov	r1, r9
   89670:	4620      	mov	r0, r4
   89672:	f000 feaf 	bl	8a3d4 <_Bfree>
   89676:	1c7b      	adds	r3, r7, #1
   89678:	f8dd a00c 	ldr.w	sl, [sp, #12]
   8967c:	9307      	str	r3, [sp, #28]
   8967e:	f8cd 800c 	str.w	r8, [sp, #12]
   89682:	2e00      	cmp	r6, #0
   89684:	f47f ae91 	bne.w	893aa <_dtoa_r+0x7d2>
   89688:	e693      	b.n	893b2 <_dtoa_r+0x7da>
   8968a:	4631      	mov	r1, r6
   8968c:	463a      	mov	r2, r7
   8968e:	4620      	mov	r0, r4
   89690:	f001 f880 	bl	8a794 <__lshift>
   89694:	4606      	mov	r6, r0
   89696:	e6db      	b.n	89450 <_dtoa_r+0x878>
   89698:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8969a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   8969e:	eba8 0303 	sub.w	r3, r8, r3
   896a2:	449b      	add	fp, r3
   896a4:	f04f 0800 	mov.w	r8, #0
   896a8:	e588      	b.n	891bc <_dtoa_r+0x5e4>
   896aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   896ae:	f04f 0a02 	mov.w	sl, #2
   896b2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   896b6:	f7ff bbee 	b.w	88e96 <_dtoa_r+0x2be>
   896ba:	2301      	movs	r3, #1
   896bc:	9323      	str	r3, [sp, #140]	; 0x8c
   896be:	9308      	str	r3, [sp, #32]
   896c0:	f7ff bbb7 	b.w	88e32 <_dtoa_r+0x25a>
   896c4:	d103      	bne.n	896ce <_dtoa_r+0xaf6>
   896c6:	9b04      	ldr	r3, [sp, #16]
   896c8:	07d8      	lsls	r0, r3, #31
   896ca:	f53f ae50 	bmi.w	8936e <_dtoa_r+0x796>
   896ce:	46da      	mov	sl, fp
   896d0:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   896d4:	2b30      	cmp	r3, #48	; 0x30
   896d6:	d0fa      	beq.n	896ce <_dtoa_r+0xaf6>
   896d8:	e65b      	b.n	89392 <_dtoa_r+0x7ba>
   896da:	9b07      	ldr	r3, [sp, #28]
   896dc:	9a03      	ldr	r2, [sp, #12]
   896de:	3301      	adds	r3, #1
   896e0:	9307      	str	r3, [sp, #28]
   896e2:	2331      	movs	r3, #49	; 0x31
   896e4:	7013      	strb	r3, [r2, #0]
   896e6:	e654      	b.n	89392 <_dtoa_r+0x7ba>
   896e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   896ea:	2a00      	cmp	r2, #0
   896ec:	f000 8128 	beq.w	89940 <_dtoa_r+0xd68>
   896f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
   896f4:	9a06      	ldr	r2, [sp, #24]
   896f6:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   896fa:	441a      	add	r2, r3
   896fc:	9206      	str	r2, [sp, #24]
   896fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
   89700:	4617      	mov	r7, r2
   89702:	441a      	add	r2, r3
   89704:	9209      	str	r2, [sp, #36]	; 0x24
   89706:	e564      	b.n	891d2 <_dtoa_r+0x5fa>
   89708:	f04f 0900 	mov.w	r9, #0
   8970c:	464e      	mov	r6, r9
   8970e:	e4dc      	b.n	890ca <_dtoa_r+0x4f2>
   89710:	4629      	mov	r1, r5
   89712:	4620      	mov	r0, r4
   89714:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   89716:	f000 ffe1 	bl	8a6dc <__pow5mult>
   8971a:	4605      	mov	r5, r0
   8971c:	e5b1      	b.n	89282 <_dtoa_r+0x6aa>
   8971e:	900e      	str	r0, [sp, #56]	; 0x38
   89720:	e564      	b.n	891ec <_dtoa_r+0x614>
   89722:	f000 8111 	beq.w	89948 <_dtoa_r+0xd70>
   89726:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   8972a:	9a07      	ldr	r2, [sp, #28]
   8972c:	4b4f      	ldr	r3, [pc, #316]	; (8986c <_dtoa_r+0xc94>)
   8972e:	4256      	negs	r6, r2
   89730:	f006 020f 	and.w	r2, r6, #15
   89734:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   89738:	e9d3 2300 	ldrd	r2, r3, [r3]
   8973c:	f003 fd20 	bl	8d180 <__aeabi_dmul>
   89740:	1136      	asrs	r6, r6, #4
   89742:	4680      	mov	r8, r0
   89744:	4689      	mov	r9, r1
   89746:	f000 8170 	beq.w	89a2a <_dtoa_r+0xe52>
   8974a:	2300      	movs	r3, #0
   8974c:	f04f 0a02 	mov.w	sl, #2
   89750:	4f47      	ldr	r7, [pc, #284]	; (89870 <_dtoa_r+0xc98>)
   89752:	07f2      	lsls	r2, r6, #31
   89754:	d506      	bpl.n	89764 <_dtoa_r+0xb8c>
   89756:	e9d7 2300 	ldrd	r2, r3, [r7]
   8975a:	f003 fd11 	bl	8d180 <__aeabi_dmul>
   8975e:	2301      	movs	r3, #1
   89760:	f10a 0a01 	add.w	sl, sl, #1
   89764:	1076      	asrs	r6, r6, #1
   89766:	f107 0708 	add.w	r7, r7, #8
   8976a:	d1f2      	bne.n	89752 <_dtoa_r+0xb7a>
   8976c:	2b00      	cmp	r3, #0
   8976e:	f43f abb1 	beq.w	88ed4 <_dtoa_r+0x2fc>
   89772:	4680      	mov	r8, r0
   89774:	4689      	mov	r9, r1
   89776:	f7ff bbad 	b.w	88ed4 <_dtoa_r+0x2fc>
   8977a:	9b04      	ldr	r3, [sp, #16]
   8977c:	2b00      	cmp	r3, #0
   8977e:	f47f ae46 	bne.w	8940e <_dtoa_r+0x836>
   89782:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   89786:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8978a:	2b00      	cmp	r3, #0
   8978c:	f43f af18 	beq.w	895c0 <_dtoa_r+0x9e8>
   89790:	e63d      	b.n	8940e <_dtoa_r+0x836>
   89792:	2a00      	cmp	r2, #0
   89794:	dd12      	ble.n	897bc <_dtoa_r+0xbe4>
   89796:	4629      	mov	r1, r5
   89798:	2201      	movs	r2, #1
   8979a:	4620      	mov	r0, r4
   8979c:	9304      	str	r3, [sp, #16]
   8979e:	f000 fff9 	bl	8a794 <__lshift>
   897a2:	4649      	mov	r1, r9
   897a4:	4605      	mov	r5, r0
   897a6:	f001 f86b 	bl	8a880 <__mcmp>
   897aa:	2800      	cmp	r0, #0
   897ac:	9b04      	ldr	r3, [sp, #16]
   897ae:	f340 8117 	ble.w	899e0 <_dtoa_r+0xe08>
   897b2:	2b39      	cmp	r3, #57	; 0x39
   897b4:	f000 80fb 	beq.w	899ae <_dtoa_r+0xdd6>
   897b8:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   897bc:	46ba      	mov	sl, r7
   897be:	9a07      	ldr	r2, [sp, #28]
   897c0:	4637      	mov	r7, r6
   897c2:	3201      	adds	r2, #1
   897c4:	4646      	mov	r6, r8
   897c6:	9207      	str	r2, [sp, #28]
   897c8:	f80a 3b01 	strb.w	r3, [sl], #1
   897cc:	e5e1      	b.n	89392 <_dtoa_r+0x7ba>
   897ce:	9509      	str	r5, [sp, #36]	; 0x24
   897d0:	9c06      	ldr	r4, [sp, #24]
   897d2:	9d04      	ldr	r5, [sp, #16]
   897d4:	4602      	mov	r2, r0
   897d6:	460b      	mov	r3, r1
   897d8:	f003 fb1c 	bl	8ce14 <__adddf3>
   897dc:	4652      	mov	r2, sl
   897de:	465b      	mov	r3, fp
   897e0:	4680      	mov	r8, r0
   897e2:	4689      	mov	r9, r1
   897e4:	f003 ff5c 	bl	8d6a0 <__aeabi_dcmpgt>
   897e8:	b960      	cbnz	r0, 89804 <_dtoa_r+0xc2c>
   897ea:	4652      	mov	r2, sl
   897ec:	465b      	mov	r3, fp
   897ee:	4640      	mov	r0, r8
   897f0:	4649      	mov	r1, r9
   897f2:	f003 ff2d 	bl	8d650 <__aeabi_dcmpeq>
   897f6:	2800      	cmp	r0, #0
   897f8:	f43f accb 	beq.w	89192 <_dtoa_r+0x5ba>
   897fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   897fe:	07d9      	lsls	r1, r3, #31
   89800:	f57f acc7 	bpl.w	89192 <_dtoa_r+0x5ba>
   89804:	9a03      	ldr	r2, [sp, #12]
   89806:	f7ff bbff 	b.w	89008 <_dtoa_r+0x430>
   8980a:	4620      	mov	r0, r4
   8980c:	6871      	ldr	r1, [r6, #4]
   8980e:	f000 fdbb 	bl	8a388 <_Balloc>
   89812:	4607      	mov	r7, r0
   89814:	2800      	cmp	r0, #0
   89816:	f000 810c 	beq.w	89a32 <_dtoa_r+0xe5a>
   8981a:	6933      	ldr	r3, [r6, #16]
   8981c:	f106 010c 	add.w	r1, r6, #12
   89820:	3302      	adds	r3, #2
   89822:	009a      	lsls	r2, r3, #2
   89824:	300c      	adds	r0, #12
   89826:	f7fd fa93 	bl	86d50 <memcpy>
   8982a:	4639      	mov	r1, r7
   8982c:	2201      	movs	r2, #1
   8982e:	4620      	mov	r0, r4
   89830:	f000 ffb0 	bl	8a794 <__lshift>
   89834:	4680      	mov	r8, r0
   89836:	e610      	b.n	8945a <_dtoa_r+0x882>
   89838:	4629      	mov	r1, r5
   8983a:	4620      	mov	r0, r4
   8983c:	f000 ff4e 	bl	8a6dc <__pow5mult>
   89840:	4605      	mov	r5, r0
   89842:	e51e      	b.n	89282 <_dtoa_r+0x6aa>
   89844:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   89848:	1a9f      	subs	r7, r3, r2
   8984a:	e4c2      	b.n	891d2 <_dtoa_r+0x5fa>
   8984c:	2b39      	cmp	r3, #57	; 0x39
   8984e:	f000 80ae 	beq.w	899ae <_dtoa_r+0xdd6>
   89852:	46ba      	mov	sl, r7
   89854:	3301      	adds	r3, #1
   89856:	e7b2      	b.n	897be <_dtoa_r+0xbe6>
   89858:	9a07      	ldr	r2, [sp, #28]
   8985a:	4637      	mov	r7, r6
   8985c:	3201      	adds	r2, #1
   8985e:	4646      	mov	r6, r8
   89860:	9207      	str	r2, [sp, #28]
   89862:	e577      	b.n	89354 <_dtoa_r+0x77c>
   89864:	0008db10 	.word	0x0008db10
   89868:	7ff00000 	.word	0x7ff00000
   8986c:	0008dc60 	.word	0x0008dc60
   89870:	0008dc38 	.word	0x0008dc38
   89874:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   89878:	4983      	ldr	r1, [pc, #524]	; (89a88 <_dtoa_r+0xeb0>)
   8987a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8987e:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   89882:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   89886:	f003 fc7b 	bl	8d180 <__aeabi_dmul>
   8988a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8988e:	4649      	mov	r1, r9
   89890:	4640      	mov	r0, r8
   89892:	f003 ff25 	bl	8d6e0 <__aeabi_d2iz>
   89896:	4606      	mov	r6, r0
   89898:	f003 fc08 	bl	8d0ac <__aeabi_i2d>
   8989c:	460b      	mov	r3, r1
   8989e:	4602      	mov	r2, r0
   898a0:	4649      	mov	r1, r9
   898a2:	4640      	mov	r0, r8
   898a4:	f003 fab4 	bl	8ce10 <__aeabi_dsub>
   898a8:	4653      	mov	r3, sl
   898aa:	9f03      	ldr	r7, [sp, #12]
   898ac:	3630      	adds	r6, #48	; 0x30
   898ae:	2b01      	cmp	r3, #1
   898b0:	4680      	mov	r8, r0
   898b2:	4689      	mov	r9, r1
   898b4:	f807 6b01 	strb.w	r6, [r7], #1
   898b8:	f000 80ac 	beq.w	89a14 <_dtoa_r+0xe3c>
   898bc:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   898be:	9b03      	ldr	r3, [sp, #12]
   898c0:	441e      	add	r6, r3
   898c2:	2200      	movs	r2, #0
   898c4:	4b71      	ldr	r3, [pc, #452]	; (89a8c <_dtoa_r+0xeb4>)
   898c6:	4640      	mov	r0, r8
   898c8:	4649      	mov	r1, r9
   898ca:	f003 fc59 	bl	8d180 <__aeabi_dmul>
   898ce:	4689      	mov	r9, r1
   898d0:	4680      	mov	r8, r0
   898d2:	f003 ff05 	bl	8d6e0 <__aeabi_d2iz>
   898d6:	4682      	mov	sl, r0
   898d8:	f003 fbe8 	bl	8d0ac <__aeabi_i2d>
   898dc:	4602      	mov	r2, r0
   898de:	460b      	mov	r3, r1
   898e0:	4640      	mov	r0, r8
   898e2:	4649      	mov	r1, r9
   898e4:	f003 fa94 	bl	8ce10 <__aeabi_dsub>
   898e8:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   898ec:	f807 ab01 	strb.w	sl, [r7], #1
   898f0:	42b7      	cmp	r7, r6
   898f2:	4680      	mov	r8, r0
   898f4:	4689      	mov	r9, r1
   898f6:	d1e4      	bne.n	898c2 <_dtoa_r+0xcea>
   898f8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   898fc:	2200      	movs	r2, #0
   898fe:	4b64      	ldr	r3, [pc, #400]	; (89a90 <_dtoa_r+0xeb8>)
   89900:	f003 fa88 	bl	8ce14 <__adddf3>
   89904:	4642      	mov	r2, r8
   89906:	464b      	mov	r3, r9
   89908:	f003 feac 	bl	8d664 <__aeabi_dcmplt>
   8990c:	2800      	cmp	r0, #0
   8990e:	d162      	bne.n	899d6 <_dtoa_r+0xdfe>
   89910:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   89914:	2000      	movs	r0, #0
   89916:	495e      	ldr	r1, [pc, #376]	; (89a90 <_dtoa_r+0xeb8>)
   89918:	f003 fa7a 	bl	8ce10 <__aeabi_dsub>
   8991c:	4642      	mov	r2, r8
   8991e:	464b      	mov	r3, r9
   89920:	f003 febe 	bl	8d6a0 <__aeabi_dcmpgt>
   89924:	2800      	cmp	r0, #0
   89926:	f43f aba9 	beq.w	8907c <_dtoa_r+0x4a4>
   8992a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   8992e:	46b2      	mov	sl, r6
   89930:	2b30      	cmp	r3, #48	; 0x30
   89932:	f106 36ff 	add.w	r6, r6, #4294967295
   89936:	d0f8      	beq.n	8992a <_dtoa_r+0xd52>
   89938:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8993a:	3301      	adds	r3, #1
   8993c:	9307      	str	r3, [sp, #28]
   8993e:	e538      	b.n	893b2 <_dtoa_r+0x7da>
   89940:	9b16      	ldr	r3, [sp, #88]	; 0x58
   89942:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   89946:	e6d5      	b.n	896f4 <_dtoa_r+0xb1c>
   89948:	f04f 0a02 	mov.w	sl, #2
   8994c:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   89950:	f7ff bac0 	b.w	88ed4 <_dtoa_r+0x2fc>
   89954:	9b08      	ldr	r3, [sp, #32]
   89956:	2b00      	cmp	r3, #0
   89958:	f43f ab62 	beq.w	89020 <_dtoa_r+0x448>
   8995c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8995e:	2b00      	cmp	r3, #0
   89960:	f77f ab8c 	ble.w	8907c <_dtoa_r+0x4a4>
   89964:	9313      	str	r3, [sp, #76]	; 0x4c
   89966:	9b07      	ldr	r3, [sp, #28]
   89968:	2200      	movs	r2, #0
   8996a:	3b01      	subs	r3, #1
   8996c:	4640      	mov	r0, r8
   8996e:	4649      	mov	r1, r9
   89970:	9314      	str	r3, [sp, #80]	; 0x50
   89972:	4b46      	ldr	r3, [pc, #280]	; (89a8c <_dtoa_r+0xeb4>)
   89974:	f003 fc04 	bl	8d180 <__aeabi_dmul>
   89978:	4680      	mov	r8, r0
   8997a:	4689      	mov	r9, r1
   8997c:	f10a 0001 	add.w	r0, sl, #1
   89980:	f003 fb94 	bl	8d0ac <__aeabi_i2d>
   89984:	4642      	mov	r2, r8
   89986:	464b      	mov	r3, r9
   89988:	f003 fbfa 	bl	8d180 <__aeabi_dmul>
   8998c:	4b41      	ldr	r3, [pc, #260]	; (89a94 <_dtoa_r+0xebc>)
   8998e:	2200      	movs	r2, #0
   89990:	f003 fa40 	bl	8ce14 <__adddf3>
   89994:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   89998:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8999c:	9311      	str	r3, [sp, #68]	; 0x44
   8999e:	f7ff babc 	b.w	88f1a <_dtoa_r+0x342>
   899a2:	9b07      	ldr	r3, [sp, #28]
   899a4:	3301      	adds	r3, #1
   899a6:	9307      	str	r3, [sp, #28]
   899a8:	2331      	movs	r3, #49	; 0x31
   899aa:	f7ff bb34 	b.w	89016 <_dtoa_r+0x43e>
   899ae:	9b07      	ldr	r3, [sp, #28]
   899b0:	46bb      	mov	fp, r7
   899b2:	3301      	adds	r3, #1
   899b4:	9307      	str	r3, [sp, #28]
   899b6:	2339      	movs	r3, #57	; 0x39
   899b8:	4637      	mov	r7, r6
   899ba:	f80b 3b01 	strb.w	r3, [fp], #1
   899be:	4646      	mov	r6, r8
   899c0:	e4d7      	b.n	89372 <_dtoa_r+0x79a>
   899c2:	f04f 0900 	mov.w	r9, #0
   899c6:	464e      	mov	r6, r9
   899c8:	e649      	b.n	8965e <_dtoa_r+0xa86>
   899ca:	469a      	mov	sl, r3
   899cc:	e468      	b.n	892a0 <_dtoa_r+0x6c8>
   899ce:	9d10      	ldr	r5, [sp, #64]	; 0x40
   899d0:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   899d2:	46b2      	mov	sl, r6
   899d4:	e7b0      	b.n	89938 <_dtoa_r+0xd60>
   899d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   899d8:	9a03      	ldr	r2, [sp, #12]
   899da:	9307      	str	r3, [sp, #28]
   899dc:	f7ff bb14 	b.w	89008 <_dtoa_r+0x430>
   899e0:	f47f aeec 	bne.w	897bc <_dtoa_r+0xbe4>
   899e4:	07da      	lsls	r2, r3, #31
   899e6:	f57f aee9 	bpl.w	897bc <_dtoa_r+0xbe4>
   899ea:	e6e2      	b.n	897b2 <_dtoa_r+0xbda>
   899ec:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   899f0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   899f2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   899f4:	f7ff bb42 	b.w	8907c <_dtoa_r+0x4a4>
   899f8:	2b39      	cmp	r3, #57	; 0x39
   899fa:	d0d8      	beq.n	899ae <_dtoa_r+0xdd6>
   899fc:	f1ba 0f00 	cmp.w	sl, #0
   89a00:	f73f aeda 	bgt.w	897b8 <_dtoa_r+0xbe0>
   89a04:	e6da      	b.n	897bc <_dtoa_r+0xbe4>
   89a06:	9b22      	ldr	r3, [sp, #136]	; 0x88
   89a08:	2b02      	cmp	r3, #2
   89a0a:	f73f ae13 	bgt.w	89634 <_dtoa_r+0xa5c>
   89a0e:	f8cd 801c 	str.w	r8, [sp, #28]
   89a12:	e59c      	b.n	8954e <_dtoa_r+0x976>
   89a14:	463e      	mov	r6, r7
   89a16:	e76f      	b.n	898f8 <_dtoa_r+0xd20>
   89a18:	9b22      	ldr	r3, [sp, #136]	; 0x88
   89a1a:	2b02      	cmp	r3, #2
   89a1c:	f73f ae0a 	bgt.w	89634 <_dtoa_r+0xa5c>
   89a20:	9b12      	ldr	r3, [sp, #72]	; 0x48
   89a22:	f8cd 801c 	str.w	r8, [sp, #28]
   89a26:	9308      	str	r3, [sp, #32]
   89a28:	e50f      	b.n	8944a <_dtoa_r+0x872>
   89a2a:	f04f 0a02 	mov.w	sl, #2
   89a2e:	f7ff ba51 	b.w	88ed4 <_dtoa_r+0x2fc>
   89a32:	4602      	mov	r2, r0
   89a34:	f240 21ea 	movw	r1, #746	; 0x2ea
   89a38:	4b17      	ldr	r3, [pc, #92]	; (89a98 <_dtoa_r+0xec0>)
   89a3a:	4818      	ldr	r0, [pc, #96]	; (89a9c <_dtoa_r+0xec4>)
   89a3c:	f001 f956 	bl	8acec <__assert_func>
   89a40:	2600      	movs	r6, #0
   89a42:	4620      	mov	r0, r4
   89a44:	4631      	mov	r1, r6
   89a46:	6466      	str	r6, [r4, #68]	; 0x44
   89a48:	f000 fc9e 	bl	8a388 <_Balloc>
   89a4c:	9003      	str	r0, [sp, #12]
   89a4e:	b978      	cbnz	r0, 89a70 <_dtoa_r+0xe98>
   89a50:	2200      	movs	r2, #0
   89a52:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   89a56:	4b10      	ldr	r3, [pc, #64]	; (89a98 <_dtoa_r+0xec0>)
   89a58:	4810      	ldr	r0, [pc, #64]	; (89a9c <_dtoa_r+0xec4>)
   89a5a:	f001 f947 	bl	8acec <__assert_func>
   89a5e:	4b10      	ldr	r3, [pc, #64]	; (89aa0 <_dtoa_r+0xec8>)
   89a60:	9303      	str	r3, [sp, #12]
   89a62:	f7ff b8f4 	b.w	88c4e <_dtoa_r+0x76>
   89a66:	f43f ac33 	beq.w	892d0 <_dtoa_r+0x6f8>
   89a6a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   89a6e:	e4b5      	b.n	893dc <_dtoa_r+0x804>
   89a70:	9b03      	ldr	r3, [sp, #12]
   89a72:	2201      	movs	r2, #1
   89a74:	6423      	str	r3, [r4, #64]	; 0x40
   89a76:	f04f 33ff 	mov.w	r3, #4294967295
   89a7a:	9623      	str	r6, [sp, #140]	; 0x8c
   89a7c:	9312      	str	r3, [sp, #72]	; 0x48
   89a7e:	920c      	str	r2, [sp, #48]	; 0x30
   89a80:	9308      	str	r3, [sp, #32]
   89a82:	f7ff bafb 	b.w	8907c <_dtoa_r+0x4a4>
   89a86:	bf00      	nop
   89a88:	0008dc60 	.word	0x0008dc60
   89a8c:	40240000 	.word	0x40240000
   89a90:	3fe00000 	.word	0x3fe00000
   89a94:	401c0000 	.word	0x401c0000
   89a98:	0008db20 	.word	0x0008db20
   89a9c:	0008db34 	.word	0x0008db34
   89aa0:	0008db14 	.word	0x0008db14

00089aa4 <__libc_fini_array>:
   89aa4:	b538      	push	{r3, r4, r5, lr}
   89aa6:	4b08      	ldr	r3, [pc, #32]	; (89ac8 <__libc_fini_array+0x24>)
   89aa8:	4d08      	ldr	r5, [pc, #32]	; (89acc <__libc_fini_array+0x28>)
   89aaa:	1b5b      	subs	r3, r3, r5
   89aac:	109c      	asrs	r4, r3, #2
   89aae:	d007      	beq.n	89ac0 <__libc_fini_array+0x1c>
   89ab0:	3b04      	subs	r3, #4
   89ab2:	441d      	add	r5, r3
   89ab4:	3c01      	subs	r4, #1
   89ab6:	f855 3904 	ldr.w	r3, [r5], #-4
   89aba:	4798      	blx	r3
   89abc:	2c00      	cmp	r4, #0
   89abe:	d1f9      	bne.n	89ab4 <__libc_fini_array+0x10>
   89ac0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   89ac4:	f004 b9fa 	b.w	8debc <_fini>
   89ac8:	0008decc 	.word	0x0008decc
   89acc:	0008dec8 	.word	0x0008dec8

00089ad0 <_malloc_trim_r>:
   89ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89ad2:	460c      	mov	r4, r1
   89ad4:	4f23      	ldr	r7, [pc, #140]	; (89b64 <_malloc_trim_r+0x94>)
   89ad6:	4606      	mov	r6, r0
   89ad8:	f000 fc4a 	bl	8a370 <__malloc_lock>
   89adc:	68bb      	ldr	r3, [r7, #8]
   89ade:	685d      	ldr	r5, [r3, #4]
   89ae0:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
   89ae4:	f025 0503 	bic.w	r5, r5, #3
   89ae8:	330f      	adds	r3, #15
   89aea:	442b      	add	r3, r5
   89aec:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   89af0:	f023 030f 	bic.w	r3, r3, #15
   89af4:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   89af8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   89afc:	db07      	blt.n	89b0e <_malloc_trim_r+0x3e>
   89afe:	2100      	movs	r1, #0
   89b00:	4630      	mov	r0, r6
   89b02:	f001 f81d 	bl	8ab40 <_sbrk_r>
   89b06:	68bb      	ldr	r3, [r7, #8]
   89b08:	442b      	add	r3, r5
   89b0a:	4298      	cmp	r0, r3
   89b0c:	d004      	beq.n	89b18 <_malloc_trim_r+0x48>
   89b0e:	4630      	mov	r0, r6
   89b10:	f000 fc34 	bl	8a37c <__malloc_unlock>
   89b14:	2000      	movs	r0, #0
   89b16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89b18:	4630      	mov	r0, r6
   89b1a:	4261      	negs	r1, r4
   89b1c:	f001 f810 	bl	8ab40 <_sbrk_r>
   89b20:	3001      	adds	r0, #1
   89b22:	d00d      	beq.n	89b40 <_malloc_trim_r+0x70>
   89b24:	4a10      	ldr	r2, [pc, #64]	; (89b68 <_malloc_trim_r+0x98>)
   89b26:	68bb      	ldr	r3, [r7, #8]
   89b28:	1b2d      	subs	r5, r5, r4
   89b2a:	f045 0501 	orr.w	r5, r5, #1
   89b2e:	605d      	str	r5, [r3, #4]
   89b30:	6813      	ldr	r3, [r2, #0]
   89b32:	4630      	mov	r0, r6
   89b34:	1b1b      	subs	r3, r3, r4
   89b36:	6013      	str	r3, [r2, #0]
   89b38:	f000 fc20 	bl	8a37c <__malloc_unlock>
   89b3c:	2001      	movs	r0, #1
   89b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89b40:	2100      	movs	r1, #0
   89b42:	4630      	mov	r0, r6
   89b44:	f000 fffc 	bl	8ab40 <_sbrk_r>
   89b48:	68ba      	ldr	r2, [r7, #8]
   89b4a:	1a83      	subs	r3, r0, r2
   89b4c:	2b0f      	cmp	r3, #15
   89b4e:	ddde      	ble.n	89b0e <_malloc_trim_r+0x3e>
   89b50:	f043 0301 	orr.w	r3, r3, #1
   89b54:	6053      	str	r3, [r2, #4]
   89b56:	4b05      	ldr	r3, [pc, #20]	; (89b6c <_malloc_trim_r+0x9c>)
   89b58:	4903      	ldr	r1, [pc, #12]	; (89b68 <_malloc_trim_r+0x98>)
   89b5a:	681b      	ldr	r3, [r3, #0]
   89b5c:	1ac0      	subs	r0, r0, r3
   89b5e:	6008      	str	r0, [r1, #0]
   89b60:	e7d5      	b.n	89b0e <_malloc_trim_r+0x3e>
   89b62:	bf00      	nop
   89b64:	200710fc 	.word	0x200710fc
   89b68:	20073438 	.word	0x20073438
   89b6c:	20071504 	.word	0x20071504

00089b70 <_free_r>:
   89b70:	2900      	cmp	r1, #0
   89b72:	d05e      	beq.n	89c32 <_free_r+0xc2>
   89b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89b76:	460c      	mov	r4, r1
   89b78:	4606      	mov	r6, r0
   89b7a:	f000 fbf9 	bl	8a370 <__malloc_lock>
   89b7e:	f854 2c04 	ldr.w	r2, [r4, #-4]
   89b82:	4f78      	ldr	r7, [pc, #480]	; (89d64 <_free_r+0x1f4>)
   89b84:	f1a4 0508 	sub.w	r5, r4, #8
   89b88:	f022 0101 	bic.w	r1, r2, #1
   89b8c:	1868      	adds	r0, r5, r1
   89b8e:	f8d7 c008 	ldr.w	ip, [r7, #8]
   89b92:	6843      	ldr	r3, [r0, #4]
   89b94:	4584      	cmp	ip, r0
   89b96:	f023 0303 	bic.w	r3, r3, #3
   89b9a:	f000 8087 	beq.w	89cac <_free_r+0x13c>
   89b9e:	07d2      	lsls	r2, r2, #31
   89ba0:	6043      	str	r3, [r0, #4]
   89ba2:	d434      	bmi.n	89c0e <_free_r+0x9e>
   89ba4:	f854 2c08 	ldr.w	r2, [r4, #-8]
   89ba8:	f107 0408 	add.w	r4, r7, #8
   89bac:	1aad      	subs	r5, r5, r2
   89bae:	4411      	add	r1, r2
   89bb0:	68aa      	ldr	r2, [r5, #8]
   89bb2:	42a2      	cmp	r2, r4
   89bb4:	d068      	beq.n	89c88 <_free_r+0x118>
   89bb6:	eb00 0c03 	add.w	ip, r0, r3
   89bba:	f8dc e004 	ldr.w	lr, [ip, #4]
   89bbe:	f8d5 c00c 	ldr.w	ip, [r5, #12]
   89bc2:	f01e 0f01 	tst.w	lr, #1
   89bc6:	f8c2 c00c 	str.w	ip, [r2, #12]
   89bca:	f8cc 2008 	str.w	r2, [ip, #8]
   89bce:	f000 8091 	beq.w	89cf4 <_free_r+0x184>
   89bd2:	f041 0301 	orr.w	r3, r1, #1
   89bd6:	606b      	str	r3, [r5, #4]
   89bd8:	6001      	str	r1, [r0, #0]
   89bda:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   89bde:	d231      	bcs.n	89c44 <_free_r+0xd4>
   89be0:	094a      	lsrs	r2, r1, #5
   89be2:	08cb      	lsrs	r3, r1, #3
   89be4:	2101      	movs	r1, #1
   89be6:	4091      	lsls	r1, r2
   89be8:	687a      	ldr	r2, [r7, #4]
   89bea:	3301      	adds	r3, #1
   89bec:	4311      	orrs	r1, r2
   89bee:	6079      	str	r1, [r7, #4]
   89bf0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   89bf4:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   89bf8:	3a08      	subs	r2, #8
   89bfa:	e9c5 1202 	strd	r1, r2, [r5, #8]
   89bfe:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   89c02:	60cd      	str	r5, [r1, #12]
   89c04:	4630      	mov	r0, r6
   89c06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   89c0a:	f000 bbb7 	b.w	8a37c <__malloc_unlock>
   89c0e:	18c2      	adds	r2, r0, r3
   89c10:	6852      	ldr	r2, [r2, #4]
   89c12:	07d2      	lsls	r2, r2, #31
   89c14:	d40e      	bmi.n	89c34 <_free_r+0xc4>
   89c16:	4419      	add	r1, r3
   89c18:	f107 0408 	add.w	r4, r7, #8
   89c1c:	6883      	ldr	r3, [r0, #8]
   89c1e:	42a3      	cmp	r3, r4
   89c20:	d070      	beq.n	89d04 <_free_r+0x194>
   89c22:	68c2      	ldr	r2, [r0, #12]
   89c24:	60da      	str	r2, [r3, #12]
   89c26:	6093      	str	r3, [r2, #8]
   89c28:	f041 0301 	orr.w	r3, r1, #1
   89c2c:	606b      	str	r3, [r5, #4]
   89c2e:	5069      	str	r1, [r5, r1]
   89c30:	e7d3      	b.n	89bda <_free_r+0x6a>
   89c32:	4770      	bx	lr
   89c34:	f041 0301 	orr.w	r3, r1, #1
   89c38:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   89c3c:	f844 3c04 	str.w	r3, [r4, #-4]
   89c40:	6001      	str	r1, [r0, #0]
   89c42:	d3cd      	bcc.n	89be0 <_free_r+0x70>
   89c44:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   89c48:	ea4f 2351 	mov.w	r3, r1, lsr #9
   89c4c:	d247      	bcs.n	89cde <_free_r+0x16e>
   89c4e:	098b      	lsrs	r3, r1, #6
   89c50:	f103 0039 	add.w	r0, r3, #57	; 0x39
   89c54:	f103 0238 	add.w	r2, r3, #56	; 0x38
   89c58:	00c3      	lsls	r3, r0, #3
   89c5a:	18f8      	adds	r0, r7, r3
   89c5c:	58fb      	ldr	r3, [r7, r3]
   89c5e:	3808      	subs	r0, #8
   89c60:	4298      	cmp	r0, r3
   89c62:	d058      	beq.n	89d16 <_free_r+0x1a6>
   89c64:	685a      	ldr	r2, [r3, #4]
   89c66:	f022 0203 	bic.w	r2, r2, #3
   89c6a:	428a      	cmp	r2, r1
   89c6c:	d902      	bls.n	89c74 <_free_r+0x104>
   89c6e:	689b      	ldr	r3, [r3, #8]
   89c70:	4298      	cmp	r0, r3
   89c72:	d1f7      	bne.n	89c64 <_free_r+0xf4>
   89c74:	68d8      	ldr	r0, [r3, #12]
   89c76:	e9c5 3002 	strd	r3, r0, [r5, #8]
   89c7a:	6085      	str	r5, [r0, #8]
   89c7c:	4630      	mov	r0, r6
   89c7e:	60dd      	str	r5, [r3, #12]
   89c80:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   89c84:	f000 bb7a 	b.w	8a37c <__malloc_unlock>
   89c88:	18c2      	adds	r2, r0, r3
   89c8a:	6852      	ldr	r2, [r2, #4]
   89c8c:	07d2      	lsls	r2, r2, #31
   89c8e:	d463      	bmi.n	89d58 <_free_r+0x1e8>
   89c90:	440b      	add	r3, r1
   89c92:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   89c96:	60ca      	str	r2, [r1, #12]
   89c98:	6091      	str	r1, [r2, #8]
   89c9a:	f043 0201 	orr.w	r2, r3, #1
   89c9e:	606a      	str	r2, [r5, #4]
   89ca0:	4630      	mov	r0, r6
   89ca2:	50eb      	str	r3, [r5, r3]
   89ca4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   89ca8:	f000 bb68 	b.w	8a37c <__malloc_unlock>
   89cac:	440b      	add	r3, r1
   89cae:	07d1      	lsls	r1, r2, #31
   89cb0:	d407      	bmi.n	89cc2 <_free_r+0x152>
   89cb2:	f854 2c08 	ldr.w	r2, [r4, #-8]
   89cb6:	1aad      	subs	r5, r5, r2
   89cb8:	4413      	add	r3, r2
   89cba:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   89cbe:	60ca      	str	r2, [r1, #12]
   89cc0:	6091      	str	r1, [r2, #8]
   89cc2:	f043 0201 	orr.w	r2, r3, #1
   89cc6:	606a      	str	r2, [r5, #4]
   89cc8:	4a27      	ldr	r2, [pc, #156]	; (89d68 <_free_r+0x1f8>)
   89cca:	60bd      	str	r5, [r7, #8]
   89ccc:	6812      	ldr	r2, [r2, #0]
   89cce:	429a      	cmp	r2, r3
   89cd0:	d898      	bhi.n	89c04 <_free_r+0x94>
   89cd2:	4b26      	ldr	r3, [pc, #152]	; (89d6c <_free_r+0x1fc>)
   89cd4:	4630      	mov	r0, r6
   89cd6:	6819      	ldr	r1, [r3, #0]
   89cd8:	f7ff fefa 	bl	89ad0 <_malloc_trim_r>
   89cdc:	e792      	b.n	89c04 <_free_r+0x94>
   89cde:	2b14      	cmp	r3, #20
   89ce0:	d90a      	bls.n	89cf8 <_free_r+0x188>
   89ce2:	2b54      	cmp	r3, #84	; 0x54
   89ce4:	d81f      	bhi.n	89d26 <_free_r+0x1b6>
   89ce6:	0b0b      	lsrs	r3, r1, #12
   89ce8:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   89cec:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   89cf0:	00c3      	lsls	r3, r0, #3
   89cf2:	e7b2      	b.n	89c5a <_free_r+0xea>
   89cf4:	4419      	add	r1, r3
   89cf6:	e791      	b.n	89c1c <_free_r+0xac>
   89cf8:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   89cfc:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   89d00:	00c3      	lsls	r3, r0, #3
   89d02:	e7aa      	b.n	89c5a <_free_r+0xea>
   89d04:	f041 0301 	orr.w	r3, r1, #1
   89d08:	e9c7 5504 	strd	r5, r5, [r7, #16]
   89d0c:	e9c5 4402 	strd	r4, r4, [r5, #8]
   89d10:	606b      	str	r3, [r5, #4]
   89d12:	5069      	str	r1, [r5, r1]
   89d14:	e776      	b.n	89c04 <_free_r+0x94>
   89d16:	2101      	movs	r1, #1
   89d18:	1092      	asrs	r2, r2, #2
   89d1a:	fa01 f202 	lsl.w	r2, r1, r2
   89d1e:	6879      	ldr	r1, [r7, #4]
   89d20:	430a      	orrs	r2, r1
   89d22:	607a      	str	r2, [r7, #4]
   89d24:	e7a7      	b.n	89c76 <_free_r+0x106>
   89d26:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   89d2a:	d806      	bhi.n	89d3a <_free_r+0x1ca>
   89d2c:	0bcb      	lsrs	r3, r1, #15
   89d2e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   89d32:	f103 0277 	add.w	r2, r3, #119	; 0x77
   89d36:	00c3      	lsls	r3, r0, #3
   89d38:	e78f      	b.n	89c5a <_free_r+0xea>
   89d3a:	f240 5254 	movw	r2, #1364	; 0x554
   89d3e:	4293      	cmp	r3, r2
   89d40:	d806      	bhi.n	89d50 <_free_r+0x1e0>
   89d42:	0c8b      	lsrs	r3, r1, #18
   89d44:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   89d48:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   89d4c:	00c3      	lsls	r3, r0, #3
   89d4e:	e784      	b.n	89c5a <_free_r+0xea>
   89d50:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   89d54:	227e      	movs	r2, #126	; 0x7e
   89d56:	e780      	b.n	89c5a <_free_r+0xea>
   89d58:	f041 0301 	orr.w	r3, r1, #1
   89d5c:	606b      	str	r3, [r5, #4]
   89d5e:	6001      	str	r1, [r0, #0]
   89d60:	e750      	b.n	89c04 <_free_r+0x94>
   89d62:	bf00      	nop
   89d64:	200710fc 	.word	0x200710fc
   89d68:	20071508 	.word	0x20071508
   89d6c:	20073468 	.word	0x20073468

00089d70 <_localeconv_r>:
   89d70:	4800      	ldr	r0, [pc, #0]	; (89d74 <_localeconv_r+0x4>)
   89d72:	4770      	bx	lr
   89d74:	200715fc 	.word	0x200715fc

00089d78 <__retarget_lock_init_recursive>:
   89d78:	4770      	bx	lr
   89d7a:	bf00      	nop

00089d7c <__retarget_lock_close_recursive>:
   89d7c:	4770      	bx	lr
   89d7e:	bf00      	nop

00089d80 <__retarget_lock_acquire_recursive>:
   89d80:	4770      	bx	lr
   89d82:	bf00      	nop

00089d84 <__retarget_lock_release_recursive>:
   89d84:	4770      	bx	lr
   89d86:	bf00      	nop

00089d88 <_malloc_r>:
   89d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89d8c:	f101 050b 	add.w	r5, r1, #11
   89d90:	2d16      	cmp	r5, #22
   89d92:	4606      	mov	r6, r0
   89d94:	b083      	sub	sp, #12
   89d96:	d825      	bhi.n	89de4 <_malloc_r+0x5c>
   89d98:	2910      	cmp	r1, #16
   89d9a:	f200 80b8 	bhi.w	89f0e <_malloc_r+0x186>
   89d9e:	f000 fae7 	bl	8a370 <__malloc_lock>
   89da2:	2510      	movs	r5, #16
   89da4:	2218      	movs	r2, #24
   89da6:	f04f 0c02 	mov.w	ip, #2
   89daa:	4fb5      	ldr	r7, [pc, #724]	; (8a080 <_malloc_r+0x2f8>)
   89dac:	443a      	add	r2, r7
   89dae:	6853      	ldr	r3, [r2, #4]
   89db0:	f1a2 0108 	sub.w	r1, r2, #8
   89db4:	428b      	cmp	r3, r1
   89db6:	f000 80b7 	beq.w	89f28 <_malloc_r+0x1a0>
   89dba:	685a      	ldr	r2, [r3, #4]
   89dbc:	68d9      	ldr	r1, [r3, #12]
   89dbe:	f022 0203 	bic.w	r2, r2, #3
   89dc2:	441a      	add	r2, r3
   89dc4:	689c      	ldr	r4, [r3, #8]
   89dc6:	4630      	mov	r0, r6
   89dc8:	60e1      	str	r1, [r4, #12]
   89dca:	608c      	str	r4, [r1, #8]
   89dcc:	6851      	ldr	r1, [r2, #4]
   89dce:	f103 0408 	add.w	r4, r3, #8
   89dd2:	f041 0101 	orr.w	r1, r1, #1
   89dd6:	6051      	str	r1, [r2, #4]
   89dd8:	f000 fad0 	bl	8a37c <__malloc_unlock>
   89ddc:	4620      	mov	r0, r4
   89dde:	b003      	add	sp, #12
   89de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89de4:	f035 0507 	bics.w	r5, r5, #7
   89de8:	f100 8091 	bmi.w	89f0e <_malloc_r+0x186>
   89dec:	42a9      	cmp	r1, r5
   89dee:	f200 808e 	bhi.w	89f0e <_malloc_r+0x186>
   89df2:	f000 fabd 	bl	8a370 <__malloc_lock>
   89df6:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   89dfa:	f0c0 8194 	bcc.w	8a126 <_malloc_r+0x39e>
   89dfe:	0a6b      	lsrs	r3, r5, #9
   89e00:	f000 808c 	beq.w	89f1c <_malloc_r+0x194>
   89e04:	2b04      	cmp	r3, #4
   89e06:	f200 816a 	bhi.w	8a0de <_malloc_r+0x356>
   89e0a:	09ab      	lsrs	r3, r5, #6
   89e0c:	f103 0c39 	add.w	ip, r3, #57	; 0x39
   89e10:	f103 0438 	add.w	r4, r3, #56	; 0x38
   89e14:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   89e18:	4f99      	ldr	r7, [pc, #612]	; (8a080 <_malloc_r+0x2f8>)
   89e1a:	4438      	add	r0, r7
   89e1c:	6843      	ldr	r3, [r0, #4]
   89e1e:	3808      	subs	r0, #8
   89e20:	4298      	cmp	r0, r3
   89e22:	d106      	bne.n	89e32 <_malloc_r+0xaa>
   89e24:	e00c      	b.n	89e40 <_malloc_r+0xb8>
   89e26:	2900      	cmp	r1, #0
   89e28:	f280 8126 	bge.w	8a078 <_malloc_r+0x2f0>
   89e2c:	68db      	ldr	r3, [r3, #12]
   89e2e:	4298      	cmp	r0, r3
   89e30:	d006      	beq.n	89e40 <_malloc_r+0xb8>
   89e32:	685a      	ldr	r2, [r3, #4]
   89e34:	f022 0203 	bic.w	r2, r2, #3
   89e38:	1b51      	subs	r1, r2, r5
   89e3a:	290f      	cmp	r1, #15
   89e3c:	ddf3      	ble.n	89e26 <_malloc_r+0x9e>
   89e3e:	46a4      	mov	ip, r4
   89e40:	693c      	ldr	r4, [r7, #16]
   89e42:	f8df e240 	ldr.w	lr, [pc, #576]	; 8a084 <_malloc_r+0x2fc>
   89e46:	4574      	cmp	r4, lr
   89e48:	d07a      	beq.n	89f40 <_malloc_r+0x1b8>
   89e4a:	6862      	ldr	r2, [r4, #4]
   89e4c:	f022 0203 	bic.w	r2, r2, #3
   89e50:	1b53      	subs	r3, r2, r5
   89e52:	2b0f      	cmp	r3, #15
   89e54:	f300 8176 	bgt.w	8a144 <_malloc_r+0x3bc>
   89e58:	2b00      	cmp	r3, #0
   89e5a:	e9c7 ee04 	strd	lr, lr, [r7, #16]
   89e5e:	f280 8167 	bge.w	8a130 <_malloc_r+0x3a8>
   89e62:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   89e66:	f080 8119 	bcs.w	8a09c <_malloc_r+0x314>
   89e6a:	2101      	movs	r1, #1
   89e6c:	08d3      	lsrs	r3, r2, #3
   89e6e:	0952      	lsrs	r2, r2, #5
   89e70:	440b      	add	r3, r1
   89e72:	4091      	lsls	r1, r2
   89e74:	687a      	ldr	r2, [r7, #4]
   89e76:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
   89e7a:	430a      	orrs	r2, r1
   89e7c:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   89e80:	3908      	subs	r1, #8
   89e82:	60a0      	str	r0, [r4, #8]
   89e84:	60e1      	str	r1, [r4, #12]
   89e86:	607a      	str	r2, [r7, #4]
   89e88:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   89e8c:	60c4      	str	r4, [r0, #12]
   89e8e:	2101      	movs	r1, #1
   89e90:	ea4f 03ac 	mov.w	r3, ip, asr #2
   89e94:	4099      	lsls	r1, r3
   89e96:	4291      	cmp	r1, r2
   89e98:	d859      	bhi.n	89f4e <_malloc_r+0x1c6>
   89e9a:	4211      	tst	r1, r2
   89e9c:	d106      	bne.n	89eac <_malloc_r+0x124>
   89e9e:	f02c 0c03 	bic.w	ip, ip, #3
   89ea2:	0049      	lsls	r1, r1, #1
   89ea4:	4211      	tst	r1, r2
   89ea6:	f10c 0c04 	add.w	ip, ip, #4
   89eaa:	d0fa      	beq.n	89ea2 <_malloc_r+0x11a>
   89eac:	eb07 09cc 	add.w	r9, r7, ip, lsl #3
   89eb0:	4648      	mov	r0, r9
   89eb2:	4664      	mov	r4, ip
   89eb4:	f8d0 800c 	ldr.w	r8, [r0, #12]
   89eb8:	4540      	cmp	r0, r8
   89eba:	d108      	bne.n	89ece <_malloc_r+0x146>
   89ebc:	e11c      	b.n	8a0f8 <_malloc_r+0x370>
   89ebe:	2b00      	cmp	r3, #0
   89ec0:	f280 8121 	bge.w	8a106 <_malloc_r+0x37e>
   89ec4:	f8d8 800c 	ldr.w	r8, [r8, #12]
   89ec8:	4540      	cmp	r0, r8
   89eca:	f000 8115 	beq.w	8a0f8 <_malloc_r+0x370>
   89ece:	f8d8 2004 	ldr.w	r2, [r8, #4]
   89ed2:	f022 0203 	bic.w	r2, r2, #3
   89ed6:	1b53      	subs	r3, r2, r5
   89ed8:	2b0f      	cmp	r3, #15
   89eda:	ddf0      	ble.n	89ebe <_malloc_r+0x136>
   89edc:	eb08 0105 	add.w	r1, r8, r5
   89ee0:	f045 0501 	orr.w	r5, r5, #1
   89ee4:	f8c8 5004 	str.w	r5, [r8, #4]
   89ee8:	4630      	mov	r0, r6
   89eea:	e9d8 6402 	ldrd	r6, r4, [r8, #8]
   89eee:	60f4      	str	r4, [r6, #12]
   89ef0:	60a6      	str	r6, [r4, #8]
   89ef2:	f043 0401 	orr.w	r4, r3, #1
   89ef6:	e9c7 1104 	strd	r1, r1, [r7, #16]
   89efa:	604c      	str	r4, [r1, #4]
   89efc:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   89f00:	f848 3002 	str.w	r3, [r8, r2]
   89f04:	f000 fa3a 	bl	8a37c <__malloc_unlock>
   89f08:	f108 0408 	add.w	r4, r8, #8
   89f0c:	e002      	b.n	89f14 <_malloc_r+0x18c>
   89f0e:	230c      	movs	r3, #12
   89f10:	2400      	movs	r4, #0
   89f12:	6033      	str	r3, [r6, #0]
   89f14:	4620      	mov	r0, r4
   89f16:	b003      	add	sp, #12
   89f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89f1c:	f44f 7000 	mov.w	r0, #512	; 0x200
   89f20:	f04f 0c40 	mov.w	ip, #64	; 0x40
   89f24:	243f      	movs	r4, #63	; 0x3f
   89f26:	e777      	b.n	89e18 <_malloc_r+0x90>
   89f28:	68d3      	ldr	r3, [r2, #12]
   89f2a:	429a      	cmp	r2, r3
   89f2c:	bf08      	it	eq
   89f2e:	f10c 0c02 	addeq.w	ip, ip, #2
   89f32:	f47f af42 	bne.w	89dba <_malloc_r+0x32>
   89f36:	693c      	ldr	r4, [r7, #16]
   89f38:	f8df e148 	ldr.w	lr, [pc, #328]	; 8a084 <_malloc_r+0x2fc>
   89f3c:	4574      	cmp	r4, lr
   89f3e:	d184      	bne.n	89e4a <_malloc_r+0xc2>
   89f40:	2101      	movs	r1, #1
   89f42:	687a      	ldr	r2, [r7, #4]
   89f44:	ea4f 03ac 	mov.w	r3, ip, asr #2
   89f48:	4099      	lsls	r1, r3
   89f4a:	4291      	cmp	r1, r2
   89f4c:	d9a5      	bls.n	89e9a <_malloc_r+0x112>
   89f4e:	68bc      	ldr	r4, [r7, #8]
   89f50:	6863      	ldr	r3, [r4, #4]
   89f52:	f023 0903 	bic.w	r9, r3, #3
   89f56:	454d      	cmp	r5, r9
   89f58:	d803      	bhi.n	89f62 <_malloc_r+0x1da>
   89f5a:	eba9 0305 	sub.w	r3, r9, r5
   89f5e:	2b0f      	cmp	r3, #15
   89f60:	dc7a      	bgt.n	8a058 <_malloc_r+0x2d0>
   89f62:	f8df b124 	ldr.w	fp, [pc, #292]	; 8a088 <_malloc_r+0x300>
   89f66:	4b49      	ldr	r3, [pc, #292]	; (8a08c <_malloc_r+0x304>)
   89f68:	f8db 2000 	ldr.w	r2, [fp]
   89f6c:	681b      	ldr	r3, [r3, #0]
   89f6e:	3201      	adds	r2, #1
   89f70:	442b      	add	r3, r5
   89f72:	eb04 0a09 	add.w	sl, r4, r9
   89f76:	f000 812f 	beq.w	8a1d8 <_malloc_r+0x450>
   89f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   89f7e:	330f      	adds	r3, #15
   89f80:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   89f84:	f028 080f 	bic.w	r8, r8, #15
   89f88:	4641      	mov	r1, r8
   89f8a:	4630      	mov	r0, r6
   89f8c:	f000 fdd8 	bl	8ab40 <_sbrk_r>
   89f90:	1c41      	adds	r1, r0, #1
   89f92:	4602      	mov	r2, r0
   89f94:	f000 80ef 	beq.w	8a176 <_malloc_r+0x3ee>
   89f98:	4582      	cmp	sl, r0
   89f9a:	f200 80ea 	bhi.w	8a172 <_malloc_r+0x3ea>
   89f9e:	4b3c      	ldr	r3, [pc, #240]	; (8a090 <_malloc_r+0x308>)
   89fa0:	6819      	ldr	r1, [r3, #0]
   89fa2:	4441      	add	r1, r8
   89fa4:	4608      	mov	r0, r1
   89fa6:	6019      	str	r1, [r3, #0]
   89fa8:	f000 8149 	beq.w	8a23e <_malloc_r+0x4b6>
   89fac:	f8db 1000 	ldr.w	r1, [fp]
   89fb0:	9301      	str	r3, [sp, #4]
   89fb2:	3101      	adds	r1, #1
   89fb4:	bf1b      	ittet	ne
   89fb6:	eba2 0a0a 	subne.w	sl, r2, sl
   89fba:	4450      	addne	r0, sl
   89fbc:	f8cb 2000 	streq.w	r2, [fp]
   89fc0:	6018      	strne	r0, [r3, #0]
   89fc2:	f012 0b07 	ands.w	fp, r2, #7
   89fc6:	f000 8111 	beq.w	8a1ec <_malloc_r+0x464>
   89fca:	f1cb 0108 	rsb	r1, fp, #8
   89fce:	440a      	add	r2, r1
   89fd0:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   89fd4:	4490      	add	r8, r2
   89fd6:	3108      	adds	r1, #8
   89fd8:	eba1 0108 	sub.w	r1, r1, r8
   89fdc:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   89fe0:	4651      	mov	r1, sl
   89fe2:	4630      	mov	r0, r6
   89fe4:	9200      	str	r2, [sp, #0]
   89fe6:	f000 fdab 	bl	8ab40 <_sbrk_r>
   89fea:	1c42      	adds	r2, r0, #1
   89fec:	e9dd 2300 	ldrd	r2, r3, [sp]
   89ff0:	f000 814b 	beq.w	8a28a <_malloc_r+0x502>
   89ff4:	1a80      	subs	r0, r0, r2
   89ff6:	eb00 080a 	add.w	r8, r0, sl
   89ffa:	6819      	ldr	r1, [r3, #0]
   89ffc:	f048 0001 	orr.w	r0, r8, #1
   8a000:	4451      	add	r1, sl
   8a002:	42bc      	cmp	r4, r7
   8a004:	60ba      	str	r2, [r7, #8]
   8a006:	6019      	str	r1, [r3, #0]
   8a008:	6050      	str	r0, [r2, #4]
   8a00a:	f000 8124 	beq.w	8a256 <_malloc_r+0x4ce>
   8a00e:	f1b9 0f0f 	cmp.w	r9, #15
   8a012:	f240 8122 	bls.w	8a25a <_malloc_r+0x4d2>
   8a016:	f04f 0e05 	mov.w	lr, #5
   8a01a:	6860      	ldr	r0, [r4, #4]
   8a01c:	f1a9 0c0c 	sub.w	ip, r9, #12
   8a020:	f02c 0c07 	bic.w	ip, ip, #7
   8a024:	f000 0001 	and.w	r0, r0, #1
   8a028:	ea40 000c 	orr.w	r0, r0, ip
   8a02c:	6060      	str	r0, [r4, #4]
   8a02e:	f1bc 0f0f 	cmp.w	ip, #15
   8a032:	eb04 000c 	add.w	r0, r4, ip
   8a036:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   8a03a:	f200 812e 	bhi.w	8a29a <_malloc_r+0x512>
   8a03e:	4614      	mov	r4, r2
   8a040:	6850      	ldr	r0, [r2, #4]
   8a042:	4b14      	ldr	r3, [pc, #80]	; (8a094 <_malloc_r+0x30c>)
   8a044:	681a      	ldr	r2, [r3, #0]
   8a046:	428a      	cmp	r2, r1
   8a048:	bf38      	it	cc
   8a04a:	6019      	strcc	r1, [r3, #0]
   8a04c:	4b12      	ldr	r3, [pc, #72]	; (8a098 <_malloc_r+0x310>)
   8a04e:	681a      	ldr	r2, [r3, #0]
   8a050:	428a      	cmp	r2, r1
   8a052:	bf38      	it	cc
   8a054:	6019      	strcc	r1, [r3, #0]
   8a056:	e090      	b.n	8a17a <_malloc_r+0x3f2>
   8a058:	1962      	adds	r2, r4, r5
   8a05a:	f043 0301 	orr.w	r3, r3, #1
   8a05e:	f045 0501 	orr.w	r5, r5, #1
   8a062:	6065      	str	r5, [r4, #4]
   8a064:	4630      	mov	r0, r6
   8a066:	60ba      	str	r2, [r7, #8]
   8a068:	3408      	adds	r4, #8
   8a06a:	6053      	str	r3, [r2, #4]
   8a06c:	f000 f986 	bl	8a37c <__malloc_unlock>
   8a070:	4620      	mov	r0, r4
   8a072:	b003      	add	sp, #12
   8a074:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a078:	68d9      	ldr	r1, [r3, #12]
   8a07a:	441a      	add	r2, r3
   8a07c:	e6a2      	b.n	89dc4 <_malloc_r+0x3c>
   8a07e:	bf00      	nop
   8a080:	200710fc 	.word	0x200710fc
   8a084:	20071104 	.word	0x20071104
   8a088:	20071504 	.word	0x20071504
   8a08c:	20073468 	.word	0x20073468
   8a090:	20073438 	.word	0x20073438
   8a094:	20073460 	.word	0x20073460
   8a098:	20073464 	.word	0x20073464
   8a09c:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   8a0a0:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8a0a4:	d35f      	bcc.n	8a166 <_malloc_r+0x3de>
   8a0a6:	2b14      	cmp	r3, #20
   8a0a8:	f200 80b1 	bhi.w	8a20e <_malloc_r+0x486>
   8a0ac:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   8a0b0:	00c9      	lsls	r1, r1, #3
   8a0b2:	335b      	adds	r3, #91	; 0x5b
   8a0b4:	1878      	adds	r0, r7, r1
   8a0b6:	5879      	ldr	r1, [r7, r1]
   8a0b8:	3808      	subs	r0, #8
   8a0ba:	4288      	cmp	r0, r1
   8a0bc:	f000 808f 	beq.w	8a1de <_malloc_r+0x456>
   8a0c0:	684b      	ldr	r3, [r1, #4]
   8a0c2:	f023 0303 	bic.w	r3, r3, #3
   8a0c6:	4293      	cmp	r3, r2
   8a0c8:	d902      	bls.n	8a0d0 <_malloc_r+0x348>
   8a0ca:	6889      	ldr	r1, [r1, #8]
   8a0cc:	4288      	cmp	r0, r1
   8a0ce:	d1f7      	bne.n	8a0c0 <_malloc_r+0x338>
   8a0d0:	68c8      	ldr	r0, [r1, #12]
   8a0d2:	687a      	ldr	r2, [r7, #4]
   8a0d4:	e9c4 1002 	strd	r1, r0, [r4, #8]
   8a0d8:	6084      	str	r4, [r0, #8]
   8a0da:	60cc      	str	r4, [r1, #12]
   8a0dc:	e6d7      	b.n	89e8e <_malloc_r+0x106>
   8a0de:	2b14      	cmp	r3, #20
   8a0e0:	d959      	bls.n	8a196 <_malloc_r+0x40e>
   8a0e2:	2b54      	cmp	r3, #84	; 0x54
   8a0e4:	f200 809b 	bhi.w	8a21e <_malloc_r+0x496>
   8a0e8:	0b2b      	lsrs	r3, r5, #12
   8a0ea:	f103 0c6f 	add.w	ip, r3, #111	; 0x6f
   8a0ee:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   8a0f2:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8a0f6:	e68f      	b.n	89e18 <_malloc_r+0x90>
   8a0f8:	3401      	adds	r4, #1
   8a0fa:	07a3      	lsls	r3, r4, #30
   8a0fc:	f100 0008 	add.w	r0, r0, #8
   8a100:	f47f aed8 	bne.w	89eb4 <_malloc_r+0x12c>
   8a104:	e053      	b.n	8a1ae <_malloc_r+0x426>
   8a106:	4644      	mov	r4, r8
   8a108:	4442      	add	r2, r8
   8a10a:	6853      	ldr	r3, [r2, #4]
   8a10c:	f8d8 100c 	ldr.w	r1, [r8, #12]
   8a110:	f043 0301 	orr.w	r3, r3, #1
   8a114:	6053      	str	r3, [r2, #4]
   8a116:	f854 3f08 	ldr.w	r3, [r4, #8]!
   8a11a:	4630      	mov	r0, r6
   8a11c:	60d9      	str	r1, [r3, #12]
   8a11e:	608b      	str	r3, [r1, #8]
   8a120:	f000 f92c 	bl	8a37c <__malloc_unlock>
   8a124:	e6f6      	b.n	89f14 <_malloc_r+0x18c>
   8a126:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   8a12a:	f105 0208 	add.w	r2, r5, #8
   8a12e:	e63c      	b.n	89daa <_malloc_r+0x22>
   8a130:	4422      	add	r2, r4
   8a132:	6853      	ldr	r3, [r2, #4]
   8a134:	4630      	mov	r0, r6
   8a136:	f043 0301 	orr.w	r3, r3, #1
   8a13a:	6053      	str	r3, [r2, #4]
   8a13c:	f000 f91e 	bl	8a37c <__malloc_unlock>
   8a140:	3408      	adds	r4, #8
   8a142:	e6e7      	b.n	89f14 <_malloc_r+0x18c>
   8a144:	1961      	adds	r1, r4, r5
   8a146:	f045 0501 	orr.w	r5, r5, #1
   8a14a:	6065      	str	r5, [r4, #4]
   8a14c:	f043 0501 	orr.w	r5, r3, #1
   8a150:	e9c7 1104 	strd	r1, r1, [r7, #16]
   8a154:	4630      	mov	r0, r6
   8a156:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   8a15a:	604d      	str	r5, [r1, #4]
   8a15c:	50a3      	str	r3, [r4, r2]
   8a15e:	f000 f90d 	bl	8a37c <__malloc_unlock>
   8a162:	3408      	adds	r4, #8
   8a164:	e6d6      	b.n	89f14 <_malloc_r+0x18c>
   8a166:	0993      	lsrs	r3, r2, #6
   8a168:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8a16c:	00c9      	lsls	r1, r1, #3
   8a16e:	3338      	adds	r3, #56	; 0x38
   8a170:	e7a0      	b.n	8a0b4 <_malloc_r+0x32c>
   8a172:	42bc      	cmp	r4, r7
   8a174:	d05e      	beq.n	8a234 <_malloc_r+0x4ac>
   8a176:	68bc      	ldr	r4, [r7, #8]
   8a178:	6860      	ldr	r0, [r4, #4]
   8a17a:	f020 0803 	bic.w	r8, r0, #3
   8a17e:	4545      	cmp	r5, r8
   8a180:	eba8 0305 	sub.w	r3, r8, r5
   8a184:	d802      	bhi.n	8a18c <_malloc_r+0x404>
   8a186:	2b0f      	cmp	r3, #15
   8a188:	f73f af66 	bgt.w	8a058 <_malloc_r+0x2d0>
   8a18c:	4630      	mov	r0, r6
   8a18e:	f000 f8f5 	bl	8a37c <__malloc_unlock>
   8a192:	2400      	movs	r4, #0
   8a194:	e6be      	b.n	89f14 <_malloc_r+0x18c>
   8a196:	f103 0c5c 	add.w	ip, r3, #92	; 0x5c
   8a19a:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   8a19e:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8a1a2:	e639      	b.n	89e18 <_malloc_r+0x90>
   8a1a4:	f859 3908 	ldr.w	r3, [r9], #-8
   8a1a8:	454b      	cmp	r3, r9
   8a1aa:	f040 8095 	bne.w	8a2d8 <_malloc_r+0x550>
   8a1ae:	f01c 0f03 	tst.w	ip, #3
   8a1b2:	f10c 3cff 	add.w	ip, ip, #4294967295
   8a1b6:	d1f5      	bne.n	8a1a4 <_malloc_r+0x41c>
   8a1b8:	687b      	ldr	r3, [r7, #4]
   8a1ba:	ea23 0301 	bic.w	r3, r3, r1
   8a1be:	607b      	str	r3, [r7, #4]
   8a1c0:	0049      	lsls	r1, r1, #1
   8a1c2:	4299      	cmp	r1, r3
   8a1c4:	f63f aec3 	bhi.w	89f4e <_malloc_r+0x1c6>
   8a1c8:	b911      	cbnz	r1, 8a1d0 <_malloc_r+0x448>
   8a1ca:	e6c0      	b.n	89f4e <_malloc_r+0x1c6>
   8a1cc:	0049      	lsls	r1, r1, #1
   8a1ce:	3404      	adds	r4, #4
   8a1d0:	4219      	tst	r1, r3
   8a1d2:	d0fb      	beq.n	8a1cc <_malloc_r+0x444>
   8a1d4:	46a4      	mov	ip, r4
   8a1d6:	e669      	b.n	89eac <_malloc_r+0x124>
   8a1d8:	f103 0810 	add.w	r8, r3, #16
   8a1dc:	e6d4      	b.n	89f88 <_malloc_r+0x200>
   8a1de:	2201      	movs	r2, #1
   8a1e0:	109b      	asrs	r3, r3, #2
   8a1e2:	409a      	lsls	r2, r3
   8a1e4:	687b      	ldr	r3, [r7, #4]
   8a1e6:	431a      	orrs	r2, r3
   8a1e8:	607a      	str	r2, [r7, #4]
   8a1ea:	e773      	b.n	8a0d4 <_malloc_r+0x34c>
   8a1ec:	eb02 0108 	add.w	r1, r2, r8
   8a1f0:	4249      	negs	r1, r1
   8a1f2:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   8a1f6:	4651      	mov	r1, sl
   8a1f8:	4630      	mov	r0, r6
   8a1fa:	9200      	str	r2, [sp, #0]
   8a1fc:	f000 fca0 	bl	8ab40 <_sbrk_r>
   8a200:	1c43      	adds	r3, r0, #1
   8a202:	e9dd 2300 	ldrd	r2, r3, [sp]
   8a206:	f47f aef5 	bne.w	89ff4 <_malloc_r+0x26c>
   8a20a:	46da      	mov	sl, fp
   8a20c:	e6f5      	b.n	89ffa <_malloc_r+0x272>
   8a20e:	2b54      	cmp	r3, #84	; 0x54
   8a210:	d826      	bhi.n	8a260 <_malloc_r+0x4d8>
   8a212:	0b13      	lsrs	r3, r2, #12
   8a214:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   8a218:	00c9      	lsls	r1, r1, #3
   8a21a:	336e      	adds	r3, #110	; 0x6e
   8a21c:	e74a      	b.n	8a0b4 <_malloc_r+0x32c>
   8a21e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8a222:	d826      	bhi.n	8a272 <_malloc_r+0x4ea>
   8a224:	0beb      	lsrs	r3, r5, #15
   8a226:	f103 0c78 	add.w	ip, r3, #120	; 0x78
   8a22a:	f103 0477 	add.w	r4, r3, #119	; 0x77
   8a22e:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8a232:	e5f1      	b.n	89e18 <_malloc_r+0x90>
   8a234:	4b29      	ldr	r3, [pc, #164]	; (8a2dc <_malloc_r+0x554>)
   8a236:	6818      	ldr	r0, [r3, #0]
   8a238:	4440      	add	r0, r8
   8a23a:	6018      	str	r0, [r3, #0]
   8a23c:	e6b6      	b.n	89fac <_malloc_r+0x224>
   8a23e:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8a242:	f1bc 0f00 	cmp.w	ip, #0
   8a246:	f47f aeb1 	bne.w	89fac <_malloc_r+0x224>
   8a24a:	68bc      	ldr	r4, [r7, #8]
   8a24c:	44c8      	add	r8, r9
   8a24e:	f048 0001 	orr.w	r0, r8, #1
   8a252:	6060      	str	r0, [r4, #4]
   8a254:	e6f5      	b.n	8a042 <_malloc_r+0x2ba>
   8a256:	4614      	mov	r4, r2
   8a258:	e6f3      	b.n	8a042 <_malloc_r+0x2ba>
   8a25a:	2301      	movs	r3, #1
   8a25c:	6053      	str	r3, [r2, #4]
   8a25e:	e795      	b.n	8a18c <_malloc_r+0x404>
   8a260:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8a264:	d824      	bhi.n	8a2b0 <_malloc_r+0x528>
   8a266:	0bd3      	lsrs	r3, r2, #15
   8a268:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8a26c:	00c9      	lsls	r1, r1, #3
   8a26e:	3377      	adds	r3, #119	; 0x77
   8a270:	e720      	b.n	8a0b4 <_malloc_r+0x32c>
   8a272:	f240 5254 	movw	r2, #1364	; 0x554
   8a276:	4293      	cmp	r3, r2
   8a278:	d824      	bhi.n	8a2c4 <_malloc_r+0x53c>
   8a27a:	0cab      	lsrs	r3, r5, #18
   8a27c:	f103 0c7d 	add.w	ip, r3, #125	; 0x7d
   8a280:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   8a284:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8a288:	e5c6      	b.n	89e18 <_malloc_r+0x90>
   8a28a:	f1ab 0b08 	sub.w	fp, fp, #8
   8a28e:	44d8      	add	r8, fp
   8a290:	f04f 0a00 	mov.w	sl, #0
   8a294:	eba8 0802 	sub.w	r8, r8, r2
   8a298:	e6af      	b.n	89ffa <_malloc_r+0x272>
   8a29a:	f104 0108 	add.w	r1, r4, #8
   8a29e:	4630      	mov	r0, r6
   8a2a0:	9300      	str	r3, [sp, #0]
   8a2a2:	f7ff fc65 	bl	89b70 <_free_r>
   8a2a6:	68bc      	ldr	r4, [r7, #8]
   8a2a8:	9b00      	ldr	r3, [sp, #0]
   8a2aa:	6860      	ldr	r0, [r4, #4]
   8a2ac:	6819      	ldr	r1, [r3, #0]
   8a2ae:	e6c8      	b.n	8a042 <_malloc_r+0x2ba>
   8a2b0:	f240 5154 	movw	r1, #1364	; 0x554
   8a2b4:	428b      	cmp	r3, r1
   8a2b6:	d80b      	bhi.n	8a2d0 <_malloc_r+0x548>
   8a2b8:	0c93      	lsrs	r3, r2, #18
   8a2ba:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8a2be:	00c9      	lsls	r1, r1, #3
   8a2c0:	337c      	adds	r3, #124	; 0x7c
   8a2c2:	e6f7      	b.n	8a0b4 <_malloc_r+0x32c>
   8a2c4:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
   8a2c8:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
   8a2cc:	247e      	movs	r4, #126	; 0x7e
   8a2ce:	e5a3      	b.n	89e18 <_malloc_r+0x90>
   8a2d0:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   8a2d4:	237e      	movs	r3, #126	; 0x7e
   8a2d6:	e6ed      	b.n	8a0b4 <_malloc_r+0x32c>
   8a2d8:	687b      	ldr	r3, [r7, #4]
   8a2da:	e771      	b.n	8a1c0 <_malloc_r+0x438>
   8a2dc:	20073438 	.word	0x20073438

0008a2e0 <memchr>:
   8a2e0:	fa5f fc81 	uxtb.w	ip, r1
   8a2e4:	0781      	lsls	r1, r0, #30
   8a2e6:	d010      	beq.n	8a30a <memchr+0x2a>
   8a2e8:	4603      	mov	r3, r0
   8a2ea:	1e51      	subs	r1, r2, #1
   8a2ec:	b92a      	cbnz	r2, 8a2fa <memchr+0x1a>
   8a2ee:	e00a      	b.n	8a306 <memchr+0x26>
   8a2f0:	079a      	lsls	r2, r3, #30
   8a2f2:	4618      	mov	r0, r3
   8a2f4:	d00a      	beq.n	8a30c <memchr+0x2c>
   8a2f6:	3901      	subs	r1, #1
   8a2f8:	d305      	bcc.n	8a306 <memchr+0x26>
   8a2fa:	4618      	mov	r0, r3
   8a2fc:	f813 2b01 	ldrb.w	r2, [r3], #1
   8a300:	4562      	cmp	r2, ip
   8a302:	d1f5      	bne.n	8a2f0 <memchr+0x10>
   8a304:	4770      	bx	lr
   8a306:	2000      	movs	r0, #0
   8a308:	4770      	bx	lr
   8a30a:	4611      	mov	r1, r2
   8a30c:	2903      	cmp	r1, #3
   8a30e:	d80c      	bhi.n	8a32a <memchr+0x4a>
   8a310:	2900      	cmp	r1, #0
   8a312:	d0f8      	beq.n	8a306 <memchr+0x26>
   8a314:	4603      	mov	r3, r0
   8a316:	4401      	add	r1, r0
   8a318:	e001      	b.n	8a31e <memchr+0x3e>
   8a31a:	428b      	cmp	r3, r1
   8a31c:	d0f3      	beq.n	8a306 <memchr+0x26>
   8a31e:	4618      	mov	r0, r3
   8a320:	f813 2b01 	ldrb.w	r2, [r3], #1
   8a324:	4562      	cmp	r2, ip
   8a326:	d1f8      	bne.n	8a31a <memchr+0x3a>
   8a328:	e7ec      	b.n	8a304 <memchr+0x24>
   8a32a:	4602      	mov	r2, r0
   8a32c:	b510      	push	{r4, lr}
   8a32e:	ea4c 240c 	orr.w	r4, ip, ip, lsl #8
   8a332:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
   8a336:	4610      	mov	r0, r2
   8a338:	6803      	ldr	r3, [r0, #0]
   8a33a:	3204      	adds	r2, #4
   8a33c:	4063      	eors	r3, r4
   8a33e:	f1a3 3e01 	sub.w	lr, r3, #16843009	; 0x1010101
   8a342:	ea2e 0303 	bic.w	r3, lr, r3
   8a346:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8a34a:	d104      	bne.n	8a356 <memchr+0x76>
   8a34c:	3904      	subs	r1, #4
   8a34e:	2903      	cmp	r1, #3
   8a350:	4610      	mov	r0, r2
   8a352:	d8f0      	bhi.n	8a336 <memchr+0x56>
   8a354:	b151      	cbz	r1, 8a36c <memchr+0x8c>
   8a356:	4603      	mov	r3, r0
   8a358:	4401      	add	r1, r0
   8a35a:	e001      	b.n	8a360 <memchr+0x80>
   8a35c:	428b      	cmp	r3, r1
   8a35e:	d005      	beq.n	8a36c <memchr+0x8c>
   8a360:	4618      	mov	r0, r3
   8a362:	f813 2b01 	ldrb.w	r2, [r3], #1
   8a366:	4562      	cmp	r2, ip
   8a368:	d1f8      	bne.n	8a35c <memchr+0x7c>
   8a36a:	bd10      	pop	{r4, pc}
   8a36c:	2000      	movs	r0, #0
   8a36e:	bd10      	pop	{r4, pc}

0008a370 <__malloc_lock>:
   8a370:	4801      	ldr	r0, [pc, #4]	; (8a378 <__malloc_lock+0x8>)
   8a372:	f7ff bd05 	b.w	89d80 <__retarget_lock_acquire_recursive>
   8a376:	bf00      	nop
   8a378:	2007342c 	.word	0x2007342c

0008a37c <__malloc_unlock>:
   8a37c:	4801      	ldr	r0, [pc, #4]	; (8a384 <__malloc_unlock+0x8>)
   8a37e:	f7ff bd01 	b.w	89d84 <__retarget_lock_release_recursive>
   8a382:	bf00      	nop
   8a384:	2007342c 	.word	0x2007342c

0008a388 <_Balloc>:
   8a388:	b538      	push	{r3, r4, r5, lr}
   8a38a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8a38c:	4605      	mov	r5, r0
   8a38e:	460c      	mov	r4, r1
   8a390:	b14b      	cbz	r3, 8a3a6 <_Balloc+0x1e>
   8a392:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8a396:	b180      	cbz	r0, 8a3ba <_Balloc+0x32>
   8a398:	6802      	ldr	r2, [r0, #0]
   8a39a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8a39e:	2300      	movs	r3, #0
   8a3a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8a3a4:	bd38      	pop	{r3, r4, r5, pc}
   8a3a6:	2221      	movs	r2, #33	; 0x21
   8a3a8:	2104      	movs	r1, #4
   8a3aa:	f000 fcbf 	bl	8ad2c <_calloc_r>
   8a3ae:	4603      	mov	r3, r0
   8a3b0:	64e8      	str	r0, [r5, #76]	; 0x4c
   8a3b2:	2800      	cmp	r0, #0
   8a3b4:	d1ed      	bne.n	8a392 <_Balloc+0xa>
   8a3b6:	2000      	movs	r0, #0
   8a3b8:	bd38      	pop	{r3, r4, r5, pc}
   8a3ba:	2101      	movs	r1, #1
   8a3bc:	4628      	mov	r0, r5
   8a3be:	fa01 f504 	lsl.w	r5, r1, r4
   8a3c2:	1d6a      	adds	r2, r5, #5
   8a3c4:	0092      	lsls	r2, r2, #2
   8a3c6:	f000 fcb1 	bl	8ad2c <_calloc_r>
   8a3ca:	2800      	cmp	r0, #0
   8a3cc:	d0f3      	beq.n	8a3b6 <_Balloc+0x2e>
   8a3ce:	e9c0 4501 	strd	r4, r5, [r0, #4]
   8a3d2:	e7e4      	b.n	8a39e <_Balloc+0x16>

0008a3d4 <_Bfree>:
   8a3d4:	b131      	cbz	r1, 8a3e4 <_Bfree+0x10>
   8a3d6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8a3d8:	684a      	ldr	r2, [r1, #4]
   8a3da:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8a3de:	6008      	str	r0, [r1, #0]
   8a3e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   8a3e4:	4770      	bx	lr
   8a3e6:	bf00      	nop

0008a3e8 <__multadd>:
   8a3e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a3ec:	f04f 0e00 	mov.w	lr, #0
   8a3f0:	460e      	mov	r6, r1
   8a3f2:	461c      	mov	r4, r3
   8a3f4:	690d      	ldr	r5, [r1, #16]
   8a3f6:	4607      	mov	r7, r0
   8a3f8:	f101 0014 	add.w	r0, r1, #20
   8a3fc:	6801      	ldr	r1, [r0, #0]
   8a3fe:	f10e 0e01 	add.w	lr, lr, #1
   8a402:	b28b      	uxth	r3, r1
   8a404:	fb02 4303 	mla	r3, r2, r3, r4
   8a408:	0c09      	lsrs	r1, r1, #16
   8a40a:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   8a40e:	fb02 cc01 	mla	ip, r2, r1, ip
   8a412:	b29b      	uxth	r3, r3
   8a414:	eb03 430c 	add.w	r3, r3, ip, lsl #16
   8a418:	4575      	cmp	r5, lr
   8a41a:	f840 3b04 	str.w	r3, [r0], #4
   8a41e:	ea4f 441c 	mov.w	r4, ip, lsr #16
   8a422:	dceb      	bgt.n	8a3fc <__multadd+0x14>
   8a424:	b13c      	cbz	r4, 8a436 <__multadd+0x4e>
   8a426:	68b3      	ldr	r3, [r6, #8]
   8a428:	42ab      	cmp	r3, r5
   8a42a:	dd07      	ble.n	8a43c <__multadd+0x54>
   8a42c:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   8a430:	3501      	adds	r5, #1
   8a432:	615c      	str	r4, [r3, #20]
   8a434:	6135      	str	r5, [r6, #16]
   8a436:	4630      	mov	r0, r6
   8a438:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a43c:	6871      	ldr	r1, [r6, #4]
   8a43e:	4638      	mov	r0, r7
   8a440:	3101      	adds	r1, #1
   8a442:	f7ff ffa1 	bl	8a388 <_Balloc>
   8a446:	4680      	mov	r8, r0
   8a448:	b1a8      	cbz	r0, 8a476 <__multadd+0x8e>
   8a44a:	6932      	ldr	r2, [r6, #16]
   8a44c:	f106 010c 	add.w	r1, r6, #12
   8a450:	3202      	adds	r2, #2
   8a452:	0092      	lsls	r2, r2, #2
   8a454:	300c      	adds	r0, #12
   8a456:	f7fc fc7b 	bl	86d50 <memcpy>
   8a45a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8a45c:	6872      	ldr	r2, [r6, #4]
   8a45e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8a462:	6031      	str	r1, [r6, #0]
   8a464:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   8a468:	4646      	mov	r6, r8
   8a46a:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   8a46e:	3501      	adds	r5, #1
   8a470:	615c      	str	r4, [r3, #20]
   8a472:	6135      	str	r5, [r6, #16]
   8a474:	e7df      	b.n	8a436 <__multadd+0x4e>
   8a476:	4602      	mov	r2, r0
   8a478:	21b5      	movs	r1, #181	; 0xb5
   8a47a:	4b02      	ldr	r3, [pc, #8]	; (8a484 <__multadd+0x9c>)
   8a47c:	4802      	ldr	r0, [pc, #8]	; (8a488 <__multadd+0xa0>)
   8a47e:	f000 fc35 	bl	8acec <__assert_func>
   8a482:	bf00      	nop
   8a484:	0008db20 	.word	0x0008db20
   8a488:	0008dbb4 	.word	0x0008dbb4

0008a48c <__hi0bits>:
   8a48c:	0c02      	lsrs	r2, r0, #16
   8a48e:	0412      	lsls	r2, r2, #16
   8a490:	4603      	mov	r3, r0
   8a492:	b9ca      	cbnz	r2, 8a4c8 <__hi0bits+0x3c>
   8a494:	2010      	movs	r0, #16
   8a496:	4083      	lsls	r3, r0
   8a498:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8a49c:	bf04      	itt	eq
   8a49e:	021b      	lsleq	r3, r3, #8
   8a4a0:	3008      	addeq	r0, #8
   8a4a2:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8a4a6:	bf04      	itt	eq
   8a4a8:	011b      	lsleq	r3, r3, #4
   8a4aa:	3004      	addeq	r0, #4
   8a4ac:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   8a4b0:	bf04      	itt	eq
   8a4b2:	009b      	lsleq	r3, r3, #2
   8a4b4:	3002      	addeq	r0, #2
   8a4b6:	2b00      	cmp	r3, #0
   8a4b8:	db05      	blt.n	8a4c6 <__hi0bits+0x3a>
   8a4ba:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8a4be:	f100 0001 	add.w	r0, r0, #1
   8a4c2:	bf08      	it	eq
   8a4c4:	2020      	moveq	r0, #32
   8a4c6:	4770      	bx	lr
   8a4c8:	2000      	movs	r0, #0
   8a4ca:	e7e5      	b.n	8a498 <__hi0bits+0xc>

0008a4cc <__lo0bits>:
   8a4cc:	6803      	ldr	r3, [r0, #0]
   8a4ce:	4602      	mov	r2, r0
   8a4d0:	f013 0007 	ands.w	r0, r3, #7
   8a4d4:	d009      	beq.n	8a4ea <__lo0bits+0x1e>
   8a4d6:	07d9      	lsls	r1, r3, #31
   8a4d8:	d41f      	bmi.n	8a51a <__lo0bits+0x4e>
   8a4da:	0798      	lsls	r0, r3, #30
   8a4dc:	bf4b      	itete	mi
   8a4de:	085b      	lsrmi	r3, r3, #1
   8a4e0:	089b      	lsrpl	r3, r3, #2
   8a4e2:	2001      	movmi	r0, #1
   8a4e4:	2002      	movpl	r0, #2
   8a4e6:	6013      	str	r3, [r2, #0]
   8a4e8:	4770      	bx	lr
   8a4ea:	b299      	uxth	r1, r3
   8a4ec:	b909      	cbnz	r1, 8a4f2 <__lo0bits+0x26>
   8a4ee:	2010      	movs	r0, #16
   8a4f0:	40c3      	lsrs	r3, r0
   8a4f2:	b2d9      	uxtb	r1, r3
   8a4f4:	b909      	cbnz	r1, 8a4fa <__lo0bits+0x2e>
   8a4f6:	3008      	adds	r0, #8
   8a4f8:	0a1b      	lsrs	r3, r3, #8
   8a4fa:	0719      	lsls	r1, r3, #28
   8a4fc:	bf04      	itt	eq
   8a4fe:	091b      	lsreq	r3, r3, #4
   8a500:	3004      	addeq	r0, #4
   8a502:	0799      	lsls	r1, r3, #30
   8a504:	bf04      	itt	eq
   8a506:	089b      	lsreq	r3, r3, #2
   8a508:	3002      	addeq	r0, #2
   8a50a:	07d9      	lsls	r1, r3, #31
   8a50c:	d403      	bmi.n	8a516 <__lo0bits+0x4a>
   8a50e:	085b      	lsrs	r3, r3, #1
   8a510:	f100 0001 	add.w	r0, r0, #1
   8a514:	d003      	beq.n	8a51e <__lo0bits+0x52>
   8a516:	6013      	str	r3, [r2, #0]
   8a518:	4770      	bx	lr
   8a51a:	2000      	movs	r0, #0
   8a51c:	4770      	bx	lr
   8a51e:	2020      	movs	r0, #32
   8a520:	4770      	bx	lr
   8a522:	bf00      	nop

0008a524 <__i2b>:
   8a524:	b538      	push	{r3, r4, r5, lr}
   8a526:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8a528:	4604      	mov	r4, r0
   8a52a:	460d      	mov	r5, r1
   8a52c:	b14b      	cbz	r3, 8a542 <__i2b+0x1e>
   8a52e:	6858      	ldr	r0, [r3, #4]
   8a530:	b1b0      	cbz	r0, 8a560 <__i2b+0x3c>
   8a532:	6802      	ldr	r2, [r0, #0]
   8a534:	605a      	str	r2, [r3, #4]
   8a536:	2200      	movs	r2, #0
   8a538:	2301      	movs	r3, #1
   8a53a:	6145      	str	r5, [r0, #20]
   8a53c:	e9c0 2303 	strd	r2, r3, [r0, #12]
   8a540:	bd38      	pop	{r3, r4, r5, pc}
   8a542:	2221      	movs	r2, #33	; 0x21
   8a544:	2104      	movs	r1, #4
   8a546:	f000 fbf1 	bl	8ad2c <_calloc_r>
   8a54a:	4603      	mov	r3, r0
   8a54c:	64e0      	str	r0, [r4, #76]	; 0x4c
   8a54e:	2800      	cmp	r0, #0
   8a550:	d1ed      	bne.n	8a52e <__i2b+0xa>
   8a552:	2200      	movs	r2, #0
   8a554:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8a558:	4b07      	ldr	r3, [pc, #28]	; (8a578 <__i2b+0x54>)
   8a55a:	4808      	ldr	r0, [pc, #32]	; (8a57c <__i2b+0x58>)
   8a55c:	f000 fbc6 	bl	8acec <__assert_func>
   8a560:	221c      	movs	r2, #28
   8a562:	2101      	movs	r1, #1
   8a564:	4620      	mov	r0, r4
   8a566:	f000 fbe1 	bl	8ad2c <_calloc_r>
   8a56a:	2800      	cmp	r0, #0
   8a56c:	d0f1      	beq.n	8a552 <__i2b+0x2e>
   8a56e:	2201      	movs	r2, #1
   8a570:	2302      	movs	r3, #2
   8a572:	e9c0 2301 	strd	r2, r3, [r0, #4]
   8a576:	e7de      	b.n	8a536 <__i2b+0x12>
   8a578:	0008db20 	.word	0x0008db20
   8a57c:	0008dbb4 	.word	0x0008dbb4

0008a580 <__multiply>:
   8a580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a584:	690e      	ldr	r6, [r1, #16]
   8a586:	6915      	ldr	r5, [r2, #16]
   8a588:	4688      	mov	r8, r1
   8a58a:	42ae      	cmp	r6, r5
   8a58c:	4614      	mov	r4, r2
   8a58e:	b085      	sub	sp, #20
   8a590:	db05      	blt.n	8a59e <__multiply+0x1e>
   8a592:	462a      	mov	r2, r5
   8a594:	4623      	mov	r3, r4
   8a596:	4635      	mov	r5, r6
   8a598:	460c      	mov	r4, r1
   8a59a:	4616      	mov	r6, r2
   8a59c:	4698      	mov	r8, r3
   8a59e:	68a3      	ldr	r3, [r4, #8]
   8a5a0:	6861      	ldr	r1, [r4, #4]
   8a5a2:	19af      	adds	r7, r5, r6
   8a5a4:	42bb      	cmp	r3, r7
   8a5a6:	bfb8      	it	lt
   8a5a8:	3101      	addlt	r1, #1
   8a5aa:	f7ff feed 	bl	8a388 <_Balloc>
   8a5ae:	9001      	str	r0, [sp, #4]
   8a5b0:	2800      	cmp	r0, #0
   8a5b2:	f000 8087 	beq.w	8a6c4 <__multiply+0x144>
   8a5b6:	9b01      	ldr	r3, [sp, #4]
   8a5b8:	f103 0914 	add.w	r9, r3, #20
   8a5bc:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   8a5c0:	45d1      	cmp	r9, sl
   8a5c2:	d205      	bcs.n	8a5d0 <__multiply+0x50>
   8a5c4:	464b      	mov	r3, r9
   8a5c6:	2200      	movs	r2, #0
   8a5c8:	f843 2b04 	str.w	r2, [r3], #4
   8a5cc:	459a      	cmp	sl, r3
   8a5ce:	d8fb      	bhi.n	8a5c8 <__multiply+0x48>
   8a5d0:	f108 0814 	add.w	r8, r8, #20
   8a5d4:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   8a5d8:	f104 0314 	add.w	r3, r4, #20
   8a5dc:	45d8      	cmp	r8, fp
   8a5de:	461a      	mov	r2, r3
   8a5e0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   8a5e4:	d25f      	bcs.n	8a6a6 <__multiply+0x126>
   8a5e6:	1b2b      	subs	r3, r5, r4
   8a5e8:	3b15      	subs	r3, #21
   8a5ea:	f023 0303 	bic.w	r3, r3, #3
   8a5ee:	3304      	adds	r3, #4
   8a5f0:	3415      	adds	r4, #21
   8a5f2:	42a5      	cmp	r5, r4
   8a5f4:	bf38      	it	cc
   8a5f6:	2304      	movcc	r3, #4
   8a5f8:	e9cd a702 	strd	sl, r7, [sp, #8]
   8a5fc:	46ac      	mov	ip, r5
   8a5fe:	461f      	mov	r7, r3
   8a600:	4692      	mov	sl, r2
   8a602:	e005      	b.n	8a610 <__multiply+0x90>
   8a604:	0c00      	lsrs	r0, r0, #16
   8a606:	d129      	bne.n	8a65c <__multiply+0xdc>
   8a608:	45c3      	cmp	fp, r8
   8a60a:	f109 0904 	add.w	r9, r9, #4
   8a60e:	d948      	bls.n	8a6a2 <__multiply+0x122>
   8a610:	f858 0b04 	ldr.w	r0, [r8], #4
   8a614:	b285      	uxth	r5, r0
   8a616:	2d00      	cmp	r5, #0
   8a618:	d0f4      	beq.n	8a604 <__multiply+0x84>
   8a61a:	4656      	mov	r6, sl
   8a61c:	464c      	mov	r4, r9
   8a61e:	2300      	movs	r3, #0
   8a620:	f856 0b04 	ldr.w	r0, [r6], #4
   8a624:	6821      	ldr	r1, [r4, #0]
   8a626:	b282      	uxth	r2, r0
   8a628:	fa1f fe81 	uxth.w	lr, r1
   8a62c:	fb05 ee02 	mla	lr, r5, r2, lr
   8a630:	0c00      	lsrs	r0, r0, #16
   8a632:	0c0a      	lsrs	r2, r1, #16
   8a634:	fb05 2200 	mla	r2, r5, r0, r2
   8a638:	4473      	add	r3, lr
   8a63a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   8a63e:	b29b      	uxth	r3, r3
   8a640:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8a644:	45b4      	cmp	ip, r6
   8a646:	f844 3b04 	str.w	r3, [r4], #4
   8a64a:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8a64e:	d8e7      	bhi.n	8a620 <__multiply+0xa0>
   8a650:	f849 3007 	str.w	r3, [r9, r7]
   8a654:	f858 0c04 	ldr.w	r0, [r8, #-4]
   8a658:	0c00      	lsrs	r0, r0, #16
   8a65a:	d0d5      	beq.n	8a608 <__multiply+0x88>
   8a65c:	f8d9 3000 	ldr.w	r3, [r9]
   8a660:	4654      	mov	r4, sl
   8a662:	4619      	mov	r1, r3
   8a664:	464d      	mov	r5, r9
   8a666:	2200      	movs	r2, #0
   8a668:	8826      	ldrh	r6, [r4, #0]
   8a66a:	0c09      	lsrs	r1, r1, #16
   8a66c:	fb00 1106 	mla	r1, r0, r6, r1
   8a670:	b29b      	uxth	r3, r3
   8a672:	440a      	add	r2, r1
   8a674:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8a678:	f845 3b04 	str.w	r3, [r5], #4
   8a67c:	f854 6b04 	ldr.w	r6, [r4], #4
   8a680:	6829      	ldr	r1, [r5, #0]
   8a682:	0c36      	lsrs	r6, r6, #16
   8a684:	b28b      	uxth	r3, r1
   8a686:	fb00 3306 	mla	r3, r0, r6, r3
   8a68a:	45a4      	cmp	ip, r4
   8a68c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   8a690:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8a694:	d8e8      	bhi.n	8a668 <__multiply+0xe8>
   8a696:	45c3      	cmp	fp, r8
   8a698:	f849 3007 	str.w	r3, [r9, r7]
   8a69c:	f109 0904 	add.w	r9, r9, #4
   8a6a0:	d8b6      	bhi.n	8a610 <__multiply+0x90>
   8a6a2:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   8a6a6:	2f00      	cmp	r7, #0
   8a6a8:	dc02      	bgt.n	8a6b0 <__multiply+0x130>
   8a6aa:	e005      	b.n	8a6b8 <__multiply+0x138>
   8a6ac:	3f01      	subs	r7, #1
   8a6ae:	d003      	beq.n	8a6b8 <__multiply+0x138>
   8a6b0:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   8a6b4:	2b00      	cmp	r3, #0
   8a6b6:	d0f9      	beq.n	8a6ac <__multiply+0x12c>
   8a6b8:	9b01      	ldr	r3, [sp, #4]
   8a6ba:	4618      	mov	r0, r3
   8a6bc:	611f      	str	r7, [r3, #16]
   8a6be:	b005      	add	sp, #20
   8a6c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a6c4:	4602      	mov	r2, r0
   8a6c6:	f240 115d 	movw	r1, #349	; 0x15d
   8a6ca:	4b02      	ldr	r3, [pc, #8]	; (8a6d4 <__multiply+0x154>)
   8a6cc:	4802      	ldr	r0, [pc, #8]	; (8a6d8 <__multiply+0x158>)
   8a6ce:	f000 fb0d 	bl	8acec <__assert_func>
   8a6d2:	bf00      	nop
   8a6d4:	0008db20 	.word	0x0008db20
   8a6d8:	0008dbb4 	.word	0x0008dbb4

0008a6dc <__pow5mult>:
   8a6dc:	f012 0303 	ands.w	r3, r2, #3
   8a6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8a6e4:	4614      	mov	r4, r2
   8a6e6:	4607      	mov	r7, r0
   8a6e8:	d12e      	bne.n	8a748 <__pow5mult+0x6c>
   8a6ea:	460e      	mov	r6, r1
   8a6ec:	10a4      	asrs	r4, r4, #2
   8a6ee:	d01c      	beq.n	8a72a <__pow5mult+0x4e>
   8a6f0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   8a6f2:	b395      	cbz	r5, 8a75a <__pow5mult+0x7e>
   8a6f4:	07e3      	lsls	r3, r4, #31
   8a6f6:	f04f 0800 	mov.w	r8, #0
   8a6fa:	d406      	bmi.n	8a70a <__pow5mult+0x2e>
   8a6fc:	1064      	asrs	r4, r4, #1
   8a6fe:	d014      	beq.n	8a72a <__pow5mult+0x4e>
   8a700:	6828      	ldr	r0, [r5, #0]
   8a702:	b1a8      	cbz	r0, 8a730 <__pow5mult+0x54>
   8a704:	4605      	mov	r5, r0
   8a706:	07e3      	lsls	r3, r4, #31
   8a708:	d5f8      	bpl.n	8a6fc <__pow5mult+0x20>
   8a70a:	462a      	mov	r2, r5
   8a70c:	4631      	mov	r1, r6
   8a70e:	4638      	mov	r0, r7
   8a710:	f7ff ff36 	bl	8a580 <__multiply>
   8a714:	b1b6      	cbz	r6, 8a744 <__pow5mult+0x68>
   8a716:	6871      	ldr	r1, [r6, #4]
   8a718:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8a71a:	1064      	asrs	r4, r4, #1
   8a71c:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   8a720:	6032      	str	r2, [r6, #0]
   8a722:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8a726:	4606      	mov	r6, r0
   8a728:	d1ea      	bne.n	8a700 <__pow5mult+0x24>
   8a72a:	4630      	mov	r0, r6
   8a72c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8a730:	462a      	mov	r2, r5
   8a732:	4629      	mov	r1, r5
   8a734:	4638      	mov	r0, r7
   8a736:	f7ff ff23 	bl	8a580 <__multiply>
   8a73a:	6028      	str	r0, [r5, #0]
   8a73c:	4605      	mov	r5, r0
   8a73e:	f8c0 8000 	str.w	r8, [r0]
   8a742:	e7e0      	b.n	8a706 <__pow5mult+0x2a>
   8a744:	4606      	mov	r6, r0
   8a746:	e7d9      	b.n	8a6fc <__pow5mult+0x20>
   8a748:	4a0f      	ldr	r2, [pc, #60]	; (8a788 <__pow5mult+0xac>)
   8a74a:	3b01      	subs	r3, #1
   8a74c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8a750:	2300      	movs	r3, #0
   8a752:	f7ff fe49 	bl	8a3e8 <__multadd>
   8a756:	4606      	mov	r6, r0
   8a758:	e7c8      	b.n	8a6ec <__pow5mult+0x10>
   8a75a:	2101      	movs	r1, #1
   8a75c:	4638      	mov	r0, r7
   8a75e:	f7ff fe13 	bl	8a388 <_Balloc>
   8a762:	4605      	mov	r5, r0
   8a764:	b140      	cbz	r0, 8a778 <__pow5mult+0x9c>
   8a766:	f240 2371 	movw	r3, #625	; 0x271
   8a76a:	2201      	movs	r2, #1
   8a76c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8a770:	2300      	movs	r3, #0
   8a772:	64b8      	str	r0, [r7, #72]	; 0x48
   8a774:	6003      	str	r3, [r0, #0]
   8a776:	e7bd      	b.n	8a6f4 <__pow5mult+0x18>
   8a778:	4602      	mov	r2, r0
   8a77a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8a77e:	4b03      	ldr	r3, [pc, #12]	; (8a78c <__pow5mult+0xb0>)
   8a780:	4803      	ldr	r0, [pc, #12]	; (8a790 <__pow5mult+0xb4>)
   8a782:	f000 fab3 	bl	8acec <__assert_func>
   8a786:	bf00      	nop
   8a788:	0008dd28 	.word	0x0008dd28
   8a78c:	0008db20 	.word	0x0008db20
   8a790:	0008dbb4 	.word	0x0008dbb4

0008a794 <__lshift>:
   8a794:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8a798:	460c      	mov	r4, r1
   8a79a:	6926      	ldr	r6, [r4, #16]
   8a79c:	68a3      	ldr	r3, [r4, #8]
   8a79e:	eb06 1662 	add.w	r6, r6, r2, asr #5
   8a7a2:	1c75      	adds	r5, r6, #1
   8a7a4:	429d      	cmp	r5, r3
   8a7a6:	4690      	mov	r8, r2
   8a7a8:	4607      	mov	r7, r0
   8a7aa:	6849      	ldr	r1, [r1, #4]
   8a7ac:	ea4f 1962 	mov.w	r9, r2, asr #5
   8a7b0:	dd04      	ble.n	8a7bc <__lshift+0x28>
   8a7b2:	005b      	lsls	r3, r3, #1
   8a7b4:	429d      	cmp	r5, r3
   8a7b6:	f101 0101 	add.w	r1, r1, #1
   8a7ba:	dcfa      	bgt.n	8a7b2 <__lshift+0x1e>
   8a7bc:	4638      	mov	r0, r7
   8a7be:	f7ff fde3 	bl	8a388 <_Balloc>
   8a7c2:	2800      	cmp	r0, #0
   8a7c4:	d051      	beq.n	8a86a <__lshift+0xd6>
   8a7c6:	f1b9 0f00 	cmp.w	r9, #0
   8a7ca:	f100 0114 	add.w	r1, r0, #20
   8a7ce:	dd0f      	ble.n	8a7f0 <__lshift+0x5c>
   8a7d0:	460b      	mov	r3, r1
   8a7d2:	f04f 0c00 	mov.w	ip, #0
   8a7d6:	f109 0205 	add.w	r2, r9, #5
   8a7da:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   8a7de:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   8a7e2:	f843 cb04 	str.w	ip, [r3], #4
   8a7e6:	4293      	cmp	r3, r2
   8a7e8:	d1fb      	bne.n	8a7e2 <__lshift+0x4e>
   8a7ea:	f1ae 0314 	sub.w	r3, lr, #20
   8a7ee:	4419      	add	r1, r3
   8a7f0:	6922      	ldr	r2, [r4, #16]
   8a7f2:	f104 0314 	add.w	r3, r4, #20
   8a7f6:	f018 081f 	ands.w	r8, r8, #31
   8a7fa:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   8a7fe:	d02c      	beq.n	8a85a <__lshift+0xc6>
   8a800:	468e      	mov	lr, r1
   8a802:	f04f 0a00 	mov.w	sl, #0
   8a806:	f1c8 0920 	rsb	r9, r8, #32
   8a80a:	681a      	ldr	r2, [r3, #0]
   8a80c:	fa02 f208 	lsl.w	r2, r2, r8
   8a810:	ea42 020a 	orr.w	r2, r2, sl
   8a814:	f84e 2b04 	str.w	r2, [lr], #4
   8a818:	f853 2b04 	ldr.w	r2, [r3], #4
   8a81c:	459c      	cmp	ip, r3
   8a81e:	fa22 fa09 	lsr.w	sl, r2, r9
   8a822:	d8f2      	bhi.n	8a80a <__lshift+0x76>
   8a824:	ebac 0304 	sub.w	r3, ip, r4
   8a828:	3b15      	subs	r3, #21
   8a82a:	f023 0303 	bic.w	r3, r3, #3
   8a82e:	3304      	adds	r3, #4
   8a830:	f104 0215 	add.w	r2, r4, #21
   8a834:	4594      	cmp	ip, r2
   8a836:	bf38      	it	cc
   8a838:	2304      	movcc	r3, #4
   8a83a:	f1ba 0f00 	cmp.w	sl, #0
   8a83e:	bf18      	it	ne
   8a840:	462e      	movne	r6, r5
   8a842:	f841 a003 	str.w	sl, [r1, r3]
   8a846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8a848:	6862      	ldr	r2, [r4, #4]
   8a84a:	6106      	str	r6, [r0, #16]
   8a84c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8a850:	6021      	str	r1, [r4, #0]
   8a852:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   8a856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8a85a:	3904      	subs	r1, #4
   8a85c:	f853 2b04 	ldr.w	r2, [r3], #4
   8a860:	459c      	cmp	ip, r3
   8a862:	f841 2f04 	str.w	r2, [r1, #4]!
   8a866:	d8f9      	bhi.n	8a85c <__lshift+0xc8>
   8a868:	e7ed      	b.n	8a846 <__lshift+0xb2>
   8a86a:	4602      	mov	r2, r0
   8a86c:	f240 11d9 	movw	r1, #473	; 0x1d9
   8a870:	4b01      	ldr	r3, [pc, #4]	; (8a878 <__lshift+0xe4>)
   8a872:	4802      	ldr	r0, [pc, #8]	; (8a87c <__lshift+0xe8>)
   8a874:	f000 fa3a 	bl	8acec <__assert_func>
   8a878:	0008db20 	.word	0x0008db20
   8a87c:	0008dbb4 	.word	0x0008dbb4

0008a880 <__mcmp>:
   8a880:	4684      	mov	ip, r0
   8a882:	690b      	ldr	r3, [r1, #16]
   8a884:	6900      	ldr	r0, [r0, #16]
   8a886:	1ac0      	subs	r0, r0, r3
   8a888:	d115      	bne.n	8a8b6 <__mcmp+0x36>
   8a88a:	f10c 0c14 	add.w	ip, ip, #20
   8a88e:	3114      	adds	r1, #20
   8a890:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   8a894:	b410      	push	{r4}
   8a896:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   8a89a:	e001      	b.n	8a8a0 <__mcmp+0x20>
   8a89c:	4594      	cmp	ip, r2
   8a89e:	d208      	bcs.n	8a8b2 <__mcmp+0x32>
   8a8a0:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   8a8a4:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   8a8a8:	428c      	cmp	r4, r1
   8a8aa:	d0f7      	beq.n	8a89c <__mcmp+0x1c>
   8a8ac:	d204      	bcs.n	8a8b8 <__mcmp+0x38>
   8a8ae:	f04f 30ff 	mov.w	r0, #4294967295
   8a8b2:	bc10      	pop	{r4}
   8a8b4:	4770      	bx	lr
   8a8b6:	4770      	bx	lr
   8a8b8:	2001      	movs	r0, #1
   8a8ba:	bc10      	pop	{r4}
   8a8bc:	4770      	bx	lr
   8a8be:	bf00      	nop

0008a8c0 <__mdiff>:
   8a8c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a8c4:	690c      	ldr	r4, [r1, #16]
   8a8c6:	6913      	ldr	r3, [r2, #16]
   8a8c8:	4689      	mov	r9, r1
   8a8ca:	1ae4      	subs	r4, r4, r3
   8a8cc:	2c00      	cmp	r4, #0
   8a8ce:	4617      	mov	r7, r2
   8a8d0:	d17d      	bne.n	8a9ce <__mdiff+0x10e>
   8a8d2:	f101 0614 	add.w	r6, r1, #20
   8a8d6:	3214      	adds	r2, #20
   8a8d8:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   8a8dc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   8a8e0:	e001      	b.n	8a8e6 <__mdiff+0x26>
   8a8e2:	429e      	cmp	r6, r3
   8a8e4:	d276      	bcs.n	8a9d4 <__mdiff+0x114>
   8a8e6:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   8a8ea:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   8a8ee:	428d      	cmp	r5, r1
   8a8f0:	d0f7      	beq.n	8a8e2 <__mdiff+0x22>
   8a8f2:	d367      	bcc.n	8a9c4 <__mdiff+0x104>
   8a8f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8a8f8:	f7ff fd46 	bl	8a388 <_Balloc>
   8a8fc:	2800      	cmp	r0, #0
   8a8fe:	d073      	beq.n	8a9e8 <__mdiff+0x128>
   8a900:	f8d9 5010 	ldr.w	r5, [r9, #16]
   8a904:	60c4      	str	r4, [r0, #12]
   8a906:	f100 0414 	add.w	r4, r0, #20
   8a90a:	4626      	mov	r6, r4
   8a90c:	f04f 0a00 	mov.w	sl, #0
   8a910:	693b      	ldr	r3, [r7, #16]
   8a912:	f109 0814 	add.w	r8, r9, #20
   8a916:	f107 0e14 	add.w	lr, r7, #20
   8a91a:	f109 0c10 	add.w	ip, r9, #16
   8a91e:	eb08 0285 	add.w	r2, r8, r5, lsl #2
   8a922:	eb0e 0983 	add.w	r9, lr, r3, lsl #2
   8a926:	f85c bf04 	ldr.w	fp, [ip, #4]!
   8a92a:	f85e 1b04 	ldr.w	r1, [lr], #4
   8a92e:	fa1f f38b 	uxth.w	r3, fp
   8a932:	4453      	add	r3, sl
   8a934:	fa1f fa81 	uxth.w	sl, r1
   8a938:	0c09      	lsrs	r1, r1, #16
   8a93a:	eba3 030a 	sub.w	r3, r3, sl
   8a93e:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
   8a942:	eb01 4123 	add.w	r1, r1, r3, asr #16
   8a946:	b29b      	uxth	r3, r3
   8a948:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8a94c:	45f1      	cmp	r9, lr
   8a94e:	f846 3b04 	str.w	r3, [r6], #4
   8a952:	ea4f 4a21 	mov.w	sl, r1, asr #16
   8a956:	d8e6      	bhi.n	8a926 <__mdiff+0x66>
   8a958:	eba9 0107 	sub.w	r1, r9, r7
   8a95c:	3915      	subs	r1, #21
   8a95e:	3715      	adds	r7, #21
   8a960:	45b9      	cmp	r9, r7
   8a962:	f021 0603 	bic.w	r6, r1, #3
   8a966:	f106 0604 	add.w	r6, r6, #4
   8a96a:	bf38      	it	cc
   8a96c:	2604      	movcc	r6, #4
   8a96e:	f021 0103 	bic.w	r1, r1, #3
   8a972:	bf38      	it	cc
   8a974:	2100      	movcc	r1, #0
   8a976:	44b0      	add	r8, r6
   8a978:	4542      	cmp	r2, r8
   8a97a:	4426      	add	r6, r4
   8a97c:	440c      	add	r4, r1
   8a97e:	d918      	bls.n	8a9b2 <__mdiff+0xf2>
   8a980:	4637      	mov	r7, r6
   8a982:	4644      	mov	r4, r8
   8a984:	f854 1b04 	ldr.w	r1, [r4], #4
   8a988:	b28b      	uxth	r3, r1
   8a98a:	4453      	add	r3, sl
   8a98c:	ea4f 4a23 	mov.w	sl, r3, asr #16
   8a990:	eb0a 4111 	add.w	r1, sl, r1, lsr #16
   8a994:	b29b      	uxth	r3, r3
   8a996:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   8a99a:	42a2      	cmp	r2, r4
   8a99c:	f847 3b04 	str.w	r3, [r7], #4
   8a9a0:	ea4f 4a21 	mov.w	sl, r1, asr #16
   8a9a4:	d8ee      	bhi.n	8a984 <__mdiff+0xc4>
   8a9a6:	1e54      	subs	r4, r2, #1
   8a9a8:	eba4 0408 	sub.w	r4, r4, r8
   8a9ac:	f024 0403 	bic.w	r4, r4, #3
   8a9b0:	4434      	add	r4, r6
   8a9b2:	b923      	cbnz	r3, 8a9be <__mdiff+0xfe>
   8a9b4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8a9b8:	3d01      	subs	r5, #1
   8a9ba:	2b00      	cmp	r3, #0
   8a9bc:	d0fa      	beq.n	8a9b4 <__mdiff+0xf4>
   8a9be:	6105      	str	r5, [r0, #16]
   8a9c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a9c4:	464b      	mov	r3, r9
   8a9c6:	2401      	movs	r4, #1
   8a9c8:	46b9      	mov	r9, r7
   8a9ca:	461f      	mov	r7, r3
   8a9cc:	e792      	b.n	8a8f4 <__mdiff+0x34>
   8a9ce:	dbf9      	blt.n	8a9c4 <__mdiff+0x104>
   8a9d0:	2400      	movs	r4, #0
   8a9d2:	e78f      	b.n	8a8f4 <__mdiff+0x34>
   8a9d4:	2100      	movs	r1, #0
   8a9d6:	f7ff fcd7 	bl	8a388 <_Balloc>
   8a9da:	b160      	cbz	r0, 8a9f6 <__mdiff+0x136>
   8a9dc:	2201      	movs	r2, #1
   8a9de:	2300      	movs	r3, #0
   8a9e0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   8a9e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a9e8:	4602      	mov	r2, r0
   8a9ea:	f44f 7110 	mov.w	r1, #576	; 0x240
   8a9ee:	4b05      	ldr	r3, [pc, #20]	; (8aa04 <__mdiff+0x144>)
   8a9f0:	4805      	ldr	r0, [pc, #20]	; (8aa08 <__mdiff+0x148>)
   8a9f2:	f000 f97b 	bl	8acec <__assert_func>
   8a9f6:	4602      	mov	r2, r0
   8a9f8:	f240 2132 	movw	r1, #562	; 0x232
   8a9fc:	4b01      	ldr	r3, [pc, #4]	; (8aa04 <__mdiff+0x144>)
   8a9fe:	4802      	ldr	r0, [pc, #8]	; (8aa08 <__mdiff+0x148>)
   8aa00:	f000 f974 	bl	8acec <__assert_func>
   8aa04:	0008db20 	.word	0x0008db20
   8aa08:	0008dbb4 	.word	0x0008dbb4

0008aa0c <__d2b>:
   8aa0c:	b570      	push	{r4, r5, r6, lr}
   8aa0e:	2101      	movs	r1, #1
   8aa10:	b082      	sub	sp, #8
   8aa12:	4616      	mov	r6, r2
   8aa14:	461d      	mov	r5, r3
   8aa16:	f7ff fcb7 	bl	8a388 <_Balloc>
   8aa1a:	4604      	mov	r4, r0
   8aa1c:	2800      	cmp	r0, #0
   8aa1e:	d04c      	beq.n	8aaba <__d2b+0xae>
   8aa20:	462b      	mov	r3, r5
   8aa22:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8aa26:	f3c3 0313 	ubfx	r3, r3, #0, #20
   8aa2a:	b10d      	cbz	r5, 8aa30 <__d2b+0x24>
   8aa2c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8aa30:	2e00      	cmp	r6, #0
   8aa32:	9301      	str	r3, [sp, #4]
   8aa34:	d022      	beq.n	8aa7c <__d2b+0x70>
   8aa36:	4668      	mov	r0, sp
   8aa38:	9600      	str	r6, [sp, #0]
   8aa3a:	f7ff fd47 	bl	8a4cc <__lo0bits>
   8aa3e:	2800      	cmp	r0, #0
   8aa40:	d037      	beq.n	8aab2 <__d2b+0xa6>
   8aa42:	9b01      	ldr	r3, [sp, #4]
   8aa44:	9900      	ldr	r1, [sp, #0]
   8aa46:	f1c0 0220 	rsb	r2, r0, #32
   8aa4a:	fa03 f202 	lsl.w	r2, r3, r2
   8aa4e:	430a      	orrs	r2, r1
   8aa50:	40c3      	lsrs	r3, r0
   8aa52:	9301      	str	r3, [sp, #4]
   8aa54:	6162      	str	r2, [r4, #20]
   8aa56:	2b00      	cmp	r3, #0
   8aa58:	bf14      	ite	ne
   8aa5a:	2102      	movne	r1, #2
   8aa5c:	2101      	moveq	r1, #1
   8aa5e:	61a3      	str	r3, [r4, #24]
   8aa60:	6121      	str	r1, [r4, #16]
   8aa62:	b1b5      	cbz	r5, 8aa92 <__d2b+0x86>
   8aa64:	9b06      	ldr	r3, [sp, #24]
   8aa66:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   8aa6a:	4405      	add	r5, r0
   8aa6c:	601d      	str	r5, [r3, #0]
   8aa6e:	9b07      	ldr	r3, [sp, #28]
   8aa70:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8aa74:	6018      	str	r0, [r3, #0]
   8aa76:	4620      	mov	r0, r4
   8aa78:	b002      	add	sp, #8
   8aa7a:	bd70      	pop	{r4, r5, r6, pc}
   8aa7c:	a801      	add	r0, sp, #4
   8aa7e:	f7ff fd25 	bl	8a4cc <__lo0bits>
   8aa82:	2301      	movs	r3, #1
   8aa84:	9a01      	ldr	r2, [sp, #4]
   8aa86:	4619      	mov	r1, r3
   8aa88:	6162      	str	r2, [r4, #20]
   8aa8a:	3020      	adds	r0, #32
   8aa8c:	6123      	str	r3, [r4, #16]
   8aa8e:	2d00      	cmp	r5, #0
   8aa90:	d1e8      	bne.n	8aa64 <__d2b+0x58>
   8aa92:	eb04 0281 	add.w	r2, r4, r1, lsl #2
   8aa96:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
   8aa9a:	6910      	ldr	r0, [r2, #16]
   8aa9c:	9a06      	ldr	r2, [sp, #24]
   8aa9e:	6013      	str	r3, [r2, #0]
   8aaa0:	f7ff fcf4 	bl	8a48c <__hi0bits>
   8aaa4:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   8aaa8:	4620      	mov	r0, r4
   8aaaa:	9b07      	ldr	r3, [sp, #28]
   8aaac:	6019      	str	r1, [r3, #0]
   8aaae:	b002      	add	sp, #8
   8aab0:	bd70      	pop	{r4, r5, r6, pc}
   8aab2:	e9dd 2300 	ldrd	r2, r3, [sp]
   8aab6:	6162      	str	r2, [r4, #20]
   8aab8:	e7cd      	b.n	8aa56 <__d2b+0x4a>
   8aaba:	4602      	mov	r2, r0
   8aabc:	f240 310a 	movw	r1, #778	; 0x30a
   8aac0:	4b01      	ldr	r3, [pc, #4]	; (8aac8 <__d2b+0xbc>)
   8aac2:	4802      	ldr	r0, [pc, #8]	; (8aacc <__d2b+0xc0>)
   8aac4:	f000 f912 	bl	8acec <__assert_func>
   8aac8:	0008db20 	.word	0x0008db20
   8aacc:	0008dbb4 	.word	0x0008dbb4

0008aad0 <frexp>:
   8aad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8aad2:	2700      	movs	r7, #0
   8aad4:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8ab34 <frexp+0x64>
   8aad8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8aadc:	4563      	cmp	r3, ip
   8aade:	4604      	mov	r4, r0
   8aae0:	460d      	mov	r5, r1
   8aae2:	6017      	str	r7, [r2, #0]
   8aae4:	dc23      	bgt.n	8ab2e <frexp+0x5e>
   8aae6:	4684      	mov	ip, r0
   8aae8:	ea53 0c0c 	orrs.w	ip, r3, ip
   8aaec:	d01f      	beq.n	8ab2e <frexp+0x5e>
   8aaee:	f8df c048 	ldr.w	ip, [pc, #72]	; 8ab38 <frexp+0x68>
   8aaf2:	4616      	mov	r6, r2
   8aaf4:	ea01 0c0c 	and.w	ip, r1, ip
   8aaf8:	460a      	mov	r2, r1
   8aafa:	f1bc 0f00 	cmp.w	ip, #0
   8aafe:	d109      	bne.n	8ab14 <frexp+0x44>
   8ab00:	2200      	movs	r2, #0
   8ab02:	4b0e      	ldr	r3, [pc, #56]	; (8ab3c <frexp+0x6c>)
   8ab04:	f002 fb3c 	bl	8d180 <__aeabi_dmul>
   8ab08:	f06f 0735 	mvn.w	r7, #53	; 0x35
   8ab0c:	4604      	mov	r4, r0
   8ab0e:	460a      	mov	r2, r1
   8ab10:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   8ab14:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   8ab18:	151b      	asrs	r3, r3, #20
   8ab1a:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   8ab1e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   8ab22:	443b      	add	r3, r7
   8ab24:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   8ab28:	6033      	str	r3, [r6, #0]
   8ab2a:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   8ab2e:	4620      	mov	r0, r4
   8ab30:	4629      	mov	r1, r5
   8ab32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8ab34:	7fefffff 	.word	0x7fefffff
   8ab38:	7ff00000 	.word	0x7ff00000
   8ab3c:	43500000 	.word	0x43500000

0008ab40 <_sbrk_r>:
   8ab40:	2200      	movs	r2, #0
   8ab42:	b538      	push	{r3, r4, r5, lr}
   8ab44:	4d06      	ldr	r5, [pc, #24]	; (8ab60 <_sbrk_r+0x20>)
   8ab46:	4604      	mov	r4, r0
   8ab48:	4608      	mov	r0, r1
   8ab4a:	602a      	str	r2, [r5, #0]
   8ab4c:	f7f9 ffe2 	bl	84b14 <_sbrk>
   8ab50:	1c43      	adds	r3, r0, #1
   8ab52:	d000      	beq.n	8ab56 <_sbrk_r+0x16>
   8ab54:	bd38      	pop	{r3, r4, r5, pc}
   8ab56:	682b      	ldr	r3, [r5, #0]
   8ab58:	2b00      	cmp	r3, #0
   8ab5a:	d0fb      	beq.n	8ab54 <_sbrk_r+0x14>
   8ab5c:	6023      	str	r3, [r4, #0]
   8ab5e:	bd38      	pop	{r3, r4, r5, pc}
   8ab60:	2007346c 	.word	0x2007346c

0008ab64 <__ssprint_r>:
   8ab64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8ab68:	6893      	ldr	r3, [r2, #8]
   8ab6a:	4691      	mov	r9, r2
   8ab6c:	b083      	sub	sp, #12
   8ab6e:	2b00      	cmp	r3, #0
   8ab70:	d06e      	beq.n	8ac50 <__ssprint_r+0xec>
   8ab72:	6817      	ldr	r7, [r2, #0]
   8ab74:	4680      	mov	r8, r0
   8ab76:	460c      	mov	r4, r1
   8ab78:	6808      	ldr	r0, [r1, #0]
   8ab7a:	688d      	ldr	r5, [r1, #8]
   8ab7c:	3708      	adds	r7, #8
   8ab7e:	e044      	b.n	8ac0a <__ssprint_r+0xa6>
   8ab80:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   8ab84:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   8ab88:	d02e      	beq.n	8abe8 <__ssprint_r+0x84>
   8ab8a:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   8ab8e:	1a45      	subs	r5, r0, r1
   8ab90:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   8ab94:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   8ab98:	19aa      	adds	r2, r5, r6
   8ab9a:	ea4f 0a63 	mov.w	sl, r3, asr #1
   8ab9e:	1c53      	adds	r3, r2, #1
   8aba0:	4553      	cmp	r3, sl
   8aba2:	4652      	mov	r2, sl
   8aba4:	bf84      	itt	hi
   8aba6:	469a      	movhi	sl, r3
   8aba8:	4652      	movhi	r2, sl
   8abaa:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   8abae:	d036      	beq.n	8ac1e <__ssprint_r+0xba>
   8abb0:	4611      	mov	r1, r2
   8abb2:	4640      	mov	r0, r8
   8abb4:	f7ff f8e8 	bl	89d88 <_malloc_r>
   8abb8:	2800      	cmp	r0, #0
   8abba:	d03a      	beq.n	8ac32 <__ssprint_r+0xce>
   8abbc:	462a      	mov	r2, r5
   8abbe:	6921      	ldr	r1, [r4, #16]
   8abc0:	9001      	str	r0, [sp, #4]
   8abc2:	f7fc f8c5 	bl	86d50 <memcpy>
   8abc6:	89a2      	ldrh	r2, [r4, #12]
   8abc8:	9b01      	ldr	r3, [sp, #4]
   8abca:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8abce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8abd2:	81a2      	strh	r2, [r4, #12]
   8abd4:	1958      	adds	r0, r3, r5
   8abd6:	ebaa 0505 	sub.w	r5, sl, r5
   8abda:	60a5      	str	r5, [r4, #8]
   8abdc:	f8c4 a014 	str.w	sl, [r4, #20]
   8abe0:	4635      	mov	r5, r6
   8abe2:	46b2      	mov	sl, r6
   8abe4:	6123      	str	r3, [r4, #16]
   8abe6:	6020      	str	r0, [r4, #0]
   8abe8:	4659      	mov	r1, fp
   8abea:	4652      	mov	r2, sl
   8abec:	f000 f910 	bl	8ae10 <memmove>
   8abf0:	f8d9 3008 	ldr.w	r3, [r9, #8]
   8abf4:	68a1      	ldr	r1, [r4, #8]
   8abf6:	6820      	ldr	r0, [r4, #0]
   8abf8:	1b4d      	subs	r5, r1, r5
   8abfa:	4450      	add	r0, sl
   8abfc:	1b9e      	subs	r6, r3, r6
   8abfe:	60a5      	str	r5, [r4, #8]
   8ac00:	6020      	str	r0, [r4, #0]
   8ac02:	f8c9 6008 	str.w	r6, [r9, #8]
   8ac06:	b31e      	cbz	r6, 8ac50 <__ssprint_r+0xec>
   8ac08:	3708      	adds	r7, #8
   8ac0a:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   8ac0e:	2e00      	cmp	r6, #0
   8ac10:	d0fa      	beq.n	8ac08 <__ssprint_r+0xa4>
   8ac12:	42b5      	cmp	r5, r6
   8ac14:	46aa      	mov	sl, r5
   8ac16:	d9b3      	bls.n	8ab80 <__ssprint_r+0x1c>
   8ac18:	4635      	mov	r5, r6
   8ac1a:	46b2      	mov	sl, r6
   8ac1c:	e7e4      	b.n	8abe8 <__ssprint_r+0x84>
   8ac1e:	4640      	mov	r0, r8
   8ac20:	f000 f972 	bl	8af08 <_realloc_r>
   8ac24:	4603      	mov	r3, r0
   8ac26:	2800      	cmp	r0, #0
   8ac28:	d1d4      	bne.n	8abd4 <__ssprint_r+0x70>
   8ac2a:	4640      	mov	r0, r8
   8ac2c:	6921      	ldr	r1, [r4, #16]
   8ac2e:	f7fe ff9f 	bl	89b70 <_free_r>
   8ac32:	230c      	movs	r3, #12
   8ac34:	2200      	movs	r2, #0
   8ac36:	f04f 30ff 	mov.w	r0, #4294967295
   8ac3a:	f8c8 3000 	str.w	r3, [r8]
   8ac3e:	89a3      	ldrh	r3, [r4, #12]
   8ac40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8ac44:	81a3      	strh	r3, [r4, #12]
   8ac46:	e9c9 2201 	strd	r2, r2, [r9, #4]
   8ac4a:	b003      	add	sp, #12
   8ac4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ac50:	2300      	movs	r3, #0
   8ac52:	4618      	mov	r0, r3
   8ac54:	f8c9 3004 	str.w	r3, [r9, #4]
   8ac58:	b003      	add	sp, #12
   8ac5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8ac5e:	bf00      	nop

0008ac60 <__register_exitproc>:
   8ac60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8ac64:	f8df a07c 	ldr.w	sl, [pc, #124]	; 8ace4 <__register_exitproc+0x84>
   8ac68:	4606      	mov	r6, r0
   8ac6a:	f8da 0000 	ldr.w	r0, [sl]
   8ac6e:	4698      	mov	r8, r3
   8ac70:	460f      	mov	r7, r1
   8ac72:	4691      	mov	r9, r2
   8ac74:	f7ff f884 	bl	89d80 <__retarget_lock_acquire_recursive>
   8ac78:	4b1b      	ldr	r3, [pc, #108]	; (8ace8 <__register_exitproc+0x88>)
   8ac7a:	681b      	ldr	r3, [r3, #0]
   8ac7c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   8ac80:	b324      	cbz	r4, 8accc <__register_exitproc+0x6c>
   8ac82:	6865      	ldr	r5, [r4, #4]
   8ac84:	2d1f      	cmp	r5, #31
   8ac86:	dc26      	bgt.n	8acd6 <__register_exitproc+0x76>
   8ac88:	b95e      	cbnz	r6, 8aca2 <__register_exitproc+0x42>
   8ac8a:	1c6b      	adds	r3, r5, #1
   8ac8c:	3502      	adds	r5, #2
   8ac8e:	f8da 0000 	ldr.w	r0, [sl]
   8ac92:	6063      	str	r3, [r4, #4]
   8ac94:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   8ac98:	f7ff f874 	bl	89d84 <__retarget_lock_release_recursive>
   8ac9c:	2000      	movs	r0, #0
   8ac9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8aca2:	2301      	movs	r3, #1
   8aca4:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   8aca8:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   8acac:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   8acb0:	40ab      	lsls	r3, r5
   8acb2:	431a      	orrs	r2, r3
   8acb4:	2e02      	cmp	r6, #2
   8acb6:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   8acba:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   8acbe:	d1e4      	bne.n	8ac8a <__register_exitproc+0x2a>
   8acc0:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   8acc4:	4313      	orrs	r3, r2
   8acc6:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   8acca:	e7de      	b.n	8ac8a <__register_exitproc+0x2a>
   8accc:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   8acd0:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   8acd4:	e7d5      	b.n	8ac82 <__register_exitproc+0x22>
   8acd6:	f8da 0000 	ldr.w	r0, [sl]
   8acda:	f7ff f853 	bl	89d84 <__retarget_lock_release_recursive>
   8acde:	f04f 30ff 	mov.w	r0, #4294967295
   8ace2:	e7dc      	b.n	8ac9e <__register_exitproc+0x3e>
   8ace4:	200710f8 	.word	0x200710f8
   8ace8:	0008daa8 	.word	0x0008daa8

0008acec <__assert_func>:
   8acec:	4614      	mov	r4, r2
   8acee:	b500      	push	{lr}
   8acf0:	461a      	mov	r2, r3
   8acf2:	4b0a      	ldr	r3, [pc, #40]	; (8ad1c <__assert_func+0x30>)
   8acf4:	460d      	mov	r5, r1
   8acf6:	681b      	ldr	r3, [r3, #0]
   8acf8:	b085      	sub	sp, #20
   8acfa:	68de      	ldr	r6, [r3, #12]
   8acfc:	4603      	mov	r3, r0
   8acfe:	b14c      	cbz	r4, 8ad14 <__assert_func+0x28>
   8ad00:	4907      	ldr	r1, [pc, #28]	; (8ad20 <__assert_func+0x34>)
   8ad02:	9101      	str	r1, [sp, #4]
   8ad04:	4630      	mov	r0, r6
   8ad06:	4907      	ldr	r1, [pc, #28]	; (8ad24 <__assert_func+0x38>)
   8ad08:	9402      	str	r4, [sp, #8]
   8ad0a:	9500      	str	r5, [sp, #0]
   8ad0c:	f000 f850 	bl	8adb0 <fiprintf>
   8ad10:	f001 faaa 	bl	8c268 <abort>
   8ad14:	4904      	ldr	r1, [pc, #16]	; (8ad28 <__assert_func+0x3c>)
   8ad16:	460c      	mov	r4, r1
   8ad18:	e7f3      	b.n	8ad02 <__assert_func+0x16>
   8ad1a:	bf00      	nop
   8ad1c:	20070ccc 	.word	0x20070ccc
   8ad20:	0008dd34 	.word	0x0008dd34
   8ad24:	0008dd44 	.word	0x0008dd44
   8ad28:	0008dd40 	.word	0x0008dd40

0008ad2c <_calloc_r>:
   8ad2c:	b538      	push	{r3, r4, r5, lr}
   8ad2e:	fba1 1402 	umull	r1, r4, r1, r2
   8ad32:	bb84      	cbnz	r4, 8ad96 <_calloc_r+0x6a>
   8ad34:	f7ff f828 	bl	89d88 <_malloc_r>
   8ad38:	4605      	mov	r5, r0
   8ad3a:	b1d8      	cbz	r0, 8ad74 <_calloc_r+0x48>
   8ad3c:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8ad40:	f022 0203 	bic.w	r2, r2, #3
   8ad44:	3a04      	subs	r2, #4
   8ad46:	2a24      	cmp	r2, #36	; 0x24
   8ad48:	d816      	bhi.n	8ad78 <_calloc_r+0x4c>
   8ad4a:	2a13      	cmp	r2, #19
   8ad4c:	d919      	bls.n	8ad82 <_calloc_r+0x56>
   8ad4e:	2a1b      	cmp	r2, #27
   8ad50:	e9c0 4400 	strd	r4, r4, [r0]
   8ad54:	d91c      	bls.n	8ad90 <_calloc_r+0x64>
   8ad56:	2300      	movs	r3, #0
   8ad58:	2a24      	cmp	r2, #36	; 0x24
   8ad5a:	bf14      	ite	ne
   8ad5c:	f100 0210 	addne.w	r2, r0, #16
   8ad60:	f100 0218 	addeq.w	r2, r0, #24
   8ad64:	e9c0 4402 	strd	r4, r4, [r0, #8]
   8ad68:	bf04      	itt	eq
   8ad6a:	6104      	streq	r4, [r0, #16]
   8ad6c:	6144      	streq	r4, [r0, #20]
   8ad6e:	e9c2 3300 	strd	r3, r3, [r2]
   8ad72:	6093      	str	r3, [r2, #8]
   8ad74:	4628      	mov	r0, r5
   8ad76:	bd38      	pop	{r3, r4, r5, pc}
   8ad78:	4621      	mov	r1, r4
   8ad7a:	f7fc f85f 	bl	86e3c <memset>
   8ad7e:	4628      	mov	r0, r5
   8ad80:	bd38      	pop	{r3, r4, r5, pc}
   8ad82:	4602      	mov	r2, r0
   8ad84:	2300      	movs	r3, #0
   8ad86:	4628      	mov	r0, r5
   8ad88:	e9c2 3300 	strd	r3, r3, [r2]
   8ad8c:	6093      	str	r3, [r2, #8]
   8ad8e:	bd38      	pop	{r3, r4, r5, pc}
   8ad90:	f100 0208 	add.w	r2, r0, #8
   8ad94:	e7f6      	b.n	8ad84 <_calloc_r+0x58>
   8ad96:	f000 f805 	bl	8ada4 <__errno>
   8ad9a:	230c      	movs	r3, #12
   8ad9c:	2500      	movs	r5, #0
   8ad9e:	6003      	str	r3, [r0, #0]
   8ada0:	e7e8      	b.n	8ad74 <_calloc_r+0x48>
   8ada2:	bf00      	nop

0008ada4 <__errno>:
   8ada4:	4b01      	ldr	r3, [pc, #4]	; (8adac <__errno+0x8>)
   8ada6:	6818      	ldr	r0, [r3, #0]
   8ada8:	4770      	bx	lr
   8adaa:	bf00      	nop
   8adac:	20070ccc 	.word	0x20070ccc

0008adb0 <fiprintf>:
   8adb0:	b40e      	push	{r1, r2, r3}
   8adb2:	b500      	push	{lr}
   8adb4:	4a07      	ldr	r2, [pc, #28]	; (8add4 <fiprintf+0x24>)
   8adb6:	b082      	sub	sp, #8
   8adb8:	ab03      	add	r3, sp, #12
   8adba:	4601      	mov	r1, r0
   8adbc:	6810      	ldr	r0, [r2, #0]
   8adbe:	f853 2b04 	ldr.w	r2, [r3], #4
   8adc2:	9301      	str	r3, [sp, #4]
   8adc4:	f000 faca 	bl	8b35c <_vfiprintf_r>
   8adc8:	b002      	add	sp, #8
   8adca:	f85d eb04 	ldr.w	lr, [sp], #4
   8adce:	b003      	add	sp, #12
   8add0:	4770      	bx	lr
   8add2:	bf00      	nop
   8add4:	20070ccc 	.word	0x20070ccc

0008add8 <__locale_mb_cur_max>:
   8add8:	4b01      	ldr	r3, [pc, #4]	; (8ade0 <__locale_mb_cur_max+0x8>)
   8adda:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   8adde:	4770      	bx	lr
   8ade0:	2007150c 	.word	0x2007150c

0008ade4 <__ascii_mbtowc>:
   8ade4:	b082      	sub	sp, #8
   8ade6:	b149      	cbz	r1, 8adfc <__ascii_mbtowc+0x18>
   8ade8:	b15a      	cbz	r2, 8ae02 <__ascii_mbtowc+0x1e>
   8adea:	b16b      	cbz	r3, 8ae08 <__ascii_mbtowc+0x24>
   8adec:	7813      	ldrb	r3, [r2, #0]
   8adee:	600b      	str	r3, [r1, #0]
   8adf0:	7812      	ldrb	r2, [r2, #0]
   8adf2:	1e10      	subs	r0, r2, #0
   8adf4:	bf18      	it	ne
   8adf6:	2001      	movne	r0, #1
   8adf8:	b002      	add	sp, #8
   8adfa:	4770      	bx	lr
   8adfc:	a901      	add	r1, sp, #4
   8adfe:	2a00      	cmp	r2, #0
   8ae00:	d1f3      	bne.n	8adea <__ascii_mbtowc+0x6>
   8ae02:	4610      	mov	r0, r2
   8ae04:	b002      	add	sp, #8
   8ae06:	4770      	bx	lr
   8ae08:	f06f 0001 	mvn.w	r0, #1
   8ae0c:	e7f4      	b.n	8adf8 <__ascii_mbtowc+0x14>
   8ae0e:	bf00      	nop

0008ae10 <memmove>:
   8ae10:	4288      	cmp	r0, r1
   8ae12:	d90d      	bls.n	8ae30 <memmove+0x20>
   8ae14:	188b      	adds	r3, r1, r2
   8ae16:	4283      	cmp	r3, r0
   8ae18:	d90a      	bls.n	8ae30 <memmove+0x20>
   8ae1a:	eb00 0c02 	add.w	ip, r0, r2
   8ae1e:	b1ba      	cbz	r2, 8ae50 <memmove+0x40>
   8ae20:	4662      	mov	r2, ip
   8ae22:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   8ae26:	4299      	cmp	r1, r3
   8ae28:	f802 cd01 	strb.w	ip, [r2, #-1]!
   8ae2c:	d1f9      	bne.n	8ae22 <memmove+0x12>
   8ae2e:	4770      	bx	lr
   8ae30:	2a0f      	cmp	r2, #15
   8ae32:	d80e      	bhi.n	8ae52 <memmove+0x42>
   8ae34:	4603      	mov	r3, r0
   8ae36:	f102 3cff 	add.w	ip, r2, #4294967295
   8ae3a:	b14a      	cbz	r2, 8ae50 <memmove+0x40>
   8ae3c:	f10c 0c01 	add.w	ip, ip, #1
   8ae40:	3b01      	subs	r3, #1
   8ae42:	448c      	add	ip, r1
   8ae44:	f811 2b01 	ldrb.w	r2, [r1], #1
   8ae48:	4561      	cmp	r1, ip
   8ae4a:	f803 2f01 	strb.w	r2, [r3, #1]!
   8ae4e:	d1f9      	bne.n	8ae44 <memmove+0x34>
   8ae50:	4770      	bx	lr
   8ae52:	ea40 0301 	orr.w	r3, r0, r1
   8ae56:	079b      	lsls	r3, r3, #30
   8ae58:	d14f      	bne.n	8aefa <memmove+0xea>
   8ae5a:	f1a2 0310 	sub.w	r3, r2, #16
   8ae5e:	b570      	push	{r4, r5, r6, lr}
   8ae60:	f101 0c20 	add.w	ip, r1, #32
   8ae64:	f023 050f 	bic.w	r5, r3, #15
   8ae68:	f101 0e10 	add.w	lr, r1, #16
   8ae6c:	f100 0410 	add.w	r4, r0, #16
   8ae70:	44ac      	add	ip, r5
   8ae72:	091b      	lsrs	r3, r3, #4
   8ae74:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   8ae78:	f10e 0e10 	add.w	lr, lr, #16
   8ae7c:	f844 5c10 	str.w	r5, [r4, #-16]
   8ae80:	f85e 5c1c 	ldr.w	r5, [lr, #-28]
   8ae84:	3410      	adds	r4, #16
   8ae86:	f844 5c1c 	str.w	r5, [r4, #-28]
   8ae8a:	f85e 5c18 	ldr.w	r5, [lr, #-24]
   8ae8e:	f844 5c18 	str.w	r5, [r4, #-24]
   8ae92:	f85e 5c14 	ldr.w	r5, [lr, #-20]
   8ae96:	45e6      	cmp	lr, ip
   8ae98:	f844 5c14 	str.w	r5, [r4, #-20]
   8ae9c:	d1ea      	bne.n	8ae74 <memmove+0x64>
   8ae9e:	3301      	adds	r3, #1
   8aea0:	f012 0f0c 	tst.w	r2, #12
   8aea4:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   8aea8:	f002 040f 	and.w	r4, r2, #15
   8aeac:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   8aeb0:	d027      	beq.n	8af02 <memmove+0xf2>
   8aeb2:	468e      	mov	lr, r1
   8aeb4:	3c04      	subs	r4, #4
   8aeb6:	f024 0603 	bic.w	r6, r4, #3
   8aeba:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   8aebe:	441e      	add	r6, r3
   8aec0:	1f1c      	subs	r4, r3, #4
   8aec2:	f85e 5b04 	ldr.w	r5, [lr], #4
   8aec6:	f844 5f04 	str.w	r5, [r4, #4]!
   8aeca:	42b4      	cmp	r4, r6
   8aecc:	d1f9      	bne.n	8aec2 <memmove+0xb2>
   8aece:	f10c 0401 	add.w	r4, ip, #1
   8aed2:	f002 0203 	and.w	r2, r2, #3
   8aed6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   8aeda:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   8aede:	f102 3cff 	add.w	ip, r2, #4294967295
   8aee2:	b14a      	cbz	r2, 8aef8 <memmove+0xe8>
   8aee4:	f10c 0c01 	add.w	ip, ip, #1
   8aee8:	3b01      	subs	r3, #1
   8aeea:	448c      	add	ip, r1
   8aeec:	f811 2b01 	ldrb.w	r2, [r1], #1
   8aef0:	4561      	cmp	r1, ip
   8aef2:	f803 2f01 	strb.w	r2, [r3, #1]!
   8aef6:	d1f9      	bne.n	8aeec <memmove+0xdc>
   8aef8:	bd70      	pop	{r4, r5, r6, pc}
   8aefa:	4603      	mov	r3, r0
   8aefc:	f102 3cff 	add.w	ip, r2, #4294967295
   8af00:	e79c      	b.n	8ae3c <memmove+0x2c>
   8af02:	4622      	mov	r2, r4
   8af04:	e7eb      	b.n	8aede <memmove+0xce>
   8af06:	bf00      	nop

0008af08 <_realloc_r>:
   8af08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8af0c:	4616      	mov	r6, r2
   8af0e:	2900      	cmp	r1, #0
   8af10:	f000 8098 	beq.w	8b044 <_realloc_r+0x13c>
   8af14:	f106 050b 	add.w	r5, r6, #11
   8af18:	4680      	mov	r8, r0
   8af1a:	460c      	mov	r4, r1
   8af1c:	f7ff fa28 	bl	8a370 <__malloc_lock>
   8af20:	2d16      	cmp	r5, #22
   8af22:	d85d      	bhi.n	8afe0 <_realloc_r+0xd8>
   8af24:	2510      	movs	r5, #16
   8af26:	462a      	mov	r2, r5
   8af28:	42ae      	cmp	r6, r5
   8af2a:	d85e      	bhi.n	8afea <_realloc_r+0xe2>
   8af2c:	f854 1c04 	ldr.w	r1, [r4, #-4]
   8af30:	f1a4 0908 	sub.w	r9, r4, #8
   8af34:	f021 0703 	bic.w	r7, r1, #3
   8af38:	4297      	cmp	r7, r2
   8af3a:	da62      	bge.n	8b002 <_realloc_r+0xfa>
   8af3c:	4bbc      	ldr	r3, [pc, #752]	; (8b230 <_realloc_r+0x328>)
   8af3e:	eb09 0007 	add.w	r0, r9, r7
   8af42:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8af46:	4584      	cmp	ip, r0
   8af48:	f000 8097 	beq.w	8b07a <_realloc_r+0x172>
   8af4c:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8af50:	f02c 0301 	bic.w	r3, ip, #1
   8af54:	4403      	add	r3, r0
   8af56:	685b      	ldr	r3, [r3, #4]
   8af58:	07db      	lsls	r3, r3, #31
   8af5a:	d468      	bmi.n	8b02e <_realloc_r+0x126>
   8af5c:	f02c 0c03 	bic.w	ip, ip, #3
   8af60:	eb07 030c 	add.w	r3, r7, ip
   8af64:	4293      	cmp	r3, r2
   8af66:	da47      	bge.n	8aff8 <_realloc_r+0xf0>
   8af68:	07cb      	lsls	r3, r1, #31
   8af6a:	d410      	bmi.n	8af8e <_realloc_r+0x86>
   8af6c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8af70:	eba9 0a03 	sub.w	sl, r9, r3
   8af74:	f8da 3004 	ldr.w	r3, [sl, #4]
   8af78:	f023 0103 	bic.w	r1, r3, #3
   8af7c:	448c      	add	ip, r1
   8af7e:	44bc      	add	ip, r7
   8af80:	4594      	cmp	ip, r2
   8af82:	f280 8111 	bge.w	8b1a8 <_realloc_r+0x2a0>
   8af86:	187b      	adds	r3, r7, r1
   8af88:	4293      	cmp	r3, r2
   8af8a:	f280 80e8 	bge.w	8b15e <_realloc_r+0x256>
   8af8e:	4631      	mov	r1, r6
   8af90:	4640      	mov	r0, r8
   8af92:	f7fe fef9 	bl	89d88 <_malloc_r>
   8af96:	4606      	mov	r6, r0
   8af98:	b1e0      	cbz	r0, 8afd4 <_realloc_r+0xcc>
   8af9a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8af9e:	f1a0 0208 	sub.w	r2, r0, #8
   8afa2:	f023 0301 	bic.w	r3, r3, #1
   8afa6:	444b      	add	r3, r9
   8afa8:	4293      	cmp	r3, r2
   8afaa:	f000 80d2 	beq.w	8b152 <_realloc_r+0x24a>
   8afae:	1f3a      	subs	r2, r7, #4
   8afb0:	2a24      	cmp	r2, #36	; 0x24
   8afb2:	f200 80f5 	bhi.w	8b1a0 <_realloc_r+0x298>
   8afb6:	2a13      	cmp	r2, #19
   8afb8:	f200 80ac 	bhi.w	8b114 <_realloc_r+0x20c>
   8afbc:	4603      	mov	r3, r0
   8afbe:	4622      	mov	r2, r4
   8afc0:	6811      	ldr	r1, [r2, #0]
   8afc2:	6019      	str	r1, [r3, #0]
   8afc4:	6851      	ldr	r1, [r2, #4]
   8afc6:	6059      	str	r1, [r3, #4]
   8afc8:	6892      	ldr	r2, [r2, #8]
   8afca:	609a      	str	r2, [r3, #8]
   8afcc:	4621      	mov	r1, r4
   8afce:	4640      	mov	r0, r8
   8afd0:	f7fe fdce 	bl	89b70 <_free_r>
   8afd4:	4640      	mov	r0, r8
   8afd6:	f7ff f9d1 	bl	8a37c <__malloc_unlock>
   8afda:	4630      	mov	r0, r6
   8afdc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8afe0:	f025 0507 	bic.w	r5, r5, #7
   8afe4:	2d00      	cmp	r5, #0
   8afe6:	462a      	mov	r2, r5
   8afe8:	da9e      	bge.n	8af28 <_realloc_r+0x20>
   8afea:	230c      	movs	r3, #12
   8afec:	2600      	movs	r6, #0
   8afee:	f8c8 3000 	str.w	r3, [r8]
   8aff2:	4630      	mov	r0, r6
   8aff4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8aff8:	461f      	mov	r7, r3
   8affa:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8affe:	60d3      	str	r3, [r2, #12]
   8b000:	609a      	str	r2, [r3, #8]
   8b002:	1b7b      	subs	r3, r7, r5
   8b004:	2b0f      	cmp	r3, #15
   8b006:	d822      	bhi.n	8b04e <_realloc_r+0x146>
   8b008:	f8d9 3004 	ldr.w	r3, [r9, #4]
   8b00c:	f003 0301 	and.w	r3, r3, #1
   8b010:	433b      	orrs	r3, r7
   8b012:	f8c9 3004 	str.w	r3, [r9, #4]
   8b016:	444f      	add	r7, r9
   8b018:	687b      	ldr	r3, [r7, #4]
   8b01a:	f043 0301 	orr.w	r3, r3, #1
   8b01e:	607b      	str	r3, [r7, #4]
   8b020:	4626      	mov	r6, r4
   8b022:	4640      	mov	r0, r8
   8b024:	f7ff f9aa 	bl	8a37c <__malloc_unlock>
   8b028:	4630      	mov	r0, r6
   8b02a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b02e:	07c9      	lsls	r1, r1, #31
   8b030:	d4ad      	bmi.n	8af8e <_realloc_r+0x86>
   8b032:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8b036:	eba9 0a03 	sub.w	sl, r9, r3
   8b03a:	f8da 1004 	ldr.w	r1, [sl, #4]
   8b03e:	f021 0103 	bic.w	r1, r1, #3
   8b042:	e7a0      	b.n	8af86 <_realloc_r+0x7e>
   8b044:	4611      	mov	r1, r2
   8b046:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b04a:	f7fe be9d 	b.w	89d88 <_malloc_r>
   8b04e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8b052:	f043 0301 	orr.w	r3, r3, #1
   8b056:	f001 0101 	and.w	r1, r1, #1
   8b05a:	4329      	orrs	r1, r5
   8b05c:	f8c9 1004 	str.w	r1, [r9, #4]
   8b060:	eb09 0105 	add.w	r1, r9, r5
   8b064:	604b      	str	r3, [r1, #4]
   8b066:	444f      	add	r7, r9
   8b068:	687b      	ldr	r3, [r7, #4]
   8b06a:	4640      	mov	r0, r8
   8b06c:	f043 0301 	orr.w	r3, r3, #1
   8b070:	3108      	adds	r1, #8
   8b072:	607b      	str	r3, [r7, #4]
   8b074:	f7fe fd7c 	bl	89b70 <_free_r>
   8b078:	e7d2      	b.n	8b020 <_realloc_r+0x118>
   8b07a:	f8dc 0004 	ldr.w	r0, [ip, #4]
   8b07e:	f020 0b03 	bic.w	fp, r0, #3
   8b082:	eb07 0c0b 	add.w	ip, r7, fp
   8b086:	f105 0010 	add.w	r0, r5, #16
   8b08a:	4584      	cmp	ip, r0
   8b08c:	da4d      	bge.n	8b12a <_realloc_r+0x222>
   8b08e:	07c9      	lsls	r1, r1, #31
   8b090:	f53f af7d 	bmi.w	8af8e <_realloc_r+0x86>
   8b094:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8b098:	eba9 0a01 	sub.w	sl, r9, r1
   8b09c:	f8da 1004 	ldr.w	r1, [sl, #4]
   8b0a0:	f021 0103 	bic.w	r1, r1, #3
   8b0a4:	448b      	add	fp, r1
   8b0a6:	44bb      	add	fp, r7
   8b0a8:	4558      	cmp	r0, fp
   8b0aa:	f73f af6c 	bgt.w	8af86 <_realloc_r+0x7e>
   8b0ae:	4656      	mov	r6, sl
   8b0b0:	f8da 100c 	ldr.w	r1, [sl, #12]
   8b0b4:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8b0b8:	1f3a      	subs	r2, r7, #4
   8b0ba:	2a24      	cmp	r2, #36	; 0x24
   8b0bc:	60c1      	str	r1, [r0, #12]
   8b0be:	6088      	str	r0, [r1, #8]
   8b0c0:	f200 80db 	bhi.w	8b27a <_realloc_r+0x372>
   8b0c4:	2a13      	cmp	r2, #19
   8b0c6:	f240 80d6 	bls.w	8b276 <_realloc_r+0x36e>
   8b0ca:	6821      	ldr	r1, [r4, #0]
   8b0cc:	2a1b      	cmp	r2, #27
   8b0ce:	f8ca 1008 	str.w	r1, [sl, #8]
   8b0d2:	6861      	ldr	r1, [r4, #4]
   8b0d4:	f8ca 100c 	str.w	r1, [sl, #12]
   8b0d8:	f200 80e0 	bhi.w	8b29c <_realloc_r+0x394>
   8b0dc:	3408      	adds	r4, #8
   8b0de:	f10a 0210 	add.w	r2, sl, #16
   8b0e2:	6821      	ldr	r1, [r4, #0]
   8b0e4:	6011      	str	r1, [r2, #0]
   8b0e6:	6861      	ldr	r1, [r4, #4]
   8b0e8:	6051      	str	r1, [r2, #4]
   8b0ea:	68a1      	ldr	r1, [r4, #8]
   8b0ec:	6091      	str	r1, [r2, #8]
   8b0ee:	ebab 0205 	sub.w	r2, fp, r5
   8b0f2:	eb0a 0105 	add.w	r1, sl, r5
   8b0f6:	f042 0201 	orr.w	r2, r2, #1
   8b0fa:	6099      	str	r1, [r3, #8]
   8b0fc:	604a      	str	r2, [r1, #4]
   8b0fe:	f8da 3004 	ldr.w	r3, [sl, #4]
   8b102:	4640      	mov	r0, r8
   8b104:	f003 0301 	and.w	r3, r3, #1
   8b108:	431d      	orrs	r5, r3
   8b10a:	f8ca 5004 	str.w	r5, [sl, #4]
   8b10e:	f7ff f935 	bl	8a37c <__malloc_unlock>
   8b112:	e76e      	b.n	8aff2 <_realloc_r+0xea>
   8b114:	6823      	ldr	r3, [r4, #0]
   8b116:	2a1b      	cmp	r2, #27
   8b118:	6003      	str	r3, [r0, #0]
   8b11a:	6863      	ldr	r3, [r4, #4]
   8b11c:	6043      	str	r3, [r0, #4]
   8b11e:	d868      	bhi.n	8b1f2 <_realloc_r+0x2ea>
   8b120:	f104 0208 	add.w	r2, r4, #8
   8b124:	f100 0308 	add.w	r3, r0, #8
   8b128:	e74a      	b.n	8afc0 <_realloc_r+0xb8>
   8b12a:	eb09 0205 	add.w	r2, r9, r5
   8b12e:	ebac 0c05 	sub.w	ip, ip, r5
   8b132:	609a      	str	r2, [r3, #8]
   8b134:	f04c 0301 	orr.w	r3, ip, #1
   8b138:	6053      	str	r3, [r2, #4]
   8b13a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b13e:	4640      	mov	r0, r8
   8b140:	f003 0301 	and.w	r3, r3, #1
   8b144:	431d      	orrs	r5, r3
   8b146:	f844 5c04 	str.w	r5, [r4, #-4]
   8b14a:	f7ff f917 	bl	8a37c <__malloc_unlock>
   8b14e:	4626      	mov	r6, r4
   8b150:	e74f      	b.n	8aff2 <_realloc_r+0xea>
   8b152:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8b156:	f023 0303 	bic.w	r3, r3, #3
   8b15a:	441f      	add	r7, r3
   8b15c:	e751      	b.n	8b002 <_realloc_r+0xfa>
   8b15e:	4656      	mov	r6, sl
   8b160:	f8da 100c 	ldr.w	r1, [sl, #12]
   8b164:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8b168:	1f3a      	subs	r2, r7, #4
   8b16a:	2a24      	cmp	r2, #36	; 0x24
   8b16c:	60c1      	str	r1, [r0, #12]
   8b16e:	6088      	str	r0, [r1, #8]
   8b170:	d84c      	bhi.n	8b20c <_realloc_r+0x304>
   8b172:	2a13      	cmp	r2, #19
   8b174:	d948      	bls.n	8b208 <_realloc_r+0x300>
   8b176:	6821      	ldr	r1, [r4, #0]
   8b178:	2a1b      	cmp	r2, #27
   8b17a:	f8ca 1008 	str.w	r1, [sl, #8]
   8b17e:	6861      	ldr	r1, [r4, #4]
   8b180:	f8ca 100c 	str.w	r1, [sl, #12]
   8b184:	d856      	bhi.n	8b234 <_realloc_r+0x32c>
   8b186:	3408      	adds	r4, #8
   8b188:	f10a 0210 	add.w	r2, sl, #16
   8b18c:	461f      	mov	r7, r3
   8b18e:	6823      	ldr	r3, [r4, #0]
   8b190:	46d1      	mov	r9, sl
   8b192:	6013      	str	r3, [r2, #0]
   8b194:	6863      	ldr	r3, [r4, #4]
   8b196:	6053      	str	r3, [r2, #4]
   8b198:	68a3      	ldr	r3, [r4, #8]
   8b19a:	4634      	mov	r4, r6
   8b19c:	6093      	str	r3, [r2, #8]
   8b19e:	e730      	b.n	8b002 <_realloc_r+0xfa>
   8b1a0:	4621      	mov	r1, r4
   8b1a2:	f7ff fe35 	bl	8ae10 <memmove>
   8b1a6:	e711      	b.n	8afcc <_realloc_r+0xc4>
   8b1a8:	4656      	mov	r6, sl
   8b1aa:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8b1ae:	60cb      	str	r3, [r1, #12]
   8b1b0:	6099      	str	r1, [r3, #8]
   8b1b2:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8b1b6:	f8da 300c 	ldr.w	r3, [sl, #12]
   8b1ba:	1f3a      	subs	r2, r7, #4
   8b1bc:	2a24      	cmp	r2, #36	; 0x24
   8b1be:	60cb      	str	r3, [r1, #12]
   8b1c0:	6099      	str	r1, [r3, #8]
   8b1c2:	d82d      	bhi.n	8b220 <_realloc_r+0x318>
   8b1c4:	2a13      	cmp	r2, #19
   8b1c6:	d929      	bls.n	8b21c <_realloc_r+0x314>
   8b1c8:	6823      	ldr	r3, [r4, #0]
   8b1ca:	2a1b      	cmp	r2, #27
   8b1cc:	f8ca 3008 	str.w	r3, [sl, #8]
   8b1d0:	6863      	ldr	r3, [r4, #4]
   8b1d2:	f8ca 300c 	str.w	r3, [sl, #12]
   8b1d6:	d842      	bhi.n	8b25e <_realloc_r+0x356>
   8b1d8:	3408      	adds	r4, #8
   8b1da:	f10a 0310 	add.w	r3, sl, #16
   8b1de:	6822      	ldr	r2, [r4, #0]
   8b1e0:	4667      	mov	r7, ip
   8b1e2:	601a      	str	r2, [r3, #0]
   8b1e4:	6862      	ldr	r2, [r4, #4]
   8b1e6:	46d1      	mov	r9, sl
   8b1e8:	605a      	str	r2, [r3, #4]
   8b1ea:	68a2      	ldr	r2, [r4, #8]
   8b1ec:	4634      	mov	r4, r6
   8b1ee:	609a      	str	r2, [r3, #8]
   8b1f0:	e707      	b.n	8b002 <_realloc_r+0xfa>
   8b1f2:	68a3      	ldr	r3, [r4, #8]
   8b1f4:	2a24      	cmp	r2, #36	; 0x24
   8b1f6:	6083      	str	r3, [r0, #8]
   8b1f8:	68e3      	ldr	r3, [r4, #12]
   8b1fa:	60c3      	str	r3, [r0, #12]
   8b1fc:	d026      	beq.n	8b24c <_realloc_r+0x344>
   8b1fe:	f104 0210 	add.w	r2, r4, #16
   8b202:	f100 0310 	add.w	r3, r0, #16
   8b206:	e6db      	b.n	8afc0 <_realloc_r+0xb8>
   8b208:	4632      	mov	r2, r6
   8b20a:	e7bf      	b.n	8b18c <_realloc_r+0x284>
   8b20c:	4621      	mov	r1, r4
   8b20e:	4630      	mov	r0, r6
   8b210:	461f      	mov	r7, r3
   8b212:	46d1      	mov	r9, sl
   8b214:	f7ff fdfc 	bl	8ae10 <memmove>
   8b218:	4634      	mov	r4, r6
   8b21a:	e6f2      	b.n	8b002 <_realloc_r+0xfa>
   8b21c:	4633      	mov	r3, r6
   8b21e:	e7de      	b.n	8b1de <_realloc_r+0x2d6>
   8b220:	4621      	mov	r1, r4
   8b222:	4630      	mov	r0, r6
   8b224:	4667      	mov	r7, ip
   8b226:	46d1      	mov	r9, sl
   8b228:	f7ff fdf2 	bl	8ae10 <memmove>
   8b22c:	4634      	mov	r4, r6
   8b22e:	e6e8      	b.n	8b002 <_realloc_r+0xfa>
   8b230:	200710fc 	.word	0x200710fc
   8b234:	68a1      	ldr	r1, [r4, #8]
   8b236:	2a24      	cmp	r2, #36	; 0x24
   8b238:	f8ca 1010 	str.w	r1, [sl, #16]
   8b23c:	68e1      	ldr	r1, [r4, #12]
   8b23e:	f8ca 1014 	str.w	r1, [sl, #20]
   8b242:	d020      	beq.n	8b286 <_realloc_r+0x37e>
   8b244:	3410      	adds	r4, #16
   8b246:	f10a 0218 	add.w	r2, sl, #24
   8b24a:	e79f      	b.n	8b18c <_realloc_r+0x284>
   8b24c:	6923      	ldr	r3, [r4, #16]
   8b24e:	f104 0218 	add.w	r2, r4, #24
   8b252:	6103      	str	r3, [r0, #16]
   8b254:	6963      	ldr	r3, [r4, #20]
   8b256:	6143      	str	r3, [r0, #20]
   8b258:	f100 0318 	add.w	r3, r0, #24
   8b25c:	e6b0      	b.n	8afc0 <_realloc_r+0xb8>
   8b25e:	68a3      	ldr	r3, [r4, #8]
   8b260:	2a24      	cmp	r2, #36	; 0x24
   8b262:	f8ca 3010 	str.w	r3, [sl, #16]
   8b266:	68e3      	ldr	r3, [r4, #12]
   8b268:	f8ca 3014 	str.w	r3, [sl, #20]
   8b26c:	d022      	beq.n	8b2b4 <_realloc_r+0x3ac>
   8b26e:	3410      	adds	r4, #16
   8b270:	f10a 0318 	add.w	r3, sl, #24
   8b274:	e7b3      	b.n	8b1de <_realloc_r+0x2d6>
   8b276:	4632      	mov	r2, r6
   8b278:	e733      	b.n	8b0e2 <_realloc_r+0x1da>
   8b27a:	4621      	mov	r1, r4
   8b27c:	4630      	mov	r0, r6
   8b27e:	f7ff fdc7 	bl	8ae10 <memmove>
   8b282:	4b17      	ldr	r3, [pc, #92]	; (8b2e0 <_realloc_r+0x3d8>)
   8b284:	e733      	b.n	8b0ee <_realloc_r+0x1e6>
   8b286:	6922      	ldr	r2, [r4, #16]
   8b288:	3418      	adds	r4, #24
   8b28a:	f8ca 2018 	str.w	r2, [sl, #24]
   8b28e:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8b292:	f8ca 201c 	str.w	r2, [sl, #28]
   8b296:	f10a 0220 	add.w	r2, sl, #32
   8b29a:	e777      	b.n	8b18c <_realloc_r+0x284>
   8b29c:	68a1      	ldr	r1, [r4, #8]
   8b29e:	2a24      	cmp	r2, #36	; 0x24
   8b2a0:	f8ca 1010 	str.w	r1, [sl, #16]
   8b2a4:	68e1      	ldr	r1, [r4, #12]
   8b2a6:	f8ca 1014 	str.w	r1, [sl, #20]
   8b2aa:	d00e      	beq.n	8b2ca <_realloc_r+0x3c2>
   8b2ac:	3410      	adds	r4, #16
   8b2ae:	f10a 0218 	add.w	r2, sl, #24
   8b2b2:	e716      	b.n	8b0e2 <_realloc_r+0x1da>
   8b2b4:	6923      	ldr	r3, [r4, #16]
   8b2b6:	3418      	adds	r4, #24
   8b2b8:	f8ca 3018 	str.w	r3, [sl, #24]
   8b2bc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8b2c0:	f8ca 301c 	str.w	r3, [sl, #28]
   8b2c4:	f10a 0320 	add.w	r3, sl, #32
   8b2c8:	e789      	b.n	8b1de <_realloc_r+0x2d6>
   8b2ca:	6922      	ldr	r2, [r4, #16]
   8b2cc:	3418      	adds	r4, #24
   8b2ce:	f8ca 2018 	str.w	r2, [sl, #24]
   8b2d2:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8b2d6:	f8ca 201c 	str.w	r2, [sl, #28]
   8b2da:	f10a 0220 	add.w	r2, sl, #32
   8b2de:	e700      	b.n	8b0e2 <_realloc_r+0x1da>
   8b2e0:	200710fc 	.word	0x200710fc

0008b2e4 <__sprint_r.part.0>:
   8b2e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b2e8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8b2ea:	4690      	mov	r8, r2
   8b2ec:	049c      	lsls	r4, r3, #18
   8b2ee:	d52d      	bpl.n	8b34c <__sprint_r.part.0+0x68>
   8b2f0:	6893      	ldr	r3, [r2, #8]
   8b2f2:	6812      	ldr	r2, [r2, #0]
   8b2f4:	b343      	cbz	r3, 8b348 <__sprint_r.part.0+0x64>
   8b2f6:	468b      	mov	fp, r1
   8b2f8:	4606      	mov	r6, r0
   8b2fa:	f102 0908 	add.w	r9, r2, #8
   8b2fe:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   8b302:	ea5f 079a 	movs.w	r7, sl, lsr #2
   8b306:	d015      	beq.n	8b334 <__sprint_r.part.0+0x50>
   8b308:	2400      	movs	r4, #0
   8b30a:	3d04      	subs	r5, #4
   8b30c:	e001      	b.n	8b312 <__sprint_r.part.0+0x2e>
   8b30e:	42a7      	cmp	r7, r4
   8b310:	d00e      	beq.n	8b330 <__sprint_r.part.0+0x4c>
   8b312:	465a      	mov	r2, fp
   8b314:	4630      	mov	r0, r6
   8b316:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8b31a:	f001 f955 	bl	8c5c8 <_fputwc_r>
   8b31e:	1c43      	adds	r3, r0, #1
   8b320:	f104 0401 	add.w	r4, r4, #1
   8b324:	d1f3      	bne.n	8b30e <__sprint_r.part.0+0x2a>
   8b326:	2300      	movs	r3, #0
   8b328:	e9c8 3301 	strd	r3, r3, [r8, #4]
   8b32c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b330:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8b334:	f02a 0a03 	bic.w	sl, sl, #3
   8b338:	eba3 030a 	sub.w	r3, r3, sl
   8b33c:	f8c8 3008 	str.w	r3, [r8, #8]
   8b340:	f109 0908 	add.w	r9, r9, #8
   8b344:	2b00      	cmp	r3, #0
   8b346:	d1da      	bne.n	8b2fe <__sprint_r.part.0+0x1a>
   8b348:	2000      	movs	r0, #0
   8b34a:	e7ec      	b.n	8b326 <__sprint_r.part.0+0x42>
   8b34c:	f001 f970 	bl	8c630 <__sfvwrite_r>
   8b350:	2300      	movs	r3, #0
   8b352:	e9c8 3301 	strd	r3, r3, [r8, #4]
   8b356:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b35a:	bf00      	nop

0008b35c <_vfiprintf_r>:
   8b35c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b360:	b0bd      	sub	sp, #244	; 0xf4
   8b362:	461c      	mov	r4, r3
   8b364:	4617      	mov	r7, r2
   8b366:	e9cd 3005 	strd	r3, r0, [sp, #20]
   8b36a:	9102      	str	r1, [sp, #8]
   8b36c:	b118      	cbz	r0, 8b376 <_vfiprintf_r+0x1a>
   8b36e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8b370:	2b00      	cmp	r3, #0
   8b372:	f000 8277 	beq.w	8b864 <_vfiprintf_r+0x508>
   8b376:	9a02      	ldr	r2, [sp, #8]
   8b378:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8b37a:	07de      	lsls	r6, r3, #31
   8b37c:	f140 8184 	bpl.w	8b688 <_vfiprintf_r+0x32c>
   8b380:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   8b384:	b28a      	uxth	r2, r1
   8b386:	0490      	lsls	r0, r2, #18
   8b388:	d408      	bmi.n	8b39c <_vfiprintf_r+0x40>
   8b38a:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   8b38e:	9902      	ldr	r1, [sp, #8]
   8b390:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8b392:	818a      	strh	r2, [r1, #12]
   8b394:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8b398:	b292      	uxth	r2, r2
   8b39a:	664b      	str	r3, [r1, #100]	; 0x64
   8b39c:	0711      	lsls	r1, r2, #28
   8b39e:	f140 80ec 	bpl.w	8b57a <_vfiprintf_r+0x21e>
   8b3a2:	9b02      	ldr	r3, [sp, #8]
   8b3a4:	691b      	ldr	r3, [r3, #16]
   8b3a6:	2b00      	cmp	r3, #0
   8b3a8:	f000 80e7 	beq.w	8b57a <_vfiprintf_r+0x21e>
   8b3ac:	f002 031a 	and.w	r3, r2, #26
   8b3b0:	2b0a      	cmp	r3, #10
   8b3b2:	f000 80f0 	beq.w	8b596 <_vfiprintf_r+0x23a>
   8b3b6:	ab13      	add	r3, sp, #76	; 0x4c
   8b3b8:	9310      	str	r3, [sp, #64]	; 0x40
   8b3ba:	2300      	movs	r3, #0
   8b3bc:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   8b3c0:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   8b3c4:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   8b3c8:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8b3cc:	9304      	str	r3, [sp, #16]
   8b3ce:	783b      	ldrb	r3, [r7, #0]
   8b3d0:	2b00      	cmp	r3, #0
   8b3d2:	f000 8146 	beq.w	8b662 <_vfiprintf_r+0x306>
   8b3d6:	463c      	mov	r4, r7
   8b3d8:	e004      	b.n	8b3e4 <_vfiprintf_r+0x88>
   8b3da:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8b3de:	2b00      	cmp	r3, #0
   8b3e0:	f000 8121 	beq.w	8b626 <_vfiprintf_r+0x2ca>
   8b3e4:	2b25      	cmp	r3, #37	; 0x25
   8b3e6:	d1f8      	bne.n	8b3da <_vfiprintf_r+0x7e>
   8b3e8:	1be5      	subs	r5, r4, r7
   8b3ea:	f040 811e 	bne.w	8b62a <_vfiprintf_r+0x2ce>
   8b3ee:	7823      	ldrb	r3, [r4, #0]
   8b3f0:	2b00      	cmp	r3, #0
   8b3f2:	f000 8136 	beq.w	8b662 <_vfiprintf_r+0x306>
   8b3f6:	f04f 0300 	mov.w	r3, #0
   8b3fa:	2500      	movs	r5, #0
   8b3fc:	f04f 3bff 	mov.w	fp, #4294967295
   8b400:	f04f 082b 	mov.w	r8, #43	; 0x2b
   8b404:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8b408:	7863      	ldrb	r3, [r4, #1]
   8b40a:	9503      	str	r5, [sp, #12]
   8b40c:	1c67      	adds	r7, r4, #1
   8b40e:	3701      	adds	r7, #1
   8b410:	f1a3 0220 	sub.w	r2, r3, #32
   8b414:	2a5a      	cmp	r2, #90	; 0x5a
   8b416:	f200 8146 	bhi.w	8b6a6 <_vfiprintf_r+0x34a>
   8b41a:	e8df f012 	tbh	[pc, r2, lsl #1]
   8b41e:	02a1      	.short	0x02a1
   8b420:	01440144 	.word	0x01440144
   8b424:	0144029d 	.word	0x0144029d
   8b428:	01440144 	.word	0x01440144
   8b42c:	0144027c 	.word	0x0144027c
   8b430:	006a0144 	.word	0x006a0144
   8b434:	01440253 	.word	0x01440253
   8b438:	02af0229 	.word	0x02af0229
   8b43c:	02ab0144 	.word	0x02ab0144
   8b440:	005b005b 	.word	0x005b005b
   8b444:	005b005b 	.word	0x005b005b
   8b448:	005b005b 	.word	0x005b005b
   8b44c:	005b005b 	.word	0x005b005b
   8b450:	0144005b 	.word	0x0144005b
   8b454:	01440144 	.word	0x01440144
   8b458:	01440144 	.word	0x01440144
   8b45c:	01440144 	.word	0x01440144
   8b460:	01440144 	.word	0x01440144
   8b464:	00780213 	.word	0x00780213
   8b468:	01440144 	.word	0x01440144
   8b46c:	01440144 	.word	0x01440144
   8b470:	01440144 	.word	0x01440144
   8b474:	01440144 	.word	0x01440144
   8b478:	01440144 	.word	0x01440144
   8b47c:	014400d1 	.word	0x014400d1
   8b480:	01440144 	.word	0x01440144
   8b484:	014401f7 	.word	0x014401f7
   8b488:	01440241 	.word	0x01440241
   8b48c:	05210144 	.word	0x05210144
   8b490:	01440144 	.word	0x01440144
   8b494:	01440144 	.word	0x01440144
   8b498:	01440144 	.word	0x01440144
   8b49c:	01440144 	.word	0x01440144
   8b4a0:	01440144 	.word	0x01440144
   8b4a4:	007a0213 	.word	0x007a0213
   8b4a8:	01440144 	.word	0x01440144
   8b4ac:	02370144 	.word	0x02370144
   8b4b0:	0074007a 	.word	0x0074007a
   8b4b4:	022d0144 	.word	0x022d0144
   8b4b8:	02690144 	.word	0x02690144
   8b4bc:	025700d3 	.word	0x025700d3
   8b4c0:	01440074 	.word	0x01440074
   8b4c4:	007201f7 	.word	0x007201f7
   8b4c8:	01440541 	.word	0x01440541
   8b4cc:	05430144 	.word	0x05430144
   8b4d0:	00720144 	.word	0x00720144
   8b4d4:	2100      	movs	r1, #0
   8b4d6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8b4da:	f817 3b01 	ldrb.w	r3, [r7], #1
   8b4de:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8b4e2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   8b4e6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8b4ea:	2a09      	cmp	r2, #9
   8b4ec:	d9f5      	bls.n	8b4da <_vfiprintf_r+0x17e>
   8b4ee:	9103      	str	r1, [sp, #12]
   8b4f0:	e78e      	b.n	8b410 <_vfiprintf_r+0xb4>
   8b4f2:	9b05      	ldr	r3, [sp, #20]
   8b4f4:	f853 2b04 	ldr.w	r2, [r3], #4
   8b4f8:	2a00      	cmp	r2, #0
   8b4fa:	9203      	str	r2, [sp, #12]
   8b4fc:	9305      	str	r3, [sp, #20]
   8b4fe:	f2c0 81b4 	blt.w	8b86a <_vfiprintf_r+0x50e>
   8b502:	783b      	ldrb	r3, [r7, #0]
   8b504:	e783      	b.n	8b40e <_vfiprintf_r+0xb2>
   8b506:	783b      	ldrb	r3, [r7, #0]
   8b508:	f045 0520 	orr.w	r5, r5, #32
   8b50c:	e77f      	b.n	8b40e <_vfiprintf_r+0xb2>
   8b50e:	f045 0510 	orr.w	r5, r5, #16
   8b512:	06ac      	lsls	r4, r5, #26
   8b514:	9e05      	ldr	r6, [sp, #20]
   8b516:	f140 816b 	bpl.w	8b7f0 <_vfiprintf_r+0x494>
   8b51a:	3607      	adds	r6, #7
   8b51c:	f026 0607 	bic.w	r6, r6, #7
   8b520:	4632      	mov	r2, r6
   8b522:	6873      	ldr	r3, [r6, #4]
   8b524:	f852 6b08 	ldr.w	r6, [r2], #8
   8b528:	4698      	mov	r8, r3
   8b52a:	9205      	str	r2, [sp, #20]
   8b52c:	2b00      	cmp	r3, #0
   8b52e:	f2c0 8449 	blt.w	8bdc4 <_vfiprintf_r+0xa68>
   8b532:	f1bb 3fff 	cmp.w	fp, #4294967295
   8b536:	f000 8531 	beq.w	8bf9c <_vfiprintf_r+0xc40>
   8b53a:	ea56 0308 	orrs.w	r3, r6, r8
   8b53e:	f025 0a80 	bic.w	sl, r5, #128	; 0x80
   8b542:	f000 8425 	beq.w	8bd90 <_vfiprintf_r+0xa34>
   8b546:	2e0a      	cmp	r6, #10
   8b548:	f178 0300 	sbcs.w	r3, r8, #0
   8b54c:	f080 84e1 	bcs.w	8bf12 <_vfiprintf_r+0xbb6>
   8b550:	2301      	movs	r3, #1
   8b552:	4655      	mov	r5, sl
   8b554:	3630      	adds	r6, #48	; 0x30
   8b556:	f88d 60ef 	strb.w	r6, [sp, #239]	; 0xef
   8b55a:	9301      	str	r3, [sp, #4]
   8b55c:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   8b560:	f8dd 8004 	ldr.w	r8, [sp, #4]
   8b564:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   8b568:	45d8      	cmp	r8, fp
   8b56a:	bfb8      	it	lt
   8b56c:	46d8      	movlt	r8, fp
   8b56e:	2b00      	cmp	r3, #0
   8b570:	f000 80a8 	beq.w	8b6c4 <_vfiprintf_r+0x368>
   8b574:	f108 0801 	add.w	r8, r8, #1
   8b578:	e0a4      	b.n	8b6c4 <_vfiprintf_r+0x368>
   8b57a:	9d02      	ldr	r5, [sp, #8]
   8b57c:	9806      	ldr	r0, [sp, #24]
   8b57e:	4629      	mov	r1, r5
   8b580:	f000 fe08 	bl	8c194 <__swsetup_r>
   8b584:	2800      	cmp	r0, #0
   8b586:	f040 8594 	bne.w	8c0b2 <_vfiprintf_r+0xd56>
   8b58a:	89aa      	ldrh	r2, [r5, #12]
   8b58c:	f002 031a 	and.w	r3, r2, #26
   8b590:	2b0a      	cmp	r3, #10
   8b592:	f47f af10 	bne.w	8b3b6 <_vfiprintf_r+0x5a>
   8b596:	9902      	ldr	r1, [sp, #8]
   8b598:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   8b59c:	2b00      	cmp	r3, #0
   8b59e:	f6ff af0a 	blt.w	8b3b6 <_vfiprintf_r+0x5a>
   8b5a2:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8b5a4:	07de      	lsls	r6, r3, #31
   8b5a6:	d402      	bmi.n	8b5ae <_vfiprintf_r+0x252>
   8b5a8:	0595      	lsls	r5, r2, #22
   8b5aa:	f140 8562 	bpl.w	8c072 <_vfiprintf_r+0xd16>
   8b5ae:	4623      	mov	r3, r4
   8b5b0:	463a      	mov	r2, r7
   8b5b2:	9902      	ldr	r1, [sp, #8]
   8b5b4:	9806      	ldr	r0, [sp, #24]
   8b5b6:	b03d      	add	sp, #244	; 0xf4
   8b5b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b5bc:	f000 bd9a 	b.w	8c0f4 <__sbprintf>
   8b5c0:	f045 0510 	orr.w	r5, r5, #16
   8b5c4:	f015 0820 	ands.w	r8, r5, #32
   8b5c8:	f000 8103 	beq.w	8b7d2 <_vfiprintf_r+0x476>
   8b5cc:	9e05      	ldr	r6, [sp, #20]
   8b5ce:	3607      	adds	r6, #7
   8b5d0:	f026 0607 	bic.w	r6, r6, #7
   8b5d4:	4633      	mov	r3, r6
   8b5d6:	f8d6 8004 	ldr.w	r8, [r6, #4]
   8b5da:	f853 6b08 	ldr.w	r6, [r3], #8
   8b5de:	9305      	str	r3, [sp, #20]
   8b5e0:	2300      	movs	r3, #0
   8b5e2:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   8b5e6:	f04f 0200 	mov.w	r2, #0
   8b5ea:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   8b5ee:	f1bb 3fff 	cmp.w	fp, #4294967295
   8b5f2:	f000 81dd 	beq.w	8b9b0 <_vfiprintf_r+0x654>
   8b5f6:	ea56 0208 	orrs.w	r2, r6, r8
   8b5fa:	f02a 0580 	bic.w	r5, sl, #128	; 0x80
   8b5fe:	f040 81d6 	bne.w	8b9ae <_vfiprintf_r+0x652>
   8b602:	f1bb 0f00 	cmp.w	fp, #0
   8b606:	f040 84cc 	bne.w	8bfa2 <_vfiprintf_r+0xc46>
   8b60a:	2b00      	cmp	r3, #0
   8b60c:	f040 83c5 	bne.w	8bd9a <_vfiprintf_r+0xa3e>
   8b610:	f01a 0301 	ands.w	r3, sl, #1
   8b614:	9301      	str	r3, [sp, #4]
   8b616:	f000 83ec 	beq.w	8bdf2 <_vfiprintf_r+0xa96>
   8b61a:	2330      	movs	r3, #48	; 0x30
   8b61c:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   8b620:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
   8b624:	e79c      	b.n	8b560 <_vfiprintf_r+0x204>
   8b626:	1be5      	subs	r5, r4, r7
   8b628:	d01b      	beq.n	8b662 <_vfiprintf_r+0x306>
   8b62a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8b62c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8b62e:	3301      	adds	r3, #1
   8b630:	442a      	add	r2, r5
   8b632:	2b07      	cmp	r3, #7
   8b634:	e9c9 7500 	strd	r7, r5, [r9]
   8b638:	9212      	str	r2, [sp, #72]	; 0x48
   8b63a:	9311      	str	r3, [sp, #68]	; 0x44
   8b63c:	dc05      	bgt.n	8b64a <_vfiprintf_r+0x2ee>
   8b63e:	f109 0908 	add.w	r9, r9, #8
   8b642:	9b04      	ldr	r3, [sp, #16]
   8b644:	442b      	add	r3, r5
   8b646:	9304      	str	r3, [sp, #16]
   8b648:	e6d1      	b.n	8b3ee <_vfiprintf_r+0x92>
   8b64a:	2a00      	cmp	r2, #0
   8b64c:	f000 839c 	beq.w	8bd88 <_vfiprintf_r+0xa2c>
   8b650:	9902      	ldr	r1, [sp, #8]
   8b652:	9806      	ldr	r0, [sp, #24]
   8b654:	aa10      	add	r2, sp, #64	; 0x40
   8b656:	f7ff fe45 	bl	8b2e4 <__sprint_r.part.0>
   8b65a:	b940      	cbnz	r0, 8b66e <_vfiprintf_r+0x312>
   8b65c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8b660:	e7ef      	b.n	8b642 <_vfiprintf_r+0x2e6>
   8b662:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8b664:	2b00      	cmp	r3, #0
   8b666:	f040 8515 	bne.w	8c094 <_vfiprintf_r+0xd38>
   8b66a:	2300      	movs	r3, #0
   8b66c:	9311      	str	r3, [sp, #68]	; 0x44
   8b66e:	9a02      	ldr	r2, [sp, #8]
   8b670:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8b672:	07d9      	lsls	r1, r3, #31
   8b674:	f140 80a2 	bpl.w	8b7bc <_vfiprintf_r+0x460>
   8b678:	8993      	ldrh	r3, [r2, #12]
   8b67a:	065b      	lsls	r3, r3, #25
   8b67c:	f100 8525 	bmi.w	8c0ca <_vfiprintf_r+0xd6e>
   8b680:	9804      	ldr	r0, [sp, #16]
   8b682:	b03d      	add	sp, #244	; 0xf4
   8b684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b688:	9b02      	ldr	r3, [sp, #8]
   8b68a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   8b68e:	058d      	lsls	r5, r1, #22
   8b690:	b28a      	uxth	r2, r1
   8b692:	f53f ae78 	bmi.w	8b386 <_vfiprintf_r+0x2a>
   8b696:	461d      	mov	r5, r3
   8b698:	6d98      	ldr	r0, [r3, #88]	; 0x58
   8b69a:	f7fe fb71 	bl	89d80 <__retarget_lock_acquire_recursive>
   8b69e:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   8b6a2:	b28a      	uxth	r2, r1
   8b6a4:	e66f      	b.n	8b386 <_vfiprintf_r+0x2a>
   8b6a6:	2b00      	cmp	r3, #0
   8b6a8:	d0db      	beq.n	8b662 <_vfiprintf_r+0x306>
   8b6aa:	f04f 0801 	mov.w	r8, #1
   8b6ae:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   8b6b2:	f04f 0300 	mov.w	r3, #0
   8b6b6:	ac23      	add	r4, sp, #140	; 0x8c
   8b6b8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8b6bc:	f8cd 8004 	str.w	r8, [sp, #4]
   8b6c0:	f04f 0b00 	mov.w	fp, #0
   8b6c4:	f015 0302 	ands.w	r3, r5, #2
   8b6c8:	9307      	str	r3, [sp, #28]
   8b6ca:	bf18      	it	ne
   8b6cc:	f108 0802 	addne.w	r8, r8, #2
   8b6d0:	f015 0384 	ands.w	r3, r5, #132	; 0x84
   8b6d4:	9308      	str	r3, [sp, #32]
   8b6d6:	d105      	bne.n	8b6e4 <_vfiprintf_r+0x388>
   8b6d8:	9b03      	ldr	r3, [sp, #12]
   8b6da:	eba3 0608 	sub.w	r6, r3, r8
   8b6de:	2e00      	cmp	r6, #0
   8b6e0:	f300 828a 	bgt.w	8bbf8 <_vfiprintf_r+0x89c>
   8b6e4:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8b6e8:	1c48      	adds	r0, r1, #1
   8b6ea:	f89d 603b 	ldrb.w	r6, [sp, #59]	; 0x3b
   8b6ee:	b176      	cbz	r6, 8b70e <_vfiprintf_r+0x3b2>
   8b6f0:	2101      	movs	r1, #1
   8b6f2:	3201      	adds	r2, #1
   8b6f4:	f10d 063b 	add.w	r6, sp, #59	; 0x3b
   8b6f8:	2807      	cmp	r0, #7
   8b6fa:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8b6fe:	e9c9 6100 	strd	r6, r1, [r9]
   8b702:	f300 8258 	bgt.w	8bbb6 <_vfiprintf_r+0x85a>
   8b706:	4601      	mov	r1, r0
   8b708:	f109 0908 	add.w	r9, r9, #8
   8b70c:	3001      	adds	r0, #1
   8b70e:	9b07      	ldr	r3, [sp, #28]
   8b710:	b1d3      	cbz	r3, 8b748 <_vfiprintf_r+0x3ec>
   8b712:	2302      	movs	r3, #2
   8b714:	3202      	adds	r2, #2
   8b716:	f8c9 3004 	str.w	r3, [r9, #4]
   8b71a:	2807      	cmp	r0, #7
   8b71c:	ab0f      	add	r3, sp, #60	; 0x3c
   8b71e:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8b722:	f8c9 3000 	str.w	r3, [r9]
   8b726:	f340 8262 	ble.w	8bbee <_vfiprintf_r+0x892>
   8b72a:	2a00      	cmp	r2, #0
   8b72c:	f000 8327 	beq.w	8bd7e <_vfiprintf_r+0xa22>
   8b730:	9902      	ldr	r1, [sp, #8]
   8b732:	9806      	ldr	r0, [sp, #24]
   8b734:	aa10      	add	r2, sp, #64	; 0x40
   8b736:	f7ff fdd5 	bl	8b2e4 <__sprint_r.part.0>
   8b73a:	2800      	cmp	r0, #0
   8b73c:	d197      	bne.n	8b66e <_vfiprintf_r+0x312>
   8b73e:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8b742:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8b746:	1c48      	adds	r0, r1, #1
   8b748:	9b08      	ldr	r3, [sp, #32]
   8b74a:	2b80      	cmp	r3, #128	; 0x80
   8b74c:	f000 8171 	beq.w	8ba32 <_vfiprintf_r+0x6d6>
   8b750:	9b01      	ldr	r3, [sp, #4]
   8b752:	ebab 0603 	sub.w	r6, fp, r3
   8b756:	2e00      	cmp	r6, #0
   8b758:	f300 81cf 	bgt.w	8bafa <_vfiprintf_r+0x79e>
   8b75c:	9b01      	ldr	r3, [sp, #4]
   8b75e:	2807      	cmp	r0, #7
   8b760:	441a      	add	r2, r3
   8b762:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8b766:	f8c9 4000 	str.w	r4, [r9]
   8b76a:	f8c9 3004 	str.w	r3, [r9, #4]
   8b76e:	f340 815d 	ble.w	8ba2c <_vfiprintf_r+0x6d0>
   8b772:	2a00      	cmp	r2, #0
   8b774:	f000 8293 	beq.w	8bc9e <_vfiprintf_r+0x942>
   8b778:	9902      	ldr	r1, [sp, #8]
   8b77a:	9806      	ldr	r0, [sp, #24]
   8b77c:	aa10      	add	r2, sp, #64	; 0x40
   8b77e:	f7ff fdb1 	bl	8b2e4 <__sprint_r.part.0>
   8b782:	2800      	cmp	r0, #0
   8b784:	f47f af73 	bne.w	8b66e <_vfiprintf_r+0x312>
   8b788:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8b78a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8b78e:	0768      	lsls	r0, r5, #29
   8b790:	d505      	bpl.n	8b79e <_vfiprintf_r+0x442>
   8b792:	9b03      	ldr	r3, [sp, #12]
   8b794:	eba3 0408 	sub.w	r4, r3, r8
   8b798:	2c00      	cmp	r4, #0
   8b79a:	f300 828a 	bgt.w	8bcb2 <_vfiprintf_r+0x956>
   8b79e:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   8b7a2:	4541      	cmp	r1, r8
   8b7a4:	bfac      	ite	ge
   8b7a6:	185b      	addge	r3, r3, r1
   8b7a8:	4443      	addlt	r3, r8
   8b7aa:	9304      	str	r3, [sp, #16]
   8b7ac:	2a00      	cmp	r2, #0
   8b7ae:	f040 81f3 	bne.w	8bb98 <_vfiprintf_r+0x83c>
   8b7b2:	2300      	movs	r3, #0
   8b7b4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8b7b8:	9311      	str	r3, [sp, #68]	; 0x44
   8b7ba:	e608      	b.n	8b3ce <_vfiprintf_r+0x72>
   8b7bc:	9b02      	ldr	r3, [sp, #8]
   8b7be:	899b      	ldrh	r3, [r3, #12]
   8b7c0:	059a      	lsls	r2, r3, #22
   8b7c2:	f53f af5a 	bmi.w	8b67a <_vfiprintf_r+0x31e>
   8b7c6:	9c02      	ldr	r4, [sp, #8]
   8b7c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b7ca:	f7fe fadb 	bl	89d84 <__retarget_lock_release_recursive>
   8b7ce:	89a3      	ldrh	r3, [r4, #12]
   8b7d0:	e753      	b.n	8b67a <_vfiprintf_r+0x31e>
   8b7d2:	f015 0310 	ands.w	r3, r5, #16
   8b7d6:	f040 8318 	bne.w	8be0a <_vfiprintf_r+0xaae>
   8b7da:	f015 0240 	ands.w	r2, r5, #64	; 0x40
   8b7de:	f000 8310 	beq.w	8be02 <_vfiprintf_r+0xaa6>
   8b7e2:	9e05      	ldr	r6, [sp, #20]
   8b7e4:	4698      	mov	r8, r3
   8b7e6:	f856 3b04 	ldr.w	r3, [r6], #4
   8b7ea:	9605      	str	r6, [sp, #20]
   8b7ec:	b29e      	uxth	r6, r3
   8b7ee:	e6f7      	b.n	8b5e0 <_vfiprintf_r+0x284>
   8b7f0:	f856 3b04 	ldr.w	r3, [r6], #4
   8b7f4:	06e8      	lsls	r0, r5, #27
   8b7f6:	9605      	str	r6, [sp, #20]
   8b7f8:	f100 8310 	bmi.w	8be1c <_vfiprintf_r+0xac0>
   8b7fc:	0669      	lsls	r1, r5, #25
   8b7fe:	f140 830a 	bpl.w	8be16 <_vfiprintf_r+0xaba>
   8b802:	f343 38c0 	sbfx	r8, r3, #15, #1
   8b806:	b21e      	sxth	r6, r3
   8b808:	4643      	mov	r3, r8
   8b80a:	e68f      	b.n	8b52c <_vfiprintf_r+0x1d0>
   8b80c:	f04f 0300 	mov.w	r3, #0
   8b810:	9e05      	ldr	r6, [sp, #20]
   8b812:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8b816:	f856 4b04 	ldr.w	r4, [r6], #4
   8b81a:	2c00      	cmp	r4, #0
   8b81c:	f000 83cf 	beq.w	8bfbe <_vfiprintf_r+0xc62>
   8b820:	f1bb 3fff 	cmp.w	fp, #4294967295
   8b824:	f000 8341 	beq.w	8beaa <_vfiprintf_r+0xb4e>
   8b828:	465a      	mov	r2, fp
   8b82a:	2100      	movs	r1, #0
   8b82c:	4620      	mov	r0, r4
   8b82e:	f7fe fd57 	bl	8a2e0 <memchr>
   8b832:	2800      	cmp	r0, #0
   8b834:	f000 8422 	beq.w	8c07c <_vfiprintf_r+0xd20>
   8b838:	1b03      	subs	r3, r0, r4
   8b83a:	f04f 0b00 	mov.w	fp, #0
   8b83e:	9605      	str	r6, [sp, #20]
   8b840:	9301      	str	r3, [sp, #4]
   8b842:	e68d      	b.n	8b560 <_vfiprintf_r+0x204>
   8b844:	f04f 0300 	mov.w	r3, #0
   8b848:	f04f 0801 	mov.w	r8, #1
   8b84c:	9e05      	ldr	r6, [sp, #20]
   8b84e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8b852:	f856 3b04 	ldr.w	r3, [r6], #4
   8b856:	ac23      	add	r4, sp, #140	; 0x8c
   8b858:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   8b85c:	9605      	str	r6, [sp, #20]
   8b85e:	f8cd 8004 	str.w	r8, [sp, #4]
   8b862:	e72d      	b.n	8b6c0 <_vfiprintf_r+0x364>
   8b864:	f000 fdce 	bl	8c404 <__sinit>
   8b868:	e585      	b.n	8b376 <_vfiprintf_r+0x1a>
   8b86a:	9b03      	ldr	r3, [sp, #12]
   8b86c:	425b      	negs	r3, r3
   8b86e:	9303      	str	r3, [sp, #12]
   8b870:	783b      	ldrb	r3, [r7, #0]
   8b872:	f045 0504 	orr.w	r5, r5, #4
   8b876:	e5ca      	b.n	8b40e <_vfiprintf_r+0xb2>
   8b878:	783b      	ldrb	r3, [r7, #0]
   8b87a:	2b6c      	cmp	r3, #108	; 0x6c
   8b87c:	bf03      	ittte	eq
   8b87e:	787b      	ldrbeq	r3, [r7, #1]
   8b880:	f045 0520 	orreq.w	r5, r5, #32
   8b884:	3701      	addeq	r7, #1
   8b886:	f045 0510 	orrne.w	r5, r5, #16
   8b88a:	e5c0      	b.n	8b40e <_vfiprintf_r+0xb2>
   8b88c:	783b      	ldrb	r3, [r7, #0]
   8b88e:	2b68      	cmp	r3, #104	; 0x68
   8b890:	bf03      	ittte	eq
   8b892:	787b      	ldrbeq	r3, [r7, #1]
   8b894:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
   8b898:	3701      	addeq	r7, #1
   8b89a:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
   8b89e:	e5b6      	b.n	8b40e <_vfiprintf_r+0xb2>
   8b8a0:	f045 0a10 	orr.w	sl, r5, #16
   8b8a4:	f01a 0820 	ands.w	r8, sl, #32
   8b8a8:	f000 827e 	beq.w	8bda8 <_vfiprintf_r+0xa4c>
   8b8ac:	9e05      	ldr	r6, [sp, #20]
   8b8ae:	2301      	movs	r3, #1
   8b8b0:	3607      	adds	r6, #7
   8b8b2:	f026 0607 	bic.w	r6, r6, #7
   8b8b6:	4632      	mov	r2, r6
   8b8b8:	f8d6 8004 	ldr.w	r8, [r6, #4]
   8b8bc:	f852 6b08 	ldr.w	r6, [r2], #8
   8b8c0:	9205      	str	r2, [sp, #20]
   8b8c2:	e690      	b.n	8b5e6 <_vfiprintf_r+0x28a>
   8b8c4:	783b      	ldrb	r3, [r7, #0]
   8b8c6:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
   8b8ca:	e5a0      	b.n	8b40e <_vfiprintf_r+0xb2>
   8b8cc:	2230      	movs	r2, #48	; 0x30
   8b8ce:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   8b8d2:	2278      	movs	r2, #120	; 0x78
   8b8d4:	9b05      	ldr	r3, [sp, #20]
   8b8d6:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
   8b8da:	f853 6b04 	ldr.w	r6, [r3], #4
   8b8de:	4abe      	ldr	r2, [pc, #760]	; (8bbd8 <_vfiprintf_r+0x87c>)
   8b8e0:	9305      	str	r3, [sp, #20]
   8b8e2:	f04f 0800 	mov.w	r8, #0
   8b8e6:	2302      	movs	r3, #2
   8b8e8:	f045 0a02 	orr.w	sl, r5, #2
   8b8ec:	9209      	str	r2, [sp, #36]	; 0x24
   8b8ee:	e67a      	b.n	8b5e6 <_vfiprintf_r+0x28a>
   8b8f0:	06ae      	lsls	r6, r5, #26
   8b8f2:	f100 82a4 	bmi.w	8be3e <_vfiprintf_r+0xae2>
   8b8f6:	06ec      	lsls	r4, r5, #27
   8b8f8:	f100 8359 	bmi.w	8bfae <_vfiprintf_r+0xc52>
   8b8fc:	0668      	lsls	r0, r5, #25
   8b8fe:	f100 83b0 	bmi.w	8c062 <_vfiprintf_r+0xd06>
   8b902:	05a9      	lsls	r1, r5, #22
   8b904:	f140 8353 	bpl.w	8bfae <_vfiprintf_r+0xc52>
   8b908:	9e05      	ldr	r6, [sp, #20]
   8b90a:	9a04      	ldr	r2, [sp, #16]
   8b90c:	f856 3b04 	ldr.w	r3, [r6], #4
   8b910:	701a      	strb	r2, [r3, #0]
   8b912:	9605      	str	r6, [sp, #20]
   8b914:	e55b      	b.n	8b3ce <_vfiprintf_r+0x72>
   8b916:	9c06      	ldr	r4, [sp, #24]
   8b918:	4620      	mov	r0, r4
   8b91a:	f7fe fa29 	bl	89d70 <_localeconv_r>
   8b91e:	6843      	ldr	r3, [r0, #4]
   8b920:	4618      	mov	r0, r3
   8b922:	930b      	str	r3, [sp, #44]	; 0x2c
   8b924:	f7fb fafe 	bl	86f24 <strlen>
   8b928:	4603      	mov	r3, r0
   8b92a:	4620      	mov	r0, r4
   8b92c:	930c      	str	r3, [sp, #48]	; 0x30
   8b92e:	461c      	mov	r4, r3
   8b930:	f7fe fa1e 	bl	89d70 <_localeconv_r>
   8b934:	6883      	ldr	r3, [r0, #8]
   8b936:	930a      	str	r3, [sp, #40]	; 0x28
   8b938:	2c00      	cmp	r4, #0
   8b93a:	f43f ade2 	beq.w	8b502 <_vfiprintf_r+0x1a6>
   8b93e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b940:	2b00      	cmp	r3, #0
   8b942:	f43f adde 	beq.w	8b502 <_vfiprintf_r+0x1a6>
   8b946:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8b948:	781b      	ldrb	r3, [r3, #0]
   8b94a:	2b00      	cmp	r3, #0
   8b94c:	f43f add9 	beq.w	8b502 <_vfiprintf_r+0x1a6>
   8b950:	783b      	ldrb	r3, [r7, #0]
   8b952:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
   8b956:	e55a      	b.n	8b40e <_vfiprintf_r+0xb2>
   8b958:	783b      	ldrb	r3, [r7, #0]
   8b95a:	f045 0501 	orr.w	r5, r5, #1
   8b95e:	e556      	b.n	8b40e <_vfiprintf_r+0xb2>
   8b960:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   8b964:	2b00      	cmp	r3, #0
   8b966:	f47f adcc 	bne.w	8b502 <_vfiprintf_r+0x1a6>
   8b96a:	2320      	movs	r3, #32
   8b96c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8b970:	783b      	ldrb	r3, [r7, #0]
   8b972:	e54c      	b.n	8b40e <_vfiprintf_r+0xb2>
   8b974:	783b      	ldrb	r3, [r7, #0]
   8b976:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   8b97a:	e548      	b.n	8b40e <_vfiprintf_r+0xb2>
   8b97c:	4639      	mov	r1, r7
   8b97e:	f811 3b01 	ldrb.w	r3, [r1], #1
   8b982:	2b2a      	cmp	r3, #42	; 0x2a
   8b984:	f000 83a6 	beq.w	8c0d4 <_vfiprintf_r+0xd78>
   8b988:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8b98c:	2a09      	cmp	r2, #9
   8b98e:	460f      	mov	r7, r1
   8b990:	f04f 0b00 	mov.w	fp, #0
   8b994:	f63f ad3c 	bhi.w	8b410 <_vfiprintf_r+0xb4>
   8b998:	f817 3b01 	ldrb.w	r3, [r7], #1
   8b99c:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
   8b9a0:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
   8b9a4:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8b9a8:	2a09      	cmp	r2, #9
   8b9aa:	d9f5      	bls.n	8b998 <_vfiprintf_r+0x63c>
   8b9ac:	e530      	b.n	8b410 <_vfiprintf_r+0xb4>
   8b9ae:	46aa      	mov	sl, r5
   8b9b0:	2b01      	cmp	r3, #1
   8b9b2:	f43f adc8 	beq.w	8b546 <_vfiprintf_r+0x1ea>
   8b9b6:	2b02      	cmp	r3, #2
   8b9b8:	ac3c      	add	r4, sp, #240	; 0xf0
   8b9ba:	d112      	bne.n	8b9e2 <_vfiprintf_r+0x686>
   8b9bc:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8b9be:	f006 030f 	and.w	r3, r6, #15
   8b9c2:	5cd3      	ldrb	r3, [r2, r3]
   8b9c4:	0936      	lsrs	r6, r6, #4
   8b9c6:	ea46 7608 	orr.w	r6, r6, r8, lsl #28
   8b9ca:	ea4f 1818 	mov.w	r8, r8, lsr #4
   8b9ce:	f804 3d01 	strb.w	r3, [r4, #-1]!
   8b9d2:	ea56 0308 	orrs.w	r3, r6, r8
   8b9d6:	d1f2      	bne.n	8b9be <_vfiprintf_r+0x662>
   8b9d8:	ab3c      	add	r3, sp, #240	; 0xf0
   8b9da:	1b1b      	subs	r3, r3, r4
   8b9dc:	4655      	mov	r5, sl
   8b9de:	9301      	str	r3, [sp, #4]
   8b9e0:	e5be      	b.n	8b560 <_vfiprintf_r+0x204>
   8b9e2:	f006 0307 	and.w	r3, r6, #7
   8b9e6:	08f6      	lsrs	r6, r6, #3
   8b9e8:	ea46 7648 	orr.w	r6, r6, r8, lsl #29
   8b9ec:	ea4f 08d8 	mov.w	r8, r8, lsr #3
   8b9f0:	3330      	adds	r3, #48	; 0x30
   8b9f2:	ea56 0108 	orrs.w	r1, r6, r8
   8b9f6:	4622      	mov	r2, r4
   8b9f8:	f804 3d01 	strb.w	r3, [r4, #-1]!
   8b9fc:	d1f1      	bne.n	8b9e2 <_vfiprintf_r+0x686>
   8b9fe:	f01a 0f01 	tst.w	sl, #1
   8ba02:	d0e9      	beq.n	8b9d8 <_vfiprintf_r+0x67c>
   8ba04:	2b30      	cmp	r3, #48	; 0x30
   8ba06:	d0e7      	beq.n	8b9d8 <_vfiprintf_r+0x67c>
   8ba08:	2330      	movs	r3, #48	; 0x30
   8ba0a:	3a02      	subs	r2, #2
   8ba0c:	f804 3c01 	strb.w	r3, [r4, #-1]
   8ba10:	ab3c      	add	r3, sp, #240	; 0xf0
   8ba12:	1a9b      	subs	r3, r3, r2
   8ba14:	4655      	mov	r5, sl
   8ba16:	4614      	mov	r4, r2
   8ba18:	9301      	str	r3, [sp, #4]
   8ba1a:	e5a1      	b.n	8b560 <_vfiprintf_r+0x204>
   8ba1c:	2301      	movs	r3, #1
   8ba1e:	9a01      	ldr	r2, [sp, #4]
   8ba20:	9413      	str	r4, [sp, #76]	; 0x4c
   8ba22:	9311      	str	r3, [sp, #68]	; 0x44
   8ba24:	9214      	str	r2, [sp, #80]	; 0x50
   8ba26:	9212      	str	r2, [sp, #72]	; 0x48
   8ba28:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ba2c:	f109 0908 	add.w	r9, r9, #8
   8ba30:	e6ad      	b.n	8b78e <_vfiprintf_r+0x432>
   8ba32:	9b03      	ldr	r3, [sp, #12]
   8ba34:	eba3 0608 	sub.w	r6, r3, r8
   8ba38:	2e00      	cmp	r6, #0
   8ba3a:	f77f ae89 	ble.w	8b750 <_vfiprintf_r+0x3f4>
   8ba3e:	2e10      	cmp	r6, #16
   8ba40:	f8df a198 	ldr.w	sl, [pc, #408]	; 8bbdc <_vfiprintf_r+0x880>
   8ba44:	dd38      	ble.n	8bab8 <_vfiprintf_r+0x75c>
   8ba46:	4653      	mov	r3, sl
   8ba48:	46cc      	mov	ip, r9
   8ba4a:	46ba      	mov	sl, r7
   8ba4c:	46c1      	mov	r9, r8
   8ba4e:	9407      	str	r4, [sp, #28]
   8ba50:	46a8      	mov	r8, r5
   8ba52:	461f      	mov	r7, r3
   8ba54:	9c06      	ldr	r4, [sp, #24]
   8ba56:	9d02      	ldr	r5, [sp, #8]
   8ba58:	e007      	b.n	8ba6a <_vfiprintf_r+0x70e>
   8ba5a:	f101 0e02 	add.w	lr, r1, #2
   8ba5e:	4601      	mov	r1, r0
   8ba60:	f10c 0c08 	add.w	ip, ip, #8
   8ba64:	3e10      	subs	r6, #16
   8ba66:	2e10      	cmp	r6, #16
   8ba68:	dd1e      	ble.n	8baa8 <_vfiprintf_r+0x74c>
   8ba6a:	2310      	movs	r3, #16
   8ba6c:	1c48      	adds	r0, r1, #1
   8ba6e:	3210      	adds	r2, #16
   8ba70:	2807      	cmp	r0, #7
   8ba72:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8ba76:	f8cc 7000 	str.w	r7, [ip]
   8ba7a:	f8cc 3004 	str.w	r3, [ip, #4]
   8ba7e:	ddec      	ble.n	8ba5a <_vfiprintf_r+0x6fe>
   8ba80:	2a00      	cmp	r2, #0
   8ba82:	f000 8092 	beq.w	8bbaa <_vfiprintf_r+0x84e>
   8ba86:	4629      	mov	r1, r5
   8ba88:	4620      	mov	r0, r4
   8ba8a:	aa10      	add	r2, sp, #64	; 0x40
   8ba8c:	f7ff fc2a 	bl	8b2e4 <__sprint_r.part.0>
   8ba90:	2800      	cmp	r0, #0
   8ba92:	f47f adec 	bne.w	8b66e <_vfiprintf_r+0x312>
   8ba96:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8ba9a:	3e10      	subs	r6, #16
   8ba9c:	2e10      	cmp	r6, #16
   8ba9e:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8baa2:	f101 0e01 	add.w	lr, r1, #1
   8baa6:	dce0      	bgt.n	8ba6a <_vfiprintf_r+0x70e>
   8baa8:	463b      	mov	r3, r7
   8baaa:	4645      	mov	r5, r8
   8baac:	4657      	mov	r7, sl
   8baae:	46c8      	mov	r8, r9
   8bab0:	4670      	mov	r0, lr
   8bab2:	46e1      	mov	r9, ip
   8bab4:	469a      	mov	sl, r3
   8bab6:	9c07      	ldr	r4, [sp, #28]
   8bab8:	4432      	add	r2, r6
   8baba:	2807      	cmp	r0, #7
   8babc:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8bac0:	f8c9 a000 	str.w	sl, [r9]
   8bac4:	f8c9 6004 	str.w	r6, [r9, #4]
   8bac8:	f340 8196 	ble.w	8bdf8 <_vfiprintf_r+0xa9c>
   8bacc:	2a00      	cmp	r2, #0
   8bace:	f000 829a 	beq.w	8c006 <_vfiprintf_r+0xcaa>
   8bad2:	9902      	ldr	r1, [sp, #8]
   8bad4:	9806      	ldr	r0, [sp, #24]
   8bad6:	aa10      	add	r2, sp, #64	; 0x40
   8bad8:	f7ff fc04 	bl	8b2e4 <__sprint_r.part.0>
   8badc:	2800      	cmp	r0, #0
   8bade:	f47f adc6 	bne.w	8b66e <_vfiprintf_r+0x312>
   8bae2:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8bae6:	9b01      	ldr	r3, [sp, #4]
   8bae8:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8baec:	ebab 0603 	sub.w	r6, fp, r3
   8baf0:	2e00      	cmp	r6, #0
   8baf2:	f101 0001 	add.w	r0, r1, #1
   8baf6:	f77f ae31 	ble.w	8b75c <_vfiprintf_r+0x400>
   8bafa:	2e10      	cmp	r6, #16
   8bafc:	f340 826b 	ble.w	8bfd6 <_vfiprintf_r+0xc7a>
   8bb00:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8bbdc <_vfiprintf_r+0x880>
   8bb04:	46cc      	mov	ip, r9
   8bb06:	4653      	mov	r3, sl
   8bb08:	46c1      	mov	r9, r8
   8bb0a:	46ba      	mov	sl, r7
   8bb0c:	46a8      	mov	r8, r5
   8bb0e:	9407      	str	r4, [sp, #28]
   8bb10:	f04f 0b10 	mov.w	fp, #16
   8bb14:	461f      	mov	r7, r3
   8bb16:	9c06      	ldr	r4, [sp, #24]
   8bb18:	9d02      	ldr	r5, [sp, #8]
   8bb1a:	e007      	b.n	8bb2c <_vfiprintf_r+0x7d0>
   8bb1c:	f101 0e02 	add.w	lr, r1, #2
   8bb20:	4601      	mov	r1, r0
   8bb22:	f10c 0c08 	add.w	ip, ip, #8
   8bb26:	3e10      	subs	r6, #16
   8bb28:	2e10      	cmp	r6, #16
   8bb2a:	dd19      	ble.n	8bb60 <_vfiprintf_r+0x804>
   8bb2c:	1c48      	adds	r0, r1, #1
   8bb2e:	3210      	adds	r2, #16
   8bb30:	2807      	cmp	r0, #7
   8bb32:	e9cc 7b00 	strd	r7, fp, [ip]
   8bb36:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8bb3a:	ddef      	ble.n	8bb1c <_vfiprintf_r+0x7c0>
   8bb3c:	b332      	cbz	r2, 8bb8c <_vfiprintf_r+0x830>
   8bb3e:	4629      	mov	r1, r5
   8bb40:	4620      	mov	r0, r4
   8bb42:	aa10      	add	r2, sp, #64	; 0x40
   8bb44:	f7ff fbce 	bl	8b2e4 <__sprint_r.part.0>
   8bb48:	2800      	cmp	r0, #0
   8bb4a:	f47f ad90 	bne.w	8b66e <_vfiprintf_r+0x312>
   8bb4e:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8bb52:	3e10      	subs	r6, #16
   8bb54:	2e10      	cmp	r6, #16
   8bb56:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8bb5a:	f101 0e01 	add.w	lr, r1, #1
   8bb5e:	dce5      	bgt.n	8bb2c <_vfiprintf_r+0x7d0>
   8bb60:	463b      	mov	r3, r7
   8bb62:	4645      	mov	r5, r8
   8bb64:	4657      	mov	r7, sl
   8bb66:	46c8      	mov	r8, r9
   8bb68:	4670      	mov	r0, lr
   8bb6a:	46e1      	mov	r9, ip
   8bb6c:	469a      	mov	sl, r3
   8bb6e:	9c07      	ldr	r4, [sp, #28]
   8bb70:	4432      	add	r2, r6
   8bb72:	2807      	cmp	r0, #7
   8bb74:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8bb78:	f8c9 a000 	str.w	sl, [r9]
   8bb7c:	f8c9 6004 	str.w	r6, [r9, #4]
   8bb80:	f300 80e9 	bgt.w	8bd56 <_vfiprintf_r+0x9fa>
   8bb84:	f109 0908 	add.w	r9, r9, #8
   8bb88:	3001      	adds	r0, #1
   8bb8a:	e5e7      	b.n	8b75c <_vfiprintf_r+0x400>
   8bb8c:	f04f 0e01 	mov.w	lr, #1
   8bb90:	4611      	mov	r1, r2
   8bb92:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8bb96:	e7c6      	b.n	8bb26 <_vfiprintf_r+0x7ca>
   8bb98:	9902      	ldr	r1, [sp, #8]
   8bb9a:	9806      	ldr	r0, [sp, #24]
   8bb9c:	aa10      	add	r2, sp, #64	; 0x40
   8bb9e:	f7ff fba1 	bl	8b2e4 <__sprint_r.part.0>
   8bba2:	2800      	cmp	r0, #0
   8bba4:	f43f ae05 	beq.w	8b7b2 <_vfiprintf_r+0x456>
   8bba8:	e561      	b.n	8b66e <_vfiprintf_r+0x312>
   8bbaa:	f04f 0e01 	mov.w	lr, #1
   8bbae:	4611      	mov	r1, r2
   8bbb0:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8bbb4:	e756      	b.n	8ba64 <_vfiprintf_r+0x708>
   8bbb6:	2a00      	cmp	r2, #0
   8bbb8:	f000 80de 	beq.w	8bd78 <_vfiprintf_r+0xa1c>
   8bbbc:	9902      	ldr	r1, [sp, #8]
   8bbbe:	9806      	ldr	r0, [sp, #24]
   8bbc0:	aa10      	add	r2, sp, #64	; 0x40
   8bbc2:	f7ff fb8f 	bl	8b2e4 <__sprint_r.part.0>
   8bbc6:	2800      	cmp	r0, #0
   8bbc8:	f47f ad51 	bne.w	8b66e <_vfiprintf_r+0x312>
   8bbcc:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8bbd0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8bbd4:	1c48      	adds	r0, r1, #1
   8bbd6:	e59a      	b.n	8b70e <_vfiprintf_r+0x3b2>
   8bbd8:	0008dabc 	.word	0x0008dabc
   8bbdc:	0008dd94 	.word	0x0008dd94
   8bbe0:	2202      	movs	r2, #2
   8bbe2:	2001      	movs	r0, #1
   8bbe4:	ab0f      	add	r3, sp, #60	; 0x3c
   8bbe6:	9313      	str	r3, [sp, #76]	; 0x4c
   8bbe8:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8bbec:	9214      	str	r2, [sp, #80]	; 0x50
   8bbee:	4601      	mov	r1, r0
   8bbf0:	f109 0908 	add.w	r9, r9, #8
   8bbf4:	1c48      	adds	r0, r1, #1
   8bbf6:	e5a7      	b.n	8b748 <_vfiprintf_r+0x3ec>
   8bbf8:	2e10      	cmp	r6, #16
   8bbfa:	f340 8245 	ble.w	8c088 <_vfiprintf_r+0xd2c>
   8bbfe:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   8bc02:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 8bef4 <_vfiprintf_r+0xb98>
   8bc06:	4619      	mov	r1, r3
   8bc08:	4653      	mov	r3, sl
   8bc0a:	46cc      	mov	ip, r9
   8bc0c:	46ba      	mov	sl, r7
   8bc0e:	46c1      	mov	r9, r8
   8bc10:	940d      	str	r4, [sp, #52]	; 0x34
   8bc12:	46a8      	mov	r8, r5
   8bc14:	461f      	mov	r7, r3
   8bc16:	9c06      	ldr	r4, [sp, #24]
   8bc18:	9d02      	ldr	r5, [sp, #8]
   8bc1a:	e007      	b.n	8bc2c <_vfiprintf_r+0x8d0>
   8bc1c:	f101 0e02 	add.w	lr, r1, #2
   8bc20:	4601      	mov	r1, r0
   8bc22:	f10c 0c08 	add.w	ip, ip, #8
   8bc26:	3e10      	subs	r6, #16
   8bc28:	2e10      	cmp	r6, #16
   8bc2a:	dd1c      	ble.n	8bc66 <_vfiprintf_r+0x90a>
   8bc2c:	2310      	movs	r3, #16
   8bc2e:	1c48      	adds	r0, r1, #1
   8bc30:	3210      	adds	r2, #16
   8bc32:	2807      	cmp	r0, #7
   8bc34:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8bc38:	f8cc 7000 	str.w	r7, [ip]
   8bc3c:	f8cc 3004 	str.w	r3, [ip, #4]
   8bc40:	ddec      	ble.n	8bc1c <_vfiprintf_r+0x8c0>
   8bc42:	b332      	cbz	r2, 8bc92 <_vfiprintf_r+0x936>
   8bc44:	4629      	mov	r1, r5
   8bc46:	4620      	mov	r0, r4
   8bc48:	aa10      	add	r2, sp, #64	; 0x40
   8bc4a:	f7ff fb4b 	bl	8b2e4 <__sprint_r.part.0>
   8bc4e:	2800      	cmp	r0, #0
   8bc50:	f47f ad0d 	bne.w	8b66e <_vfiprintf_r+0x312>
   8bc54:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8bc58:	3e10      	subs	r6, #16
   8bc5a:	2e10      	cmp	r6, #16
   8bc5c:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8bc60:	f101 0e01 	add.w	lr, r1, #1
   8bc64:	dce2      	bgt.n	8bc2c <_vfiprintf_r+0x8d0>
   8bc66:	463b      	mov	r3, r7
   8bc68:	4645      	mov	r5, r8
   8bc6a:	4657      	mov	r7, sl
   8bc6c:	46c8      	mov	r8, r9
   8bc6e:	4671      	mov	r1, lr
   8bc70:	46e1      	mov	r9, ip
   8bc72:	469a      	mov	sl, r3
   8bc74:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   8bc76:	4432      	add	r2, r6
   8bc78:	2907      	cmp	r1, #7
   8bc7a:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   8bc7e:	f8c9 a000 	str.w	sl, [r9]
   8bc82:	f8c9 6004 	str.w	r6, [r9, #4]
   8bc86:	f300 80a7 	bgt.w	8bdd8 <_vfiprintf_r+0xa7c>
   8bc8a:	f109 0908 	add.w	r9, r9, #8
   8bc8e:	1c48      	adds	r0, r1, #1
   8bc90:	e52b      	b.n	8b6ea <_vfiprintf_r+0x38e>
   8bc92:	4611      	mov	r1, r2
   8bc94:	f04f 0e01 	mov.w	lr, #1
   8bc98:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8bc9c:	e7c3      	b.n	8bc26 <_vfiprintf_r+0x8ca>
   8bc9e:	076c      	lsls	r4, r5, #29
   8bca0:	9211      	str	r2, [sp, #68]	; 0x44
   8bca2:	d550      	bpl.n	8bd46 <_vfiprintf_r+0x9ea>
   8bca4:	9b03      	ldr	r3, [sp, #12]
   8bca6:	eba3 0408 	sub.w	r4, r3, r8
   8bcaa:	2c00      	cmp	r4, #0
   8bcac:	dd4b      	ble.n	8bd46 <_vfiprintf_r+0x9ea>
   8bcae:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8bcb2:	2c10      	cmp	r4, #16
   8bcb4:	f340 81f8 	ble.w	8c0a8 <_vfiprintf_r+0xd4c>
   8bcb8:	f8df a238 	ldr.w	sl, [pc, #568]	; 8bef4 <_vfiprintf_r+0xb98>
   8bcbc:	2510      	movs	r5, #16
   8bcbe:	4653      	mov	r3, sl
   8bcc0:	9911      	ldr	r1, [sp, #68]	; 0x44
   8bcc2:	46ba      	mov	sl, r7
   8bcc4:	9e06      	ldr	r6, [sp, #24]
   8bcc6:	461f      	mov	r7, r3
   8bcc8:	f8dd b008 	ldr.w	fp, [sp, #8]
   8bccc:	e006      	b.n	8bcdc <_vfiprintf_r+0x980>
   8bcce:	1c88      	adds	r0, r1, #2
   8bcd0:	4619      	mov	r1, r3
   8bcd2:	f109 0908 	add.w	r9, r9, #8
   8bcd6:	3c10      	subs	r4, #16
   8bcd8:	2c10      	cmp	r4, #16
   8bcda:	dd19      	ble.n	8bd10 <_vfiprintf_r+0x9b4>
   8bcdc:	1c4b      	adds	r3, r1, #1
   8bcde:	3210      	adds	r2, #16
   8bce0:	2b07      	cmp	r3, #7
   8bce2:	e9c9 7500 	strd	r7, r5, [r9]
   8bce6:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   8bcea:	ddf0      	ble.n	8bcce <_vfiprintf_r+0x972>
   8bcec:	b332      	cbz	r2, 8bd3c <_vfiprintf_r+0x9e0>
   8bcee:	4659      	mov	r1, fp
   8bcf0:	4630      	mov	r0, r6
   8bcf2:	aa10      	add	r2, sp, #64	; 0x40
   8bcf4:	f7ff faf6 	bl	8b2e4 <__sprint_r.part.0>
   8bcf8:	2800      	cmp	r0, #0
   8bcfa:	f47f acb8 	bne.w	8b66e <_vfiprintf_r+0x312>
   8bcfe:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8bd02:	3c10      	subs	r4, #16
   8bd04:	2c10      	cmp	r4, #16
   8bd06:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8bd0a:	f101 0001 	add.w	r0, r1, #1
   8bd0e:	dce5      	bgt.n	8bcdc <_vfiprintf_r+0x980>
   8bd10:	463b      	mov	r3, r7
   8bd12:	4657      	mov	r7, sl
   8bd14:	469a      	mov	sl, r3
   8bd16:	4422      	add	r2, r4
   8bd18:	2807      	cmp	r0, #7
   8bd1a:	e9c9 a400 	strd	sl, r4, [r9]
   8bd1e:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8bd22:	f77f ad3c 	ble.w	8b79e <_vfiprintf_r+0x442>
   8bd26:	b172      	cbz	r2, 8bd46 <_vfiprintf_r+0x9ea>
   8bd28:	9902      	ldr	r1, [sp, #8]
   8bd2a:	9806      	ldr	r0, [sp, #24]
   8bd2c:	aa10      	add	r2, sp, #64	; 0x40
   8bd2e:	f7ff fad9 	bl	8b2e4 <__sprint_r.part.0>
   8bd32:	2800      	cmp	r0, #0
   8bd34:	f47f ac9b 	bne.w	8b66e <_vfiprintf_r+0x312>
   8bd38:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8bd3a:	e530      	b.n	8b79e <_vfiprintf_r+0x442>
   8bd3c:	2001      	movs	r0, #1
   8bd3e:	4611      	mov	r1, r2
   8bd40:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8bd44:	e7c7      	b.n	8bcd6 <_vfiprintf_r+0x97a>
   8bd46:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   8bd4a:	4542      	cmp	r2, r8
   8bd4c:	bfac      	ite	ge
   8bd4e:	189b      	addge	r3, r3, r2
   8bd50:	4443      	addlt	r3, r8
   8bd52:	9304      	str	r3, [sp, #16]
   8bd54:	e52d      	b.n	8b7b2 <_vfiprintf_r+0x456>
   8bd56:	2a00      	cmp	r2, #0
   8bd58:	f43f ae60 	beq.w	8ba1c <_vfiprintf_r+0x6c0>
   8bd5c:	9902      	ldr	r1, [sp, #8]
   8bd5e:	9806      	ldr	r0, [sp, #24]
   8bd60:	aa10      	add	r2, sp, #64	; 0x40
   8bd62:	f7ff fabf 	bl	8b2e4 <__sprint_r.part.0>
   8bd66:	2800      	cmp	r0, #0
   8bd68:	f47f ac81 	bne.w	8b66e <_vfiprintf_r+0x312>
   8bd6c:	9811      	ldr	r0, [sp, #68]	; 0x44
   8bd6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8bd70:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8bd74:	3001      	adds	r0, #1
   8bd76:	e4f1      	b.n	8b75c <_vfiprintf_r+0x400>
   8bd78:	9b07      	ldr	r3, [sp, #28]
   8bd7a:	2b00      	cmp	r3, #0
   8bd7c:	d169      	bne.n	8be52 <_vfiprintf_r+0xaf6>
   8bd7e:	2001      	movs	r0, #1
   8bd80:	4611      	mov	r1, r2
   8bd82:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8bd86:	e4df      	b.n	8b748 <_vfiprintf_r+0x3ec>
   8bd88:	9211      	str	r2, [sp, #68]	; 0x44
   8bd8a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8bd8e:	e458      	b.n	8b642 <_vfiprintf_r+0x2e6>
   8bd90:	f1bb 0f00 	cmp.w	fp, #0
   8bd94:	f47f abdc 	bne.w	8b550 <_vfiprintf_r+0x1f4>
   8bd98:	4655      	mov	r5, sl
   8bd9a:	f04f 0b00 	mov.w	fp, #0
   8bd9e:	ac3c      	add	r4, sp, #240	; 0xf0
   8bda0:	f8cd b004 	str.w	fp, [sp, #4]
   8bda4:	f7ff bbdc 	b.w	8b560 <_vfiprintf_r+0x204>
   8bda8:	f01a 0310 	ands.w	r3, sl, #16
   8bdac:	d140      	bne.n	8be30 <_vfiprintf_r+0xad4>
   8bdae:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
   8bdb2:	d039      	beq.n	8be28 <_vfiprintf_r+0xacc>
   8bdb4:	9e05      	ldr	r6, [sp, #20]
   8bdb6:	4698      	mov	r8, r3
   8bdb8:	f856 2b04 	ldr.w	r2, [r6], #4
   8bdbc:	2301      	movs	r3, #1
   8bdbe:	9605      	str	r6, [sp, #20]
   8bdc0:	b296      	uxth	r6, r2
   8bdc2:	e410      	b.n	8b5e6 <_vfiprintf_r+0x28a>
   8bdc4:	232d      	movs	r3, #45	; 0x2d
   8bdc6:	4276      	negs	r6, r6
   8bdc8:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8bdcc:	46aa      	mov	sl, r5
   8bdce:	f04f 0301 	mov.w	r3, #1
   8bdd2:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
   8bdd6:	e40a      	b.n	8b5ee <_vfiprintf_r+0x292>
   8bdd8:	2a00      	cmp	r2, #0
   8bdda:	d06f      	beq.n	8bebc <_vfiprintf_r+0xb60>
   8bddc:	9902      	ldr	r1, [sp, #8]
   8bdde:	9806      	ldr	r0, [sp, #24]
   8bde0:	aa10      	add	r2, sp, #64	; 0x40
   8bde2:	f7ff fa7f 	bl	8b2e4 <__sprint_r.part.0>
   8bde6:	2800      	cmp	r0, #0
   8bde8:	f47f ac41 	bne.w	8b66e <_vfiprintf_r+0x312>
   8bdec:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8bdf0:	e478      	b.n	8b6e4 <_vfiprintf_r+0x388>
   8bdf2:	ac3c      	add	r4, sp, #240	; 0xf0
   8bdf4:	f7ff bbb4 	b.w	8b560 <_vfiprintf_r+0x204>
   8bdf8:	4601      	mov	r1, r0
   8bdfa:	f109 0908 	add.w	r9, r9, #8
   8bdfe:	3001      	adds	r0, #1
   8be00:	e4a6      	b.n	8b750 <_vfiprintf_r+0x3f4>
   8be02:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   8be06:	f040 811d 	bne.w	8c044 <_vfiprintf_r+0xce8>
   8be0a:	9b05      	ldr	r3, [sp, #20]
   8be0c:	f853 6b04 	ldr.w	r6, [r3], #4
   8be10:	9305      	str	r3, [sp, #20]
   8be12:	f7ff bbe5 	b.w	8b5e0 <_vfiprintf_r+0x284>
   8be16:	05aa      	lsls	r2, r5, #22
   8be18:	f100 810e 	bmi.w	8c038 <_vfiprintf_r+0xcdc>
   8be1c:	ea4f 78e3 	mov.w	r8, r3, asr #31
   8be20:	461e      	mov	r6, r3
   8be22:	4643      	mov	r3, r8
   8be24:	f7ff bb82 	b.w	8b52c <_vfiprintf_r+0x1d0>
   8be28:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
   8be2c:	f040 80fb 	bne.w	8c026 <_vfiprintf_r+0xcca>
   8be30:	9a05      	ldr	r2, [sp, #20]
   8be32:	2301      	movs	r3, #1
   8be34:	f852 6b04 	ldr.w	r6, [r2], #4
   8be38:	9205      	str	r2, [sp, #20]
   8be3a:	f7ff bbd4 	b.w	8b5e6 <_vfiprintf_r+0x28a>
   8be3e:	e9dd 1604 	ldrd	r1, r6, [sp, #16]
   8be42:	f856 2b04 	ldr.w	r2, [r6], #4
   8be46:	17cb      	asrs	r3, r1, #31
   8be48:	e9c2 1300 	strd	r1, r3, [r2]
   8be4c:	9605      	str	r6, [sp, #20]
   8be4e:	f7ff babe 	b.w	8b3ce <_vfiprintf_r+0x72>
   8be52:	2202      	movs	r2, #2
   8be54:	ab0f      	add	r3, sp, #60	; 0x3c
   8be56:	9313      	str	r3, [sp, #76]	; 0x4c
   8be58:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8be5c:	9214      	str	r2, [sp, #80]	; 0x50
   8be5e:	e6c7      	b.n	8bbf0 <_vfiprintf_r+0x894>
   8be60:	4a25      	ldr	r2, [pc, #148]	; (8bef8 <_vfiprintf_r+0xb9c>)
   8be62:	9209      	str	r2, [sp, #36]	; 0x24
   8be64:	f015 0820 	ands.w	r8, r5, #32
   8be68:	d036      	beq.n	8bed8 <_vfiprintf_r+0xb7c>
   8be6a:	9e05      	ldr	r6, [sp, #20]
   8be6c:	3607      	adds	r6, #7
   8be6e:	f026 0607 	bic.w	r6, r6, #7
   8be72:	4632      	mov	r2, r6
   8be74:	f8d6 8004 	ldr.w	r8, [r6, #4]
   8be78:	f852 6b08 	ldr.w	r6, [r2], #8
   8be7c:	9205      	str	r2, [sp, #20]
   8be7e:	07ea      	lsls	r2, r5, #31
   8be80:	d509      	bpl.n	8be96 <_vfiprintf_r+0xb3a>
   8be82:	ea56 0208 	orrs.w	r2, r6, r8
   8be86:	d006      	beq.n	8be96 <_vfiprintf_r+0xb3a>
   8be88:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   8be8c:	2330      	movs	r3, #48	; 0x30
   8be8e:	f045 0502 	orr.w	r5, r5, #2
   8be92:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   8be96:	2302      	movs	r3, #2
   8be98:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   8be9c:	f7ff bba3 	b.w	8b5e6 <_vfiprintf_r+0x28a>
   8bea0:	46aa      	mov	sl, r5
   8bea2:	e4ff      	b.n	8b8a4 <_vfiprintf_r+0x548>
   8bea4:	4a15      	ldr	r2, [pc, #84]	; (8befc <_vfiprintf_r+0xba0>)
   8bea6:	9209      	str	r2, [sp, #36]	; 0x24
   8bea8:	e7dc      	b.n	8be64 <_vfiprintf_r+0xb08>
   8beaa:	4620      	mov	r0, r4
   8beac:	9605      	str	r6, [sp, #20]
   8beae:	f7fb f839 	bl	86f24 <strlen>
   8beb2:	f04f 0b00 	mov.w	fp, #0
   8beb6:	9001      	str	r0, [sp, #4]
   8beb8:	f7ff bb52 	b.w	8b560 <_vfiprintf_r+0x204>
   8bebc:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   8bec0:	2900      	cmp	r1, #0
   8bec2:	f000 80a6 	beq.w	8c012 <_vfiprintf_r+0xcb6>
   8bec6:	2001      	movs	r0, #1
   8bec8:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
   8becc:	9213      	str	r2, [sp, #76]	; 0x4c
   8bece:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8bed2:	4602      	mov	r2, r0
   8bed4:	9014      	str	r0, [sp, #80]	; 0x50
   8bed6:	e416      	b.n	8b706 <_vfiprintf_r+0x3aa>
   8bed8:	f015 0210 	ands.w	r2, r5, #16
   8bedc:	d114      	bne.n	8bf08 <_vfiprintf_r+0xbac>
   8bede:	f015 0140 	ands.w	r1, r5, #64	; 0x40
   8bee2:	d00d      	beq.n	8bf00 <_vfiprintf_r+0xba4>
   8bee4:	9e05      	ldr	r6, [sp, #20]
   8bee6:	4690      	mov	r8, r2
   8bee8:	f856 2b04 	ldr.w	r2, [r6], #4
   8beec:	9605      	str	r6, [sp, #20]
   8beee:	b296      	uxth	r6, r2
   8bef0:	e7c5      	b.n	8be7e <_vfiprintf_r+0xb22>
   8bef2:	bf00      	nop
   8bef4:	0008dd84 	.word	0x0008dd84
   8bef8:	0008dad0 	.word	0x0008dad0
   8befc:	0008dabc 	.word	0x0008dabc
   8bf00:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   8bf04:	f040 80a6 	bne.w	8c054 <_vfiprintf_r+0xcf8>
   8bf08:	9a05      	ldr	r2, [sp, #20]
   8bf0a:	f852 6b04 	ldr.w	r6, [r2], #4
   8bf0e:	9205      	str	r2, [sp, #20]
   8bf10:	e7b5      	b.n	8be7e <_vfiprintf_r+0xb22>
   8bf12:	2300      	movs	r3, #0
   8bf14:	f40a 6280 	and.w	r2, sl, #1024	; 0x400
   8bf18:	f8cd b004 	str.w	fp, [sp, #4]
   8bf1c:	f8cd a01c 	str.w	sl, [sp, #28]
   8bf20:	46bb      	mov	fp, r7
   8bf22:	f8cd 9020 	str.w	r9, [sp, #32]
   8bf26:	469a      	mov	sl, r3
   8bf28:	4617      	mov	r7, r2
   8bf2a:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8bf2e:	ad3c      	add	r5, sp, #240	; 0xf0
   8bf30:	e00c      	b.n	8bf4c <_vfiprintf_r+0xbf0>
   8bf32:	2300      	movs	r3, #0
   8bf34:	4630      	mov	r0, r6
   8bf36:	4641      	mov	r1, r8
   8bf38:	220a      	movs	r2, #10
   8bf3a:	f001 fbf9 	bl	8d730 <__aeabi_uldivmod>
   8bf3e:	2e0a      	cmp	r6, #10
   8bf40:	f178 0300 	sbcs.w	r3, r8, #0
   8bf44:	d31b      	bcc.n	8bf7e <_vfiprintf_r+0xc22>
   8bf46:	4606      	mov	r6, r0
   8bf48:	4688      	mov	r8, r1
   8bf4a:	4625      	mov	r5, r4
   8bf4c:	4630      	mov	r0, r6
   8bf4e:	4641      	mov	r1, r8
   8bf50:	220a      	movs	r2, #10
   8bf52:	2300      	movs	r3, #0
   8bf54:	f001 fbec 	bl	8d730 <__aeabi_uldivmod>
   8bf58:	3230      	adds	r2, #48	; 0x30
   8bf5a:	1e6c      	subs	r4, r5, #1
   8bf5c:	f10a 0a01 	add.w	sl, sl, #1
   8bf60:	f805 2c01 	strb.w	r2, [r5, #-1]
   8bf64:	2f00      	cmp	r7, #0
   8bf66:	d0e4      	beq.n	8bf32 <_vfiprintf_r+0xbd6>
   8bf68:	f899 3000 	ldrb.w	r3, [r9]
   8bf6c:	4553      	cmp	r3, sl
   8bf6e:	d1e0      	bne.n	8bf32 <_vfiprintf_r+0xbd6>
   8bf70:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   8bf74:	d0dd      	beq.n	8bf32 <_vfiprintf_r+0xbd6>
   8bf76:	2e0a      	cmp	r6, #10
   8bf78:	f178 0300 	sbcs.w	r3, r8, #0
   8bf7c:	d22e      	bcs.n	8bfdc <_vfiprintf_r+0xc80>
   8bf7e:	f8dd a01c 	ldr.w	sl, [sp, #28]
   8bf82:	ab3c      	add	r3, sp, #240	; 0xf0
   8bf84:	1b1b      	subs	r3, r3, r4
   8bf86:	465f      	mov	r7, fp
   8bf88:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   8bf8c:	f8dd b004 	ldr.w	fp, [sp, #4]
   8bf90:	4655      	mov	r5, sl
   8bf92:	f8dd 9020 	ldr.w	r9, [sp, #32]
   8bf96:	9301      	str	r3, [sp, #4]
   8bf98:	f7ff bae2 	b.w	8b560 <_vfiprintf_r+0x204>
   8bf9c:	46aa      	mov	sl, r5
   8bf9e:	f7ff bad2 	b.w	8b546 <_vfiprintf_r+0x1ea>
   8bfa2:	2b01      	cmp	r3, #1
   8bfa4:	46aa      	mov	sl, r5
   8bfa6:	f47f ad06 	bne.w	8b9b6 <_vfiprintf_r+0x65a>
   8bfaa:	f7ff bad1 	b.w	8b550 <_vfiprintf_r+0x1f4>
   8bfae:	9e05      	ldr	r6, [sp, #20]
   8bfb0:	9a04      	ldr	r2, [sp, #16]
   8bfb2:	f856 3b04 	ldr.w	r3, [r6], #4
   8bfb6:	601a      	str	r2, [r3, #0]
   8bfb8:	9605      	str	r6, [sp, #20]
   8bfba:	f7ff ba08 	b.w	8b3ce <_vfiprintf_r+0x72>
   8bfbe:	f1bb 0f06 	cmp.w	fp, #6
   8bfc2:	46d8      	mov	r8, fp
   8bfc4:	bf28      	it	cs
   8bfc6:	f04f 0806 	movcs.w	r8, #6
   8bfca:	4c47      	ldr	r4, [pc, #284]	; (8c0e8 <_vfiprintf_r+0xd8c>)
   8bfcc:	f8cd 8004 	str.w	r8, [sp, #4]
   8bfd0:	9605      	str	r6, [sp, #20]
   8bfd2:	f7ff bb75 	b.w	8b6c0 <_vfiprintf_r+0x364>
   8bfd6:	f8df a114 	ldr.w	sl, [pc, #276]	; 8c0ec <_vfiprintf_r+0xd90>
   8bfda:	e5c9      	b.n	8bb70 <_vfiprintf_r+0x814>
   8bfdc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8bfde:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8bfe0:	1ae4      	subs	r4, r4, r3
   8bfe2:	461a      	mov	r2, r3
   8bfe4:	4620      	mov	r0, r4
   8bfe6:	f7fa ffcb 	bl	86f80 <strncpy>
   8bfea:	f899 3001 	ldrb.w	r3, [r9, #1]
   8bfee:	b10b      	cbz	r3, 8bff4 <_vfiprintf_r+0xc98>
   8bff0:	f109 0901 	add.w	r9, r9, #1
   8bff4:	4630      	mov	r0, r6
   8bff6:	4641      	mov	r1, r8
   8bff8:	220a      	movs	r2, #10
   8bffa:	2300      	movs	r3, #0
   8bffc:	f04f 0a00 	mov.w	sl, #0
   8c000:	f001 fb96 	bl	8d730 <__aeabi_uldivmod>
   8c004:	e79f      	b.n	8bf46 <_vfiprintf_r+0xbea>
   8c006:	2001      	movs	r0, #1
   8c008:	4611      	mov	r1, r2
   8c00a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8c00e:	f7ff bb9f 	b.w	8b750 <_vfiprintf_r+0x3f4>
   8c012:	9b07      	ldr	r3, [sp, #28]
   8c014:	2b00      	cmp	r3, #0
   8c016:	f47f ade3 	bne.w	8bbe0 <_vfiprintf_r+0x884>
   8c01a:	4611      	mov	r1, r2
   8c01c:	2001      	movs	r0, #1
   8c01e:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8c022:	f7ff bb95 	b.w	8b750 <_vfiprintf_r+0x3f4>
   8c026:	9e05      	ldr	r6, [sp, #20]
   8c028:	4690      	mov	r8, r2
   8c02a:	f856 2b04 	ldr.w	r2, [r6], #4
   8c02e:	2301      	movs	r3, #1
   8c030:	9605      	str	r6, [sp, #20]
   8c032:	b2d6      	uxtb	r6, r2
   8c034:	f7ff bad7 	b.w	8b5e6 <_vfiprintf_r+0x28a>
   8c038:	f343 18c0 	sbfx	r8, r3, #7, #1
   8c03c:	b25e      	sxtb	r6, r3
   8c03e:	4643      	mov	r3, r8
   8c040:	f7ff ba74 	b.w	8b52c <_vfiprintf_r+0x1d0>
   8c044:	9e05      	ldr	r6, [sp, #20]
   8c046:	4690      	mov	r8, r2
   8c048:	f856 3b04 	ldr.w	r3, [r6], #4
   8c04c:	9605      	str	r6, [sp, #20]
   8c04e:	b2de      	uxtb	r6, r3
   8c050:	f7ff bac6 	b.w	8b5e0 <_vfiprintf_r+0x284>
   8c054:	9e05      	ldr	r6, [sp, #20]
   8c056:	4688      	mov	r8, r1
   8c058:	f856 2b04 	ldr.w	r2, [r6], #4
   8c05c:	9605      	str	r6, [sp, #20]
   8c05e:	b2d6      	uxtb	r6, r2
   8c060:	e70d      	b.n	8be7e <_vfiprintf_r+0xb22>
   8c062:	9e05      	ldr	r6, [sp, #20]
   8c064:	9a04      	ldr	r2, [sp, #16]
   8c066:	f856 3b04 	ldr.w	r3, [r6], #4
   8c06a:	801a      	strh	r2, [r3, #0]
   8c06c:	9605      	str	r6, [sp, #20]
   8c06e:	f7ff b9ae 	b.w	8b3ce <_vfiprintf_r+0x72>
   8c072:	6d88      	ldr	r0, [r1, #88]	; 0x58
   8c074:	f7fd fe86 	bl	89d84 <__retarget_lock_release_recursive>
   8c078:	f7ff ba99 	b.w	8b5ae <_vfiprintf_r+0x252>
   8c07c:	f8cd b004 	str.w	fp, [sp, #4]
   8c080:	9605      	str	r6, [sp, #20]
   8c082:	4683      	mov	fp, r0
   8c084:	f7ff ba6c 	b.w	8b560 <_vfiprintf_r+0x204>
   8c088:	9911      	ldr	r1, [sp, #68]	; 0x44
   8c08a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8c08c:	f8df a060 	ldr.w	sl, [pc, #96]	; 8c0f0 <_vfiprintf_r+0xd94>
   8c090:	3101      	adds	r1, #1
   8c092:	e5f0      	b.n	8bc76 <_vfiprintf_r+0x91a>
   8c094:	9902      	ldr	r1, [sp, #8]
   8c096:	9806      	ldr	r0, [sp, #24]
   8c098:	aa10      	add	r2, sp, #64	; 0x40
   8c09a:	f7ff f923 	bl	8b2e4 <__sprint_r.part.0>
   8c09e:	2800      	cmp	r0, #0
   8c0a0:	f43f aae3 	beq.w	8b66a <_vfiprintf_r+0x30e>
   8c0a4:	f7ff bae3 	b.w	8b66e <_vfiprintf_r+0x312>
   8c0a8:	9811      	ldr	r0, [sp, #68]	; 0x44
   8c0aa:	f8df a044 	ldr.w	sl, [pc, #68]	; 8c0f0 <_vfiprintf_r+0xd94>
   8c0ae:	3001      	adds	r0, #1
   8c0b0:	e631      	b.n	8bd16 <_vfiprintf_r+0x9ba>
   8c0b2:	9b02      	ldr	r3, [sp, #8]
   8c0b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   8c0b6:	07db      	lsls	r3, r3, #31
   8c0b8:	d407      	bmi.n	8c0ca <_vfiprintf_r+0xd6e>
   8c0ba:	9b02      	ldr	r3, [sp, #8]
   8c0bc:	899b      	ldrh	r3, [r3, #12]
   8c0be:	059f      	lsls	r7, r3, #22
   8c0c0:	d403      	bmi.n	8c0ca <_vfiprintf_r+0xd6e>
   8c0c2:	9b02      	ldr	r3, [sp, #8]
   8c0c4:	6d98      	ldr	r0, [r3, #88]	; 0x58
   8c0c6:	f7fd fe5d 	bl	89d84 <__retarget_lock_release_recursive>
   8c0ca:	f04f 33ff 	mov.w	r3, #4294967295
   8c0ce:	9304      	str	r3, [sp, #16]
   8c0d0:	f7ff bad6 	b.w	8b680 <_vfiprintf_r+0x324>
   8c0d4:	9a05      	ldr	r2, [sp, #20]
   8c0d6:	787b      	ldrb	r3, [r7, #1]
   8c0d8:	460f      	mov	r7, r1
   8c0da:	f852 1b04 	ldr.w	r1, [r2], #4
   8c0de:	9205      	str	r2, [sp, #20]
   8c0e0:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
   8c0e4:	f7ff b993 	b.w	8b40e <_vfiprintf_r+0xb2>
   8c0e8:	0008dae4 	.word	0x0008dae4
   8c0ec:	0008dd94 	.word	0x0008dd94
   8c0f0:	0008dd84 	.word	0x0008dd84

0008c0f4 <__sbprintf>:
   8c0f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   8c0f6:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   8c0fa:	4615      	mov	r5, r2
   8c0fc:	2400      	movs	r4, #0
   8c0fe:	4606      	mov	r6, r0
   8c100:	461f      	mov	r7, r3
   8c102:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   8c106:	ab1a      	add	r3, sp, #104	; 0x68
   8c108:	9300      	str	r3, [sp, #0]
   8c10a:	9304      	str	r3, [sp, #16]
   8c10c:	898b      	ldrh	r3, [r1, #12]
   8c10e:	a816      	add	r0, sp, #88	; 0x58
   8c110:	f023 0302 	bic.w	r3, r3, #2
   8c114:	f8ad 300c 	strh.w	r3, [sp, #12]
   8c118:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8c11a:	9406      	str	r4, [sp, #24]
   8c11c:	9319      	str	r3, [sp, #100]	; 0x64
   8c11e:	89cb      	ldrh	r3, [r1, #14]
   8c120:	460c      	mov	r4, r1
   8c122:	f8ad 300e 	strh.w	r3, [sp, #14]
   8c126:	69cb      	ldr	r3, [r1, #28]
   8c128:	f8cd c008 	str.w	ip, [sp, #8]
   8c12c:	9307      	str	r3, [sp, #28]
   8c12e:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8c130:	f8cd c014 	str.w	ip, [sp, #20]
   8c134:	9309      	str	r3, [sp, #36]	; 0x24
   8c136:	f7fd fe1f 	bl	89d78 <__retarget_lock_init_recursive>
   8c13a:	462a      	mov	r2, r5
   8c13c:	463b      	mov	r3, r7
   8c13e:	4669      	mov	r1, sp
   8c140:	4630      	mov	r0, r6
   8c142:	f7ff f90b 	bl	8b35c <_vfiprintf_r>
   8c146:	1e05      	subs	r5, r0, #0
   8c148:	db07      	blt.n	8c15a <__sbprintf+0x66>
   8c14a:	4669      	mov	r1, sp
   8c14c:	4630      	mov	r0, r6
   8c14e:	f000 f925 	bl	8c39c <_fflush_r>
   8c152:	2800      	cmp	r0, #0
   8c154:	bf18      	it	ne
   8c156:	f04f 35ff 	movne.w	r5, #4294967295
   8c15a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8c15e:	065b      	lsls	r3, r3, #25
   8c160:	d503      	bpl.n	8c16a <__sbprintf+0x76>
   8c162:	89a3      	ldrh	r3, [r4, #12]
   8c164:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8c168:	81a3      	strh	r3, [r4, #12]
   8c16a:	9816      	ldr	r0, [sp, #88]	; 0x58
   8c16c:	f7fd fe06 	bl	89d7c <__retarget_lock_close_recursive>
   8c170:	4628      	mov	r0, r5
   8c172:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   8c176:	bdf0      	pop	{r4, r5, r6, r7, pc}

0008c178 <__ascii_wctomb>:
   8c178:	4603      	mov	r3, r0
   8c17a:	b149      	cbz	r1, 8c190 <__ascii_wctomb+0x18>
   8c17c:	2aff      	cmp	r2, #255	; 0xff
   8c17e:	d802      	bhi.n	8c186 <__ascii_wctomb+0xe>
   8c180:	2001      	movs	r0, #1
   8c182:	700a      	strb	r2, [r1, #0]
   8c184:	4770      	bx	lr
   8c186:	228a      	movs	r2, #138	; 0x8a
   8c188:	f04f 30ff 	mov.w	r0, #4294967295
   8c18c:	601a      	str	r2, [r3, #0]
   8c18e:	4770      	bx	lr
   8c190:	4608      	mov	r0, r1
   8c192:	4770      	bx	lr

0008c194 <__swsetup_r>:
   8c194:	b538      	push	{r3, r4, r5, lr}
   8c196:	4b33      	ldr	r3, [pc, #204]	; (8c264 <__swsetup_r+0xd0>)
   8c198:	4605      	mov	r5, r0
   8c19a:	681b      	ldr	r3, [r3, #0]
   8c19c:	460c      	mov	r4, r1
   8c19e:	b10b      	cbz	r3, 8c1a4 <__swsetup_r+0x10>
   8c1a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   8c1a2:	b312      	cbz	r2, 8c1ea <__swsetup_r+0x56>
   8c1a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c1a8:	0718      	lsls	r0, r3, #28
   8c1aa:	b29a      	uxth	r2, r3
   8c1ac:	d525      	bpl.n	8c1fa <__swsetup_r+0x66>
   8c1ae:	6921      	ldr	r1, [r4, #16]
   8c1b0:	2900      	cmp	r1, #0
   8c1b2:	d02d      	beq.n	8c210 <__swsetup_r+0x7c>
   8c1b4:	f012 0001 	ands.w	r0, r2, #1
   8c1b8:	d007      	beq.n	8c1ca <__swsetup_r+0x36>
   8c1ba:	2500      	movs	r5, #0
   8c1bc:	6960      	ldr	r0, [r4, #20]
   8c1be:	60a5      	str	r5, [r4, #8]
   8c1c0:	4240      	negs	r0, r0
   8c1c2:	61a0      	str	r0, [r4, #24]
   8c1c4:	b139      	cbz	r1, 8c1d6 <__swsetup_r+0x42>
   8c1c6:	2000      	movs	r0, #0
   8c1c8:	bd38      	pop	{r3, r4, r5, pc}
   8c1ca:	0795      	lsls	r5, r2, #30
   8c1cc:	bf58      	it	pl
   8c1ce:	6960      	ldrpl	r0, [r4, #20]
   8c1d0:	60a0      	str	r0, [r4, #8]
   8c1d2:	2900      	cmp	r1, #0
   8c1d4:	d1f7      	bne.n	8c1c6 <__swsetup_r+0x32>
   8c1d6:	0612      	lsls	r2, r2, #24
   8c1d8:	bf58      	it	pl
   8c1da:	4608      	movpl	r0, r1
   8c1dc:	d5f4      	bpl.n	8c1c8 <__swsetup_r+0x34>
   8c1de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8c1e2:	f04f 30ff 	mov.w	r0, #4294967295
   8c1e6:	81a3      	strh	r3, [r4, #12]
   8c1e8:	bd38      	pop	{r3, r4, r5, pc}
   8c1ea:	4618      	mov	r0, r3
   8c1ec:	f000 f90a 	bl	8c404 <__sinit>
   8c1f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c1f4:	0718      	lsls	r0, r3, #28
   8c1f6:	b29a      	uxth	r2, r3
   8c1f8:	d4d9      	bmi.n	8c1ae <__swsetup_r+0x1a>
   8c1fa:	06d1      	lsls	r1, r2, #27
   8c1fc:	d52a      	bpl.n	8c254 <__swsetup_r+0xc0>
   8c1fe:	0752      	lsls	r2, r2, #29
   8c200:	d414      	bmi.n	8c22c <__swsetup_r+0x98>
   8c202:	6921      	ldr	r1, [r4, #16]
   8c204:	f043 0308 	orr.w	r3, r3, #8
   8c208:	81a3      	strh	r3, [r4, #12]
   8c20a:	b29a      	uxth	r2, r3
   8c20c:	2900      	cmp	r1, #0
   8c20e:	d1d1      	bne.n	8c1b4 <__swsetup_r+0x20>
   8c210:	f402 7020 	and.w	r0, r2, #640	; 0x280
   8c214:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8c218:	d0cc      	beq.n	8c1b4 <__swsetup_r+0x20>
   8c21a:	4621      	mov	r1, r4
   8c21c:	4628      	mov	r0, r5
   8c21e:	f000 fba3 	bl	8c968 <__smakebuf_r>
   8c222:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c226:	6921      	ldr	r1, [r4, #16]
   8c228:	b29a      	uxth	r2, r3
   8c22a:	e7c3      	b.n	8c1b4 <__swsetup_r+0x20>
   8c22c:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8c22e:	b151      	cbz	r1, 8c246 <__swsetup_r+0xb2>
   8c230:	f104 0240 	add.w	r2, r4, #64	; 0x40
   8c234:	4291      	cmp	r1, r2
   8c236:	d004      	beq.n	8c242 <__swsetup_r+0xae>
   8c238:	4628      	mov	r0, r5
   8c23a:	f7fd fc99 	bl	89b70 <_free_r>
   8c23e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c242:	2200      	movs	r2, #0
   8c244:	6322      	str	r2, [r4, #48]	; 0x30
   8c246:	2200      	movs	r2, #0
   8c248:	6921      	ldr	r1, [r4, #16]
   8c24a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   8c24e:	e9c4 1200 	strd	r1, r2, [r4]
   8c252:	e7d7      	b.n	8c204 <__swsetup_r+0x70>
   8c254:	2209      	movs	r2, #9
   8c256:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8c25a:	602a      	str	r2, [r5, #0]
   8c25c:	f04f 30ff 	mov.w	r0, #4294967295
   8c260:	81a3      	strh	r3, [r4, #12]
   8c262:	bd38      	pop	{r3, r4, r5, pc}
   8c264:	20070ccc 	.word	0x20070ccc

0008c268 <abort>:
   8c268:	2006      	movs	r0, #6
   8c26a:	b508      	push	{r3, lr}
   8c26c:	f000 fbec 	bl	8ca48 <raise>
   8c270:	2001      	movs	r0, #1
   8c272:	f7f8 fc7d 	bl	84b70 <_exit>
   8c276:	bf00      	nop

0008c278 <__sflush_r>:
   8c278:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8c27c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8c27e:	460c      	mov	r4, r1
   8c280:	0711      	lsls	r1, r2, #28
   8c282:	4607      	mov	r7, r0
   8c284:	d443      	bmi.n	8c30e <__sflush_r+0x96>
   8c286:	6863      	ldr	r3, [r4, #4]
   8c288:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8c28c:	2b00      	cmp	r3, #0
   8c28e:	81a2      	strh	r2, [r4, #12]
   8c290:	dd5b      	ble.n	8c34a <__sflush_r+0xd2>
   8c292:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   8c294:	2d00      	cmp	r5, #0
   8c296:	d056      	beq.n	8c346 <__sflush_r+0xce>
   8c298:	2300      	movs	r3, #0
   8c29a:	683e      	ldr	r6, [r7, #0]
   8c29c:	603b      	str	r3, [r7, #0]
   8c29e:	b293      	uxth	r3, r2
   8c2a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   8c2a4:	d155      	bne.n	8c352 <__sflush_r+0xda>
   8c2a6:	2301      	movs	r3, #1
   8c2a8:	4638      	mov	r0, r7
   8c2aa:	69e1      	ldr	r1, [r4, #28]
   8c2ac:	47a8      	blx	r5
   8c2ae:	1c42      	adds	r2, r0, #1
   8c2b0:	d065      	beq.n	8c37e <__sflush_r+0x106>
   8c2b2:	89a3      	ldrh	r3, [r4, #12]
   8c2b4:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   8c2b6:	075b      	lsls	r3, r3, #29
   8c2b8:	d505      	bpl.n	8c2c6 <__sflush_r+0x4e>
   8c2ba:	6863      	ldr	r3, [r4, #4]
   8c2bc:	1ac0      	subs	r0, r0, r3
   8c2be:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8c2c0:	b10b      	cbz	r3, 8c2c6 <__sflush_r+0x4e>
   8c2c2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8c2c4:	1ac0      	subs	r0, r0, r3
   8c2c6:	4602      	mov	r2, r0
   8c2c8:	69e1      	ldr	r1, [r4, #28]
   8c2ca:	2300      	movs	r3, #0
   8c2cc:	4638      	mov	r0, r7
   8c2ce:	47a8      	blx	r5
   8c2d0:	1c41      	adds	r1, r0, #1
   8c2d2:	d140      	bne.n	8c356 <__sflush_r+0xde>
   8c2d4:	683b      	ldr	r3, [r7, #0]
   8c2d6:	2b00      	cmp	r3, #0
   8c2d8:	d03d      	beq.n	8c356 <__sflush_r+0xde>
   8c2da:	2b1d      	cmp	r3, #29
   8c2dc:	d001      	beq.n	8c2e2 <__sflush_r+0x6a>
   8c2de:	2b16      	cmp	r3, #22
   8c2e0:	d154      	bne.n	8c38c <__sflush_r+0x114>
   8c2e2:	2200      	movs	r2, #0
   8c2e4:	89a3      	ldrh	r3, [r4, #12]
   8c2e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8c2ea:	81a3      	strh	r3, [r4, #12]
   8c2ec:	6923      	ldr	r3, [r4, #16]
   8c2ee:	e9c4 3200 	strd	r3, r2, [r4]
   8c2f2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8c2f4:	603e      	str	r6, [r7, #0]
   8c2f6:	b331      	cbz	r1, 8c346 <__sflush_r+0xce>
   8c2f8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8c2fc:	4299      	cmp	r1, r3
   8c2fe:	d002      	beq.n	8c306 <__sflush_r+0x8e>
   8c300:	4638      	mov	r0, r7
   8c302:	f7fd fc35 	bl	89b70 <_free_r>
   8c306:	2300      	movs	r3, #0
   8c308:	4618      	mov	r0, r3
   8c30a:	6323      	str	r3, [r4, #48]	; 0x30
   8c30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c30e:	6926      	ldr	r6, [r4, #16]
   8c310:	b1ce      	cbz	r6, 8c346 <__sflush_r+0xce>
   8c312:	b293      	uxth	r3, r2
   8c314:	079a      	lsls	r2, r3, #30
   8c316:	bf18      	it	ne
   8c318:	2300      	movne	r3, #0
   8c31a:	6825      	ldr	r5, [r4, #0]
   8c31c:	bf08      	it	eq
   8c31e:	6963      	ldreq	r3, [r4, #20]
   8c320:	6026      	str	r6, [r4, #0]
   8c322:	1bad      	subs	r5, r5, r6
   8c324:	60a3      	str	r3, [r4, #8]
   8c326:	e00c      	b.n	8c342 <__sflush_r+0xca>
   8c328:	462b      	mov	r3, r5
   8c32a:	4632      	mov	r2, r6
   8c32c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8c330:	4638      	mov	r0, r7
   8c332:	69e1      	ldr	r1, [r4, #28]
   8c334:	47e0      	blx	ip
   8c336:	f1b0 0c00 	subs.w	ip, r0, #0
   8c33a:	eba5 050c 	sub.w	r5, r5, ip
   8c33e:	4466      	add	r6, ip
   8c340:	dd16      	ble.n	8c370 <__sflush_r+0xf8>
   8c342:	2d00      	cmp	r5, #0
   8c344:	dcf0      	bgt.n	8c328 <__sflush_r+0xb0>
   8c346:	2000      	movs	r0, #0
   8c348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c34a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8c34c:	2b00      	cmp	r3, #0
   8c34e:	dca0      	bgt.n	8c292 <__sflush_r+0x1a>
   8c350:	e7f9      	b.n	8c346 <__sflush_r+0xce>
   8c352:	6d20      	ldr	r0, [r4, #80]	; 0x50
   8c354:	e7af      	b.n	8c2b6 <__sflush_r+0x3e>
   8c356:	2200      	movs	r2, #0
   8c358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c35c:	6062      	str	r2, [r4, #4]
   8c35e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8c362:	6922      	ldr	r2, [r4, #16]
   8c364:	81a3      	strh	r3, [r4, #12]
   8c366:	04db      	lsls	r3, r3, #19
   8c368:	6022      	str	r2, [r4, #0]
   8c36a:	d5c2      	bpl.n	8c2f2 <__sflush_r+0x7a>
   8c36c:	6520      	str	r0, [r4, #80]	; 0x50
   8c36e:	e7c0      	b.n	8c2f2 <__sflush_r+0x7a>
   8c370:	89a3      	ldrh	r3, [r4, #12]
   8c372:	f04f 30ff 	mov.w	r0, #4294967295
   8c376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8c37a:	81a3      	strh	r3, [r4, #12]
   8c37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c37e:	683b      	ldr	r3, [r7, #0]
   8c380:	2b00      	cmp	r3, #0
   8c382:	d096      	beq.n	8c2b2 <__sflush_r+0x3a>
   8c384:	2b1d      	cmp	r3, #29
   8c386:	d006      	beq.n	8c396 <__sflush_r+0x11e>
   8c388:	2b16      	cmp	r3, #22
   8c38a:	d004      	beq.n	8c396 <__sflush_r+0x11e>
   8c38c:	89a3      	ldrh	r3, [r4, #12]
   8c38e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8c392:	81a3      	strh	r3, [r4, #12]
   8c394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8c396:	2000      	movs	r0, #0
   8c398:	603e      	str	r6, [r7, #0]
   8c39a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0008c39c <_fflush_r>:
   8c39c:	b538      	push	{r3, r4, r5, lr}
   8c39e:	4605      	mov	r5, r0
   8c3a0:	460c      	mov	r4, r1
   8c3a2:	b108      	cbz	r0, 8c3a8 <_fflush_r+0xc>
   8c3a4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8c3a6:	b1a3      	cbz	r3, 8c3d2 <_fflush_r+0x36>
   8c3a8:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8c3ac:	b1b8      	cbz	r0, 8c3de <_fflush_r+0x42>
   8c3ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c3b0:	07db      	lsls	r3, r3, #31
   8c3b2:	d401      	bmi.n	8c3b8 <_fflush_r+0x1c>
   8c3b4:	0581      	lsls	r1, r0, #22
   8c3b6:	d515      	bpl.n	8c3e4 <_fflush_r+0x48>
   8c3b8:	4628      	mov	r0, r5
   8c3ba:	4621      	mov	r1, r4
   8c3bc:	f7ff ff5c 	bl	8c278 <__sflush_r>
   8c3c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c3c2:	4605      	mov	r5, r0
   8c3c4:	07da      	lsls	r2, r3, #31
   8c3c6:	d402      	bmi.n	8c3ce <_fflush_r+0x32>
   8c3c8:	89a3      	ldrh	r3, [r4, #12]
   8c3ca:	059b      	lsls	r3, r3, #22
   8c3cc:	d50e      	bpl.n	8c3ec <_fflush_r+0x50>
   8c3ce:	4628      	mov	r0, r5
   8c3d0:	bd38      	pop	{r3, r4, r5, pc}
   8c3d2:	f000 f817 	bl	8c404 <__sinit>
   8c3d6:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8c3da:	2800      	cmp	r0, #0
   8c3dc:	d1e7      	bne.n	8c3ae <_fflush_r+0x12>
   8c3de:	4605      	mov	r5, r0
   8c3e0:	4628      	mov	r0, r5
   8c3e2:	bd38      	pop	{r3, r4, r5, pc}
   8c3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c3e6:	f7fd fccb 	bl	89d80 <__retarget_lock_acquire_recursive>
   8c3ea:	e7e5      	b.n	8c3b8 <_fflush_r+0x1c>
   8c3ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c3ee:	f7fd fcc9 	bl	89d84 <__retarget_lock_release_recursive>
   8c3f2:	4628      	mov	r0, r5
   8c3f4:	bd38      	pop	{r3, r4, r5, pc}
   8c3f6:	bf00      	nop

0008c3f8 <_cleanup_r>:
   8c3f8:	4901      	ldr	r1, [pc, #4]	; (8c400 <_cleanup_r+0x8>)
   8c3fa:	f000 ba91 	b.w	8c920 <_fwalk_reent>
   8c3fe:	bf00      	nop
   8c400:	0008cc99 	.word	0x0008cc99

0008c404 <__sinit>:
   8c404:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8c408:	4682      	mov	sl, r0
   8c40a:	4839      	ldr	r0, [pc, #228]	; (8c4f0 <__sinit+0xec>)
   8c40c:	f7fd fcb8 	bl	89d80 <__retarget_lock_acquire_recursive>
   8c410:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
   8c414:	2c00      	cmp	r4, #0
   8c416:	d166      	bne.n	8c4e6 <__sinit+0xe2>
   8c418:	2304      	movs	r3, #4
   8c41a:	2203      	movs	r2, #3
   8c41c:	4935      	ldr	r1, [pc, #212]	; (8c4f4 <__sinit+0xf0>)
   8c41e:	f8da 5004 	ldr.w	r5, [sl, #4]
   8c422:	f8ca 103c 	str.w	r1, [sl, #60]	; 0x3c
   8c426:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8c4f8 <__sinit+0xf4>
   8c42a:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8c4fc <__sinit+0xf8>
   8c42e:	4f34      	ldr	r7, [pc, #208]	; (8c500 <__sinit+0xfc>)
   8c430:	4e34      	ldr	r6, [pc, #208]	; (8c504 <__sinit+0x100>)
   8c432:	f50a 713b 	add.w	r1, sl, #748	; 0x2ec
   8c436:	e9ca 21b9 	strd	r2, r1, [sl, #740]	; 0x2e4
   8c43a:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
   8c43e:	4621      	mov	r1, r4
   8c440:	60eb      	str	r3, [r5, #12]
   8c442:	2208      	movs	r2, #8
   8c444:	e9c5 4400 	strd	r4, r4, [r5]
   8c448:	e9c5 4404 	strd	r4, r4, [r5, #16]
   8c44c:	666c      	str	r4, [r5, #100]	; 0x64
   8c44e:	60ac      	str	r4, [r5, #8]
   8c450:	61ac      	str	r4, [r5, #24]
   8c452:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8c456:	f7fa fcf1 	bl	86e3c <memset>
   8c45a:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8c45e:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   8c462:	62ee      	str	r6, [r5, #44]	; 0x2c
   8c464:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8c468:	f7fd fc86 	bl	89d78 <__retarget_lock_init_recursive>
   8c46c:	f8da 5008 	ldr.w	r5, [sl, #8]
   8c470:	4b25      	ldr	r3, [pc, #148]	; (8c508 <__sinit+0x104>)
   8c472:	4621      	mov	r1, r4
   8c474:	60eb      	str	r3, [r5, #12]
   8c476:	2208      	movs	r2, #8
   8c478:	e9c5 4400 	strd	r4, r4, [r5]
   8c47c:	e9c5 4404 	strd	r4, r4, [r5, #16]
   8c480:	666c      	str	r4, [r5, #100]	; 0x64
   8c482:	60ac      	str	r4, [r5, #8]
   8c484:	61ac      	str	r4, [r5, #24]
   8c486:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8c48a:	f7fa fcd7 	bl	86e3c <memset>
   8c48e:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8c492:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   8c496:	62ee      	str	r6, [r5, #44]	; 0x2c
   8c498:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8c49c:	f7fd fc6c 	bl	89d78 <__retarget_lock_init_recursive>
   8c4a0:	f8da 500c 	ldr.w	r5, [sl, #12]
   8c4a4:	4b19      	ldr	r3, [pc, #100]	; (8c50c <__sinit+0x108>)
   8c4a6:	4621      	mov	r1, r4
   8c4a8:	60eb      	str	r3, [r5, #12]
   8c4aa:	2208      	movs	r2, #8
   8c4ac:	e9c5 4400 	strd	r4, r4, [r5]
   8c4b0:	e9c5 4404 	strd	r4, r4, [r5, #16]
   8c4b4:	666c      	str	r4, [r5, #100]	; 0x64
   8c4b6:	60ac      	str	r4, [r5, #8]
   8c4b8:	61ac      	str	r4, [r5, #24]
   8c4ba:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8c4be:	f7fa fcbd 	bl	86e3c <memset>
   8c4c2:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8c4c6:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8c4ca:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
   8c4ce:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
   8c4d2:	f7fd fc51 	bl	89d78 <__retarget_lock_init_recursive>
   8c4d6:	2301      	movs	r3, #1
   8c4d8:	4805      	ldr	r0, [pc, #20]	; (8c4f0 <__sinit+0xec>)
   8c4da:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
   8c4de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8c4e2:	f7fd bc4f 	b.w	89d84 <__retarget_lock_release_recursive>
   8c4e6:	4802      	ldr	r0, [pc, #8]	; (8c4f0 <__sinit+0xec>)
   8c4e8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8c4ec:	f7fd bc4a 	b.w	89d84 <__retarget_lock_release_recursive>
   8c4f0:	20073434 	.word	0x20073434
   8c4f4:	0008c3f9 	.word	0x0008c3f9
   8c4f8:	0008cad1 	.word	0x0008cad1
   8c4fc:	0008caf5 	.word	0x0008caf5
   8c500:	0008cb35 	.word	0x0008cb35
   8c504:	0008cb55 	.word	0x0008cb55
   8c508:	00010009 	.word	0x00010009
   8c50c:	00020012 	.word	0x00020012

0008c510 <__sfp_lock_acquire>:
   8c510:	4801      	ldr	r0, [pc, #4]	; (8c518 <__sfp_lock_acquire+0x8>)
   8c512:	f7fd bc35 	b.w	89d80 <__retarget_lock_acquire_recursive>
   8c516:	bf00      	nop
   8c518:	20073430 	.word	0x20073430

0008c51c <__sfp_lock_release>:
   8c51c:	4801      	ldr	r0, [pc, #4]	; (8c524 <__sfp_lock_release+0x8>)
   8c51e:	f7fd bc31 	b.w	89d84 <__retarget_lock_release_recursive>
   8c522:	bf00      	nop
   8c524:	20073430 	.word	0x20073430

0008c528 <__fputwc>:
   8c528:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8c52c:	b083      	sub	sp, #12
   8c52e:	4607      	mov	r7, r0
   8c530:	4688      	mov	r8, r1
   8c532:	4614      	mov	r4, r2
   8c534:	f7fe fc50 	bl	8add8 <__locale_mb_cur_max>
   8c538:	2801      	cmp	r0, #1
   8c53a:	d103      	bne.n	8c544 <__fputwc+0x1c>
   8c53c:	f108 33ff 	add.w	r3, r8, #4294967295
   8c540:	2bfe      	cmp	r3, #254	; 0xfe
   8c542:	d933      	bls.n	8c5ac <__fputwc+0x84>
   8c544:	4642      	mov	r2, r8
   8c546:	4638      	mov	r0, r7
   8c548:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8c54c:	a901      	add	r1, sp, #4
   8c54e:	f000 fb5d 	bl	8cc0c <_wcrtomb_r>
   8c552:	1c42      	adds	r2, r0, #1
   8c554:	4606      	mov	r6, r0
   8c556:	d02f      	beq.n	8c5b8 <__fputwc+0x90>
   8c558:	b318      	cbz	r0, 8c5a2 <__fputwc+0x7a>
   8c55a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8c55e:	2500      	movs	r5, #0
   8c560:	f10d 0905 	add.w	r9, sp, #5
   8c564:	e008      	b.n	8c578 <__fputwc+0x50>
   8c566:	6823      	ldr	r3, [r4, #0]
   8c568:	1c5a      	adds	r2, r3, #1
   8c56a:	6022      	str	r2, [r4, #0]
   8c56c:	7019      	strb	r1, [r3, #0]
   8c56e:	3501      	adds	r5, #1
   8c570:	42b5      	cmp	r5, r6
   8c572:	d216      	bcs.n	8c5a2 <__fputwc+0x7a>
   8c574:	f819 1b01 	ldrb.w	r1, [r9], #1
   8c578:	68a3      	ldr	r3, [r4, #8]
   8c57a:	3b01      	subs	r3, #1
   8c57c:	2b00      	cmp	r3, #0
   8c57e:	60a3      	str	r3, [r4, #8]
   8c580:	daf1      	bge.n	8c566 <__fputwc+0x3e>
   8c582:	69a2      	ldr	r2, [r4, #24]
   8c584:	4293      	cmp	r3, r2
   8c586:	db01      	blt.n	8c58c <__fputwc+0x64>
   8c588:	290a      	cmp	r1, #10
   8c58a:	d1ec      	bne.n	8c566 <__fputwc+0x3e>
   8c58c:	4622      	mov	r2, r4
   8c58e:	4638      	mov	r0, r7
   8c590:	f000 fae4 	bl	8cb5c <__swbuf_r>
   8c594:	1c43      	adds	r3, r0, #1
   8c596:	d1ea      	bne.n	8c56e <__fputwc+0x46>
   8c598:	4606      	mov	r6, r0
   8c59a:	4630      	mov	r0, r6
   8c59c:	b003      	add	sp, #12
   8c59e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8c5a2:	4646      	mov	r6, r8
   8c5a4:	4630      	mov	r0, r6
   8c5a6:	b003      	add	sp, #12
   8c5a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8c5ac:	fa5f f188 	uxtb.w	r1, r8
   8c5b0:	4606      	mov	r6, r0
   8c5b2:	f88d 1004 	strb.w	r1, [sp, #4]
   8c5b6:	e7d2      	b.n	8c55e <__fputwc+0x36>
   8c5b8:	4630      	mov	r0, r6
   8c5ba:	89a3      	ldrh	r3, [r4, #12]
   8c5bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8c5c0:	81a3      	strh	r3, [r4, #12]
   8c5c2:	b003      	add	sp, #12
   8c5c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008c5c8 <_fputwc_r>:
   8c5c8:	b530      	push	{r4, r5, lr}
   8c5ca:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8c5cc:	4614      	mov	r4, r2
   8c5ce:	f013 0f01 	tst.w	r3, #1
   8c5d2:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8c5d6:	4605      	mov	r5, r0
   8c5d8:	b083      	sub	sp, #12
   8c5da:	b29a      	uxth	r2, r3
   8c5dc:	d101      	bne.n	8c5e2 <_fputwc_r+0x1a>
   8c5de:	0598      	lsls	r0, r3, #22
   8c5e0:	d51c      	bpl.n	8c61c <_fputwc_r+0x54>
   8c5e2:	0490      	lsls	r0, r2, #18
   8c5e4:	d406      	bmi.n	8c5f4 <_fputwc_r+0x2c>
   8c5e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8c5e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8c5ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8c5f0:	81a3      	strh	r3, [r4, #12]
   8c5f2:	6662      	str	r2, [r4, #100]	; 0x64
   8c5f4:	4622      	mov	r2, r4
   8c5f6:	4628      	mov	r0, r5
   8c5f8:	f7ff ff96 	bl	8c528 <__fputwc>
   8c5fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8c5fe:	4605      	mov	r5, r0
   8c600:	07da      	lsls	r2, r3, #31
   8c602:	d402      	bmi.n	8c60a <_fputwc_r+0x42>
   8c604:	89a3      	ldrh	r3, [r4, #12]
   8c606:	059b      	lsls	r3, r3, #22
   8c608:	d502      	bpl.n	8c610 <_fputwc_r+0x48>
   8c60a:	4628      	mov	r0, r5
   8c60c:	b003      	add	sp, #12
   8c60e:	bd30      	pop	{r4, r5, pc}
   8c610:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c612:	f7fd fbb7 	bl	89d84 <__retarget_lock_release_recursive>
   8c616:	4628      	mov	r0, r5
   8c618:	b003      	add	sp, #12
   8c61a:	bd30      	pop	{r4, r5, pc}
   8c61c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8c61e:	9101      	str	r1, [sp, #4]
   8c620:	f7fd fbae 	bl	89d80 <__retarget_lock_acquire_recursive>
   8c624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c628:	9901      	ldr	r1, [sp, #4]
   8c62a:	b29a      	uxth	r2, r3
   8c62c:	e7d9      	b.n	8c5e2 <_fputwc_r+0x1a>
   8c62e:	bf00      	nop

0008c630 <__sfvwrite_r>:
   8c630:	6893      	ldr	r3, [r2, #8]
   8c632:	2b00      	cmp	r3, #0
   8c634:	f000 80b7 	beq.w	8c7a6 <__sfvwrite_r+0x176>
   8c638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8c63c:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   8c640:	460c      	mov	r4, r1
   8c642:	0719      	lsls	r1, r3, #28
   8c644:	4680      	mov	r8, r0
   8c646:	4617      	mov	r7, r2
   8c648:	b083      	sub	sp, #12
   8c64a:	b298      	uxth	r0, r3
   8c64c:	d525      	bpl.n	8c69a <__sfvwrite_r+0x6a>
   8c64e:	6923      	ldr	r3, [r4, #16]
   8c650:	b31b      	cbz	r3, 8c69a <__sfvwrite_r+0x6a>
   8c652:	f010 0302 	ands.w	r3, r0, #2
   8c656:	683d      	ldr	r5, [r7, #0]
   8c658:	d02d      	beq.n	8c6b6 <__sfvwrite_r+0x86>
   8c65a:	f04f 0b00 	mov.w	fp, #0
   8c65e:	465e      	mov	r6, fp
   8c660:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8c91c <__sfvwrite_r+0x2ec>
   8c664:	2e00      	cmp	r6, #0
   8c666:	f000 808b 	beq.w	8c780 <__sfvwrite_r+0x150>
   8c66a:	4556      	cmp	r6, sl
   8c66c:	4633      	mov	r3, r6
   8c66e:	465a      	mov	r2, fp
   8c670:	bf28      	it	cs
   8c672:	4653      	movcs	r3, sl
   8c674:	4640      	mov	r0, r8
   8c676:	69e1      	ldr	r1, [r4, #28]
   8c678:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8c67c:	47e0      	blx	ip
   8c67e:	2800      	cmp	r0, #0
   8c680:	f340 8087 	ble.w	8c792 <__sfvwrite_r+0x162>
   8c684:	68bb      	ldr	r3, [r7, #8]
   8c686:	4483      	add	fp, r0
   8c688:	1a1b      	subs	r3, r3, r0
   8c68a:	1a36      	subs	r6, r6, r0
   8c68c:	60bb      	str	r3, [r7, #8]
   8c68e:	2b00      	cmp	r3, #0
   8c690:	d1e8      	bne.n	8c664 <__sfvwrite_r+0x34>
   8c692:	2000      	movs	r0, #0
   8c694:	b003      	add	sp, #12
   8c696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c69a:	4621      	mov	r1, r4
   8c69c:	4640      	mov	r0, r8
   8c69e:	f7ff fd79 	bl	8c194 <__swsetup_r>
   8c6a2:	2800      	cmp	r0, #0
   8c6a4:	f040 8136 	bne.w	8c914 <__sfvwrite_r+0x2e4>
   8c6a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c6ac:	683d      	ldr	r5, [r7, #0]
   8c6ae:	b298      	uxth	r0, r3
   8c6b0:	f010 0302 	ands.w	r3, r0, #2
   8c6b4:	d1d1      	bne.n	8c65a <__sfvwrite_r+0x2a>
   8c6b6:	f010 0901 	ands.w	r9, r0, #1
   8c6ba:	d176      	bne.n	8c7aa <__sfvwrite_r+0x17a>
   8c6bc:	464e      	mov	r6, r9
   8c6be:	2e00      	cmp	r6, #0
   8c6c0:	d05a      	beq.n	8c778 <__sfvwrite_r+0x148>
   8c6c2:	0582      	lsls	r2, r0, #22
   8c6c4:	f8d4 b008 	ldr.w	fp, [r4, #8]
   8c6c8:	f140 80b5 	bpl.w	8c836 <__sfvwrite_r+0x206>
   8c6cc:	45b3      	cmp	fp, r6
   8c6ce:	465a      	mov	r2, fp
   8c6d0:	f200 80cd 	bhi.w	8c86e <__sfvwrite_r+0x23e>
   8c6d4:	f410 6f90 	tst.w	r0, #1152	; 0x480
   8c6d8:	f000 80cb 	beq.w	8c872 <__sfvwrite_r+0x242>
   8c6dc:	6823      	ldr	r3, [r4, #0]
   8c6de:	6921      	ldr	r1, [r4, #16]
   8c6e0:	eba3 0b01 	sub.w	fp, r3, r1
   8c6e4:	6963      	ldr	r3, [r4, #20]
   8c6e6:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   8c6ea:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   8c6ee:	f10b 0301 	add.w	r3, fp, #1
   8c6f2:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   8c6f6:	4433      	add	r3, r6
   8c6f8:	4553      	cmp	r3, sl
   8c6fa:	4652      	mov	r2, sl
   8c6fc:	bf84      	itt	hi
   8c6fe:	469a      	movhi	sl, r3
   8c700:	4652      	movhi	r2, sl
   8c702:	0543      	lsls	r3, r0, #21
   8c704:	f140 80ea 	bpl.w	8c8dc <__sfvwrite_r+0x2ac>
   8c708:	4611      	mov	r1, r2
   8c70a:	4640      	mov	r0, r8
   8c70c:	f7fd fb3c 	bl	89d88 <_malloc_r>
   8c710:	2800      	cmp	r0, #0
   8c712:	f000 80f9 	beq.w	8c908 <__sfvwrite_r+0x2d8>
   8c716:	465a      	mov	r2, fp
   8c718:	6921      	ldr	r1, [r4, #16]
   8c71a:	9001      	str	r0, [sp, #4]
   8c71c:	f7fa fb18 	bl	86d50 <memcpy>
   8c720:	89a2      	ldrh	r2, [r4, #12]
   8c722:	9b01      	ldr	r3, [sp, #4]
   8c724:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8c728:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8c72c:	81a2      	strh	r2, [r4, #12]
   8c72e:	eb03 000b 	add.w	r0, r3, fp
   8c732:	6123      	str	r3, [r4, #16]
   8c734:	4632      	mov	r2, r6
   8c736:	ebaa 030b 	sub.w	r3, sl, fp
   8c73a:	46b3      	mov	fp, r6
   8c73c:	f8c4 a014 	str.w	sl, [r4, #20]
   8c740:	60a3      	str	r3, [r4, #8]
   8c742:	6020      	str	r0, [r4, #0]
   8c744:	46b2      	mov	sl, r6
   8c746:	2600      	movs	r6, #0
   8c748:	4649      	mov	r1, r9
   8c74a:	9201      	str	r2, [sp, #4]
   8c74c:	f7fe fb60 	bl	8ae10 <memmove>
   8c750:	68a3      	ldr	r3, [r4, #8]
   8c752:	6821      	ldr	r1, [r4, #0]
   8c754:	9a01      	ldr	r2, [sp, #4]
   8c756:	eba3 030b 	sub.w	r3, r3, fp
   8c75a:	440a      	add	r2, r1
   8c75c:	60a3      	str	r3, [r4, #8]
   8c75e:	6022      	str	r2, [r4, #0]
   8c760:	68b8      	ldr	r0, [r7, #8]
   8c762:	44d1      	add	r9, sl
   8c764:	eba0 000a 	sub.w	r0, r0, sl
   8c768:	60b8      	str	r0, [r7, #8]
   8c76a:	2800      	cmp	r0, #0
   8c76c:	d091      	beq.n	8c692 <__sfvwrite_r+0x62>
   8c76e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8c772:	b280      	uxth	r0, r0
   8c774:	2e00      	cmp	r6, #0
   8c776:	d1a4      	bne.n	8c6c2 <__sfvwrite_r+0x92>
   8c778:	e9d5 9600 	ldrd	r9, r6, [r5]
   8c77c:	3508      	adds	r5, #8
   8c77e:	e79e      	b.n	8c6be <__sfvwrite_r+0x8e>
   8c780:	e9d5 b600 	ldrd	fp, r6, [r5]
   8c784:	3508      	adds	r5, #8
   8c786:	e76d      	b.n	8c664 <__sfvwrite_r+0x34>
   8c788:	4621      	mov	r1, r4
   8c78a:	4640      	mov	r0, r8
   8c78c:	f7ff fe06 	bl	8c39c <_fflush_r>
   8c790:	b380      	cbz	r0, 8c7f4 <__sfvwrite_r+0x1c4>
   8c792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c796:	f04f 30ff 	mov.w	r0, #4294967295
   8c79a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8c79e:	81a3      	strh	r3, [r4, #12]
   8c7a0:	b003      	add	sp, #12
   8c7a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8c7a6:	2000      	movs	r0, #0
   8c7a8:	4770      	bx	lr
   8c7aa:	461e      	mov	r6, r3
   8c7ac:	46aa      	mov	sl, r5
   8c7ae:	4699      	mov	r9, r3
   8c7b0:	4618      	mov	r0, r3
   8c7b2:	461d      	mov	r5, r3
   8c7b4:	b356      	cbz	r6, 8c80c <__sfvwrite_r+0x1dc>
   8c7b6:	2800      	cmp	r0, #0
   8c7b8:	d032      	beq.n	8c820 <__sfvwrite_r+0x1f0>
   8c7ba:	464a      	mov	r2, r9
   8c7bc:	6820      	ldr	r0, [r4, #0]
   8c7be:	6921      	ldr	r1, [r4, #16]
   8c7c0:	42b2      	cmp	r2, r6
   8c7c2:	bf28      	it	cs
   8c7c4:	4632      	movcs	r2, r6
   8c7c6:	4288      	cmp	r0, r1
   8c7c8:	6963      	ldr	r3, [r4, #20]
   8c7ca:	d904      	bls.n	8c7d6 <__sfvwrite_r+0x1a6>
   8c7cc:	68a1      	ldr	r1, [r4, #8]
   8c7ce:	eb03 0b01 	add.w	fp, r3, r1
   8c7d2:	455a      	cmp	r2, fp
   8c7d4:	dc74      	bgt.n	8c8c0 <__sfvwrite_r+0x290>
   8c7d6:	4293      	cmp	r3, r2
   8c7d8:	dc65      	bgt.n	8c8a6 <__sfvwrite_r+0x276>
   8c7da:	462a      	mov	r2, r5
   8c7dc:	4640      	mov	r0, r8
   8c7de:	69e1      	ldr	r1, [r4, #28]
   8c7e0:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8c7e4:	47e0      	blx	ip
   8c7e6:	f1b0 0b00 	subs.w	fp, r0, #0
   8c7ea:	ddd2      	ble.n	8c792 <__sfvwrite_r+0x162>
   8c7ec:	ebb9 090b 	subs.w	r9, r9, fp
   8c7f0:	d0ca      	beq.n	8c788 <__sfvwrite_r+0x158>
   8c7f2:	2001      	movs	r0, #1
   8c7f4:	68bb      	ldr	r3, [r7, #8]
   8c7f6:	445d      	add	r5, fp
   8c7f8:	eba3 030b 	sub.w	r3, r3, fp
   8c7fc:	eba6 060b 	sub.w	r6, r6, fp
   8c800:	60bb      	str	r3, [r7, #8]
   8c802:	2b00      	cmp	r3, #0
   8c804:	f43f af45 	beq.w	8c692 <__sfvwrite_r+0x62>
   8c808:	2e00      	cmp	r6, #0
   8c80a:	d1d4      	bne.n	8c7b6 <__sfvwrite_r+0x186>
   8c80c:	f10a 0308 	add.w	r3, sl, #8
   8c810:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8c814:	469a      	mov	sl, r3
   8c816:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8c81a:	3308      	adds	r3, #8
   8c81c:	2e00      	cmp	r6, #0
   8c81e:	d0f7      	beq.n	8c810 <__sfvwrite_r+0x1e0>
   8c820:	4632      	mov	r2, r6
   8c822:	210a      	movs	r1, #10
   8c824:	4628      	mov	r0, r5
   8c826:	f7fd fd5b 	bl	8a2e0 <memchr>
   8c82a:	2800      	cmp	r0, #0
   8c82c:	d069      	beq.n	8c902 <__sfvwrite_r+0x2d2>
   8c82e:	3001      	adds	r0, #1
   8c830:	eba0 0905 	sub.w	r9, r0, r5
   8c834:	e7c1      	b.n	8c7ba <__sfvwrite_r+0x18a>
   8c836:	6820      	ldr	r0, [r4, #0]
   8c838:	6923      	ldr	r3, [r4, #16]
   8c83a:	4298      	cmp	r0, r3
   8c83c:	d81b      	bhi.n	8c876 <__sfvwrite_r+0x246>
   8c83e:	6963      	ldr	r3, [r4, #20]
   8c840:	42b3      	cmp	r3, r6
   8c842:	d818      	bhi.n	8c876 <__sfvwrite_r+0x246>
   8c844:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   8c848:	45b4      	cmp	ip, r6
   8c84a:	bf28      	it	cs
   8c84c:	46b4      	movcs	ip, r6
   8c84e:	fb9c fcf3 	sdiv	ip, ip, r3
   8c852:	464a      	mov	r2, r9
   8c854:	fb03 f30c 	mul.w	r3, r3, ip
   8c858:	4640      	mov	r0, r8
   8c85a:	69e1      	ldr	r1, [r4, #28]
   8c85c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8c860:	47e0      	blx	ip
   8c862:	f1b0 0a00 	subs.w	sl, r0, #0
   8c866:	dd94      	ble.n	8c792 <__sfvwrite_r+0x162>
   8c868:	eba6 060a 	sub.w	r6, r6, sl
   8c86c:	e778      	b.n	8c760 <__sfvwrite_r+0x130>
   8c86e:	46b3      	mov	fp, r6
   8c870:	4632      	mov	r2, r6
   8c872:	6820      	ldr	r0, [r4, #0]
   8c874:	e766      	b.n	8c744 <__sfvwrite_r+0x114>
   8c876:	45b3      	cmp	fp, r6
   8c878:	46da      	mov	sl, fp
   8c87a:	bf28      	it	cs
   8c87c:	46b2      	movcs	sl, r6
   8c87e:	4649      	mov	r1, r9
   8c880:	4652      	mov	r2, sl
   8c882:	f7fe fac5 	bl	8ae10 <memmove>
   8c886:	68a3      	ldr	r3, [r4, #8]
   8c888:	6822      	ldr	r2, [r4, #0]
   8c88a:	eba3 030a 	sub.w	r3, r3, sl
   8c88e:	4452      	add	r2, sl
   8c890:	60a3      	str	r3, [r4, #8]
   8c892:	6022      	str	r2, [r4, #0]
   8c894:	2b00      	cmp	r3, #0
   8c896:	d1e7      	bne.n	8c868 <__sfvwrite_r+0x238>
   8c898:	4621      	mov	r1, r4
   8c89a:	4640      	mov	r0, r8
   8c89c:	f7ff fd7e 	bl	8c39c <_fflush_r>
   8c8a0:	2800      	cmp	r0, #0
   8c8a2:	d0e1      	beq.n	8c868 <__sfvwrite_r+0x238>
   8c8a4:	e775      	b.n	8c792 <__sfvwrite_r+0x162>
   8c8a6:	4629      	mov	r1, r5
   8c8a8:	4693      	mov	fp, r2
   8c8aa:	9201      	str	r2, [sp, #4]
   8c8ac:	f7fe fab0 	bl	8ae10 <memmove>
   8c8b0:	68a3      	ldr	r3, [r4, #8]
   8c8b2:	9a01      	ldr	r2, [sp, #4]
   8c8b4:	1a9b      	subs	r3, r3, r2
   8c8b6:	60a3      	str	r3, [r4, #8]
   8c8b8:	6823      	ldr	r3, [r4, #0]
   8c8ba:	441a      	add	r2, r3
   8c8bc:	6022      	str	r2, [r4, #0]
   8c8be:	e795      	b.n	8c7ec <__sfvwrite_r+0x1bc>
   8c8c0:	4629      	mov	r1, r5
   8c8c2:	465a      	mov	r2, fp
   8c8c4:	f7fe faa4 	bl	8ae10 <memmove>
   8c8c8:	6823      	ldr	r3, [r4, #0]
   8c8ca:	4621      	mov	r1, r4
   8c8cc:	445b      	add	r3, fp
   8c8ce:	4640      	mov	r0, r8
   8c8d0:	6023      	str	r3, [r4, #0]
   8c8d2:	f7ff fd63 	bl	8c39c <_fflush_r>
   8c8d6:	2800      	cmp	r0, #0
   8c8d8:	d088      	beq.n	8c7ec <__sfvwrite_r+0x1bc>
   8c8da:	e75a      	b.n	8c792 <__sfvwrite_r+0x162>
   8c8dc:	4640      	mov	r0, r8
   8c8de:	f7fe fb13 	bl	8af08 <_realloc_r>
   8c8e2:	4603      	mov	r3, r0
   8c8e4:	2800      	cmp	r0, #0
   8c8e6:	f47f af22 	bne.w	8c72e <__sfvwrite_r+0xfe>
   8c8ea:	4640      	mov	r0, r8
   8c8ec:	6921      	ldr	r1, [r4, #16]
   8c8ee:	f7fd f93f 	bl	89b70 <_free_r>
   8c8f2:	220c      	movs	r2, #12
   8c8f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c8f8:	f8c8 2000 	str.w	r2, [r8]
   8c8fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8c900:	e749      	b.n	8c796 <__sfvwrite_r+0x166>
   8c902:	1c72      	adds	r2, r6, #1
   8c904:	4691      	mov	r9, r2
   8c906:	e759      	b.n	8c7bc <__sfvwrite_r+0x18c>
   8c908:	220c      	movs	r2, #12
   8c90a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c90e:	f8c8 2000 	str.w	r2, [r8]
   8c912:	e740      	b.n	8c796 <__sfvwrite_r+0x166>
   8c914:	f04f 30ff 	mov.w	r0, #4294967295
   8c918:	e6bc      	b.n	8c694 <__sfvwrite_r+0x64>
   8c91a:	bf00      	nop
   8c91c:	7ffffc00 	.word	0x7ffffc00

0008c920 <_fwalk_reent>:
   8c920:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8c924:	f04f 0900 	mov.w	r9, #0
   8c928:	4607      	mov	r7, r0
   8c92a:	4688      	mov	r8, r1
   8c92c:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8c930:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8c934:	3d01      	subs	r5, #1
   8c936:	d410      	bmi.n	8c95a <_fwalk_reent+0x3a>
   8c938:	89a3      	ldrh	r3, [r4, #12]
   8c93a:	3d01      	subs	r5, #1
   8c93c:	2b01      	cmp	r3, #1
   8c93e:	d908      	bls.n	8c952 <_fwalk_reent+0x32>
   8c940:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8c944:	3301      	adds	r3, #1
   8c946:	d004      	beq.n	8c952 <_fwalk_reent+0x32>
   8c948:	4621      	mov	r1, r4
   8c94a:	4638      	mov	r0, r7
   8c94c:	47c0      	blx	r8
   8c94e:	ea49 0900 	orr.w	r9, r9, r0
   8c952:	1c6b      	adds	r3, r5, #1
   8c954:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8c958:	d1ee      	bne.n	8c938 <_fwalk_reent+0x18>
   8c95a:	6836      	ldr	r6, [r6, #0]
   8c95c:	2e00      	cmp	r6, #0
   8c95e:	d1e7      	bne.n	8c930 <_fwalk_reent+0x10>
   8c960:	4648      	mov	r0, r9
   8c962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8c966:	bf00      	nop

0008c968 <__smakebuf_r>:
   8c968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8c96c:	898b      	ldrh	r3, [r1, #12]
   8c96e:	460c      	mov	r4, r1
   8c970:	0799      	lsls	r1, r3, #30
   8c972:	b096      	sub	sp, #88	; 0x58
   8c974:	d508      	bpl.n	8c988 <__smakebuf_r+0x20>
   8c976:	2201      	movs	r2, #1
   8c978:	f104 0343 	add.w	r3, r4, #67	; 0x43
   8c97c:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8c980:	6023      	str	r3, [r4, #0]
   8c982:	b016      	add	sp, #88	; 0x58
   8c984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8c988:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8c98c:	4606      	mov	r6, r0
   8c98e:	2900      	cmp	r1, #0
   8c990:	db27      	blt.n	8c9e2 <__smakebuf_r+0x7a>
   8c992:	466a      	mov	r2, sp
   8c994:	f000 f9e6 	bl	8cd64 <_fstat_r>
   8c998:	2800      	cmp	r0, #0
   8c99a:	db21      	blt.n	8c9e0 <__smakebuf_r+0x78>
   8c99c:	9d01      	ldr	r5, [sp, #4]
   8c99e:	f44f 6880 	mov.w	r8, #1024	; 0x400
   8c9a2:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   8c9a6:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   8c9aa:	fab5 f585 	clz	r5, r5
   8c9ae:	f44f 6700 	mov.w	r7, #2048	; 0x800
   8c9b2:	096d      	lsrs	r5, r5, #5
   8c9b4:	4641      	mov	r1, r8
   8c9b6:	4630      	mov	r0, r6
   8c9b8:	f7fd f9e6 	bl	89d88 <_malloc_r>
   8c9bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c9c0:	b1f0      	cbz	r0, 8ca00 <__smakebuf_r+0x98>
   8c9c2:	4a20      	ldr	r2, [pc, #128]	; (8ca44 <__smakebuf_r+0xdc>)
   8c9c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8c9c8:	63f2      	str	r2, [r6, #60]	; 0x3c
   8c9ca:	f8c4 8014 	str.w	r8, [r4, #20]
   8c9ce:	81a3      	strh	r3, [r4, #12]
   8c9d0:	6020      	str	r0, [r4, #0]
   8c9d2:	6120      	str	r0, [r4, #16]
   8c9d4:	bb35      	cbnz	r5, 8ca24 <__smakebuf_r+0xbc>
   8c9d6:	433b      	orrs	r3, r7
   8c9d8:	81a3      	strh	r3, [r4, #12]
   8c9da:	b016      	add	sp, #88	; 0x58
   8c9dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8c9e0:	89a3      	ldrh	r3, [r4, #12]
   8c9e2:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   8c9e6:	d019      	beq.n	8ca1c <__smakebuf_r+0xb4>
   8c9e8:	f04f 0840 	mov.w	r8, #64	; 0x40
   8c9ec:	4630      	mov	r0, r6
   8c9ee:	4641      	mov	r1, r8
   8c9f0:	2500      	movs	r5, #0
   8c9f2:	f7fd f9c9 	bl	89d88 <_malloc_r>
   8c9f6:	462f      	mov	r7, r5
   8c9f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8c9fc:	2800      	cmp	r0, #0
   8c9fe:	d1e0      	bne.n	8c9c2 <__smakebuf_r+0x5a>
   8ca00:	059a      	lsls	r2, r3, #22
   8ca02:	d4be      	bmi.n	8c982 <__smakebuf_r+0x1a>
   8ca04:	2101      	movs	r1, #1
   8ca06:	f023 0303 	bic.w	r3, r3, #3
   8ca0a:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8ca0e:	f043 0302 	orr.w	r3, r3, #2
   8ca12:	e9c4 2104 	strd	r2, r1, [r4, #16]
   8ca16:	81a3      	strh	r3, [r4, #12]
   8ca18:	6022      	str	r2, [r4, #0]
   8ca1a:	e7b2      	b.n	8c982 <__smakebuf_r+0x1a>
   8ca1c:	f44f 6880 	mov.w	r8, #1024	; 0x400
   8ca20:	462f      	mov	r7, r5
   8ca22:	e7c7      	b.n	8c9b4 <__smakebuf_r+0x4c>
   8ca24:	4630      	mov	r0, r6
   8ca26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8ca2a:	f000 f9af 	bl	8cd8c <_isatty_r>
   8ca2e:	b910      	cbnz	r0, 8ca36 <__smakebuf_r+0xce>
   8ca30:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ca34:	e7cf      	b.n	8c9d6 <__smakebuf_r+0x6e>
   8ca36:	89a3      	ldrh	r3, [r4, #12]
   8ca38:	f023 0303 	bic.w	r3, r3, #3
   8ca3c:	f043 0301 	orr.w	r3, r3, #1
   8ca40:	b21b      	sxth	r3, r3
   8ca42:	e7c8      	b.n	8c9d6 <__smakebuf_r+0x6e>
   8ca44:	0008c3f9 	.word	0x0008c3f9

0008ca48 <raise>:
   8ca48:	b538      	push	{r3, r4, r5, lr}
   8ca4a:	4b15      	ldr	r3, [pc, #84]	; (8caa0 <raise+0x58>)
   8ca4c:	281f      	cmp	r0, #31
   8ca4e:	681d      	ldr	r5, [r3, #0]
   8ca50:	d820      	bhi.n	8ca94 <raise+0x4c>
   8ca52:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
   8ca56:	4604      	mov	r4, r0
   8ca58:	b162      	cbz	r2, 8ca74 <raise+0x2c>
   8ca5a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   8ca5e:	b14b      	cbz	r3, 8ca74 <raise+0x2c>
   8ca60:	2b01      	cmp	r3, #1
   8ca62:	d015      	beq.n	8ca90 <raise+0x48>
   8ca64:	1c59      	adds	r1, r3, #1
   8ca66:	d00f      	beq.n	8ca88 <raise+0x40>
   8ca68:	2500      	movs	r5, #0
   8ca6a:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   8ca6e:	4798      	blx	r3
   8ca70:	4628      	mov	r0, r5
   8ca72:	bd38      	pop	{r3, r4, r5, pc}
   8ca74:	4628      	mov	r0, r5
   8ca76:	f000 f829 	bl	8cacc <_getpid_r>
   8ca7a:	4622      	mov	r2, r4
   8ca7c:	4601      	mov	r1, r0
   8ca7e:	4628      	mov	r0, r5
   8ca80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8ca84:	f000 b80e 	b.w	8caa4 <_kill_r>
   8ca88:	2316      	movs	r3, #22
   8ca8a:	2001      	movs	r0, #1
   8ca8c:	602b      	str	r3, [r5, #0]
   8ca8e:	bd38      	pop	{r3, r4, r5, pc}
   8ca90:	2000      	movs	r0, #0
   8ca92:	bd38      	pop	{r3, r4, r5, pc}
   8ca94:	2316      	movs	r3, #22
   8ca96:	f04f 30ff 	mov.w	r0, #4294967295
   8ca9a:	602b      	str	r3, [r5, #0]
   8ca9c:	bd38      	pop	{r3, r4, r5, pc}
   8ca9e:	bf00      	nop
   8caa0:	20070ccc 	.word	0x20070ccc

0008caa4 <_kill_r>:
   8caa4:	b570      	push	{r4, r5, r6, lr}
   8caa6:	2600      	movs	r6, #0
   8caa8:	4d07      	ldr	r5, [pc, #28]	; (8cac8 <_kill_r+0x24>)
   8caaa:	4604      	mov	r4, r0
   8caac:	4608      	mov	r0, r1
   8caae:	4611      	mov	r1, r2
   8cab0:	602e      	str	r6, [r5, #0]
   8cab2:	f7f8 f85f 	bl	84b74 <_kill>
   8cab6:	1c43      	adds	r3, r0, #1
   8cab8:	d000      	beq.n	8cabc <_kill_r+0x18>
   8caba:	bd70      	pop	{r4, r5, r6, pc}
   8cabc:	682b      	ldr	r3, [r5, #0]
   8cabe:	2b00      	cmp	r3, #0
   8cac0:	d0fb      	beq.n	8caba <_kill_r+0x16>
   8cac2:	6023      	str	r3, [r4, #0]
   8cac4:	bd70      	pop	{r4, r5, r6, pc}
   8cac6:	bf00      	nop
   8cac8:	2007346c 	.word	0x2007346c

0008cacc <_getpid_r>:
   8cacc:	f7f8 b854 	b.w	84b78 <_getpid>

0008cad0 <__sread>:
   8cad0:	b510      	push	{r4, lr}
   8cad2:	460c      	mov	r4, r1
   8cad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8cad8:	f000 f980 	bl	8cddc <_read_r>
   8cadc:	2800      	cmp	r0, #0
   8cade:	db03      	blt.n	8cae8 <__sread+0x18>
   8cae0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8cae2:	4403      	add	r3, r0
   8cae4:	6523      	str	r3, [r4, #80]	; 0x50
   8cae6:	bd10      	pop	{r4, pc}
   8cae8:	89a3      	ldrh	r3, [r4, #12]
   8caea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8caee:	81a3      	strh	r3, [r4, #12]
   8caf0:	bd10      	pop	{r4, pc}
   8caf2:	bf00      	nop

0008caf4 <__swrite>:
   8caf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8caf8:	460c      	mov	r4, r1
   8cafa:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8cafe:	461f      	mov	r7, r3
   8cb00:	05cb      	lsls	r3, r1, #23
   8cb02:	4605      	mov	r5, r0
   8cb04:	4616      	mov	r6, r2
   8cb06:	d40b      	bmi.n	8cb20 <__swrite+0x2c>
   8cb08:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8cb0c:	81a1      	strh	r1, [r4, #12]
   8cb0e:	463b      	mov	r3, r7
   8cb10:	4632      	mov	r2, r6
   8cb12:	4628      	mov	r0, r5
   8cb14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8cb18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8cb1c:	f000 b894 	b.w	8cc48 <_write_r>
   8cb20:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8cb24:	2302      	movs	r3, #2
   8cb26:	2200      	movs	r2, #0
   8cb28:	f000 f942 	bl	8cdb0 <_lseek_r>
   8cb2c:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8cb30:	e7ea      	b.n	8cb08 <__swrite+0x14>
   8cb32:	bf00      	nop

0008cb34 <__sseek>:
   8cb34:	b510      	push	{r4, lr}
   8cb36:	460c      	mov	r4, r1
   8cb38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8cb3c:	f000 f938 	bl	8cdb0 <_lseek_r>
   8cb40:	89a3      	ldrh	r3, [r4, #12]
   8cb42:	1c42      	adds	r2, r0, #1
   8cb44:	bf0e      	itee	eq
   8cb46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8cb4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8cb4e:	6520      	strne	r0, [r4, #80]	; 0x50
   8cb50:	81a3      	strh	r3, [r4, #12]
   8cb52:	bd10      	pop	{r4, pc}

0008cb54 <__sclose>:
   8cb54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8cb58:	f000 b88c 	b.w	8cc74 <_close_r>

0008cb5c <__swbuf_r>:
   8cb5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cb5e:	4606      	mov	r6, r0
   8cb60:	460d      	mov	r5, r1
   8cb62:	4614      	mov	r4, r2
   8cb64:	b110      	cbz	r0, 8cb6c <__swbuf_r+0x10>
   8cb66:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8cb68:	2b00      	cmp	r3, #0
   8cb6a:	d043      	beq.n	8cbf4 <__swbuf_r+0x98>
   8cb6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8cb70:	69a3      	ldr	r3, [r4, #24]
   8cb72:	0710      	lsls	r0, r2, #28
   8cb74:	60a3      	str	r3, [r4, #8]
   8cb76:	b291      	uxth	r1, r2
   8cb78:	d51b      	bpl.n	8cbb2 <__swbuf_r+0x56>
   8cb7a:	6923      	ldr	r3, [r4, #16]
   8cb7c:	b1cb      	cbz	r3, 8cbb2 <__swbuf_r+0x56>
   8cb7e:	b2ed      	uxtb	r5, r5
   8cb80:	0489      	lsls	r1, r1, #18
   8cb82:	462f      	mov	r7, r5
   8cb84:	d522      	bpl.n	8cbcc <__swbuf_r+0x70>
   8cb86:	6822      	ldr	r2, [r4, #0]
   8cb88:	6961      	ldr	r1, [r4, #20]
   8cb8a:	1ad3      	subs	r3, r2, r3
   8cb8c:	4299      	cmp	r1, r3
   8cb8e:	dd29      	ble.n	8cbe4 <__swbuf_r+0x88>
   8cb90:	3301      	adds	r3, #1
   8cb92:	68a1      	ldr	r1, [r4, #8]
   8cb94:	3901      	subs	r1, #1
   8cb96:	60a1      	str	r1, [r4, #8]
   8cb98:	1c51      	adds	r1, r2, #1
   8cb9a:	6021      	str	r1, [r4, #0]
   8cb9c:	7015      	strb	r5, [r2, #0]
   8cb9e:	6962      	ldr	r2, [r4, #20]
   8cba0:	429a      	cmp	r2, r3
   8cba2:	d02a      	beq.n	8cbfa <__swbuf_r+0x9e>
   8cba4:	89a3      	ldrh	r3, [r4, #12]
   8cba6:	07db      	lsls	r3, r3, #31
   8cba8:	d501      	bpl.n	8cbae <__swbuf_r+0x52>
   8cbaa:	2d0a      	cmp	r5, #10
   8cbac:	d025      	beq.n	8cbfa <__swbuf_r+0x9e>
   8cbae:	4638      	mov	r0, r7
   8cbb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8cbb2:	4621      	mov	r1, r4
   8cbb4:	4630      	mov	r0, r6
   8cbb6:	f7ff faed 	bl	8c194 <__swsetup_r>
   8cbba:	bb20      	cbnz	r0, 8cc06 <__swbuf_r+0xaa>
   8cbbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8cbc0:	b2ed      	uxtb	r5, r5
   8cbc2:	b291      	uxth	r1, r2
   8cbc4:	0489      	lsls	r1, r1, #18
   8cbc6:	462f      	mov	r7, r5
   8cbc8:	6923      	ldr	r3, [r4, #16]
   8cbca:	d4dc      	bmi.n	8cb86 <__swbuf_r+0x2a>
   8cbcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8cbd0:	81a2      	strh	r2, [r4, #12]
   8cbd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8cbd4:	6961      	ldr	r1, [r4, #20]
   8cbd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   8cbda:	6662      	str	r2, [r4, #100]	; 0x64
   8cbdc:	6822      	ldr	r2, [r4, #0]
   8cbde:	1ad3      	subs	r3, r2, r3
   8cbe0:	4299      	cmp	r1, r3
   8cbe2:	dcd5      	bgt.n	8cb90 <__swbuf_r+0x34>
   8cbe4:	4621      	mov	r1, r4
   8cbe6:	4630      	mov	r0, r6
   8cbe8:	f7ff fbd8 	bl	8c39c <_fflush_r>
   8cbec:	b958      	cbnz	r0, 8cc06 <__swbuf_r+0xaa>
   8cbee:	2301      	movs	r3, #1
   8cbf0:	6822      	ldr	r2, [r4, #0]
   8cbf2:	e7ce      	b.n	8cb92 <__swbuf_r+0x36>
   8cbf4:	f7ff fc06 	bl	8c404 <__sinit>
   8cbf8:	e7b8      	b.n	8cb6c <__swbuf_r+0x10>
   8cbfa:	4621      	mov	r1, r4
   8cbfc:	4630      	mov	r0, r6
   8cbfe:	f7ff fbcd 	bl	8c39c <_fflush_r>
   8cc02:	2800      	cmp	r0, #0
   8cc04:	d0d3      	beq.n	8cbae <__swbuf_r+0x52>
   8cc06:	f04f 37ff 	mov.w	r7, #4294967295
   8cc0a:	e7d0      	b.n	8cbae <__swbuf_r+0x52>

0008cc0c <_wcrtomb_r>:
   8cc0c:	b570      	push	{r4, r5, r6, lr}
   8cc0e:	4605      	mov	r5, r0
   8cc10:	461c      	mov	r4, r3
   8cc12:	b084      	sub	sp, #16
   8cc14:	b139      	cbz	r1, 8cc26 <_wcrtomb_r+0x1a>
   8cc16:	4e0b      	ldr	r6, [pc, #44]	; (8cc44 <_wcrtomb_r+0x38>)
   8cc18:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
   8cc1c:	47b0      	blx	r6
   8cc1e:	1c43      	adds	r3, r0, #1
   8cc20:	d009      	beq.n	8cc36 <_wcrtomb_r+0x2a>
   8cc22:	b004      	add	sp, #16
   8cc24:	bd70      	pop	{r4, r5, r6, pc}
   8cc26:	460a      	mov	r2, r1
   8cc28:	4906      	ldr	r1, [pc, #24]	; (8cc44 <_wcrtomb_r+0x38>)
   8cc2a:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
   8cc2e:	a901      	add	r1, sp, #4
   8cc30:	47b0      	blx	r6
   8cc32:	1c43      	adds	r3, r0, #1
   8cc34:	d1f5      	bne.n	8cc22 <_wcrtomb_r+0x16>
   8cc36:	2200      	movs	r2, #0
   8cc38:	238a      	movs	r3, #138	; 0x8a
   8cc3a:	6022      	str	r2, [r4, #0]
   8cc3c:	602b      	str	r3, [r5, #0]
   8cc3e:	b004      	add	sp, #16
   8cc40:	bd70      	pop	{r4, r5, r6, pc}
   8cc42:	bf00      	nop
   8cc44:	2007150c 	.word	0x2007150c

0008cc48 <_write_r>:
   8cc48:	b538      	push	{r3, r4, r5, lr}
   8cc4a:	460c      	mov	r4, r1
   8cc4c:	4611      	mov	r1, r2
   8cc4e:	2200      	movs	r2, #0
   8cc50:	4684      	mov	ip, r0
   8cc52:	4d07      	ldr	r5, [pc, #28]	; (8cc70 <_write_r+0x28>)
   8cc54:	4620      	mov	r0, r4
   8cc56:	602a      	str	r2, [r5, #0]
   8cc58:	461a      	mov	r2, r3
   8cc5a:	4664      	mov	r4, ip
   8cc5c:	f7f7 fac2 	bl	841e4 <_write>
   8cc60:	1c43      	adds	r3, r0, #1
   8cc62:	d000      	beq.n	8cc66 <_write_r+0x1e>
   8cc64:	bd38      	pop	{r3, r4, r5, pc}
   8cc66:	682b      	ldr	r3, [r5, #0]
   8cc68:	2b00      	cmp	r3, #0
   8cc6a:	d0fb      	beq.n	8cc64 <_write_r+0x1c>
   8cc6c:	6023      	str	r3, [r4, #0]
   8cc6e:	bd38      	pop	{r3, r4, r5, pc}
   8cc70:	2007346c 	.word	0x2007346c

0008cc74 <_close_r>:
   8cc74:	2200      	movs	r2, #0
   8cc76:	b538      	push	{r3, r4, r5, lr}
   8cc78:	4d06      	ldr	r5, [pc, #24]	; (8cc94 <_close_r+0x20>)
   8cc7a:	4604      	mov	r4, r0
   8cc7c:	4608      	mov	r0, r1
   8cc7e:	602a      	str	r2, [r5, #0]
   8cc80:	f7f7 ff68 	bl	84b54 <_close>
   8cc84:	1c43      	adds	r3, r0, #1
   8cc86:	d000      	beq.n	8cc8a <_close_r+0x16>
   8cc88:	bd38      	pop	{r3, r4, r5, pc}
   8cc8a:	682b      	ldr	r3, [r5, #0]
   8cc8c:	2b00      	cmp	r3, #0
   8cc8e:	d0fb      	beq.n	8cc88 <_close_r+0x14>
   8cc90:	6023      	str	r3, [r4, #0]
   8cc92:	bd38      	pop	{r3, r4, r5, pc}
   8cc94:	2007346c 	.word	0x2007346c

0008cc98 <_fclose_r>:
   8cc98:	b570      	push	{r4, r5, r6, lr}
   8cc9a:	2900      	cmp	r1, #0
   8cc9c:	d04b      	beq.n	8cd36 <_fclose_r+0x9e>
   8cc9e:	4606      	mov	r6, r0
   8cca0:	460c      	mov	r4, r1
   8cca2:	b110      	cbz	r0, 8ccaa <_fclose_r+0x12>
   8cca4:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8cca6:	2b00      	cmp	r3, #0
   8cca8:	d048      	beq.n	8cd3c <_fclose_r+0xa4>
   8ccaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8ccac:	07d8      	lsls	r0, r3, #31
   8ccae:	d534      	bpl.n	8cd1a <_fclose_r+0x82>
   8ccb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ccb4:	2b00      	cmp	r3, #0
   8ccb6:	d03e      	beq.n	8cd36 <_fclose_r+0x9e>
   8ccb8:	4621      	mov	r1, r4
   8ccba:	4630      	mov	r0, r6
   8ccbc:	f7ff fadc 	bl	8c278 <__sflush_r>
   8ccc0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8ccc2:	4605      	mov	r5, r0
   8ccc4:	b133      	cbz	r3, 8ccd4 <_fclose_r+0x3c>
   8ccc6:	4630      	mov	r0, r6
   8ccc8:	69e1      	ldr	r1, [r4, #28]
   8ccca:	4798      	blx	r3
   8cccc:	2800      	cmp	r0, #0
   8ccce:	bfb8      	it	lt
   8ccd0:	f04f 35ff 	movlt.w	r5, #4294967295
   8ccd4:	89a3      	ldrh	r3, [r4, #12]
   8ccd6:	061a      	lsls	r2, r3, #24
   8ccd8:	d43b      	bmi.n	8cd52 <_fclose_r+0xba>
   8ccda:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8ccdc:	b141      	cbz	r1, 8ccf0 <_fclose_r+0x58>
   8ccde:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8cce2:	4299      	cmp	r1, r3
   8cce4:	d002      	beq.n	8ccec <_fclose_r+0x54>
   8cce6:	4630      	mov	r0, r6
   8cce8:	f7fc ff42 	bl	89b70 <_free_r>
   8ccec:	2300      	movs	r3, #0
   8ccee:	6323      	str	r3, [r4, #48]	; 0x30
   8ccf0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8ccf2:	b121      	cbz	r1, 8ccfe <_fclose_r+0x66>
   8ccf4:	4630      	mov	r0, r6
   8ccf6:	f7fc ff3b 	bl	89b70 <_free_r>
   8ccfa:	2300      	movs	r3, #0
   8ccfc:	6463      	str	r3, [r4, #68]	; 0x44
   8ccfe:	f7ff fc07 	bl	8c510 <__sfp_lock_acquire>
   8cd02:	2200      	movs	r2, #0
   8cd04:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8cd06:	81a2      	strh	r2, [r4, #12]
   8cd08:	07db      	lsls	r3, r3, #31
   8cd0a:	d527      	bpl.n	8cd5c <_fclose_r+0xc4>
   8cd0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8cd0e:	f7fd f835 	bl	89d7c <__retarget_lock_close_recursive>
   8cd12:	f7ff fc03 	bl	8c51c <__sfp_lock_release>
   8cd16:	4628      	mov	r0, r5
   8cd18:	bd70      	pop	{r4, r5, r6, pc}
   8cd1a:	89a3      	ldrh	r3, [r4, #12]
   8cd1c:	0599      	lsls	r1, r3, #22
   8cd1e:	d4cb      	bmi.n	8ccb8 <_fclose_r+0x20>
   8cd20:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8cd22:	f7fd f82d 	bl	89d80 <__retarget_lock_acquire_recursive>
   8cd26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8cd2a:	2b00      	cmp	r3, #0
   8cd2c:	d1c4      	bne.n	8ccb8 <_fclose_r+0x20>
   8cd2e:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8cd30:	f015 0501 	ands.w	r5, r5, #1
   8cd34:	d008      	beq.n	8cd48 <_fclose_r+0xb0>
   8cd36:	2500      	movs	r5, #0
   8cd38:	4628      	mov	r0, r5
   8cd3a:	bd70      	pop	{r4, r5, r6, pc}
   8cd3c:	f7ff fb62 	bl	8c404 <__sinit>
   8cd40:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8cd42:	07d8      	lsls	r0, r3, #31
   8cd44:	d4b4      	bmi.n	8ccb0 <_fclose_r+0x18>
   8cd46:	e7e8      	b.n	8cd1a <_fclose_r+0x82>
   8cd48:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8cd4a:	f7fd f81b 	bl	89d84 <__retarget_lock_release_recursive>
   8cd4e:	4628      	mov	r0, r5
   8cd50:	bd70      	pop	{r4, r5, r6, pc}
   8cd52:	4630      	mov	r0, r6
   8cd54:	6921      	ldr	r1, [r4, #16]
   8cd56:	f7fc ff0b 	bl	89b70 <_free_r>
   8cd5a:	e7be      	b.n	8ccda <_fclose_r+0x42>
   8cd5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8cd5e:	f7fd f811 	bl	89d84 <__retarget_lock_release_recursive>
   8cd62:	e7d3      	b.n	8cd0c <_fclose_r+0x74>

0008cd64 <_fstat_r>:
   8cd64:	b570      	push	{r4, r5, r6, lr}
   8cd66:	2600      	movs	r6, #0
   8cd68:	4d07      	ldr	r5, [pc, #28]	; (8cd88 <_fstat_r+0x24>)
   8cd6a:	4604      	mov	r4, r0
   8cd6c:	4608      	mov	r0, r1
   8cd6e:	4611      	mov	r1, r2
   8cd70:	602e      	str	r6, [r5, #0]
   8cd72:	f7f7 fef3 	bl	84b5c <_fstat>
   8cd76:	1c43      	adds	r3, r0, #1
   8cd78:	d000      	beq.n	8cd7c <_fstat_r+0x18>
   8cd7a:	bd70      	pop	{r4, r5, r6, pc}
   8cd7c:	682b      	ldr	r3, [r5, #0]
   8cd7e:	2b00      	cmp	r3, #0
   8cd80:	d0fb      	beq.n	8cd7a <_fstat_r+0x16>
   8cd82:	6023      	str	r3, [r4, #0]
   8cd84:	bd70      	pop	{r4, r5, r6, pc}
   8cd86:	bf00      	nop
   8cd88:	2007346c 	.word	0x2007346c

0008cd8c <_isatty_r>:
   8cd8c:	2200      	movs	r2, #0
   8cd8e:	b538      	push	{r3, r4, r5, lr}
   8cd90:	4d06      	ldr	r5, [pc, #24]	; (8cdac <_isatty_r+0x20>)
   8cd92:	4604      	mov	r4, r0
   8cd94:	4608      	mov	r0, r1
   8cd96:	602a      	str	r2, [r5, #0]
   8cd98:	f7f7 fee6 	bl	84b68 <_isatty>
   8cd9c:	1c43      	adds	r3, r0, #1
   8cd9e:	d000      	beq.n	8cda2 <_isatty_r+0x16>
   8cda0:	bd38      	pop	{r3, r4, r5, pc}
   8cda2:	682b      	ldr	r3, [r5, #0]
   8cda4:	2b00      	cmp	r3, #0
   8cda6:	d0fb      	beq.n	8cda0 <_isatty_r+0x14>
   8cda8:	6023      	str	r3, [r4, #0]
   8cdaa:	bd38      	pop	{r3, r4, r5, pc}
   8cdac:	2007346c 	.word	0x2007346c

0008cdb0 <_lseek_r>:
   8cdb0:	b538      	push	{r3, r4, r5, lr}
   8cdb2:	460c      	mov	r4, r1
   8cdb4:	4611      	mov	r1, r2
   8cdb6:	2200      	movs	r2, #0
   8cdb8:	4684      	mov	ip, r0
   8cdba:	4d07      	ldr	r5, [pc, #28]	; (8cdd8 <_lseek_r+0x28>)
   8cdbc:	4620      	mov	r0, r4
   8cdbe:	602a      	str	r2, [r5, #0]
   8cdc0:	461a      	mov	r2, r3
   8cdc2:	4664      	mov	r4, ip
   8cdc4:	f7f7 fed2 	bl	84b6c <_lseek>
   8cdc8:	1c43      	adds	r3, r0, #1
   8cdca:	d000      	beq.n	8cdce <_lseek_r+0x1e>
   8cdcc:	bd38      	pop	{r3, r4, r5, pc}
   8cdce:	682b      	ldr	r3, [r5, #0]
   8cdd0:	2b00      	cmp	r3, #0
   8cdd2:	d0fb      	beq.n	8cdcc <_lseek_r+0x1c>
   8cdd4:	6023      	str	r3, [r4, #0]
   8cdd6:	bd38      	pop	{r3, r4, r5, pc}
   8cdd8:	2007346c 	.word	0x2007346c

0008cddc <_read_r>:
   8cddc:	b538      	push	{r3, r4, r5, lr}
   8cdde:	460c      	mov	r4, r1
   8cde0:	4611      	mov	r1, r2
   8cde2:	2200      	movs	r2, #0
   8cde4:	4684      	mov	ip, r0
   8cde6:	4d07      	ldr	r5, [pc, #28]	; (8ce04 <_read_r+0x28>)
   8cde8:	4620      	mov	r0, r4
   8cdea:	602a      	str	r2, [r5, #0]
   8cdec:	461a      	mov	r2, r3
   8cdee:	4664      	mov	r4, ip
   8cdf0:	f7f9 ff46 	bl	86c80 <_read>
   8cdf4:	1c43      	adds	r3, r0, #1
   8cdf6:	d000      	beq.n	8cdfa <_read_r+0x1e>
   8cdf8:	bd38      	pop	{r3, r4, r5, pc}
   8cdfa:	682b      	ldr	r3, [r5, #0]
   8cdfc:	2b00      	cmp	r3, #0
   8cdfe:	d0fb      	beq.n	8cdf8 <_read_r+0x1c>
   8ce00:	6023      	str	r3, [r4, #0]
   8ce02:	bd38      	pop	{r3, r4, r5, pc}
   8ce04:	2007346c 	.word	0x2007346c

0008ce08 <__aeabi_drsub>:
   8ce08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8ce0c:	e002      	b.n	8ce14 <__adddf3>
   8ce0e:	bf00      	nop

0008ce10 <__aeabi_dsub>:
   8ce10:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008ce14 <__adddf3>:
   8ce14:	b530      	push	{r4, r5, lr}
   8ce16:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8ce1a:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8ce1e:	ea94 0f05 	teq	r4, r5
   8ce22:	bf08      	it	eq
   8ce24:	ea90 0f02 	teqeq	r0, r2
   8ce28:	bf1f      	itttt	ne
   8ce2a:	ea54 0c00 	orrsne.w	ip, r4, r0
   8ce2e:	ea55 0c02 	orrsne.w	ip, r5, r2
   8ce32:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8ce36:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8ce3a:	f000 80e2 	beq.w	8d002 <__adddf3+0x1ee>
   8ce3e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8ce42:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8ce46:	bfb8      	it	lt
   8ce48:	426d      	neglt	r5, r5
   8ce4a:	dd0c      	ble.n	8ce66 <__adddf3+0x52>
   8ce4c:	442c      	add	r4, r5
   8ce4e:	ea80 0202 	eor.w	r2, r0, r2
   8ce52:	ea81 0303 	eor.w	r3, r1, r3
   8ce56:	ea82 0000 	eor.w	r0, r2, r0
   8ce5a:	ea83 0101 	eor.w	r1, r3, r1
   8ce5e:	ea80 0202 	eor.w	r2, r0, r2
   8ce62:	ea81 0303 	eor.w	r3, r1, r3
   8ce66:	2d36      	cmp	r5, #54	; 0x36
   8ce68:	bf88      	it	hi
   8ce6a:	bd30      	pophi	{r4, r5, pc}
   8ce6c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8ce70:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8ce74:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8ce78:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8ce7c:	d002      	beq.n	8ce84 <__adddf3+0x70>
   8ce7e:	4240      	negs	r0, r0
   8ce80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8ce84:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8ce88:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8ce8c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8ce90:	d002      	beq.n	8ce98 <__adddf3+0x84>
   8ce92:	4252      	negs	r2, r2
   8ce94:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8ce98:	ea94 0f05 	teq	r4, r5
   8ce9c:	f000 80a7 	beq.w	8cfee <__adddf3+0x1da>
   8cea0:	f1a4 0401 	sub.w	r4, r4, #1
   8cea4:	f1d5 0e20 	rsbs	lr, r5, #32
   8cea8:	db0d      	blt.n	8cec6 <__adddf3+0xb2>
   8ceaa:	fa02 fc0e 	lsl.w	ip, r2, lr
   8ceae:	fa22 f205 	lsr.w	r2, r2, r5
   8ceb2:	1880      	adds	r0, r0, r2
   8ceb4:	f141 0100 	adc.w	r1, r1, #0
   8ceb8:	fa03 f20e 	lsl.w	r2, r3, lr
   8cebc:	1880      	adds	r0, r0, r2
   8cebe:	fa43 f305 	asr.w	r3, r3, r5
   8cec2:	4159      	adcs	r1, r3
   8cec4:	e00e      	b.n	8cee4 <__adddf3+0xd0>
   8cec6:	f1a5 0520 	sub.w	r5, r5, #32
   8ceca:	f10e 0e20 	add.w	lr, lr, #32
   8cece:	2a01      	cmp	r2, #1
   8ced0:	fa03 fc0e 	lsl.w	ip, r3, lr
   8ced4:	bf28      	it	cs
   8ced6:	f04c 0c02 	orrcs.w	ip, ip, #2
   8ceda:	fa43 f305 	asr.w	r3, r3, r5
   8cede:	18c0      	adds	r0, r0, r3
   8cee0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8cee4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8cee8:	d507      	bpl.n	8cefa <__adddf3+0xe6>
   8ceea:	f04f 0e00 	mov.w	lr, #0
   8ceee:	f1dc 0c00 	rsbs	ip, ip, #0
   8cef2:	eb7e 0000 	sbcs.w	r0, lr, r0
   8cef6:	eb6e 0101 	sbc.w	r1, lr, r1
   8cefa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8cefe:	d31b      	bcc.n	8cf38 <__adddf3+0x124>
   8cf00:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8cf04:	d30c      	bcc.n	8cf20 <__adddf3+0x10c>
   8cf06:	0849      	lsrs	r1, r1, #1
   8cf08:	ea5f 0030 	movs.w	r0, r0, rrx
   8cf0c:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8cf10:	f104 0401 	add.w	r4, r4, #1
   8cf14:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8cf18:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8cf1c:	f080 809a 	bcs.w	8d054 <__adddf3+0x240>
   8cf20:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8cf24:	bf08      	it	eq
   8cf26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8cf2a:	f150 0000 	adcs.w	r0, r0, #0
   8cf2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8cf32:	ea41 0105 	orr.w	r1, r1, r5
   8cf36:	bd30      	pop	{r4, r5, pc}
   8cf38:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8cf3c:	4140      	adcs	r0, r0
   8cf3e:	eb41 0101 	adc.w	r1, r1, r1
   8cf42:	3c01      	subs	r4, #1
   8cf44:	bf28      	it	cs
   8cf46:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8cf4a:	d2e9      	bcs.n	8cf20 <__adddf3+0x10c>
   8cf4c:	f091 0f00 	teq	r1, #0
   8cf50:	bf04      	itt	eq
   8cf52:	4601      	moveq	r1, r0
   8cf54:	2000      	moveq	r0, #0
   8cf56:	fab1 f381 	clz	r3, r1
   8cf5a:	bf08      	it	eq
   8cf5c:	3320      	addeq	r3, #32
   8cf5e:	f1a3 030b 	sub.w	r3, r3, #11
   8cf62:	f1b3 0220 	subs.w	r2, r3, #32
   8cf66:	da0c      	bge.n	8cf82 <__adddf3+0x16e>
   8cf68:	320c      	adds	r2, #12
   8cf6a:	dd08      	ble.n	8cf7e <__adddf3+0x16a>
   8cf6c:	f102 0c14 	add.w	ip, r2, #20
   8cf70:	f1c2 020c 	rsb	r2, r2, #12
   8cf74:	fa01 f00c 	lsl.w	r0, r1, ip
   8cf78:	fa21 f102 	lsr.w	r1, r1, r2
   8cf7c:	e00c      	b.n	8cf98 <__adddf3+0x184>
   8cf7e:	f102 0214 	add.w	r2, r2, #20
   8cf82:	bfd8      	it	le
   8cf84:	f1c2 0c20 	rsble	ip, r2, #32
   8cf88:	fa01 f102 	lsl.w	r1, r1, r2
   8cf8c:	fa20 fc0c 	lsr.w	ip, r0, ip
   8cf90:	bfdc      	itt	le
   8cf92:	ea41 010c 	orrle.w	r1, r1, ip
   8cf96:	4090      	lslle	r0, r2
   8cf98:	1ae4      	subs	r4, r4, r3
   8cf9a:	bfa2      	ittt	ge
   8cf9c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8cfa0:	4329      	orrge	r1, r5
   8cfa2:	bd30      	popge	{r4, r5, pc}
   8cfa4:	ea6f 0404 	mvn.w	r4, r4
   8cfa8:	3c1f      	subs	r4, #31
   8cfaa:	da1c      	bge.n	8cfe6 <__adddf3+0x1d2>
   8cfac:	340c      	adds	r4, #12
   8cfae:	dc0e      	bgt.n	8cfce <__adddf3+0x1ba>
   8cfb0:	f104 0414 	add.w	r4, r4, #20
   8cfb4:	f1c4 0220 	rsb	r2, r4, #32
   8cfb8:	fa20 f004 	lsr.w	r0, r0, r4
   8cfbc:	fa01 f302 	lsl.w	r3, r1, r2
   8cfc0:	ea40 0003 	orr.w	r0, r0, r3
   8cfc4:	fa21 f304 	lsr.w	r3, r1, r4
   8cfc8:	ea45 0103 	orr.w	r1, r5, r3
   8cfcc:	bd30      	pop	{r4, r5, pc}
   8cfce:	f1c4 040c 	rsb	r4, r4, #12
   8cfd2:	f1c4 0220 	rsb	r2, r4, #32
   8cfd6:	fa20 f002 	lsr.w	r0, r0, r2
   8cfda:	fa01 f304 	lsl.w	r3, r1, r4
   8cfde:	ea40 0003 	orr.w	r0, r0, r3
   8cfe2:	4629      	mov	r1, r5
   8cfe4:	bd30      	pop	{r4, r5, pc}
   8cfe6:	fa21 f004 	lsr.w	r0, r1, r4
   8cfea:	4629      	mov	r1, r5
   8cfec:	bd30      	pop	{r4, r5, pc}
   8cfee:	f094 0f00 	teq	r4, #0
   8cff2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8cff6:	bf06      	itte	eq
   8cff8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8cffc:	3401      	addeq	r4, #1
   8cffe:	3d01      	subne	r5, #1
   8d000:	e74e      	b.n	8cea0 <__adddf3+0x8c>
   8d002:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8d006:	bf18      	it	ne
   8d008:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8d00c:	d029      	beq.n	8d062 <__adddf3+0x24e>
   8d00e:	ea94 0f05 	teq	r4, r5
   8d012:	bf08      	it	eq
   8d014:	ea90 0f02 	teqeq	r0, r2
   8d018:	d005      	beq.n	8d026 <__adddf3+0x212>
   8d01a:	ea54 0c00 	orrs.w	ip, r4, r0
   8d01e:	bf04      	itt	eq
   8d020:	4619      	moveq	r1, r3
   8d022:	4610      	moveq	r0, r2
   8d024:	bd30      	pop	{r4, r5, pc}
   8d026:	ea91 0f03 	teq	r1, r3
   8d02a:	bf1e      	ittt	ne
   8d02c:	2100      	movne	r1, #0
   8d02e:	2000      	movne	r0, #0
   8d030:	bd30      	popne	{r4, r5, pc}
   8d032:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8d036:	d105      	bne.n	8d044 <__adddf3+0x230>
   8d038:	0040      	lsls	r0, r0, #1
   8d03a:	4149      	adcs	r1, r1
   8d03c:	bf28      	it	cs
   8d03e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8d042:	bd30      	pop	{r4, r5, pc}
   8d044:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8d048:	bf3c      	itt	cc
   8d04a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8d04e:	bd30      	popcc	{r4, r5, pc}
   8d050:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d054:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8d058:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8d05c:	f04f 0000 	mov.w	r0, #0
   8d060:	bd30      	pop	{r4, r5, pc}
   8d062:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8d066:	bf1a      	itte	ne
   8d068:	4619      	movne	r1, r3
   8d06a:	4610      	movne	r0, r2
   8d06c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8d070:	bf1c      	itt	ne
   8d072:	460b      	movne	r3, r1
   8d074:	4602      	movne	r2, r0
   8d076:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8d07a:	bf06      	itte	eq
   8d07c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8d080:	ea91 0f03 	teqeq	r1, r3
   8d084:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8d088:	bd30      	pop	{r4, r5, pc}
   8d08a:	bf00      	nop

0008d08c <__aeabi_ui2d>:
   8d08c:	f090 0f00 	teq	r0, #0
   8d090:	bf04      	itt	eq
   8d092:	2100      	moveq	r1, #0
   8d094:	4770      	bxeq	lr
   8d096:	b530      	push	{r4, r5, lr}
   8d098:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d09c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d0a0:	f04f 0500 	mov.w	r5, #0
   8d0a4:	f04f 0100 	mov.w	r1, #0
   8d0a8:	e750      	b.n	8cf4c <__adddf3+0x138>
   8d0aa:	bf00      	nop

0008d0ac <__aeabi_i2d>:
   8d0ac:	f090 0f00 	teq	r0, #0
   8d0b0:	bf04      	itt	eq
   8d0b2:	2100      	moveq	r1, #0
   8d0b4:	4770      	bxeq	lr
   8d0b6:	b530      	push	{r4, r5, lr}
   8d0b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d0bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d0c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8d0c4:	bf48      	it	mi
   8d0c6:	4240      	negmi	r0, r0
   8d0c8:	f04f 0100 	mov.w	r1, #0
   8d0cc:	e73e      	b.n	8cf4c <__adddf3+0x138>
   8d0ce:	bf00      	nop

0008d0d0 <__aeabi_f2d>:
   8d0d0:	0042      	lsls	r2, r0, #1
   8d0d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8d0d6:	ea4f 0131 	mov.w	r1, r1, rrx
   8d0da:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8d0de:	bf1f      	itttt	ne
   8d0e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8d0e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8d0e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8d0ec:	4770      	bxne	lr
   8d0ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8d0f2:	bf08      	it	eq
   8d0f4:	4770      	bxeq	lr
   8d0f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8d0fa:	bf04      	itt	eq
   8d0fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8d100:	4770      	bxeq	lr
   8d102:	b530      	push	{r4, r5, lr}
   8d104:	f44f 7460 	mov.w	r4, #896	; 0x380
   8d108:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8d10c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8d110:	e71c      	b.n	8cf4c <__adddf3+0x138>
   8d112:	bf00      	nop

0008d114 <__aeabi_ul2d>:
   8d114:	ea50 0201 	orrs.w	r2, r0, r1
   8d118:	bf08      	it	eq
   8d11a:	4770      	bxeq	lr
   8d11c:	b530      	push	{r4, r5, lr}
   8d11e:	f04f 0500 	mov.w	r5, #0
   8d122:	e00a      	b.n	8d13a <__aeabi_l2d+0x16>

0008d124 <__aeabi_l2d>:
   8d124:	ea50 0201 	orrs.w	r2, r0, r1
   8d128:	bf08      	it	eq
   8d12a:	4770      	bxeq	lr
   8d12c:	b530      	push	{r4, r5, lr}
   8d12e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8d132:	d502      	bpl.n	8d13a <__aeabi_l2d+0x16>
   8d134:	4240      	negs	r0, r0
   8d136:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8d13a:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8d13e:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8d142:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8d146:	f43f aed8 	beq.w	8cefa <__adddf3+0xe6>
   8d14a:	f04f 0203 	mov.w	r2, #3
   8d14e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8d152:	bf18      	it	ne
   8d154:	3203      	addne	r2, #3
   8d156:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8d15a:	bf18      	it	ne
   8d15c:	3203      	addne	r2, #3
   8d15e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8d162:	f1c2 0320 	rsb	r3, r2, #32
   8d166:	fa00 fc03 	lsl.w	ip, r0, r3
   8d16a:	fa20 f002 	lsr.w	r0, r0, r2
   8d16e:	fa01 fe03 	lsl.w	lr, r1, r3
   8d172:	ea40 000e 	orr.w	r0, r0, lr
   8d176:	fa21 f102 	lsr.w	r1, r1, r2
   8d17a:	4414      	add	r4, r2
   8d17c:	e6bd      	b.n	8cefa <__adddf3+0xe6>
   8d17e:	bf00      	nop

0008d180 <__aeabi_dmul>:
   8d180:	b570      	push	{r4, r5, r6, lr}
   8d182:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8d186:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8d18a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8d18e:	bf1d      	ittte	ne
   8d190:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8d194:	ea94 0f0c 	teqne	r4, ip
   8d198:	ea95 0f0c 	teqne	r5, ip
   8d19c:	f000 f8de 	bleq	8d35c <__aeabi_dmul+0x1dc>
   8d1a0:	442c      	add	r4, r5
   8d1a2:	ea81 0603 	eor.w	r6, r1, r3
   8d1a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8d1aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8d1ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8d1b2:	bf18      	it	ne
   8d1b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8d1b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d1bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8d1c0:	d038      	beq.n	8d234 <__aeabi_dmul+0xb4>
   8d1c2:	fba0 ce02 	umull	ip, lr, r0, r2
   8d1c6:	f04f 0500 	mov.w	r5, #0
   8d1ca:	fbe1 e502 	umlal	lr, r5, r1, r2
   8d1ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8d1d2:	fbe0 e503 	umlal	lr, r5, r0, r3
   8d1d6:	f04f 0600 	mov.w	r6, #0
   8d1da:	fbe1 5603 	umlal	r5, r6, r1, r3
   8d1de:	f09c 0f00 	teq	ip, #0
   8d1e2:	bf18      	it	ne
   8d1e4:	f04e 0e01 	orrne.w	lr, lr, #1
   8d1e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8d1ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8d1f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8d1f4:	d204      	bcs.n	8d200 <__aeabi_dmul+0x80>
   8d1f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8d1fa:	416d      	adcs	r5, r5
   8d1fc:	eb46 0606 	adc.w	r6, r6, r6
   8d200:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8d204:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8d208:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8d20c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8d210:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8d214:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8d218:	bf88      	it	hi
   8d21a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8d21e:	d81e      	bhi.n	8d25e <__aeabi_dmul+0xde>
   8d220:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8d224:	bf08      	it	eq
   8d226:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8d22a:	f150 0000 	adcs.w	r0, r0, #0
   8d22e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d232:	bd70      	pop	{r4, r5, r6, pc}
   8d234:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8d238:	ea46 0101 	orr.w	r1, r6, r1
   8d23c:	ea40 0002 	orr.w	r0, r0, r2
   8d240:	ea81 0103 	eor.w	r1, r1, r3
   8d244:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8d248:	bfc2      	ittt	gt
   8d24a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8d24e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8d252:	bd70      	popgt	{r4, r5, r6, pc}
   8d254:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d258:	f04f 0e00 	mov.w	lr, #0
   8d25c:	3c01      	subs	r4, #1
   8d25e:	f300 80ab 	bgt.w	8d3b8 <__aeabi_dmul+0x238>
   8d262:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8d266:	bfde      	ittt	le
   8d268:	2000      	movle	r0, #0
   8d26a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8d26e:	bd70      	pople	{r4, r5, r6, pc}
   8d270:	f1c4 0400 	rsb	r4, r4, #0
   8d274:	3c20      	subs	r4, #32
   8d276:	da35      	bge.n	8d2e4 <__aeabi_dmul+0x164>
   8d278:	340c      	adds	r4, #12
   8d27a:	dc1b      	bgt.n	8d2b4 <__aeabi_dmul+0x134>
   8d27c:	f104 0414 	add.w	r4, r4, #20
   8d280:	f1c4 0520 	rsb	r5, r4, #32
   8d284:	fa00 f305 	lsl.w	r3, r0, r5
   8d288:	fa20 f004 	lsr.w	r0, r0, r4
   8d28c:	fa01 f205 	lsl.w	r2, r1, r5
   8d290:	ea40 0002 	orr.w	r0, r0, r2
   8d294:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8d298:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8d29c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8d2a0:	fa21 f604 	lsr.w	r6, r1, r4
   8d2a4:	eb42 0106 	adc.w	r1, r2, r6
   8d2a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d2ac:	bf08      	it	eq
   8d2ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d2b2:	bd70      	pop	{r4, r5, r6, pc}
   8d2b4:	f1c4 040c 	rsb	r4, r4, #12
   8d2b8:	f1c4 0520 	rsb	r5, r4, #32
   8d2bc:	fa00 f304 	lsl.w	r3, r0, r4
   8d2c0:	fa20 f005 	lsr.w	r0, r0, r5
   8d2c4:	fa01 f204 	lsl.w	r2, r1, r4
   8d2c8:	ea40 0002 	orr.w	r0, r0, r2
   8d2cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d2d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8d2d4:	f141 0100 	adc.w	r1, r1, #0
   8d2d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d2dc:	bf08      	it	eq
   8d2de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d2e2:	bd70      	pop	{r4, r5, r6, pc}
   8d2e4:	f1c4 0520 	rsb	r5, r4, #32
   8d2e8:	fa00 f205 	lsl.w	r2, r0, r5
   8d2ec:	ea4e 0e02 	orr.w	lr, lr, r2
   8d2f0:	fa20 f304 	lsr.w	r3, r0, r4
   8d2f4:	fa01 f205 	lsl.w	r2, r1, r5
   8d2f8:	ea43 0302 	orr.w	r3, r3, r2
   8d2fc:	fa21 f004 	lsr.w	r0, r1, r4
   8d300:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d304:	fa21 f204 	lsr.w	r2, r1, r4
   8d308:	ea20 0002 	bic.w	r0, r0, r2
   8d30c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8d310:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8d314:	bf08      	it	eq
   8d316:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8d31a:	bd70      	pop	{r4, r5, r6, pc}
   8d31c:	f094 0f00 	teq	r4, #0
   8d320:	d10f      	bne.n	8d342 <__aeabi_dmul+0x1c2>
   8d322:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8d326:	0040      	lsls	r0, r0, #1
   8d328:	eb41 0101 	adc.w	r1, r1, r1
   8d32c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d330:	bf08      	it	eq
   8d332:	3c01      	subeq	r4, #1
   8d334:	d0f7      	beq.n	8d326 <__aeabi_dmul+0x1a6>
   8d336:	ea41 0106 	orr.w	r1, r1, r6
   8d33a:	f095 0f00 	teq	r5, #0
   8d33e:	bf18      	it	ne
   8d340:	4770      	bxne	lr
   8d342:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8d346:	0052      	lsls	r2, r2, #1
   8d348:	eb43 0303 	adc.w	r3, r3, r3
   8d34c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8d350:	bf08      	it	eq
   8d352:	3d01      	subeq	r5, #1
   8d354:	d0f7      	beq.n	8d346 <__aeabi_dmul+0x1c6>
   8d356:	ea43 0306 	orr.w	r3, r3, r6
   8d35a:	4770      	bx	lr
   8d35c:	ea94 0f0c 	teq	r4, ip
   8d360:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8d364:	bf18      	it	ne
   8d366:	ea95 0f0c 	teqne	r5, ip
   8d36a:	d00c      	beq.n	8d386 <__aeabi_dmul+0x206>
   8d36c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d370:	bf18      	it	ne
   8d372:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d376:	d1d1      	bne.n	8d31c <__aeabi_dmul+0x19c>
   8d378:	ea81 0103 	eor.w	r1, r1, r3
   8d37c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d380:	f04f 0000 	mov.w	r0, #0
   8d384:	bd70      	pop	{r4, r5, r6, pc}
   8d386:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d38a:	bf06      	itte	eq
   8d38c:	4610      	moveq	r0, r2
   8d38e:	4619      	moveq	r1, r3
   8d390:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d394:	d019      	beq.n	8d3ca <__aeabi_dmul+0x24a>
   8d396:	ea94 0f0c 	teq	r4, ip
   8d39a:	d102      	bne.n	8d3a2 <__aeabi_dmul+0x222>
   8d39c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8d3a0:	d113      	bne.n	8d3ca <__aeabi_dmul+0x24a>
   8d3a2:	ea95 0f0c 	teq	r5, ip
   8d3a6:	d105      	bne.n	8d3b4 <__aeabi_dmul+0x234>
   8d3a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8d3ac:	bf1c      	itt	ne
   8d3ae:	4610      	movne	r0, r2
   8d3b0:	4619      	movne	r1, r3
   8d3b2:	d10a      	bne.n	8d3ca <__aeabi_dmul+0x24a>
   8d3b4:	ea81 0103 	eor.w	r1, r1, r3
   8d3b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8d3bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8d3c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8d3c4:	f04f 0000 	mov.w	r0, #0
   8d3c8:	bd70      	pop	{r4, r5, r6, pc}
   8d3ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8d3ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8d3d2:	bd70      	pop	{r4, r5, r6, pc}

0008d3d4 <__aeabi_ddiv>:
   8d3d4:	b570      	push	{r4, r5, r6, lr}
   8d3d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8d3da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8d3de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8d3e2:	bf1d      	ittte	ne
   8d3e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8d3e8:	ea94 0f0c 	teqne	r4, ip
   8d3ec:	ea95 0f0c 	teqne	r5, ip
   8d3f0:	f000 f8a7 	bleq	8d542 <__aeabi_ddiv+0x16e>
   8d3f4:	eba4 0405 	sub.w	r4, r4, r5
   8d3f8:	ea81 0e03 	eor.w	lr, r1, r3
   8d3fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8d400:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8d404:	f000 8088 	beq.w	8d518 <__aeabi_ddiv+0x144>
   8d408:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8d40c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8d410:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8d414:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8d418:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8d41c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8d420:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8d424:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8d428:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8d42c:	429d      	cmp	r5, r3
   8d42e:	bf08      	it	eq
   8d430:	4296      	cmpeq	r6, r2
   8d432:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8d436:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8d43a:	d202      	bcs.n	8d442 <__aeabi_ddiv+0x6e>
   8d43c:	085b      	lsrs	r3, r3, #1
   8d43e:	ea4f 0232 	mov.w	r2, r2, rrx
   8d442:	1ab6      	subs	r6, r6, r2
   8d444:	eb65 0503 	sbc.w	r5, r5, r3
   8d448:	085b      	lsrs	r3, r3, #1
   8d44a:	ea4f 0232 	mov.w	r2, r2, rrx
   8d44e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8d452:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8d456:	ebb6 0e02 	subs.w	lr, r6, r2
   8d45a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d45e:	bf22      	ittt	cs
   8d460:	1ab6      	subcs	r6, r6, r2
   8d462:	4675      	movcs	r5, lr
   8d464:	ea40 000c 	orrcs.w	r0, r0, ip
   8d468:	085b      	lsrs	r3, r3, #1
   8d46a:	ea4f 0232 	mov.w	r2, r2, rrx
   8d46e:	ebb6 0e02 	subs.w	lr, r6, r2
   8d472:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d476:	bf22      	ittt	cs
   8d478:	1ab6      	subcs	r6, r6, r2
   8d47a:	4675      	movcs	r5, lr
   8d47c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8d480:	085b      	lsrs	r3, r3, #1
   8d482:	ea4f 0232 	mov.w	r2, r2, rrx
   8d486:	ebb6 0e02 	subs.w	lr, r6, r2
   8d48a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d48e:	bf22      	ittt	cs
   8d490:	1ab6      	subcs	r6, r6, r2
   8d492:	4675      	movcs	r5, lr
   8d494:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8d498:	085b      	lsrs	r3, r3, #1
   8d49a:	ea4f 0232 	mov.w	r2, r2, rrx
   8d49e:	ebb6 0e02 	subs.w	lr, r6, r2
   8d4a2:	eb75 0e03 	sbcs.w	lr, r5, r3
   8d4a6:	bf22      	ittt	cs
   8d4a8:	1ab6      	subcs	r6, r6, r2
   8d4aa:	4675      	movcs	r5, lr
   8d4ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8d4b0:	ea55 0e06 	orrs.w	lr, r5, r6
   8d4b4:	d018      	beq.n	8d4e8 <__aeabi_ddiv+0x114>
   8d4b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8d4ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8d4be:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8d4c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8d4c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8d4ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8d4ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8d4d2:	d1c0      	bne.n	8d456 <__aeabi_ddiv+0x82>
   8d4d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d4d8:	d10b      	bne.n	8d4f2 <__aeabi_ddiv+0x11e>
   8d4da:	ea41 0100 	orr.w	r1, r1, r0
   8d4de:	f04f 0000 	mov.w	r0, #0
   8d4e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8d4e6:	e7b6      	b.n	8d456 <__aeabi_ddiv+0x82>
   8d4e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8d4ec:	bf04      	itt	eq
   8d4ee:	4301      	orreq	r1, r0
   8d4f0:	2000      	moveq	r0, #0
   8d4f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8d4f6:	bf88      	it	hi
   8d4f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8d4fc:	f63f aeaf 	bhi.w	8d25e <__aeabi_dmul+0xde>
   8d500:	ebb5 0c03 	subs.w	ip, r5, r3
   8d504:	bf04      	itt	eq
   8d506:	ebb6 0c02 	subseq.w	ip, r6, r2
   8d50a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8d50e:	f150 0000 	adcs.w	r0, r0, #0
   8d512:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8d516:	bd70      	pop	{r4, r5, r6, pc}
   8d518:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8d51c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8d520:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8d524:	bfc2      	ittt	gt
   8d526:	ebd4 050c 	rsbsgt	r5, r4, ip
   8d52a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8d52e:	bd70      	popgt	{r4, r5, r6, pc}
   8d530:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8d534:	f04f 0e00 	mov.w	lr, #0
   8d538:	3c01      	subs	r4, #1
   8d53a:	e690      	b.n	8d25e <__aeabi_dmul+0xde>
   8d53c:	ea45 0e06 	orr.w	lr, r5, r6
   8d540:	e68d      	b.n	8d25e <__aeabi_dmul+0xde>
   8d542:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8d546:	ea94 0f0c 	teq	r4, ip
   8d54a:	bf08      	it	eq
   8d54c:	ea95 0f0c 	teqeq	r5, ip
   8d550:	f43f af3b 	beq.w	8d3ca <__aeabi_dmul+0x24a>
   8d554:	ea94 0f0c 	teq	r4, ip
   8d558:	d10a      	bne.n	8d570 <__aeabi_ddiv+0x19c>
   8d55a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8d55e:	f47f af34 	bne.w	8d3ca <__aeabi_dmul+0x24a>
   8d562:	ea95 0f0c 	teq	r5, ip
   8d566:	f47f af25 	bne.w	8d3b4 <__aeabi_dmul+0x234>
   8d56a:	4610      	mov	r0, r2
   8d56c:	4619      	mov	r1, r3
   8d56e:	e72c      	b.n	8d3ca <__aeabi_dmul+0x24a>
   8d570:	ea95 0f0c 	teq	r5, ip
   8d574:	d106      	bne.n	8d584 <__aeabi_ddiv+0x1b0>
   8d576:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8d57a:	f43f aefd 	beq.w	8d378 <__aeabi_dmul+0x1f8>
   8d57e:	4610      	mov	r0, r2
   8d580:	4619      	mov	r1, r3
   8d582:	e722      	b.n	8d3ca <__aeabi_dmul+0x24a>
   8d584:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8d588:	bf18      	it	ne
   8d58a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8d58e:	f47f aec5 	bne.w	8d31c <__aeabi_dmul+0x19c>
   8d592:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8d596:	f47f af0d 	bne.w	8d3b4 <__aeabi_dmul+0x234>
   8d59a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8d59e:	f47f aeeb 	bne.w	8d378 <__aeabi_dmul+0x1f8>
   8d5a2:	e712      	b.n	8d3ca <__aeabi_dmul+0x24a>

0008d5a4 <__gedf2>:
   8d5a4:	f04f 3cff 	mov.w	ip, #4294967295
   8d5a8:	e006      	b.n	8d5b8 <__cmpdf2+0x4>
   8d5aa:	bf00      	nop

0008d5ac <__ledf2>:
   8d5ac:	f04f 0c01 	mov.w	ip, #1
   8d5b0:	e002      	b.n	8d5b8 <__cmpdf2+0x4>
   8d5b2:	bf00      	nop

0008d5b4 <__cmpdf2>:
   8d5b4:	f04f 0c01 	mov.w	ip, #1
   8d5b8:	f84d cd04 	str.w	ip, [sp, #-4]!
   8d5bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d5c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d5c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d5c8:	bf18      	it	ne
   8d5ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8d5ce:	d01b      	beq.n	8d608 <__cmpdf2+0x54>
   8d5d0:	b001      	add	sp, #4
   8d5d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8d5d6:	bf0c      	ite	eq
   8d5d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8d5dc:	ea91 0f03 	teqne	r1, r3
   8d5e0:	bf02      	ittt	eq
   8d5e2:	ea90 0f02 	teqeq	r0, r2
   8d5e6:	2000      	moveq	r0, #0
   8d5e8:	4770      	bxeq	lr
   8d5ea:	f110 0f00 	cmn.w	r0, #0
   8d5ee:	ea91 0f03 	teq	r1, r3
   8d5f2:	bf58      	it	pl
   8d5f4:	4299      	cmppl	r1, r3
   8d5f6:	bf08      	it	eq
   8d5f8:	4290      	cmpeq	r0, r2
   8d5fa:	bf2c      	ite	cs
   8d5fc:	17d8      	asrcs	r0, r3, #31
   8d5fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8d602:	f040 0001 	orr.w	r0, r0, #1
   8d606:	4770      	bx	lr
   8d608:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d60c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d610:	d102      	bne.n	8d618 <__cmpdf2+0x64>
   8d612:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d616:	d107      	bne.n	8d628 <__cmpdf2+0x74>
   8d618:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d61c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d620:	d1d6      	bne.n	8d5d0 <__cmpdf2+0x1c>
   8d622:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d626:	d0d3      	beq.n	8d5d0 <__cmpdf2+0x1c>
   8d628:	f85d 0b04 	ldr.w	r0, [sp], #4
   8d62c:	4770      	bx	lr
   8d62e:	bf00      	nop

0008d630 <__aeabi_cdrcmple>:
   8d630:	4684      	mov	ip, r0
   8d632:	4610      	mov	r0, r2
   8d634:	4662      	mov	r2, ip
   8d636:	468c      	mov	ip, r1
   8d638:	4619      	mov	r1, r3
   8d63a:	4663      	mov	r3, ip
   8d63c:	e000      	b.n	8d640 <__aeabi_cdcmpeq>
   8d63e:	bf00      	nop

0008d640 <__aeabi_cdcmpeq>:
   8d640:	b501      	push	{r0, lr}
   8d642:	f7ff ffb7 	bl	8d5b4 <__cmpdf2>
   8d646:	2800      	cmp	r0, #0
   8d648:	bf48      	it	mi
   8d64a:	f110 0f00 	cmnmi.w	r0, #0
   8d64e:	bd01      	pop	{r0, pc}

0008d650 <__aeabi_dcmpeq>:
   8d650:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d654:	f7ff fff4 	bl	8d640 <__aeabi_cdcmpeq>
   8d658:	bf0c      	ite	eq
   8d65a:	2001      	moveq	r0, #1
   8d65c:	2000      	movne	r0, #0
   8d65e:	f85d fb08 	ldr.w	pc, [sp], #8
   8d662:	bf00      	nop

0008d664 <__aeabi_dcmplt>:
   8d664:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d668:	f7ff ffea 	bl	8d640 <__aeabi_cdcmpeq>
   8d66c:	bf34      	ite	cc
   8d66e:	2001      	movcc	r0, #1
   8d670:	2000      	movcs	r0, #0
   8d672:	f85d fb08 	ldr.w	pc, [sp], #8
   8d676:	bf00      	nop

0008d678 <__aeabi_dcmple>:
   8d678:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d67c:	f7ff ffe0 	bl	8d640 <__aeabi_cdcmpeq>
   8d680:	bf94      	ite	ls
   8d682:	2001      	movls	r0, #1
   8d684:	2000      	movhi	r0, #0
   8d686:	f85d fb08 	ldr.w	pc, [sp], #8
   8d68a:	bf00      	nop

0008d68c <__aeabi_dcmpge>:
   8d68c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d690:	f7ff ffce 	bl	8d630 <__aeabi_cdrcmple>
   8d694:	bf94      	ite	ls
   8d696:	2001      	movls	r0, #1
   8d698:	2000      	movhi	r0, #0
   8d69a:	f85d fb08 	ldr.w	pc, [sp], #8
   8d69e:	bf00      	nop

0008d6a0 <__aeabi_dcmpgt>:
   8d6a0:	f84d ed08 	str.w	lr, [sp, #-8]!
   8d6a4:	f7ff ffc4 	bl	8d630 <__aeabi_cdrcmple>
   8d6a8:	bf34      	ite	cc
   8d6aa:	2001      	movcc	r0, #1
   8d6ac:	2000      	movcs	r0, #0
   8d6ae:	f85d fb08 	ldr.w	pc, [sp], #8
   8d6b2:	bf00      	nop

0008d6b4 <__aeabi_dcmpun>:
   8d6b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8d6b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d6bc:	d102      	bne.n	8d6c4 <__aeabi_dcmpun+0x10>
   8d6be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8d6c2:	d10a      	bne.n	8d6da <__aeabi_dcmpun+0x26>
   8d6c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8d6c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8d6cc:	d102      	bne.n	8d6d4 <__aeabi_dcmpun+0x20>
   8d6ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8d6d2:	d102      	bne.n	8d6da <__aeabi_dcmpun+0x26>
   8d6d4:	f04f 0000 	mov.w	r0, #0
   8d6d8:	4770      	bx	lr
   8d6da:	f04f 0001 	mov.w	r0, #1
   8d6de:	4770      	bx	lr

0008d6e0 <__aeabi_d2iz>:
   8d6e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8d6e4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8d6e8:	d215      	bcs.n	8d716 <__aeabi_d2iz+0x36>
   8d6ea:	d511      	bpl.n	8d710 <__aeabi_d2iz+0x30>
   8d6ec:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8d6f0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8d6f4:	d912      	bls.n	8d71c <__aeabi_d2iz+0x3c>
   8d6f6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8d6fa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8d6fe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8d702:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8d706:	fa23 f002 	lsr.w	r0, r3, r2
   8d70a:	bf18      	it	ne
   8d70c:	4240      	negne	r0, r0
   8d70e:	4770      	bx	lr
   8d710:	f04f 0000 	mov.w	r0, #0
   8d714:	4770      	bx	lr
   8d716:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8d71a:	d105      	bne.n	8d728 <__aeabi_d2iz+0x48>
   8d71c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8d720:	bf08      	it	eq
   8d722:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8d726:	4770      	bx	lr
   8d728:	f04f 0000 	mov.w	r0, #0
   8d72c:	4770      	bx	lr
   8d72e:	bf00      	nop

0008d730 <__aeabi_uldivmod>:
   8d730:	b953      	cbnz	r3, 8d748 <__aeabi_uldivmod+0x18>
   8d732:	b94a      	cbnz	r2, 8d748 <__aeabi_uldivmod+0x18>
   8d734:	2900      	cmp	r1, #0
   8d736:	bf08      	it	eq
   8d738:	2800      	cmpeq	r0, #0
   8d73a:	bf1c      	itt	ne
   8d73c:	f04f 31ff 	movne.w	r1, #4294967295
   8d740:	f04f 30ff 	movne.w	r0, #4294967295
   8d744:	f000 b976 	b.w	8da34 <__aeabi_idiv0>
   8d748:	f1ad 0c08 	sub.w	ip, sp, #8
   8d74c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8d750:	f000 f806 	bl	8d760 <__udivmoddi4>
   8d754:	f8dd e004 	ldr.w	lr, [sp, #4]
   8d758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8d75c:	b004      	add	sp, #16
   8d75e:	4770      	bx	lr

0008d760 <__udivmoddi4>:
   8d760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8d764:	9e08      	ldr	r6, [sp, #32]
   8d766:	460d      	mov	r5, r1
   8d768:	4604      	mov	r4, r0
   8d76a:	4688      	mov	r8, r1
   8d76c:	2b00      	cmp	r3, #0
   8d76e:	d14d      	bne.n	8d80c <__udivmoddi4+0xac>
   8d770:	428a      	cmp	r2, r1
   8d772:	4694      	mov	ip, r2
   8d774:	d968      	bls.n	8d848 <__udivmoddi4+0xe8>
   8d776:	fab2 f282 	clz	r2, r2
   8d77a:	b152      	cbz	r2, 8d792 <__udivmoddi4+0x32>
   8d77c:	fa01 f302 	lsl.w	r3, r1, r2
   8d780:	f1c2 0120 	rsb	r1, r2, #32
   8d784:	fa20 f101 	lsr.w	r1, r0, r1
   8d788:	fa0c fc02 	lsl.w	ip, ip, r2
   8d78c:	ea41 0803 	orr.w	r8, r1, r3
   8d790:	4094      	lsls	r4, r2
   8d792:	ea4f 411c 	mov.w	r1, ip, lsr #16
   8d796:	fbb8 f7f1 	udiv	r7, r8, r1
   8d79a:	fa1f fe8c 	uxth.w	lr, ip
   8d79e:	fb01 8817 	mls	r8, r1, r7, r8
   8d7a2:	fb07 f00e 	mul.w	r0, r7, lr
   8d7a6:	0c23      	lsrs	r3, r4, #16
   8d7a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8d7ac:	4298      	cmp	r0, r3
   8d7ae:	d90a      	bls.n	8d7c6 <__udivmoddi4+0x66>
   8d7b0:	eb1c 0303 	adds.w	r3, ip, r3
   8d7b4:	f107 35ff 	add.w	r5, r7, #4294967295
   8d7b8:	f080 811e 	bcs.w	8d9f8 <__udivmoddi4+0x298>
   8d7bc:	4298      	cmp	r0, r3
   8d7be:	f240 811b 	bls.w	8d9f8 <__udivmoddi4+0x298>
   8d7c2:	3f02      	subs	r7, #2
   8d7c4:	4463      	add	r3, ip
   8d7c6:	1a1b      	subs	r3, r3, r0
   8d7c8:	fbb3 f0f1 	udiv	r0, r3, r1
   8d7cc:	fb01 3310 	mls	r3, r1, r0, r3
   8d7d0:	fb00 fe0e 	mul.w	lr, r0, lr
   8d7d4:	b2a4      	uxth	r4, r4
   8d7d6:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   8d7da:	45a6      	cmp	lr, r4
   8d7dc:	d90a      	bls.n	8d7f4 <__udivmoddi4+0x94>
   8d7de:	eb1c 0404 	adds.w	r4, ip, r4
   8d7e2:	f100 33ff 	add.w	r3, r0, #4294967295
   8d7e6:	f080 8109 	bcs.w	8d9fc <__udivmoddi4+0x29c>
   8d7ea:	45a6      	cmp	lr, r4
   8d7ec:	f240 8106 	bls.w	8d9fc <__udivmoddi4+0x29c>
   8d7f0:	4464      	add	r4, ip
   8d7f2:	3802      	subs	r0, #2
   8d7f4:	2100      	movs	r1, #0
   8d7f6:	eba4 040e 	sub.w	r4, r4, lr
   8d7fa:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   8d7fe:	b11e      	cbz	r6, 8d808 <__udivmoddi4+0xa8>
   8d800:	2300      	movs	r3, #0
   8d802:	40d4      	lsrs	r4, r2
   8d804:	e9c6 4300 	strd	r4, r3, [r6]
   8d808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8d80c:	428b      	cmp	r3, r1
   8d80e:	d908      	bls.n	8d822 <__udivmoddi4+0xc2>
   8d810:	2e00      	cmp	r6, #0
   8d812:	f000 80ee 	beq.w	8d9f2 <__udivmoddi4+0x292>
   8d816:	2100      	movs	r1, #0
   8d818:	e9c6 0500 	strd	r0, r5, [r6]
   8d81c:	4608      	mov	r0, r1
   8d81e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8d822:	fab3 f183 	clz	r1, r3
   8d826:	2900      	cmp	r1, #0
   8d828:	d14a      	bne.n	8d8c0 <__udivmoddi4+0x160>
   8d82a:	42ab      	cmp	r3, r5
   8d82c:	d302      	bcc.n	8d834 <__udivmoddi4+0xd4>
   8d82e:	4282      	cmp	r2, r0
   8d830:	f200 80fc 	bhi.w	8da2c <__udivmoddi4+0x2cc>
   8d834:	1a84      	subs	r4, r0, r2
   8d836:	eb65 0303 	sbc.w	r3, r5, r3
   8d83a:	2001      	movs	r0, #1
   8d83c:	4698      	mov	r8, r3
   8d83e:	2e00      	cmp	r6, #0
   8d840:	d0e2      	beq.n	8d808 <__udivmoddi4+0xa8>
   8d842:	e9c6 4800 	strd	r4, r8, [r6]
   8d846:	e7df      	b.n	8d808 <__udivmoddi4+0xa8>
   8d848:	b902      	cbnz	r2, 8d84c <__udivmoddi4+0xec>
   8d84a:	deff      	udf	#255	; 0xff
   8d84c:	fab2 f282 	clz	r2, r2
   8d850:	2a00      	cmp	r2, #0
   8d852:	f040 8091 	bne.w	8d978 <__udivmoddi4+0x218>
   8d856:	eba1 000c 	sub.w	r0, r1, ip
   8d85a:	2101      	movs	r1, #1
   8d85c:	ea4f 471c 	mov.w	r7, ip, lsr #16
   8d860:	fa1f fe8c 	uxth.w	lr, ip
   8d864:	fbb0 f3f7 	udiv	r3, r0, r7
   8d868:	fb07 0013 	mls	r0, r7, r3, r0
   8d86c:	0c25      	lsrs	r5, r4, #16
   8d86e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   8d872:	fb0e f003 	mul.w	r0, lr, r3
   8d876:	42a8      	cmp	r0, r5
   8d878:	d908      	bls.n	8d88c <__udivmoddi4+0x12c>
   8d87a:	eb1c 0505 	adds.w	r5, ip, r5
   8d87e:	f103 38ff 	add.w	r8, r3, #4294967295
   8d882:	d202      	bcs.n	8d88a <__udivmoddi4+0x12a>
   8d884:	42a8      	cmp	r0, r5
   8d886:	f200 80ce 	bhi.w	8da26 <__udivmoddi4+0x2c6>
   8d88a:	4643      	mov	r3, r8
   8d88c:	1a2d      	subs	r5, r5, r0
   8d88e:	fbb5 f0f7 	udiv	r0, r5, r7
   8d892:	fb07 5510 	mls	r5, r7, r0, r5
   8d896:	fb0e fe00 	mul.w	lr, lr, r0
   8d89a:	b2a4      	uxth	r4, r4
   8d89c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8d8a0:	45a6      	cmp	lr, r4
   8d8a2:	d908      	bls.n	8d8b6 <__udivmoddi4+0x156>
   8d8a4:	eb1c 0404 	adds.w	r4, ip, r4
   8d8a8:	f100 35ff 	add.w	r5, r0, #4294967295
   8d8ac:	d202      	bcs.n	8d8b4 <__udivmoddi4+0x154>
   8d8ae:	45a6      	cmp	lr, r4
   8d8b0:	f200 80b6 	bhi.w	8da20 <__udivmoddi4+0x2c0>
   8d8b4:	4628      	mov	r0, r5
   8d8b6:	eba4 040e 	sub.w	r4, r4, lr
   8d8ba:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8d8be:	e79e      	b.n	8d7fe <__udivmoddi4+0x9e>
   8d8c0:	f1c1 0720 	rsb	r7, r1, #32
   8d8c4:	408b      	lsls	r3, r1
   8d8c6:	fa22 fc07 	lsr.w	ip, r2, r7
   8d8ca:	ea4c 0c03 	orr.w	ip, ip, r3
   8d8ce:	fa25 fa07 	lsr.w	sl, r5, r7
   8d8d2:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8d8d6:	fbba f8f9 	udiv	r8, sl, r9
   8d8da:	fa20 f307 	lsr.w	r3, r0, r7
   8d8de:	fb09 aa18 	mls	sl, r9, r8, sl
   8d8e2:	408d      	lsls	r5, r1
   8d8e4:	fa1f fe8c 	uxth.w	lr, ip
   8d8e8:	431d      	orrs	r5, r3
   8d8ea:	fa00 f301 	lsl.w	r3, r0, r1
   8d8ee:	fb08 f00e 	mul.w	r0, r8, lr
   8d8f2:	0c2c      	lsrs	r4, r5, #16
   8d8f4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
   8d8f8:	42a0      	cmp	r0, r4
   8d8fa:	fa02 f201 	lsl.w	r2, r2, r1
   8d8fe:	d90b      	bls.n	8d918 <__udivmoddi4+0x1b8>
   8d900:	eb1c 0404 	adds.w	r4, ip, r4
   8d904:	f108 3aff 	add.w	sl, r8, #4294967295
   8d908:	f080 8088 	bcs.w	8da1c <__udivmoddi4+0x2bc>
   8d90c:	42a0      	cmp	r0, r4
   8d90e:	f240 8085 	bls.w	8da1c <__udivmoddi4+0x2bc>
   8d912:	f1a8 0802 	sub.w	r8, r8, #2
   8d916:	4464      	add	r4, ip
   8d918:	1a24      	subs	r4, r4, r0
   8d91a:	fbb4 f0f9 	udiv	r0, r4, r9
   8d91e:	fb09 4410 	mls	r4, r9, r0, r4
   8d922:	fb00 fe0e 	mul.w	lr, r0, lr
   8d926:	b2ad      	uxth	r5, r5
   8d928:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   8d92c:	45a6      	cmp	lr, r4
   8d92e:	d908      	bls.n	8d942 <__udivmoddi4+0x1e2>
   8d930:	eb1c 0404 	adds.w	r4, ip, r4
   8d934:	f100 35ff 	add.w	r5, r0, #4294967295
   8d938:	d26c      	bcs.n	8da14 <__udivmoddi4+0x2b4>
   8d93a:	45a6      	cmp	lr, r4
   8d93c:	d96a      	bls.n	8da14 <__udivmoddi4+0x2b4>
   8d93e:	3802      	subs	r0, #2
   8d940:	4464      	add	r4, ip
   8d942:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   8d946:	fba0 9502 	umull	r9, r5, r0, r2
   8d94a:	eba4 040e 	sub.w	r4, r4, lr
   8d94e:	42ac      	cmp	r4, r5
   8d950:	46c8      	mov	r8, r9
   8d952:	46ae      	mov	lr, r5
   8d954:	d356      	bcc.n	8da04 <__udivmoddi4+0x2a4>
   8d956:	d053      	beq.n	8da00 <__udivmoddi4+0x2a0>
   8d958:	2e00      	cmp	r6, #0
   8d95a:	d069      	beq.n	8da30 <__udivmoddi4+0x2d0>
   8d95c:	ebb3 0208 	subs.w	r2, r3, r8
   8d960:	eb64 040e 	sbc.w	r4, r4, lr
   8d964:	fa22 f301 	lsr.w	r3, r2, r1
   8d968:	fa04 f707 	lsl.w	r7, r4, r7
   8d96c:	431f      	orrs	r7, r3
   8d96e:	40cc      	lsrs	r4, r1
   8d970:	e9c6 7400 	strd	r7, r4, [r6]
   8d974:	2100      	movs	r1, #0
   8d976:	e747      	b.n	8d808 <__udivmoddi4+0xa8>
   8d978:	fa0c fc02 	lsl.w	ip, ip, r2
   8d97c:	f1c2 0120 	rsb	r1, r2, #32
   8d980:	fa25 f301 	lsr.w	r3, r5, r1
   8d984:	ea4f 471c 	mov.w	r7, ip, lsr #16
   8d988:	fa20 f101 	lsr.w	r1, r0, r1
   8d98c:	4095      	lsls	r5, r2
   8d98e:	430d      	orrs	r5, r1
   8d990:	fbb3 f1f7 	udiv	r1, r3, r7
   8d994:	fb07 3311 	mls	r3, r7, r1, r3
   8d998:	fa1f fe8c 	uxth.w	lr, ip
   8d99c:	0c28      	lsrs	r0, r5, #16
   8d99e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8d9a2:	fb01 f30e 	mul.w	r3, r1, lr
   8d9a6:	4283      	cmp	r3, r0
   8d9a8:	fa04 f402 	lsl.w	r4, r4, r2
   8d9ac:	d908      	bls.n	8d9c0 <__udivmoddi4+0x260>
   8d9ae:	eb1c 0000 	adds.w	r0, ip, r0
   8d9b2:	f101 38ff 	add.w	r8, r1, #4294967295
   8d9b6:	d22f      	bcs.n	8da18 <__udivmoddi4+0x2b8>
   8d9b8:	4283      	cmp	r3, r0
   8d9ba:	d92d      	bls.n	8da18 <__udivmoddi4+0x2b8>
   8d9bc:	3902      	subs	r1, #2
   8d9be:	4460      	add	r0, ip
   8d9c0:	1ac0      	subs	r0, r0, r3
   8d9c2:	fbb0 f3f7 	udiv	r3, r0, r7
   8d9c6:	fb07 0013 	mls	r0, r7, r3, r0
   8d9ca:	b2ad      	uxth	r5, r5
   8d9cc:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   8d9d0:	fb03 f00e 	mul.w	r0, r3, lr
   8d9d4:	42a8      	cmp	r0, r5
   8d9d6:	d908      	bls.n	8d9ea <__udivmoddi4+0x28a>
   8d9d8:	eb1c 0505 	adds.w	r5, ip, r5
   8d9dc:	f103 38ff 	add.w	r8, r3, #4294967295
   8d9e0:	d216      	bcs.n	8da10 <__udivmoddi4+0x2b0>
   8d9e2:	42a8      	cmp	r0, r5
   8d9e4:	d914      	bls.n	8da10 <__udivmoddi4+0x2b0>
   8d9e6:	3b02      	subs	r3, #2
   8d9e8:	4465      	add	r5, ip
   8d9ea:	1a28      	subs	r0, r5, r0
   8d9ec:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   8d9f0:	e738      	b.n	8d864 <__udivmoddi4+0x104>
   8d9f2:	4631      	mov	r1, r6
   8d9f4:	4630      	mov	r0, r6
   8d9f6:	e707      	b.n	8d808 <__udivmoddi4+0xa8>
   8d9f8:	462f      	mov	r7, r5
   8d9fa:	e6e4      	b.n	8d7c6 <__udivmoddi4+0x66>
   8d9fc:	4618      	mov	r0, r3
   8d9fe:	e6f9      	b.n	8d7f4 <__udivmoddi4+0x94>
   8da00:	454b      	cmp	r3, r9
   8da02:	d2a9      	bcs.n	8d958 <__udivmoddi4+0x1f8>
   8da04:	ebb9 0802 	subs.w	r8, r9, r2
   8da08:	eb65 0e0c 	sbc.w	lr, r5, ip
   8da0c:	3801      	subs	r0, #1
   8da0e:	e7a3      	b.n	8d958 <__udivmoddi4+0x1f8>
   8da10:	4643      	mov	r3, r8
   8da12:	e7ea      	b.n	8d9ea <__udivmoddi4+0x28a>
   8da14:	4628      	mov	r0, r5
   8da16:	e794      	b.n	8d942 <__udivmoddi4+0x1e2>
   8da18:	4641      	mov	r1, r8
   8da1a:	e7d1      	b.n	8d9c0 <__udivmoddi4+0x260>
   8da1c:	46d0      	mov	r8, sl
   8da1e:	e77b      	b.n	8d918 <__udivmoddi4+0x1b8>
   8da20:	4464      	add	r4, ip
   8da22:	3802      	subs	r0, #2
   8da24:	e747      	b.n	8d8b6 <__udivmoddi4+0x156>
   8da26:	3b02      	subs	r3, #2
   8da28:	4465      	add	r5, ip
   8da2a:	e72f      	b.n	8d88c <__udivmoddi4+0x12c>
   8da2c:	4608      	mov	r0, r1
   8da2e:	e706      	b.n	8d83e <__udivmoddi4+0xde>
   8da30:	4631      	mov	r1, r6
   8da32:	e6e9      	b.n	8d808 <__udivmoddi4+0xa8>

0008da34 <__aeabi_idiv0>:
   8da34:	4770      	bx	lr
   8da36:	bf00      	nop
   8da38:	78383025 	.word	0x78383025
   8da3c:	00000000 	.word	0x00000000
   8da40:	0000000d 	.word	0x0000000d
   8da44:	00000089 	.word	0x00000089
   8da48:	00000051 	.word	0x00000051
   8da4c:	0000001a 	.word	0x0000001a
   8da50:	00000000 	.word	0x00000000

0008da54 <BUILD_DATE>:
   8da54:	20706553 32203320 00323230              Sep  3 2022.

0008da60 <BUILD_TIME>:
   8da60:	343a3931 39343a39 00000000 00000000     19:49:49........
   8da70:	00000000 aaaaaa00 aaaaaaaa eeeeeeaa     ................
   8da80:	eeeeeeee fffffeee ffffffff ffffffff     ................
   8da90:	dfbf7fff fdfbf7ef dfbf7efc fdfbf7ef     .........~......
   8daa0:	0000007e                                ~...

0008daa4 <CSWTCH.109>:
   8daa4:	00010102                                ....

0008daa8 <_global_impure_ptr>:
   8daa8:	20070cd0 00464e49 00666e69 004e414e     ... INF.inf.NAN.
   8dab8:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8dac8:	66656463 00000000 33323130 37363534     cdef....01234567
   8dad8:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8dae8:	0000296c 00000030                       l)..0...

0008daf0 <blanks.1>:
   8daf0:	20202020 20202020 20202020 20202020                     

0008db00 <zeroes.0>:
   8db00:	30303030 30303030 30303030 30303030     0000000000000000
   8db10:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8db20:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8db30:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8db40:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8db50:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8db60:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8db70:	656e696c 3833332d 3230325f 31303131     line-338_2021101
   8db80:	36315f38 31353433 33303236 6372732f     8_1634516203/src
   8db90:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8dba0:	2f636269 6c647473 642f6269 2e616f74     ibc/stdlib/dtoa.
   8dbb0:	00000063 746e6d2f 726f772f 6170736b     c.../mnt/workspa
   8dbc0:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8dbd0:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8dbe0:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8dbf0:	656e696c 3833332d 3230325f 31303131     line-338_2021101
   8dc00:	36315f38 31353433 33303236 6372732f     8_1634516203/src
   8dc10:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8dc20:	2f636269 6c647473 6d2f6269 63657270     ibc/stdlib/mprec
   8dc30:	0000632e 00000000                       .c......

0008dc38 <__mprec_bigtens>:
   8dc38:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8dc48:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8dc58:	7f73bf3c 75154fdd                       <.s..O.u

0008dc60 <__mprec_tens>:
   8dc60:	00000000 3ff00000 00000000 40240000     .......?......$@
   8dc70:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8dc80:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8dc90:	00000000 412e8480 00000000 416312d0     .......A......cA
   8dca0:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8dcb0:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8dcc0:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8dcd0:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8dce0:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8dcf0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8dd00:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8dd10:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8dd20:	79d99db4 44ea7843                       ...yCx.D

0008dd28 <p05.0>:
   8dd28:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8dd38:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8dd48:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8dd58:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8dd68:	2520656e 25732564 00000a73 00000043     ne %d%s%s...C...
   8dd78:	49534f50 00000058 0000002e              POSIX.......

0008dd84 <blanks.1>:
   8dd84:	20202020 20202020 20202020 20202020                     

0008dd94 <zeroes.0>:
   8dd94:	30303030 30303030 30303030 30303030     0000000000000000

0008dda4 <_ctype_>:
   8dda4:	20202000 20202020 28282020 20282828     .         ((((( 
   8ddb4:	20202020 20202020 20202020 20202020                     
   8ddc4:	10108820 10101010 10101010 10101010      ...............
   8ddd4:	04040410 04040404 10040404 10101010     ................
   8dde4:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8ddf4:	01010101 01010101 01010101 10101010     ................
   8de04:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8de14:	02020202 02020202 02020202 10101010     ................
   8de24:	00000020 00000000 00000000 00000000      ...............
   8de34:	00000000 00000000 00000000 00000000     ................
   8de44:	00000000 00000000 00000000 00000000     ................
   8de54:	00000000 00000000 00000000 00000000     ................
   8de64:	00000000 00000000 00000000 00000000     ................
   8de74:	00000000 00000000 00000000 00000000     ................
   8de84:	00000000 00000000 00000000 00000000     ................
   8de94:	00000000 00000000 00000000 00000000     ................
   8dea4:	00000000                                ....

0008dea8 <_init>:
   8dea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8deaa:	bf00      	nop
   8deac:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8deae:	bc08      	pop	{r3}
   8deb0:	469e      	mov	lr, r3
   8deb2:	4770      	bx	lr

0008deb4 <__init_array_start>:
   8deb4:	00088a8d 	.word	0x00088a8d

0008deb8 <__frame_dummy_init_array_entry>:
   8deb8:	00080119                                ....

0008debc <_fini>:
   8debc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8debe:	bf00      	nop
   8dec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8dec2:	bc08      	pop	{r3}
   8dec4:	469e      	mov	lr, r3
   8dec6:	4770      	bx	lr

0008dec8 <__do_global_dtors_aux_fini_array_entry>:
   8dec8:	00f5 0008                                   ....

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4819      	ldr	r0, [pc, #100]	; (2007006c <SystemInit+0x6c>)
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070006:	491a      	ldr	r1, [pc, #104]	; (20070070 <SystemInit+0x70>)
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070008:	4a1a      	ldr	r2, [pc, #104]	; (20070074 <SystemInit+0x74>)
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000a:	6003      	str	r3, [r0, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	600b      	str	r3, [r1, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	6a13      	ldr	r3, [r2, #32]
20070010:	01db      	lsls	r3, r3, #7
20070012:	d404      	bmi.n	2007001e <SystemInit+0x1e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070014:	4b18      	ldr	r3, [pc, #96]	; (20070078 <SystemInit+0x78>)
20070016:	6213      	str	r3, [r2, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070018:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007001a:	07d8      	lsls	r0, r3, #31
2007001c:	d5fc      	bpl.n	20070018 <SystemInit+0x18>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2007001e:	4a15      	ldr	r2, [pc, #84]	; (20070074 <SystemInit+0x74>)
20070020:	4b16      	ldr	r3, [pc, #88]	; (2007007c <SystemInit+0x7c>)
20070022:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20070024:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070026:	03d9      	lsls	r1, r3, #15
20070028:	d5fc      	bpl.n	20070024 <SystemInit+0x24>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2007002a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2007002c:	4811      	ldr	r0, [pc, #68]	; (20070074 <SystemInit+0x74>)
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2007002e:	f023 0303 	bic.w	r3, r3, #3
20070032:	f043 0301 	orr.w	r3, r3, #1
20070036:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070038:	6e83      	ldr	r3, [r0, #104]	; 0x68
2007003a:	071b      	lsls	r3, r3, #28
2007003c:	d5fc      	bpl.n	20070038 <SystemInit+0x38>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007003e:	4b10      	ldr	r3, [pc, #64]	; (20070080 <SystemInit+0x80>)
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070040:	490c      	ldr	r1, [pc, #48]	; (20070074 <SystemInit+0x74>)
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070042:	6283      	str	r3, [r0, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070044:	6e8b      	ldr	r3, [r1, #104]	; 0x68
20070046:	0798      	lsls	r0, r3, #30
20070048:	d5fc      	bpl.n	20070044 <SystemInit+0x44>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007004a:	2311      	movs	r3, #17
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2007004c:	4a09      	ldr	r2, [pc, #36]	; (20070074 <SystemInit+0x74>)
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007004e:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070050:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070052:	0719      	lsls	r1, r3, #28
20070054:	d5fc      	bpl.n	20070050 <SystemInit+0x50>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070056:	2312      	movs	r3, #18
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	4906      	ldr	r1, [pc, #24]	; (20070074 <SystemInit+0x74>)
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007005a:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2007005c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
2007005e:	071b      	lsls	r3, r3, #28
20070060:	d5fc      	bpl.n	2007005c <SystemInit+0x5c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070062:	4b08      	ldr	r3, [pc, #32]	; (20070084 <SystemInit+0x84>)
20070064:	4a08      	ldr	r2, [pc, #32]	; (20070088 <SystemInit+0x88>)
20070066:	601a      	str	r2, [r3, #0]
}
20070068:	4770      	bx	lr
2007006a:	bf00      	nop
2007006c:	400e0a00 	.word	0x400e0a00
20070070:	400e0c00 	.word	0x400e0c00
20070074:	400e0600 	.word	0x400e0600
20070078:	00370809 	.word	0x00370809
2007007c:	01370809 	.word	0x01370809
20070080:	200d3f01 	.word	0x200d3f01
20070084:	20070994 	.word	0x20070994
20070088:	0501bd00 	.word	0x0501bd00

2007008c <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
2007008c:	4b19      	ldr	r3, [pc, #100]	; (200700f4 <system_init_flash+0x68>)
2007008e:	4298      	cmp	r0, r3
20070090:	d805      	bhi.n	2007009e <system_init_flash+0x12>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20070092:	2300      	movs	r3, #0
20070094:	4918      	ldr	r1, [pc, #96]	; (200700f8 <system_init_flash+0x6c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20070096:	4a19      	ldr	r2, [pc, #100]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20070098:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
2007009a:	6013      	str	r3, [r2, #0]
2007009c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
2007009e:	4b18      	ldr	r3, [pc, #96]	; (20070100 <system_init_flash+0x74>)
200700a0:	4298      	cmp	r0, r3
200700a2:	d806      	bhi.n	200700b2 <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700a4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700a8:	4913      	ldr	r1, [pc, #76]	; (200700f8 <system_init_flash+0x6c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700aa:	4a14      	ldr	r2, [pc, #80]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ac:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ae:	6013      	str	r3, [r2, #0]
200700b0:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b2:	4b14      	ldr	r3, [pc, #80]	; (20070104 <system_init_flash+0x78>)
200700b4:	4298      	cmp	r0, r3
200700b6:	d309      	bcc.n	200700cc <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b8:	4b13      	ldr	r3, [pc, #76]	; (20070108 <system_init_flash+0x7c>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d80d      	bhi.n	200700da <system_init_flash+0x4e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700be:	f44f 7340 	mov.w	r3, #768	; 0x300
200700c2:	490d      	ldr	r1, [pc, #52]	; (200700f8 <system_init_flash+0x6c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700c4:	4a0d      	ldr	r2, [pc, #52]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700c6:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700c8:	6013      	str	r3, [r2, #0]
200700ca:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700cc:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d0:	4909      	ldr	r1, [pc, #36]	; (200700f8 <system_init_flash+0x6c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700d2:	4a0a      	ldr	r2, [pc, #40]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700da:	4b0c      	ldr	r3, [pc, #48]	; (2007010c <system_init_flash+0x80>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700dc:	4906      	ldr	r1, [pc, #24]	; (200700f8 <system_init_flash+0x6c>)
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700de:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700e0:	bf94      	ite	ls
200700e2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700e6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ea:	4a04      	ldr	r2, [pc, #16]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700ec:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ee:	6013      	str	r3, [r2, #0]
	}
}
200700f0:	4770      	bx	lr
200700f2:	bf00      	nop
200700f4:	0121eabf 	.word	0x0121eabf
200700f8:	400e0a00 	.word	0x400e0a00
200700fc:	400e0c00 	.word	0x400e0c00
20070100:	02faf07f 	.word	0x02faf07f
20070104:	03d09000 	.word	0x03d09000
20070108:	04c4b3ff 	.word	0x04c4b3ff
2007010c:	055d4a7f 	.word	0x055d4a7f

20070110 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070110:	b530      	push	{r4, r5, lr}
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMS32|| SAM4CMP32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
20070112:	4c20      	ldr	r4, [pc, #128]	; (20070194 <efc_perform_read_sequence+0x84>)
{
20070114:	b083      	sub	sp, #12
			(uint32_t *) ((p_efc == EFC0) ?
20070116:	42a0      	cmp	r0, r4
20070118:	bf0c      	ite	eq
2007011a:	f44f 2c00 	moveq.w	ip, #524288	; 0x80000
2007011e:	f44f 2c40 	movne.w	ip, #786432	; 0xc0000
{
20070122:	9d06      	ldr	r5, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070124:	b393      	cbz	r3, 2007018c <efc_perform_read_sequence+0x7c>
20070126:	4686      	mov	lr, r0
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20070128:	6800      	ldr	r0, [r0, #0]
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2007012a:	b2c9      	uxtb	r1, r1
2007012c:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FMR |= (0x1u << 16);
20070130:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
20070134:	f8ce 0000 	str.w	r0, [lr]
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070138:	f8ce 1004 	str.w	r1, [lr, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2007013c:	f8de 1008 	ldr.w	r1, [lr, #8]
20070140:	9101      	str	r1, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20070142:	9801      	ldr	r0, [sp, #4]
20070144:	f010 0001 	ands.w	r0, r0, #1
20070148:	d1f8      	bne.n	2007013c <efc_perform_read_sequence+0x2c>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007014a:	b165      	cbz	r5, 20070166 <efc_perform_read_sequence+0x56>
2007014c:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
20070150:	f1ac 0104 	sub.w	r1, ip, #4
20070154:	3b04      	subs	r3, #4
20070156:	f1a5 0c04 	sub.w	ip, r5, #4
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007015a:	f851 4f04 	ldr.w	r4, [r1, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007015e:	4561      	cmp	r1, ip
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20070160:	f843 4f04 	str.w	r4, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070164:	d1f9      	bne.n	2007015a <efc_perform_read_sequence+0x4a>
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20070166:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20070168:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
2007016c:	f8ce 2004 	str.w	r2, [lr, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070170:	f8de 3008 	ldr.w	r3, [lr, #8]
20070174:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070176:	9b01      	ldr	r3, [sp, #4]
20070178:	07db      	lsls	r3, r3, #31
2007017a:	d5f9      	bpl.n	20070170 <efc_perform_read_sequence+0x60>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2007017c:	f8de 3000 	ldr.w	r3, [lr]
20070180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20070184:	f8ce 3000 	str.w	r3, [lr]

	return EFC_RC_OK;
}
20070188:	b003      	add	sp, #12
2007018a:	bd30      	pop	{r4, r5, pc}
		return EFC_RC_INVALID;
2007018c:	2002      	movs	r0, #2
}
2007018e:	b003      	add	sp, #12
20070190:	bd30      	pop	{r4, r5, pc}
20070192:	bf00      	nop
20070194:	400e0a00 	.word	0x400e0a00

20070198 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20070198:	6001      	str	r1, [r0, #0]
}
2007019a:	4770      	bx	lr

2007019c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2007019c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2007019e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200701a0:	6883      	ldr	r3, [r0, #8]
200701a2:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200701a4:	9b01      	ldr	r3, [sp, #4]
200701a6:	07db      	lsls	r3, r3, #31
200701a8:	d5fa      	bpl.n	200701a0 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
200701aa:	9801      	ldr	r0, [sp, #4]
}
200701ac:	f000 0006 	and.w	r0, r0, #6
200701b0:	b002      	add	sp, #8
200701b2:	4770      	bx	lr

200701b4 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
200701b4:	f3bf 8f5f 	dmb	sy
200701b8:	3801      	subs	r0, #1
200701ba:	d1fb      	bne.n	200701b4 <portable_delay_cycles>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
200701bc:	4770      	bx	lr
200701be:	0000      	movs	r0, r0

200701c0 <pin_spi1_cs>:
200701c0:	ffff ffff                                   ....

200701c4 <pin_spi1_miso>:
200701c4:	ffff ffff                                   ....

200701c8 <pin_spi1_mosi>:
200701c8:	ffff ffff                                   ....

200701cc <pin_spi1_sck>:
200701cc:	ffff ffff                                   ....

200701d0 <usb_serial_number>:
200701d0:	3030 3030 3030 3030 3030 3030 4544 4441     000000000000DEAD
200701e0:	4542 4645 0000 0000 0000 0000 0000 0000     BEEF............
200701f0:	0000 0000                                   ....

200701f4 <USER_TWI_PACKET>:
200701f4:	0000 0000 0001 0000 0000 0000 0000 0000     ................
20070204:	0000 0000                                   ....

20070208 <last_power_state.0>:
20070208:	0001 0000                                   ....

2007020c <MS_BOS_PACKET>:
2007020c:	0f05 0021 1c01 0510 df00 dd60 89d8 c745     ..!.......`...E.
2007021c:	9c4c 65d2 9e9d 8a64 009f 0300 4a06 0101     L..e..d......J..
2007022c:	0000 0000                                   ....

20070230 <MS_OS_DESC>:
20070230:	000a 0000 0000 0603 014a 0008 0002 0000     ........J.......
20070240:	00a0 0014 0003 4957 554e 4253 0000 0000     ......WINUSB....
20070250:	0000 0000 0000 0084 0004 0007 002a 0044     ............*.D.
20070260:	0065 0076 0069 0063 0065 0049 006e 0074     e.v.i.c.e.I.n.t.
20070270:	0065 0072 0066 0061 0063 0065 0047 0055     e.r.f.a.c.e.G.U.
20070280:	0049 0044 0073 0000 0050 007b 0030 0041     I.D.s...P.{.0.A.
20070290:	0043 0045 0032 0042 0033 0045 002d 0032     C.E.2.B.3.E.-.2.
200702a0:	0042 0033 0045 002d 0032 0042 0033 0045     B.3.E.-.2.B.3.E.
200702b0:	002d 0032 0042 0033 0045 002d 0034 0033     -.2.B.3.E.-.4.3.
200702c0:	0031 0030 0030 0041 0043 0045 0032 0042     1.0.0.A.C.E.2.B.
200702d0:	0033 0045 007d 0000 0000 0008 0002 0001     3.E.}...........
200702e0:	00a0 0014 0003 4957 554e 4253 0000 0000     ......WINUSB....
200702f0:	0000 0000 0000 0084 0004 0007 002a 0044     ............*.D.
20070300:	0065 0076 0069 0063 0065 0049 006e 0074     e.v.i.c.e.I.n.t.
20070310:	0065 0072 0066 0061 0063 0065 0047 0055     e.r.f.a.c.e.G.U.
20070320:	0049 0044 0073 0000 0050 007b 0031 0041     I.D.s...P.{.1.A.
20070330:	0043 0045 0032 0042 0033 0045 002d 0032     C.E.2.B.3.E.-.2.
20070340:	0042 0033 0045 002d 0032 0042 0033 0045     B.3.E.-.2.B.3.E.
20070350:	002d 0032 0042 0033 0045 002d 0034 0033     -.2.B.3.E.-.4.3.
20070360:	0031 0030 0031 0041 0043 0045 0032 0042     1.0.1.A.C.E.2.B.
20070370:	0033 0045 007d 0000 0000 0000               3.E.}.......

2007037c <udc_string_desc>:
2007037c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
2007038c:	0000 0000 0000 0000 0000 0000 0000 0000     ................
2007039c:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200703ac:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200703bc:	0000 0000 0000 0000                         ........

200703c4 <udc_string_desc_languageid>:
200703c4:	0304 0409                                   ....

200703c8 <udc_string_manufacturer_name>:
200703c8:	654e 4177 2045 6554 6863 6f6e 6f6c 7967     NewAE Technology
200703d8:	4920 636e 002e 0000                          Inc....

200703e0 <udc_string_product_name>:
200703e0:	6843 7069 6857 7369 6570 6572 2072 5743     ChipWhisperer CW
200703f0:	3133 2030 202d 6542 6772 6e65 4220 616f     310 - Bergen Boa
20070400:	6472                                         rd.

20070403 <main_b_vendor_enable>:
20070403:	                                             .

20070404 <usart0_driver>:
20070404:	8000 4009 0000 0000 0000 0000 0000 0000     ...@............
20070414:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070424:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070434:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070444:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070454:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070464:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070474:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070484:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070494:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704a4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704b4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704c4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704d4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704e4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704f4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070504:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070514:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070524:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070534:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070544:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070554:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070564:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070574:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070584:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070594:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705a4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705b4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705c4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705d4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705e4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705f4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070604:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070614:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070624:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070634:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070644:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070654:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070664:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070674:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070684:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070694:	0000 0000 0000 0000 0000 0000 0009 0000     ................

200706a4 <usart1_driver>:
200706a4:	c000 4009 0000 0000 0000 0000 0000 0000     ...@............
200706b4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200706c4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200706d4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200706e4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200706f4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070704:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070714:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070724:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070734:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070744:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070754:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070764:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070774:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070784:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070794:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707a4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707b4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707c4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707d4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707e4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707f4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070804:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070814:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070824:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070834:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070844:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070854:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070864:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070874:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070884:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070894:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708a4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708b4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708c4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708d4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708e4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708f4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070904:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070914:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070924:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070934:	0000 0000 0000 0000 0001 0000 0009 0000     ................

20070944 <mpsse_state>:
20070944:	0000 0000 0200 0000 0000 0000 0000 0000     ................
20070954:	0000 0000 0000 1b00 0000 1a00 0000 1900     ................
20070964:	0000 1c00 0000 6300 0000 6400 0000 6800     .......c...d...h
20070974:	0000 6900 0000 0000 0000 0000 0000 0000     ...i............
20070984:	0000 0000 0000 0000                         ........

2007098c <vccint_setting>:
2007098c:	03e8 0000                                   ....

20070990 <xram>:
20070990:	0000 6000                                   ...`

20070994 <SystemCoreClock>:
20070994:	0900 003d                                   ..=.

20070998 <udi_api_vendor>:
20070998:	44b1 0008 446d 0008 4481 0008 4461 0008     .D..mD...D..aD..
200709a8:	0000 0000                                   ....

200709ac <mpsse_udi_apis>:
200709ac:	0998 2007 0998 2007                         ... ... 

200709b4 <udc_config>:
200709b4:	0c6c 2007 09d4 2007 0c6c 2007 0c80 2007     l.. ... l.. ... 
200709c4:	09cc 2007 0000 0000                         ... ....

200709cc <udc_config_hs>:
200709cc:	0b24 2007 0c8c 2007                         $.. ... 

200709d4 <udc_config_lsfs>:
200709d4:	09dc 2007 0c8c 2007                         ... ... 

200709dc <udc_desc_fs>:
200709dc:	0209 00a4 0105 8000 09fa 0004 0200 ffff     ................
200709ec:	00ff 0507 0281 0040 0700 0205 4002 0000     ......@......@..
200709fc:	0b08 0201 0202 0000 0409 0001 0201 0002     ................
20070a0c:	0500 0024 0110 2404 0202 2405 0106 0502     ..$....$...$....
20070a1c:	0124 0203 0507 0387 0040 0910 0204 0200     $.......@.......
20070a2c:	000a 0000 0507 0283 0040 0700 0405 4002     ........@......@
20070a3c:	0000 0b08 0203 0202 0000 0409 0003 0201     ................
20070a4c:	0002 0500 0024 0110 2404 0202 2405 0306     ....$....$...$..
20070a5c:	0504 0124 0403 0507 0388 0040 0910 0404     ..$.......@.....
20070a6c:	0200 000a 0000 0507 0285 0040 0700 0605     ..........@.....
20070a7c:	4002 0000                                   .@..

20070a80 <udc_desc_fs_mpsse>:
20070a80:	0209 0037 0102 8000 09fa 0004 0200 ffff     ..7.............
20070a90:	00ff 0507 0281 0040 0700 0205 4002 0000     ......@......@..
20070aa0:	0409 0001 ff02 ffff 0700 8505 0002 0002     ................
20070ab0:	0507 0206 0200 0000 0000 0000 0000 0000     ................
20070ac0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ad0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ae0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070af0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070b00:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070b10:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070b20:	0000 0000                                   ....

20070b24 <udc_desc_hs>:
20070b24:	0209 00a4 0105 8000 09fa 0004 0200 ffff     ................
20070b34:	00ff 0507 0281 0200 0700 0205 0002 0002     ................
20070b44:	0b08 0201 0202 0000 0409 0001 0201 0002     ................
20070b54:	0500 0024 0110 2404 0202 2405 0106 0502     ..$....$...$....
20070b64:	0124 0203 0507 0387 0040 0910 0204 0200     $.......@.......
20070b74:	000a 0000 0507 0283 0200 0700 0405 0002     ................
20070b84:	0002 0b08 0203 0202 0000 0409 0003 0201     ................
20070b94:	0002 0500 0024 0110 2404 0202 2405 0306     ....$....$...$..
20070ba4:	0504 0124 0403 0507 0388 0040 0910 0404     ..$.......@.....
20070bb4:	0200 000a 0000 0507 0285 0200 0700 0605     ................
20070bc4:	0002 0002                                   ....

20070bc8 <udc_desc_hs_mpsse>:
20070bc8:	0209 0037 0102 8000 09fa 0004 0200 ffff     ..7.............
20070bd8:	00ff 0507 0281 0200 0700 0205 0002 0002     ................
20070be8:	0409 0001 ff02 ffff 0700 8505 0002 0002     ................
20070bf8:	0507 0206 0200 0000 0000 0000 0000 0000     ................
20070c08:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c18:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c28:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c38:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c48:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c58:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c68:	0000 0000                                   ....

20070c6c <udc_device_desc>:
20070c6c:	0112 0200 0000 4000 2b3e c310 0900 0201     .......@>+......
20070c7c:	0103 0000                                   ....

20070c80 <udc_device_qual>:
20070c80:	060a 0200 0000 4000 0001 0000               .......@....

20070c8c <udi_apis>:
20070c8c:	0998 2007 0ca4 2007 0cb8 2007 0ca4 2007     ... ... ... ... 
20070c9c:	0cb8 2007                                   ... 

20070ca0 <g_interrupt_enabled>:
20070ca0:	0001 0000                                   ....

20070ca4 <udi_api_cdc_comm>:
20070ca4:	6531 0008 6461 0008 6471 0008 6505 0008     1e..ad..qd...e..
20070cb4:	0000 0000                                   ....

20070cb8 <udi_api_cdc_data>:
20070cb8:	68d1 0008 65c5 0008 6501 0008 6505 0008     .h...e...e...e..
20070cc8:	67a1 0008                                   .g..

20070ccc <_impure_ptr>:
20070ccc:	0cd0 2007                                   ... 

20070cd0 <impure_data>:
20070cd0:	0000 0000 0fbc 2007 1024 2007 108c 2007     ....... $.. ... 
20070ce0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070cf0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d00:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d10:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d20:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d30:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d40:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d50:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d60:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d70:	0000 0000 0000 0000 0001 0000 0000 0000     ................
20070d80:	330e abcd 1234 e66d deec 0005 000b 0000     .3..4.m.........
20070d90:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070da0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070db0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070dc0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070dd0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070de0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070df0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e00:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e10:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e20:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e30:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e40:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e50:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e60:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e70:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e80:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e90:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ea0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070eb0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ec0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ed0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ee0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ef0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f00:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f10:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f20:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f30:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f40:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f50:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f60:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f70:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f80:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f90:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070fa0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070fb0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070fc0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070fd0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070fe0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ff0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071000:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071010:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071020:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071030:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071040:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071050:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071060:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071070:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071080:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071090:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200710a0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200710b0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200710c0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200710d0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200710e0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200710f0:	0000 0000 0000 0000                         ........

200710f8 <__atexit_recursive_mutex>:
200710f8:	3428 2007                                   (4. 

200710fc <__malloc_av_>:
200710fc:	0000 0000 0000 0000 10fc 2007 10fc 2007     ........... ... 
2007110c:	1104 2007 1104 2007 110c 2007 110c 2007     ... ... ... ... 
2007111c:	1114 2007 1114 2007 111c 2007 111c 2007     ... ... ... ... 
2007112c:	1124 2007 1124 2007 112c 2007 112c 2007     $.. $.. ,.. ,.. 
2007113c:	1134 2007 1134 2007 113c 2007 113c 2007     4.. 4.. <.. <.. 
2007114c:	1144 2007 1144 2007 114c 2007 114c 2007     D.. D.. L.. L.. 
2007115c:	1154 2007 1154 2007 115c 2007 115c 2007     T.. T.. \.. \.. 
2007116c:	1164 2007 1164 2007 116c 2007 116c 2007     d.. d.. l.. l.. 
2007117c:	1174 2007 1174 2007 117c 2007 117c 2007     t.. t.. |.. |.. 
2007118c:	1184 2007 1184 2007 118c 2007 118c 2007     ... ... ... ... 
2007119c:	1194 2007 1194 2007 119c 2007 119c 2007     ... ... ... ... 
200711ac:	11a4 2007 11a4 2007 11ac 2007 11ac 2007     ... ... ... ... 
200711bc:	11b4 2007 11b4 2007 11bc 2007 11bc 2007     ... ... ... ... 
200711cc:	11c4 2007 11c4 2007 11cc 2007 11cc 2007     ... ... ... ... 
200711dc:	11d4 2007 11d4 2007 11dc 2007 11dc 2007     ... ... ... ... 
200711ec:	11e4 2007 11e4 2007 11ec 2007 11ec 2007     ... ... ... ... 
200711fc:	11f4 2007 11f4 2007 11fc 2007 11fc 2007     ... ... ... ... 
2007120c:	1204 2007 1204 2007 120c 2007 120c 2007     ... ... ... ... 
2007121c:	1214 2007 1214 2007 121c 2007 121c 2007     ... ... ... ... 
2007122c:	1224 2007 1224 2007 122c 2007 122c 2007     $.. $.. ,.. ,.. 
2007123c:	1234 2007 1234 2007 123c 2007 123c 2007     4.. 4.. <.. <.. 
2007124c:	1244 2007 1244 2007 124c 2007 124c 2007     D.. D.. L.. L.. 
2007125c:	1254 2007 1254 2007 125c 2007 125c 2007     T.. T.. \.. \.. 
2007126c:	1264 2007 1264 2007 126c 2007 126c 2007     d.. d.. l.. l.. 
2007127c:	1274 2007 1274 2007 127c 2007 127c 2007     t.. t.. |.. |.. 
2007128c:	1284 2007 1284 2007 128c 2007 128c 2007     ... ... ... ... 
2007129c:	1294 2007 1294 2007 129c 2007 129c 2007     ... ... ... ... 
200712ac:	12a4 2007 12a4 2007 12ac 2007 12ac 2007     ... ... ... ... 
200712bc:	12b4 2007 12b4 2007 12bc 2007 12bc 2007     ... ... ... ... 
200712cc:	12c4 2007 12c4 2007 12cc 2007 12cc 2007     ... ... ... ... 
200712dc:	12d4 2007 12d4 2007 12dc 2007 12dc 2007     ... ... ... ... 
200712ec:	12e4 2007 12e4 2007 12ec 2007 12ec 2007     ... ... ... ... 
200712fc:	12f4 2007 12f4 2007 12fc 2007 12fc 2007     ... ... ... ... 
2007130c:	1304 2007 1304 2007 130c 2007 130c 2007     ... ... ... ... 
2007131c:	1314 2007 1314 2007 131c 2007 131c 2007     ... ... ... ... 
2007132c:	1324 2007 1324 2007 132c 2007 132c 2007     $.. $.. ,.. ,.. 
2007133c:	1334 2007 1334 2007 133c 2007 133c 2007     4.. 4.. <.. <.. 
2007134c:	1344 2007 1344 2007 134c 2007 134c 2007     D.. D.. L.. L.. 
2007135c:	1354 2007 1354 2007 135c 2007 135c 2007     T.. T.. \.. \.. 
2007136c:	1364 2007 1364 2007 136c 2007 136c 2007     d.. d.. l.. l.. 
2007137c:	1374 2007 1374 2007 137c 2007 137c 2007     t.. t.. |.. |.. 
2007138c:	1384 2007 1384 2007 138c 2007 138c 2007     ... ... ... ... 
2007139c:	1394 2007 1394 2007 139c 2007 139c 2007     ... ... ... ... 
200713ac:	13a4 2007 13a4 2007 13ac 2007 13ac 2007     ... ... ... ... 
200713bc:	13b4 2007 13b4 2007 13bc 2007 13bc 2007     ... ... ... ... 
200713cc:	13c4 2007 13c4 2007 13cc 2007 13cc 2007     ... ... ... ... 
200713dc:	13d4 2007 13d4 2007 13dc 2007 13dc 2007     ... ... ... ... 
200713ec:	13e4 2007 13e4 2007 13ec 2007 13ec 2007     ... ... ... ... 
200713fc:	13f4 2007 13f4 2007 13fc 2007 13fc 2007     ... ... ... ... 
2007140c:	1404 2007 1404 2007 140c 2007 140c 2007     ... ... ... ... 
2007141c:	1414 2007 1414 2007 141c 2007 141c 2007     ... ... ... ... 
2007142c:	1424 2007 1424 2007 142c 2007 142c 2007     $.. $.. ,.. ,.. 
2007143c:	1434 2007 1434 2007 143c 2007 143c 2007     4.. 4.. <.. <.. 
2007144c:	1444 2007 1444 2007 144c 2007 144c 2007     D.. D.. L.. L.. 
2007145c:	1454 2007 1454 2007 145c 2007 145c 2007     T.. T.. \.. \.. 
2007146c:	1464 2007 1464 2007 146c 2007 146c 2007     d.. d.. l.. l.. 
2007147c:	1474 2007 1474 2007 147c 2007 147c 2007     t.. t.. |.. |.. 
2007148c:	1484 2007 1484 2007 148c 2007 148c 2007     ... ... ... ... 
2007149c:	1494 2007 1494 2007 149c 2007 149c 2007     ... ... ... ... 
200714ac:	14a4 2007 14a4 2007 14ac 2007 14ac 2007     ... ... ... ... 
200714bc:	14b4 2007 14b4 2007 14bc 2007 14bc 2007     ... ... ... ... 
200714cc:	14c4 2007 14c4 2007 14cc 2007 14cc 2007     ... ... ... ... 
200714dc:	14d4 2007 14d4 2007 14dc 2007 14dc 2007     ... ... ... ... 
200714ec:	14e4 2007 14e4 2007 14ec 2007 14ec 2007     ... ... ... ... 
200714fc:	14f4 2007 14f4 2007                         ... ... 

20071504 <__malloc_sbrk_base>:
20071504:	ffff ffff                                   ....

20071508 <__malloc_trim_threshold>:
20071508:	0000 0002                                   ....

2007150c <__global_locale>:
2007150c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
2007151c:	0000 0000 0000 0000 0000 0000 0000 0000     ................
2007152c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
2007153c:	0000 0000 0000 0000 0000 0000 0000 0000     ................
2007154c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
2007155c:	0000 0000 0000 0000 0000 0000 0000 0000     ................
2007156c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
2007157c:	0000 0000 0000 0000 0000 0000 0000 0000     ................
2007158c:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
2007159c:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200715ac:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
200715bc:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200715cc:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
200715dc:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200715ec:	c179 0008 ade5 0008 0000 0000 dda4 0008     y...............
200715fc:	dd80 0008 dd40 0008 dd40 0008 dd40 0008     ....@...@...@...
2007160c:	dd40 0008 dd40 0008 dd40 0008 dd40 0008     @...@...@...@...
2007161c:	dd40 0008 dd40 0008 ffff ffff ffff ffff     @...@...........
2007162c:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
2007163c:	0000 0000 0000 0000 0000 0000 0000 0000     ................
2007164c:	0000 0000 0000 0000 0000 5341 4943 0049     ..........ASCII.
2007165c:	0000 0000 0000 0000 0000 0000 0000 0000     ................
2007166c:	0000 0000 0000 0000 0000 0000               ............
