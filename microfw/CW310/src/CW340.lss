
CW340.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cdb4  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008cdb4  0008cdb4  0001cdb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000014e0  20070000  0008cdbc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001e74  200714e0  0008e29c  000214e0  2**2
                  ALLOC
  4 .stack        00001504  20073354  00090110  000214e0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000214e0  2**0
                  CONTENTS, READONLY
  6 .comment      00000049  00000000  00000000  00021509  2**0
                  CONTENTS, READONLY
  7 .debug_info   00021e3d  00000000  00000000  00021552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00006617  00000000  00000000  0004338f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    000110d4  00000000  00000000  000499a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001480  00000000  00000000  0005aa7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00005348  00000000  00000000  0005befa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  000252a1  00000000  00000000  00061242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0002d4e9  00000000  00000000  000864e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    00074ee4  00000000  00000000  000b39cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00004b88  00000000  00000000  001288b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	58 48 07 20 ad 37 08 00 a9 37 08 00 a9 37 08 00     XH. .7...7...7..
   80010:	a9 37 08 00 a9 37 08 00 a9 37 08 00 00 00 00 00     .7...7...7......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 a9 37 08 00     .............7..
   80030:	a9 37 08 00 00 00 00 00 a9 37 08 00 a9 37 08 00     .7.......7...7..
   80040:	a9 37 08 00 a9 37 08 00 a9 37 08 00 a9 37 08 00     .7...7...7...7..
   80050:	a9 37 08 00 a9 37 08 00 a9 37 08 00 a9 37 08 00     .7...7...7...7..
   80060:	a9 37 08 00 a9 37 08 00 00 00 00 00 9d 31 08 00     .7...7.......1..
   80070:	ad 31 08 00 bd 31 08 00 cd 31 08 00 00 00 00 00     .1...1...1......
   80080:	00 00 00 00 21 1c 08 00 31 1c 08 00 a9 37 08 00     ....!...1....7..
   80090:	a9 37 08 00 a9 37 08 00 a9 37 08 00 a9 37 08 00     .7...7...7...7..
   800a0:	a9 37 08 00 00 00 00 00 a9 37 08 00 a9 37 08 00     .7.......7...7..
   800b0:	69 0f 08 00 a9 37 08 00 a9 37 08 00 a9 37 08 00     i....7...7...7..
   800c0:	a9 37 08 00 a9 37 08 00 a9 37 08 00 a9 37 08 00     .7...7...7...7..
   800d0:	a9 37 08 00 a9 37 08 00 a9 37 08 00 a9 37 08 00     .7...7...7...7..
   800e0:	91 47 08 00 a9 37 08 00 a9 37 08 00 a9 37 08 00     .G...7...7...7..
   800f0:	a9 37 08 00                                         .7..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200714e0 	.word	0x200714e0
   80110:	00000000 	.word	0x00000000
   80114:	0008cdbc 	.word	0x0008cdbc

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b03      	ldr	r3, [pc, #12]	; (80128 <frame_dummy+0x10>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4903      	ldr	r1, [pc, #12]	; (8012c <frame_dummy+0x14>)
   80120:	4803      	ldr	r0, [pc, #12]	; (80130 <frame_dummy+0x18>)
   80122:	f3af 8000 	nop.w
   80126:	bd08      	pop	{r3, pc}
   80128:	00000000 	.word	0x00000000
   8012c:	200714e4 	.word	0x200714e4
   80130:	0008cdbc 	.word	0x0008cdbc

00080134 <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
   80134:	2300      	movs	r3, #0
   80136:	6043      	str	r3, [r0, #4]
   80138:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
   8013a:	6083      	str	r3, [r0, #8]
}
   8013c:	4770      	bx	lr
   8013e:	bf00      	nop

00080140 <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   80140:	b410      	push	{r4}
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   80142:	6804      	ldr	r4, [r0, #0]
    newhead++;
   80144:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   80146:	2cc8      	cmp	r4, #200	; 0xc8
   80148:	bf28      	it	cs
   8014a:	2400      	movcs	r4, #0
   8014c:	e000      	b.n	80150 <add_to_circ_buf+0x10>
    while (newhead == cbuf->tail)
    {
        if (!block)
   8014e:	b142      	cbz	r2, 80162 <add_to_circ_buf+0x22>
    while (newhead == cbuf->tail)
   80150:	6843      	ldr	r3, [r0, #4]
   80152:	42a3      	cmp	r3, r4
   80154:	d0fb      	beq.n	8014e <add_to_circ_buf+0xe>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   80156:	6803      	ldr	r3, [r0, #0]
   80158:	4403      	add	r3, r0
   8015a:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   8015c:	6004      	str	r4, [r0, #0]
}
   8015e:	bc10      	pop	{r4}
   80160:	4770      	bx	lr
            cbuf->dropped++;
   80162:	6883      	ldr	r3, [r0, #8]
}
   80164:	bc10      	pop	{r4}
            cbuf->dropped++;
   80166:	3301      	adds	r3, #1
   80168:	6083      	str	r3, [r0, #8]
}
   8016a:	4770      	bx	lr

0008016c <get_from_circ_buf>:
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   8016c:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];

    if (newtail == cbuf->head)
   8016e:	6801      	ldr	r1, [r0, #0]
{
   80170:	4602      	mov	r2, r0
    if (newtail == cbuf->head)
   80172:	4299      	cmp	r1, r3
    uint8_t retval = cbuf->buf[newtail];
   80174:	4418      	add	r0, r3
   80176:	7b00      	ldrb	r0, [r0, #12]
    if (newtail == cbuf->head)
   80178:	d005      	beq.n	80186 <get_from_circ_buf+0x1a>
        return SERIAL_ERR;

    newtail++;
   8017a:	3301      	adds	r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   8017c:	2bc8      	cmp	r3, #200	; 0xc8
   8017e:	bf28      	it	cs
   80180:	2300      	movcs	r3, #0
    cbuf->tail = newtail;
   80182:	6053      	str	r3, [r2, #4]

    return retval;
   80184:	4770      	bx	lr
        return SERIAL_ERR;
   80186:	20ff      	movs	r0, #255	; 0xff
}
   80188:	4770      	bx	lr
   8018a:	bf00      	nop

0008018c <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   8018c:	6803      	ldr	r3, [r0, #0]
    return (head != cbuf->tail);
   8018e:	6840      	ldr	r0, [r0, #4]
}
   80190:	1ac0      	subs	r0, r0, r3
   80192:	bf18      	it	ne
   80194:	2001      	movne	r0, #1
   80196:	4770      	bx	lr

00080198 <circ_buf_count>:
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

    count = cbuf->head;
   80198:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
   8019a:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
   8019c:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
   8019e:	bf48      	it	mi
   801a0:	30c8      	addmi	r0, #200	; 0xc8
    return (unsigned int)count;
}
   801a2:	4770      	bx	lr

000801a4 <spi1util_init>:
int pin_spi1_sck = -1;
int pin_spi1_cs = -1;

/* FPGA Programming: Init pins - assumes FPGA already programmed to use these */
void spi1util_init(void)
{
   801a4:	b510      	push	{r4, lr}
    /* IO setup is done when IO pins are configured right now */
	gpio_set_pin_high(pin_spi1_cs);
   801a6:	4a05      	ldr	r2, [pc, #20]	; (801bc <spi1util_init+0x18>)
   801a8:	4b05      	ldr	r3, [pc, #20]	; (801c0 <spi1util_init+0x1c>)
   801aa:	6810      	ldr	r0, [r2, #0]
   801ac:	4798      	blx	r3
	gpio_set_pin_low(pin_spi1_sck);
}
   801ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gpio_set_pin_low(pin_spi1_sck);
   801b2:	4a04      	ldr	r2, [pc, #16]	; (801c4 <spi1util_init+0x20>)
   801b4:	4b04      	ldr	r3, [pc, #16]	; (801c8 <spi1util_init+0x24>)
   801b6:	6810      	ldr	r0, [r2, #0]
   801b8:	4718      	bx	r3
   801ba:	bf00      	nop
   801bc:	200701c0 	.word	0x200701c0
   801c0:	00083591 	.word	0x00083591
   801c4:	200701cc 	.word	0x200701cc
   801c8:	000835ad 	.word	0x000835ad

000801cc <spi1util_cs_low>:

/* SPI CS Pin Low */
void spi1util_cs_low(void)
{
	gpio_set_pin_low(pin_spi1_cs);
   801cc:	4a01      	ldr	r2, [pc, #4]	; (801d4 <spi1util_cs_low+0x8>)
   801ce:	4b02      	ldr	r3, [pc, #8]	; (801d8 <spi1util_cs_low+0xc>)
   801d0:	6810      	ldr	r0, [r2, #0]
   801d2:	4718      	bx	r3
   801d4:	200701c0 	.word	0x200701c0
   801d8:	000835ad 	.word	0x000835ad

000801dc <spi1util_cs_high>:
}

/* SPI CS Pin High */
void spi1util_cs_high(void)
{
	gpio_set_pin_high(pin_spi1_cs);
   801dc:	4a01      	ldr	r2, [pc, #4]	; (801e4 <spi1util_cs_high+0x8>)
   801de:	4b02      	ldr	r3, [pc, #8]	; (801e8 <spi1util_cs_high+0xc>)
   801e0:	6810      	ldr	r0, [r2, #0]
   801e2:	4718      	bx	r3
   801e4:	200701c0 	.word	0x200701c0
   801e8:	00083591 	.word	0x00083591

000801ec <spi1util_xferbyte>:
}

/* SPI data byte transfer */
uint8_t spi1util_xferbyte(uint8_t databyte)
{
   801ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   801f0:	2608      	movs	r6, #8
	uint8_t result = 0;
   801f2:	2400      	movs	r4, #0
{
   801f4:	4605      	mov	r5, r0

	for(unsigned int i=0; i < 8; i++){	
   801f6:	f8df b064 	ldr.w	fp, [pc, #100]	; 8025c <spi1util_xferbyte+0x70>
   801fa:	4f19      	ldr	r7, [pc, #100]	; (80260 <spi1util_xferbyte+0x74>)
   801fc:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80264 <spi1util_xferbyte+0x78>
   80200:	f8df a064 	ldr.w	sl, [pc, #100]	; 80268 <spi1util_xferbyte+0x7c>
   80204:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8026c <spi1util_xferbyte+0x80>
   80208:	e008      	b.n	8021c <spi1util_xferbyte+0x30>
		gpio_set_pin_low(pin_spi1_sck);

		if (databyte & 0x80){
			gpio_set_pin_high(pin_spi1_mosi);
			} else {
			gpio_set_pin_low(pin_spi1_mosi);
   8020a:	47c0      	blx	r8
		}
		
		gpio_set_pin_high(pin_spi1_sck);
   8020c:	6838      	ldr	r0, [r7, #0]
   8020e:	47c8      	blx	r9
		databyte = databyte << 1;
   80210:	006d      	lsls	r5, r5, #1
		result = result << 1;
   80212:	0064      	lsls	r4, r4, #1
	for(unsigned int i=0; i < 8; i++){	
   80214:	3e01      	subs	r6, #1
		databyte = databyte << 1;
   80216:	b2ed      	uxtb	r5, r5
		result = result << 1;
   80218:	b2e4      	uxtb	r4, r4
	for(unsigned int i=0; i < 8; i++){	
   8021a:	d010      	beq.n	8023e <spi1util_xferbyte+0x52>
		result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   8021c:	4b14      	ldr	r3, [pc, #80]	; (80270 <spi1util_xferbyte+0x84>)
   8021e:	f8db 0000 	ldr.w	r0, [fp]
   80222:	4798      	blx	r3
   80224:	4603      	mov	r3, r0
		gpio_set_pin_low(pin_spi1_sck);
   80226:	6838      	ldr	r0, [r7, #0]
		result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80228:	2b00      	cmp	r3, #0
   8022a:	bf18      	it	ne
   8022c:	f044 0401 	orrne.w	r4, r4, #1
		gpio_set_pin_low(pin_spi1_sck);
   80230:	47c0      	blx	r8
		if (databyte & 0x80){
   80232:	062b      	lsls	r3, r5, #24
			gpio_set_pin_high(pin_spi1_mosi);
   80234:	f8da 0000 	ldr.w	r0, [sl]
		if (databyte & 0x80){
   80238:	d5e7      	bpl.n	8020a <spi1util_xferbyte+0x1e>
			gpio_set_pin_high(pin_spi1_mosi);
   8023a:	47c8      	blx	r9
   8023c:	e7e6      	b.n	8020c <spi1util_xferbyte+0x20>
	}

	result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   8023e:	f8db 0000 	ldr.w	r0, [fp]
   80242:	4b0b      	ldr	r3, [pc, #44]	; (80270 <spi1util_xferbyte+0x84>)
   80244:	4798      	blx	r3
   80246:	4603      	mov	r3, r0
   80248:	2b00      	cmp	r3, #0
   8024a:	bf18      	it	ne
   8024c:	f044 0401 	orrne.w	r4, r4, #1

	gpio_set_pin_low(pin_spi1_sck);
   80250:	6838      	ldr	r0, [r7, #0]
	result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80252:	b264      	sxtb	r4, r4
	gpio_set_pin_low(pin_spi1_sck);
   80254:	47c0      	blx	r8

	return result;
}
   80256:	b2e0      	uxtb	r0, r4
   80258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8025c:	200701c4 	.word	0x200701c4
   80260:	200701cc 	.word	0x200701cc
   80264:	000835ad 	.word	0x000835ad
   80268:	200701c8 	.word	0x200701c8
   8026c:	00083591 	.word	0x00083591
   80270:	00083575 	.word	0x00083575

00080274 <spi1util_deinit>:


void spi1util_deinit(void)
{
	/* IO setup is done when IO pins are configured right now */
   80274:	4770      	bx	lr
   80276:	bf00      	nop

00080278 <fpga_pins>:
void fpga_pins(bool enabled);
void usb_pwr_setup(void);
void check_power_state(void);

void fpga_pins(bool enabled)
{
   80278:	b570      	push	{r4, r5, r6, lr}
   8027a:	4605      	mov	r5, r0
	gpio_configure_pin(PIN_FPGA_DONE_GPIO, PIN_FPGA_DONE_FLAGS);
   8027c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80280:	2031      	movs	r0, #49	; 0x31
   80282:	4c52      	ldr	r4, [pc, #328]	; (803cc <fpga_pins+0x154>)
   80284:	47a0      	blx	r4
	
	//gpio_configure_pin(PIO_PB22_IDX, PIO_OUTPUT_0);
	//gpio_configure_pin(PIO_PB18_IDX, PIO_OUTPUT_0);	
	
	if (enabled){
   80286:	2d00      	cmp	r5, #0
   80288:	d04a      	beq.n	80320 <fpga_pins+0xa8>
		#ifdef CONF_BOARD_PCK0
		gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   8028a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8028e:	2036      	movs	r0, #54	; 0x36
   80290:	47a0      	blx	r4
		#ifdef CONF_BOARD_PCK1
		gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
		#endif
		
		
		gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   80292:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80296:	200a      	movs	r0, #10
   80298:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   8029a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8029e:	200b      	movs	r0, #11
   802a0:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART1_RXD, PIN_USART1_RXD_FLAGS);
   802a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802a6:	200c      	movs	r0, #12
   802a8:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART1_TXD, PIN_USART1_TXD_FLAGS);
   802aa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802ae:	200d      	movs	r0, #13
   802b0:	47a0      	blx	r4
		
		gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   802b2:	4947      	ldr	r1, [pc, #284]	; (803d0 <fpga_pins+0x158>)
   802b4:	2042      	movs	r0, #66	; 0x42
   802b6:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   802b8:	4945      	ldr	r1, [pc, #276]	; (803d0 <fpga_pins+0x158>)
   802ba:	2043      	movs	r0, #67	; 0x43
   802bc:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   802be:	4944      	ldr	r1, [pc, #272]	; (803d0 <fpga_pins+0x158>)
   802c0:	2044      	movs	r0, #68	; 0x44
   802c2:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   802c4:	4942      	ldr	r1, [pc, #264]	; (803d0 <fpga_pins+0x158>)
   802c6:	2045      	movs	r0, #69	; 0x45
   802c8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   802ca:	4941      	ldr	r1, [pc, #260]	; (803d0 <fpga_pins+0x158>)
   802cc:	2046      	movs	r0, #70	; 0x46
   802ce:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   802d0:	493f      	ldr	r1, [pc, #252]	; (803d0 <fpga_pins+0x158>)
   802d2:	2047      	movs	r0, #71	; 0x47
   802d4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   802d6:	493e      	ldr	r1, [pc, #248]	; (803d0 <fpga_pins+0x158>)
   802d8:	2048      	movs	r0, #72	; 0x48
   802da:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   802dc:	493c      	ldr	r1, [pc, #240]	; (803d0 <fpga_pins+0x158>)
   802de:	2049      	movs	r0, #73	; 0x49
   802e0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   802e2:	493c      	ldr	r1, [pc, #240]	; (803d4 <fpga_pins+0x15c>)
   802e4:	201d      	movs	r0, #29
   802e6:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   802e8:	4939      	ldr	r1, [pc, #228]	; (803d0 <fpga_pins+0x158>)
   802ea:	2052      	movs	r0, #82	; 0x52
   802ec:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   802ee:	4939      	ldr	r1, [pc, #228]	; (803d4 <fpga_pins+0x15c>)
   802f0:	2006      	movs	r0, #6
   802f2:	47a0      	blx	r4
		// gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_DATA_BUS_FLAG1);
		//gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_DATA_BUS_FLAG1); /* TODO: Add ADDR20 back */
		
		
		/* FPGA Programming pins */
		FPGA_NPROG_SETUP();
   802f4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   802f8:	2033      	movs	r0, #51	; 0x33
   802fa:	47a0      	blx	r4
		FPGA_NPROG_HIGH();		
   802fc:	2033      	movs	r0, #51	; 0x33
   802fe:	4b36      	ldr	r3, [pc, #216]	; (803d8 <fpga_pins+0x160>)
   80300:	4798      	blx	r3
		//gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
		//gpio_set_pin_high(FPGA_ALE_GPIO);
			
		//Force FPGA trigger
		
		gpio_configure_pin(FPGA_TRIGGER_GPIO, FPGA_TRIGGER_FLAGS);
   80302:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80306:	2057      	movs	r0, #87	; 0x57
   80308:	47a0      	blx	r4
		
		gpio_configure_pin(PIN_FPGA_PROGRAM_GPIO, PIN_FPGA_PROGRAM_FLAGS);
   8030a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8030e:	2033      	movs	r0, #51	; 0x33
   80310:	47a0      	blx	r4
		gpio_configure_pin(SPI_MISO_GPIO, PIO_INPUT); /* TODO: Add back */
		gpio_configure_pin(SPI_MOSI_GPIO, PIO_INPUT); /* TODO: Add back */
		gpio_configure_pin(SPI_SPCK_GPIO, PIO_INPUT); /* TODO: Add back */
	}
	
	gpio_configure_pin(PIN_FPGA_DONE_GPIO, PIN_FPGA_DONE_FLAGS);
   80312:	4623      	mov	r3, r4
	
}
   80314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	gpio_configure_pin(PIN_FPGA_DONE_GPIO, PIN_FPGA_DONE_FLAGS);
   80318:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8031c:	2031      	movs	r0, #49	; 0x31
   8031e:	4718      	bx	r3
		gpio_configure_pin(PIN_PCK0, PIO_INPUT);
   80320:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80324:	2036      	movs	r0, #54	; 0x36
   80326:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART0_RXD, PIO_INPUT);
   80328:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8032c:	200a      	movs	r0, #10
   8032e:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART0_TXD, PIO_INPUT);
   80330:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80334:	200b      	movs	r0, #11
   80336:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART1_RXD, PIO_INPUT);
   80338:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8033c:	200c      	movs	r0, #12
   8033e:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART1_TXD, PIO_INPUT);
   80340:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80344:	200d      	movs	r0, #13
   80346:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIO_INPUT);
   80348:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8034c:	2042      	movs	r0, #66	; 0x42
   8034e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIO_INPUT);
   80350:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80354:	2043      	movs	r0, #67	; 0x43
   80356:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIO_INPUT);
   80358:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8035c:	2044      	movs	r0, #68	; 0x44
   8035e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIO_INPUT);
   80360:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80364:	2045      	movs	r0, #69	; 0x45
   80366:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIO_INPUT);
   80368:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8036c:	2046      	movs	r0, #70	; 0x46
   8036e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIO_INPUT);
   80370:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80374:	2047      	movs	r0, #71	; 0x47
   80376:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIO_INPUT);
   80378:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8037c:	2048      	movs	r0, #72	; 0x48
   8037e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIO_INPUT);
   80380:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80384:	2049      	movs	r0, #73	; 0x49
   80386:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NRD, PIO_INPUT);
   80388:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8038c:	201d      	movs	r0, #29
   8038e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NWE, PIO_INPUT);
   80390:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80394:	2052      	movs	r0, #82	; 0x52
   80396:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NCS0, PIO_INPUT);
   80398:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8039c:	2006      	movs	r0, #6
   8039e:	47a0      	blx	r4
		gpio_configure_pin(FPGA_TRIGGER_GPIO, PIO_INPUT);
   803a0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803a4:	2057      	movs	r0, #87	; 0x57
   803a6:	47a0      	blx	r4
		gpio_configure_pin(PIN_FPGA_PROGRAM_GPIO, PIO_INPUT);
   803a8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803ac:	2033      	movs	r0, #51	; 0x33
   803ae:	47a0      	blx	r4
		gpio_configure_pin(SPI_MISO_GPIO, PIO_INPUT); /* TODO: Add back */
   803b0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803b4:	2019      	movs	r0, #25
   803b6:	47a0      	blx	r4
		gpio_configure_pin(SPI_MOSI_GPIO, PIO_INPUT); /* TODO: Add back */
   803b8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803bc:	201a      	movs	r0, #26
   803be:	47a0      	blx	r4
		gpio_configure_pin(SPI_SPCK_GPIO, PIO_INPUT); /* TODO: Add back */
   803c0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803c4:	201b      	movs	r0, #27
   803c6:	47a0      	blx	r4
   803c8:	e7a3      	b.n	80312 <fpga_pins+0x9a>
   803ca:	bf00      	nop
   803cc:	000835ed 	.word	0x000835ed
   803d0:	08000001 	.word	0x08000001
   803d4:	10000001 	.word	0x10000001
   803d8:	00083591 	.word	0x00083591

000803dc <i2c_setup>:

#define TPS56520_ADDR 0x34
void i2c_setup(void)
{
   803dc:	b530      	push	{r4, r5, lr}
	gpio_configure_pin(PIN_PWD_SDA, PIN_PWD_SDA_FLAGS);
   803de:	4d0c      	ldr	r5, [pc, #48]	; (80410 <i2c_setup+0x34>)
{
   803e0:	b085      	sub	sp, #20
	gpio_configure_pin(PIN_PWD_SDA, PIN_PWD_SDA_FLAGS);
   803e2:	4629      	mov	r1, r5
   803e4:	4c0b      	ldr	r4, [pc, #44]	; (80414 <i2c_setup+0x38>)
   803e6:	2011      	movs	r0, #17
   803e8:	47a0      	blx	r4
	gpio_configure_pin(PIN_PWD_SCL, PIN_PWD_SCL_FLAGS);
   803ea:	4629      	mov	r1, r5
   803ec:	2012      	movs	r0, #18
   803ee:	47a0      	blx	r4
	
	twi_master_options_t opt = {
   803f0:	f24c 3250 	movw	r2, #50000	; 0xc350
   803f4:	2100      	movs	r1, #0
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
   803f6:	4c08      	ldr	r4, [pc, #32]	; (80418 <i2c_setup+0x3c>)
   803f8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   803fc:	4b07      	ldr	r3, [pc, #28]	; (8041c <i2c_setup+0x40>)
   803fe:	2016      	movs	r0, #22
   80400:	9401      	str	r4, [sp, #4]
   80402:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   80404:	4b06      	ldr	r3, [pc, #24]	; (80420 <i2c_setup+0x44>)
   80406:	a901      	add	r1, sp, #4
   80408:	4806      	ldr	r0, [pc, #24]	; (80424 <i2c_setup+0x48>)
   8040a:	4798      	blx	r3
		.speed = 50000,
		.chip  = 0x00
	};
	
	twi_master_setup(TWI0, &opt);	
}
   8040c:	b005      	add	sp, #20
   8040e:	bd30      	pop	{r4, r5, pc}
   80410:	08000001 	.word	0x08000001
   80414:	000835ed 	.word	0x000835ed
   80418:	0501bd00 	.word	0x0501bd00
   8041c:	000833e1 	.word	0x000833e1
   80420:	000838e1 	.word	0x000838e1
   80424:	4008c000 	.word	0x4008c000

00080428 <peripheral_setup>:

void peripheral_setup(void)
{
   80428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// delay_ms(1);
	// gpio_configure_pin(PIN_USB_RESET, PIO_TYPE_PIO_OUTPUT_1);
	// gpio_set_pin_high(PIN_USB_RESET); //reset enable
	// setup interrupts
	irq_initialize_vectors();
	cpu_irq_enable();
   8042c:	f04f 0801 	mov.w	r8, #1
   80430:	4e3c      	ldr	r6, [pc, #240]	; (80524 <peripheral_setup+0xfc>)
   80432:	200b      	movs	r0, #11
   80434:	47b0      	blx	r6
   80436:	200c      	movs	r0, #12
   80438:	47b0      	blx	r6
   8043a:	200d      	movs	r0, #13
   8043c:	47b0      	blx	r6
   8043e:	200e      	movs	r0, #14
   80440:	47b0      	blx	r6
	fpga_pins(0); // set FPGA pins as inputs
   80442:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80528 <peripheral_setup+0x100>
   80446:	2000      	movs	r0, #0
   80448:	47c8      	blx	r9
	enable_switched_power();
   8044a:	4b38      	ldr	r3, [pc, #224]	; (8052c <peripheral_setup+0x104>)
   8044c:	4798      	blx	r3
	gpio_configure_pin(PIN_SWSTATE_GPIO, PIN_SWSTATE_FLAGS);
   8044e:	4d38      	ldr	r5, [pc, #224]	; (80530 <peripheral_setup+0x108>)
   80450:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80454:	203a      	movs	r0, #58	; 0x3a
   80456:	47a8      	blx	r5
	gpio_configure_pin(PIN_USB_HBEAT, PIN_USB_HBEAT_FLAGS);
   80458:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8045c:	2003      	movs	r0, #3
   8045e:	47a8      	blx	r5
	gpio_configure_pin(PIN_TEMP_ERR_LED, PIN_TEMP_ERR_LED_FLAGS);
   80460:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80464:	2000      	movs	r0, #0
   80466:	47a8      	blx	r5
	gpio_configure_pin(PIN_TEMP_OK_LED, PIN_TEMP_OK_LED_FLAGS);
   80468:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8046c:	2001      	movs	r0, #1
   8046e:	47a8      	blx	r5
	cpu_irq_enable();
   80470:	4b30      	ldr	r3, [pc, #192]	; (80534 <peripheral_setup+0x10c>)
   80472:	f883 8000 	strb.w	r8, [r3]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   80476:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8047a:	b662      	cpsie	i
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
   8047c:	2400      	movs	r4, #0
   8047e:	4b2e      	ldr	r3, [pc, #184]	; (80538 <peripheral_setup+0x110>)

	// Initialize the sleep manager
	sleepmgr_init();

#if !SAMD21 && !SAMR21
	sysclk_init();
   80480:	4a2e      	ldr	r2, [pc, #184]	; (8053c <peripheral_setup+0x114>)
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   80482:	f883 8005 	strb.w	r8, [r3, #5]
		sleepmgr_locks[i] = 0;
   80486:	701c      	strb	r4, [r3, #0]
   80488:	705c      	strb	r4, [r3, #1]
   8048a:	709c      	strb	r4, [r3, #2]
   8048c:	70dc      	strb	r4, [r3, #3]
   8048e:	711c      	strb	r4, [r3, #4]
   80490:	4790      	blx	r2
	board_init();
   80492:	4b2b      	ldr	r3, [pc, #172]	; (80540 <peripheral_setup+0x118>)
   80494:	4798      	blx	r3
	//But you can't define things invalid, so hold is auto-calculated:	
	//NRD_HOLD = NRD_CYCLE - NRD SETUP - NRD PULSE
	//NCS_RD_HOLD = NRD_CYCLE - NCS_RD_SETUP - NCS_RD_PULSE

	pmc_enable_periph_clk(ID_SMC);	
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(2)
   80496:	4f2b      	ldr	r7, [pc, #172]	; (80544 <peripheral_setup+0x11c>)
	i2c_setup(); // setup I2C comms
   80498:	4b2b      	ldr	r3, [pc, #172]	; (80548 <peripheral_setup+0x120>)
   8049a:	4798      	blx	r3
	pmc_enable_periph_clk(ID_SMC);	
   8049c:	2009      	movs	r0, #9
   8049e:	47b0      	blx	r6
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(2)
   804a0:	4621      	mov	r1, r4
   804a2:	4638      	mov	r0, r7
   804a4:	4a29      	ldr	r2, [pc, #164]	; (8054c <peripheral_setup+0x124>)
   804a6:	4b2a      	ldr	r3, [pc, #168]	; (80550 <peripheral_setup+0x128>)
   804a8:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(3)
	| SMC_SETUP_NRD_SETUP(2)
	| SMC_SETUP_NCS_RD_SETUP(3));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(6)
   804aa:	4621      	mov	r1, r4
   804ac:	4638      	mov	r0, r7
   804ae:	4a29      	ldr	r2, [pc, #164]	; (80554 <peripheral_setup+0x12c>)
   804b0:	4b29      	ldr	r3, [pc, #164]	; (80558 <peripheral_setup+0x130>)
   804b2:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(2)
	| SMC_PULSE_NRD_PULSE(6)
	| SMC_PULSE_NCS_RD_PULSE(6));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(12)
   804b4:	4621      	mov	r1, r4
   804b6:	4638      	mov	r0, r7
   804b8:	f04f 120c 	mov.w	r2, #786444	; 0xc000c
   804bc:	4b27      	ldr	r3, [pc, #156]	; (8055c <peripheral_setup+0x134>)
   804be:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(12));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   804c0:	4621      	mov	r1, r4
   804c2:	4638      	mov	r0, r7
   804c4:	2203      	movs	r2, #3
   804c6:	4b26      	ldr	r3, [pc, #152]	; (80560 <peripheral_setup+0x138>)
   804c8:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   804ca:	2204      	movs	r2, #4
   804cc:	4b25      	ldr	r3, [pc, #148]	; (80564 <peripheral_setup+0x13c>)
	pmc_enable_pck(ul_id);
   804ce:	4620      	mov	r0, r4
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   804d0:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   804d2:	4b25      	ldr	r3, [pc, #148]	; (80568 <peripheral_setup+0x140>)
   804d4:	4798      	blx	r3
        | SMC_MODE_DBW_BIT_8);


	/* Enable PCLK0 at 84 MHz */	
	genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
	pmc_enable_upll_clock();
   804d6:	4b25      	ldr	r3, [pc, #148]	; (8056c <peripheral_setup+0x144>)
   804d8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_UOTGHS);
   804da:	2028      	movs	r0, #40	; 0x28
   804dc:	47b0      	blx	r6

	// Setup fan PWM
	gpio_configure_pin(PIO_PB25_IDX, PIO_PERIPH_B);	
   804de:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   804e2:	2039      	movs	r0, #57	; 0x39
   804e4:	47a8      	blx	r5

	fan_pwm_init();
   804e6:	4b22      	ldr	r3, [pc, #136]	; (80570 <peripheral_setup+0x148>)
   804e8:	4798      	blx	r3
	fan_pwm_set_duty_cycle(75); //Set at 50% in case we crash - will be tuned later
   804ea:	4b22      	ldr	r3, [pc, #136]	; (80574 <peripheral_setup+0x14c>)
   804ec:	204b      	movs	r0, #75	; 0x4b
   804ee:	4798      	blx	r3

	// tps56520_init(); // set FPGA voltage to default (1V) //do later, after daughter board connected
	cdce906_init();  //Init CDCE906 PLL Chip
   804f0:	4b21      	ldr	r3, [pc, #132]	; (80578 <peripheral_setup+0x150>)
   804f2:	4798      	blx	r3

	// gpio_set_pin_low(PIN_USB_RESET); // bring USB-PD chip out of reset
	// delay_ms(100); //TODO - these delays are way off??

	// turn on power pins for various on board regulators
	power_init();
   804f4:	4b21      	ldr	r3, [pc, #132]	; (8057c <peripheral_setup+0x154>)
   804f6:	4798      	blx	r3

	// enable on board thermometers for monitoring board temps
	thermals_init(); 
   804f8:	4b21      	ldr	r3, [pc, #132]	; (80580 <peripheral_setup+0x158>)
   804fa:	4798      	blx	r3

	/* Enable SMC */
	fpga_pins(true);
   804fc:	4640      	mov	r0, r8
   804fe:	47c8      	blx	r9

	udc_start();
   80500:	4b20      	ldr	r3, [pc, #128]	; (80584 <peripheral_setup+0x15c>)
   80502:	4798      	blx	r3

	// enable periodic interrupt to check thermals
	periodic_timer_init();
   80504:	4b20      	ldr	r3, [pc, #128]	; (80588 <peripheral_setup+0x160>)
   80506:	4798      	blx	r3

	// enable power delivery to FPGA (Tgt Power switch)
	gpio_configure_pin(PIO_PB27_IDX, PIO_OUTPUT_1 | PIO_DEFAULT);
   80508:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8050c:	203b      	movs	r0, #59	; 0x3b
   8050e:	47a8      	blx	r5

	enable_fpga_power();
   80510:	4b1e      	ldr	r3, [pc, #120]	; (8058c <peripheral_setup+0x164>)
   80512:	4798      	blx	r3

	gpio_configure_pin(PIN_VBUS_DETECT, PIN_VBUS_DETECT_FLAGS);
   80514:	462b      	mov	r3, r5
}
   80516:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gpio_configure_pin(PIN_VBUS_DETECT, PIN_VBUS_DETECT_FLAGS);
   8051a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8051e:	204f      	movs	r0, #79	; 0x4f
   80520:	4718      	bx	r3
   80522:	bf00      	nop
   80524:	000833e1 	.word	0x000833e1
   80528:	00080279 	.word	0x00080279
   8052c:	00080995 	.word	0x00080995
   80530:	000835ed 	.word	0x000835ed
   80534:	20070b04 	.word	0x20070b04
   80538:	20073304 	.word	0x20073304
   8053c:	0008322d 	.word	0x0008322d
   80540:	000852e9 	.word	0x000852e9
   80544:	400e0000 	.word	0x400e0000
   80548:	000803dd 	.word	0x000803dd
   8054c:	03020302 	.word	0x03020302
   80550:	00083089 	.word	0x00083089
   80554:	06060206 	.word	0x06060206
   80558:	00083095 	.word	0x00083095
   8055c:	000830a1 	.word	0x000830a1
   80560:	000830ad 	.word	0x000830ad
   80564:	400e0600 	.word	0x400e0600
   80568:	00083401 	.word	0x00083401
   8056c:	000833cd 	.word	0x000833cd
   80570:	00080dfd 	.word	0x00080dfd
   80574:	00080e51 	.word	0x00080e51
   80578:	00082cfd 	.word	0x00082cfd
   8057c:	00080a51 	.word	0x00080a51
   80580:	00080afd 	.word	0x00080afd
   80584:	0008113d 	.word	0x0008113d
   80588:	00080ee5 	.word	0x00080ee5
   8058c:	00080db5 	.word	0x00080db5

00080590 <main>:

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
	volatile uint32_t reset_reason = 0;
   80590:	2300      	movs	r3, #0
{
   80592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	// capture reset reason as watchdog on by default...
	reset_reason = RSTC->RSTC_SR;
	reset_reason = reset_reason; //Still a thing in 2021??
	WDT->WDT_MR = (1 << 25); //disable watchdog
   80596:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
   8059a:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8060c <main+0x7c>
{
   8059e:	b086      	sub	sp, #24
   805a0:	464c      	mov	r4, r9
	reset_reason = RSTC->RSTC_SR;
   805a2:	4a1b      	ldr	r2, [pc, #108]	; (80610 <main+0x80>)
	volatile uint32_t reset_reason = 0;
   805a4:	9301      	str	r3, [sp, #4]
	reset_reason = RSTC->RSTC_SR;
   805a6:	f8d2 a004 	ldr.w	sl, [r2, #4]
	
	// unlock I2C
	I2C_LOCK = 0;
   805aa:	f8df c068 	ldr.w	ip, [pc, #104]	; 80614 <main+0x84>
	reset_reason = RSTC->RSTC_SR;
   805ae:	f8cd a004 	str.w	sl, [sp, #4]
	reset_reason = reset_reason; //Still a thing in 2021??
   805b2:	f8dd a004 	ldr.w	sl, [sp, #4]
	
	//Convert serial number to ASCII for USB Serial number
	uint32_t serial_number[4];
	flash_read_unique_id(serial_number, sizeof(serial_number));
   805b6:	4e18      	ldr	r6, [pc, #96]	; (80618 <main+0x88>)
	reset_reason = reset_reason; //Still a thing in 2021??
   805b8:	f8cd a004 	str.w	sl, [sp, #4]
	flash_read_unique_id(serial_number, sizeof(serial_number));
   805bc:	a802      	add	r0, sp, #8
	WDT->WDT_MR = (1 << 25); //disable watchdog
   805be:	f8c2 e054 	str.w	lr, [r2, #84]	; 0x54
	flash_read_unique_id(serial_number, sizeof(serial_number));
   805c2:	2110      	movs	r1, #16
   805c4:	4605      	mov	r5, r0
	I2C_LOCK = 0;
   805c6:	f88c 3000 	strb.w	r3, [ip]
	flash_read_unique_id(serial_number, sizeof(serial_number));
   805ca:	4f14      	ldr	r7, [pc, #80]	; (8061c <main+0x8c>)
   805cc:	47b0      	blx	r6
	for(unsigned int i = 0; i < 4; i++){
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);
   805ce:	4e14      	ldr	r6, [pc, #80]	; (80620 <main+0x90>)
   805d0:	f10d 0818 	add.w	r8, sp, #24
   805d4:	f855 2b04 	ldr.w	r2, [r5], #4
   805d8:	4620      	mov	r0, r4
   805da:	4631      	mov	r1, r6
   805dc:	47b8      	blx	r7
	for(unsigned int i = 0; i < 4; i++){
   805de:	4545      	cmp	r5, r8
   805e0:	f104 0408 	add.w	r4, r4, #8
   805e4:	d1f6      	bne.n	805d4 <main+0x44>
	}
	usb_serial_number[32] = 0;
   805e6:	2200      	movs	r2, #0

	peripheral_setup(); // turn on required peripherals
   805e8:	4b0e      	ldr	r3, [pc, #56]	; (80624 <main+0x94>)
	usb_serial_number[32] = 0;
   805ea:	f889 2020 	strb.w	r2, [r9, #32]
	peripheral_setup(); // turn on required peripherals
   805ee:	4798      	blx	r3
	
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);
	
	naeusb_register_handlers();
   805f0:	4b0d      	ldr	r3, [pc, #52]	; (80628 <main+0x98>)
   805f2:	4798      	blx	r3
	naeusart_register_handlers();
   805f4:	4b0d      	ldr	r3, [pc, #52]	; (8062c <main+0x9c>)
   805f6:	4798      	blx	r3
	fpga_target_register_handlers();
   805f8:	4b0d      	ldr	r3, [pc, #52]	; (80630 <main+0xa0>)
   805fa:	4798      	blx	r3
	bergen_register_handlers();
   805fc:	4b0d      	ldr	r3, [pc, #52]	; (80634 <main+0xa4>)
   805fe:	4d0e      	ldr	r5, [pc, #56]	; (80638 <main+0xa8>)
   80600:	4c0e      	ldr	r4, [pc, #56]	; (8063c <main+0xac>)
   80602:	4798      	blx	r3
	
	// send received USART data over to PC on cdc 0 and 1
	while (true) {
		cdc_send_to_pc();
   80604:	47a8      	blx	r5
		check_power_state(); //make sure power hasn't been killed		
   80606:	47a0      	blx	r4
	while (true) {
   80608:	e7fc      	b.n	80604 <main+0x74>
   8060a:	bf00      	nop
   8060c:	200701d0 	.word	0x200701d0
   80610:	400e1a00 	.word	0x400e1a00
   80614:	20072132 	.word	0x20072132
   80618:	00082e49 	.word	0x00082e49
   8061c:	00085dd9 	.word	0x00085dd9
   80620:	0008c930 	.word	0x0008c930
   80624:	00080429 	.word	0x00080429
   80628:	00081a6d 	.word	0x00081a6d
   8062c:	00081edd 	.word	0x00081edd
   80630:	00082a3d 	.word	0x00082a3d
   80634:	00080889 	.word	0x00080889
   80638:	000821f9 	.word	0x000821f9
   8063c:	00080ea1 	.word	0x00080ea1

00080640 <ctrl_i2c_setup>:
	I2C_LOCK = 0;
}

void ctrl_i2c_setup(void)
{
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)
   80640:	4a0d      	ldr	r2, [pc, #52]	; (80678 <ctrl_i2c_setup+0x38>)
   80642:	88d3      	ldrh	r3, [r2, #6]
   80644:	8991      	ldrh	r1, [r2, #12]
   80646:	4299      	cmp	r1, r3
   80648:	d314      	bcc.n	80674 <ctrl_i2c_setup+0x34>
	return;
	
	uint8_t addr_len = udd_g_ctrlreq.req.wLength - 1;
	if ((addr_len > 3) || (addr_len < 1)) {
   8064a:	3b02      	subs	r3, #2
   8064c:	b2db      	uxtb	r3, r3
   8064e:	2b02      	cmp	r3, #2
   80650:	d810      	bhi.n	80674 <ctrl_i2c_setup+0x34>
{
   80652:	b410      	push	{r4}
		return;
	}
	USER_TWI_PACKET.chip = udd_g_ctrlreq.payload[0];
   80654:	6894      	ldr	r4, [r2, #8]
   80656:	4809      	ldr	r0, [pc, #36]	; (8067c <ctrl_i2c_setup+0x3c>)
   80658:	4622      	mov	r2, r4
   8065a:	7824      	ldrb	r4, [r4, #0]
   8065c:	4601      	mov	r1, r0
   8065e:	7404      	strb	r4, [r0, #16]
	for (uint8_t i = 0; i < addr_len; i++) {
   80660:	1c50      	adds	r0, r2, #1
   80662:	4403      	add	r3, r0
		USER_TWI_PACKET.addr[i] = udd_g_ctrlreq.payload[i+1];
   80664:	f812 0f01 	ldrb.w	r0, [r2, #1]!
	for (uint8_t i = 0; i < addr_len; i++) {
   80668:	429a      	cmp	r2, r3
		USER_TWI_PACKET.addr[i] = udd_g_ctrlreq.payload[i+1];
   8066a:	f801 0b01 	strb.w	r0, [r1], #1
	for (uint8_t i = 0; i < addr_len; i++) {
   8066e:	d1f9      	bne.n	80664 <ctrl_i2c_setup+0x24>
	}
	
	
}
   80670:	bc10      	pop	{r4}
   80672:	4770      	bx	lr
   80674:	4770      	bx	lr
   80676:	bf00      	nop
   80678:	20072288 	.word	0x20072288
   8067c:	200701f4 	.word	0x200701f4

00080680 <bergen_setup_out_received>:
bool naeusb_cdc_settings_in(void);
void naeusb_cdc_settings_out(void);

bool bergen_setup_out_received(void)
{
	switch (udd_g_ctrlreq.req.bRequest) {			
   80680:	4a0d      	ldr	r2, [pc, #52]	; (806b8 <bergen_setup_out_received+0x38>)
   80682:	7853      	ldrb	r3, [r2, #1]
   80684:	3b41      	subs	r3, #65	; 0x41
   80686:	2b03      	cmp	r3, #3
   80688:	d813      	bhi.n	806b2 <bergen_setup_out_received+0x32>
   8068a:	e8df f003 	tbb	[pc, r3]
   8068e:	0a0e      	.short	0x0a0e
   80690:	0206      	.short	0x0206
		case REQ_I2C_SETUP:
			udd_g_ctrlreq.callback = ctrl_i2c_setup;
			return true;
			
		case REQ_I2C_DATA:
			udd_g_ctrlreq.callback = ctrl_i2c_send;
   80692:	4b0a      	ldr	r3, [pc, #40]	; (806bc <bergen_setup_out_received+0x3c>)
			return true;
   80694:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_i2c_send;
   80696:	6113      	str	r3, [r2, #16]
			return true;
   80698:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_i2c_setup;
   8069a:	4b09      	ldr	r3, [pc, #36]	; (806c0 <bergen_setup_out_received+0x40>)
			return true;
   8069c:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_i2c_setup;
   8069e:	6113      	str	r3, [r2, #16]
			return true;
   806a0:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_fpga_temp_cb;
   806a2:	4b08      	ldr	r3, [pc, #32]	; (806c4 <bergen_setup_out_received+0x44>)
			return true;
   806a4:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_fpga_temp_cb;
   806a6:	6113      	str	r3, [r2, #16]
			return true;
   806a8:	4770      	bx	lr
			
		case REQ_FPGA_CDC:
			udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   806aa:	4b07      	ldr	r3, [pc, #28]	; (806c8 <bergen_setup_out_received+0x48>)
			return true;
   806ac:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   806ae:	6113      	str	r3, [r2, #16]
			return true;
   806b0:	4770      	bx	lr
	switch (udd_g_ctrlreq.req.bRequest) {			
   806b2:	2000      	movs	r0, #0
			break;
	}
	return false;
}
   806b4:	4770      	bx	lr
   806b6:	bf00      	nop
   806b8:	20072288 	.word	0x20072288
   806bc:	000806cd 	.word	0x000806cd
   806c0:	00080641 	.word	0x00080641
   806c4:	0008082d 	.word	0x0008082d
   806c8:	00081acd 	.word	0x00081acd

000806cc <ctrl_i2c_send>:
{
   806cc:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)
   806ce:	4b0e      	ldr	r3, [pc, #56]	; (80708 <ctrl_i2c_send+0x3c>)
   806d0:	88da      	ldrh	r2, [r3, #6]
   806d2:	8999      	ldrh	r1, [r3, #12]
   806d4:	4291      	cmp	r1, r2
   806d6:	d307      	bcc.n	806e8 <ctrl_i2c_send+0x1c>
	if (I2C_LOCK) {
   806d8:	4c0c      	ldr	r4, [pc, #48]	; (8070c <ctrl_i2c_send+0x40>)
   806da:	7821      	ldrb	r1, [r4, #0]
   806dc:	f001 05ff 	and.w	r5, r1, #255	; 0xff
   806e0:	b119      	cbz	r1, 806ea <ctrl_i2c_send+0x1e>
		I2C_STATUS = 1;
   806e2:	2201      	movs	r2, #1
   806e4:	4b0a      	ldr	r3, [pc, #40]	; (80710 <ctrl_i2c_send+0x44>)
   806e6:	701a      	strb	r2, [r3, #0]
}
   806e8:	bd38      	pop	{r3, r4, r5, pc}
	USER_TWI_PACKET.buffer = udd_g_ctrlreq.payload;
   806ea:	490a      	ldr	r1, [pc, #40]	; (80714 <ctrl_i2c_send+0x48>)
   806ec:	689b      	ldr	r3, [r3, #8]
	USER_TWI_PACKET.length = udd_g_ctrlreq.req.wLength;
   806ee:	60ca      	str	r2, [r1, #12]
	I2C_LOCK = 1;
   806f0:	2201      	movs	r2, #1
	USER_TWI_PACKET.buffer = udd_g_ctrlreq.payload;
   806f2:	608b      	str	r3, [r1, #8]
	I2C_STATUS = twi_master_write(TWI0, &USER_TWI_PACKET);
   806f4:	4808      	ldr	r0, [pc, #32]	; (80718 <ctrl_i2c_send+0x4c>)
   806f6:	4b09      	ldr	r3, [pc, #36]	; (8071c <ctrl_i2c_send+0x50>)
	I2C_LOCK = 1;
   806f8:	7022      	strb	r2, [r4, #0]
	I2C_STATUS = twi_master_write(TWI0, &USER_TWI_PACKET);
   806fa:	4798      	blx	r3
   806fc:	4b04      	ldr	r3, [pc, #16]	; (80710 <ctrl_i2c_send+0x44>)
   806fe:	b2c0      	uxtb	r0, r0
   80700:	7018      	strb	r0, [r3, #0]
	I2C_LOCK = 0;
   80702:	7025      	strb	r5, [r4, #0]
}
   80704:	bd38      	pop	{r3, r4, r5, pc}
   80706:	bf00      	nop
   80708:	20072288 	.word	0x20072288
   8070c:	20072132 	.word	0x20072132
   80710:	20071c9c 	.word	0x20071c9c
   80714:	200701f4 	.word	0x200701f4
   80718:	4008c000 	.word	0x4008c000
   8071c:	00083a11 	.word	0x00083a11

00080720 <bergen_setup_in_received>:

bool bergen_setup_in_received(void)
{
   80720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t addr;
	switch (udd_g_ctrlreq.req.bRequest & 0xFF) {
   80724:	4c37      	ldr	r4, [pc, #220]	; (80804 <bergen_setup_in_received+0xe4>)
   80726:	7863      	ldrb	r3, [r4, #1]
   80728:	3b41      	subs	r3, #65	; 0x41
   8072a:	2b03      	cmp	r3, #3
   8072c:	d867      	bhi.n	807fe <bergen_setup_in_received+0xde>
   8072e:	e8df f003 	tbb	[pc, r3]
   80732:	3441      	.short	0x3441
   80734:	021b      	.short	0x021b
			break;
		
		case REQ_I2C_DATA:
			USER_TWI_PACKET.length = udd_g_ctrlreq.req.wLength;
			USER_TWI_PACKET.buffer = respbuf + 1;
			if (I2C_LOCK) {
   80736:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80808 <bergen_setup_in_received+0xe8>
			USER_TWI_PACKET.length = udd_g_ctrlreq.req.wLength;
   8073a:	4f34      	ldr	r7, [pc, #208]	; (8080c <bergen_setup_in_received+0xec>)
   8073c:	88e3      	ldrh	r3, [r4, #6]
			USER_TWI_PACKET.buffer = respbuf + 1;
   8073e:	4e34      	ldr	r6, [pc, #208]	; (80810 <bergen_setup_in_received+0xf0>)
			if (I2C_LOCK) {
   80740:	f898 2000 	ldrb.w	r2, [r8]
			USER_TWI_PACKET.buffer = respbuf + 1;
   80744:	e9c7 6302 	strd	r6, r3, [r7, #8]
			if (I2C_LOCK) {
   80748:	f002 09ff 	and.w	r9, r2, #255	; 0xff
   8074c:	2a00      	cmp	r2, #0
   8074e:	d035      	beq.n	807bc <bergen_setup_in_received+0x9c>
				respbuf[0] = 1;
   80750:	2201      	movs	r2, #1
				I2C_STATUS = 1;
   80752:	4930      	ldr	r1, [pc, #192]	; (80814 <bergen_setup_in_received+0xf4>)
				respbuf[0] = 1;
   80754:	1e70      	subs	r0, r6, #1
				udd_g_ctrlreq.payload = respbuf;
				udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   80756:	4413      	add	r3, r2
				respbuf[0] = 1;
   80758:	f806 2c01 	strb.w	r2, [r6, #-1]
				I2C_STATUS = 1;
   8075c:	700a      	strb	r2, [r1, #0]
				udd_g_ctrlreq.payload = respbuf;
   8075e:	60a0      	str	r0, [r4, #8]
				udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   80760:	81a3      	strh	r3, [r4, #12]
				return true;
   80762:	4610      	mov	r0, r2
		case REQ_FPGA_CDC:
			return naeusb_cdc_settings_in();
			break;
	}
	return false;
}
   80764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			respbuf[1] = USER_TWI_PACKET.chip;
   80768:	4f28      	ldr	r7, [pc, #160]	; (8080c <bergen_setup_in_received+0xec>)
			respbuf[0] = I2C_STATUS;
   8076a:	4b2a      	ldr	r3, [pc, #168]	; (80814 <bergen_setup_in_received+0xf4>)
   8076c:	4e2a      	ldr	r6, [pc, #168]	; (80818 <bergen_setup_in_received+0xf8>)
   8076e:	781a      	ldrb	r2, [r3, #0]
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   80770:	687d      	ldr	r5, [r7, #4]
			respbuf[1] = USER_TWI_PACKET.chip;
   80772:	7c3b      	ldrb	r3, [r7, #16]
			respbuf[0] = I2C_STATUS;
   80774:	7032      	strb	r2, [r6, #0]
			respbuf[1] = USER_TWI_PACKET.chip;
   80776:	7073      	strb	r3, [r6, #1]
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   80778:	2d00      	cmp	r5, #0
   8077a:	d03e      	beq.n	807fa <bergen_setup_in_received+0xda>
   8077c:	2300      	movs	r3, #0
   8077e:	1c58      	adds	r0, r3, #1
				respbuf[i + 2] = USER_TWI_PACKET.addr[i];
   80780:	5cf9      	ldrb	r1, [r7, r3]
   80782:	18f2      	adds	r2, r6, r3
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   80784:	b2c3      	uxtb	r3, r0
   80786:	42ab      	cmp	r3, r5
				respbuf[i + 2] = USER_TWI_PACKET.addr[i];
   80788:	7091      	strb	r1, [r2, #2]
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   8078a:	d3f8      	bcc.n	8077e <bergen_setup_in_received+0x5e>
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.addr_length + 2;
   8078c:	3502      	adds	r5, #2
   8078e:	b2ad      	uxth	r5, r5
			return true;
   80790:	2001      	movs	r0, #1
			udd_g_ctrlreq.payload = respbuf;
   80792:	60a6      	str	r6, [r4, #8]
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.addr_length + 2;
   80794:	81a5      	strh	r5, [r4, #12]
}
   80796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (I2C_LOCK) {
   8079a:	4b1b      	ldr	r3, [pc, #108]	; (80808 <bergen_setup_in_received+0xe8>)
   8079c:	781b      	ldrb	r3, [r3, #0]
   8079e:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   807a2:	b1eb      	cbz	r3, 807e0 <bergen_setup_in_received+0xc0>
				respbuf[0] = 1;
   807a4:	2301      	movs	r3, #1
   807a6:	4a1c      	ldr	r2, [pc, #112]	; (80818 <bergen_setup_in_received+0xf8>)
				return true;
   807a8:	4618      	mov	r0, r3
				respbuf[0] = 1;
   807aa:	7013      	strb	r3, [r2, #0]
				udd_g_ctrlreq.payload = respbuf;
   807ac:	60a2      	str	r2, [r4, #8]
				udd_g_ctrlreq.payload_size = 1;
   807ae:	81a3      	strh	r3, [r4, #12]
}
   807b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return naeusb_cdc_settings_in();
   807b4:	4b19      	ldr	r3, [pc, #100]	; (8081c <bergen_setup_in_received+0xfc>)
}
   807b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return naeusb_cdc_settings_in();
   807ba:	4718      	bx	r3
			I2C_LOCK = 1;
   807bc:	2501      	movs	r5, #1
			twi_master_read(TWI0, &USER_TWI_PACKET);
   807be:	4b18      	ldr	r3, [pc, #96]	; (80820 <bergen_setup_in_received+0x100>)
   807c0:	4639      	mov	r1, r7
   807c2:	4818      	ldr	r0, [pc, #96]	; (80824 <bergen_setup_in_received+0x104>)
			I2C_LOCK = 1;
   807c4:	f888 5000 	strb.w	r5, [r8]
			twi_master_read(TWI0, &USER_TWI_PACKET);
   807c8:	4798      	blx	r3
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   807ca:	68fb      	ldr	r3, [r7, #12]
			respbuf[0] = 0;
   807cc:	f806 9c01 	strb.w	r9, [r6, #-1]
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   807d0:	442b      	add	r3, r5
			respbuf[0] = 0;
   807d2:	3e01      	subs	r6, #1
			return true;
   807d4:	4628      	mov	r0, r5
			I2C_LOCK = 0;
   807d6:	f888 9000 	strb.w	r9, [r8]
			udd_g_ctrlreq.payload = respbuf;
   807da:	60a6      	str	r6, [r4, #8]
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   807dc:	81a3      	strh	r3, [r4, #12]
			return true;
   807de:	e7da      	b.n	80796 <bergen_setup_in_received+0x76>
			max1617_register_read(addr, respbuf + 1);
   807e0:	4d0b      	ldr	r5, [pc, #44]	; (80810 <bergen_setup_in_received+0xf0>)
   807e2:	4b11      	ldr	r3, [pc, #68]	; (80828 <bergen_setup_in_received+0x108>)
   807e4:	4629      	mov	r1, r5
   807e6:	78a0      	ldrb	r0, [r4, #2]
   807e8:	4798      	blx	r3
			udd_g_ctrlreq.payload_size = 2;
   807ea:	2302      	movs	r3, #2
			respbuf[0] = 0;
   807ec:	1e6a      	subs	r2, r5, #1
			return true;
   807ee:	2001      	movs	r0, #1
			respbuf[0] = 0;
   807f0:	f805 6c01 	strb.w	r6, [r5, #-1]
			udd_g_ctrlreq.payload = respbuf;
   807f4:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = 2;
   807f6:	81a3      	strh	r3, [r4, #12]
			return true;
   807f8:	e7cd      	b.n	80796 <bergen_setup_in_received+0x76>
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   807fa:	2502      	movs	r5, #2
   807fc:	e7c8      	b.n	80790 <bergen_setup_in_received+0x70>
	switch (udd_g_ctrlreq.req.bRequest & 0xFF) {
   807fe:	2000      	movs	r0, #0
   80800:	e7c9      	b.n	80796 <bergen_setup_in_received+0x76>
   80802:	bf00      	nop
   80804:	20072288 	.word	0x20072288
   80808:	20072132 	.word	0x20072132
   8080c:	200701f4 	.word	0x200701f4
   80810:	20071a19 	.word	0x20071a19
   80814:	20071c9c 	.word	0x20071c9c
   80818:	20071a18 	.word	0x20071a18
   8081c:	00081f89 	.word	0x00081f89
   80820:	00083939 	.word	0x00083939
   80824:	4008c000 	.word	0x4008c000
   80828:	000809a9 	.word	0x000809a9

0008082c <ctrl_fpga_temp_cb>:
{
   8082c:	b538      	push	{r3, r4, r5, lr}
	if (I2C_LOCK) {
   8082e:	4c0b      	ldr	r4, [pc, #44]	; (8085c <ctrl_fpga_temp_cb+0x30>)
   80830:	7823      	ldrb	r3, [r4, #0]
   80832:	b11b      	cbz	r3, 8083c <ctrl_fpga_temp_cb+0x10>
		I2C_STATUS = 1;
   80834:	2201      	movs	r2, #1
   80836:	4b0a      	ldr	r3, [pc, #40]	; (80860 <ctrl_fpga_temp_cb+0x34>)
   80838:	701a      	strb	r2, [r3, #0]
}
   8083a:	bd38      	pop	{r3, r4, r5, pc}
	I2C_LOCK = 1;
   8083c:	2101      	movs	r1, #1
   8083e:	f003 05ff 	and.w	r5, r3, #255	; 0xff
	max1617_register_write(udd_g_ctrlreq.req.wValue & 0xFF, udd_g_ctrlreq.payload[0]);
   80842:	4b08      	ldr	r3, [pc, #32]	; (80864 <ctrl_fpga_temp_cb+0x38>)
	I2C_LOCK = 1;
   80844:	7021      	strb	r1, [r4, #0]
	max1617_register_write(udd_g_ctrlreq.req.wValue & 0xFF, udd_g_ctrlreq.payload[0]);
   80846:	689a      	ldr	r2, [r3, #8]
   80848:	7898      	ldrb	r0, [r3, #2]
   8084a:	f992 1000 	ldrsb.w	r1, [r2]
   8084e:	4b06      	ldr	r3, [pc, #24]	; (80868 <ctrl_fpga_temp_cb+0x3c>)
   80850:	4798      	blx	r3
	I2C_STATUS = 0;
   80852:	4b03      	ldr	r3, [pc, #12]	; (80860 <ctrl_fpga_temp_cb+0x34>)
	I2C_LOCK = 0;
   80854:	7025      	strb	r5, [r4, #0]
	I2C_STATUS = 0;
   80856:	701d      	strb	r5, [r3, #0]
}
   80858:	bd38      	pop	{r3, r4, r5, pc}
   8085a:	bf00      	nop
   8085c:	20072132 	.word	0x20072132
   80860:	20071c9c 	.word	0x20071c9c
   80864:	20072288 	.word	0x20072288
   80868:	000809f9 	.word	0x000809f9

0008086c <ui_powerdown>:
}
   8086c:	4770      	bx	lr
   8086e:	bf00      	nop

00080870 <ui_wakeup>:
   80870:	4770      	bx	lr
   80872:	bf00      	nop

00080874 <ui_process>:
	if (!(frame_number % 0x200))
   80874:	f3c0 0008 	ubfx	r0, r0, #0, #9
   80878:	b100      	cbz	r0, 8087c <ui_process+0x8>
}
   8087a:	4770      	bx	lr
		gpio_toggle_pin(PIN_USB_HBEAT);
   8087c:	2003      	movs	r0, #3
   8087e:	4b01      	ldr	r3, [pc, #4]	; (80884 <ui_process+0x10>)
   80880:	4718      	bx	r3
   80882:	bf00      	nop
   80884:	000835c9 	.word	0x000835c9

00080888 <bergen_register_handlers>:

void bergen_register_handlers(void)
{
   80888:	b510      	push	{r4, lr}
	naeusb_add_in_handler(bergen_setup_in_received);
   8088a:	4b04      	ldr	r3, [pc, #16]	; (8089c <bergen_register_handlers+0x14>)
   8088c:	4804      	ldr	r0, [pc, #16]	; (808a0 <bergen_register_handlers+0x18>)
   8088e:	4798      	blx	r3
	naeusb_add_out_handler(bergen_setup_out_received);
   80890:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	naeusb_add_out_handler(bergen_setup_out_received);
   80894:	4803      	ldr	r0, [pc, #12]	; (808a4 <bergen_register_handlers+0x1c>)
   80896:	4b04      	ldr	r3, [pc, #16]	; (808a8 <bergen_register_handlers+0x20>)
   80898:	4718      	bx	r3
   8089a:	bf00      	nop
   8089c:	000817e1 	.word	0x000817e1
   808a0:	00080721 	.word	0x00080721
   808a4:	00080681 	.word	0x00080681
   808a8:	00081809 	.word	0x00081809

000808ac <pgood_alert_handler>:
	// 	}
	// }
}

void pgood_alert_handler(const uint32_t id, const uint32_t index)
{
   808ac:	b510      	push	{r4, lr}
	if (pio_get(PIOC, PIO_INPUT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN) != (PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN) || 
   808ae:	f44f 12c8 	mov.w	r2, #1638400	; 0x190000
   808b2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   808b6:	480a      	ldr	r0, [pc, #40]	; (808e0 <pgood_alert_handler+0x34>)
   808b8:	4c0a      	ldr	r4, [pc, #40]	; (808e4 <pgood_alert_handler+0x38>)
   808ba:	47a0      	blx	r4
   808bc:	f5b0 1fc8 	cmp.w	r0, #1638400	; 0x190000
   808c0:	d005      	beq.n	808ce <pgood_alert_handler+0x22>
		!pio_get(PIOB, PIO_INPUT, PIN_PGOOD_3V3_PIN))
		if (power_toggles++ > 5) {
   808c2:	4a09      	ldr	r2, [pc, #36]	; (808e8 <pgood_alert_handler+0x3c>)
   808c4:	7813      	ldrb	r3, [r2, #0]
   808c6:	3301      	adds	r3, #1
   808c8:	b2db      	uxtb	r3, r3
   808ca:	7013      	strb	r3, [r2, #0]
			//kill_fpga_power(); //lots of glitching on PIO?
		}
   808cc:	bd10      	pop	{r4, pc}
		!pio_get(PIOB, PIO_INPUT, PIN_PGOOD_3V3_PIN))
   808ce:	f44f 6200 	mov.w	r2, #2048	; 0x800
   808d2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   808d6:	4805      	ldr	r0, [pc, #20]	; (808ec <pgood_alert_handler+0x40>)
   808d8:	47a0      	blx	r4
	if (pio_get(PIOC, PIO_INPUT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN) != (PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN) || 
   808da:	2800      	cmp	r0, #0
   808dc:	d0f1      	beq.n	808c2 <pgood_alert_handler+0x16>
   808de:	bd10      	pop	{r4, pc}
   808e0:	400e1200 	.word	0x400e1200
   808e4:	00083529 	.word	0x00083529
   808e8:	200714fd 	.word	0x200714fd
   808ec:	400e1000 	.word	0x400e1000

000808f0 <fpga_power_reset_handler>:
{
   808f0:	b538      	push	{r3, r4, r5, lr}
	if (!pio_get(PIOB, PIO_INPUT, PIN_FPGA_POWER_RESET_PIN)) {
   808f2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   808f6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   808fa:	480d      	ldr	r0, [pc, #52]	; (80930 <fpga_power_reset_handler+0x40>)
   808fc:	4b0d      	ldr	r3, [pc, #52]	; (80934 <fpga_power_reset_handler+0x44>)
   808fe:	4798      	blx	r3
   80900:	b958      	cbnz	r0, 8091a <fpga_power_reset_handler+0x2a>
   80902:	4604      	mov	r4, r0
		power_killed = false;
   80904:	4d0c      	ldr	r5, [pc, #48]	; (80938 <fpga_power_reset_handler+0x48>)
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   80906:	203b      	movs	r0, #59	; 0x3b
   80908:	4b0c      	ldr	r3, [pc, #48]	; (8093c <fpga_power_reset_handler+0x4c>)
		power_killed = false;
   8090a:	702c      	strb	r4, [r5, #0]
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   8090c:	4798      	blx	r3
	fpga_pins(false);
   8090e:	4b0c      	ldr	r3, [pc, #48]	; (80940 <fpga_power_reset_handler+0x50>)
   80910:	4620      	mov	r0, r4
   80912:	4798      	blx	r3
	power_killed = true;
   80914:	2301      	movs	r3, #1
   80916:	702b      	strb	r3, [r5, #0]
}
   80918:	bd38      	pop	{r3, r4, r5, pc}
	gpio_set_pin_high(PIN_FPGA_PWR_ENABLE);
   8091a:	203b      	movs	r0, #59	; 0x3b
   8091c:	4b09      	ldr	r3, [pc, #36]	; (80944 <fpga_power_reset_handler+0x54>)
   8091e:	4798      	blx	r3
	fpga_pins(true);
   80920:	4b07      	ldr	r3, [pc, #28]	; (80940 <fpga_power_reset_handler+0x50>)
   80922:	2001      	movs	r0, #1
   80924:	4798      	blx	r3
	power_killed = false;
   80926:	2200      	movs	r2, #0
   80928:	4b03      	ldr	r3, [pc, #12]	; (80938 <fpga_power_reset_handler+0x48>)
   8092a:	701a      	strb	r2, [r3, #0]
}
   8092c:	bd38      	pop	{r3, r4, r5, pc}
   8092e:	bf00      	nop
   80930:	400e1000 	.word	0x400e1000
   80934:	00083529 	.word	0x00083529
   80938:	200714fc 	.word	0x200714fc
   8093c:	000835ad 	.word	0x000835ad
   80940:	00080279 	.word	0x00080279
   80944:	00083591 	.word	0x00083591

00080948 <max1617_alert_handler>:
	if ((id == ID_PIOA) && (index == PIO_PA16) && (!pio_get(PIOA, PIO_INPUT, PIO_PA16))) {
   80948:	280b      	cmp	r0, #11
   8094a:	d000      	beq.n	8094e <max1617_alert_handler+0x6>
   8094c:	4770      	bx	lr
   8094e:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   80952:	d1fb      	bne.n	8094c <max1617_alert_handler+0x4>
   80954:	460a      	mov	r2, r1
{
   80956:	b570      	push	{r4, r5, r6, lr}
	if ((id == ID_PIOA) && (index == PIO_PA16) && (!pio_get(PIOA, PIO_INPUT, PIO_PA16))) {
   80958:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8095c:	4808      	ldr	r0, [pc, #32]	; (80980 <max1617_alert_handler+0x38>)
   8095e:	4b09      	ldr	r3, [pc, #36]	; (80984 <max1617_alert_handler+0x3c>)
   80960:	4798      	blx	r3
   80962:	4604      	mov	r4, r0
   80964:	b100      	cbz	r0, 80968 <max1617_alert_handler+0x20>
}
   80966:	bd70      	pop	{r4, r5, r6, pc}
			power_killed = true;
   80968:	2601      	movs	r6, #1
   8096a:	4d07      	ldr	r5, [pc, #28]	; (80988 <max1617_alert_handler+0x40>)
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   8096c:	203b      	movs	r0, #59	; 0x3b
   8096e:	4b07      	ldr	r3, [pc, #28]	; (8098c <max1617_alert_handler+0x44>)
			power_killed = true;
   80970:	702e      	strb	r6, [r5, #0]
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   80972:	4798      	blx	r3
	fpga_pins(false);
   80974:	4620      	mov	r0, r4
   80976:	4b06      	ldr	r3, [pc, #24]	; (80990 <max1617_alert_handler+0x48>)
   80978:	4798      	blx	r3
	power_killed = true;
   8097a:	702e      	strb	r6, [r5, #0]
}
   8097c:	bd70      	pop	{r4, r5, r6, pc}
   8097e:	bf00      	nop
   80980:	400e0e00 	.word	0x400e0e00
   80984:	00083529 	.word	0x00083529
   80988:	200714fc 	.word	0x200714fc
   8098c:	000835ad 	.word	0x000835ad
   80990:	00080279 	.word	0x00080279

00080994 <enable_switched_power>:
{
   80994:	b508      	push	{r3, lr}
	gpio_configure_pin(PIN_SAM_SWITCHED_PWR_ENABLE, PIN_SAM_SWITCHED_PWR_ENABLE_FLAGS);
   80996:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8099a:	4b02      	ldr	r3, [pc, #8]	; (809a4 <enable_switched_power+0x10>)
   8099c:	2004      	movs	r0, #4
   8099e:	4798      	blx	r3
}
   809a0:	2000      	movs	r0, #0
   809a2:	bd08      	pop	{r3, pc}
   809a4:	000835ed 	.word	0x000835ed

000809a8 <max1617_register_read>:
{
   809a8:	b530      	push	{r4, r5, lr}
	twi_package_t max_packet = {
   809aa:	f04f 0c00 	mov.w	ip, #0
   809ae:	2301      	movs	r3, #1
   809b0:	f04f 0e18 	mov.w	lr, #24
	if (I2C_LOCK) {
   809b4:	4c0d      	ldr	r4, [pc, #52]	; (809ec <max1617_register_read+0x44>)
{
   809b6:	b087      	sub	sp, #28
	if (I2C_LOCK) {
   809b8:	7822      	ldrb	r2, [r4, #0]
	twi_package_t max_packet = {
   809ba:	f88d c005 	strb.w	ip, [sp, #5]
   809be:	f88d c006 	strb.w	ip, [sp, #6]
   809c2:	9103      	str	r1, [sp, #12]
   809c4:	f88d e014 	strb.w	lr, [sp, #20]
   809c8:	f88d 0004 	strb.w	r0, [sp, #4]
   809cc:	9302      	str	r3, [sp, #8]
   809ce:	9304      	str	r3, [sp, #16]
	if (I2C_LOCK) {
   809d0:	b94a      	cbnz	r2, 809e6 <max1617_register_read+0x3e>
	I2C_LOCK = 1;
   809d2:	f002 05ff 	and.w	r5, r2, #255	; 0xff
	int rtn = twi_master_read(MAX1617_I2C, &max_packet);
   809d6:	4806      	ldr	r0, [pc, #24]	; (809f0 <max1617_register_read+0x48>)
   809d8:	4a06      	ldr	r2, [pc, #24]	; (809f4 <max1617_register_read+0x4c>)
   809da:	a901      	add	r1, sp, #4
	I2C_LOCK = 1;
   809dc:	7023      	strb	r3, [r4, #0]
	int rtn = twi_master_read(MAX1617_I2C, &max_packet);
   809de:	4790      	blx	r2
	I2C_LOCK = 0;
   809e0:	7025      	strb	r5, [r4, #0]
}
   809e2:	b007      	add	sp, #28
   809e4:	bd30      	pop	{r4, r5, pc}
		return -1;
   809e6:	f04f 30ff 	mov.w	r0, #4294967295
   809ea:	e7fa      	b.n	809e2 <max1617_register_read+0x3a>
   809ec:	20072132 	.word	0x20072132
   809f0:	4008c000 	.word	0x4008c000
   809f4:	00083939 	.word	0x00083939

000809f8 <max1617_register_write>:
{
   809f8:	b530      	push	{r4, r5, lr}
	twi_package_t max_packet = {
   809fa:	f04f 0c00 	mov.w	ip, #0
   809fe:	2301      	movs	r3, #1
   80a00:	f04f 0e18 	mov.w	lr, #24
{
   80a04:	b089      	sub	sp, #36	; 0x24
	if (I2C_LOCK) {
   80a06:	4c0f      	ldr	r4, [pc, #60]	; (80a44 <max1617_register_write+0x4c>)
	twi_package_t max_packet = {
   80a08:	f10d 0207 	add.w	r2, sp, #7
   80a0c:	9205      	str	r2, [sp, #20]
	if (I2C_LOCK) {
   80a0e:	7822      	ldrb	r2, [r4, #0]
	twi_package_t max_packet = {
   80a10:	f88d c00d 	strb.w	ip, [sp, #13]
   80a14:	f88d c00e 	strb.w	ip, [sp, #14]
   80a18:	f88d e01c 	strb.w	lr, [sp, #28]
{
   80a1c:	f88d 1007 	strb.w	r1, [sp, #7]
	twi_package_t max_packet = {
   80a20:	f88d 000c 	strb.w	r0, [sp, #12]
   80a24:	9304      	str	r3, [sp, #16]
   80a26:	9306      	str	r3, [sp, #24]
	if (I2C_LOCK) {
   80a28:	b94a      	cbnz	r2, 80a3e <max1617_register_write+0x46>
	I2C_LOCK = 1;
   80a2a:	f002 05ff 	and.w	r5, r2, #255	; 0xff
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80a2e:	4806      	ldr	r0, [pc, #24]	; (80a48 <max1617_register_write+0x50>)
   80a30:	4a06      	ldr	r2, [pc, #24]	; (80a4c <max1617_register_write+0x54>)
   80a32:	a903      	add	r1, sp, #12
	I2C_LOCK = 1;
   80a34:	7023      	strb	r3, [r4, #0]
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80a36:	4790      	blx	r2
	I2C_LOCK = 0;
   80a38:	7025      	strb	r5, [r4, #0]
}
   80a3a:	b009      	add	sp, #36	; 0x24
   80a3c:	bd30      	pop	{r4, r5, pc}
		return -1;
   80a3e:	f04f 30ff 	mov.w	r0, #4294967295
   80a42:	e7fa      	b.n	80a3a <max1617_register_write+0x42>
   80a44:	20072132 	.word	0x20072132
   80a48:	4008c000 	.word	0x4008c000
   80a4c:	00083a11 	.word	0x00083a11

00080a50 <power_init>:
{
   80a50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	pmc_enable_periph_clk(ID_PIOC);
   80a54:	200d      	movs	r0, #13
{
   80a56:	b083      	sub	sp, #12
	pio_configure_pin_group(PIN_PGOOD_VCCINT_PORT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80a58:	4d1f      	ldr	r5, [pc, #124]	; (80ad8 <power_init+0x88>)
	pmc_enable_periph_clk(ID_PIOC);
   80a5a:	4c20      	ldr	r4, [pc, #128]	; (80adc <power_init+0x8c>)
	pio_configure_pin_group(PIN_PGOOD_VCCINT_PORT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80a5c:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80ae0 <power_init+0x90>
	pmc_enable_periph_clk(ID_PIOC);
   80a60:	47a0      	blx	r4
	pio_handler_set(PIN_PGOOD_VCCINT_PORT, ID_PIOC, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIO_IT_FALL_EDGE, pgood_alert_handler);
   80a62:	4f20      	ldr	r7, [pc, #128]	; (80ae4 <power_init+0x94>)
	pmc_enable_periph_clk(ID_PIOB);
   80a64:	200c      	movs	r0, #12
   80a66:	47a0      	blx	r4
	pio_configure_pin_group(PIN_PGOOD_VCCINT_PORT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80a68:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80ae8 <power_init+0x98>
   80a6c:	464a      	mov	r2, r9
   80a6e:	f44f 11c8 	mov.w	r1, #1638400	; 0x190000
   80a72:	4628      	mov	r0, r5
   80a74:	47c0      	blx	r8
	pio_configure_pin_group(PIN_PGOOD_3V3_PORT, PIN_PGOOD_3V3_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80a76:	4c1d      	ldr	r4, [pc, #116]	; (80aec <power_init+0x9c>)
	pio_handler_set(PIN_PGOOD_VCCINT_PORT, ID_PIOC, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIO_IT_FALL_EDGE, pgood_alert_handler);
   80a78:	2350      	movs	r3, #80	; 0x50
   80a7a:	f44f 12c8 	mov.w	r2, #1638400	; 0x190000
   80a7e:	4e1c      	ldr	r6, [pc, #112]	; (80af0 <power_init+0xa0>)
   80a80:	210d      	movs	r1, #13
   80a82:	4628      	mov	r0, r5
   80a84:	9700      	str	r7, [sp, #0]
   80a86:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PGOOD_VCCINT_PORT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN);
   80a88:	4628      	mov	r0, r5
   80a8a:	f44f 11c8 	mov.w	r1, #1638400	; 0x190000
   80a8e:	4d19      	ldr	r5, [pc, #100]	; (80af4 <power_init+0xa4>)
   80a90:	47a8      	blx	r5
	pio_configure_pin_group(PIN_PGOOD_3V3_PORT, PIN_PGOOD_3V3_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80a92:	464a      	mov	r2, r9
   80a94:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80a98:	4620      	mov	r0, r4
   80a9a:	47c0      	blx	r8
	pio_handler_set(PIN_PGOOD_3V3_PORT, ID_PIOB, PIN_PGOOD_3V3_PIN, PIO_IT_FALL_EDGE, pgood_alert_handler);
   80a9c:	2350      	movs	r3, #80	; 0x50
   80a9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80aa2:	210c      	movs	r1, #12
   80aa4:	4620      	mov	r0, r4
   80aa6:	9700      	str	r7, [sp, #0]
   80aa8:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PGOOD_3V3_PORT, PIN_PGOOD_3V3_PIN);
   80aaa:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80aae:	4620      	mov	r0, r4
   80ab0:	47a8      	blx	r5
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80ab2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80ab6:	4b10      	ldr	r3, [pc, #64]	; (80af8 <power_init+0xa8>)
   80ab8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   80abc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   80ac0:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   80ac4:	2190      	movs	r1, #144	; 0x90
}
   80ac6:	2000      	movs	r0, #0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80ac8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   80acc:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80ad0:	601a      	str	r2, [r3, #0]
   80ad2:	b003      	add	sp, #12
   80ad4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80ad8:	400e1200 	.word	0x400e1200
   80adc:	000833e1 	.word	0x000833e1
   80ae0:	2800000a 	.word	0x2800000a
   80ae4:	000808ad 	.word	0x000808ad
   80ae8:	000836e5 	.word	0x000836e5
   80aec:	400e1000 	.word	0x400e1000
   80af0:	00083115 	.word	0x00083115
   80af4:	00083569 	.word	0x00083569
   80af8:	e000e100 	.word	0xe000e100

00080afc <thermals_init>:
{	
   80afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80b00:	2007      	movs	r0, #7
	twi_package_t max_packet = {
   80b02:	2601      	movs	r6, #1
   80b04:	210a      	movs	r1, #10
   80b06:	2200      	movs	r2, #0
   80b08:	f04f 0818 	mov.w	r8, #24
{	
   80b0c:	b089      	sub	sp, #36	; 0x24
	if (I2C_LOCK) {
   80b0e:	4f3d      	ldr	r7, [pc, #244]	; (80c04 <thermals_init+0x108>)
	twi_package_t max_packet = {
   80b10:	f10d 030b 	add.w	r3, sp, #11
   80b14:	9305      	str	r3, [sp, #20]
	if (I2C_LOCK) {
   80b16:	783b      	ldrb	r3, [r7, #0]
	twi_package_t max_packet = {
   80b18:	9604      	str	r6, [sp, #16]
   80b1a:	f88d 000b 	strb.w	r0, [sp, #11]
   80b1e:	f8ad 100c 	strh.w	r1, [sp, #12]
   80b22:	f88d 200e 	strb.w	r2, [sp, #14]
   80b26:	9606      	str	r6, [sp, #24]
   80b28:	f88d 801c 	strb.w	r8, [sp, #28]
	if (I2C_LOCK) {
   80b2c:	2b00      	cmp	r3, #0
   80b2e:	d166      	bne.n	80bfe <thermals_init+0x102>
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80b30:	4835      	ldr	r0, [pc, #212]	; (80c08 <thermals_init+0x10c>)
   80b32:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80c0c <thermals_init+0x110>
   80b36:	a903      	add	r1, sp, #12
   80b38:	f003 05ff 	and.w	r5, r3, #255	; 0xff
	I2C_LOCK = 1;
   80b3c:	703e      	strb	r6, [r7, #0]
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80b3e:	47c8      	blx	r9
	I2C_LOCK = 0;
   80b40:	703d      	strb	r5, [r7, #0]
	if (rtn != TWI_SUCCESS)
   80b42:	4604      	mov	r4, r0
   80b44:	b118      	cbz	r0, 80b4e <thermals_init+0x52>
}
   80b46:	4620      	mov	r0, r4
   80b48:	b009      	add	sp, #36	; 0x24
   80b4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	twi_package_t max_packet = {
   80b4e:	f10d 030b 	add.w	r3, sp, #11
   80b52:	e9cd 6304 	strd	r6, r3, [sp, #16]
   80b56:	f88d 801c 	strb.w	r8, [sp, #28]
   80b5a:	230d      	movs	r3, #13
   80b5c:	f04f 0850 	mov.w	r8, #80	; 0x50
	if (I2C_LOCK) {
   80b60:	783a      	ldrb	r2, [r7, #0]
	twi_package_t max_packet = {
   80b62:	f88d 000e 	strb.w	r0, [sp, #14]
   80b66:	9606      	str	r6, [sp, #24]
   80b68:	f8ad 300c 	strh.w	r3, [sp, #12]
   80b6c:	f88d 800b 	strb.w	r8, [sp, #11]
	if (I2C_LOCK) {
   80b70:	f002 05ff 	and.w	r5, r2, #255	; 0xff
   80b74:	2a00      	cmp	r2, #0
   80b76:	d142      	bne.n	80bfe <thermals_init+0x102>
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80b78:	4823      	ldr	r0, [pc, #140]	; (80c08 <thermals_init+0x10c>)
   80b7a:	a903      	add	r1, sp, #12
	I2C_LOCK = 1;
   80b7c:	703e      	strb	r6, [r7, #0]
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80b7e:	47c8      	blx	r9
	I2C_LOCK = 0;
   80b80:	703d      	strb	r5, [r7, #0]
	if (rtn != TWI_SUCCESS)
   80b82:	4604      	mov	r4, r0
   80b84:	2800      	cmp	r0, #0
   80b86:	d1de      	bne.n	80b46 <thermals_init+0x4a>
	gpio_configure_pin(PIN_TEMP_ALERT, PIN_TEMP_ALERT_FLAGS);
   80b88:	4d21      	ldr	r5, [pc, #132]	; (80c10 <thermals_init+0x114>)
   80b8a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80b8e:	2017      	movs	r0, #23
   80b90:	47a8      	blx	r5
	pio_handler_set(PIN_TEMP_ALERT_PORT, ID_PIOA, PIN_TEMP_ALERT_PIN, PIO_IT_FALL_EDGE, max1617_alert_handler);
   80b92:	4a20      	ldr	r2, [pc, #128]	; (80c14 <thermals_init+0x118>)
   80b94:	4643      	mov	r3, r8
   80b96:	9200      	str	r2, [sp, #0]
   80b98:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80c18 <thermals_init+0x11c>
   80b9c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80ba0:	210b      	movs	r1, #11
   80ba2:	481e      	ldr	r0, [pc, #120]	; (80c1c <thermals_init+0x120>)
   80ba4:	47c0      	blx	r8
	pio_enable_interrupt(PIOA, PIN_TEMP_ALERT_PIN);
   80ba6:	4f1e      	ldr	r7, [pc, #120]	; (80c20 <thermals_init+0x124>)
   80ba8:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   80bac:	481b      	ldr	r0, [pc, #108]	; (80c1c <thermals_init+0x120>)
   80bae:	47b8      	blx	r7
	gpio_configure_pin(PIN_FPGA_POWER_RESET, PIN_FPGA_POWER_RESET_FLAGS);
   80bb0:	491c      	ldr	r1, [pc, #112]	; (80c24 <thermals_init+0x128>)
   80bb2:	2037      	movs	r0, #55	; 0x37
   80bb4:	47a8      	blx	r5
	pio_handler_set(PIN_FPGA_POWER_RESET_PORT, ID_PIOB, PIN_FPGA_POWER_RESET_PIN, 0, fpga_power_reset_handler);
   80bb6:	4b1c      	ldr	r3, [pc, #112]	; (80c28 <thermals_init+0x12c>)
   80bb8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80bbc:	9300      	str	r3, [sp, #0]
   80bbe:	210c      	movs	r1, #12
   80bc0:	4623      	mov	r3, r4
   80bc2:	481a      	ldr	r0, [pc, #104]	; (80c2c <thermals_init+0x130>)
   80bc4:	47c0      	blx	r8
	pio_enable_interrupt(PIOB, PIN_FPGA_POWER_RESET_PIN);
   80bc6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   80bca:	4818      	ldr	r0, [pc, #96]	; (80c2c <thermals_init+0x130>)
   80bcc:	47b8      	blx	r7
   80bce:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80bd2:	f44f 6100 	mov.w	r1, #2048	; 0x800
	gpio_configure_pin(PIN_TEMP_ERR_LED, PIN_TEMP_ERR_LED_FLAGS);
   80bd6:	4620      	mov	r0, r4
	return 0x01;
   80bd8:	4634      	mov	r4, r6
   80bda:	4b15      	ldr	r3, [pc, #84]	; (80c30 <thermals_init+0x134>)
   80bdc:	6019      	str	r1, [r3, #0]
   80bde:	601a      	str	r2, [r3, #0]
	gpio_configure_pin(PIN_TEMP_ERR_LED, PIN_TEMP_ERR_LED_FLAGS);
   80be0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80be4:	47a8      	blx	r5
	gpio_configure_pin(PIN_TEMP_OK_LED, PIN_TEMP_OK_LED_FLAGS);
   80be6:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80bea:	4630      	mov	r0, r6
   80bec:	47a8      	blx	r5
	gpio_configure_pin(PIN_FPGA_PWR_ENABLE, PIN_FPGA_PWR_ENABLE_FLAGS);
   80bee:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80bf2:	203b      	movs	r0, #59	; 0x3b
   80bf4:	47a8      	blx	r5
}
   80bf6:	4620      	mov	r0, r4
   80bf8:	b009      	add	sp, #36	; 0x24
   80bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -1;
   80bfe:	f04f 34ff 	mov.w	r4, #4294967295
   80c02:	e7a0      	b.n	80b46 <thermals_init+0x4a>
   80c04:	20072132 	.word	0x20072132
   80c08:	4008c000 	.word	0x4008c000
   80c0c:	00083a11 	.word	0x00083a11
   80c10:	000835ed 	.word	0x000835ed
   80c14:	00080949 	.word	0x00080949
   80c18:	00083115 	.word	0x00083115
   80c1c:	400e0e00 	.word	0x400e0e00
   80c20:	00083569 	.word	0x00083569
   80c24:	2800000b 	.word	0x2800000b
   80c28:	000808f1 	.word	0x000808f1
   80c2c:	400e1000 	.word	0x400e1000
   80c30:	e000e100 	.word	0xe000e100

00080c34 <thermals_slow_tick>:
{
   80c34:	b5f0      	push	{r4, r5, r6, r7, lr}
	twi_package_t max_packet = {
   80c36:	2218      	movs	r2, #24
   80c38:	2501      	movs	r5, #1
	int8_t temp = 0;
   80c3a:	2400      	movs	r4, #0
{
   80c3c:	b087      	sub	sp, #28
	if (I2C_LOCK) {
   80c3e:	4e49      	ldr	r6, [pc, #292]	; (80d64 <thermals_slow_tick+0x130>)
	twi_package_t max_packet = {
   80c40:	f10d 0303 	add.w	r3, sp, #3
   80c44:	9303      	str	r3, [sp, #12]
	if (I2C_LOCK) {
   80c46:	7833      	ldrb	r3, [r6, #0]
	twi_package_t max_packet = {
   80c48:	f8ad 5004 	strh.w	r5, [sp, #4]
	int8_t temp = 0;
   80c4c:	f88d 4003 	strb.w	r4, [sp, #3]
	twi_package_t max_packet = {
   80c50:	f88d 4006 	strb.w	r4, [sp, #6]
   80c54:	9502      	str	r5, [sp, #8]
   80c56:	9504      	str	r5, [sp, #16]
   80c58:	f88d 2014 	strb.w	r2, [sp, #20]
	if (I2C_LOCK) {
   80c5c:	2b00      	cmp	r3, #0
   80c5e:	d140      	bne.n	80ce2 <thermals_slow_tick+0xae>
	I2C_LOCK = 1;
   80c60:	f003 07ff 	and.w	r7, r3, #255	; 0xff
	int rtn = twi_master_read(MAX1617_I2C, &max_packet);
   80c64:	4840      	ldr	r0, [pc, #256]	; (80d68 <thermals_slow_tick+0x134>)
   80c66:	4b41      	ldr	r3, [pc, #260]	; (80d6c <thermals_slow_tick+0x138>)
   80c68:	a901      	add	r1, sp, #4
	I2C_LOCK = 1;
   80c6a:	7035      	strb	r5, [r6, #0]
	int rtn = twi_master_read(MAX1617_I2C, &max_packet);
   80c6c:	4798      	blx	r3
	return temp;
   80c6e:	f99d 4003 	ldrsb.w	r4, [sp, #3]
	I2C_LOCK = 0;
   80c72:	7037      	strb	r7, [r6, #0]
	if (fpga_temp == 0){
   80c74:	2c00      	cmp	r4, #0
   80c76:	d034      	beq.n	80ce2 <thermals_slow_tick+0xae>
	if (fpga_temp >= MAX1617_KILL_TEMP) {
   80c78:	2c40      	cmp	r4, #64	; 0x40
   80c7a:	dc64      	bgt.n	80d46 <thermals_slow_tick+0x112>
	} else if (fpga_temp >= MAX1617_MAX_TEMP) {
   80c7c:	2c36      	cmp	r4, #54	; 0x36
   80c7e:	dd41      	ble.n	80d04 <thermals_slow_tick+0xd0>
		if (!power_killed) {
   80c80:	4a3b      	ldr	r2, [pc, #236]	; (80d70 <thermals_slow_tick+0x13c>)
		gpio_set_pin_low(PIN_TEMP_OK_LED);
   80c82:	4628      	mov	r0, r5
   80c84:	4b3b      	ldr	r3, [pc, #236]	; (80d74 <thermals_slow_tick+0x140>)
		if (!power_killed) {
   80c86:	7812      	ldrb	r2, [r2, #0]
		gpio_set_pin_low(PIN_TEMP_OK_LED);
   80c88:	4798      	blx	r3
		gpio_set_pin_high(PIN_TEMP_ERR_LED);
   80c8a:	4638      	mov	r0, r7
   80c8c:	4b3a      	ldr	r3, [pc, #232]	; (80d78 <thermals_slow_tick+0x144>)
   80c8e:	4798      	blx	r3
	fpga_temp = min(MAX1617_FULL_FAN_TEMP, fpga_temp);
   80c90:	2c32      	cmp	r4, #50	; 0x32
   80c92:	bfa8      	it	ge
   80c94:	2432      	movge	r4, #50	; 0x32
	fpga_temp = max(MAX1617_OFF_FAN_TEMP, fpga_temp);
   80c96:	2c23      	cmp	r4, #35	; 0x23
   80c98:	bfb8      	it	lt
   80c9a:	2423      	movlt	r4, #35	; 0x23
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80c9c:	2064      	movs	r0, #100	; 0x64
	unsigned int fan_pwm = fpga_temp - MAX1617_OFF_FAN_TEMP;
   80c9e:	3c23      	subs	r4, #35	; 0x23
   80ca0:	b264      	sxtb	r4, r4
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80ca2:	fb00 f404 	mul.w	r4, r0, r4
   80ca6:	4935      	ldr	r1, [pc, #212]	; (80d7c <thermals_slow_tick+0x148>)
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   80ca8:	f44f 7224 	mov.w	r2, #656	; 0x290
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80cac:	fba1 1404 	umull	r1, r4, r1, r4
   80cb0:	08e4      	lsrs	r4, r4, #3
	fan_pwm = min(99, fan_pwm);
   80cb2:	2c63      	cmp	r4, #99	; 0x63
   80cb4:	bf28      	it	cs
   80cb6:	2463      	movcs	r4, #99	; 0x63
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   80cb8:	1b04      	subs	r4, r0, r4
   80cba:	fb02 f404 	mul.w	r4, r2, r4
   80cbe:	4b30      	ldr	r3, [pc, #192]	; (80d80 <thermals_slow_tick+0x14c>)
   80cc0:	fba3 3404 	umull	r3, r4, r3, r4
   80cc4:	0964      	lsrs	r4, r4, #5
	tc_write_rc(TC0, FAN_PWM_TIMER_CHANNEL, rc);
   80cc6:	2100      	movs	r1, #0
   80cc8:	f44f 7224 	mov.w	r2, #656	; 0x290
   80ccc:	482d      	ldr	r0, [pc, #180]	; (80d84 <thermals_slow_tick+0x150>)
   80cce:	4b2e      	ldr	r3, [pc, #184]	; (80d88 <thermals_slow_tick+0x154>)
   80cd0:	4798      	blx	r3
	tc_write_ra(TC0, FAN_PWM_TIMER_CHANNEL, ra);
   80cd2:	4622      	mov	r2, r4
   80cd4:	2100      	movs	r1, #0
   80cd6:	482b      	ldr	r0, [pc, #172]	; (80d84 <thermals_slow_tick+0x150>)
   80cd8:	4b2c      	ldr	r3, [pc, #176]	; (80d8c <thermals_slow_tick+0x158>)
   80cda:	4798      	blx	r3
}
   80cdc:	2000      	movs	r0, #0
   80cde:	b007      	add	sp, #28
   80ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gpio_set_pin_high(PIN_TEMP_OK_LED);
   80ce2:	4628      	mov	r0, r5
   80ce4:	4b24      	ldr	r3, [pc, #144]	; (80d78 <thermals_slow_tick+0x144>)
   80ce6:	4798      	blx	r3
		gpio_set_pin_low(PIN_TEMP_ERR_LED);
   80ce8:	4620      	mov	r0, r4
   80cea:	4b22      	ldr	r3, [pc, #136]	; (80d74 <thermals_slow_tick+0x140>)
   80cec:	4798      	blx	r3
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   80cee:	f44f 7224 	mov.w	r2, #656	; 0x290
   80cf2:	f1c4 0464 	rsb	r4, r4, #100	; 0x64
   80cf6:	fb02 f404 	mul.w	r4, r2, r4
   80cfa:	4b21      	ldr	r3, [pc, #132]	; (80d80 <thermals_slow_tick+0x14c>)
   80cfc:	fba3 3404 	umull	r3, r4, r3, r4
   80d00:	0964      	lsrs	r4, r4, #5
   80d02:	e7e0      	b.n	80cc6 <thermals_slow_tick+0x92>
	fpga_temp = max(MAX1617_OFF_FAN_TEMP, fpga_temp);
   80d04:	2c32      	cmp	r4, #50	; 0x32
   80d06:	bfa8      	it	ge
   80d08:	2432      	movge	r4, #50	; 0x32
   80d0a:	2c23      	cmp	r4, #35	; 0x23
   80d0c:	bfb8      	it	lt
   80d0e:	2423      	movlt	r4, #35	; 0x23
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80d10:	2164      	movs	r1, #100	; 0x64
		gpio_set_pin_high(PIN_TEMP_OK_LED);
   80d12:	4628      	mov	r0, r5
	unsigned int fan_pwm = fpga_temp - MAX1617_OFF_FAN_TEMP;
   80d14:	f1a4 0523 	sub.w	r5, r4, #35	; 0x23
   80d18:	b26d      	sxtb	r5, r5
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80d1a:	fb01 f505 	mul.w	r5, r1, r5
   80d1e:	4b17      	ldr	r3, [pc, #92]	; (80d7c <thermals_slow_tick+0x148>)
		gpio_set_pin_high(PIN_TEMP_OK_LED);
   80d20:	4a15      	ldr	r2, [pc, #84]	; (80d78 <thermals_slow_tick+0x144>)
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80d22:	fba3 3405 	umull	r3, r4, r3, r5
		gpio_set_pin_high(PIN_TEMP_OK_LED);
   80d26:	4790      	blx	r2
		gpio_set_pin_low(PIN_TEMP_ERR_LED);
   80d28:	4b12      	ldr	r3, [pc, #72]	; (80d74 <thermals_slow_tick+0x140>)
   80d2a:	4638      	mov	r0, r7
   80d2c:	4798      	blx	r3
	if (fan_pwm > 0){
   80d2e:	f240 5381 	movw	r3, #1409	; 0x581
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80d32:	08e4      	lsrs	r4, r4, #3
	fan_pwm = min(99, fan_pwm);
   80d34:	2c63      	cmp	r4, #99	; 0x63
	if (fan_pwm > 0){
   80d36:	f1a5 050f 	sub.w	r5, r5, #15
	fan_pwm = min(99, fan_pwm);
   80d3a:	bf28      	it	cs
   80d3c:	2463      	movcs	r4, #99	; 0x63
	if (fan_pwm > 0){
   80d3e:	429d      	cmp	r5, r3
   80d40:	d8d5      	bhi.n	80cee <thermals_slow_tick+0xba>
   80d42:	2420      	movs	r4, #32
   80d44:	e7bf      	b.n	80cc6 <thermals_slow_tick+0x92>
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   80d46:	4e0b      	ldr	r6, [pc, #44]	; (80d74 <thermals_slow_tick+0x140>)
   80d48:	203b      	movs	r0, #59	; 0x3b
   80d4a:	47b0      	blx	r6
	fpga_pins(false);
   80d4c:	4638      	mov	r0, r7
   80d4e:	4b10      	ldr	r3, [pc, #64]	; (80d90 <thermals_slow_tick+0x15c>)
   80d50:	4798      	blx	r3
	power_killed = true;
   80d52:	4b07      	ldr	r3, [pc, #28]	; (80d70 <thermals_slow_tick+0x13c>)
		gpio_set_pin_low(PIN_TEMP_OK_LED);
   80d54:	4628      	mov	r0, r5
	power_killed = true;
   80d56:	701d      	strb	r5, [r3, #0]
		power_killed = true;
   80d58:	701d      	strb	r5, [r3, #0]
		gpio_set_pin_low(PIN_TEMP_OK_LED);
   80d5a:	47b0      	blx	r6
		gpio_set_pin_high(PIN_TEMP_ERR_LED);
   80d5c:	4638      	mov	r0, r7
   80d5e:	4b06      	ldr	r3, [pc, #24]	; (80d78 <thermals_slow_tick+0x144>)
   80d60:	4798      	blx	r3
   80d62:	e795      	b.n	80c90 <thermals_slow_tick+0x5c>
   80d64:	20072132 	.word	0x20072132
   80d68:	4008c000 	.word	0x4008c000
   80d6c:	00083939 	.word	0x00083939
   80d70:	200714fc 	.word	0x200714fc
   80d74:	000835ad 	.word	0x000835ad
   80d78:	00083591 	.word	0x00083591
   80d7c:	88888889 	.word	0x88888889
   80d80:	51eb851f 	.word	0x51eb851f
   80d84:	40080000 	.word	0x40080000
   80d88:	00085be9 	.word	0x00085be9
   80d8c:	00085be1 	.word	0x00085be1
   80d90:	00080279 	.word	0x00080279

00080d94 <thermals_fast_tick>:
{
   80d94:	b508      	push	{r3, lr}
	if (power_killed) {
   80d96:	4b05      	ldr	r3, [pc, #20]	; (80dac <thermals_fast_tick+0x18>)
   80d98:	781b      	ldrb	r3, [r3, #0]
   80d9a:	b90b      	cbnz	r3, 80da0 <thermals_fast_tick+0xc>
}
   80d9c:	2000      	movs	r0, #0
   80d9e:	bd08      	pop	{r3, pc}
		gpio_toggle_pin(PIN_TEMP_ERR_LED);
   80da0:	2000      	movs	r0, #0
   80da2:	4b03      	ldr	r3, [pc, #12]	; (80db0 <thermals_fast_tick+0x1c>)
   80da4:	4798      	blx	r3
}
   80da6:	2000      	movs	r0, #0
   80da8:	bd08      	pop	{r3, pc}
   80daa:	bf00      	nop
   80dac:	200714fc 	.word	0x200714fc
   80db0:	000835c9 	.word	0x000835c9

00080db4 <enable_fpga_power>:
{
   80db4:	b508      	push	{r3, lr}
	gpio_set_pin_high(PIN_FPGA_PWR_ENABLE);
   80db6:	203b      	movs	r0, #59	; 0x3b
   80db8:	4b04      	ldr	r3, [pc, #16]	; (80dcc <enable_fpga_power+0x18>)
   80dba:	4798      	blx	r3
	fpga_pins(true);
   80dbc:	4b04      	ldr	r3, [pc, #16]	; (80dd0 <enable_fpga_power+0x1c>)
   80dbe:	2001      	movs	r0, #1
   80dc0:	4798      	blx	r3
	power_killed = false;
   80dc2:	2200      	movs	r2, #0
   80dc4:	4b03      	ldr	r3, [pc, #12]	; (80dd4 <enable_fpga_power+0x20>)
   80dc6:	701a      	strb	r2, [r3, #0]
}
   80dc8:	bd08      	pop	{r3, pc}
   80dca:	bf00      	nop
   80dcc:	00083591 	.word	0x00083591
   80dd0:	00080279 	.word	0x00080279
   80dd4:	200714fc 	.word	0x200714fc

00080dd8 <kill_fpga_power>:
{
   80dd8:	b508      	push	{r3, lr}
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   80dda:	203b      	movs	r0, #59	; 0x3b
   80ddc:	4b04      	ldr	r3, [pc, #16]	; (80df0 <kill_fpga_power+0x18>)
   80dde:	4798      	blx	r3
	fpga_pins(false);
   80de0:	4b04      	ldr	r3, [pc, #16]	; (80df4 <kill_fpga_power+0x1c>)
   80de2:	2000      	movs	r0, #0
   80de4:	4798      	blx	r3
	power_killed = true;
   80de6:	2201      	movs	r2, #1
   80de8:	4b03      	ldr	r3, [pc, #12]	; (80df8 <kill_fpga_power+0x20>)
   80dea:	701a      	strb	r2, [r3, #0]
}
   80dec:	bd08      	pop	{r3, pc}
   80dee:	bf00      	nop
   80df0:	000835ad 	.word	0x000835ad
   80df4:	00080279 	.word	0x00080279
   80df8:	200714fc 	.word	0x200714fc

00080dfc <fan_pwm_init>:
{
   80dfc:	b510      	push	{r4, lr}
	tc_init(TC0, FAN_PWM_TIMER_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_WAVE | TC_CMR_ACPA_SET | TC_CMR_ACPC_CLEAR | TC_CMR_CPCTRG);
   80dfe:	4c0e      	ldr	r4, [pc, #56]	; (80e38 <fan_pwm_init+0x3c>)
	pmc_enable_periph_clk(ID_TC0);
   80e00:	4b0e      	ldr	r3, [pc, #56]	; (80e3c <fan_pwm_init+0x40>)
   80e02:	201b      	movs	r0, #27
   80e04:	4798      	blx	r3
	tc_init(TC0, FAN_PWM_TIMER_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_WAVE | TC_CMR_ACPA_SET | TC_CMR_ACPC_CLEAR | TC_CMR_CPCTRG);
   80e06:	4620      	mov	r0, r4
   80e08:	f44f 221c 	mov.w	r2, #638976	; 0x9c000
   80e0c:	2100      	movs	r1, #0
   80e0e:	4b0c      	ldr	r3, [pc, #48]	; (80e40 <fan_pwm_init+0x44>)
   80e10:	4798      	blx	r3
	tc_write_rc(TC0, FAN_PWM_TIMER_CHANNEL, rc);
   80e12:	4620      	mov	r0, r4
   80e14:	f44f 7224 	mov.w	r2, #656	; 0x290
   80e18:	2100      	movs	r1, #0
   80e1a:	4b0a      	ldr	r3, [pc, #40]	; (80e44 <fan_pwm_init+0x48>)
   80e1c:	4798      	blx	r3
	tc_write_ra(TC0, FAN_PWM_TIMER_CHANNEL, ra);
   80e1e:	f44f 72a4 	mov.w	r2, #328	; 0x148
   80e22:	4620      	mov	r0, r4
   80e24:	2100      	movs	r1, #0
   80e26:	4b08      	ldr	r3, [pc, #32]	; (80e48 <fan_pwm_init+0x4c>)
   80e28:	4798      	blx	r3
	tc_start(TC0, FAN_PWM_TIMER_CHANNEL);
   80e2a:	4620      	mov	r0, r4
   80e2c:	2100      	movs	r1, #0
   80e2e:	4b07      	ldr	r3, [pc, #28]	; (80e4c <fan_pwm_init+0x50>)
   80e30:	4798      	blx	r3
}
   80e32:	2000      	movs	r0, #0
   80e34:	bd10      	pop	{r4, pc}
   80e36:	bf00      	nop
   80e38:	40080000 	.word	0x40080000
   80e3c:	000833e1 	.word	0x000833e1
   80e40:	00085bb9 	.word	0x00085bb9
   80e44:	00085be9 	.word	0x00085be9
   80e48:	00085be1 	.word	0x00085be1
   80e4c:	00085bd9 	.word	0x00085bd9

00080e50 <fan_pwm_set_duty_cycle>:
{
   80e50:	b570      	push	{r4, r5, r6, lr}
	tc_write_rc(TC0, FAN_PWM_TIMER_CHANNEL, rc);
   80e52:	4d0c      	ldr	r5, [pc, #48]	; (80e84 <fan_pwm_set_duty_cycle+0x34>)
{
   80e54:	4604      	mov	r4, r0
	tc_write_rc(TC0, FAN_PWM_TIMER_CHANNEL, rc);
   80e56:	f44f 7224 	mov.w	r2, #656	; 0x290
   80e5a:	4628      	mov	r0, r5
   80e5c:	2100      	movs	r1, #0
   80e5e:	4b0a      	ldr	r3, [pc, #40]	; (80e88 <fan_pwm_set_duty_cycle+0x38>)
   80e60:	4798      	blx	r3
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   80e62:	f44f 7c24 	mov.w	ip, #656	; 0x290
   80e66:	f1c4 0264 	rsb	r2, r4, #100	; 0x64
   80e6a:	fb0c f202 	mul.w	r2, ip, r2
   80e6e:	4e07      	ldr	r6, [pc, #28]	; (80e8c <fan_pwm_set_duty_cycle+0x3c>)
	tc_write_ra(TC0, FAN_PWM_TIMER_CHANNEL, ra);
   80e70:	4628      	mov	r0, r5
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   80e72:	fba6 4202 	umull	r4, r2, r6, r2
	tc_write_ra(TC0, FAN_PWM_TIMER_CHANNEL, ra);
   80e76:	2100      	movs	r1, #0
   80e78:	4b05      	ldr	r3, [pc, #20]	; (80e90 <fan_pwm_set_duty_cycle+0x40>)
   80e7a:	0952      	lsrs	r2, r2, #5
   80e7c:	4798      	blx	r3
}
   80e7e:	2000      	movs	r0, #0
   80e80:	bd70      	pop	{r4, r5, r6, pc}
   80e82:	bf00      	nop
   80e84:	40080000 	.word	0x40080000
   80e88:	00085be9 	.word	0x00085be9
   80e8c:	51eb851f 	.word	0x51eb851f
   80e90:	00085be1 	.word	0x00085be1

00080e94 <pgood_tick>:
	power_toggles = 0;
   80e94:	2000      	movs	r0, #0
   80e96:	4b01      	ldr	r3, [pc, #4]	; (80e9c <pgood_tick+0x8>)
   80e98:	7018      	strb	r0, [r3, #0]
}
   80e9a:	4770      	bx	lr
   80e9c:	200714fd 	.word	0x200714fd

00080ea0 <check_power_state>:
{
   80ea0:	b538      	push	{r3, r4, r5, lr}
	if (board_get_powerstate() != last_power_state){
   80ea2:	203a      	movs	r0, #58	; 0x3a
   80ea4:	4c0c      	ldr	r4, [pc, #48]	; (80ed8 <check_power_state+0x38>)
   80ea6:	47a0      	blx	r4
   80ea8:	3800      	subs	r0, #0
   80eaa:	bf18      	it	ne
   80eac:	2001      	movne	r0, #1
   80eae:	4d0b      	ldr	r5, [pc, #44]	; (80edc <check_power_state+0x3c>)
   80eb0:	782b      	ldrb	r3, [r5, #0]
   80eb2:	4298      	cmp	r0, r3
   80eb4:	d100      	bne.n	80eb8 <check_power_state+0x18>
}
   80eb6:	bd38      	pop	{r3, r4, r5, pc}
		if (board_get_powerstate()){
   80eb8:	203a      	movs	r0, #58	; 0x3a
   80eba:	47a0      	blx	r4
   80ebc:	b148      	cbz	r0, 80ed2 <check_power_state+0x32>
			fpga_pins(true);
   80ebe:	2001      	movs	r0, #1
   80ec0:	4b07      	ldr	r3, [pc, #28]	; (80ee0 <check_power_state+0x40>)
   80ec2:	4798      	blx	r3
		last_power_state = board_get_powerstate();
   80ec4:	203a      	movs	r0, #58	; 0x3a
   80ec6:	47a0      	blx	r4
   80ec8:	3800      	subs	r0, #0
   80eca:	bf18      	it	ne
   80ecc:	2001      	movne	r0, #1
   80ece:	7028      	strb	r0, [r5, #0]
}
   80ed0:	bd38      	pop	{r3, r4, r5, pc}
			fpga_pins(false);
   80ed2:	4b03      	ldr	r3, [pc, #12]	; (80ee0 <check_power_state+0x40>)
   80ed4:	4798      	blx	r3
   80ed6:	e7f5      	b.n	80ec4 <check_power_state+0x24>
   80ed8:	00083575 	.word	0x00083575
   80edc:	20070208 	.word	0x20070208
   80ee0:	00080279 	.word	0x00080279

00080ee4 <periodic_timer_init>:
#include "timers.h"

#define PERIODIC_TIMER_CHANNEL 1

int periodic_timer_init(void)
{
   80ee4:	b538      	push	{r3, r4, r5, lr}
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80ee6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
	pmc_enable_periph_clk(ID_TC1); //ahhhhh
	
	tc_init(TC0, PERIODIC_TIMER_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_CPCTRG | TC_CMR_WAVE);
   80eea:	4c16      	ldr	r4, [pc, #88]	; (80f44 <periodic_timer_init+0x60>)
	pmc_enable_periph_clk(ID_TC1); //ahhhhh
   80eec:	4b16      	ldr	r3, [pc, #88]	; (80f48 <periodic_timer_init+0x64>)
   80eee:	201c      	movs	r0, #28
   80ef0:	4798      	blx	r3
	tc_init(TC0, PERIODIC_TIMER_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_CPCTRG | TC_CMR_WAVE);
   80ef2:	4620      	mov	r0, r4
   80ef4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   80ef8:	2101      	movs	r1, #1
   80efa:	4b14      	ldr	r3, [pc, #80]	; (80f4c <periodic_timer_init+0x68>)
   80efc:	4798      	blx	r3
	tc_write_rc(TC0, PERIODIC_TIMER_CHANNEL, sysclk_get_peripheral_bus_hz(TC0) / 2 / 4); //4 Hz
   80efe:	4a14      	ldr	r2, [pc, #80]	; (80f50 <periodic_timer_init+0x6c>)
   80f00:	4620      	mov	r0, r4
   80f02:	2101      	movs	r1, #1
   80f04:	4b13      	ldr	r3, [pc, #76]	; (80f54 <periodic_timer_init+0x70>)
   80f06:	4798      	blx	r3
	
	tc_start(TC0, PERIODIC_TIMER_CHANNEL);
   80f08:	4620      	mov	r0, r4
   80f0a:	2101      	movs	r1, #1
   80f0c:	4b12      	ldr	r3, [pc, #72]	; (80f58 <periodic_timer_init+0x74>)
   80f0e:	4798      	blx	r3
	tc_get_status(TC0, PERIODIC_TIMER_CHANNEL);
   80f10:	2101      	movs	r1, #1
   80f12:	4620      	mov	r0, r4
   80f14:	4b11      	ldr	r3, [pc, #68]	; (80f5c <periodic_timer_init+0x78>)
   80f16:	4798      	blx	r3
   80f18:	4b11      	ldr	r3, [pc, #68]	; (80f60 <periodic_timer_init+0x7c>)
   80f1a:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   80f1e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   80f22:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   80f26:	f04f 0c80 	mov.w	ip, #128	; 0x80
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80f2a:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
	
	NVIC_DisableIRQ(TC1_IRQn);
	NVIC_ClearPendingIRQ(TC1_IRQn);
	NVIC_SetPriority(TC1_IRQn, 8);
	NVIC_EnableIRQ(TC1_IRQn);
	tc_enable_interrupt(TC0, PERIODIC_TIMER_CHANNEL, TC_IER_CPCS);
   80f2e:	4620      	mov	r0, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   80f30:	f883 c31c 	strb.w	ip, [r3, #796]	; 0x31c
   80f34:	2210      	movs	r2, #16
   80f36:	2101      	movs	r1, #1
   80f38:	4c0a      	ldr	r4, [pc, #40]	; (80f64 <periodic_timer_init+0x80>)
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80f3a:	601d      	str	r5, [r3, #0]
   80f3c:	47a0      	blx	r4
	return 0x00;
}
   80f3e:	2000      	movs	r0, #0
   80f40:	bd38      	pop	{r3, r4, r5, pc}
   80f42:	bf00      	nop
   80f44:	40080000 	.word	0x40080000
   80f48:	000833e1 	.word	0x000833e1
   80f4c:	00085bb9 	.word	0x00085bb9
   80f50:	00a037a0 	.word	0x00a037a0
   80f54:	00085be9 	.word	0x00085be9
   80f58:	00085bd9 	.word	0x00085bd9
   80f5c:	00085bf9 	.word	0x00085bf9
   80f60:	e000e100 	.word	0xe000e100
   80f64:	00085bf1 	.word	0x00085bf1

00080f68 <TC1_Handler>:

volatile uint32_t periodic_tick_div = 0;
ISR(TC1_Handler)
{
	if (tc_get_status(TC0, PERIODIC_TIMER_CHANNEL) & (TC_IER_CPCS)) {
   80f68:	2101      	movs	r1, #1
{
   80f6a:	b510      	push	{r4, lr}
	if (tc_get_status(TC0, PERIODIC_TIMER_CHANNEL) & (TC_IER_CPCS)) {
   80f6c:	480c      	ldr	r0, [pc, #48]	; (80fa0 <TC1_Handler+0x38>)
   80f6e:	4b0d      	ldr	r3, [pc, #52]	; (80fa4 <TC1_Handler+0x3c>)
   80f70:	4798      	blx	r3
   80f72:	06c1      	lsls	r1, r0, #27
   80f74:	d400      	bmi.n	80f78 <TC1_Handler+0x10>
		
		if (!(periodic_tick_div % 16)) {
			pgood_tick();
		}
	}
}
   80f76:	bd10      	pop	{r4, pc}
		periodic_tick_div++;
   80f78:	4c0b      	ldr	r4, [pc, #44]	; (80fa8 <TC1_Handler+0x40>)
		thermals_fast_tick();
   80f7a:	4b0c      	ldr	r3, [pc, #48]	; (80fac <TC1_Handler+0x44>)
   80f7c:	4798      	blx	r3
		periodic_tick_div++;
   80f7e:	6823      	ldr	r3, [r4, #0]
   80f80:	3301      	adds	r3, #1
   80f82:	6023      	str	r3, [r4, #0]
		if (!(periodic_tick_div % 8)) {
   80f84:	6823      	ldr	r3, [r4, #0]
   80f86:	075a      	lsls	r2, r3, #29
   80f88:	d006      	beq.n	80f98 <TC1_Handler+0x30>
		if (!(periodic_tick_div % 16)) {
   80f8a:	6823      	ldr	r3, [r4, #0]
   80f8c:	071b      	lsls	r3, r3, #28
   80f8e:	d1f2      	bne.n	80f76 <TC1_Handler+0xe>
}
   80f90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			pgood_tick();
   80f94:	4b06      	ldr	r3, [pc, #24]	; (80fb0 <TC1_Handler+0x48>)
   80f96:	4718      	bx	r3
			thermals_slow_tick();
   80f98:	4b06      	ldr	r3, [pc, #24]	; (80fb4 <TC1_Handler+0x4c>)
   80f9a:	4798      	blx	r3
   80f9c:	e7f5      	b.n	80f8a <TC1_Handler+0x22>
   80f9e:	bf00      	nop
   80fa0:	40080000 	.word	0x40080000
   80fa4:	00085bf9 	.word	0x00085bf9
   80fa8:	20071500 	.word	0x20071500
   80fac:	00080d95 	.word	0x00080d95
   80fb0:	00080e95 	.word	0x00080e95
   80fb4:	00080c35 	.word	0x00080c35

00080fb8 <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   80fb8:	4a02      	ldr	r2, [pc, #8]	; (80fc4 <udc_valid_address+0xc>)
   80fba:	4b03      	ldr	r3, [pc, #12]	; (80fc8 <udc_valid_address+0x10>)
   80fbc:	8850      	ldrh	r0, [r2, #2]
   80fbe:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   80fc2:	4718      	bx	r3
   80fc4:	20072288 	.word	0x20072288
   80fc8:	0008412d 	.word	0x0008412d

00080fcc <udc_update_iface_desc.part.0>:
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   80fcc:	4b15      	ldr	r3, [pc, #84]	; (81024 <udc_update_iface_desc.part.0+0x58>)
   80fce:	681b      	ldr	r3, [r3, #0]
   80fd0:	681b      	ldr	r3, [r3, #0]
   80fd2:	791a      	ldrb	r2, [r3, #4]
   80fd4:	4282      	cmp	r2, r0
   80fd6:	d922      	bls.n	8101e <udc_update_iface_desc.part.0+0x52>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
   80fd8:	b430      	push	{r4, r5}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   80fda:	4c13      	ldr	r4, [pc, #76]	; (81028 <udc_update_iface_desc.part.0+0x5c>)
   80fdc:	6023      	str	r3, [r4, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   80fde:	f8b3 c002 	ldrh.w	ip, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   80fe2:	449c      	add	ip, r3
	while (ptr_end_desc >
   80fe4:	4563      	cmp	r3, ip
   80fe6:	d217      	bcs.n	81018 <udc_update_iface_desc.part.0+0x4c>
   80fe8:	2500      	movs	r5, #0
   80fea:	e004      	b.n	80ff6 <udc_update_iface_desc.part.0+0x2a>
				udc_ptr_iface->bLength);
   80fec:	781a      	ldrb	r2, [r3, #0]
   80fee:	2501      	movs	r5, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   80ff0:	4413      	add	r3, r2
	while (ptr_end_desc >
   80ff2:	459c      	cmp	ip, r3
   80ff4:	d90c      	bls.n	81010 <udc_update_iface_desc.part.0+0x44>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   80ff6:	785a      	ldrb	r2, [r3, #1]
   80ff8:	2a04      	cmp	r2, #4
   80ffa:	d1f7      	bne.n	80fec <udc_update_iface_desc.part.0+0x20>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   80ffc:	789a      	ldrb	r2, [r3, #2]
   80ffe:	4282      	cmp	r2, r0
   81000:	d1f4      	bne.n	80fec <udc_update_iface_desc.part.0+0x20>
   81002:	78da      	ldrb	r2, [r3, #3]
   81004:	428a      	cmp	r2, r1
   81006:	d1f1      	bne.n	80fec <udc_update_iface_desc.part.0+0x20>
   81008:	b105      	cbz	r5, 8100c <udc_update_iface_desc.part.0+0x40>
   8100a:	6023      	str	r3, [r4, #0]
				return true; // Interface found
   8100c:	2001      	movs	r0, #1
   8100e:	e001      	b.n	81014 <udc_update_iface_desc.part.0+0x48>
	return false; // Interface not found
   81010:	2000      	movs	r0, #0
   81012:	6023      	str	r3, [r4, #0]
}
   81014:	bc30      	pop	{r4, r5}
   81016:	4770      	bx	lr
		return false;
   81018:	2000      	movs	r0, #0
}
   8101a:	bc30      	pop	{r4, r5}
   8101c:	4770      	bx	lr
		return false;
   8101e:	2000      	movs	r0, #0
}
   81020:	4770      	bx	lr
   81022:	bf00      	nop
   81024:	2007150c 	.word	0x2007150c
   81028:	20071510 	.word	0x20071510

0008102c <udc_iface_disable>:
{
   8102c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (0 == udc_num_configuration) {
   81030:	4c1c      	ldr	r4, [pc, #112]	; (810a4 <udc_iface_disable+0x78>)
   81032:	7823      	ldrb	r3, [r4, #0]
   81034:	b37b      	cbz	r3, 81096 <udc_iface_disable+0x6a>
   81036:	2100      	movs	r1, #0
   81038:	4e1b      	ldr	r6, [pc, #108]	; (810a8 <udc_iface_disable+0x7c>)
   8103a:	4605      	mov	r5, r0
   8103c:	47b0      	blx	r6
	if (!udc_update_iface_desc(iface_num, 0)) {
   8103e:	b350      	cbz	r0, 81096 <udc_iface_disable+0x6a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81040:	f8df 8068 	ldr.w	r8, [pc, #104]	; 810ac <udc_iface_disable+0x80>
   81044:	f8d8 3000 	ldr.w	r3, [r8]
   81048:	685b      	ldr	r3, [r3, #4]
   8104a:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8104e:	68fb      	ldr	r3, [r7, #12]
   81050:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   81052:	7823      	ldrb	r3, [r4, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81054:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
   81056:	b1f3      	cbz	r3, 81096 <udc_iface_disable+0x6a>
   81058:	4628      	mov	r0, r5
   8105a:	47b0      	blx	r6
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8105c:	4605      	mov	r5, r0
   8105e:	b1d0      	cbz	r0, 81096 <udc_iface_disable+0x6a>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   81060:	4b13      	ldr	r3, [pc, #76]	; (810b0 <udc_iface_disable+0x84>)
			udd_ep_free(ep_desc->bEndpointAddress);
   81062:	4e14      	ldr	r6, [pc, #80]	; (810b4 <udc_iface_disable+0x88>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   81064:	681c      	ldr	r4, [r3, #0]
			udc_ptr_conf->desc +
   81066:	f8d8 2000 	ldr.w	r2, [r8]
			desc->bLength);
   8106a:	7823      	ldrb	r3, [r4, #0]
			udc_ptr_conf->desc +
   8106c:	6812      	ldr	r2, [r2, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8106e:	441c      	add	r4, r3
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   81070:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   81072:	441a      	add	r2, r3
	while (ptr_eof_desc > desc) {
   81074:	42a2      	cmp	r2, r4
   81076:	d806      	bhi.n	81086 <udc_iface_disable+0x5a>
   81078:	e008      	b.n	8108c <udc_iface_disable+0x60>
		if (desc_id == desc->bDescriptorType) {
   8107a:	2b05      	cmp	r3, #5
   8107c:	d00f      	beq.n	8109e <udc_iface_disable+0x72>
				desc->bLength);
   8107e:	7823      	ldrb	r3, [r4, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   81080:	441c      	add	r4, r3
	while (ptr_eof_desc > desc) {
   81082:	42a2      	cmp	r2, r4
   81084:	d902      	bls.n	8108c <udc_iface_disable+0x60>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   81086:	7863      	ldrb	r3, [r4, #1]
   81088:	2b04      	cmp	r3, #4
   8108a:	d1f6      	bne.n	8107a <udc_iface_disable+0x4e>
	udi_api->disable();
   8108c:	687b      	ldr	r3, [r7, #4]
   8108e:	4798      	blx	r3
}
   81090:	4628      	mov	r0, r5
   81092:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   81096:	2500      	movs	r5, #0
}
   81098:	4628      	mov	r0, r5
   8109a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ep_free(ep_desc->bEndpointAddress);
   8109e:	78a0      	ldrb	r0, [r4, #2]
   810a0:	47b0      	blx	r6
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   810a2:	e7e0      	b.n	81066 <udc_iface_disable+0x3a>
   810a4:	20071509 	.word	0x20071509
   810a8:	00080fcd 	.word	0x00080fcd
   810ac:	2007150c 	.word	0x2007150c
   810b0:	20071510 	.word	0x20071510
   810b4:	00084191 	.word	0x00084191

000810b8 <udc_iface_enable>:
	if (0 == udc_num_configuration) {
   810b8:	4b18      	ldr	r3, [pc, #96]	; (8111c <udc_iface_enable+0x64>)
   810ba:	781b      	ldrb	r3, [r3, #0]
   810bc:	b35b      	cbz	r3, 81116 <udc_iface_enable+0x5e>
{
   810be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   810c2:	4b17      	ldr	r3, [pc, #92]	; (81120 <udc_iface_enable+0x68>)
   810c4:	4605      	mov	r5, r0
   810c6:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   810c8:	b310      	cbz	r0, 81110 <udc_iface_enable+0x58>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   810ca:	4b16      	ldr	r3, [pc, #88]	; (81124 <udc_iface_enable+0x6c>)
   810cc:	4e16      	ldr	r6, [pc, #88]	; (81128 <udc_iface_enable+0x70>)
   810ce:	681c      	ldr	r4, [r3, #0]
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   810d0:	4f16      	ldr	r7, [pc, #88]	; (8112c <udc_iface_enable+0x74>)
			udc_ptr_conf->desc +
   810d2:	6831      	ldr	r1, [r6, #0]
			desc->bLength);
   810d4:	7823      	ldrb	r3, [r4, #0]
			udc_ptr_conf->desc +
   810d6:	680a      	ldr	r2, [r1, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   810d8:	441c      	add	r4, r3
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   810da:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   810dc:	441a      	add	r2, r3
	while (ptr_eof_desc > desc) {
   810de:	42a2      	cmp	r2, r4
   810e0:	d806      	bhi.n	810f0 <udc_iface_enable+0x38>
   810e2:	e008      	b.n	810f6 <udc_iface_enable+0x3e>
		if (desc_id == desc->bDescriptorType) {
   810e4:	2b05      	cmp	r3, #5
   810e6:	d00d      	beq.n	81104 <udc_iface_enable+0x4c>
				desc->bLength);
   810e8:	7823      	ldrb	r3, [r4, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   810ea:	441c      	add	r4, r3
	while (ptr_eof_desc > desc) {
   810ec:	42a2      	cmp	r2, r4
   810ee:	d902      	bls.n	810f6 <udc_iface_enable+0x3e>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   810f0:	7863      	ldrb	r3, [r4, #1]
   810f2:	2b04      	cmp	r3, #4
   810f4:	d1f6      	bne.n	810e4 <udc_iface_enable+0x2c>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   810f6:	684b      	ldr	r3, [r1, #4]
   810f8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
}
   810fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   81100:	681b      	ldr	r3, [r3, #0]
   81102:	4718      	bx	r3
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   81104:	88a2      	ldrh	r2, [r4, #4]
   81106:	78e1      	ldrb	r1, [r4, #3]
   81108:	78a0      	ldrb	r0, [r4, #2]
   8110a:	47b8      	blx	r7
   8110c:	2800      	cmp	r0, #0
   8110e:	d1e0      	bne.n	810d2 <udc_iface_enable+0x1a>
}
   81110:	2000      	movs	r0, #0
   81112:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81116:	2000      	movs	r0, #0
   81118:	4770      	bx	lr
   8111a:	bf00      	nop
   8111c:	20071509 	.word	0x20071509
   81120:	00080fcd 	.word	0x00080fcd
   81124:	20071510 	.word	0x20071510
   81128:	2007150c 	.word	0x2007150c
   8112c:	000844dd 	.word	0x000844dd

00081130 <udc_get_interface_desc>:
	return udc_ptr_iface;
   81130:	4b01      	ldr	r3, [pc, #4]	; (81138 <udc_get_interface_desc+0x8>)
}
   81132:	6818      	ldr	r0, [r3, #0]
   81134:	4770      	bx	lr
   81136:	bf00      	nop
   81138:	20071510 	.word	0x20071510

0008113c <udc_start>:
	udd_enable();
   8113c:	4b00      	ldr	r3, [pc, #0]	; (81140 <udc_start+0x4>)
   8113e:	4718      	bx	r3
   81140:	00083e89 	.word	0x00083e89

00081144 <udc_reset>:
{
   81144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (udc_num_configuration) {
   81146:	4f0c      	ldr	r7, [pc, #48]	; (81178 <udc_reset+0x34>)
   81148:	783b      	ldrb	r3, [r7, #0]
   8114a:	b17b      	cbz	r3, 8116c <udc_reset+0x28>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8114c:	4d0b      	ldr	r5, [pc, #44]	; (8117c <udc_reset+0x38>)
   8114e:	682b      	ldr	r3, [r5, #0]
   81150:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   81152:	791b      	ldrb	r3, [r3, #4]
   81154:	b153      	cbz	r3, 8116c <udc_reset+0x28>
   81156:	2400      	movs	r4, #0
   81158:	4620      	mov	r0, r4
   8115a:	4e09      	ldr	r6, [pc, #36]	; (81180 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   8115c:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8115e:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
   81160:	3401      	adds	r4, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81162:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   81164:	b2e0      	uxtb	r0, r4
   81166:	791b      	ldrb	r3, [r3, #4]
   81168:	4283      	cmp	r3, r0
   8116a:	d8f7      	bhi.n	8115c <udc_reset+0x18>
	udc_num_configuration = 0;
   8116c:	2300      	movs	r3, #0
	udc_device_status =
   8116e:	4a05      	ldr	r2, [pc, #20]	; (81184 <udc_reset+0x40>)
	udc_num_configuration = 0;
   81170:	703b      	strb	r3, [r7, #0]
	udc_device_status =
   81172:	8013      	strh	r3, [r2, #0]
}
   81174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81176:	bf00      	nop
   81178:	20071509 	.word	0x20071509
   8117c:	2007150c 	.word	0x2007150c
   81180:	0008102d 	.word	0x0008102d
   81184:	20071504 	.word	0x20071504

00081188 <udc_sof_notify>:
{
   81188:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   8118a:	4b0c      	ldr	r3, [pc, #48]	; (811bc <udc_sof_notify+0x34>)
   8118c:	781b      	ldrb	r3, [r3, #0]
   8118e:	b19b      	cbz	r3, 811b8 <udc_sof_notify+0x30>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81190:	4d0b      	ldr	r5, [pc, #44]	; (811c0 <udc_sof_notify+0x38>)
   81192:	682b      	ldr	r3, [r5, #0]
   81194:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   81196:	7912      	ldrb	r2, [r2, #4]
   81198:	b172      	cbz	r2, 811b8 <udc_sof_notify+0x30>
   8119a:	2400      	movs	r4, #0
   8119c:	4622      	mov	r2, r4
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   8119e:	685b      	ldr	r3, [r3, #4]
		for (iface_num = 0;
   811a0:	3401      	adds	r4, #1
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   811a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   811a6:	691b      	ldr	r3, [r3, #16]
   811a8:	b103      	cbz	r3, 811ac <udc_sof_notify+0x24>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   811aa:	4798      	blx	r3
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   811ac:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
   811ae:	b2e2      	uxtb	r2, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   811b0:	6819      	ldr	r1, [r3, #0]
		for (iface_num = 0;
   811b2:	7909      	ldrb	r1, [r1, #4]
   811b4:	4291      	cmp	r1, r2
   811b6:	d8f2      	bhi.n	8119e <udc_sof_notify+0x16>
}
   811b8:	bd38      	pop	{r3, r4, r5, pc}
   811ba:	bf00      	nop
   811bc:	20071509 	.word	0x20071509
   811c0:	2007150c 	.word	0x2007150c

000811c4 <udc_process_setup>:
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   811c4:	2300      	movs	r3, #0
{
   811c6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	udd_g_ctrlreq.payload_size = 0;
   811ca:	4c8b      	ldr	r4, [pc, #556]	; (813f8 <udc_process_setup+0x234>)
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   811cc:	8822      	ldrh	r2, [r4, #0]
	udd_g_ctrlreq.over_under_run = NULL;
   811ce:	e9c4 3304 	strd	r3, r3, [r4, #16]
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   811d2:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
	udd_g_ctrlreq.payload_size = 0;
   811d6:	81a3      	strh	r3, [r4, #12]
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   811d8:	f000 80d0 	beq.w	8137c <udc_process_setup+0x1b8>
#endif
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
		return true;
	}

	if (Udd_setup_is_in()) {
   811dc:	f994 2000 	ldrsb.w	r2, [r4]
   811e0:	7823      	ldrb	r3, [r4, #0]
   811e2:	2a00      	cmp	r2, #0
   811e4:	db0e      	blt.n	81204 <udc_process_setup+0x40>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   811e6:	f013 0f60 	tst.w	r3, #96	; 0x60
   811ea:	d079      	beq.n	812e0 <udc_process_setup+0x11c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   811ec:	f013 0f1e 	tst.w	r3, #30
   811f0:	d040      	beq.n	81274 <udc_process_setup+0xb0>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   811f2:	f003 031f 	and.w	r3, r3, #31
   811f6:	2b02      	cmp	r3, #2
   811f8:	f000 80b6 	beq.w	81368 <udc_process_setup+0x1a4>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   811fc:	2500      	movs	r5, #0
#endif
}
   811fe:	4628      	mov	r0, r5
   81200:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
   81204:	88e5      	ldrh	r5, [r4, #6]
   81206:	2d00      	cmp	r5, #0
   81208:	d0f8      	beq.n	811fc <udc_process_setup+0x38>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8120a:	f013 0f60 	tst.w	r3, #96	; 0x60
   8120e:	d1ed      	bne.n	811ec <udc_process_setup+0x28>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   81210:	f013 021f 	ands.w	r2, r3, #31
   81214:	f000 8165 	beq.w	814e2 <udc_process_setup+0x31e>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   81218:	2a01      	cmp	r2, #1
   8121a:	f040 80ba 	bne.w	81392 <udc_process_setup+0x1ce>
			switch (udd_g_ctrlreq.req.bRequest) {
   8121e:	7862      	ldrb	r2, [r4, #1]
   81220:	2a0a      	cmp	r2, #10
   81222:	d124      	bne.n	8126e <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wLength != 1) {
   81224:	2d01      	cmp	r5, #1
   81226:	d122      	bne.n	8126e <udc_process_setup+0xaa>
	if (!udc_num_configuration) {
   81228:	4a74      	ldr	r2, [pc, #464]	; (813fc <udc_process_setup+0x238>)
   8122a:	7812      	ldrb	r2, [r2, #0]
   8122c:	b1fa      	cbz	r2, 8126e <udc_process_setup+0xaa>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8122e:	4a74      	ldr	r2, [pc, #464]	; (81400 <udc_process_setup+0x23c>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81230:	7926      	ldrb	r6, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81232:	6817      	ldr	r7, [r2, #0]
   81234:	683a      	ldr	r2, [r7, #0]
   81236:	7912      	ldrb	r2, [r2, #4]
   81238:	42b2      	cmp	r2, r6
   8123a:	d918      	bls.n	8126e <udc_process_setup+0xaa>
	if (0 == udc_num_configuration) {
   8123c:	2100      	movs	r1, #0
   8123e:	4630      	mov	r0, r6
   81240:	4b70      	ldr	r3, [pc, #448]	; (81404 <udc_process_setup+0x240>)
   81242:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, 0)) {
   81244:	4605      	mov	r5, r0
   81246:	2800      	cmp	r0, #0
   81248:	f000 80c6 	beq.w	813d8 <udc_process_setup+0x214>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8124c:	687b      	ldr	r3, [r7, #4]
	udc_iface_setting = udi_api->getsetting();
   8124e:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   81252:	68db      	ldr	r3, [r3, #12]
   81254:	4798      	blx	r3
   81256:	4602      	mov	r2, r0
   81258:	486b      	ldr	r0, [pc, #428]	; (81408 <udc_process_setup+0x244>)
	udd_set_setup_payload(&udc_iface_setting,1);
   8125a:	2101      	movs	r1, #1
   8125c:	4b6b      	ldr	r3, [pc, #428]	; (8140c <udc_process_setup+0x248>)
	udc_iface_setting = udi_api->getsetting();
   8125e:	7002      	strb	r2, [r0, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   81260:	4798      	blx	r3
	return true;
   81262:	e7cc      	b.n	811fe <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   81264:	2a01      	cmp	r2, #1
   81266:	f000 814d 	beq.w	81504 <udc_process_setup+0x340>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   8126a:	2a02      	cmp	r2, #2
   8126c:	d06c      	beq.n	81348 <udc_process_setup+0x184>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   8126e:	f013 0f1e 	tst.w	r3, #30
   81272:	d1c3      	bne.n	811fc <udc_process_setup+0x38>
		if (udd_g_ctrlreq.req.wIndex == 2) {
   81274:	88a3      	ldrh	r3, [r4, #4]
	if (0 == udc_num_configuration) {
   81276:	4e61      	ldr	r6, [pc, #388]	; (813fc <udc_process_setup+0x238>)
		if (udd_g_ctrlreq.req.wIndex == 2) {
   81278:	2b02      	cmp	r3, #2
			udd_g_ctrlreq.req.wIndex = 1;
   8127a:	bf04      	itt	eq
   8127c:	2301      	moveq	r3, #1
   8127e:	80a3      	strheq	r3, [r4, #4]
	if (0 == udc_num_configuration) {
   81280:	7833      	ldrb	r3, [r6, #0]
   81282:	2b00      	cmp	r3, #0
   81284:	d0ba      	beq.n	811fc <udc_process_setup+0x38>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81286:	4f5e      	ldr	r7, [pc, #376]	; (81400 <udc_process_setup+0x23c>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81288:	f894 8004 	ldrb.w	r8, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8128c:	683d      	ldr	r5, [r7, #0]
   8128e:	682b      	ldr	r3, [r5, #0]
   81290:	791b      	ldrb	r3, [r3, #4]
   81292:	4598      	cmp	r8, r3
   81294:	d340      	bcc.n	81318 <udc_process_setup+0x154>
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   81296:	7822      	ldrb	r2, [r4, #0]
   81298:	f002 021f 	and.w	r2, r2, #31
   8129c:	2a02      	cmp	r2, #2
   8129e:	d1ad      	bne.n	811fc <udc_process_setup+0x38>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   812a0:	2b00      	cmp	r3, #0
   812a2:	d0ab      	beq.n	811fc <udc_process_setup+0x38>
   812a4:	2400      	movs	r4, #0
   812a6:	46a0      	mov	r8, r4
   812a8:	f8df 9158 	ldr.w	r9, [pc, #344]	; 81404 <udc_process_setup+0x240>
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   812ac:	686b      	ldr	r3, [r5, #4]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   812ae:	3401      	adds	r4, #1
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   812b0:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   812b4:	68eb      	ldr	r3, [r5, #12]
   812b6:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   812b8:	7833      	ldrb	r3, [r6, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   812ba:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
   812bc:	2b00      	cmp	r3, #0
   812be:	d09d      	beq.n	811fc <udc_process_setup+0x38>
   812c0:	4640      	mov	r0, r8
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   812c2:	fa5f f884 	uxtb.w	r8, r4
   812c6:	47c8      	blx	r9
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   812c8:	2800      	cmp	r0, #0
   812ca:	d097      	beq.n	811fc <udc_process_setup+0x38>
		if (udi_api->setup()) {
   812cc:	68ab      	ldr	r3, [r5, #8]
   812ce:	4798      	blx	r3
   812d0:	2800      	cmp	r0, #0
   812d2:	d137      	bne.n	81344 <udc_process_setup+0x180>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   812d4:	683d      	ldr	r5, [r7, #0]
   812d6:	682b      	ldr	r3, [r5, #0]
   812d8:	791b      	ldrb	r3, [r3, #4]
   812da:	4543      	cmp	r3, r8
   812dc:	d8e6      	bhi.n	812ac <udc_process_setup+0xe8>
   812de:	e78d      	b.n	811fc <udc_process_setup+0x38>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   812e0:	f013 021f 	ands.w	r2, r3, #31
   812e4:	d1be      	bne.n	81264 <udc_process_setup+0xa0>
			switch (udd_g_ctrlreq.req.bRequest) {
   812e6:	7862      	ldrb	r2, [r4, #1]
   812e8:	3a01      	subs	r2, #1
   812ea:	2a08      	cmp	r2, #8
   812ec:	d8bf      	bhi.n	8126e <udc_process_setup+0xaa>
   812ee:	a101      	add	r1, pc, #4	; (adr r1, 812f4 <udc_process_setup+0x130>)
   812f0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   812f4:	000813dd 	.word	0x000813dd
   812f8:	0008126f 	.word	0x0008126f
   812fc:	000813b9 	.word	0x000813b9
   81300:	0008126f 	.word	0x0008126f
   81304:	000814d3 	.word	0x000814d3
   81308:	0008126f 	.word	0x0008126f
   8130c:	0008126f 	.word	0x0008126f
   81310:	0008126f 	.word	0x0008126f
   81314:	00081425 	.word	0x00081425
	if (0 == udc_num_configuration) {
   81318:	2100      	movs	r1, #0
   8131a:	4640      	mov	r0, r8
   8131c:	4f39      	ldr	r7, [pc, #228]	; (81404 <udc_process_setup+0x240>)
   8131e:	47b8      	blx	r7
	if (!udc_update_iface_desc(iface_num, 0)) {
   81320:	2800      	cmp	r0, #0
   81322:	d034      	beq.n	8138e <udc_process_setup+0x1ca>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81324:	686b      	ldr	r3, [r5, #4]
   81326:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8132a:	68eb      	ldr	r3, [r5, #12]
   8132c:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   8132e:	7833      	ldrb	r3, [r6, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81330:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
   81332:	2b00      	cmp	r3, #0
   81334:	f43f af62 	beq.w	811fc <udc_process_setup+0x38>
   81338:	4640      	mov	r0, r8
   8133a:	47b8      	blx	r7
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8133c:	b338      	cbz	r0, 8138e <udc_process_setup+0x1ca>
	return udi_api->setup();
   8133e:	68ab      	ldr	r3, [r5, #8]
   81340:	4798      	blx	r3
		if (udc_req_iface()) {
   81342:	b320      	cbz	r0, 8138e <udc_process_setup+0x1ca>
			return true;
   81344:	2501      	movs	r5, #1
   81346:	e75a      	b.n	811fe <udc_process_setup+0x3a>
			switch (udd_g_ctrlreq.req.bRequest) {
   81348:	7862      	ldrb	r2, [r4, #1]
   8134a:	2a01      	cmp	r2, #1
   8134c:	f000 80f7 	beq.w	8153e <udc_process_setup+0x37a>
   81350:	2a03      	cmp	r2, #3
   81352:	d106      	bne.n	81362 <udc_process_setup+0x19e>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   81354:	88e2      	ldrh	r2, [r4, #6]
   81356:	8861      	ldrh	r1, [r4, #2]
   81358:	430a      	orrs	r2, r1
   8135a:	b292      	uxth	r2, r2
   8135c:	2a00      	cmp	r2, #0
   8135e:	f000 81c1 	beq.w	816e4 <udc_process_setup+0x520>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   81362:	f013 0f1e 	tst.w	r3, #30
   81366:	d085      	beq.n	81274 <udc_process_setup+0xb0>
	if (0 == udc_num_configuration) {
   81368:	4e24      	ldr	r6, [pc, #144]	; (813fc <udc_process_setup+0x238>)
   8136a:	7833      	ldrb	r3, [r6, #0]
   8136c:	2b00      	cmp	r3, #0
   8136e:	f43f af45 	beq.w	811fc <udc_process_setup+0x38>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81372:	4f23      	ldr	r7, [pc, #140]	; (81400 <udc_process_setup+0x23c>)
   81374:	683d      	ldr	r5, [r7, #0]
   81376:	682b      	ldr	r3, [r5, #0]
   81378:	791b      	ldrb	r3, [r3, #4]
   8137a:	e791      	b.n	812a0 <udc_process_setup+0xdc>
		return true;
   8137c:	2501      	movs	r5, #1
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
   8137e:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   81382:	4823      	ldr	r0, [pc, #140]	; (81410 <udc_process_setup+0x24c>)
   81384:	4b21      	ldr	r3, [pc, #132]	; (8140c <udc_process_setup+0x248>)
   81386:	4798      	blx	r3
}
   81388:	4628      	mov	r0, r5
   8138a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   8138e:	7823      	ldrb	r3, [r4, #0]
   81390:	e72f      	b.n	811f2 <udc_process_setup+0x2e>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   81392:	2a02      	cmp	r2, #2
   81394:	f47f af6b 	bne.w	8126e <udc_process_setup+0xaa>
			switch (udd_g_ctrlreq.req.bRequest) {
   81398:	7862      	ldrb	r2, [r4, #1]
   8139a:	2a00      	cmp	r2, #0
   8139c:	d1e1      	bne.n	81362 <udc_process_setup+0x19e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   8139e:	2d02      	cmp	r5, #2
   813a0:	d1df      	bne.n	81362 <udc_process_setup+0x19e>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   813a2:	7920      	ldrb	r0, [r4, #4]
   813a4:	4b1b      	ldr	r3, [pc, #108]	; (81414 <udc_process_setup+0x250>)
   813a6:	4798      	blx	r3
   813a8:	4602      	mov	r2, r0
   813aa:	481b      	ldr	r0, [pc, #108]	; (81418 <udc_process_setup+0x254>)
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   813ac:	4629      	mov	r1, r5
   813ae:	4b17      	ldr	r3, [pc, #92]	; (8140c <udc_process_setup+0x248>)
			return true;
   813b0:	2501      	movs	r5, #1
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   813b2:	8002      	strh	r2, [r0, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   813b4:	4798      	blx	r3
	return true;
   813b6:	e722      	b.n	811fe <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
   813b8:	88e2      	ldrh	r2, [r4, #6]
   813ba:	2a00      	cmp	r2, #0
   813bc:	f47f af57 	bne.w	8126e <udc_process_setup+0xaa>
	switch (udd_g_ctrlreq.req.wValue) {
   813c0:	8862      	ldrh	r2, [r4, #2]
   813c2:	2a02      	cmp	r2, #2
   813c4:	f47f af53 	bne.w	8126e <udc_process_setup+0xaa>
		if (!udd_is_high_speed()) {
   813c8:	4b14      	ldr	r3, [pc, #80]	; (8141c <udc_process_setup+0x258>)
   813ca:	4798      	blx	r3
   813cc:	4605      	mov	r5, r0
   813ce:	b118      	cbz	r0, 813d8 <udc_process_setup+0x214>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   813d0:	7923      	ldrb	r3, [r4, #4]
   813d2:	2b00      	cmp	r3, #0
   813d4:	f000 81bb 	beq.w	8174e <udc_process_setup+0x58a>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   813d8:	7823      	ldrb	r3, [r4, #0]
   813da:	e707      	b.n	811ec <udc_process_setup+0x28>
	if (udd_g_ctrlreq.req.wLength) {
   813dc:	88e2      	ldrh	r2, [r4, #6]
   813de:	2a00      	cmp	r2, #0
   813e0:	f47f af45 	bne.w	8126e <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   813e4:	8865      	ldrh	r5, [r4, #2]
   813e6:	2d01      	cmp	r5, #1
   813e8:	f47f af41 	bne.w	8126e <udc_process_setup+0xaa>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   813ec:	4a0c      	ldr	r2, [pc, #48]	; (81420 <udc_process_setup+0x25c>)
   813ee:	8813      	ldrh	r3, [r2, #0]
   813f0:	f023 0302 	bic.w	r3, r3, #2
   813f4:	8013      	strh	r3, [r2, #0]
		return true;
   813f6:	e702      	b.n	811fe <udc_process_setup+0x3a>
   813f8:	20072288 	.word	0x20072288
   813fc:	20071509 	.word	0x20071509
   81400:	2007150c 	.word	0x2007150c
   81404:	00080fcd 	.word	0x00080fcd
   81408:	20071508 	.word	0x20071508
   8140c:	00084185 	.word	0x00084185
   81410:	20070230 	.word	0x20070230
   81414:	000841e9 	.word	0x000841e9
   81418:	20071506 	.word	0x20071506
   8141c:	00084119 	.word	0x00084119
   81420:	20071504 	.word	0x20071504
	if (udd_g_ctrlreq.req.wLength) {
   81424:	88e2      	ldrh	r2, [r4, #6]
   81426:	2a00      	cmp	r2, #0
   81428:	f47f af21 	bne.w	8126e <udc_process_setup+0xaa>
	if (!udd_getaddress()) {
   8142c:	4b9c      	ldr	r3, [pc, #624]	; (816a0 <udc_process_setup+0x4dc>)
   8142e:	4798      	blx	r3
   81430:	2800      	cmp	r0, #0
   81432:	d0d1      	beq.n	813d8 <udc_process_setup+0x214>
	if (udd_is_high_speed()) {
   81434:	f8df 926c 	ldr.w	r9, [pc, #620]	; 816a4 <udc_process_setup+0x4e0>
   81438:	47c8      	blx	r9
				udc_config.confdev_hs->bNumConfigurations) {
   8143a:	f8df a26c 	ldr.w	sl, [pc, #620]	; 816a8 <udc_process_setup+0x4e4>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8143e:	78a3      	ldrb	r3, [r4, #2]
	if (udd_is_high_speed()) {
   81440:	2800      	cmp	r0, #0
   81442:	f000 8125 	beq.w	81690 <udc_process_setup+0x4cc>
				udc_config.confdev_hs->bNumConfigurations) {
   81446:	f8da 2008 	ldr.w	r2, [sl, #8]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8144a:	7c52      	ldrb	r2, [r2, #17]
   8144c:	429a      	cmp	r2, r3
   8144e:	d3c3      	bcc.n	813d8 <udc_process_setup+0x214>
	if (udc_num_configuration) {
   81450:	4e96      	ldr	r6, [pc, #600]	; (816ac <udc_process_setup+0x4e8>)
   81452:	7833      	ldrb	r3, [r6, #0]
   81454:	b183      	cbz	r3, 81478 <udc_process_setup+0x2b4>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81456:	4f96      	ldr	r7, [pc, #600]	; (816b0 <udc_process_setup+0x4ec>)
   81458:	683b      	ldr	r3, [r7, #0]
   8145a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   8145c:	791b      	ldrb	r3, [r3, #4]
   8145e:	b15b      	cbz	r3, 81478 <udc_process_setup+0x2b4>
   81460:	2500      	movs	r5, #0
   81462:	4628      	mov	r0, r5
   81464:	f8df 824c 	ldr.w	r8, [pc, #588]	; 816b4 <udc_process_setup+0x4f0>
			udc_iface_disable(iface_num);
   81468:	47c0      	blx	r8
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8146a:	683b      	ldr	r3, [r7, #0]
		for (iface_num = 0;
   8146c:	3501      	adds	r5, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8146e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   81470:	b2e8      	uxtb	r0, r5
   81472:	791b      	ldrb	r3, [r3, #4]
   81474:	4283      	cmp	r3, r0
   81476:	d8f7      	bhi.n	81468 <udc_process_setup+0x2a4>
	udc_device_status =
   81478:	2200      	movs	r2, #0
   8147a:	4b8f      	ldr	r3, [pc, #572]	; (816b8 <udc_process_setup+0x4f4>)
   8147c:	801a      	strh	r2, [r3, #0]
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   8147e:	78a3      	ldrb	r3, [r4, #2]
   81480:	7033      	strb	r3, [r6, #0]
	if (udc_num_configuration == 0) {
   81482:	2b00      	cmp	r3, #0
   81484:	f43f af5e 	beq.w	81344 <udc_process_setup+0x180>
	if (udd_is_high_speed()) {
   81488:	47c8      	blx	r9
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   8148a:	7832      	ldrb	r2, [r6, #0]
	if (udd_is_high_speed()) {
   8148c:	2800      	cmp	r0, #0
   8148e:	f000 8133 	beq.w	816f8 <udc_process_setup+0x534>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   81492:	f8da 3010 	ldr.w	r3, [sl, #16]
   81496:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   8149a:	3a01      	subs	r2, #1
   8149c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   814a0:	681a      	ldr	r2, [r3, #0]
   814a2:	4f83      	ldr	r7, [pc, #524]	; (816b0 <udc_process_setup+0x4ec>)
   814a4:	7912      	ldrb	r2, [r2, #4]
   814a6:	603b      	str	r3, [r7, #0]
   814a8:	2a00      	cmp	r2, #0
   814aa:	f43f af4b 	beq.w	81344 <udc_process_setup+0x180>
   814ae:	2500      	movs	r5, #0
   814b0:	4e82      	ldr	r6, [pc, #520]	; (816bc <udc_process_setup+0x4f8>)
   814b2:	462b      	mov	r3, r5
   814b4:	e005      	b.n	814c2 <udc_process_setup+0x2fe>
   814b6:	683a      	ldr	r2, [r7, #0]
   814b8:	6812      	ldr	r2, [r2, #0]
   814ba:	7912      	ldrb	r2, [r2, #4]
   814bc:	429a      	cmp	r2, r3
   814be:	f67f af41 	bls.w	81344 <udc_process_setup+0x180>
		if (!udc_iface_enable(iface_num, 0)) {
   814c2:	4618      	mov	r0, r3
   814c4:	2100      	movs	r1, #0
   814c6:	47b0      	blx	r6
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   814c8:	3501      	adds	r5, #1
   814ca:	b2eb      	uxtb	r3, r5
		if (!udc_iface_enable(iface_num, 0)) {
   814cc:	2800      	cmp	r0, #0
   814ce:	d1f2      	bne.n	814b6 <udc_process_setup+0x2f2>
   814d0:	e782      	b.n	813d8 <udc_process_setup+0x214>
	if (udd_g_ctrlreq.req.wLength) {
   814d2:	88e2      	ldrh	r2, [r4, #6]
   814d4:	2a00      	cmp	r2, #0
   814d6:	f47f aeca 	bne.w	8126e <udc_process_setup+0xaa>
	udd_g_ctrlreq.callback = udc_valid_address;
   814da:	4b79      	ldr	r3, [pc, #484]	; (816c0 <udc_process_setup+0x4fc>)
			return true;
   814dc:	2501      	movs	r5, #1
	udd_g_ctrlreq.callback = udc_valid_address;
   814de:	6123      	str	r3, [r4, #16]
	return true;
   814e0:	e68d      	b.n	811fe <udc_process_setup+0x3a>
			switch (udd_g_ctrlreq.req.bRequest) {
   814e2:	7862      	ldrb	r2, [r4, #1]
   814e4:	2a06      	cmp	r2, #6
   814e6:	d040      	beq.n	8156a <udc_process_setup+0x3a6>
   814e8:	2a08      	cmp	r2, #8
   814ea:	d036      	beq.n	8155a <udc_process_setup+0x396>
   814ec:	2a00      	cmp	r2, #0
   814ee:	f47f aebe 	bne.w	8126e <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   814f2:	2d02      	cmp	r5, #2
   814f4:	f47f aebb 	bne.w	8126e <udc_process_setup+0xaa>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   814f8:	4629      	mov	r1, r5
   814fa:	486f      	ldr	r0, [pc, #444]	; (816b8 <udc_process_setup+0x4f4>)
   814fc:	4b71      	ldr	r3, [pc, #452]	; (816c4 <udc_process_setup+0x500>)
   814fe:	4798      	blx	r3
			return true;
   81500:	2501      	movs	r5, #1
   81502:	e67c      	b.n	811fe <udc_process_setup+0x3a>
			switch (udd_g_ctrlreq.req.bRequest) {
   81504:	7862      	ldrb	r2, [r4, #1]
   81506:	2a0b      	cmp	r2, #11
   81508:	f47f aeb1 	bne.w	8126e <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wLength) {
   8150c:	88e2      	ldrh	r2, [r4, #6]
   8150e:	2a00      	cmp	r2, #0
   81510:	f47f aead 	bne.w	8126e <udc_process_setup+0xaa>
	if (!udc_num_configuration) {
   81514:	4a65      	ldr	r2, [pc, #404]	; (816ac <udc_process_setup+0x4e8>)
   81516:	7812      	ldrb	r2, [r2, #0]
   81518:	2a00      	cmp	r2, #0
   8151a:	f43f aea8 	beq.w	8126e <udc_process_setup+0xaa>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   8151e:	7925      	ldrb	r5, [r4, #4]
	if (!udc_iface_disable(iface_num)) {
   81520:	4b64      	ldr	r3, [pc, #400]	; (816b4 <udc_process_setup+0x4f0>)
   81522:	4628      	mov	r0, r5
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   81524:	8866      	ldrh	r6, [r4, #2]
	if (!udc_iface_disable(iface_num)) {
   81526:	4798      	blx	r3
   81528:	2800      	cmp	r0, #0
   8152a:	f43f af55 	beq.w	813d8 <udc_process_setup+0x214>
	return udc_iface_enable(iface_num, setting_num);
   8152e:	4628      	mov	r0, r5
   81530:	4b62      	ldr	r3, [pc, #392]	; (816bc <udc_process_setup+0x4f8>)
   81532:	b2f1      	uxtb	r1, r6
   81534:	4798      	blx	r3
		if (udc_reqstd()) {
   81536:	2800      	cmp	r0, #0
   81538:	f47f af04 	bne.w	81344 <udc_process_setup+0x180>
   8153c:	e74c      	b.n	813d8 <udc_process_setup+0x214>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   8153e:	88e2      	ldrh	r2, [r4, #6]
   81540:	8861      	ldrh	r1, [r4, #2]
   81542:	430a      	orrs	r2, r1
   81544:	b292      	uxth	r2, r2
   81546:	2a00      	cmp	r2, #0
   81548:	f47f af0b 	bne.w	81362 <udc_process_setup+0x19e>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   8154c:	7920      	ldrb	r0, [r4, #4]
   8154e:	4b5e      	ldr	r3, [pc, #376]	; (816c8 <udc_process_setup+0x504>)
   81550:	4798      	blx	r3
		if (udc_reqstd()) {
   81552:	2800      	cmp	r0, #0
   81554:	f47f aef6 	bne.w	81344 <udc_process_setup+0x180>
   81558:	e73e      	b.n	813d8 <udc_process_setup+0x214>
	if (udd_g_ctrlreq.req.wLength != 1) {
   8155a:	2d01      	cmp	r5, #1
   8155c:	f47f ae87 	bne.w	8126e <udc_process_setup+0xaa>
	udd_set_setup_payload(&udc_num_configuration,1);
   81560:	4629      	mov	r1, r5
   81562:	4852      	ldr	r0, [pc, #328]	; (816ac <udc_process_setup+0x4e8>)
   81564:	4b57      	ldr	r3, [pc, #348]	; (816c4 <udc_process_setup+0x500>)
   81566:	4798      	blx	r3
	return true;
   81568:	e649      	b.n	811fe <udc_process_setup+0x3a>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   8156a:	8861      	ldrh	r1, [r4, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   8156c:	0a0a      	lsrs	r2, r1, #8
   8156e:	3a01      	subs	r2, #1
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   81570:	b2cd      	uxtb	r5, r1
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   81572:	2a0e      	cmp	r2, #14
   81574:	f63f ae3a 	bhi.w	811ec <udc_process_setup+0x28>
   81578:	a101      	add	r1, pc, #4	; (adr r1, 81580 <udc_process_setup+0x3bc>)
   8157a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   8157e:	bf00      	nop
   81580:	00081635 	.word	0x00081635
   81584:	0008160b 	.word	0x0008160b
   81588:	00081649 	.word	0x00081649
   8158c:	000811ed 	.word	0x000811ed
   81590:	000811ed 	.word	0x000811ed
   81594:	000815ff 	.word	0x000815ff
   81598:	000815d5 	.word	0x000815d5
   8159c:	000811ed 	.word	0x000811ed
   815a0:	000811ed 	.word	0x000811ed
   815a4:	000811ed 	.word	0x000811ed
   815a8:	000811ed 	.word	0x000811ed
   815ac:	000811ed 	.word	0x000811ed
   815b0:	000811ed 	.word	0x000811ed
   815b4:	000811ed 	.word	0x000811ed
   815b8:	000815bd 	.word	0x000815bd
		udd_set_setup_payload( (uint8_t *) &MS_BOS_PACKET,
   815bc:	2121      	movs	r1, #33	; 0x21
   815be:	4843      	ldr	r0, [pc, #268]	; (816cc <udc_process_setup+0x508>)
   815c0:	4b40      	ldr	r3, [pc, #256]	; (816c4 <udc_process_setup+0x500>)
   815c2:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   815c4:	88e3      	ldrh	r3, [r4, #6]
   815c6:	89a2      	ldrh	r2, [r4, #12]
   815c8:	429a      	cmp	r2, r3
   815ca:	f67f aebb 	bls.w	81344 <udc_process_setup+0x180>
			return true;
   815ce:	2501      	movs	r5, #1
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   815d0:	81a3      	strh	r3, [r4, #12]
   815d2:	e614      	b.n	811fe <udc_process_setup+0x3a>
		if (!udd_is_high_speed()) {
   815d4:	4b33      	ldr	r3, [pc, #204]	; (816a4 <udc_process_setup+0x4e0>)
   815d6:	4798      	blx	r3
			if (conf_num >= udc_config.confdev_hs->
   815d8:	4b33      	ldr	r3, [pc, #204]	; (816a8 <udc_process_setup+0x4e4>)
		if (!udd_is_high_speed()) {
   815da:	2800      	cmp	r0, #0
   815dc:	f040 8094 	bne.w	81708 <udc_process_setup+0x544>
			if (conf_num >= udc_config.confdev_hs->
   815e0:	689a      	ldr	r2, [r3, #8]
   815e2:	7c52      	ldrb	r2, [r2, #17]
   815e4:	42aa      	cmp	r2, r5
   815e6:	f67f aef7 	bls.w	813d8 <udc_process_setup+0x214>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   815ea:	691a      	ldr	r2, [r3, #16]
			udd_set_setup_payload(
   815ec:	4b35      	ldr	r3, [pc, #212]	; (816c4 <udc_process_setup+0x500>)
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   815ee:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   815f2:	8841      	ldrh	r1, [r0, #2]
   815f4:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   815f6:	2207      	movs	r2, #7
   815f8:	68a3      	ldr	r3, [r4, #8]
   815fa:	705a      	strb	r2, [r3, #1]
		break;
   815fc:	e7e2      	b.n	815c4 <udc_process_setup+0x400>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   815fe:	4a2a      	ldr	r2, [pc, #168]	; (816a8 <udc_process_setup+0x4e4>)
   81600:	4b30      	ldr	r3, [pc, #192]	; (816c4 <udc_process_setup+0x500>)
   81602:	68d0      	ldr	r0, [r2, #12]
   81604:	7801      	ldrb	r1, [r0, #0]
   81606:	4798      	blx	r3
		break;
   81608:	e7dc      	b.n	815c4 <udc_process_setup+0x400>
		if (udd_is_high_speed()) {
   8160a:	4b26      	ldr	r3, [pc, #152]	; (816a4 <udc_process_setup+0x4e0>)
   8160c:	4798      	blx	r3
			if (conf_num >= udc_config.confdev_hs->
   8160e:	4b26      	ldr	r3, [pc, #152]	; (816a8 <udc_process_setup+0x4e4>)
		if (udd_is_high_speed()) {
   81610:	2800      	cmp	r0, #0
   81612:	f000 8090 	beq.w	81736 <udc_process_setup+0x572>
			if (conf_num >= udc_config.confdev_hs->
   81616:	689a      	ldr	r2, [r3, #8]
   81618:	7c52      	ldrb	r2, [r2, #17]
   8161a:	42aa      	cmp	r2, r5
   8161c:	f67f aedc 	bls.w	813d8 <udc_process_setup+0x214>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81620:	691a      	ldr	r2, [r3, #16]
			udd_set_setup_payload(
   81622:	4b28      	ldr	r3, [pc, #160]	; (816c4 <udc_process_setup+0x500>)
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81624:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   81628:	8841      	ldrh	r1, [r0, #2]
   8162a:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8162c:	2202      	movs	r2, #2
   8162e:	68a3      	ldr	r3, [r4, #8]
   81630:	705a      	strb	r2, [r3, #1]
		break;
   81632:	e7c7      	b.n	815c4 <udc_process_setup+0x400>
		if (!udd_is_high_speed()) {
   81634:	4b1b      	ldr	r3, [pc, #108]	; (816a4 <udc_process_setup+0x4e0>)
   81636:	4798      	blx	r3
   81638:	2800      	cmp	r0, #0
   8163a:	d171      	bne.n	81720 <udc_process_setup+0x55c>
				(uint8_t *) udc_config.confdev_hs,
   8163c:	4a1a      	ldr	r2, [pc, #104]	; (816a8 <udc_process_setup+0x4e4>)
			udd_set_setup_payload(
   8163e:	4b21      	ldr	r3, [pc, #132]	; (816c4 <udc_process_setup+0x500>)
				(uint8_t *) udc_config.confdev_hs,
   81640:	6890      	ldr	r0, [r2, #8]
			udd_set_setup_payload(
   81642:	7801      	ldrb	r1, [r0, #0]
   81644:	4798      	blx	r3
   81646:	e7bd      	b.n	815c4 <udc_process_setup+0x400>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   81648:	2d03      	cmp	r5, #3
   8164a:	f63f adcf 	bhi.w	811ec <udc_process_setup+0x28>
   8164e:	e8df f005 	tbb	[pc, r5]
   81652:	171a      	.short	0x171a
   81654:	0214      	.short	0x0214
   81656:	2120      	movs	r1, #32
   81658:	4b1d      	ldr	r3, [pc, #116]	; (816d0 <udc_process_setup+0x50c>)
		for(i = 0; i < str_length; i++) {
   8165a:	4e1e      	ldr	r6, [pc, #120]	; (816d4 <udc_process_setup+0x510>)
   8165c:	185d      	adds	r5, r3, r1
   8165e:	4632      	mov	r2, r6
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   81660:	f813 0b01 	ldrb.w	r0, [r3], #1
		for(i = 0; i < str_length; i++) {
   81664:	42ab      	cmp	r3, r5
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   81666:	f822 0f02 	strh.w	r0, [r2, #2]!
		for(i = 0; i < str_length; i++) {
   8166a:	d1f9      	bne.n	81660 <udc_process_setup+0x49c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   8166c:	0049      	lsls	r1, r1, #1
   8166e:	3102      	adds	r1, #2
		udd_set_setup_payload(
   81670:	4818      	ldr	r0, [pc, #96]	; (816d4 <udc_process_setup+0x510>)
   81672:	4b14      	ldr	r3, [pc, #80]	; (816c4 <udc_process_setup+0x500>)
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   81674:	7031      	strb	r1, [r6, #0]
		udd_set_setup_payload(
   81676:	4798      	blx	r3
   81678:	e7a4      	b.n	815c4 <udc_process_setup+0x400>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   8167a:	2120      	movs	r1, #32
		str = udc_string_product_name;
   8167c:	4b16      	ldr	r3, [pc, #88]	; (816d8 <udc_process_setup+0x514>)
   8167e:	e7ec      	b.n	8165a <udc_process_setup+0x496>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   81680:	2115      	movs	r1, #21
		str = udc_string_manufacturer_name;
   81682:	4b16      	ldr	r3, [pc, #88]	; (816dc <udc_process_setup+0x518>)
   81684:	e7e9      	b.n	8165a <udc_process_setup+0x496>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   81686:	2104      	movs	r1, #4
   81688:	4815      	ldr	r0, [pc, #84]	; (816e0 <udc_process_setup+0x51c>)
   8168a:	4b0e      	ldr	r3, [pc, #56]	; (816c4 <udc_process_setup+0x500>)
   8168c:	4798      	blx	r3
	if (str_length) {
   8168e:	e799      	b.n	815c4 <udc_process_setup+0x400>
				udc_config.confdev_lsfs->bNumConfigurations) {
   81690:	f8da 2000 	ldr.w	r2, [sl]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81694:	7c52      	ldrb	r2, [r2, #17]
   81696:	429a      	cmp	r2, r3
   81698:	f4bf aeda 	bcs.w	81450 <udc_process_setup+0x28c>
   8169c:	e69c      	b.n	813d8 <udc_process_setup+0x214>
   8169e:	bf00      	nop
   816a0:	00084155 	.word	0x00084155
   816a4:	00084119 	.word	0x00084119
   816a8:	20070960 	.word	0x20070960
   816ac:	20071509 	.word	0x20071509
   816b0:	2007150c 	.word	0x2007150c
   816b4:	0008102d 	.word	0x0008102d
   816b8:	20071504 	.word	0x20071504
   816bc:	000810b9 	.word	0x000810b9
   816c0:	00080fb9 	.word	0x00080fb9
   816c4:	00084185 	.word	0x00084185
   816c8:	000842e9 	.word	0x000842e9
   816cc:	2007020c 	.word	0x2007020c
   816d0:	200701d0 	.word	0x200701d0
   816d4:	2007037c 	.word	0x2007037c
   816d8:	200703dc 	.word	0x200703dc
   816dc:	200703c4 	.word	0x200703c4
   816e0:	200703c0 	.word	0x200703c0
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   816e4:	7920      	ldrb	r0, [r4, #4]
   816e6:	4b32      	ldr	r3, [pc, #200]	; (817b0 <udc_process_setup+0x5ec>)
   816e8:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   816ea:	7920      	ldrb	r0, [r4, #4]
   816ec:	4b31      	ldr	r3, [pc, #196]	; (817b4 <udc_process_setup+0x5f0>)
   816ee:	4798      	blx	r3
		if (udc_reqstd()) {
   816f0:	2800      	cmp	r0, #0
   816f2:	f47f ae27 	bne.w	81344 <udc_process_setup+0x180>
   816f6:	e66f      	b.n	813d8 <udc_process_setup+0x214>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   816f8:	f8da 3004 	ldr.w	r3, [sl, #4]
   816fc:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   81700:	3a01      	subs	r2, #1
   81702:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   81706:	e6cb      	b.n	814a0 <udc_process_setup+0x2dc>
			if (conf_num >= udc_config.confdev_lsfs->
   81708:	681a      	ldr	r2, [r3, #0]
   8170a:	7c52      	ldrb	r2, [r2, #17]
   8170c:	42aa      	cmp	r2, r5
   8170e:	f67f ae63 	bls.w	813d8 <udc_process_setup+0x214>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   81712:	685a      	ldr	r2, [r3, #4]
			udd_set_setup_payload(
   81714:	4b28      	ldr	r3, [pc, #160]	; (817b8 <udc_process_setup+0x5f4>)
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   81716:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   8171a:	8841      	ldrh	r1, [r0, #2]
   8171c:	4798      	blx	r3
   8171e:	e76a      	b.n	815f6 <udc_process_setup+0x432>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   81720:	2010      	movs	r0, #16
   81722:	2102      	movs	r1, #2
   81724:	4b25      	ldr	r3, [pc, #148]	; (817bc <udc_process_setup+0x5f8>)
			udd_set_setup_payload(
   81726:	4d24      	ldr	r5, [pc, #144]	; (817b8 <udc_process_setup+0x5f4>)
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   81728:	681a      	ldr	r2, [r3, #0]
   8172a:	7090      	strb	r0, [r2, #2]
   8172c:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   8172e:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   81730:	7801      	ldrb	r1, [r0, #0]
   81732:	47a8      	blx	r5
   81734:	e746      	b.n	815c4 <udc_process_setup+0x400>
			if (conf_num >= udc_config.confdev_lsfs->
   81736:	681a      	ldr	r2, [r3, #0]
   81738:	7c52      	ldrb	r2, [r2, #17]
   8173a:	42aa      	cmp	r2, r5
   8173c:	f67f ae4c 	bls.w	813d8 <udc_process_setup+0x214>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   81740:	685a      	ldr	r2, [r3, #4]
			udd_set_setup_payload(
   81742:	4b1d      	ldr	r3, [pc, #116]	; (817b8 <udc_process_setup+0x5f4>)
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   81744:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   81748:	8841      	ldrh	r1, [r0, #2]
   8174a:	4798      	blx	r3
   8174c:	e76e      	b.n	8162c <udc_process_setup+0x468>
	if (udc_num_configuration) {
   8174e:	4e1c      	ldr	r6, [pc, #112]	; (817c0 <udc_process_setup+0x5fc>)
   81750:	7832      	ldrb	r2, [r6, #0]
   81752:	b192      	cbz	r2, 8177a <udc_process_setup+0x5b6>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81754:	4f1b      	ldr	r7, [pc, #108]	; (817c4 <udc_process_setup+0x600>)
   81756:	683a      	ldr	r2, [r7, #0]
   81758:	6812      	ldr	r2, [r2, #0]
		for (iface_num = 0;
   8175a:	7912      	ldrb	r2, [r2, #4]
   8175c:	b16a      	cbz	r2, 8177a <udc_process_setup+0x5b6>
   8175e:	4699      	mov	r9, r3
   81760:	4618      	mov	r0, r3
   81762:	f8df 8064 	ldr.w	r8, [pc, #100]	; 817c8 <udc_process_setup+0x604>
			udc_iface_disable(iface_num);
   81766:	47c0      	blx	r8
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81768:	683b      	ldr	r3, [r7, #0]
		for (iface_num = 0;
   8176a:	f109 0901 	add.w	r9, r9, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8176e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   81770:	fa5f f089 	uxtb.w	r0, r9
   81774:	791b      	ldrb	r3, [r3, #4]
   81776:	4283      	cmp	r3, r0
   81778:	d8f5      	bhi.n	81766 <udc_process_setup+0x5a2>
	udc_num_configuration = 0;
   8177a:	2200      	movs	r2, #0
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   8177c:	88a3      	ldrh	r3, [r4, #4]
	udc_device_status =
   8177e:	4913      	ldr	r1, [pc, #76]	; (817cc <udc_process_setup+0x608>)
   81780:	0a1b      	lsrs	r3, r3, #8
   81782:	3b01      	subs	r3, #1
   81784:	800a      	strh	r2, [r1, #0]
	udc_num_configuration = 0;
   81786:	7032      	strb	r2, [r6, #0]
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   81788:	2b03      	cmp	r3, #3
   8178a:	f63f ae25 	bhi.w	813d8 <udc_process_setup+0x214>
   8178e:	e8df f003 	tbb	[pc, r3]
   81792:	080b      	.short	0x080b
   81794:	0205      	.short	0x0205
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   81796:	4b0e      	ldr	r3, [pc, #56]	; (817d0 <udc_process_setup+0x60c>)
   81798:	6123      	str	r3, [r4, #16]
			return true;
   8179a:	e530      	b.n	811fe <udc_process_setup+0x3a>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   8179c:	4b0d      	ldr	r3, [pc, #52]	; (817d4 <udc_process_setup+0x610>)
   8179e:	6123      	str	r3, [r4, #16]
			return true;
   817a0:	e52d      	b.n	811fe <udc_process_setup+0x3a>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   817a2:	4b0d      	ldr	r3, [pc, #52]	; (817d8 <udc_process_setup+0x614>)
   817a4:	6123      	str	r3, [r4, #16]
			return true;
   817a6:	e52a      	b.n	811fe <udc_process_setup+0x3a>
			udd_g_ctrlreq.callback = udd_test_mode_j;
   817a8:	4b0c      	ldr	r3, [pc, #48]	; (817dc <udc_process_setup+0x618>)
   817aa:	6123      	str	r3, [r4, #16]
			return true;
   817ac:	e527      	b.n	811fe <udc_process_setup+0x3a>
   817ae:	bf00      	nop
   817b0:	000846d5 	.word	0x000846d5
   817b4:	000841fd 	.word	0x000841fd
   817b8:	00084185 	.word	0x00084185
   817bc:	20070960 	.word	0x20070960
   817c0:	20071509 	.word	0x20071509
   817c4:	2007150c 	.word	0x2007150c
   817c8:	0008102d 	.word	0x0008102d
   817cc:	20071504 	.word	0x20071504
   817d0:	00085245 	.word	0x00085245
   817d4:	00085231 	.word	0x00085231
   817d8:	00085215 	.word	0x00085215
   817dc:	000851f9 	.word	0x000851f9

000817e0 <naeusb_add_in_handler>:
    return main_b_vendor_enable;
}

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers < 16) {
   817e0:	4907      	ldr	r1, [pc, #28]	; (81800 <naeusb_add_in_handler+0x20>)
   817e2:	780a      	ldrb	r2, [r1, #0]
   817e4:	2a0f      	cmp	r2, #15
   817e6:	d901      	bls.n	817ec <naeusb_add_in_handler+0xc>
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
        return true;
    }
    return false;
   817e8:	2000      	movs	r0, #0
    
}
   817ea:	4770      	bx	lr
   817ec:	4603      	mov	r3, r0
{
   817ee:	b410      	push	{r4}
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   817f0:	1c50      	adds	r0, r2, #1
   817f2:	4c04      	ldr	r4, [pc, #16]	; (81804 <naeusb_add_in_handler+0x24>)
   817f4:	7008      	strb	r0, [r1, #0]
   817f6:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        return true;
   817fa:	2001      	movs	r0, #1
}
   817fc:	bc10      	pop	{r4}
   817fe:	4770      	bx	lr
   81800:	200719d4 	.word	0x200719d4
   81804:	20071994 	.word	0x20071994

00081808 <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers < 16) {
   81808:	4907      	ldr	r1, [pc, #28]	; (81828 <naeusb_add_out_handler+0x20>)
   8180a:	780a      	ldrb	r2, [r1, #0]
   8180c:	2a0f      	cmp	r2, #15
   8180e:	d901      	bls.n	81814 <naeusb_add_out_handler+0xc>
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
        return true;
    }
    return false;
   81810:	2000      	movs	r0, #0
    
}
   81812:	4770      	bx	lr
   81814:	4603      	mov	r3, r0
{
   81816:	b410      	push	{r4}
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   81818:	1c50      	adds	r0, r2, #1
   8181a:	4c04      	ldr	r4, [pc, #16]	; (8182c <naeusb_add_out_handler+0x24>)
   8181c:	7008      	strb	r0, [r1, #0]
   8181e:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        return true;
   81822:	2001      	movs	r0, #1
}
   81824:	bc10      	pop	{r4}
   81826:	4770      	bx	lr
   81828:	200719d5 	.word	0x200719d5
   8182c:	200719d8 	.word	0x200719d8

00081830 <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
	active = false;
	ui_powerdown();
   81830:	4b00      	ldr	r3, [pc, #0]	; (81834 <main_suspend_action+0x4>)
   81832:	4718      	bx	r3
   81834:	0008086d 	.word	0x0008086d

00081838 <main_resume_action>:
}

void main_resume_action(void)
{
    ui_wakeup();
   81838:	4b00      	ldr	r3, [pc, #0]	; (8183c <main_resume_action+0x4>)
   8183a:	4718      	bx	r3
   8183c:	00080871 	.word	0x00080871

00081840 <main_sof_action>:
}

void main_sof_action(void)
{
    if (!main_b_vendor_enable)
   81840:	4b05      	ldr	r3, [pc, #20]	; (81858 <main_sof_action+0x18>)
   81842:	781b      	ldrb	r3, [r3, #0]
   81844:	b903      	cbnz	r3, 81848 <main_sof_action+0x8>
   81846:	4770      	bx	lr
{
   81848:	b510      	push	{r4, lr}
        return;
    ui_process(udd_get_frame_number());
   8184a:	4b04      	ldr	r3, [pc, #16]	; (8185c <main_sof_action+0x1c>)
   8184c:	4798      	blx	r3
}
   8184e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ui_process(udd_get_frame_number());
   81852:	4b03      	ldr	r3, [pc, #12]	; (81860 <main_sof_action+0x20>)
   81854:	4718      	bx	r3
   81856:	bf00      	nop
   81858:	200703fd 	.word	0x200703fd
   8185c:	00084165 	.word	0x00084165
   81860:	00080875 	.word	0x00080875

00081864 <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   81864:	b538      	push	{r3, r4, r5, lr}
    active = true;
    main_b_vendor_enable = true;
   81866:	2401      	movs	r4, #1
   81868:	4d04      	ldr	r5, [pc, #16]	; (8187c <main_vendor_enable+0x18>)
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   8186a:	f44f 6180 	mov.w	r1, #1024	; 0x400
   8186e:	4a04      	ldr	r2, [pc, #16]	; (81880 <main_vendor_enable+0x1c>)
   81870:	4b04      	ldr	r3, [pc, #16]	; (81884 <main_vendor_enable+0x20>)
   81872:	4805      	ldr	r0, [pc, #20]	; (81888 <main_vendor_enable+0x24>)
    main_b_vendor_enable = true;
   81874:	702c      	strb	r4, [r5, #0]
    udi_vendor_bulk_out_run(
   81876:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
   81878:	4620      	mov	r0, r4
   8187a:	bd38      	pop	{r3, r4, r5, pc}
   8187c:	200703fd 	.word	0x200703fd
   81880:	000824f9 	.word	0x000824f9
   81884:	000834bd 	.word	0x000834bd
   81888:	20071594 	.word	0x20071594

0008188c <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
   8188c:	2200      	movs	r2, #0
   8188e:	4b01      	ldr	r3, [pc, #4]	; (81894 <main_vendor_disable+0x8>)
   81890:	701a      	strb	r2, [r3, #0]
}
   81892:	4770      	bx	lr
   81894:	200703fd 	.word	0x200703fd

00081898 <main_setup_out_received>:

bool main_setup_out_received(void)
{
   81898:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
   8189a:	4b0f      	ldr	r3, [pc, #60]	; (818d8 <main_setup_out_received+0x40>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   8189c:	4a0f      	ldr	r2, [pc, #60]	; (818dc <main_setup_out_received+0x44>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   8189e:	88d9      	ldrh	r1, [r3, #6]
    udd_g_ctrlreq.payload = ctrlbuffer;
   818a0:	480f      	ldr	r0, [pc, #60]	; (818e0 <main_setup_out_received+0x48>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   818a2:	2980      	cmp	r1, #128	; 0x80
   818a4:	bf28      	it	cs
   818a6:	2180      	movcs	r1, #128	; 0x80
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   818a8:	7812      	ldrb	r2, [r2, #0]
    udd_g_ctrlreq.payload = ctrlbuffer;
   818aa:	6098      	str	r0, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   818ac:	8199      	strh	r1, [r3, #12]
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   818ae:	b18a      	cbz	r2, 818d4 <main_setup_out_received+0x3c>
   818b0:	4c0c      	ldr	r4, [pc, #48]	; (818e4 <main_setup_out_received+0x4c>)
   818b2:	1e55      	subs	r5, r2, #1
   818b4:	b2ed      	uxtb	r5, r5
   818b6:	1b53      	subs	r3, r2, r5
   818b8:	1f25      	subs	r5, r4, #4
   818ba:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   818be:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   818c2:	e001      	b.n	818c8 <main_setup_out_received+0x30>
   818c4:	42ac      	cmp	r4, r5
   818c6:	d005      	beq.n	818d4 <main_setup_out_received+0x3c>
        handler_status = naeusb_out_request_handlers[i-1]();
   818c8:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   818cc:	4798      	blx	r3
        if (handler_status == true) {
   818ce:	2800      	cmp	r0, #0
   818d0:	d0f8      	beq.n	818c4 <main_setup_out_received+0x2c>
        }
    }

    return false;

}
   818d2:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   818d4:	2000      	movs	r0, #0
}
   818d6:	bd38      	pop	{r3, r4, r5, pc}
   818d8:	20072288 	.word	0x20072288
   818dc:	200719d5 	.word	0x200719d5
   818e0:	20071514 	.word	0x20071514
   818e4:	200719d8 	.word	0x200719d8

000818e8 <main_setup_in_received>:

bool main_setup_in_received(void)
{
   818e8:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   818ea:	4b0b      	ldr	r3, [pc, #44]	; (81918 <main_setup_in_received+0x30>)
   818ec:	781a      	ldrb	r2, [r3, #0]
   818ee:	b18a      	cbz	r2, 81914 <main_setup_in_received+0x2c>
   818f0:	4c0a      	ldr	r4, [pc, #40]	; (8191c <main_setup_in_received+0x34>)
   818f2:	1e55      	subs	r5, r2, #1
   818f4:	b2ed      	uxtb	r5, r5
   818f6:	1b53      	subs	r3, r2, r5
   818f8:	1f25      	subs	r5, r4, #4
   818fa:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   818fe:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   81902:	e001      	b.n	81908 <main_setup_in_received+0x20>
   81904:	42ac      	cmp	r4, r5
   81906:	d005      	beq.n	81914 <main_setup_in_received+0x2c>
        handler_status = naeusb_in_request_handlers[i-1]();
   81908:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   8190c:	4798      	blx	r3
        if (handler_status == true) {
   8190e:	2800      	cmp	r0, #0
   81910:	d0f8      	beq.n	81904 <main_setup_in_received+0x1c>
        }
    }

    return false;

   81912:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   81914:	2000      	movs	r0, #0
   81916:	bd38      	pop	{r3, r4, r5, pc}
   81918:	200719d4 	.word	0x200719d4
   8191c:	20071994 	.word	0x20071994

00081920 <naeusb_setup_out_received>:
}


bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
   81920:	4b04      	ldr	r3, [pc, #16]	; (81934 <naeusb_setup_out_received+0x14>)
   81922:	785a      	ldrb	r2, [r3, #1]
   81924:	2a22      	cmp	r2, #34	; 0x22
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   81926:	bf03      	ittte	eq
   81928:	4a03      	ldreq	r2, [pc, #12]	; (81938 <naeusb_setup_out_received+0x18>)
            return true;
   8192a:	2001      	moveq	r0, #1
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   8192c:	611a      	streq	r2, [r3, #16]
            break;
    }
    return false;
   8192e:	2000      	movne	r0, #0
}
   81930:	4770      	bx	lr
   81932:	bf00      	nop
   81934:	20072288 	.word	0x20072288
   81938:	0008193d 	.word	0x0008193d

0008193c <naeusb_sam_cfg_out>:
{
   8193c:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   8193e:	4b24      	ldr	r3, [pc, #144]	; (819d0 <naeusb_sam_cfg_out+0x94>)
   81940:	789b      	ldrb	r3, [r3, #2]
   81942:	3b01      	subs	r3, #1
   81944:	2b10      	cmp	r3, #16
   81946:	d80a      	bhi.n	8195e <naeusb_sam_cfg_out+0x22>
   81948:	e8df f003 	tbb	[pc, r3]
   8194c:	091c170a 	.word	0x091c170a
   81950:	09090909 	.word	0x09090909
   81954:	09090909 	.word	0x09090909
   81958:	30090909 	.word	0x30090909
   8195c:	3d          	.byte	0x3d
   8195d:	00          	.byte	0x00
}
   8195e:	bd10      	pop	{r4, pc}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   81960:	213e      	movs	r1, #62	; 0x3e
   81962:	2000      	movs	r0, #0
   81964:	4b1b      	ldr	r3, [pc, #108]	; (819d4 <naeusb_sam_cfg_out+0x98>)
   81966:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   81968:	4c1b      	ldr	r4, [pc, #108]	; (819d8 <naeusb_sam_cfg_out+0x9c>)
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8196a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8196c:	2800      	cmp	r0, #0
   8196e:	d0fc      	beq.n	8196a <naeusb_sam_cfg_out+0x2e>
   81970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   81974:	2010      	movs	r0, #16
   81976:	4b19      	ldr	r3, [pc, #100]	; (819dc <naeusb_sam_cfg_out+0xa0>)
   81978:	4718      	bx	r3
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8197a:	2010      	movs	r0, #16
}
   8197c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   81980:	4b17      	ldr	r3, [pc, #92]	; (819e0 <naeusb_sam_cfg_out+0xa4>)
   81982:	4718      	bx	r3
        board_power(0);
   81984:	4b17      	ldr	r3, [pc, #92]	; (819e4 <naeusb_sam_cfg_out+0xa8>)
   81986:	4798      	blx	r3
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   81988:	2201      	movs	r2, #1
   8198a:	210c      	movs	r1, #12
   8198c:	4b16      	ldr	r3, [pc, #88]	; (819e8 <naeusb_sam_cfg_out+0xac>)
   8198e:	4817      	ldr	r0, [pc, #92]	; (819ec <naeusb_sam_cfg_out+0xb0>)
   81990:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   81992:	4b17      	ldr	r3, [pc, #92]	; (819f0 <naeusb_sam_cfg_out+0xb4>)
   81994:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   81996:	4a17      	ldr	r2, [pc, #92]	; (819f4 <naeusb_sam_cfg_out+0xb8>)
   81998:	6853      	ldr	r3, [r2, #4]
   8199a:	0399      	lsls	r1, r3, #14
   8199c:	d4fc      	bmi.n	81998 <naeusb_sam_cfg_out+0x5c>
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   8199e:	6813      	ldr	r3, [r2, #0]
   819a0:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   819a4:	f043 0305 	orr.w	r3, r3, #5
   819a8:	6013      	str	r3, [r2, #0]
        while(1);
   819aa:	e7fe      	b.n	819aa <naeusb_sam_cfg_out+0x6e>
   819ac:	4b10      	ldr	r3, [pc, #64]	; (819f0 <naeusb_sam_cfg_out+0xb4>)
   819ae:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   819b0:	4a10      	ldr	r2, [pc, #64]	; (819f4 <naeusb_sam_cfg_out+0xb8>)
   819b2:	6853      	ldr	r3, [r2, #4]
   819b4:	039b      	lsls	r3, r3, #14
   819b6:	d4fc      	bmi.n	819b2 <naeusb_sam_cfg_out+0x76>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   819b8:	6813      	ldr	r3, [r2, #0]
   819ba:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   819be:	f043 0305 	orr.w	r3, r3, #5
   819c2:	6013      	str	r3, [r2, #0]
        while(1);
   819c4:	e7fe      	b.n	819c4 <naeusb_sam_cfg_out+0x88>
        FPGA_releaselock();
   819c6:	4b0c      	ldr	r3, [pc, #48]	; (819f8 <naeusb_sam_cfg_out+0xbc>)
}
   819c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FPGA_releaselock();
   819cc:	4718      	bx	r3
   819ce:	bf00      	nop
   819d0:	20072288 	.word	0x20072288
   819d4:	0008334d 	.word	0x0008334d
   819d8:	0008339d 	.word	0x0008339d
   819dc:	00083295 	.word	0x00083295
   819e0:	000832f1 	.word	0x000832f1
   819e4:	00080dd9 	.word	0x00080dd9
   819e8:	000834dd 	.word	0x000834dd
   819ec:	400e0a00 	.word	0x400e0a00
   819f0:	000840a9 	.word	0x000840a9
   819f4:	400e1a00 	.word	0x400e1a00
   819f8:	00082a91 	.word	0x00082a91

000819fc <naeusb_setup_in_received>:

bool naeusb_setup_in_received(void)
{
   819fc:	b538      	push	{r3, r4, r5, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
   819fe:	4c15      	ldr	r4, [pc, #84]	; (81a54 <naeusb_setup_in_received+0x58>)
   81a00:	7863      	ldrb	r3, [r4, #1]
   81a02:	2b17      	cmp	r3, #23
   81a04:	d01b      	beq.n	81a3e <naeusb_setup_in_received+0x42>
   81a06:	2b40      	cmp	r3, #64	; 0x40
   81a08:	d117      	bne.n	81a3a <naeusb_setup_in_received+0x3e>
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   81a0a:	f04f 0c20 	mov.w	ip, #32
    strncpy(respbuf, BUILD_TIME, 64);
   81a0e:	4d12      	ldr	r5, [pc, #72]	; (81a58 <naeusb_setup_in_received+0x5c>)
   81a10:	4b12      	ldr	r3, [pc, #72]	; (81a5c <naeusb_setup_in_received+0x60>)
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   81a12:	2237      	movs	r2, #55	; 0x37
    strncpy(respbuf, BUILD_TIME, 64);
   81a14:	e893 0003 	ldmia.w	r3, {r0, r1}
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   81a18:	f885 c008 	strb.w	ip, [r5, #8]
    strncpy(respbuf, BUILD_TIME, 64);
   81a1c:	e885 0003 	stmia.w	r5, {r0, r1}
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   81a20:	4b0f      	ldr	r3, [pc, #60]	; (81a60 <naeusb_setup_in_received+0x64>)
   81a22:	4910      	ldr	r1, [pc, #64]	; (81a64 <naeusb_setup_in_received+0x68>)
   81a24:	f105 0009 	add.w	r0, r5, #9
   81a28:	4798      	blx	r3
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81a2a:	4628      	mov	r0, r5
   81a2c:	4b0e      	ldr	r3, [pc, #56]	; (81a68 <naeusb_setup_in_received+0x6c>)
    udd_g_ctrlreq.payload = respbuf;
   81a2e:	60a5      	str	r5, [r4, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81a30:	4798      	blx	r3
   81a32:	4603      	mov	r3, r0
        case REQ_FW_VERSION:
            return naeusb_fw_version_in();
            break;
        case REQ_BUILD_DATE:
            return naeusb_build_date_in();
   81a34:	2001      	movs	r0, #1
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81a36:	81a3      	strh	r3, [r4, #12]
            break;
    }
    return false;
}
   81a38:	bd38      	pop	{r3, r4, r5, pc}
    switch (udd_g_ctrlreq.req.bRequest) {
   81a3a:	2000      	movs	r0, #0
}
   81a3c:	bd38      	pop	{r3, r4, r5, pc}
    respbuf[0] = FW_VER_MAJOR;
   81a3e:	f240 2501 	movw	r5, #513	; 0x201
    respbuf[2] = FW_VER_DEBUG;
   81a42:	2100      	movs	r1, #0
    udd_g_ctrlreq.payload_size = 3;
   81a44:	2203      	movs	r2, #3
    respbuf[0] = FW_VER_MAJOR;
   81a46:	4b04      	ldr	r3, [pc, #16]	; (81a58 <naeusb_setup_in_received+0x5c>)
    udd_g_ctrlreq.payload_size = 3;
   81a48:	2001      	movs	r0, #1
    respbuf[0] = FW_VER_MAJOR;
   81a4a:	801d      	strh	r5, [r3, #0]
    respbuf[2] = FW_VER_DEBUG;
   81a4c:	7099      	strb	r1, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   81a4e:	60a3      	str	r3, [r4, #8]
    udd_g_ctrlreq.payload_size = 3;
   81a50:	81a2      	strh	r2, [r4, #12]
}
   81a52:	bd38      	pop	{r3, r4, r5, pc}
   81a54:	20072288 	.word	0x20072288
   81a58:	20071a18 	.word	0x20071a18
   81a5c:	0008c944 	.word	0x0008c944
   81a60:	00085e79 	.word	0x00085e79
   81a64:	0008c938 	.word	0x0008c938
   81a68:	00085e1d 	.word	0x00085e1d

00081a6c <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   81a6c:	b510      	push	{r4, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
   81a6e:	4b04      	ldr	r3, [pc, #16]	; (81a80 <naeusb_register_handlers+0x14>)
   81a70:	4804      	ldr	r0, [pc, #16]	; (81a84 <naeusb_register_handlers+0x18>)
   81a72:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   81a74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    naeusb_add_out_handler(naeusb_setup_out_received);
   81a78:	4803      	ldr	r0, [pc, #12]	; (81a88 <naeusb_register_handlers+0x1c>)
   81a7a:	4b04      	ldr	r3, [pc, #16]	; (81a8c <naeusb_register_handlers+0x20>)
   81a7c:	4718      	bx	r3
   81a7e:	bf00      	nop
   81a80:	000817e1 	.word	0x000817e1
   81a84:	000819fd 	.word	0x000819fd
   81a88:	00081921 	.word	0x00081921
   81a8c:	00081809 	.word	0x00081809

00081a90 <usart_setup_out_received>:
    }
}

bool usart_setup_out_received(void)
{
    switch(udd_g_ctrlreq.req.bRequest) {
   81a90:	4a0a      	ldr	r2, [pc, #40]	; (81abc <usart_setup_out_received+0x2c>)
   81a92:	7853      	ldrb	r3, [r2, #1]
   81a94:	2b1b      	cmp	r3, #27
   81a96:	d005      	beq.n	81aa4 <usart_setup_out_received+0x14>
   81a98:	2b31      	cmp	r3, #49	; 0x31
   81a9a:	d00b      	beq.n	81ab4 <usart_setup_out_received+0x24>
   81a9c:	2b1a      	cmp	r3, #26
   81a9e:	d005      	beq.n	81aac <usart_setup_out_received+0x1c>
   81aa0:	2000      	movs	r0, #0
   81aa2:	4770      	bx	lr
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   81aa4:	4b06      	ldr	r3, [pc, #24]	; (81ac0 <usart_setup_out_received+0x30>)
        return true;
   81aa6:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   81aa8:	6113      	str	r3, [r2, #16]
        return true;
   81aaa:	4770      	bx	lr
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   81aac:	4b05      	ldr	r3, [pc, #20]	; (81ac4 <usart_setup_out_received+0x34>)
        return true;
   81aae:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   81ab0:	6113      	str	r3, [r2, #16]
        return true;
   81ab2:	4770      	bx	lr
    case REQ_AVR_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_avr_program_void;
        return true;
#endif
    case REQ_CDC_SETTINGS_EN:
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   81ab4:	4b04      	ldr	r3, [pc, #16]	; (81ac8 <usart_setup_out_received+0x38>)
        return true;
   81ab6:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   81ab8:	6113      	str	r3, [r2, #16]
        break;
    }
    return false;
}
   81aba:	4770      	bx	lr
   81abc:	20072288 	.word	0x20072288
   81ac0:	00081e31 	.word	0x00081e31
   81ac4:	00081e95 	.word	0x00081e95
   81ac8:	00081acd 	.word	0x00081acd

00081acc <naeusb_cdc_settings_out>:
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81acc:	2300      	movs	r3, #0
{
   81ace:	b430      	push	{r4, r5}
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81ad0:	4a11      	ldr	r2, [pc, #68]	; (81b18 <naeusb_cdc_settings_out+0x4c>)
		if (port == 0) break;
   81ad2:	4d12      	ldr	r5, [pc, #72]	; (81b1c <naeusb_cdc_settings_out+0x50>)
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81ad4:	f8b2 c002 	ldrh.w	ip, [r2, #2]
		if (port == 0) break;
   81ad8:	4c11      	ldr	r4, [pc, #68]	; (81b20 <naeusb_cdc_settings_out+0x54>)
   81ada:	b133      	cbz	r3, 81aea <naeusb_cdc_settings_out+0x1e>
   81adc:	2b01      	cmp	r3, #1
   81ade:	d018      	beq.n	81b12 <naeusb_cdc_settings_out+0x46>
    for (uint8_t i = 0; i < 4; i++) {
   81ae0:	3301      	adds	r3, #1
   81ae2:	2b04      	cmp	r3, #4
   81ae4:	d1f9      	bne.n	81ada <naeusb_cdc_settings_out+0xe>
}
   81ae6:	bc30      	pop	{r4, r5}
   81ae8:	4770      	bx	lr
		if (port == 0) break;
   81aea:	4629      	mov	r1, r5
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81aec:	fa4c f203 	asr.w	r2, ip, r3
   81af0:	f012 0201 	ands.w	r2, r2, #1
   81af4:	d006      	beq.n	81b04 <naeusb_cdc_settings_out+0x38>
                driver->cdc_settings_change = 1;
   81af6:	f891 229c 	ldrb.w	r2, [r1, #668]	; 0x29c
   81afa:	f042 0208 	orr.w	r2, r2, #8
   81afe:	f881 229c 	strb.w	r2, [r1, #668]	; 0x29c
   81b02:	e7ed      	b.n	81ae0 <naeusb_cdc_settings_out+0x14>
                driver->cdc_settings_change = 0;
   81b04:	f891 029c 	ldrb.w	r0, [r1, #668]	; 0x29c
   81b08:	f362 00c3 	bfi	r0, r2, #3, #1
   81b0c:	f881 029c 	strb.w	r0, [r1, #668]	; 0x29c
   81b10:	e7e6      	b.n	81ae0 <naeusb_cdc_settings_out+0x14>
		if (port == 0) break;
   81b12:	4621      	mov	r1, r4
   81b14:	e7ea      	b.n	81aec <naeusb_cdc_settings_out+0x20>
   81b16:	bf00      	nop
   81b18:	20072288 	.word	0x20072288
   81b1c:	20070400 	.word	0x20070400
   81b20:	200706a0 	.word	0x200706a0

00081b24 <usart_enableIO>:
{
   81b24:	b510      	push	{r4, lr}
    if (driver->usart_id == 0) {
   81b26:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
   81b2a:	b113      	cbz	r3, 81b32 <usart_enableIO+0xe>
    } else if (driver->usart_id == 1) {
   81b2c:	2b01      	cmp	r3, #1
   81b2e:	d016      	beq.n	81b5e <usart_enableIO+0x3a>
}
   81b30:	bd10      	pop	{r4, pc}
   81b32:	4b16      	ldr	r3, [pc, #88]	; (81b8c <usart_enableIO+0x68>)
   81b34:	2011      	movs	r0, #17
   81b36:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   81b38:	4c15      	ldr	r4, [pc, #84]	; (81b90 <usart_enableIO+0x6c>)
   81b3a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b3e:	200a      	movs	r0, #10
   81b40:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   81b42:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b46:	200b      	movs	r0, #11
   81b48:	47a0      	blx	r4
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81b4a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81b4e:	2130      	movs	r1, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81b50:	4b10      	ldr	r3, [pc, #64]	; (81b94 <usart_enableIO+0x70>)
   81b52:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81b56:	f883 1311 	strb.w	r1, [r3, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81b5a:	601a      	str	r2, [r3, #0]
}
   81b5c:	bd10      	pop	{r4, pc}
   81b5e:	4b0b      	ldr	r3, [pc, #44]	; (81b8c <usart_enableIO+0x68>)
   81b60:	2012      	movs	r0, #18
   81b62:	4798      	blx	r3
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
   81b64:	4c0a      	ldr	r4, [pc, #40]	; (81b90 <usart_enableIO+0x6c>)
   81b66:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b6a:	200c      	movs	r0, #12
   81b6c:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
   81b6e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81b72:	200d      	movs	r0, #13
   81b74:	47a0      	blx	r4
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81b76:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81b7a:	2130      	movs	r1, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81b7c:	4b05      	ldr	r3, [pc, #20]	; (81b94 <usart_enableIO+0x70>)
   81b7e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81b82:	f883 1312 	strb.w	r1, [r3, #786]	; 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81b86:	601a      	str	r2, [r3, #0]
}
   81b88:	bd10      	pop	{r4, pc}
   81b8a:	bf00      	nop
   81b8c:	000833e1 	.word	0x000833e1
   81b90:	000835ed 	.word	0x000835ed
   81b94:	e000e100 	.word	0xe000e100

00081b98 <generic_isr>:
{
   81b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	status = usart_get_status(driver->usart);
   81b9c:	4b1a      	ldr	r3, [pc, #104]	; (81c08 <generic_isr+0x70>)
{
   81b9e:	4604      	mov	r4, r0
	status = usart_get_status(driver->usart);
   81ba0:	6800      	ldr	r0, [r0, #0]
   81ba2:	4798      	blx	r3
	if (status & US_CSR_RXRDY){
   81ba4:	07c1      	lsls	r1, r0, #31
	status = usart_get_status(driver->usart);
   81ba6:	4605      	mov	r5, r0
	if (status & US_CSR_RXRDY){
   81ba8:	d403      	bmi.n	81bb2 <generic_isr+0x1a>
	if (status & US_CSR_TXRDY){
   81baa:	07ab      	lsls	r3, r5, #30
   81bac:	d415      	bmi.n	81bda <generic_isr+0x42>
}
   81bae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
   81bb2:	4620      	mov	r0, r4
   81bb4:	f850 3b1c 	ldr.w	r3, [r0], #28
		add_to_circ_buf(&driver->rxbuf, temp, false);
   81bb8:	2200      	movs	r2, #0
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
   81bba:	699e      	ldr	r6, [r3, #24]
		add_to_circ_buf(&driver->rxbuf, temp, false);
   81bbc:	4f13      	ldr	r7, [pc, #76]	; (81c0c <generic_isr+0x74>)
   81bbe:	b2f6      	uxtb	r6, r6
   81bc0:	4631      	mov	r1, r6
   81bc2:	47b8      	blx	r7
        if (driver->cdc_enabled)
   81bc4:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   81bc8:	075a      	lsls	r2, r3, #29
   81bca:	d5ee      	bpl.n	81baa <generic_isr+0x12>
            add_to_circ_buf(&driver->rx_cdc_buf, temp, false);
   81bcc:	2200      	movs	r2, #0
   81bce:	4631      	mov	r1, r6
   81bd0:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   81bd4:	47b8      	blx	r7
	if (status & US_CSR_TXRDY){
   81bd6:	07ab      	lsls	r3, r5, #30
   81bd8:	d5e9      	bpl.n	81bae <generic_isr+0x16>
		if (circ_buf_has_char(&driver->txbuf)){
   81bda:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
   81bde:	4628      	mov	r0, r5
   81be0:	4b0b      	ldr	r3, [pc, #44]	; (81c10 <generic_isr+0x78>)
   81be2:	4798      	blx	r3
   81be4:	b148      	cbz	r0, 81bfa <generic_isr+0x62>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
   81be6:	4628      	mov	r0, r5
   81be8:	4b0a      	ldr	r3, [pc, #40]	; (81c14 <generic_isr+0x7c>)
   81bea:	6824      	ldr	r4, [r4, #0]
   81bec:	4798      	blx	r3
   81bee:	4b0a      	ldr	r3, [pc, #40]	; (81c18 <generic_isr+0x80>)
   81bf0:	4601      	mov	r1, r0
   81bf2:	4620      	mov	r0, r4
}
   81bf4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
   81bf8:	4718      	bx	r3
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
   81bfa:	6820      	ldr	r0, [r4, #0]
   81bfc:	2102      	movs	r1, #2
}
   81bfe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
   81c02:	4b06      	ldr	r3, [pc, #24]	; (81c1c <generic_isr+0x84>)
   81c04:	4718      	bx	r3
   81c06:	bf00      	nop
   81c08:	00082f8d 	.word	0x00082f8d
   81c0c:	00080141 	.word	0x00080141
   81c10:	0008018d 	.word	0x0008018d
   81c14:	0008016d 	.word	0x0008016d
   81c18:	00082f91 	.word	0x00082f91
   81c1c:	00082f85 	.word	0x00082f85

00081c20 <USART0_Handler>:
	generic_isr(&usart0_driver);
   81c20:	4801      	ldr	r0, [pc, #4]	; (81c28 <USART0_Handler+0x8>)
   81c22:	4b02      	ldr	r3, [pc, #8]	; (81c2c <USART0_Handler+0xc>)
   81c24:	4718      	bx	r3
   81c26:	bf00      	nop
   81c28:	20070400 	.word	0x20070400
   81c2c:	00081b99 	.word	0x00081b99

00081c30 <USART1_Handler>:
	generic_isr(&usart1_driver);
   81c30:	4801      	ldr	r0, [pc, #4]	; (81c38 <USART1_Handler+0x8>)
   81c32:	4b02      	ldr	r3, [pc, #8]	; (81c3c <USART1_Handler+0xc>)
   81c34:	4718      	bx	r3
   81c36:	bf00      	nop
   81c38:	200706a0 	.word	0x200706a0
   81c3c:	00081b99 	.word	0x00081b99

00081c40 <ctrl_usart_in>:
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81c40:	4a17      	ldr	r2, [pc, #92]	; (81ca0 <ctrl_usart_in+0x60>)
   81c42:	8853      	ldrh	r3, [r2, #2]
		if (port == 0) break;
   81c44:	0a19      	lsrs	r1, r3, #8
   81c46:	d003      	beq.n	81c50 <ctrl_usart_in+0x10>
   81c48:	2901      	cmp	r1, #1
   81c4a:	d026      	beq.n	81c9a <ctrl_usart_in+0x5a>
        return false;
   81c4c:	2000      	movs	r0, #0
}
   81c4e:	4770      	bx	lr
		if (port == 0) break;
   81c50:	4814      	ldr	r0, [pc, #80]	; (81ca4 <ctrl_usart_in+0x64>)
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   81c52:	b2db      	uxtb	r3, r3
   81c54:	2b14      	cmp	r3, #20
{
   81c56:	b510      	push	{r4, lr}
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   81c58:	d017      	beq.n	81c8a <ctrl_usart_in+0x4a>
   81c5a:	2b18      	cmp	r3, #24
   81c5c:	d005      	beq.n	81c6a <ctrl_usart_in+0x2a>
   81c5e:	f1a3 0010 	sub.w	r0, r3, #16
   81c62:	fab0 f080 	clz	r0, r0
   81c66:	0940      	lsrs	r0, r0, #5
}
   81c68:	bd10      	pop	{r4, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
   81c6a:	88d3      	ldrh	r3, [r2, #6]
   81c6c:	2b03      	cmp	r3, #3
   81c6e:	d90a      	bls.n	81c86 <ctrl_usart_in+0x46>
        udd_g_ctrlreq.payload_size = 4;
   81c70:	2104      	movs	r1, #4
        udd_g_ctrlreq.payload = respbuf;
   81c72:	4c0d      	ldr	r4, [pc, #52]	; (81ca8 <ctrl_usart_in+0x68>)
        cnt = circ_buf_count(&driver->txbuf);
   81c74:	4b0d      	ldr	r3, [pc, #52]	; (81cac <ctrl_usart_in+0x6c>)
   81c76:	30f0      	adds	r0, #240	; 0xf0
        udd_g_ctrlreq.payload = respbuf;
   81c78:	6094      	str	r4, [r2, #8]
        udd_g_ctrlreq.payload_size = 4;
   81c7a:	8191      	strh	r1, [r2, #12]
        cnt = circ_buf_count(&driver->txbuf);
   81c7c:	4798      	blx	r3
   81c7e:	4603      	mov	r3, r0
        return true;
   81c80:	2001      	movs	r0, #1
        word2buf(respbuf, cnt);
   81c82:	6023      	str	r3, [r4, #0]
}
   81c84:	bd10      	pop	{r4, pc}
        return false;
   81c86:	2000      	movs	r0, #0
}
   81c88:	bd10      	pop	{r4, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
   81c8a:	88d3      	ldrh	r3, [r2, #6]
   81c8c:	2b03      	cmp	r3, #3
   81c8e:	d9fa      	bls.n	81c86 <ctrl_usart_in+0x46>
        udd_g_ctrlreq.payload_size = 4;
   81c90:	2104      	movs	r1, #4
        udd_g_ctrlreq.payload = respbuf;
   81c92:	4c05      	ldr	r4, [pc, #20]	; (81ca8 <ctrl_usart_in+0x68>)
        cnt = circ_buf_count(&driver->rxbuf);
   81c94:	4b05      	ldr	r3, [pc, #20]	; (81cac <ctrl_usart_in+0x6c>)
   81c96:	301c      	adds	r0, #28
   81c98:	e7ee      	b.n	81c78 <ctrl_usart_in+0x38>
		if (port == 0) break;
   81c9a:	4805      	ldr	r0, [pc, #20]	; (81cb0 <ctrl_usart_in+0x70>)
   81c9c:	e7d9      	b.n	81c52 <ctrl_usart_in+0x12>
   81c9e:	bf00      	nop
   81ca0:	20072288 	.word	0x20072288
   81ca4:	20070400 	.word	0x20070400
   81ca8:	20071a18 	.word	0x20071a18
   81cac:	00080199 	.word	0x00080199
   81cb0:	200706a0 	.word	0x200706a0

00081cb4 <configure_usart>:
{
   81cb4:	b538      	push	{r3, r4, r5, lr}
    switch(stop_bits)
   81cb6:	2a01      	cmp	r2, #1
{
   81cb8:	4604      	mov	r4, r0
   81cba:	f89d 5010 	ldrb.w	r5, [sp, #16]
    driver->usartopts.baudrate = baud;
   81cbe:	6041      	str	r1, [r0, #4]
    switch(stop_bits)
   81cc0:	d00e      	beq.n	81ce0 <configure_usart+0x2c>
   81cc2:	2a02      	cmp	r2, #2
   81cc4:	d008      	beq.n	81cd8 <configure_usart+0x24>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   81cc6:	2200      	movs	r2, #0
   81cc8:	6102      	str	r2, [r0, #16]
    switch(parity)
   81cca:	3b01      	subs	r3, #1
   81ccc:	2b03      	cmp	r3, #3
   81cce:	d848      	bhi.n	81d62 <configure_usart+0xae>
   81cd0:	e8df f003 	tbb	[pc, r3]
   81cd4:	0a3d3a32 	.word	0x0a3d3a32
            driver->usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   81cd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81cdc:	6102      	str	r2, [r0, #16]
            break;
   81cde:	e7f4      	b.n	81cca <configure_usart+0x16>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   81ce0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81ce4:	6102      	str	r2, [r0, #16]
            break;
   81ce6:	e7f0      	b.n	81cca <configure_usart+0x16>
            driver->usartopts.parity_type = US_MR_PAR_SPACE;
   81ce8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81cec:	60e3      	str	r3, [r4, #12]
    switch(dbits)
   81cee:	2d06      	cmp	r5, #6
   81cf0:	d027      	beq.n	81d42 <configure_usart+0x8e>
   81cf2:	2d07      	cmp	r5, #7
   81cf4:	d032      	beq.n	81d5c <configure_usart+0xa8>
   81cf6:	2d05      	cmp	r5, #5
   81cf8:	d02d      	beq.n	81d56 <configure_usart+0xa2>
            driver->usartopts.char_length = US_MR_CHRL_8_BIT;
   81cfa:	23c0      	movs	r3, #192	; 0xc0
   81cfc:	60a3      	str	r3, [r4, #8]
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   81cfe:	2200      	movs	r2, #0
    usart_enableIO(driver);
   81d00:	4620      	mov	r0, r4
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   81d02:	6162      	str	r2, [r4, #20]
    usart_enableIO(driver);
   81d04:	4b19      	ldr	r3, [pc, #100]	; (81d6c <configure_usart+0xb8>)
   81d06:	4798      	blx	r3
    driver->enabled = 1;
   81d08:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
   81d0c:	4d18      	ldr	r5, [pc, #96]	; (81d70 <configure_usart+0xbc>)
    driver->enabled = 1;
   81d0e:	f043 0302 	orr.w	r3, r3, #2
   81d12:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
   81d16:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   81d1a:	47a8      	blx	r5
    init_circ_buf(&driver->rxbuf);
   81d1c:	f104 001c 	add.w	r0, r4, #28
   81d20:	47a8      	blx	r5
    init_circ_buf(&driver->rx_cdc_buf);
   81d22:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   81d26:	47a8      	blx	r5
    usart_init_rs232(driver->usart, &driver->usartopts, sysclk_get_cpu_hz());
   81d28:	4621      	mov	r1, r4
   81d2a:	4a12      	ldr	r2, [pc, #72]	; (81d74 <configure_usart+0xc0>)
   81d2c:	4b12      	ldr	r3, [pc, #72]	; (81d78 <configure_usart+0xc4>)
   81d2e:	f851 0b04 	ldr.w	r0, [r1], #4
   81d32:	4798      	blx	r3
}
   81d34:	2001      	movs	r0, #1
   81d36:	bd38      	pop	{r3, r4, r5, pc}
            driver->usartopts.parity_type = US_MR_PAR_ODD;
   81d38:	f44f 7300 	mov.w	r3, #512	; 0x200
    switch(dbits)
   81d3c:	2d06      	cmp	r5, #6
            driver->usartopts.parity_type = US_MR_PAR_ODD;
   81d3e:	60e3      	str	r3, [r4, #12]
    switch(dbits)
   81d40:	d1d7      	bne.n	81cf2 <configure_usart+0x3e>
            driver->usartopts.char_length = US_MR_CHRL_6_BIT;
   81d42:	2340      	movs	r3, #64	; 0x40
   81d44:	60a3      	str	r3, [r4, #8]
            break;
   81d46:	e7da      	b.n	81cfe <configure_usart+0x4a>
            driver->usartopts.parity_type = US_MR_PAR_EVEN;
   81d48:	2300      	movs	r3, #0
   81d4a:	60e3      	str	r3, [r4, #12]
            break;
   81d4c:	e7cf      	b.n	81cee <configure_usart+0x3a>
            driver->usartopts.parity_type = US_MR_PAR_MARK;
   81d4e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81d52:	60e3      	str	r3, [r4, #12]
            break;
   81d54:	e7cb      	b.n	81cee <configure_usart+0x3a>
            driver->usartopts.char_length = US_MR_CHRL_5_BIT;
   81d56:	2300      	movs	r3, #0
   81d58:	60a3      	str	r3, [r4, #8]
            break;
   81d5a:	e7d0      	b.n	81cfe <configure_usart+0x4a>
            driver->usartopts.char_length = US_MR_CHRL_7_BIT;
   81d5c:	2380      	movs	r3, #128	; 0x80
   81d5e:	60a3      	str	r3, [r4, #8]
            break;
   81d60:	e7cd      	b.n	81cfe <configure_usart+0x4a>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   81d62:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81d66:	60e3      	str	r3, [r4, #12]
            break;
   81d68:	e7c1      	b.n	81cee <configure_usart+0x3a>
   81d6a:	bf00      	nop
   81d6c:	00081b25 	.word	0x00081b25
   81d70:	00080135 	.word	0x00080135
   81d74:	0501bd00 	.word	0x0501bd00
   81d78:	00082ef1 	.word	0x00082ef1

00081d7c <ctrl_usart_out>:
{
   81d7c:	b570      	push	{r4, r5, r6, lr}
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81d7e:	4c21      	ldr	r4, [pc, #132]	; (81e04 <ctrl_usart_out+0x88>)
{
   81d80:	b082      	sub	sp, #8
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81d82:	8863      	ldrh	r3, [r4, #2]
		if (port == 0) break;
   81d84:	0a1a      	lsrs	r2, r3, #8
   81d86:	d003      	beq.n	81d90 <ctrl_usart_out+0x14>
   81d88:	2a01      	cmp	r2, #1
   81d8a:	d038      	beq.n	81dfe <ctrl_usart_out+0x82>
}
   81d8c:	b002      	add	sp, #8
   81d8e:	bd70      	pop	{r4, r5, r6, pc}
		if (port == 0) break;
   81d90:	4d1d      	ldr	r5, [pc, #116]	; (81e08 <ctrl_usart_out+0x8c>)
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   81d92:	b2db      	uxtb	r3, r3
   81d94:	2b11      	cmp	r3, #17
   81d96:	d015      	beq.n	81dc4 <ctrl_usart_out+0x48>
   81d98:	2b12      	cmp	r3, #18
   81d9a:	d023      	beq.n	81de4 <ctrl_usart_out+0x68>
   81d9c:	2b10      	cmp	r3, #16
   81d9e:	d1f5      	bne.n	81d8c <ctrl_usart_out+0x10>
        if (udd_g_ctrlreq.req.wLength != 7) return;
   81da0:	88e3      	ldrh	r3, [r4, #6]
   81da2:	2b07      	cmp	r3, #7
   81da4:	d1f2      	bne.n	81d8c <ctrl_usart_out+0x10>
        buf2word(baud, udd_g_ctrlreq.payload);
   81da6:	68a2      	ldr	r2, [r4, #8]
		usart_enableIO(driver);
   81da8:	4628      	mov	r0, r5
   81daa:	4b18      	ldr	r3, [pc, #96]	; (81e0c <ctrl_usart_out+0x90>)
        buf2word(baud, udd_g_ctrlreq.payload);
   81dac:	6816      	ldr	r6, [r2, #0]
		usart_enableIO(driver);
   81dae:	4798      	blx	r3
        configure_usart(driver, baud, udd_g_ctrlreq.payload[4], 
   81db0:	68a0      	ldr	r0, [r4, #8]
   81db2:	4631      	mov	r1, r6
   81db4:	7943      	ldrb	r3, [r0, #5]
   81db6:	7902      	ldrb	r2, [r0, #4]
   81db8:	7980      	ldrb	r0, [r0, #6]
   81dba:	4c15      	ldr	r4, [pc, #84]	; (81e10 <ctrl_usart_out+0x94>)
   81dbc:	9000      	str	r0, [sp, #0]
   81dbe:	4628      	mov	r0, r5
   81dc0:	47a0      	blx	r4
        return ;
   81dc2:	e7e3      	b.n	81d8c <ctrl_usart_out+0x10>
		usart_enableIO(driver);
   81dc4:	4628      	mov	r0, r5
   81dc6:	4b11      	ldr	r3, [pc, #68]	; (81e0c <ctrl_usart_out+0x90>)
   81dc8:	4798      	blx	r3
        usart_enable_rx(driver->usart);
   81dca:	6828      	ldr	r0, [r5, #0]
   81dcc:	4b11      	ldr	r3, [pc, #68]	; (81e14 <ctrl_usart_out+0x98>)
   81dce:	4798      	blx	r3
        usart_enable_tx(driver->usart);
   81dd0:	6828      	ldr	r0, [r5, #0]
   81dd2:	4b11      	ldr	r3, [pc, #68]	; (81e18 <ctrl_usart_out+0x9c>)
   81dd4:	4798      	blx	r3
        usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   81dd6:	2101      	movs	r1, #1
   81dd8:	6828      	ldr	r0, [r5, #0]
   81dda:	4b10      	ldr	r3, [pc, #64]	; (81e1c <ctrl_usart_out+0xa0>)
}
   81ddc:	b002      	add	sp, #8
   81dde:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   81de2:	4718      	bx	r3
        usart_disable_rx(driver->usart);
   81de4:	6828      	ldr	r0, [r5, #0]
   81de6:	4b0e      	ldr	r3, [pc, #56]	; (81e20 <ctrl_usart_out+0xa4>)
   81de8:	4798      	blx	r3
        usart_disable_tx(driver->usart);
   81dea:	6828      	ldr	r0, [r5, #0]
   81dec:	4b0d      	ldr	r3, [pc, #52]	; (81e24 <ctrl_usart_out+0xa8>)
   81dee:	4798      	blx	r3
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   81df0:	2103      	movs	r1, #3
   81df2:	6828      	ldr	r0, [r5, #0]
   81df4:	4b0c      	ldr	r3, [pc, #48]	; (81e28 <ctrl_usart_out+0xac>)
}
   81df6:	b002      	add	sp, #8
   81df8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   81dfc:	4718      	bx	r3
		if (port == 0) break;
   81dfe:	4d0b      	ldr	r5, [pc, #44]	; (81e2c <ctrl_usart_out+0xb0>)
   81e00:	e7c7      	b.n	81d92 <ctrl_usart_out+0x16>
   81e02:	bf00      	nop
   81e04:	20072288 	.word	0x20072288
   81e08:	20070400 	.word	0x20070400
   81e0c:	00081b25 	.word	0x00081b25
   81e10:	00081cb5 	.word	0x00081cb5
   81e14:	00082f71 	.word	0x00082f71
   81e18:	00082f61 	.word	0x00082f61
   81e1c:	00082f81 	.word	0x00082f81
   81e20:	00082f79 	.word	0x00082f79
   81e24:	00082f69 	.word	0x00082f69
   81e28:	00082f85 	.word	0x00082f85
   81e2c:	200706a0 	.word	0x200706a0

00081e30 <ctrl_usart_cb>:
	ctrl_usart_out();
   81e30:	4b00      	ldr	r3, [pc, #0]	; (81e34 <ctrl_usart_cb+0x4>)
   81e32:	4718      	bx	r3
   81e34:	00081d7d 	.word	0x00081d7d

00081e38 <usart_driver_putchar>:
{
   81e38:	b570      	push	{r4, r5, r6, lr}
   81e3a:	4604      	mov	r4, r0
    add_to_circ_buf(&driver->txbuf, data, false);
   81e3c:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
   81e40:	2200      	movs	r2, #0
   81e42:	4628      	mov	r0, r5
   81e44:	4b0d      	ldr	r3, [pc, #52]	; (81e7c <usart_driver_putchar+0x44>)
   81e46:	4798      	blx	r3
	if ((usart_get_interrupt_mask(driver->usart) & US_CSR_TXRDY) == 0) {
   81e48:	6820      	ldr	r0, [r4, #0]
   81e4a:	4b0d      	ldr	r3, [pc, #52]	; (81e80 <usart_driver_putchar+0x48>)
   81e4c:	4798      	blx	r3
   81e4e:	0782      	lsls	r2, r0, #30
   81e50:	d500      	bpl.n	81e54 <usart_driver_putchar+0x1c>
}
   81e52:	bd70      	pop	{r4, r5, r6, pc}
		if ((usart_get_status(driver->usart) & US_CSR_TXRDY))
   81e54:	4b0b      	ldr	r3, [pc, #44]	; (81e84 <usart_driver_putchar+0x4c>)
   81e56:	6820      	ldr	r0, [r4, #0]
   81e58:	4798      	blx	r3
   81e5a:	0783      	lsls	r3, r0, #30
   81e5c:	d405      	bmi.n	81e6a <usart_driver_putchar+0x32>
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
   81e5e:	6820      	ldr	r0, [r4, #0]
   81e60:	2102      	movs	r1, #2
}
   81e62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
   81e66:	4b08      	ldr	r3, [pc, #32]	; (81e88 <usart_driver_putchar+0x50>)
   81e68:	4718      	bx	r3
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));
   81e6a:	4628      	mov	r0, r5
   81e6c:	4b07      	ldr	r3, [pc, #28]	; (81e8c <usart_driver_putchar+0x54>)
   81e6e:	6825      	ldr	r5, [r4, #0]
   81e70:	4798      	blx	r3
   81e72:	4b07      	ldr	r3, [pc, #28]	; (81e90 <usart_driver_putchar+0x58>)
   81e74:	4601      	mov	r1, r0
   81e76:	4628      	mov	r0, r5
   81e78:	4798      	blx	r3
   81e7a:	e7f0      	b.n	81e5e <usart_driver_putchar+0x26>
   81e7c:	00080141 	.word	0x00080141
   81e80:	00082f89 	.word	0x00082f89
   81e84:	00082f8d 	.word	0x00082f8d
   81e88:	00082f81 	.word	0x00082f81
   81e8c:	0008016d 	.word	0x0008016d
   81e90:	00082f91 	.word	0x00082f91

00081e94 <ctrl_usart_cb_data>:
{		
   81e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81e96:	4d0d      	ldr	r5, [pc, #52]	; (81ecc <ctrl_usart_cb_data+0x38>)
   81e98:	886b      	ldrh	r3, [r5, #2]
		if (port == 0) break;
   81e9a:	0a1b      	lsrs	r3, r3, #8
   81e9c:	d014      	beq.n	81ec8 <ctrl_usart_cb_data+0x34>
   81e9e:	2b01      	cmp	r3, #1
   81ea0:	d000      	beq.n	81ea4 <ctrl_usart_cb_data+0x10>
}
   81ea2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (port == 0) break;
   81ea4:	4f0a      	ldr	r7, [pc, #40]	; (81ed0 <ctrl_usart_cb_data+0x3c>)
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   81ea6:	88eb      	ldrh	r3, [r5, #6]
   81ea8:	89aa      	ldrh	r2, [r5, #12]
   81eaa:	429a      	cmp	r2, r3
   81eac:	d3f9      	bcc.n	81ea2 <ctrl_usart_cb_data+0xe>
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81eae:	2b00      	cmp	r3, #0
   81eb0:	d0f7      	beq.n	81ea2 <ctrl_usart_cb_data+0xe>
   81eb2:	2400      	movs	r4, #0
   81eb4:	4e07      	ldr	r6, [pc, #28]	; (81ed4 <ctrl_usart_cb_data+0x40>)
		usart_driver_putchar(driver, udd_g_ctrlreq.payload[i]);
   81eb6:	68ab      	ldr	r3, [r5, #8]
   81eb8:	4638      	mov	r0, r7
   81eba:	5d19      	ldrb	r1, [r3, r4]
   81ebc:	47b0      	blx	r6
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81ebe:	88eb      	ldrh	r3, [r5, #6]
   81ec0:	3401      	adds	r4, #1
   81ec2:	42a3      	cmp	r3, r4
   81ec4:	dcf7      	bgt.n	81eb6 <ctrl_usart_cb_data+0x22>
}
   81ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (port == 0) break;
   81ec8:	4f03      	ldr	r7, [pc, #12]	; (81ed8 <ctrl_usart_cb_data+0x44>)
   81eca:	e7ec      	b.n	81ea6 <ctrl_usart_cb_data+0x12>
   81ecc:	20072288 	.word	0x20072288
   81ed0:	200706a0 	.word	0x200706a0
   81ed4:	00081e39 	.word	0x00081e39
   81ed8:	20070400 	.word	0x20070400

00081edc <naeusart_register_handlers>:
{
   81edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81ee0:	2400      	movs	r4, #0
   81ee2:	4f20      	ldr	r7, [pc, #128]	; (81f64 <naeusart_register_handlers+0x88>)
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
   81ee4:	4e20      	ldr	r6, [pc, #128]	; (81f68 <naeusart_register_handlers+0x8c>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81ee6:	4d21      	ldr	r5, [pc, #132]	; (81f6c <naeusart_register_handlers+0x90>)
		if (port == 0) break;
   81ee8:	b2e3      	uxtb	r3, r4
   81eea:	b164      	cbz	r4, 81f06 <naeusart_register_handlers+0x2a>
   81eec:	2b01      	cmp	r3, #1
   81eee:	d036      	beq.n	81f5e <naeusart_register_handlers+0x82>
	for (uint8_t i = 0; i < 4; i++) {
   81ef0:	3401      	adds	r4, #1
   81ef2:	2c04      	cmp	r4, #4
   81ef4:	d1f8      	bne.n	81ee8 <naeusart_register_handlers+0xc>
    naeusb_add_in_handler(usart_setup_in_received);
   81ef6:	4b1e      	ldr	r3, [pc, #120]	; (81f70 <naeusart_register_handlers+0x94>)
   81ef8:	481e      	ldr	r0, [pc, #120]	; (81f74 <naeusart_register_handlers+0x98>)
   81efa:	4798      	blx	r3
}
   81efc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    naeusb_add_out_handler(usart_setup_out_received);
   81f00:	481d      	ldr	r0, [pc, #116]	; (81f78 <naeusart_register_handlers+0x9c>)
   81f02:	4b1e      	ldr	r3, [pc, #120]	; (81f7c <naeusart_register_handlers+0xa0>)
   81f04:	4718      	bx	r3
		if (port == 0) break;
   81f06:	4b1e      	ldr	r3, [pc, #120]	; (81f80 <naeusart_register_handlers+0xa4>)
    if (driver->usart_id == 0) {
   81f08:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
   81f0c:	b1a3      	cbz	r3, 81f38 <naeusart_register_handlers+0x5c>
    } else if (driver->usart_id == 1) {
   81f0e:	2b01      	cmp	r3, #1
   81f10:	d1ee      	bne.n	81ef0 <naeusart_register_handlers+0x14>
   81f12:	2012      	movs	r0, #18
   81f14:	47b8      	blx	r7
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
   81f16:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f1a:	200c      	movs	r0, #12
   81f1c:	47b0      	blx	r6
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
   81f1e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f22:	200d      	movs	r0, #13
   81f24:	47b0      	blx	r6
   81f26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81f2a:	2230      	movs	r2, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81f2c:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81f30:	f885 2312 	strb.w	r2, [r5, #786]	; 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81f34:	602b      	str	r3, [r5, #0]
   81f36:	e7db      	b.n	81ef0 <naeusart_register_handlers+0x14>
   81f38:	2011      	movs	r0, #17
   81f3a:	47b8      	blx	r7
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   81f3c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f40:	200a      	movs	r0, #10
   81f42:	47b0      	blx	r6
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   81f44:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81f48:	200b      	movs	r0, #11
   81f4a:	47b0      	blx	r6
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81f4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81f50:	2230      	movs	r2, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81f52:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81f56:	f885 2311 	strb.w	r2, [r5, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81f5a:	602b      	str	r3, [r5, #0]
   81f5c:	e7c8      	b.n	81ef0 <naeusart_register_handlers+0x14>
		if (port == 0) break;
   81f5e:	4b09      	ldr	r3, [pc, #36]	; (81f84 <naeusart_register_handlers+0xa8>)
   81f60:	e7d2      	b.n	81f08 <naeusart_register_handlers+0x2c>
   81f62:	bf00      	nop
   81f64:	000833e1 	.word	0x000833e1
   81f68:	000835ed 	.word	0x000835ed
   81f6c:	e000e100 	.word	0xe000e100
   81f70:	000817e1 	.word	0x000817e1
   81f74:	00081fd5 	.word	0x00081fd5
   81f78:	00081a91 	.word	0x00081a91
   81f7c:	00081809 	.word	0x00081809
   81f80:	20070400 	.word	0x20070400
   81f84:	200706a0 	.word	0x200706a0

00081f88 <naeusb_cdc_settings_in>:
{
   81f88:	b500      	push	{lr}
    udd_g_ctrlreq.payload = respbuf;
   81f8a:	4a0e      	ldr	r2, [pc, #56]	; (81fc4 <naeusb_cdc_settings_in+0x3c>)
		respbuf[i] = 0;
   81f8c:	f04f 0e00 	mov.w	lr, #0
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   81f90:	88d1      	ldrh	r1, [r2, #6]
            respbuf[i] = driver->cdc_settings_change;
   81f92:	480d      	ldr	r0, [pc, #52]	; (81fc8 <naeusb_cdc_settings_in+0x40>)
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   81f94:	2904      	cmp	r1, #4
   81f96:	bf28      	it	cs
   81f98:	2104      	movcs	r1, #4
            respbuf[i] = driver->cdc_settings_change;
   81f9a:	4b0c      	ldr	r3, [pc, #48]	; (81fcc <naeusb_cdc_settings_in+0x44>)
   81f9c:	f890 c29c 	ldrb.w	ip, [r0, #668]	; 0x29c
   81fa0:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
   81fa4:	4b0a      	ldr	r3, [pc, #40]	; (81fd0 <naeusb_cdc_settings_in+0x48>)
   81fa6:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
   81faa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   81fae:	7058      	strb	r0, [r3, #1]
   81fb0:	f883 c000 	strb.w	ip, [r3]
    udd_g_ctrlreq.payload = respbuf;
   81fb4:	6093      	str	r3, [r2, #8]
		respbuf[i] = 0;
   81fb6:	f8a3 e002 	strh.w	lr, [r3, #2]
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   81fba:	8191      	strh	r1, [r2, #12]
}
   81fbc:	2001      	movs	r0, #1
   81fbe:	f85d fb04 	ldr.w	pc, [sp], #4
   81fc2:	bf00      	nop
   81fc4:	20072288 	.word	0x20072288
   81fc8:	20070400 	.word	0x20070400
   81fcc:	200706a0 	.word	0x200706a0
   81fd0:	20071a18 	.word	0x20071a18

00081fd4 <usart_setup_in_received>:

bool usart_setup_in_received(void)
{
   81fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    switch(udd_g_ctrlreq.req.bRequest) {
   81fd8:	4d1d      	ldr	r5, [pc, #116]	; (82050 <usart_setup_in_received+0x7c>)
   81fda:	786b      	ldrb	r3, [r5, #1]
   81fdc:	2b1b      	cmp	r3, #27
   81fde:	d006      	beq.n	81fee <usart_setup_in_received+0x1a>
   81fe0:	2b31      	cmp	r3, #49	; 0x31
   81fe2:	d02a      	beq.n	8203a <usart_setup_in_received+0x66>
   81fe4:	2b1a      	cmp	r3, #26
   81fe6:	d006      	beq.n	81ff6 <usart_setup_in_received+0x22>
        
    case REQ_USART0_DATA:						
        0;
        unsigned int cnt;
		usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
		if (!driver) return false;
   81fe8:	2000      	movs	r0, #0
	case REQ_CDC_SETTINGS_EN:
        return naeusb_cdc_settings_in();
        break;
    }
    return false;
}
   81fea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return ctrl_usart_in();
   81fee:	4b19      	ldr	r3, [pc, #100]	; (82054 <usart_setup_in_received+0x80>)
}
   81ff0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return ctrl_usart_in();
   81ff4:	4718      	bx	r3
		usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81ff6:	886b      	ldrh	r3, [r5, #2]
		if (port == 0) break;
   81ff8:	0a1b      	lsrs	r3, r3, #8
   81ffa:	d026      	beq.n	8204a <usart_setup_in_received+0x76>
   81ffc:	2b01      	cmp	r3, #1
   81ffe:	d1f3      	bne.n	81fe8 <usart_setup_in_received+0x14>
   82000:	4e15      	ldr	r6, [pc, #84]	; (82058 <usart_setup_in_received+0x84>)
        unsigned int data = (udd_g_ctrlreq.req.wLength > 128) ? 128 : udd_g_ctrlreq.req.wLength;
   82002:	88eb      	ldrh	r3, [r5, #6]
   82004:	2b80      	cmp	r3, #128	; 0x80
   82006:	4699      	mov	r9, r3
   82008:	bf28      	it	cs
   8200a:	f04f 0980 	movcs.w	r9, #128	; 0x80
        for(cnt = 0; cnt < data; cnt++){
   8200e:	b1c3      	cbz	r3, 82042 <usart_setup_in_received+0x6e>
   82010:	f8df 8048 	ldr.w	r8, [pc, #72]	; 8205c <usart_setup_in_received+0x88>
   82014:	f8df a048 	ldr.w	sl, [pc, #72]	; 82060 <usart_setup_in_received+0x8c>
   82018:	4644      	mov	r4, r8
    return get_from_circ_buf(&driver->rxbuf);
   8201a:	361c      	adds	r6, #28
   8201c:	eb08 0709 	add.w	r7, r8, r9
   82020:	4630      	mov	r0, r6
   82022:	47d0      	blx	sl
            respbuf[cnt] = usart_driver_getchar(driver);
   82024:	f804 0b01 	strb.w	r0, [r4], #1
        for(cnt = 0; cnt < data; cnt++){
   82028:	42a7      	cmp	r7, r4
   8202a:	d1f9      	bne.n	82020 <usart_setup_in_received+0x4c>
        return true;
   8202c:	2001      	movs	r0, #1
        udd_g_ctrlreq.payload = respbuf;
   8202e:	f8c5 8008 	str.w	r8, [r5, #8]
        udd_g_ctrlreq.payload_size = cnt;
   82032:	f8a5 900c 	strh.w	r9, [r5, #12]
}
   82036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return naeusb_cdc_settings_in();
   8203a:	4b0a      	ldr	r3, [pc, #40]	; (82064 <usart_setup_in_received+0x90>)
}
   8203c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return naeusb_cdc_settings_in();
   82040:	4718      	bx	r3
        for(cnt = 0; cnt < data; cnt++){
   82042:	4699      	mov	r9, r3
   82044:	f8df 8014 	ldr.w	r8, [pc, #20]	; 8205c <usart_setup_in_received+0x88>
   82048:	e7f0      	b.n	8202c <usart_setup_in_received+0x58>
		if (port == 0) break;
   8204a:	4e07      	ldr	r6, [pc, #28]	; (82068 <usart_setup_in_received+0x94>)
   8204c:	e7d9      	b.n	82002 <usart_setup_in_received+0x2e>
   8204e:	bf00      	nop
   82050:	20072288 	.word	0x20072288
   82054:	00081c41 	.word	0x00081c41
   82058:	200706a0 	.word	0x200706a0
   8205c:	20071a18 	.word	0x20071a18
   82060:	0008016d 	.word	0x0008016d
   82064:	00081f89 	.word	0x00081f89
   82068:	20070400 	.word	0x20070400

0008206c <cdc_enable>:
   8206c:	b150      	cbz	r0, 82084 <cdc_enable+0x18>
   8206e:	2801      	cmp	r0, #1
   82070:	d10a      	bne.n	82088 <cdc_enable+0x1c>
   82072:	4b09      	ldr	r3, [pc, #36]	; (82098 <cdc_enable+0x2c>)
    driver->cdc_enabled = 1;
   82074:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
}
   82078:	2001      	movs	r0, #1
    driver->cdc_enabled = 1;
   8207a:	f042 0204 	orr.w	r2, r2, #4
   8207e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
   82082:	4770      	bx	lr
		if (port == 0) break;
   82084:	4b05      	ldr	r3, [pc, #20]	; (8209c <cdc_enable+0x30>)
   82086:	e7f5      	b.n	82074 <cdc_enable+0x8>
    driver->cdc_enabled = 1;
   82088:	2200      	movs	r2, #0
   8208a:	f892 329c 	ldrb.w	r3, [r2, #668]	; 0x29c
   8208e:	f362 0382 	bfi	r3, r2, #2, #1
   82092:	f882 329c 	strb.w	r3, [r2, #668]	; 0x29c
   82096:	deff      	udf	#255	; 0xff
   82098:	200706a0 	.word	0x200706a0
   8209c:	20070400 	.word	0x20070400

000820a0 <cdc_disable>:
		if (port == 0) break;
   820a0:	b160      	cbz	r0, 820bc <cdc_disable+0x1c>
   820a2:	2801      	cmp	r0, #1
   820a4:	d10c      	bne.n	820c0 <cdc_disable+0x20>
   820a6:	4b0a      	ldr	r3, [pc, #40]	; (820d0 <cdc_disable+0x30>)
    NAEUSB_CDC_IS_RUNNING = false;
   820a8:	2000      	movs	r0, #0
    driver->cdc_enabled = 0;
   820aa:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
    NAEUSB_CDC_IS_RUNNING = false;
   820ae:	4909      	ldr	r1, [pc, #36]	; (820d4 <cdc_disable+0x34>)
    driver->cdc_enabled = 0;
   820b0:	f36f 0282 	bfc	r2, #2, #1
   820b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    NAEUSB_CDC_IS_RUNNING = false;
   820b8:	7008      	strb	r0, [r1, #0]
}
   820ba:	4770      	bx	lr
		if (port == 0) break;
   820bc:	4b06      	ldr	r3, [pc, #24]	; (820d8 <cdc_disable+0x38>)
   820be:	e7f3      	b.n	820a8 <cdc_disable+0x8>
    driver->cdc_enabled = 0;
   820c0:	2200      	movs	r2, #0
   820c2:	f892 329c 	ldrb.w	r3, [r2, #668]	; 0x29c
   820c6:	f362 0382 	bfi	r3, r2, #2, #1
   820ca:	f882 329c 	strb.w	r3, [r2, #668]	; 0x29c
   820ce:	deff      	udf	#255	; 0xff
   820d0:	200706a0 	.word	0x200706a0
   820d4:	20071a98 	.word	0x20071a98
   820d8:	20070400 	.word	0x20070400

000820dc <my_callback_rx_notify>:
{
   820dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (port == 0) break;
   820e0:	4681      	mov	r9, r0
   820e2:	b388      	cbz	r0, 82148 <my_callback_rx_notify+0x6c>
   820e4:	2801      	cmp	r0, #1
   820e6:	d131      	bne.n	8214c <my_callback_rx_notify+0x70>
   820e8:	4f1c      	ldr	r7, [pc, #112]	; (8215c <my_callback_rx_notify+0x80>)
    NAEUSB_CDC_IS_RUNNING = true;
   820ea:	2101      	movs	r1, #1
    if (driver->cdc_enabled && driver->enabled) {
   820ec:	f897 329c 	ldrb.w	r3, [r7, #668]	; 0x29c
    NAEUSB_CDC_IS_RUNNING = true;
   820f0:	4a1b      	ldr	r2, [pc, #108]	; (82160 <my_callback_rx_notify+0x84>)
    if (driver->cdc_enabled && driver->enabled) {
   820f2:	f003 0306 	and.w	r3, r3, #6
   820f6:	2b06      	cmp	r3, #6
    NAEUSB_CDC_IS_RUNNING = true;
   820f8:	7011      	strb	r1, [r2, #0]
    if (driver->cdc_enabled && driver->enabled) {
   820fa:	d001      	beq.n	82100 <my_callback_rx_notify+0x24>
}
   820fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   82100:	4648      	mov	r0, r9
   82102:	f8df a060 	ldr.w	sl, [pc, #96]	; 82164 <my_callback_rx_notify+0x88>
   82106:	47d0      	blx	sl
        while (num_char > 0) {
   82108:	4605      	mov	r5, r0
   8210a:	2800      	cmp	r0, #0
   8210c:	d0f6      	beq.n	820fc <my_callback_rx_notify+0x20>
   8210e:	f8df b058 	ldr.w	fp, [pc, #88]	; 82168 <my_callback_rx_notify+0x8c>
   82112:	4e16      	ldr	r6, [pc, #88]	; (8216c <my_callback_rx_notify+0x90>)
   82114:	f8df 8058 	ldr.w	r8, [pc, #88]	; 82170 <my_callback_rx_notify+0x94>
            num_char = (num_char > 512) ? 512 : num_char;
   82118:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   8211c:	bf28      	it	cs
   8211e:	f44f 7500 	movcs.w	r5, #512	; 0x200
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   82122:	4631      	mov	r1, r6
   82124:	4648      	mov	r0, r9
   82126:	462a      	mov	r2, r5
            for (uint16_t i = 0; i < num_char; i++) {
   82128:	2400      	movs	r4, #0
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   8212a:	47d8      	blx	fp
                usart_driver_putchar(driver, uart_buf[i]);
   8212c:	5d31      	ldrb	r1, [r6, r4]
            for (uint16_t i = 0; i < num_char; i++) {
   8212e:	3401      	adds	r4, #1
                usart_driver_putchar(driver, uart_buf[i]);
   82130:	4638      	mov	r0, r7
            for (uint16_t i = 0; i < num_char; i++) {
   82132:	b2a4      	uxth	r4, r4
                usart_driver_putchar(driver, uart_buf[i]);
   82134:	47c0      	blx	r8
            for (uint16_t i = 0; i < num_char; i++) {
   82136:	42ac      	cmp	r4, r5
   82138:	d3f8      	bcc.n	8212c <my_callback_rx_notify+0x50>
            num_char = udi_cdc_multi_get_nb_received_data(port);
   8213a:	4648      	mov	r0, r9
   8213c:	47d0      	blx	sl
        while (num_char > 0) {
   8213e:	4605      	mov	r5, r0
   82140:	2800      	cmp	r0, #0
   82142:	d1e9      	bne.n	82118 <my_callback_rx_notify+0x3c>
}
   82144:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (port == 0) break;
   82148:	4f0a      	ldr	r7, [pc, #40]	; (82174 <my_callback_rx_notify+0x98>)
   8214a:	e7ce      	b.n	820ea <my_callback_rx_notify+0xe>
    NAEUSB_CDC_IS_RUNNING = true;
   8214c:	2101      	movs	r1, #1
    if (driver->cdc_enabled && driver->enabled) {
   8214e:	2300      	movs	r3, #0
    NAEUSB_CDC_IS_RUNNING = true;
   82150:	4a03      	ldr	r2, [pc, #12]	; (82160 <my_callback_rx_notify+0x84>)
   82152:	7011      	strb	r1, [r2, #0]
    if (driver->cdc_enabled && driver->enabled) {
   82154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
   82158:	deff      	udf	#255	; 0xff
   8215a:	bf00      	nop
   8215c:	200706a0 	.word	0x200706a0
   82160:	20071a98 	.word	0x20071a98
   82164:	000858e1 	.word	0x000858e1
   82168:	00085931 	.word	0x00085931
   8216c:	20071a9c 	.word	0x20071a9c
   82170:	00081e39 	.word	0x00081e39
   82174:	20070400 	.word	0x20070400

00082178 <my_callback_config>:
{
   82178:	b530      	push	{r4, r5, lr}
   8217a:	b083      	sub	sp, #12
		if (port == 0) break;
   8217c:	b340      	cbz	r0, 821d0 <my_callback_config+0x58>
   8217e:	2801      	cmp	r0, #1
   82180:	d128      	bne.n	821d4 <my_callback_config+0x5c>
   82182:	4c16      	ldr	r4, [pc, #88]	; (821dc <my_callback_config+0x64>)
    if (driver->cdc_enabled) {
   82184:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   82188:	075a      	lsls	r2, r3, #29
   8218a:	d502      	bpl.n	82192 <my_callback_config+0x1a>
        switch(cfg->bParityType) {
   8218c:	794b      	ldrb	r3, [r1, #5]
   8218e:	2b04      	cmp	r3, #4
   82190:	d901      	bls.n	82196 <my_callback_config+0x1e>
}
   82192:	b003      	add	sp, #12
   82194:	bd30      	pop	{r4, r5, pc}
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   82196:	2300      	movs	r3, #0
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
   82198:	798a      	ldrb	r2, [r1, #6]
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   8219a:	4620      	mov	r0, r4
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
   8219c:	3a05      	subs	r2, #5
   8219e:	0192      	lsls	r2, r2, #6
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   821a0:	b2d2      	uxtb	r2, r2
   821a2:	6809      	ldr	r1, [r1, #0]
   821a4:	4d0e      	ldr	r5, [pc, #56]	; (821e0 <my_callback_config+0x68>)
   821a6:	9200      	str	r2, [sp, #0]
   821a8:	461a      	mov	r2, r3
   821aa:	47a8      	blx	r5
		if (!(usart_get_interrupt_mask(driver->usart) & UART_IER_RXRDY)) {
   821ac:	4b0d      	ldr	r3, [pc, #52]	; (821e4 <my_callback_config+0x6c>)
   821ae:	6820      	ldr	r0, [r4, #0]
   821b0:	4798      	blx	r3
   821b2:	07c3      	lsls	r3, r0, #31
   821b4:	d4ed      	bmi.n	82192 <my_callback_config+0x1a>
			usart_enable_rx(driver->usart);
   821b6:	6820      	ldr	r0, [r4, #0]
   821b8:	4b0b      	ldr	r3, [pc, #44]	; (821e8 <my_callback_config+0x70>)
   821ba:	4798      	blx	r3
			usart_enable_tx(driver->usart);
   821bc:	6820      	ldr	r0, [r4, #0]
   821be:	4b0b      	ldr	r3, [pc, #44]	; (821ec <my_callback_config+0x74>)
   821c0:	4798      	blx	r3
			usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   821c2:	2101      	movs	r1, #1
   821c4:	6820      	ldr	r0, [r4, #0]
   821c6:	4b0a      	ldr	r3, [pc, #40]	; (821f0 <my_callback_config+0x78>)
}
   821c8:	b003      	add	sp, #12
   821ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   821ce:	4718      	bx	r3
		if (port == 0) break;
   821d0:	4c08      	ldr	r4, [pc, #32]	; (821f4 <my_callback_config+0x7c>)
   821d2:	e7d7      	b.n	82184 <my_callback_config+0xc>
    if (driver->cdc_enabled) {
   821d4:	2300      	movs	r3, #0
   821d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
   821da:	deff      	udf	#255	; 0xff
   821dc:	200706a0 	.word	0x200706a0
   821e0:	00081cb5 	.word	0x00081cb5
   821e4:	00082f89 	.word	0x00082f89
   821e8:	00082f71 	.word	0x00082f71
   821ec:	00082f61 	.word	0x00082f61
   821f0:	00082f81 	.word	0x00082f81
   821f4:	20070400 	.word	0x20070400

000821f8 <cdc_send_to_pc>:

void cdc_send_to_pc(void)
{
   821f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   821fc:	2500      	movs	r5, #0
   821fe:	2401      	movs	r4, #1
    // if (!NAEUSB_CDC_IS_RUNNING) return; //fixes Pro streaming requiring connection to CDC
	for (uint8_t i = 0; i < 4; i++) {
		usart_driver *driver = get_nth_available_driver(i);
		if (!driver) continue;
		if (driver->cdc_enabled && driver->enabled && udi_cdc_multi_is_tx_ready(i)) {
   82200:	f8df a060 	ldr.w	sl, [pc, #96]	; 82264 <cdc_send_to_pc+0x6c>
   82204:	4f18      	ldr	r7, [pc, #96]	; (82268 <cdc_send_to_pc+0x70>)
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   82206:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8226c <cdc_send_to_pc+0x74>
   8220a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 82270 <cdc_send_to_pc+0x78>
   8220e:	b2ee      	uxtb	r6, r5
		if (port == 0) break;
   82210:	b14d      	cbz	r5, 82226 <cdc_send_to_pc+0x2e>
   82212:	2e01      	cmp	r6, #1
   82214:	d023      	beq.n	8225e <cdc_send_to_pc+0x66>
	for (uint8_t i = 0; i < 4; i++) {
   82216:	2c04      	cmp	r4, #4
   82218:	d01f      	beq.n	8225a <cdc_send_to_pc+0x62>
   8221a:	3401      	adds	r4, #1
   8221c:	3501      	adds	r5, #1
   8221e:	b2e4      	uxtb	r4, r4
   82220:	b2ee      	uxtb	r6, r5
		if (port == 0) break;
   82222:	2d00      	cmp	r5, #0
   82224:	d1f5      	bne.n	82212 <cdc_send_to_pc+0x1a>
   82226:	f8df b04c 	ldr.w	fp, [pc, #76]	; 82274 <cdc_send_to_pc+0x7c>
		if (driver->cdc_enabled && driver->enabled && udi_cdc_multi_is_tx_ready(i)) {
   8222a:	f89b 329c 	ldrb.w	r3, [fp, #668]	; 0x29c
   8222e:	f003 0306 	and.w	r3, r3, #6
   82232:	2b06      	cmp	r3, #6
   82234:	d1f1      	bne.n	8221a <cdc_send_to_pc+0x22>
   82236:	4630      	mov	r0, r6
   82238:	47d0      	blx	sl
   8223a:	2800      	cmp	r0, #0
   8223c:	d0eb      	beq.n	82216 <cdc_send_to_pc+0x1e>
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   8223e:	f50b 7be2 	add.w	fp, fp, #452	; 0x1c4
   82242:	e004      	b.n	8224e <cdc_send_to_pc+0x56>
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   82244:	4658      	mov	r0, fp
   82246:	47c8      	blx	r9
   82248:	4601      	mov	r1, r0
   8224a:	4630      	mov	r0, r6
   8224c:	47c0      	blx	r8
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   8224e:	4658      	mov	r0, fp
   82250:	47b8      	blx	r7
   82252:	2800      	cmp	r0, #0
   82254:	d1f6      	bne.n	82244 <cdc_send_to_pc+0x4c>
	for (uint8_t i = 0; i < 4; i++) {
   82256:	2c04      	cmp	r4, #4
   82258:	d1df      	bne.n	8221a <cdc_send_to_pc+0x22>
			}
		}

	}
	
}
   8225a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (port == 0) break;
   8225e:	f8df b018 	ldr.w	fp, [pc, #24]	; 82278 <cdc_send_to_pc+0x80>
   82262:	e7e2      	b.n	8222a <cdc_send_to_pc+0x32>
   82264:	000859f9 	.word	0x000859f9
   82268:	0008018d 	.word	0x0008018d
   8226c:	0008016d 	.word	0x0008016d
   82270:	00085a6d 	.word	0x00085a6d
   82274:	20070400 	.word	0x20070400
   82278:	200706a0 	.word	0x200706a0

0008227c <fpga_target_setup_out_received>:
	}
}

bool fpga_target_setup_out_received(void)
{
    blockendpoint_usage = bep_emem;
   8227c:	2000      	movs	r0, #0
    switch(udd_g_ctrlreq.req.bRequest){
   8227e:	4a29      	ldr	r2, [pc, #164]	; (82324 <fpga_target_setup_out_received+0xa8>)
    blockendpoint_usage = bep_emem;
   82280:	4929      	ldr	r1, [pc, #164]	; (82328 <fpga_target_setup_out_received+0xac>)
    switch(udd_g_ctrlreq.req.bRequest){
   82282:	7853      	ldrb	r3, [r2, #1]
    blockendpoint_usage = bep_emem;
   82284:	7008      	strb	r0, [r1, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   82286:	3b10      	subs	r3, #16
   82288:	2b25      	cmp	r3, #37	; 0x25
   8228a:	d818      	bhi.n	822be <fpga_target_setup_out_received+0x42>
   8228c:	e8df f003 	tbb	[pc, r3]
   82290:	2925211d 	.word	0x2925211d
   82294:	17312d17 	.word	0x17312d17
   82298:	17171717 	.word	0x17171717
   8229c:	17171717 	.word	0x17171717
   822a0:	17131717 	.word	0x17131717
   822a4:	17171717 	.word	0x17171717
   822a8:	17171717 	.word	0x17171717
   822ac:	17171717 	.word	0x17171717
   822b0:	3d173935 	.word	0x3d173935
   822b4:	1941      	.short	0x1941
		case REQ_SAM_CFG:
			0;
			uint16_t wVal = udd_g_ctrlreq.req.wValue & 0xFF;
   822b6:	7893      	ldrb	r3, [r2, #2]
			if ((wVal > 0x03) && (wVal < 0x10)) {
   822b8:	3b04      	subs	r3, #4
   822ba:	2b0b      	cmp	r3, #11
   822bc:	d92d      	bls.n	8231a <fpga_target_setup_out_received+0x9e>
				udd_g_ctrlreq.callback = fpga_target_sam_cfg_out;
				return true;
			} else {
				return false;
   822be:	2000      	movs	r0, #0
            return true;

        default:
            return false;
    }					
}
   822c0:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_spi1util;
   822c2:	4b1a      	ldr	r3, [pc, #104]	; (8232c <fpga_target_setup_out_received+0xb0>)
            return true;
   822c4:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_spi1util;
   822c6:	6113      	str	r3, [r2, #16]
            return true;
   822c8:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   822ca:	4b19      	ldr	r3, [pc, #100]	; (82330 <fpga_target_setup_out_received+0xb4>)
            return true;
   822cc:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   822ce:	6113      	str	r3, [r2, #16]
            return true;
   822d0:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   822d2:	4b18      	ldr	r3, [pc, #96]	; (82334 <fpga_target_setup_out_received+0xb8>)
            return true;
   822d4:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   822d6:	6113      	str	r3, [r2, #16]
            return true;
   822d8:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   822da:	4b17      	ldr	r3, [pc, #92]	; (82338 <fpga_target_setup_out_received+0xbc>)
            return true;	
   822dc:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   822de:	6113      	str	r3, [r2, #16]
            return true;	
   822e0:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   822e2:	4b16      	ldr	r3, [pc, #88]	; (8233c <fpga_target_setup_out_received+0xc0>)
            return true;		
   822e4:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   822e6:	6113      	str	r3, [r2, #16]
            return true;		
   822e8:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl_sam3u;
   822ea:	4b15      	ldr	r3, [pc, #84]	; (82340 <fpga_target_setup_out_received+0xc4>)
            return true;		
   822ec:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl_sam3u;
   822ee:	6113      	str	r3, [r2, #16]
            return true;		
   822f0:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   822f2:	4b14      	ldr	r3, [pc, #80]	; (82344 <fpga_target_setup_out_received+0xc8>)
            return true;
   822f4:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   822f6:	6113      	str	r3, [r2, #16]
            return true;
   822f8:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_cdce906_cb;
   822fa:	4b13      	ldr	r3, [pc, #76]	; (82348 <fpga_target_setup_out_received+0xcc>)
            return true;
   822fc:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_cdce906_cb;
   822fe:	6113      	str	r3, [r2, #16]
            return true;
   82300:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_vccint_cb;
   82302:	4b12      	ldr	r3, [pc, #72]	; (8234c <fpga_target_setup_out_received+0xd0>)
            return true;
   82304:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_vccint_cb;
   82306:	6113      	str	r3, [r2, #16]
            return true;
   82308:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_progfpgaspi;
   8230a:	4b11      	ldr	r3, [pc, #68]	; (82350 <fpga_target_setup_out_received+0xd4>)
			return true;
   8230c:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_progfpgaspi;
   8230e:	6113      	str	r3, [r2, #16]
			return true;
   82310:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_fpgaioutil;
   82312:	4b10      	ldr	r3, [pc, #64]	; (82354 <fpga_target_setup_out_received+0xd8>)
            return true;
   82314:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_fpgaioutil;
   82316:	6113      	str	r3, [r2, #16]
            return true;
   82318:	4770      	bx	lr
				udd_g_ctrlreq.callback = fpga_target_sam_cfg_out;
   8231a:	4b0f      	ldr	r3, [pc, #60]	; (82358 <fpga_target_setup_out_received+0xdc>)
				return true;
   8231c:	2001      	movs	r0, #1
				udd_g_ctrlreq.callback = fpga_target_sam_cfg_out;
   8231e:	6113      	str	r3, [r2, #16]
				return true;
   82320:	4770      	bx	lr
   82322:	bf00      	nop
   82324:	20072288 	.word	0x20072288
   82328:	20071c9d 	.word	0x20071c9d
   8232c:	000828e1 	.word	0x000828e1
   82330:	000823f1 	.word	0x000823f1
   82334:	000823d1 	.word	0x000823d1
   82338:	0008235d 	.word	0x0008235d
   8233c:	00082389 	.word	0x00082389
   82340:	00082421 	.word	0x00082421
   82344:	00082731 	.word	0x00082731
   82348:	000829e1 	.word	0x000829e1
   8234c:	000826a1 	.word	0x000826a1
   82350:	00082961 	.word	0x00082961
   82354:	000827d5 	.word	0x000827d5
   82358:	00082781 	.word	0x00082781

0008235c <ctrl_readmem_ctrl>:
void ctrl_readmem_ctrl(void){
   8235c:	b538      	push	{r3, r4, r5, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8235e:	4b06      	ldr	r3, [pc, #24]	; (82378 <ctrl_readmem_ctrl+0x1c>)
    FPGA_setlock(fpga_ctrlmem);
   82360:	4a06      	ldr	r2, [pc, #24]	; (8237c <ctrl_readmem_ctrl+0x20>)
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82362:	685c      	ldr	r4, [r3, #4]
    FPGA_setlock(fpga_ctrlmem);
   82364:	2005      	movs	r0, #5
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82366:	681d      	ldr	r5, [r3, #0]
    FPGA_setlock(fpga_ctrlmem);
   82368:	4790      	blx	r2
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS + address;
   8236a:	4a05      	ldr	r2, [pc, #20]	; (82380 <ctrl_readmem_ctrl+0x24>)
    ctrlmemread_size = buflen;
   8236c:	4b05      	ldr	r3, [pc, #20]	; (82384 <ctrl_readmem_ctrl+0x28>)
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS + address;
   8236e:	f104 44c0 	add.w	r4, r4, #1610612736	; 0x60000000
   82372:	6014      	str	r4, [r2, #0]
    ctrlmemread_size = buflen;
   82374:	601d      	str	r5, [r3, #0]
}
   82376:	bd38      	pop	{r3, r4, r5, pc}
   82378:	20071514 	.word	0x20071514
   8237c:	00082a61 	.word	0x00082a61
   82380:	20071ca8 	.word	0x20071ca8
   82384:	20071cac 	.word	0x20071cac

00082388 <ctrl_writemem_ctrl>:
void ctrl_writemem_ctrl(void){
   82388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8238c:	4f0d      	ldr	r7, [pc, #52]	; (823c4 <ctrl_writemem_ctrl+0x3c>)
    FPGA_setlock(fpga_generic);
   8238e:	2001      	movs	r0, #1
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82390:	683c      	ldr	r4, [r7, #0]
    FPGA_setlock(fpga_generic);
   82392:	4e0d      	ldr	r6, [pc, #52]	; (823c8 <ctrl_writemem_ctrl+0x40>)
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82394:	687d      	ldr	r5, [r7, #4]
    FPGA_setlock(fpga_generic);
   82396:	47b0      	blx	r6
    for(unsigned int i = 0; i < buflen; i++){
   82398:	b174      	cbz	r4, 823b8 <ctrl_writemem_ctrl+0x30>
   8239a:	eb07 0c04 	add.w	ip, r7, r4
   8239e:	1fec      	subs	r4, r5, #7
   823a0:	4d0a      	ldr	r5, [pc, #40]	; (823cc <ctrl_writemem_ctrl+0x44>)
   823a2:	1dfb      	adds	r3, r7, #7
        xram[i+address] = ctrlbuf_payload[i];
   823a4:	1be4      	subs	r4, r4, r7
   823a6:	f10c 0c07 	add.w	ip, ip, #7
   823aa:	18e2      	adds	r2, r4, r3
   823ac:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   823b0:	6829      	ldr	r1, [r5, #0]
    for(unsigned int i = 0; i < buflen; i++){
   823b2:	4563      	cmp	r3, ip
        xram[i+address] = ctrlbuf_payload[i];
   823b4:	5488      	strb	r0, [r1, r2]
    for(unsigned int i = 0; i < buflen; i++){
   823b6:	d1f8      	bne.n	823aa <ctrl_writemem_ctrl+0x22>
    FPGA_setlock(fpga_unlocked);
   823b8:	4633      	mov	r3, r6
}
   823ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    FPGA_setlock(fpga_unlocked);
   823be:	2000      	movs	r0, #0
   823c0:	4718      	bx	r3
   823c2:	bf00      	nop
   823c4:	20071514 	.word	0x20071514
   823c8:	00082a61 	.word	0x00082a61
   823cc:	20070944 	.word	0x20070944

000823d0 <ctrl_writemem_bulk>:
void ctrl_writemem_bulk(void){
   823d0:	b508      	push	{r3, lr}
    FPGA_setlock(fpga_blockout);
   823d2:	2004      	movs	r0, #4
   823d4:	4b03      	ldr	r3, [pc, #12]	; (823e4 <ctrl_writemem_bulk+0x14>)
   823d6:	4798      	blx	r3
    bulk_fpga_write_addr = *(CTRLBUFFER_WORDPTR + 1);
   823d8:	4a03      	ldr	r2, [pc, #12]	; (823e8 <ctrl_writemem_bulk+0x18>)
   823da:	4b04      	ldr	r3, [pc, #16]	; (823ec <ctrl_writemem_bulk+0x1c>)
   823dc:	6852      	ldr	r2, [r2, #4]
   823de:	601a      	str	r2, [r3, #0]
}
   823e0:	bd08      	pop	{r3, pc}
   823e2:	bf00      	nop
   823e4:	00082a61 	.word	0x00082a61
   823e8:	20071514 	.word	0x20071514
   823ec:	20071ca0 	.word	0x20071ca0

000823f0 <ctrl_readmem_bulk>:
void ctrl_readmem_bulk(void){
   823f0:	b570      	push	{r4, r5, r6, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);	
   823f2:	4b07      	ldr	r3, [pc, #28]	; (82410 <ctrl_readmem_bulk+0x20>)
    FPGA_setlock(fpga_blockin);
   823f4:	2002      	movs	r0, #2
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   823f6:	e9d3 5400 	ldrd	r5, r4, [r3]
    FPGA_setlock(fpga_blockin);
   823fa:	4b06      	ldr	r3, [pc, #24]	; (82414 <ctrl_readmem_bulk+0x24>)
   823fc:	4798      	blx	r3
    udi_vendor_bulk_in_run(
   823fe:	4629      	mov	r1, r5
   82400:	f104 40c0 	add.w	r0, r4, #1610612736	; 0x60000000
   82404:	4a04      	ldr	r2, [pc, #16]	; (82418 <ctrl_readmem_bulk+0x28>)
   82406:	4b05      	ldr	r3, [pc, #20]	; (8241c <ctrl_readmem_bulk+0x2c>)
}
   82408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    udi_vendor_bulk_in_run(
   8240c:	4718      	bx	r3
   8240e:	bf00      	nop
   82410:	20071514 	.word	0x20071514
   82414:	00082a61 	.word	0x00082a61
   82418:	0008270d 	.word	0x0008270d
   8241c:	0008349d 	.word	0x0008349d

00082420 <ctrl_writemem_ctrl_sam3u>:
void ctrl_writemem_ctrl_sam3u(void){
   82420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR) - 4; // remove the first 4 bytes of the payload who contain the flags
   82424:	492c      	ldr	r1, [pc, #176]	; (824d8 <ctrl_writemem_ctrl_sam3u+0xb8>)
void ctrl_writemem_ctrl_sam3u(void){
   82426:	b083      	sub	sp, #12
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82428:	e9d1 2300 	ldrd	r2, r3, [r1]
    for(unsigned int i = 0; i < buflen; i++){
   8242c:	3a04      	subs	r2, #4
    uint32_t flags = *(CTRLBUFFER_WORDPTR + 2);
   8242e:	688e      	ldr	r6, [r1, #8]
    for(unsigned int i = 0; i < buflen; i++){
   82430:	d004      	beq.n	8243c <ctrl_writemem_ctrl_sam3u+0x1c>
        sam3u_mem_b[i+address] = ctrlbuf_payload[i];
   82432:	482a      	ldr	r0, [pc, #168]	; (824dc <ctrl_writemem_ctrl_sam3u+0xbc>)
   82434:	310c      	adds	r1, #12
   82436:	4418      	add	r0, r3
   82438:	4b29      	ldr	r3, [pc, #164]	; (824e0 <ctrl_writemem_ctrl_sam3u+0xc0>)
   8243a:	4798      	blx	r3
    if ( flags & 0x1 ){ // encryptions have been requested
   8243c:	07f3      	lsls	r3, r6, #31
   8243e:	d522      	bpl.n	82486 <ctrl_writemem_ctrl_sam3u+0x66>
        uint32_t seed = sam3u_mem[0]; // load the seed at addr 0
   82440:	4b26      	ldr	r3, [pc, #152]	; (824dc <ctrl_writemem_ctrl_sam3u+0xbc>)
        for(unsigned int b = 0; b < (flags >> 16); b++){
   82442:	0c37      	lsrs	r7, r6, #16
        uint32_t seed = sam3u_mem[0]; // load the seed at addr 0
   82444:	f8d3 8000 	ldr.w	r8, [r3]
        for(unsigned int b = 0; b < (flags >> 16); b++){
   82448:	d01d      	beq.n	82486 <ctrl_writemem_ctrl_sam3u+0x66>
   8244a:	2400      	movs	r4, #0
            if ((flags >> 1) & 0x1){ // write the key
   8244c:	f3c6 0340 	ubfx	r3, r6, #1, #1
   82450:	4d24      	ldr	r5, [pc, #144]	; (824e4 <ctrl_writemem_ctrl_sam3u+0xc4>)
   82452:	f8df a094 	ldr.w	sl, [pc, #148]	; 824e8 <ctrl_writemem_ctrl_sam3u+0xc8>
   82456:	f8df 9094 	ldr.w	r9, [pc, #148]	; 824ec <ctrl_writemem_ctrl_sam3u+0xcc>
   8245a:	f8df b094 	ldr.w	fp, [pc, #148]	; 824f0 <ctrl_writemem_ctrl_sam3u+0xd0>
   8245e:	9301      	str	r3, [sp, #4]
            if ((flags >> 2) & 0x1){ // write the pts
   82460:	f3c6 0680 	ubfx	r6, r6, #2, #1
            FPGA_setlock(fpga_generic);
   82464:	2001      	movs	r0, #1
   82466:	47a8      	blx	r5
            if ((flags >> 1) & 0x1){ // write the key
   82468:	9b01      	ldr	r3, [sp, #4]
   8246a:	b97b      	cbnz	r3, 8248c <ctrl_writemem_ctrl_sam3u+0x6c>
            if ((flags >> 2) & 0x1){ // write the pts
   8246c:	bb0e      	cbnz	r6, 824b2 <ctrl_writemem_ctrl_sam3u+0x92>
            FPGA_setlock(fpga_unlocked);
   8246e:	2000      	movs	r0, #0
   82470:	47a8      	blx	r5
            gpio_set_pin_high(FPGA_TRIGGER_GPIO);
   82472:	2057      	movs	r0, #87	; 0x57
   82474:	47d0      	blx	sl
            delay_cycles(50);
   82476:	2032      	movs	r0, #50	; 0x32
   82478:	47c8      	blx	r9
        for(unsigned int b = 0; b < (flags >> 16); b++){
   8247a:	3401      	adds	r4, #1
            gpio_set_pin_low(FPGA_TRIGGER_GPIO);
   8247c:	2057      	movs	r0, #87	; 0x57
   8247e:	4b1d      	ldr	r3, [pc, #116]	; (824f4 <ctrl_writemem_ctrl_sam3u+0xd4>)
   82480:	4798      	blx	r3
        for(unsigned int b = 0; b < (flags >> 16); b++){
   82482:	42bc      	cmp	r4, r7
   82484:	d1ee      	bne.n	82464 <ctrl_writemem_ctrl_sam3u+0x44>
}
   82486:	b003      	add	sp, #12
   82488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8248c:	f44f 62a0 	mov.w	r2, #1280	; 0x500
                    xram[j+0x400+0x100] = seed >> 24;
   82490:	f8db 0000 	ldr.w	r0, [fp]
   82494:	ea4f 6c18 	mov.w	ip, r8, lsr #24
   82498:	f800 c002 	strb.w	ip, [r0, r2]
                    seed += (seed*seed) | 0x5;
   8249c:	fb08 f008 	mul.w	r0, r8, r8
                for(unsigned int j = 0; j < 16; j++){
   824a0:	3201      	adds	r2, #1
                    seed += (seed*seed) | 0x5;
   824a2:	f040 0005 	orr.w	r0, r0, #5
                for(unsigned int j = 0; j < 16; j++){
   824a6:	f5b2 6fa2 	cmp.w	r2, #1296	; 0x510
                    seed += (seed*seed) | 0x5;
   824aa:	4480      	add	r8, r0
                for(unsigned int j = 0; j < 16; j++){
   824ac:	d1f0      	bne.n	82490 <ctrl_writemem_ctrl_sam3u+0x70>
            if ((flags >> 2) & 0x1){ // write the pts
   824ae:	2e00      	cmp	r6, #0
   824b0:	d0dd      	beq.n	8246e <ctrl_writemem_ctrl_sam3u+0x4e>
   824b2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
                    xram[j+0x400+0x200] = seed >> 24;
   824b6:	f8db 0000 	ldr.w	r0, [fp]
   824ba:	ea4f 6c18 	mov.w	ip, r8, lsr #24
   824be:	f800 c002 	strb.w	ip, [r0, r2]
                    seed += (seed*seed) | 0x5;
   824c2:	fb08 f008 	mul.w	r0, r8, r8
                for(unsigned int j = 0; j < 16; j++){
   824c6:	3201      	adds	r2, #1
                    seed += (seed*seed) | 0x5;
   824c8:	f040 0005 	orr.w	r0, r0, #5
                for(unsigned int j = 0; j < 16; j++){
   824cc:	f5b2 6fc2 	cmp.w	r2, #1552	; 0x610
                    seed += (seed*seed) | 0x5;
   824d0:	4480      	add	r8, r0
                for(unsigned int j = 0; j < 16; j++){
   824d2:	d1f0      	bne.n	824b6 <ctrl_writemem_ctrl_sam3u+0x96>
   824d4:	e7cb      	b.n	8246e <ctrl_writemem_ctrl_sam3u+0x4e>
   824d6:	bf00      	nop
   824d8:	20071514 	.word	0x20071514
   824dc:	20071cf0 	.word	0x20071cf0
   824e0:	00085c49 	.word	0x00085c49
   824e4:	00082a61 	.word	0x00082a61
   824e8:	00083591 	.word	0x00083591
   824ec:	200701b5 	.word	0x200701b5
   824f0:	20070944 	.word	0x20070944
   824f4:	000835ad 	.word	0x000835ad

000824f8 <main_vendor_bulk_out_received>:
{
   824f8:	b570      	push	{r4, r5, r6, lr}
    if (UDD_EP_TRANSFER_OK != status) {
   824fa:	b9a8      	cbnz	r0, 82528 <main_vendor_bulk_out_received+0x30>
    if (blockendpoint_usage == bep_emem){
   824fc:	4b18      	ldr	r3, [pc, #96]	; (82560 <main_vendor_bulk_out_received+0x68>)
   824fe:	781b      	ldrb	r3, [r3, #0]
   82500:	b9d3      	cbnz	r3, 82538 <main_vendor_bulk_out_received+0x40>
        for(unsigned int i = 0; i < nb_transfered; i++){
   82502:	b169      	cbz	r1, 82520 <main_vendor_bulk_out_received+0x28>
   82504:	4b17      	ldr	r3, [pc, #92]	; (82564 <main_vendor_bulk_out_received+0x6c>)
   82506:	4e18      	ldr	r6, [pc, #96]	; (82568 <main_vendor_bulk_out_received+0x70>)
   82508:	4818      	ldr	r0, [pc, #96]	; (8256c <main_vendor_bulk_out_received+0x74>)
   8250a:	4419      	add	r1, r3
            xram[bulk_fpga_write_addr++] = main_buf_loopback[i];
   8250c:	6802      	ldr	r2, [r0, #0]
   8250e:	f813 cb01 	ldrb.w	ip, [r3], #1
   82512:	6834      	ldr	r4, [r6, #0]
   82514:	1c55      	adds	r5, r2, #1
        for(unsigned int i = 0; i < nb_transfered; i++){
   82516:	4299      	cmp	r1, r3
            xram[bulk_fpga_write_addr++] = main_buf_loopback[i];
   82518:	6005      	str	r5, [r0, #0]
   8251a:	f804 c002 	strb.w	ip, [r4, r2]
        for(unsigned int i = 0; i < nb_transfered; i++){
   8251e:	d1f5      	bne.n	8250c <main_vendor_bulk_out_received+0x14>
        if (FPGA_lockstatus() == fpga_blockout){
   82520:	4b13      	ldr	r3, [pc, #76]	; (82570 <main_vendor_bulk_out_received+0x78>)
   82522:	4798      	blx	r3
   82524:	2804      	cmp	r0, #4
   82526:	d016      	beq.n	82556 <main_vendor_bulk_out_received+0x5e>
}
   82528:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        udi_vendor_bulk_out_run(
   8252c:	f44f 6180 	mov.w	r1, #1024	; 0x400
   82530:	4a10      	ldr	r2, [pc, #64]	; (82574 <main_vendor_bulk_out_received+0x7c>)
   82532:	480c      	ldr	r0, [pc, #48]	; (82564 <main_vendor_bulk_out_received+0x6c>)
   82534:	4b10      	ldr	r3, [pc, #64]	; (82578 <main_vendor_bulk_out_received+0x80>)
   82536:	4718      	bx	r3
    } else if (blockendpoint_usage == bep_fpgabitstream){
   82538:	2b0a      	cmp	r3, #10
   8253a:	d1f5      	bne.n	82528 <main_vendor_bulk_out_received+0x30>
        for(unsigned int i = 0; i < nb_transfered; i++){
   8253c:	b139      	cbz	r1, 8254e <main_vendor_bulk_out_received+0x56>
   8253e:	4d09      	ldr	r5, [pc, #36]	; (82564 <main_vendor_bulk_out_received+0x6c>)
   82540:	4e0e      	ldr	r6, [pc, #56]	; (8257c <main_vendor_bulk_out_received+0x84>)
   82542:	194c      	adds	r4, r1, r5
            fpga_program_sendbyte(main_buf_loopback[i]);
   82544:	f815 0b01 	ldrb.w	r0, [r5], #1
   82548:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   8254a:	42a5      	cmp	r5, r4
   8254c:	d1fa      	bne.n	82544 <main_vendor_bulk_out_received+0x4c>
        FPGA_CCLK_LOW();
   8254e:	2038      	movs	r0, #56	; 0x38
   82550:	4b0b      	ldr	r3, [pc, #44]	; (82580 <main_vendor_bulk_out_received+0x88>)
   82552:	4798      	blx	r3
   82554:	e7e8      	b.n	82528 <main_vendor_bulk_out_received+0x30>
            FPGA_setlock(fpga_unlocked);
   82556:	4b0b      	ldr	r3, [pc, #44]	; (82584 <main_vendor_bulk_out_received+0x8c>)
   82558:	2000      	movs	r0, #0
   8255a:	4798      	blx	r3
   8255c:	e7e4      	b.n	82528 <main_vendor_bulk_out_received+0x30>
   8255e:	bf00      	nop
   82560:	20071c9d 	.word	0x20071c9d
   82564:	20071594 	.word	0x20071594
   82568:	20070944 	.word	0x20070944
   8256c:	20071ca0 	.word	0x20071ca0
   82570:	00082a9d 	.word	0x00082a9d
   82574:	000824f9 	.word	0x000824f9
   82578:	000834bd 	.word	0x000834bd
   8257c:	00082add 	.word	0x00082add
   82580:	000835ad 	.word	0x000835ad
   82584:	00082a61 	.word	0x00082a61

00082588 <fpga_target_setup_in_received>:
{
   82588:	b570      	push	{r4, r5, r6, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   8258a:	4c3a      	ldr	r4, [pc, #232]	; (82674 <fpga_target_setup_in_received+0xec>)
   8258c:	7863      	ldrb	r3, [r4, #1]
   8258e:	3b12      	subs	r3, #18
   82590:	2b23      	cmp	r3, #35	; 0x23
   82592:	d813      	bhi.n	825bc <fpga_target_setup_in_received+0x34>
   82594:	e8df f003 	tbb	[pc, r3]
   82598:	2612121c 	.word	0x2612121c
   8259c:	12121212 	.word	0x12121212
   825a0:	12121212 	.word	0x12121212
   825a4:	12121212 	.word	0x12121212
   825a8:	12121212 	.word	0x12121212
   825ac:	12121212 	.word	0x12121212
   825b0:	12121212 	.word	0x12121212
   825b4:	4a3e1212 	.word	0x4a3e1212
   825b8:	14605812 	.word	0x14605812
                return false;
   825bc:	2000      	movs	r0, #0
}
   825be:	bd70      	pop	{r4, r5, r6, pc}
 			if (udd_g_ctrlreq.req.wLength > sizeof(spi1util_data_buffer))
   825c0:	88e3      	ldrh	r3, [r4, #6]
   825c2:	2b40      	cmp	r3, #64	; 0x40
   825c4:	d8fa      	bhi.n	825bc <fpga_target_setup_in_received+0x34>
			udd_g_ctrlreq.payload = spi1util_data_buffer;
   825c6:	4a2c      	ldr	r2, [pc, #176]	; (82678 <fpga_target_setup_in_received+0xf0>)
			return true;
   825c8:	2001      	movs	r0, #1
			udd_g_ctrlreq.payload = spi1util_data_buffer;
   825ca:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   825cc:	81a3      	strh	r3, [r4, #12]
}
   825ce:	bd70      	pop	{r4, r5, r6, pc}
            ctrlmemread_size = 0;
   825d0:	2200      	movs	r2, #0
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   825d2:	4b2a      	ldr	r3, [pc, #168]	; (8267c <fpga_target_setup_in_received+0xf4>)
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   825d4:	492a      	ldr	r1, [pc, #168]	; (82680 <fpga_target_setup_in_received+0xf8>)
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   825d6:	6818      	ldr	r0, [r3, #0]
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   825d8:	6809      	ldr	r1, [r1, #0]
            ctrlmemread_size = 0;
   825da:	601a      	str	r2, [r3, #0]
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   825dc:	81a0      	strh	r0, [r4, #12]
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   825de:	60a1      	str	r1, [r4, #8]
            return true;
   825e0:	2001      	movs	r0, #1
}
   825e2:	bd70      	pop	{r4, r5, r6, pc}
            respbuf[0] = FPGA_ISDONE();
   825e4:	4e27      	ldr	r6, [pc, #156]	; (82684 <fpga_target_setup_in_received+0xfc>)
   825e6:	2031      	movs	r0, #49	; 0x31
   825e8:	47b0      	blx	r6
   825ea:	4603      	mov	r3, r0
   825ec:	3b00      	subs	r3, #0
   825ee:	bf18      	it	ne
   825f0:	2301      	movne	r3, #1
   825f2:	4d25      	ldr	r5, [pc, #148]	; (82688 <fpga_target_setup_in_received+0x100>)
            respbuf[1] = FPGA_INITB_STATUS();
   825f4:	2032      	movs	r0, #50	; 0x32
            respbuf[0] = FPGA_ISDONE();
   825f6:	702b      	strb	r3, [r5, #0]
            respbuf[1] = FPGA_INITB_STATUS();
   825f8:	47b0      	blx	r6
            respbuf[2] = 0;
   825fa:	2100      	movs	r1, #0
            respbuf[1] = FPGA_INITB_STATUS();
   825fc:	4603      	mov	r3, r0
   825fe:	1a5b      	subs	r3, r3, r1
            udd_g_ctrlreq.payload_size = 4;
   82600:	f04f 0204 	mov.w	r2, #4
            respbuf[1] = FPGA_INITB_STATUS();
   82604:	bf18      	it	ne
   82606:	2301      	movne	r3, #1
            return true;
   82608:	2001      	movs	r0, #1
            udd_g_ctrlreq.payload = respbuf;
   8260a:	60a5      	str	r5, [r4, #8]
            respbuf[2] = 0;
   8260c:	8069      	strh	r1, [r5, #2]
            udd_g_ctrlreq.payload_size = 4;
   8260e:	81a2      	strh	r2, [r4, #12]
            respbuf[1] = FPGA_INITB_STATUS();
   82610:	706b      	strb	r3, [r5, #1]
}
   82612:	bd70      	pop	{r4, r5, r6, pc}
            udd_g_ctrlreq.payload_size = 2;
   82614:	2202      	movs	r2, #2
            respbuf[0] = cdce906_status;
   82616:	481d      	ldr	r0, [pc, #116]	; (8268c <fpga_target_setup_in_received+0x104>)
            respbuf[1] = cdce906_data;
   82618:	491d      	ldr	r1, [pc, #116]	; (82690 <fpga_target_setup_in_received+0x108>)
            respbuf[0] = cdce906_status;
   8261a:	4b1b      	ldr	r3, [pc, #108]	; (82688 <fpga_target_setup_in_received+0x100>)
   8261c:	7800      	ldrb	r0, [r0, #0]
            respbuf[1] = cdce906_data;
   8261e:	7809      	ldrb	r1, [r1, #0]
            respbuf[0] = cdce906_status;
   82620:	7018      	strb	r0, [r3, #0]
            respbuf[1] = cdce906_data;
   82622:	7059      	strb	r1, [r3, #1]
            return true;
   82624:	2001      	movs	r0, #1
            udd_g_ctrlreq.payload = respbuf;
   82626:	60a3      	str	r3, [r4, #8]
            udd_g_ctrlreq.payload_size = 2;
   82628:	81a2      	strh	r2, [r4, #12]
}
   8262a:	bd70      	pop	{r4, r5, r6, pc}
            udd_g_ctrlreq.payload_size = 3;
   8262c:	2103      	movs	r1, #3
            respbuf[1] = (uint8_t)vccint_setting;
   8262e:	4b19      	ldr	r3, [pc, #100]	; (82694 <fpga_target_setup_in_received+0x10c>)
            respbuf[0] = vccint_status;
   82630:	4819      	ldr	r0, [pc, #100]	; (82698 <fpga_target_setup_in_received+0x110>)
            respbuf[1] = (uint8_t)vccint_setting;
   82632:	881a      	ldrh	r2, [r3, #0]
            respbuf[0] = vccint_status;
   82634:	4b14      	ldr	r3, [pc, #80]	; (82688 <fpga_target_setup_in_received+0x100>)
   82636:	7800      	ldrb	r0, [r0, #0]
            respbuf[1] = (uint8_t)vccint_setting;
   82638:	705a      	strb	r2, [r3, #1]
            respbuf[2] = (uint8_t)(vccint_setting >> 8);
   8263a:	0a12      	lsrs	r2, r2, #8
            respbuf[0] = vccint_status;
   8263c:	7018      	strb	r0, [r3, #0]
            respbuf[2] = (uint8_t)(vccint_setting >> 8);
   8263e:	709a      	strb	r2, [r3, #2]
            return true;
   82640:	2001      	movs	r0, #1
            udd_g_ctrlreq.payload = respbuf;
   82642:	60a3      	str	r3, [r4, #8]
            udd_g_ctrlreq.payload_size = 3;
   82644:	81a1      	strh	r1, [r4, #12]
}
   82646:	bd70      	pop	{r4, r5, r6, pc}
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer))
   82648:	88e3      	ldrh	r3, [r4, #6]
   8264a:	2b40      	cmp	r3, #64	; 0x40
   8264c:	d8b6      	bhi.n	825bc <fpga_target_setup_in_received+0x34>
			udd_g_ctrlreq.payload = fpgaspi_data_buffer;
   8264e:	4a13      	ldr	r2, [pc, #76]	; (8269c <fpga_target_setup_in_received+0x114>)
			return true;
   82650:	2001      	movs	r0, #1
			udd_g_ctrlreq.payload = fpgaspi_data_buffer;
   82652:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   82654:	81a3      	strh	r3, [r4, #12]
}
   82656:	bd70      	pop	{r4, r5, r6, pc}
			respbuf[0] = gpio_pin_is_high(pin);
   82658:	78a0      	ldrb	r0, [r4, #2]
   8265a:	4b0a      	ldr	r3, [pc, #40]	; (82684 <fpga_target_setup_in_received+0xfc>)
   8265c:	4798      	blx	r3
   8265e:	1e03      	subs	r3, r0, #0
   82660:	bf18      	it	ne
   82662:	2301      	movne	r3, #1
			udd_g_ctrlreq.payload_size = 1;
   82664:	2101      	movs	r1, #1
			respbuf[0] = gpio_pin_is_high(pin);
   82666:	4a08      	ldr	r2, [pc, #32]	; (82688 <fpga_target_setup_in_received+0x100>)
			return true;
   82668:	4608      	mov	r0, r1
			respbuf[0] = gpio_pin_is_high(pin);
   8266a:	7013      	strb	r3, [r2, #0]
			udd_g_ctrlreq.payload = respbuf;
   8266c:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = 1;
   8266e:	81a1      	strh	r1, [r4, #12]
}
   82670:	bd70      	pop	{r4, r5, r6, pc}
   82672:	bf00      	nop
   82674:	20072288 	.word	0x20072288
   82678:	200720f0 	.word	0x200720f0
   8267c:	20071cac 	.word	0x20071cac
   82680:	20071ca8 	.word	0x20071ca8
   82684:	00083575 	.word	0x00083575
   82688:	20071a18 	.word	0x20071a18
   8268c:	20071ca5 	.word	0x20071ca5
   82690:	20071ca4 	.word	0x20071ca4
   82694:	20070940 	.word	0x20070940
   82698:	20072130 	.word	0x20072130
   8269c:	20071cb0 	.word	0x20071cb0

000826a0 <ctrl_vccint_cb>:
{
   826a0:	b538      	push	{r3, r4, r5, lr}
    if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   826a2:	4b16      	ldr	r3, [pc, #88]	; (826fc <ctrl_vccint_cb+0x5c>)
   826a4:	88d9      	ldrh	r1, [r3, #6]
   826a6:	899a      	ldrh	r2, [r3, #12]
   826a8:	428a      	cmp	r2, r1
   826aa:	d315      	bcc.n	826d8 <ctrl_vccint_cb+0x38>
    if ((udd_g_ctrlreq.payload[0] ^ udd_g_ctrlreq.payload[1] ^ 0xAE) != (udd_g_ctrlreq.payload[2])){
   826ac:	689a      	ldr	r2, [r3, #8]
   826ae:	7813      	ldrb	r3, [r2, #0]
   826b0:	f892 c001 	ldrb.w	ip, [r2, #1]
   826b4:	7890      	ldrb	r0, [r2, #2]
   826b6:	ea83 030c 	eor.w	r3, r3, ip
   826ba:	f083 03ae 	eor.w	r3, r3, #174	; 0xae
   826be:	4298      	cmp	r0, r3
   826c0:	d107      	bne.n	826d2 <ctrl_vccint_cb+0x32>
    if (udd_g_ctrlreq.req.wLength < 3){
   826c2:	2902      	cmp	r1, #2
   826c4:	d916      	bls.n	826f4 <ctrl_vccint_cb+0x54>
   826c6:	8814      	ldrh	r4, [r2, #0]
    if ((vcctemp < 600) || (vcctemp > 1200)){
   826c8:	f5a4 7316 	sub.w	r3, r4, #600	; 0x258
   826cc:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   826d0:	d903      	bls.n	826da <ctrl_vccint_cb+0x3a>
        vccint_status = USB_STATUS_PARAMWRONG;
   826d2:	2201      	movs	r2, #1
   826d4:	4b0a      	ldr	r3, [pc, #40]	; (82700 <ctrl_vccint_cb+0x60>)
   826d6:	701a      	strb	r2, [r3, #0]
}
   826d8:	bd38      	pop	{r3, r4, r5, pc}
    vccint_status = USB_STATUS_COMMERR;
   826da:	2203      	movs	r2, #3
   826dc:	4d08      	ldr	r5, [pc, #32]	; (82700 <ctrl_vccint_cb+0x60>)
    if (tps56520_set(vcctemp)){
   826de:	4620      	mov	r0, r4
   826e0:	4b08      	ldr	r3, [pc, #32]	; (82704 <ctrl_vccint_cb+0x64>)
    vccint_status = USB_STATUS_COMMERR;
   826e2:	702a      	strb	r2, [r5, #0]
    if (tps56520_set(vcctemp)){
   826e4:	4798      	blx	r3
   826e6:	2800      	cmp	r0, #0
   826e8:	d0f6      	beq.n	826d8 <ctrl_vccint_cb+0x38>
        vccint_status = USB_STATUS_OK;
   826ea:	2302      	movs	r3, #2
        vccint_setting = vcctemp;
   826ec:	4a06      	ldr	r2, [pc, #24]	; (82708 <ctrl_vccint_cb+0x68>)
        vccint_status = USB_STATUS_OK;
   826ee:	702b      	strb	r3, [r5, #0]
        vccint_setting = vcctemp;
   826f0:	8014      	strh	r4, [r2, #0]
}
   826f2:	bd38      	pop	{r3, r4, r5, pc}
        vccint_status = USB_STATUS_CSFAIL;
   826f4:	2204      	movs	r2, #4
   826f6:	4b02      	ldr	r3, [pc, #8]	; (82700 <ctrl_vccint_cb+0x60>)
   826f8:	701a      	strb	r2, [r3, #0]
}
   826fa:	bd38      	pop	{r3, r4, r5, pc}
   826fc:	20072288 	.word	0x20072288
   82700:	20072130 	.word	0x20072130
   82704:	00082cd9 	.word	0x00082cd9
   82708:	20070940 	.word	0x20070940

0008270c <main_vendor_bulk_in_received>:
    if (UDD_EP_TRANSFER_OK != status) {
   8270c:	b100      	cbz	r0, 82710 <main_vendor_bulk_in_received+0x4>
   8270e:	4770      	bx	lr
{
   82710:	b510      	push	{r4, lr}
    if (FPGA_lockstatus() == fpga_blockin){		
   82712:	4b05      	ldr	r3, [pc, #20]	; (82728 <main_vendor_bulk_in_received+0x1c>)
   82714:	4604      	mov	r4, r0
   82716:	4798      	blx	r3
   82718:	2802      	cmp	r0, #2
   8271a:	d000      	beq.n	8271e <main_vendor_bulk_in_received+0x12>
}
   8271c:	bd10      	pop	{r4, pc}
        FPGA_setlock(fpga_unlocked);
   8271e:	4620      	mov	r0, r4
}
   82720:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FPGA_setlock(fpga_unlocked);
   82724:	4b01      	ldr	r3, [pc, #4]	; (8272c <main_vendor_bulk_in_received+0x20>)
   82726:	4718      	bx	r3
   82728:	00082a9d 	.word	0x00082a9d
   8272c:	00082a61 	.word	0x00082a61

00082730 <ctrl_progfpga_bulk>:
    switch(udd_g_ctrlreq.req.wValue){
   82730:	4a0d      	ldr	r2, [pc, #52]	; (82768 <ctrl_progfpga_bulk+0x38>)
   82732:	8853      	ldrh	r3, [r2, #2]
   82734:	2ba1      	cmp	r3, #161	; 0xa1
   82736:	d004      	beq.n	82742 <ctrl_progfpga_bulk+0x12>
   82738:	2ba2      	cmp	r3, #162	; 0xa2
   8273a:	d011      	beq.n	82760 <ctrl_progfpga_bulk+0x30>
   8273c:	2ba0      	cmp	r3, #160	; 0xa0
   8273e:	d007      	beq.n	82750 <ctrl_progfpga_bulk+0x20>
   82740:	4770      	bx	lr
            fpga_program_setup2();
   82742:	4b0a      	ldr	r3, [pc, #40]	; (8276c <ctrl_progfpga_bulk+0x3c>)
void ctrl_progfpga_bulk(void){
   82744:	b510      	push	{r4, lr}
            fpga_program_setup2();
   82746:	4798      	blx	r3
            blockendpoint_usage = bep_fpgabitstream;
   82748:	220a      	movs	r2, #10
   8274a:	4b09      	ldr	r3, [pc, #36]	; (82770 <ctrl_progfpga_bulk+0x40>)
   8274c:	701a      	strb	r2, [r3, #0]
}
   8274e:	bd10      	pop	{r4, pc}
            if (udd_g_ctrlreq.req.wLength == 4) {
   82750:	88d3      	ldrh	r3, [r2, #6]
   82752:	2b04      	cmp	r3, #4
                prog_freq = *(CTRLBUFFER_WORDPTR);
   82754:	bf0a      	itet	eq
   82756:	4b07      	ldreq	r3, [pc, #28]	; (82774 <ctrl_progfpga_bulk+0x44>)
    uint32_t prog_freq = 20E6;
   82758:	4807      	ldrne	r0, [pc, #28]	; (82778 <ctrl_progfpga_bulk+0x48>)
                prog_freq = *(CTRLBUFFER_WORDPTR);
   8275a:	6818      	ldreq	r0, [r3, #0]
            fpga_program_setup1(prog_freq);			
   8275c:	4b07      	ldr	r3, [pc, #28]	; (8277c <ctrl_progfpga_bulk+0x4c>)
   8275e:	4718      	bx	r3
            blockendpoint_usage = bep_emem;
   82760:	2200      	movs	r2, #0
   82762:	4b03      	ldr	r3, [pc, #12]	; (82770 <ctrl_progfpga_bulk+0x40>)
   82764:	701a      	strb	r2, [r3, #0]
}
   82766:	4770      	bx	lr
   82768:	20072288 	.word	0x20072288
   8276c:	00082ad1 	.word	0x00082ad1
   82770:	20071c9d 	.word	0x20071c9d
   82774:	20071514 	.word	0x20071514
   82778:	01312d00 	.word	0x01312d00
   8277c:	00082aa9 	.word	0x00082aa9

00082780 <fpga_target_sam_cfg_out>:
	switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   82780:	4b0f      	ldr	r3, [pc, #60]	; (827c0 <fpga_target_sam_cfg_out+0x40>)
   82782:	789b      	ldrb	r3, [r3, #2]
   82784:	2b05      	cmp	r3, #5
   82786:	d004      	beq.n	82792 <fpga_target_sam_cfg_out+0x12>
   82788:	2b06      	cmp	r3, #6
   8278a:	d00c      	beq.n	827a6 <fpga_target_sam_cfg_out+0x26>
   8278c:	2b04      	cmp	r3, #4
   8278e:	d005      	beq.n	8279c <fpga_target_sam_cfg_out+0x1c>
   82790:	4770      	bx	lr
	    gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   82792:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82796:	2036      	movs	r0, #54	; 0x36
   82798:	4b0a      	ldr	r3, [pc, #40]	; (827c4 <fpga_target_sam_cfg_out+0x44>)
   8279a:	4718      	bx	r3
	    gpio_configure_pin(PIN_PCK0, PIO_OUTPUT_0);
   8279c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   827a0:	2036      	movs	r0, #54	; 0x36
   827a2:	4b08      	ldr	r3, [pc, #32]	; (827c4 <fpga_target_sam_cfg_out+0x44>)
   827a4:	4718      	bx	r3
{
   827a6:	b510      	push	{r4, lr}
	    gpio_set_pin_high(FPGA_TRIGGER_GPIO);
   827a8:	2057      	movs	r0, #87	; 0x57
   827aa:	4b07      	ldr	r3, [pc, #28]	; (827c8 <fpga_target_sam_cfg_out+0x48>)
   827ac:	4798      	blx	r3
	    delay_cycles(250);
   827ae:	20fa      	movs	r0, #250	; 0xfa
   827b0:	4b06      	ldr	r3, [pc, #24]	; (827cc <fpga_target_sam_cfg_out+0x4c>)
   827b2:	4798      	blx	r3
}
   827b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    gpio_set_pin_low(FPGA_TRIGGER_GPIO);
   827b8:	2057      	movs	r0, #87	; 0x57
   827ba:	4b05      	ldr	r3, [pc, #20]	; (827d0 <fpga_target_sam_cfg_out+0x50>)
   827bc:	4718      	bx	r3
   827be:	bf00      	nop
   827c0:	20072288 	.word	0x20072288
   827c4:	000835ed 	.word	0x000835ed
   827c8:	00083591 	.word	0x00083591
   827cc:	200701b5 	.word	0x200701b5
   827d0:	000835ad 	.word	0x000835ad

000827d4 <ctrl_fpgaioutil>:
    if (udd_g_ctrlreq.req.wLength != 2){
   827d4:	4b3a      	ldr	r3, [pc, #232]	; (828c0 <ctrl_fpgaioutil+0xec>)
   827d6:	88da      	ldrh	r2, [r3, #6]
   827d8:	2a02      	cmp	r2, #2
   827da:	d000      	beq.n	827de <ctrl_fpgaioutil+0xa>
   827dc:	4770      	bx	lr
static void ctrl_fpgaioutil(void){
   827de:	b570      	push	{r4, r5, r6, lr}
    int pin = udd_g_ctrlreq.payload[0];
   827e0:	689a      	ldr	r2, [r3, #8]
   827e2:	7814      	ldrb	r4, [r2, #0]
	if ((pin < 0) || (pin > 95)){
   827e4:	2c5f      	cmp	r4, #95	; 0x5f
   827e6:	d807      	bhi.n	827f8 <ctrl_fpgaioutil+0x24>
	switch(udd_g_ctrlreq.req.wValue){
   827e8:	885b      	ldrh	r3, [r3, #2]
    int config = udd_g_ctrlreq.payload[1];
   827ea:	7852      	ldrb	r2, [r2, #1]
	switch(udd_g_ctrlreq.req.wValue){
   827ec:	2ba1      	cmp	r3, #161	; 0xa1
   827ee:	d013      	beq.n	82818 <ctrl_fpgaioutil+0x44>
   827f0:	2ba2      	cmp	r3, #162	; 0xa2
   827f2:	d017      	beq.n	82824 <ctrl_fpgaioutil+0x50>
   827f4:	2ba0      	cmp	r3, #160	; 0xa0
   827f6:	d000      	beq.n	827fa <ctrl_fpgaioutil+0x26>
}
   827f8:	bd70      	pop	{r4, r5, r6, pc}
            switch(config)
   827fa:	3a01      	subs	r2, #1
   827fc:	2a12      	cmp	r2, #18
   827fe:	d80b      	bhi.n	82818 <ctrl_fpgaioutil+0x44>
   82800:	e8df f002 	tbb	[pc, r2]
   82804:	0a0a3a49 	.word	0x0a0a3a49
   82808:	0a0a0a0a 	.word	0x0a0a0a0a
   8280c:	0a0a0a0a 	.word	0x0a0a0a0a
   82810:	410a0a0a 	.word	0x410a0a0a
   82814:	242f      	.short	0x242f
   82816:	19          	.byte	0x19
   82817:	00          	.byte	0x00
            gpio_configure_pin(pin, PIO_DEFAULT);
   82818:	4620      	mov	r0, r4
}
   8281a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            gpio_configure_pin(pin, PIO_DEFAULT);
   8281e:	2100      	movs	r1, #0
   82820:	4b28      	ldr	r3, [pc, #160]	; (828c4 <ctrl_fpgaioutil+0xf0>)
   82822:	4718      	bx	r3
            if (config == 0){
   82824:	2a00      	cmp	r2, #0
   82826:	d03d      	beq.n	828a4 <ctrl_fpgaioutil+0xd0>
            if (config == 1){
   82828:	2a01      	cmp	r2, #1
   8282a:	d1e5      	bne.n	827f8 <ctrl_fpgaioutil+0x24>
                gpio_set_pin_high(pin);
   8282c:	4620      	mov	r0, r4
}
   8282e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                gpio_set_pin_high(pin);
   82832:	4b25      	ldr	r3, [pc, #148]	; (828c8 <ctrl_fpgaioutil+0xf4>)
   82834:	4718      	bx	r3
                    if(pin_spi1_cs > -1){
   82836:	4e25      	ldr	r6, [pc, #148]	; (828cc <ctrl_fpgaioutil+0xf8>)
   82838:	6830      	ldr	r0, [r6, #0]
   8283a:	2800      	cmp	r0, #0
   8283c:	da3b      	bge.n	828b6 <ctrl_fpgaioutil+0xe2>
   8283e:	4d21      	ldr	r5, [pc, #132]	; (828c4 <ctrl_fpgaioutil+0xf0>)
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   82840:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82844:	4620      	mov	r0, r4
   82846:	47a8      	blx	r5
                    pin_spi1_cs = pin;                    
   82848:	6034      	str	r4, [r6, #0]
}
   8284a:	bd70      	pop	{r4, r5, r6, pc}
                    if(pin_spi1_sck > -1){
   8284c:	4e20      	ldr	r6, [pc, #128]	; (828d0 <ctrl_fpgaioutil+0xfc>)
   8284e:	6830      	ldr	r0, [r6, #0]
   82850:	2800      	cmp	r0, #0
   82852:	da1c      	bge.n	8288e <ctrl_fpgaioutil+0xba>
   82854:	4d1b      	ldr	r5, [pc, #108]	; (828c4 <ctrl_fpgaioutil+0xf0>)
                    gpio_configure_pin(pin, PIO_OUTPUT_0);
   82856:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8285a:	4620      	mov	r0, r4
   8285c:	47a8      	blx	r5
                    pin_spi1_sck = pin;
   8285e:	6034      	str	r4, [r6, #0]
}
   82860:	bd70      	pop	{r4, r5, r6, pc}
                    if(pin_spi1_miso > -1){
   82862:	4e1c      	ldr	r6, [pc, #112]	; (828d4 <ctrl_fpgaioutil+0x100>)
   82864:	6830      	ldr	r0, [r6, #0]
   82866:	2800      	cmp	r0, #0
   82868:	da21      	bge.n	828ae <ctrl_fpgaioutil+0xda>
   8286a:	4d16      	ldr	r5, [pc, #88]	; (828c4 <ctrl_fpgaioutil+0xf0>)
                    gpio_configure_pin(pin, PIO_INPUT);
   8286c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82870:	4620      	mov	r0, r4
   82872:	47a8      	blx	r5
                    pin_spi1_miso = pin;
   82874:	6034      	str	r4, [r6, #0]
}
   82876:	bd70      	pop	{r4, r5, r6, pc}
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   82878:	4620      	mov	r0, r4
}
   8287a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   8287e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82882:	4b10      	ldr	r3, [pc, #64]	; (828c4 <ctrl_fpgaioutil+0xf0>)
   82884:	4718      	bx	r3
                    if(pin_spi1_mosi > -1){
   82886:	4e14      	ldr	r6, [pc, #80]	; (828d8 <ctrl_fpgaioutil+0x104>)
   82888:	6830      	ldr	r0, [r6, #0]
   8288a:	2800      	cmp	r0, #0
   8288c:	dbe2      	blt.n	82854 <ctrl_fpgaioutil+0x80>
                        gpio_configure_pin(pin_spi1_sck, PIO_DEFAULT);
   8288e:	2100      	movs	r1, #0
   82890:	4d0c      	ldr	r5, [pc, #48]	; (828c4 <ctrl_fpgaioutil+0xf0>)
   82892:	47a8      	blx	r5
   82894:	e7df      	b.n	82856 <ctrl_fpgaioutil+0x82>
                    gpio_configure_pin(pin, PIO_INPUT);
   82896:	4620      	mov	r0, r4
}
   82898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    gpio_configure_pin(pin, PIO_INPUT);
   8289c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   828a0:	4b08      	ldr	r3, [pc, #32]	; (828c4 <ctrl_fpgaioutil+0xf0>)
   828a2:	4718      	bx	r3
                gpio_set_pin_low(pin);
   828a4:	4620      	mov	r0, r4
}
   828a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                gpio_set_pin_low(pin);
   828aa:	4b0c      	ldr	r3, [pc, #48]	; (828dc <ctrl_fpgaioutil+0x108>)
   828ac:	4718      	bx	r3
                        gpio_configure_pin(pin_spi1_miso, PIO_DEFAULT);
   828ae:	2100      	movs	r1, #0
   828b0:	4d04      	ldr	r5, [pc, #16]	; (828c4 <ctrl_fpgaioutil+0xf0>)
   828b2:	47a8      	blx	r5
   828b4:	e7da      	b.n	8286c <ctrl_fpgaioutil+0x98>
                        gpio_configure_pin(pin_spi1_cs, PIO_DEFAULT);
   828b6:	2100      	movs	r1, #0
   828b8:	4d02      	ldr	r5, [pc, #8]	; (828c4 <ctrl_fpgaioutil+0xf0>)
   828ba:	47a8      	blx	r5
   828bc:	e7c0      	b.n	82840 <ctrl_fpgaioutil+0x6c>
   828be:	bf00      	nop
   828c0:	20072288 	.word	0x20072288
   828c4:	000835ed 	.word	0x000835ed
   828c8:	00083591 	.word	0x00083591
   828cc:	200701c0 	.word	0x200701c0
   828d0:	200701cc 	.word	0x200701cc
   828d4:	200701c4 	.word	0x200701c4
   828d8:	200701c8 	.word	0x200701c8
   828dc:	000835ad 	.word	0x000835ad

000828e0 <ctrl_spi1util>:
static void ctrl_spi1util(void){
   828e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(udd_g_ctrlreq.req.wValue){
   828e4:	4c17      	ldr	r4, [pc, #92]	; (82944 <ctrl_spi1util+0x64>)
   828e6:	8863      	ldrh	r3, [r4, #2]
   828e8:	3ba0      	subs	r3, #160	; 0xa0
   828ea:	2b04      	cmp	r3, #4
   828ec:	d817      	bhi.n	8291e <ctrl_spi1util+0x3e>
   828ee:	e8df f003 	tbb	[pc, r3]
   828f2:	1c18      	.short	0x1c18
   828f4:	2420      	.short	0x2420
   828f6:	03          	.byte	0x03
   828f7:	00          	.byte	0x00
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   828f8:	88e3      	ldrh	r3, [r4, #6]
   828fa:	89a2      	ldrh	r2, [r4, #12]
   828fc:	429a      	cmp	r2, r3
   828fe:	d30e      	bcc.n	8291e <ctrl_spi1util+0x3e>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer)){
   82900:	3b01      	subs	r3, #1
   82902:	2b3f      	cmp	r3, #63	; 0x3f
   82904:	d80b      	bhi.n	8291e <ctrl_spi1util+0x3e>
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82906:	2500      	movs	r5, #0
   82908:	4e0f      	ldr	r6, [pc, #60]	; (82948 <ctrl_spi1util+0x68>)
   8290a:	4f10      	ldr	r7, [pc, #64]	; (8294c <ctrl_spi1util+0x6c>)
				spi1util_data_buffer[i] = spi1util_xferbyte(udd_g_ctrlreq.payload[i]);
   8290c:	68a3      	ldr	r3, [r4, #8]
   8290e:	5d58      	ldrb	r0, [r3, r5]
   82910:	47b8      	blx	r7
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82912:	88e3      	ldrh	r3, [r4, #6]
   82914:	3501      	adds	r5, #1
   82916:	429d      	cmp	r5, r3
				spi1util_data_buffer[i] = spi1util_xferbyte(udd_g_ctrlreq.payload[i]);
   82918:	f806 0b01 	strb.w	r0, [r6], #1
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   8291c:	dbf6      	blt.n	8290c <ctrl_spi1util+0x2c>
}
   8291e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			spi1util_init();			
   82922:	4b0b      	ldr	r3, [pc, #44]	; (82950 <ctrl_spi1util+0x70>)
}
   82924:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_init();			
   82928:	4718      	bx	r3
			spi1util_deinit();
   8292a:	4b0a      	ldr	r3, [pc, #40]	; (82954 <ctrl_spi1util+0x74>)
}
   8292c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_deinit();
   82930:	4718      	bx	r3
			spi1util_cs_low();
   82932:	4b09      	ldr	r3, [pc, #36]	; (82958 <ctrl_spi1util+0x78>)
}
   82934:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_cs_low();
   82938:	4718      	bx	r3
			spi1util_cs_high();
   8293a:	4b08      	ldr	r3, [pc, #32]	; (8295c <ctrl_spi1util+0x7c>)
}
   8293c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_cs_high();
   82940:	4718      	bx	r3
   82942:	bf00      	nop
   82944:	20072288 	.word	0x20072288
   82948:	200720f0 	.word	0x200720f0
   8294c:	000801ed 	.word	0x000801ed
   82950:	000801a5 	.word	0x000801a5
   82954:	00080275 	.word	0x00080275
   82958:	000801cd 	.word	0x000801cd
   8295c:	000801dd 	.word	0x000801dd

00082960 <ctrl_progfpgaspi>:
static void ctrl_progfpgaspi(void){
   82960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(udd_g_ctrlreq.req.wValue){
   82964:	4c17      	ldr	r4, [pc, #92]	; (829c4 <ctrl_progfpgaspi+0x64>)
   82966:	8863      	ldrh	r3, [r4, #2]
   82968:	3ba0      	subs	r3, #160	; 0xa0
   8296a:	2b04      	cmp	r3, #4
   8296c:	d817      	bhi.n	8299e <ctrl_progfpgaspi+0x3e>
   8296e:	e8df f003 	tbb	[pc, r3]
   82972:	1c18      	.short	0x1c18
   82974:	2420      	.short	0x2420
   82976:	03          	.byte	0x03
   82977:	00          	.byte	0x00
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82978:	88e3      	ldrh	r3, [r4, #6]
   8297a:	89a2      	ldrh	r2, [r4, #12]
   8297c:	429a      	cmp	r2, r3
   8297e:	d30e      	bcc.n	8299e <ctrl_progfpgaspi+0x3e>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer)){
   82980:	3b01      	subs	r3, #1
   82982:	2b3f      	cmp	r3, #63	; 0x3f
   82984:	d80b      	bhi.n	8299e <ctrl_progfpgaspi+0x3e>
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82986:	2500      	movs	r5, #0
   82988:	4e0f      	ldr	r6, [pc, #60]	; (829c8 <ctrl_progfpgaspi+0x68>)
   8298a:	4f10      	ldr	r7, [pc, #64]	; (829cc <ctrl_progfpgaspi+0x6c>)
				fpgaspi_data_buffer[i] = fpgaspi_xferbyte(udd_g_ctrlreq.payload[i]);
   8298c:	68a3      	ldr	r3, [r4, #8]
   8298e:	5d58      	ldrb	r0, [r3, r5]
   82990:	47b8      	blx	r7
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82992:	88e3      	ldrh	r3, [r4, #6]
   82994:	3501      	adds	r5, #1
   82996:	429d      	cmp	r5, r3
				fpgaspi_data_buffer[i] = fpgaspi_xferbyte(udd_g_ctrlreq.payload[i]);
   82998:	f806 0b01 	strb.w	r0, [r6], #1
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   8299c:	dbf6      	blt.n	8298c <ctrl_progfpgaspi+0x2c>
}
   8299e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fpgaspi_program_init();			
   829a2:	4b0b      	ldr	r3, [pc, #44]	; (829d0 <ctrl_progfpgaspi+0x70>)
}
   829a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_program_init();			
   829a8:	4718      	bx	r3
			fpgaspi_program_deinit();
   829aa:	4b0a      	ldr	r3, [pc, #40]	; (829d4 <ctrl_progfpgaspi+0x74>)
}
   829ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_program_deinit();
   829b0:	4718      	bx	r3
			fpgaspi_cs_low();
   829b2:	4b09      	ldr	r3, [pc, #36]	; (829d8 <ctrl_progfpgaspi+0x78>)
}
   829b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_cs_low();
   829b8:	4718      	bx	r3
			fpgaspi_cs_high();
   829ba:	4b08      	ldr	r3, [pc, #32]	; (829dc <ctrl_progfpgaspi+0x7c>)
}
   829bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_cs_high();
   829c0:	4718      	bx	r3
   829c2:	bf00      	nop
   829c4:	20072288 	.word	0x20072288
   829c8:	20071cb0 	.word	0x20071cb0
   829cc:	00082b75 	.word	0x00082b75
   829d0:	00082b1d 	.word	0x00082b1d
   829d4:	00082be1 	.word	0x00082be1
   829d8:	00082b5d 	.word	0x00082b5d
   829dc:	00082b69 	.word	0x00082b69

000829e0 <ctrl_cdce906_cb>:
    if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   829e0:	4b11      	ldr	r3, [pc, #68]	; (82a28 <ctrl_cdce906_cb+0x48>)
   829e2:	88da      	ldrh	r2, [r3, #6]
   829e4:	8999      	ldrh	r1, [r3, #12]
   829e6:	4291      	cmp	r1, r2
   829e8:	d316      	bcc.n	82a18 <ctrl_cdce906_cb+0x38>
    if (udd_g_ctrlreq.req.wLength < 3){
   829ea:	2a02      	cmp	r2, #2
{
   829ec:	b510      	push	{r4, lr}
    if (udd_g_ctrlreq.req.wLength < 3){
   829ee:	d90f      	bls.n	82a10 <ctrl_cdce906_cb+0x30>
    cdce906_status = USB_STATUS_COMMERR;
   829f0:	2103      	movs	r1, #3
    if (udd_g_ctrlreq.payload[0] == 0x00){
   829f2:	689b      	ldr	r3, [r3, #8]
    cdce906_status = USB_STATUS_COMMERR;
   829f4:	4c0d      	ldr	r4, [pc, #52]	; (82a2c <ctrl_cdce906_cb+0x4c>)
    if (udd_g_ctrlreq.payload[0] == 0x00){
   829f6:	781a      	ldrb	r2, [r3, #0]
    cdce906_status = USB_STATUS_COMMERR;
   829f8:	7021      	strb	r1, [r4, #0]
    if (udd_g_ctrlreq.payload[0] == 0x00){
   829fa:	b172      	cbz	r2, 82a1a <ctrl_cdce906_cb+0x3a>
    } else if (udd_g_ctrlreq.payload[0] == 0x01){
   829fc:	2a01      	cmp	r2, #1
   829fe:	d108      	bne.n	82a12 <ctrl_cdce906_cb+0x32>
        if (cdce906_write(udd_g_ctrlreq.payload[1], udd_g_ctrlreq.payload[2])){
   82a00:	7899      	ldrb	r1, [r3, #2]
   82a02:	7858      	ldrb	r0, [r3, #1]
   82a04:	4b0a      	ldr	r3, [pc, #40]	; (82a30 <ctrl_cdce906_cb+0x50>)
   82a06:	4798      	blx	r3
   82a08:	b108      	cbz	r0, 82a0e <ctrl_cdce906_cb+0x2e>
            cdce906_status = USB_STATUS_OK;
   82a0a:	2302      	movs	r3, #2
   82a0c:	7023      	strb	r3, [r4, #0]
}
   82a0e:	bd10      	pop	{r4, pc}
   82a10:	4c06      	ldr	r4, [pc, #24]	; (82a2c <ctrl_cdce906_cb+0x4c>)
        cdce906_status = USB_STATUS_PARAMWRONG;
   82a12:	2301      	movs	r3, #1
   82a14:	7023      	strb	r3, [r4, #0]
}
   82a16:	bd10      	pop	{r4, pc}
   82a18:	4770      	bx	lr
        if (cdce906_read(udd_g_ctrlreq.payload[1], &cdce906_data)){
   82a1a:	7858      	ldrb	r0, [r3, #1]
   82a1c:	4905      	ldr	r1, [pc, #20]	; (82a34 <ctrl_cdce906_cb+0x54>)
   82a1e:	4b06      	ldr	r3, [pc, #24]	; (82a38 <ctrl_cdce906_cb+0x58>)
   82a20:	4798      	blx	r3
   82a22:	2800      	cmp	r0, #0
   82a24:	d0f3      	beq.n	82a0e <ctrl_cdce906_cb+0x2e>
   82a26:	e7f0      	b.n	82a0a <ctrl_cdce906_cb+0x2a>
   82a28:	20072288 	.word	0x20072288
   82a2c:	20071ca5 	.word	0x20071ca5
   82a30:	00082d91 	.word	0x00082d91
   82a34:	20071ca4 	.word	0x20071ca4
   82a38:	00082df1 	.word	0x00082df1

00082a3c <fpga_target_register_handlers>:

void fpga_target_register_handlers(void)
{
   82a3c:	b510      	push	{r4, lr}
    naeusb_add_in_handler(fpga_target_setup_in_received);
   82a3e:	4b04      	ldr	r3, [pc, #16]	; (82a50 <fpga_target_register_handlers+0x14>)
   82a40:	4804      	ldr	r0, [pc, #16]	; (82a54 <fpga_target_register_handlers+0x18>)
   82a42:	4798      	blx	r3
    naeusb_add_out_handler(fpga_target_setup_out_received);
   82a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    naeusb_add_out_handler(fpga_target_setup_out_received);
   82a48:	4803      	ldr	r0, [pc, #12]	; (82a58 <fpga_target_register_handlers+0x1c>)
   82a4a:	4b04      	ldr	r3, [pc, #16]	; (82a5c <fpga_target_register_handlers+0x20>)
   82a4c:	4718      	bx	r3
   82a4e:	bf00      	nop
   82a50:	000817e1 	.word	0x000817e1
   82a54:	00082589 	.word	0x00082589
   82a58:	0008227d 	.word	0x0008227d
   82a5c:	00081809 	.word	0x00081809

00082a60 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   82a60:	b538      	push	{r3, r4, r5, lr}
  int ret = 0;
  cpu_irq_enter_critical();
   82a62:	4b08      	ldr	r3, [pc, #32]	; (82a84 <FPGA_setlock+0x24>)
{
   82a64:	4604      	mov	r4, r0
  cpu_irq_enter_critical();
   82a66:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   82a68:	4b07      	ldr	r3, [pc, #28]	; (82a88 <FPGA_setlock+0x28>)
   82a6a:	781a      	ldrb	r2, [r3, #0]
   82a6c:	b92a      	cbnz	r2, 82a7a <FPGA_setlock+0x1a>
  {
    ret = 1;
   82a6e:	2501      	movs	r5, #1
    _fpga_locked = lockstatus;
   82a70:	701c      	strb	r4, [r3, #0]
  }
  cpu_irq_leave_critical();
   82a72:	4b06      	ldr	r3, [pc, #24]	; (82a8c <FPGA_setlock+0x2c>)
   82a74:	4798      	blx	r3
  return ret;
}
   82a76:	4628      	mov	r0, r5
   82a78:	bd38      	pop	{r3, r4, r5, pc}
  int ret = 0;
   82a7a:	2500      	movs	r5, #0
  cpu_irq_leave_critical();
   82a7c:	4b03      	ldr	r3, [pc, #12]	; (82a8c <FPGA_setlock+0x2c>)
   82a7e:	4798      	blx	r3
}
   82a80:	4628      	mov	r0, r5
   82a82:	bd38      	pop	{r3, r4, r5, pc}
   82a84:	000852ed 	.word	0x000852ed
   82a88:	20072131 	.word	0x20072131
   82a8c:	0008532d 	.word	0x0008532d

00082a90 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
  _fpga_locked = fpga_unlocked;
   82a90:	2200      	movs	r2, #0
   82a92:	4b01      	ldr	r3, [pc, #4]	; (82a98 <FPGA_releaselock+0x8>)
   82a94:	701a      	strb	r2, [r3, #0]
}
   82a96:	4770      	bx	lr
   82a98:	20072131 	.word	0x20072131

00082a9c <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
  return _fpga_locked;
   82a9c:	4b01      	ldr	r3, [pc, #4]	; (82aa4 <FPGA_lockstatus+0x8>)
   82a9e:	7818      	ldrb	r0, [r3, #0]
}
   82aa0:	4770      	bx	lr
   82aa2:	bf00      	nop
   82aa4:	20072131 	.word	0x20072131

00082aa8 <fpga_program_setup1>:
    FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(uint32_t prog_freq)
{
   82aa8:	b510      	push	{r4, lr}
	/* Init - set program low to erase FPGA */
	FPGA_NPROG_LOW();
   82aaa:	4b07      	ldr	r3, [pc, #28]	; (82ac8 <fpga_program_setup1+0x20>)
    FPGA_CCLK_SETUP();

    usart_enable_tx(FPGA_PROG_USART);
#else
	#if FPGA_USE_BITBANG
	FPGA_CCLK_SETUP();
   82aac:	4c07      	ldr	r4, [pc, #28]	; (82acc <fpga_program_setup1+0x24>)
	FPGA_NPROG_LOW();
   82aae:	2033      	movs	r0, #51	; 0x33
   82ab0:	4798      	blx	r3
	FPGA_CCLK_SETUP();
   82ab2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82ab6:	2038      	movs	r0, #56	; 0x38
   82ab8:	47a0      	blx	r4
	FPGA_DO_SETUP();
   82aba:	4623      	mov	r3, r4

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
	#endif
#endif
}
   82abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	FPGA_DO_SETUP();
   82ac0:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82ac4:	2042      	movs	r0, #66	; 0x42
   82ac6:	4718      	bx	r3
   82ac8:	000835ad 	.word	0x000835ad
   82acc:	000835ed 	.word	0x000835ed

00082ad0 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
    FPGA_NPROG_HIGH();
   82ad0:	2033      	movs	r0, #51	; 0x33
   82ad2:	4b01      	ldr	r3, [pc, #4]	; (82ad8 <fpga_program_setup2+0x8>)
   82ad4:	4718      	bx	r3
   82ad6:	bf00      	nop
   82ad8:	00083591 	.word	0x00083591

00082adc <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   82adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82ade:	2508      	movs	r5, #8
   82ae0:	4604      	mov	r4, r0
	#else
		//For debug only
		//fpga_total_bs_len++;
		
		#if FPGA_USE_BITBANG
		for(unsigned int i=0; i < 8; i++){
   82ae2:	4f0c      	ldr	r7, [pc, #48]	; (82b14 <fpga_program_sendbyte+0x38>)
   82ae4:	4e0c      	ldr	r6, [pc, #48]	; (82b18 <fpga_program_sendbyte+0x3c>)
   82ae6:	e006      	b.n	82af6 <fpga_program_sendbyte+0x1a>
			FPGA_CCLK_LOW();
			
			if (databyte & 0x01){
				FPGA_DO_HIGH();
   82ae8:	47b0      	blx	r6
				} else {
				FPGA_DO_LOW();
			}
			
			FPGA_CCLK_HIGH();
   82aea:	2038      	movs	r0, #56	; 0x38
   82aec:	47b0      	blx	r6
		for(unsigned int i=0; i < 8; i++){
   82aee:	3d01      	subs	r5, #1
			databyte = databyte >> 1;
   82af0:	ea4f 0454 	mov.w	r4, r4, lsr #1
		for(unsigned int i=0; i < 8; i++){
   82af4:	d00c      	beq.n	82b10 <fpga_program_sendbyte+0x34>
			FPGA_CCLK_LOW();
   82af6:	2038      	movs	r0, #56	; 0x38
   82af8:	47b8      	blx	r7
			if (databyte & 0x01){
   82afa:	07e3      	lsls	r3, r4, #31
				FPGA_DO_HIGH();
   82afc:	f04f 0042 	mov.w	r0, #66	; 0x42
			if (databyte & 0x01){
   82b00:	d4f2      	bmi.n	82ae8 <fpga_program_sendbyte+0xc>
				FPGA_DO_LOW();
   82b02:	47b8      	blx	r7
			FPGA_CCLK_HIGH();
   82b04:	2038      	movs	r0, #56	; 0x38
   82b06:	47b0      	blx	r6
		for(unsigned int i=0; i < 8; i++){
   82b08:	3d01      	subs	r5, #1
			databyte = databyte >> 1;
   82b0a:	ea4f 0454 	mov.w	r4, r4, lsr #1
		for(unsigned int i=0; i < 8; i++){
   82b0e:	d1f2      	bne.n	82af6 <fpga_program_sendbyte+0x1a>
		usart_putchar(FPGA_PROG_USART, databyte);
		#else
		spi_write(SPI, databyte, 0, 0);
		#endif
	#endif
}
   82b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82b12:	bf00      	nop
   82b14:	000835ad 	.word	0x000835ad
   82b18:	00083591 	.word	0x00083591

00082b1c <fpgaspi_program_init>:
#include "fpgaspi_program.h"
#include "spi.h"

/* FPGA Programming: Init pins - assumes FPGA already programmed to use these */
void fpgaspi_program_init(void)
{
   82b1c:	b510      	push	{r4, lr}
	FPGASPI_CCLK_SETUP();
   82b1e:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82b22:	4c0b      	ldr	r4, [pc, #44]	; (82b50 <fpgaspi_program_init+0x34>)
   82b24:	2038      	movs	r0, #56	; 0x38
   82b26:	47a0      	blx	r4
	FPGASPI_DO_SETUP();
   82b28:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82b2c:	2055      	movs	r0, #85	; 0x55
   82b2e:	47a0      	blx	r4
	FPGASPI_DI_SETUP();
   82b30:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82b34:	2042      	movs	r0, #66	; 0x42
   82b36:	47a0      	blx	r4
	FPGASPI_CS_SETUP();
   82b38:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82b3c:	2056      	movs	r0, #86	; 0x56
   82b3e:	47a0      	blx	r4
	FPGASPI_CS_HIGH();
   82b40:	2056      	movs	r0, #86	; 0x56
   82b42:	4b04      	ldr	r3, [pc, #16]	; (82b54 <fpgaspi_program_init+0x38>)
   82b44:	4798      	blx	r3
	FPGASPI_CCLK_LOW();
}
   82b46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	FPGASPI_CCLK_LOW();
   82b4a:	2038      	movs	r0, #56	; 0x38
   82b4c:	4b02      	ldr	r3, [pc, #8]	; (82b58 <fpgaspi_program_init+0x3c>)
   82b4e:	4718      	bx	r3
   82b50:	000835ed 	.word	0x000835ed
   82b54:	00083591 	.word	0x00083591
   82b58:	000835ad 	.word	0x000835ad

00082b5c <fpgaspi_cs_low>:


/* SPI CS Pin Low */
void fpgaspi_cs_low(void)
{
	FPGASPI_CS_LOW();
   82b5c:	2056      	movs	r0, #86	; 0x56
   82b5e:	4b01      	ldr	r3, [pc, #4]	; (82b64 <fpgaspi_cs_low+0x8>)
   82b60:	4718      	bx	r3
   82b62:	bf00      	nop
   82b64:	000835ad 	.word	0x000835ad

00082b68 <fpgaspi_cs_high>:
}

/* SPI CS Pin High */
void fpgaspi_cs_high(void)
{
	FPGASPI_CS_HIGH();
   82b68:	2056      	movs	r0, #86	; 0x56
   82b6a:	4b01      	ldr	r3, [pc, #4]	; (82b70 <fpgaspi_cs_high+0x8>)
   82b6c:	4718      	bx	r3
   82b6e:	bf00      	nop
   82b70:	00083591 	.word	0x00083591

00082b74 <fpgaspi_xferbyte>:
}


/* SPI data byte transfer */
uint8_t fpgaspi_xferbyte(uint8_t databyte)
{
   82b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82b78:	2608      	movs	r6, #8
	uint8_t result = 0;
   82b7a:	2400      	movs	r4, #0
{
   82b7c:	4605      	mov	r5, r0

	for(unsigned int i=0; i < 8; i++){	
   82b7e:	f8df 9054 	ldr.w	r9, [pc, #84]	; 82bd4 <fpgaspi_xferbyte+0x60>
   82b82:	4f15      	ldr	r7, [pc, #84]	; (82bd8 <fpgaspi_xferbyte+0x64>)
   82b84:	f8df 8054 	ldr.w	r8, [pc, #84]	; 82bdc <fpgaspi_xferbyte+0x68>
   82b88:	e008      	b.n	82b9c <fpgaspi_xferbyte+0x28>
		FPGASPI_CCLK_LOW();

		if (databyte & 0x80){
			FPGASPI_DO_HIGH();
			} else {
			FPGASPI_DO_LOW();
   82b8a:	47b8      	blx	r7
		}
		
		FPGASPI_CCLK_HIGH();
   82b8c:	2038      	movs	r0, #56	; 0x38
   82b8e:	47c0      	blx	r8
		databyte = databyte << 1;
   82b90:	006d      	lsls	r5, r5, #1
		result = result << 1;
   82b92:	0064      	lsls	r4, r4, #1
	for(unsigned int i=0; i < 8; i++){	
   82b94:	3e01      	subs	r6, #1
		databyte = databyte << 1;
   82b96:	b2ed      	uxtb	r5, r5
		result = result << 1;
   82b98:	b2e4      	uxtb	r4, r4
	for(unsigned int i=0; i < 8; i++){	
   82b9a:	d00e      	beq.n	82bba <fpgaspi_xferbyte+0x46>
		result |= FPGASPI_DI_STATUS() ? (1) : 0;
   82b9c:	2042      	movs	r0, #66	; 0x42
   82b9e:	47c8      	blx	r9
   82ba0:	4603      	mov	r3, r0
		FPGASPI_CCLK_LOW();
   82ba2:	2038      	movs	r0, #56	; 0x38
		result |= FPGASPI_DI_STATUS() ? (1) : 0;
   82ba4:	2b00      	cmp	r3, #0
   82ba6:	bf18      	it	ne
   82ba8:	f044 0401 	orrne.w	r4, r4, #1
		FPGASPI_CCLK_LOW();
   82bac:	47b8      	blx	r7
		if (databyte & 0x80){
   82bae:	062b      	lsls	r3, r5, #24
			FPGASPI_DO_HIGH();
   82bb0:	f04f 0055 	mov.w	r0, #85	; 0x55
		if (databyte & 0x80){
   82bb4:	d5e9      	bpl.n	82b8a <fpgaspi_xferbyte+0x16>
			FPGASPI_DO_HIGH();
   82bb6:	47c0      	blx	r8
   82bb8:	e7e8      	b.n	82b8c <fpgaspi_xferbyte+0x18>
	}

	result |= FPGASPI_DI_STATUS() ? (1) : 0;
   82bba:	2042      	movs	r0, #66	; 0x42
   82bbc:	47c8      	blx	r9
   82bbe:	4603      	mov	r3, r0
   82bc0:	2b00      	cmp	r3, #0
   82bc2:	bf18      	it	ne
   82bc4:	f044 0401 	orrne.w	r4, r4, #1

	FPGASPI_CCLK_LOW();
   82bc8:	2038      	movs	r0, #56	; 0x38
	result |= FPGASPI_DI_STATUS() ? (1) : 0;
   82bca:	b264      	sxtb	r4, r4
	FPGASPI_CCLK_LOW();
   82bcc:	47b8      	blx	r7

	return result;
}
   82bce:	b2e0      	uxtb	r0, r4
   82bd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82bd4:	00083575 	.word	0x00083575
   82bd8:	000835ad 	.word	0x000835ad
   82bdc:	00083591 	.word	0x00083591

00082be0 <fpgaspi_program_deinit>:


void fpgaspi_program_deinit(void)
{
   82be0:	b510      	push	{r4, lr}
	FPGASPI_CCLK_RELEASE();
   82be2:	2100      	movs	r1, #0
   82be4:	4c05      	ldr	r4, [pc, #20]	; (82bfc <fpgaspi_program_deinit+0x1c>)
   82be6:	2038      	movs	r0, #56	; 0x38
   82be8:	47a0      	blx	r4
	FPGASPI_DO_RELEASE();
   82bea:	2100      	movs	r1, #0
   82bec:	2055      	movs	r0, #85	; 0x55
   82bee:	47a0      	blx	r4
	FPGASPI_CS_RELEASE();
   82bf0:	4623      	mov	r3, r4
   82bf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	FPGASPI_CS_RELEASE();
   82bf6:	2100      	movs	r1, #0
   82bf8:	2056      	movs	r0, #86	; 0x56
   82bfa:	4718      	bx	r3
   82bfc:	000835ed 	.word	0x000835ed

00082c00 <tps56520_set.part.0>:
	
	return false;
}

/* Set voltage in mV for FPGA VCC_INT Voltage */
bool tps56520_set(uint16_t mv_output)
   82c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t setting = (mv_output - 600) / 10;
	
	if (!checkoddparity(setting)){
		setting |= 1<<7;
	}
	twi_package_t packet_write = {
   82c04:	2401      	movs	r4, #1
   82c06:	2734      	movs	r7, #52	; 0x34
	uint8_t setting = (mv_output - 600) / 10;
   82c08:	4b2d      	ldr	r3, [pc, #180]	; (82cc0 <tps56520_set.part.0+0xc0>)
   82c0a:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
   82c0e:	fba3 3000 	umull	r3, r0, r3, r0
   82c12:	08c2      	lsrs	r2, r0, #3
	p = p ^ (p >> 4 | p << 4);
   82c14:	f3c0 13c3 	ubfx	r3, r0, #7, #4
   82c18:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   82c1c:	4053      	eors	r3, r2
   82c1e:	b2da      	uxtb	r2, r3
	p = p ^ (p >> 2);
   82c20:	f3c3 0385 	ubfx	r3, r3, #2, #6
   82c24:	4053      	eors	r3, r2
	twi_package_t packet_write = {
   82c26:	4a27      	ldr	r2, [pc, #156]	; (82cc4 <tps56520_set.part.0+0xc4>)
	p = p ^ (p >> 1);
   82c28:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
bool tps56520_set(uint16_t mv_output)
   82c2c:	b08c      	sub	sp, #48	; 0x30
	twi_package_t packet_write = {
   82c2e:	6816      	ldr	r6, [r2, #0]
	uint8_t setting = (mv_output - 600) / 10;
   82c30:	f3c0 00c7 	ubfx	r0, r0, #3, #8
	if (!checkoddparity(setting)){
   82c34:	07db      	lsls	r3, r3, #31
		setting |= 1<<7;
   82c36:	bf58      	it	pl
   82c38:	f060 007f 	ornpl	r0, r0, #127	; 0x7f
	twi_package_t packet_write = {
   82c3c:	f10d 0306 	add.w	r3, sp, #6
		setting |= 1<<7;
   82c40:	f88d 0006 	strb.w	r0, [sp, #6]
	twi_package_t packet_write = {
   82c44:	9304      	str	r3, [sp, #16]
		.chip         = TPS56520_ADDR,      // TWI slave bus address
		.buffer       = &setting, // transfer data source buffer
		.length       = 1  // transfer data size (bytes)
	};
	
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   82c46:	4820      	ldr	r0, [pc, #128]	; (82cc8 <tps56520_set.part.0+0xc8>)
   82c48:	4b20      	ldr	r3, [pc, #128]	; (82ccc <tps56520_set.part.0+0xcc>)
	twi_package_t packet_write = {
   82c4a:	ea4f 4816 	mov.w	r8, r6, lsr #16
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   82c4e:	a902      	add	r1, sp, #8
	twi_package_t packet_write = {
   82c50:	f8ad 6008 	strh.w	r6, [sp, #8]
   82c54:	f88d 800a 	strb.w	r8, [sp, #10]
   82c58:	9403      	str	r4, [sp, #12]
   82c5a:	9405      	str	r4, [sp, #20]
   82c5c:	f88d 7018 	strb.w	r7, [sp, #24]
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   82c60:	4798      	blx	r3
   82c62:	4605      	mov	r5, r0
   82c64:	b130      	cbz	r0, 82c74 <tps56520_set.part.0+0x74>
		I2C_LOCK = 0;
   82c66:	2300      	movs	r3, #0
		return false;
   82c68:	4618      	mov	r0, r3
		I2C_LOCK = 0;
   82c6a:	4a19      	ldr	r2, [pc, #100]	; (82cd0 <tps56520_set.part.0+0xd0>)
   82c6c:	7013      	strb	r3, [r2, #0]
		I2C_LOCK = 0;
		return true;
	}
	I2C_LOCK = 0;
	return false;
   82c6e:	b00c      	add	sp, #48	; 0x30
   82c70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	twi_package_t packet_read = {
   82c74:	f10d 0307 	add.w	r3, sp, #7
   82c78:	9309      	str	r3, [sp, #36]	; 0x24
	if(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS){
   82c7a:	4813      	ldr	r0, [pc, #76]	; (82cc8 <tps56520_set.part.0+0xc8>)
   82c7c:	4b15      	ldr	r3, [pc, #84]	; (82cd4 <tps56520_set.part.0+0xd4>)
   82c7e:	a907      	add	r1, sp, #28
	twi_package_t packet_read = {
   82c80:	f8ad 601c 	strh.w	r6, [sp, #28]
   82c84:	f88d 801e 	strb.w	r8, [sp, #30]
   82c88:	9408      	str	r4, [sp, #32]
   82c8a:	940a      	str	r4, [sp, #40]	; 0x28
   82c8c:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
	if(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS){
   82c90:	4798      	blx	r3
   82c92:	4603      	mov	r3, r0
   82c94:	b968      	cbnz	r0, 82cb2 <tps56520_set.part.0+0xb2>
	if (volt_read == setting){
   82c96:	f89d 2006 	ldrb.w	r2, [sp, #6]
   82c9a:	f89d 1007 	ldrb.w	r1, [sp, #7]
   82c9e:	4291      	cmp	r1, r2
		return true;
   82ca0:	bf0b      	itete	eq
   82ca2:	4620      	moveq	r0, r4
	return false;
   82ca4:	4618      	movne	r0, r3
		I2C_LOCK = 0;
   82ca6:	4a0a      	ldreq	r2, [pc, #40]	; (82cd0 <tps56520_set.part.0+0xd0>)
	I2C_LOCK = 0;
   82ca8:	4a09      	ldrne	r2, [pc, #36]	; (82cd0 <tps56520_set.part.0+0xd0>)
   82caa:	7013      	strb	r3, [r2, #0]
   82cac:	b00c      	add	sp, #48	; 0x30
   82cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   82cb2:	4628      	mov	r0, r5
		I2C_LOCK = 0;
   82cb4:	4b06      	ldr	r3, [pc, #24]	; (82cd0 <tps56520_set.part.0+0xd0>)
   82cb6:	701d      	strb	r5, [r3, #0]
   82cb8:	b00c      	add	sp, #48	; 0x30
   82cba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82cbe:	bf00      	nop
   82cc0:	cccccccd 	.word	0xcccccccd
   82cc4:	0008c950 	.word	0x0008c950
   82cc8:	4008c000 	.word	0x4008c000
   82ccc:	00083a11 	.word	0x00083a11
   82cd0:	20072132 	.word	0x20072132
   82cd4:	00083939 	.word	0x00083939

00082cd8 <tps56520_set>:
	if (I2C_LOCK) return false;
   82cd8:	4a06      	ldr	r2, [pc, #24]	; (82cf4 <tps56520_set+0x1c>)
   82cda:	7811      	ldrb	r1, [r2, #0]
   82cdc:	b941      	cbnz	r1, 82cf0 <tps56520_set+0x18>
	I2C_LOCK = 1;
   82cde:	2101      	movs	r1, #1
	if (mv_output > 1200){
   82ce0:	f5a0 7316 	sub.w	r3, r0, #600	; 0x258
   82ce4:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
	I2C_LOCK = 1;
   82ce8:	7011      	strb	r1, [r2, #0]
	if (mv_output > 1200){
   82cea:	d801      	bhi.n	82cf0 <tps56520_set+0x18>
   82cec:	4b02      	ldr	r3, [pc, #8]	; (82cf8 <tps56520_set+0x20>)
   82cee:	4718      	bx	r3
   82cf0:	2000      	movs	r0, #0
   82cf2:	4770      	bx	lr
   82cf4:	20072132 	.word	0x20072132
   82cf8:	00082c01 	.word	0x00082c01

00082cfc <cdce906_init>:

volatile uint8_t I2C_LOCK = 0;

/* Init the CDCE906 chip, set offline */
bool cdce906_init(void)
{
   82cfc:	b570      	push	{r4, r5, r6, lr}
	//gpio_configure_pin(PIN_CDCE_SDA, PIN_CDCE_SDA_FLAGS);
	//gpio_configure_pin(PIN_CDCE_SCL, PIN_CDCE_SCL_FLAGS);
	
	twi_master_options_t opt = {
   82cfe:	f24c 3250 	movw	r2, #50000	; 0xc350
   82d02:	2569      	movs	r5, #105	; 0x69
{
   82d04:	b08a      	sub	sp, #40	; 0x28
	p_opt->master_clk = sysclk_get_peripheral_hz();
   82d06:	491c      	ldr	r1, [pc, #112]	; (82d78 <cdce906_init+0x7c>)
	twi_master_options_t opt = {
   82d08:	e9cd 2503 	strd	r2, r5, [sp, #12]
   82d0c:	4b1b      	ldr	r3, [pc, #108]	; (82d7c <cdce906_init+0x80>)
   82d0e:	2016      	movs	r0, #22
   82d10:	9102      	str	r1, [sp, #8]
   82d12:	4798      	blx	r3
	return (twi_master_init(p_twi, p_opt));
   82d14:	4b1a      	ldr	r3, [pc, #104]	; (82d80 <cdce906_init+0x84>)
   82d16:	481b      	ldr	r0, [pc, #108]	; (82d84 <cdce906_init+0x88>)
   82d18:	a902      	add	r1, sp, #8
   82d1a:	4798      	blx	r3
		.chip  = CDCE906_ADDR
	};
	
	twi_master_setup(TWI0, &opt);
	
	uint8_t data = 0;
   82d1c:	2000      	movs	r0, #0
	}
}

bool cdce906_read(uint8_t addr, uint8_t * data)
{
	if (I2C_LOCK) {
   82d1e:	4c1a      	ldr	r4, [pc, #104]	; (82d88 <cdce906_init+0x8c>)
	uint8_t data = 0;
   82d20:	f88d 0007 	strb.w	r0, [sp, #7]
	if (I2C_LOCK) {
   82d24:	7823      	ldrb	r3, [r4, #0]
   82d26:	b10b      	cbz	r3, 82d2c <cdce906_init+0x30>
}
   82d28:	b00a      	add	sp, #40	; 0x28
   82d2a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
	}
	I2C_LOCK = 1;
   82d2c:	f003 06ff 	and.w	r6, r3, #255	; 0xff
	twi_package_t packet_read = {
   82d30:	2280      	movs	r2, #128	; 0x80
	I2C_LOCK = 1;
   82d32:	2301      	movs	r3, #1
	twi_package_t packet_read = {
   82d34:	9605      	str	r6, [sp, #20]
	I2C_LOCK = 1;
   82d36:	7023      	strb	r3, [r4, #0]
	twi_package_t packet_read = {
   82d38:	f88d 2014 	strb.w	r2, [sp, #20]
   82d3c:	9306      	str	r3, [sp, #24]
   82d3e:	9308      	str	r3, [sp, #32]
   82d40:	f10d 0207 	add.w	r2, sp, #7
		.chip         = CDCE906_ADDR,      // TWI slave bus address
		.buffer       = data,        // transfer data destination buffer
		.length       = 1,                    // transfer data size (bytes)
	};
	
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   82d44:	4b11      	ldr	r3, [pc, #68]	; (82d8c <cdce906_init+0x90>)
   82d46:	480f      	ldr	r0, [pc, #60]	; (82d84 <cdce906_init+0x88>)
   82d48:	a905      	add	r1, sp, #20
	twi_package_t packet_read = {
   82d4a:	9609      	str	r6, [sp, #36]	; 0x24
   82d4c:	9207      	str	r2, [sp, #28]
   82d4e:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   82d52:	4798      	blx	r3
   82d54:	4603      	mov	r3, r0
   82d56:	b118      	cbz	r0, 82d60 <cdce906_init+0x64>
		return false;
   82d58:	4630      	mov	r0, r6
		I2C_LOCK = 0;
		return 1;
	} else {
		I2C_LOCK = 0;
   82d5a:	7026      	strb	r6, [r4, #0]
}
   82d5c:	b00a      	add	sp, #40	; 0x28
   82d5e:	bd70      	pop	{r4, r5, r6, pc}
	if ((data & 0x0F) == 0x01){
   82d60:	f89d 0007 	ldrb.w	r0, [sp, #7]
		I2C_LOCK = 0;
   82d64:	7023      	strb	r3, [r4, #0]
	if ((data & 0x0F) == 0x01){
   82d66:	f000 000f 	and.w	r0, r0, #15
   82d6a:	f1a0 0001 	sub.w	r0, r0, #1
   82d6e:	fab0 f080 	clz	r0, r0
   82d72:	0940      	lsrs	r0, r0, #5
}
   82d74:	b00a      	add	sp, #40	; 0x28
   82d76:	bd70      	pop	{r4, r5, r6, pc}
   82d78:	0501bd00 	.word	0x0501bd00
   82d7c:	000833e1 	.word	0x000833e1
   82d80:	000838e1 	.word	0x000838e1
   82d84:	4008c000 	.word	0x4008c000
   82d88:	20072132 	.word	0x20072132
   82d8c:	00083939 	.word	0x00083939

00082d90 <cdce906_write>:
{
   82d90:	b570      	push	{r4, r5, r6, lr}
	if (I2C_LOCK) {
   82d92:	4d14      	ldr	r5, [pc, #80]	; (82de4 <cdce906_write+0x54>)
{
   82d94:	b088      	sub	sp, #32
	if (I2C_LOCK) {
   82d96:	782b      	ldrb	r3, [r5, #0]
{
   82d98:	f88d 1007 	strb.w	r1, [sp, #7]
	if (I2C_LOCK) {
   82d9c:	b113      	cbz	r3, 82da4 <cdce906_write+0x14>
		return false;
   82d9e:	2000      	movs	r0, #0
}
   82da0:	b008      	add	sp, #32
   82da2:	bd70      	pop	{r4, r5, r6, pc}
	I2C_LOCK = 1;
   82da4:	2401      	movs	r4, #1
	twi_package_t packet_write = {
   82da6:	2269      	movs	r2, #105	; 0x69
   82da8:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   82dac:	f060 007f 	orn	r0, r0, #127	; 0x7f
   82db0:	f10d 0307 	add.w	r3, sp, #7
   82db4:	9603      	str	r6, [sp, #12]
   82db6:	9305      	str	r3, [sp, #20]
   82db8:	f88d 000c 	strb.w	r0, [sp, #12]
	if (twi_master_write(TWI0, &packet_write) == TWI_SUCCESS){
   82dbc:	4b0a      	ldr	r3, [pc, #40]	; (82de8 <cdce906_write+0x58>)
   82dbe:	480b      	ldr	r0, [pc, #44]	; (82dec <cdce906_write+0x5c>)
   82dc0:	a903      	add	r1, sp, #12
	twi_package_t packet_write = {
   82dc2:	9607      	str	r6, [sp, #28]
	I2C_LOCK = 1;
   82dc4:	702c      	strb	r4, [r5, #0]
	twi_package_t packet_write = {
   82dc6:	9404      	str	r4, [sp, #16]
   82dc8:	9406      	str	r4, [sp, #24]
   82dca:	f88d 201c 	strb.w	r2, [sp, #28]
	if (twi_master_write(TWI0, &packet_write) == TWI_SUCCESS){
   82dce:	4798      	blx	r3
   82dd0:	4603      	mov	r3, r0
   82dd2:	b918      	cbnz	r0, 82ddc <cdce906_write+0x4c>
		return true;
   82dd4:	4620      	mov	r0, r4
		I2C_LOCK = 0;
   82dd6:	702b      	strb	r3, [r5, #0]
}
   82dd8:	b008      	add	sp, #32
   82dda:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   82ddc:	4630      	mov	r0, r6
		I2C_LOCK = 0;
   82dde:	702e      	strb	r6, [r5, #0]
}
   82de0:	b008      	add	sp, #32
   82de2:	bd70      	pop	{r4, r5, r6, pc}
   82de4:	20072132 	.word	0x20072132
   82de8:	00083a11 	.word	0x00083a11
   82dec:	4008c000 	.word	0x4008c000

00082df0 <cdce906_read>:
{
   82df0:	b570      	push	{r4, r5, r6, lr}
	if (I2C_LOCK) {
   82df2:	4d12      	ldr	r5, [pc, #72]	; (82e3c <cdce906_read+0x4c>)
{
   82df4:	b086      	sub	sp, #24
	if (I2C_LOCK) {
   82df6:	782b      	ldrb	r3, [r5, #0]
   82df8:	b113      	cbz	r3, 82e00 <cdce906_read+0x10>
		return false;
   82dfa:	2000      	movs	r0, #0
		return 0;
	}	
   82dfc:	b006      	add	sp, #24
   82dfe:	bd70      	pop	{r4, r5, r6, pc}
	I2C_LOCK = 1;
   82e00:	2401      	movs	r4, #1
	twi_package_t packet_read = {
   82e02:	2269      	movs	r2, #105	; 0x69
   82e04:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   82e08:	f060 007f 	orn	r0, r0, #127	; 0x7f
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   82e0c:	4b0c      	ldr	r3, [pc, #48]	; (82e40 <cdce906_read+0x50>)
	twi_package_t packet_read = {
   82e0e:	9103      	str	r1, [sp, #12]
   82e10:	9601      	str	r6, [sp, #4]
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   82e12:	a901      	add	r1, sp, #4
	twi_package_t packet_read = {
   82e14:	f88d 0004 	strb.w	r0, [sp, #4]
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   82e18:	480a      	ldr	r0, [pc, #40]	; (82e44 <cdce906_read+0x54>)
	twi_package_t packet_read = {
   82e1a:	9605      	str	r6, [sp, #20]
	I2C_LOCK = 1;
   82e1c:	702c      	strb	r4, [r5, #0]
	twi_package_t packet_read = {
   82e1e:	9402      	str	r4, [sp, #8]
   82e20:	9404      	str	r4, [sp, #16]
   82e22:	f88d 2014 	strb.w	r2, [sp, #20]
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   82e26:	4798      	blx	r3
   82e28:	4603      	mov	r3, r0
   82e2a:	b918      	cbnz	r0, 82e34 <cdce906_read+0x44>
		return 1;
   82e2c:	4620      	mov	r0, r4
		I2C_LOCK = 0;
   82e2e:	702b      	strb	r3, [r5, #0]
   82e30:	b006      	add	sp, #24
   82e32:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   82e34:	4630      	mov	r0, r6
		I2C_LOCK = 0;
   82e36:	702e      	strb	r6, [r5, #0]
   82e38:	b006      	add	sp, #24
   82e3a:	bd70      	pop	{r4, r5, r6, pc}
   82e3c:	20072132 	.word	0x20072132
   82e40:	00083939 	.word	0x00083939
   82e44:	4008c000 	.word	0x4008c000

00082e48 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   82e48:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   82e4a:	2604      	movs	r6, #4
{
   82e4c:	b087      	sub	sp, #28
   82e4e:	4604      	mov	r4, r0
   82e50:	460d      	mov	r5, r1
	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   82e52:	220f      	movs	r2, #15
   82e54:	210e      	movs	r1, #14
   82e56:	480c      	ldr	r0, [pc, #48]	; (82e88 <flash_read_unique_id+0x40>)
   82e58:	4f0c      	ldr	r7, [pc, #48]	; (82e8c <flash_read_unique_id+0x44>)
   82e5a:	ab02      	add	r3, sp, #8
   82e5c:	9600      	str	r6, [sp, #0]
   82e5e:	47b8      	blx	r7
   82e60:	b970      	cbnz	r0, 82e80 <flash_read_unique_id+0x38>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
	}

	if (ul_size > 4) {
   82e62:	2d04      	cmp	r5, #4
   82e64:	4626      	mov	r6, r4
   82e66:	462a      	mov	r2, r5
   82e68:	4604      	mov	r4, r0
   82e6a:	bf28      	it	cs
   82e6c:	2204      	movcs	r2, #4
		/* Only 4 dword to store unique ID */
		ul_size = 4;
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82e6e:	b125      	cbz	r5, 82e7a <flash_read_unique_id+0x32>
		pul_data[ul_idx] = uid_buf[ul_idx];
   82e70:	4630      	mov	r0, r6
   82e72:	4b07      	ldr	r3, [pc, #28]	; (82e90 <flash_read_unique_id+0x48>)
   82e74:	a902      	add	r1, sp, #8
   82e76:	0092      	lsls	r2, r2, #2
   82e78:	4798      	blx	r3
	}

	return FLASH_RC_OK;
}
   82e7a:	4620      	mov	r0, r4
   82e7c:	b007      	add	sp, #28
   82e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return FLASH_RC_ERROR;
   82e80:	2410      	movs	r4, #16
}
   82e82:	4620      	mov	r0, r4
   82e84:	b007      	add	sp, #28
   82e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82e88:	400e0a00 	.word	0x400e0a00
   82e8c:	20070111 	.word	0x20070111
   82e90:	00085c49 	.word	0x00085c49

00082e94 <usart_set_async_baudrate>:
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   82e94:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
{
   82e98:	4684      	mov	ip, r0
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   82e9a:	ea4f 1001 	mov.w	r0, r1, lsl #4
   82e9e:	d312      	bcc.n	82ec6 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   82ea0:	0843      	lsrs	r3, r0, #1
   82ea2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   82ea6:	fbb2 f2f0 	udiv	r2, r2, r0
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82eaa:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	cd = cd_fp >> 3;
   82eae:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82eb0:	1e58      	subs	r0, r3, #1
   82eb2:	4288      	cmp	r0, r1
   82eb4:	d813      	bhi.n	82ede <usart_set_async_baudrate+0x4a>
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   82eb6:	0412      	lsls	r2, r2, #16
   82eb8:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   82ebc:	431a      	orrs	r2, r3

	return 0;
   82ebe:	2000      	movs	r0, #0
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   82ec0:	f8cc 2020 	str.w	r2, [ip, #32]
	return 0;
   82ec4:	4770      	bx	lr
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   82ec6:	00c9      	lsls	r1, r1, #3
   82ec8:	084b      	lsrs	r3, r1, #1
   82eca:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   82ece:	fbb2 f2f1 	udiv	r2, r2, r1
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82ed2:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	cd = cd_fp >> 3;
   82ed6:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82ed8:	1e58      	subs	r0, r3, #1
   82eda:	4288      	cmp	r0, r1
   82edc:	d901      	bls.n	82ee2 <usart_set_async_baudrate+0x4e>
		return 1;
   82ede:	2001      	movs	r0, #1
}
   82ee0:	4770      	bx	lr
		p_usart->US_MR |= US_MR_OVER;
   82ee2:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82ee6:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   82eea:	f8cc 1004 	str.w	r1, [ip, #4]
   82eee:	e7e2      	b.n	82eb6 <usart_set_async_baudrate+0x22>

00082ef0 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   82ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   82ef4:	f44f 7c80 	mov.w	ip, #256	; 0x100
	p_usart->US_MR = 0;
   82ef8:	2300      	movs	r3, #0
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   82efa:	f04f 0888 	mov.w	r8, #136	; 0x88
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   82efe:	f04f 0e24 	mov.w	lr, #36	; 0x24
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   82f02:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   82f06:	f8df 904c 	ldr.w	r9, [pc, #76]	; 82f54 <usart_init_rs232+0x64>
	ul_reg_val = 0;
   82f0a:	4e13      	ldr	r6, [pc, #76]	; (82f58 <usart_init_rs232+0x68>)
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   82f0c:	f8c0 90e4 	str.w	r9, [r0, #228]	; 0xe4
	ul_reg_val = 0;
   82f10:	6033      	str	r3, [r6, #0]
	p_usart->US_MR = 0;
   82f12:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   82f14:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   82f16:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   82f18:	f8c0 8000 	str.w	r8, [r0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   82f1c:	f8c0 e000 	str.w	lr, [r0]
	p_usart->US_CR = US_CR_RSTSTA;
   82f20:	f8c0 c000 	str.w	ip, [r0]
	p_usart->US_CR = US_CR_RTSDIS;
   82f24:	6007      	str	r7, [r0, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   82f26:	b191      	cbz	r1, 82f4e <usart_init_rs232+0x5e>
   82f28:	460d      	mov	r5, r1
   82f2a:	4b0c      	ldr	r3, [pc, #48]	; (82f5c <usart_init_rs232+0x6c>)
   82f2c:	6809      	ldr	r1, [r1, #0]
   82f2e:	4604      	mov	r4, r0
   82f30:	4798      	blx	r3
   82f32:	b960      	cbnz	r0, 82f4e <usart_init_rs232+0x5e>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82f34:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   82f38:	4313      	orrs	r3, r2
   82f3a:	692a      	ldr	r2, [r5, #16]
   82f3c:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   82f3e:	68ea      	ldr	r2, [r5, #12]
   82f40:	4313      	orrs	r3, r2
	p_usart->US_MR |= ul_reg_val;
   82f42:	6862      	ldr	r2, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   82f44:	6033      	str	r3, [r6, #0]
	p_usart->US_MR |= ul_reg_val;
   82f46:	4313      	orrs	r3, r2
   82f48:	6063      	str	r3, [r4, #4]
}
   82f4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   82f4e:	2001      	movs	r0, #1
}
   82f50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82f54:	55534100 	.word	0x55534100
   82f58:	20072134 	.word	0x20072134
   82f5c:	00082e95 	.word	0x00082e95

00082f60 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   82f60:	2340      	movs	r3, #64	; 0x40
   82f62:	6003      	str	r3, [r0, #0]
}
   82f64:	4770      	bx	lr
   82f66:	bf00      	nop

00082f68 <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   82f68:	2380      	movs	r3, #128	; 0x80
   82f6a:	6003      	str	r3, [r0, #0]
}
   82f6c:	4770      	bx	lr
   82f6e:	bf00      	nop

00082f70 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   82f70:	2310      	movs	r3, #16
   82f72:	6003      	str	r3, [r0, #0]
}
   82f74:	4770      	bx	lr
   82f76:	bf00      	nop

00082f78 <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   82f78:	2320      	movs	r3, #32
   82f7a:	6003      	str	r3, [r0, #0]
}
   82f7c:	4770      	bx	lr
   82f7e:	bf00      	nop

00082f80 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   82f80:	6081      	str	r1, [r0, #8]
}
   82f82:	4770      	bx	lr

00082f84 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   82f84:	60c1      	str	r1, [r0, #12]
}
   82f86:	4770      	bx	lr

00082f88 <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   82f88:	6900      	ldr	r0, [r0, #16]
}
   82f8a:	4770      	bx	lr

00082f8c <usart_get_status>:
	return p_usart->US_CSR;
   82f8c:	6940      	ldr	r0, [r0, #20]
}
   82f8e:	4770      	bx	lr

00082f90 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   82f90:	6943      	ldr	r3, [r0, #20]
   82f92:	079b      	lsls	r3, r3, #30
   82f94:	d5fc      	bpl.n	82f90 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   82f96:	f3c1 0108 	ubfx	r1, r1, #0, #9
   82f9a:	61c1      	str	r1, [r0, #28]
}
   82f9c:	2000      	movs	r0, #0
   82f9e:	4770      	bx	lr

00082fa0 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   82fa0:	4a31      	ldr	r2, [pc, #196]	; (83068 <SystemCoreClockUpdate+0xc8>)
   82fa2:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82fa4:	f003 0303 	and.w	r3, r3, #3
   82fa8:	2b01      	cmp	r3, #1
   82faa:	d02c      	beq.n	83006 <SystemCoreClockUpdate+0x66>
   82fac:	3b02      	subs	r3, #2
   82fae:	2b01      	cmp	r3, #1
   82fb0:	d81e      	bhi.n	82ff0 <SystemCoreClockUpdate+0x50>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   82fb2:	6a13      	ldr	r3, [r2, #32]
   82fb4:	01d9      	lsls	r1, r3, #7
   82fb6:	d538      	bpl.n	8302a <SystemCoreClockUpdate+0x8a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   82fb8:	482c      	ldr	r0, [pc, #176]	; (8306c <SystemCoreClockUpdate+0xcc>)
   82fba:	4b2d      	ldr	r3, [pc, #180]	; (83070 <SystemCoreClockUpdate+0xd0>)
   82fbc:	6003      	str	r3, [r0, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   82fbe:	4a2a      	ldr	r2, [pc, #168]	; (83068 <SystemCoreClockUpdate+0xc8>)
   82fc0:	6b13      	ldr	r3, [r2, #48]	; 0x30
   82fc2:	f003 0303 	and.w	r3, r3, #3
   82fc6:	2b02      	cmp	r3, #2
   82fc8:	d03c      	beq.n	83044 <SystemCoreClockUpdate+0xa4>
   82fca:	4b2a      	ldr	r3, [pc, #168]	; (83074 <SystemCoreClockUpdate+0xd4>)
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   82fcc:	4926      	ldr	r1, [pc, #152]	; (83068 <SystemCoreClockUpdate+0xc8>)
   82fce:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   82fd0:	f002 0270 	and.w	r2, r2, #112	; 0x70
   82fd4:	2a70      	cmp	r2, #112	; 0x70
   82fd6:	d005      	beq.n	82fe4 <SystemCoreClockUpdate+0x44>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   82fd8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   82fda:	f3c2 1202 	ubfx	r2, r2, #4, #3
   82fde:	40d3      	lsrs	r3, r2
   82fe0:	6003      	str	r3, [r0, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   82fe2:	4770      	bx	lr
		SystemCoreClock /= 3U;
   82fe4:	4a24      	ldr	r2, [pc, #144]	; (83078 <SystemCoreClockUpdate+0xd8>)
   82fe6:	fba2 2303 	umull	r2, r3, r2, r3
   82fea:	085b      	lsrs	r3, r3, #1
   82fec:	6003      	str	r3, [r0, #0]
}
   82fee:	4770      	bx	lr
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   82ff0:	4b22      	ldr	r3, [pc, #136]	; (8307c <SystemCoreClockUpdate+0xdc>)
   82ff2:	481e      	ldr	r0, [pc, #120]	; (8306c <SystemCoreClockUpdate+0xcc>)
   82ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   82ff6:	f013 0f80 	tst.w	r3, #128	; 0x80
   82ffa:	bf14      	ite	ne
   82ffc:	f44f 4300 	movne.w	r3, #32768	; 0x8000
   83000:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
   83004:	e7e2      	b.n	82fcc <SystemCoreClockUpdate+0x2c>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   83006:	6a13      	ldr	r3, [r2, #32]
   83008:	01db      	lsls	r3, r3, #7
   8300a:	d40b      	bmi.n	83024 <SystemCoreClockUpdate+0x84>
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8300c:	6a12      	ldr	r2, [r2, #32]
   8300e:	f002 0270 	and.w	r2, r2, #112	; 0x70
   83012:	2a10      	cmp	r2, #16
   83014:	d021      	beq.n	8305a <SystemCoreClockUpdate+0xba>
   83016:	4b16      	ldr	r3, [pc, #88]	; (83070 <SystemCoreClockUpdate+0xd0>)
   83018:	4919      	ldr	r1, [pc, #100]	; (83080 <SystemCoreClockUpdate+0xe0>)
   8301a:	4814      	ldr	r0, [pc, #80]	; (8306c <SystemCoreClockUpdate+0xcc>)
   8301c:	2a20      	cmp	r2, #32
   8301e:	bf18      	it	ne
   83020:	460b      	movne	r3, r1
   83022:	e7d3      	b.n	82fcc <SystemCoreClockUpdate+0x2c>
   83024:	4b12      	ldr	r3, [pc, #72]	; (83070 <SystemCoreClockUpdate+0xd0>)
   83026:	4811      	ldr	r0, [pc, #68]	; (8306c <SystemCoreClockUpdate+0xcc>)
   83028:	e7d0      	b.n	82fcc <SystemCoreClockUpdate+0x2c>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8302a:	4b15      	ldr	r3, [pc, #84]	; (83080 <SystemCoreClockUpdate+0xe0>)
   8302c:	480f      	ldr	r0, [pc, #60]	; (8306c <SystemCoreClockUpdate+0xcc>)
   8302e:	6003      	str	r3, [r0, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83030:	6a13      	ldr	r3, [r2, #32]
   83032:	f003 0370 	and.w	r3, r3, #112	; 0x70
   83036:	2b10      	cmp	r3, #16
   83038:	d012      	beq.n	83060 <SystemCoreClockUpdate+0xc0>
   8303a:	2b20      	cmp	r3, #32
   8303c:	d1bf      	bne.n	82fbe <SystemCoreClockUpdate+0x1e>
				SystemCoreClock *= 3U;
   8303e:	4b0c      	ldr	r3, [pc, #48]	; (83070 <SystemCoreClockUpdate+0xd0>)
   83040:	6003      	str	r3, [r0, #0]
				break;
   83042:	e7bc      	b.n	82fbe <SystemCoreClockUpdate+0x1e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83044:	6a91      	ldr	r1, [r2, #40]	; 0x28
   83046:	6803      	ldr	r3, [r0, #0]
   83048:	f3c1 410a 	ubfx	r1, r1, #16, #11
   8304c:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83050:	6a92      	ldr	r2, [r2, #40]	; 0x28
   83052:	b2d2      	uxtb	r2, r2
   83054:	fbb3 f3f2 	udiv	r3, r3, r2
   83058:	e7b8      	b.n	82fcc <SystemCoreClockUpdate+0x2c>
   8305a:	4b0a      	ldr	r3, [pc, #40]	; (83084 <SystemCoreClockUpdate+0xe4>)
   8305c:	4803      	ldr	r0, [pc, #12]	; (8306c <SystemCoreClockUpdate+0xcc>)
   8305e:	e7b5      	b.n	82fcc <SystemCoreClockUpdate+0x2c>
				SystemCoreClock *= 2U;
   83060:	4b08      	ldr	r3, [pc, #32]	; (83084 <SystemCoreClockUpdate+0xe4>)
   83062:	6003      	str	r3, [r0, #0]
				break;
   83064:	e7ab      	b.n	82fbe <SystemCoreClockUpdate+0x1e>
   83066:	bf00      	nop
   83068:	400e0600 	.word	0x400e0600
   8306c:	20070948 	.word	0x20070948
   83070:	00b71b00 	.word	0x00b71b00
   83074:	0e4e1c00 	.word	0x0e4e1c00
   83078:	aaaaaaab 	.word	0xaaaaaaab
   8307c:	400e1a00 	.word	0x400e1a00
   83080:	003d0900 	.word	0x003d0900
   83084:	007a1200 	.word	0x007a1200

00083088 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   83088:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8308c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83090:	670a      	str	r2, [r1, #112]	; 0x70
}
   83092:	4770      	bx	lr

00083094 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   83094:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83098:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   8309c:	674a      	str	r2, [r1, #116]	; 0x74
}
   8309e:	4770      	bx	lr

000830a0 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   830a0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   830a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   830a8:	678a      	str	r2, [r1, #120]	; 0x78
}
   830aa:	4770      	bx	lr

000830ac <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   830ac:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   830b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   830b4:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
}
   830b8:	4770      	bx	lr
   830ba:	bf00      	nop

000830bc <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   830bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   830be:	4b12      	ldr	r3, [pc, #72]	; (83108 <pio_handler_process+0x4c>)
{
   830c0:	4604      	mov	r4, r0
   830c2:	460e      	mov	r6, r1
	status = pio_get_interrupt_status(p_pio);
   830c4:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
   830c6:	4b11      	ldr	r3, [pc, #68]	; (8310c <pio_handler_process+0x50>)
	status = pio_get_interrupt_status(p_pio);
   830c8:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   830ca:	4620      	mov	r0, r4
   830cc:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   830ce:	4005      	ands	r5, r0
   830d0:	d019      	beq.n	83106 <pio_handler_process+0x4a>
   830d2:	4c0f      	ldr	r4, [pc, #60]	; (83110 <pio_handler_process+0x54>)
   830d4:	f104 0760 	add.w	r7, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   830d8:	6823      	ldr	r3, [r4, #0]
   830da:	42b3      	cmp	r3, r6
   830dc:	d005      	beq.n	830ea <pio_handler_process+0x2e>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   830de:	42bc      	cmp	r4, r7
   830e0:	d011      	beq.n	83106 <pio_handler_process+0x4a>
			if (gs_interrupt_sources[i].id == ul_id) {
   830e2:	6923      	ldr	r3, [r4, #16]
		while (status != 0) {
   830e4:	3410      	adds	r4, #16
			if (gs_interrupt_sources[i].id == ul_id) {
   830e6:	42b3      	cmp	r3, r6
   830e8:	d1f9      	bne.n	830de <pio_handler_process+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   830ea:	6861      	ldr	r1, [r4, #4]
   830ec:	4229      	tst	r1, r5
   830ee:	d0f6      	beq.n	830de <pio_handler_process+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   830f0:	68e3      	ldr	r3, [r4, #12]
   830f2:	4630      	mov	r0, r6
   830f4:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   830f6:	6863      	ldr	r3, [r4, #4]
			if (i >= MAX_INTERRUPT_SOURCES) {
   830f8:	42bc      	cmp	r4, r7
					status &= ~(gs_interrupt_sources[i].mask);
   830fa:	ea25 0503 	bic.w	r5, r5, r3
			if (i >= MAX_INTERRUPT_SOURCES) {
   830fe:	d002      	beq.n	83106 <pio_handler_process+0x4a>
		while (status != 0) {
   83100:	3410      	adds	r4, #16
   83102:	2d00      	cmp	r5, #0
   83104:	d1e8      	bne.n	830d8 <pio_handler_process+0x1c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   83106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   83108:	0008356d 	.word	0x0008356d
   8310c:	00083571 	.word	0x00083571
   83110:	20072138 	.word	0x20072138

00083114 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   83114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   83118:	4f1d      	ldr	r7, [pc, #116]	; (83190 <pio_handler_set+0x7c>)
   8311a:	683e      	ldr	r6, [r7, #0]
   8311c:	2e06      	cmp	r6, #6
   8311e:	d828      	bhi.n	83172 <pio_handler_set+0x5e>
   83120:	460d      	mov	r5, r1
   83122:	4611      	mov	r1, r2
   83124:	461a      	mov	r2, r3
   83126:	4b1b      	ldr	r3, [pc, #108]	; (83194 <pio_handler_set+0x80>)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   83128:	f04f 0e00 	mov.w	lr, #0
   8312c:	469c      	mov	ip, r3
   8312e:	f106 0801 	add.w	r8, r6, #1
   83132:	e004      	b.n	8313e <pio_handler_set+0x2a>
   83134:	4576      	cmp	r6, lr
   83136:	f10c 0c10 	add.w	ip, ip, #16
   8313a:	d01d      	beq.n	83178 <pio_handler_set+0x64>
   8313c:	46a6      	mov	lr, r4
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   8313e:	f8dc 9000 	ldr.w	r9, [ip]
   83142:	f10e 0401 	add.w	r4, lr, #1
   83146:	45a9      	cmp	r9, r5
   83148:	d1f4      	bne.n	83134 <pio_handler_set+0x20>
   8314a:	f8dc 9004 	ldr.w	r9, [ip, #4]
   8314e:	4589      	cmp	r9, r1
   83150:	d1f0      	bne.n	83134 <pio_handler_set+0x20>

	/* Define new source */
	pSource->id = ul_id;
	pSource->mask = ul_mask;
	pSource->attr = ul_attr;
	pSource->handler = p_handler;
   83152:	9e08      	ldr	r6, [sp, #32]
	pSource->id = ul_id;
   83154:	eb03 140e 	add.w	r4, r3, lr, lsl #4
	pSource->attr = ul_attr;
   83158:	e9c4 1201 	strd	r1, r2, [r4, #4]
	pSource->handler = p_handler;
   8315c:	60e6      	str	r6, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   8315e:	45f0      	cmp	r8, lr
	pSource->id = ul_id;
   83160:	ea4f 140e 	mov.w	r4, lr, lsl #4
   83164:	511d      	str	r5, [r3, r4]
	if (i == gs_ul_nb_sources + 1) {
   83166:	d00f      	beq.n	83188 <pio_handler_set+0x74>
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   83168:	4b0b      	ldr	r3, [pc, #44]	; (83198 <pio_handler_set+0x84>)
   8316a:	4798      	blx	r3

	return 0;
   8316c:	2000      	movs	r0, #0
}
   8316e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   83172:	2001      	movs	r0, #1
}
   83174:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	pSource->id = ul_id;
   83178:	eb03 1406 	add.w	r4, r3, r6, lsl #4
   8317c:	0136      	lsls	r6, r6, #4
   8317e:	519d      	str	r5, [r3, r6]
	pSource->attr = ul_attr;
   83180:	e9c4 1201 	strd	r1, r2, [r4, #4]
	pSource->handler = p_handler;
   83184:	9b08      	ldr	r3, [sp, #32]
   83186:	60e3      	str	r3, [r4, #12]
		gs_ul_nb_sources++;
   83188:	f8c7 8000 	str.w	r8, [r7]
   8318c:	e7ec      	b.n	83168 <pio_handler_set+0x54>
   8318e:	bf00      	nop
   83190:	200721a8 	.word	0x200721a8
   83194:	20072138 	.word	0x20072138
   83198:	00083541 	.word	0x00083541

0008319c <PIOA_Handler>:
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
	pio_handler_process(PIOA, ID_PIOA);
   8319c:	210b      	movs	r1, #11
   8319e:	4801      	ldr	r0, [pc, #4]	; (831a4 <PIOA_Handler+0x8>)
   831a0:	4b01      	ldr	r3, [pc, #4]	; (831a8 <PIOA_Handler+0xc>)
   831a2:	4718      	bx	r3
   831a4:	400e0e00 	.word	0x400e0e00
   831a8:	000830bd 	.word	0x000830bd

000831ac <PIOB_Handler>:
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
    pio_handler_process(PIOB, ID_PIOB);
   831ac:	210c      	movs	r1, #12
   831ae:	4801      	ldr	r0, [pc, #4]	; (831b4 <PIOB_Handler+0x8>)
   831b0:	4b01      	ldr	r3, [pc, #4]	; (831b8 <PIOB_Handler+0xc>)
   831b2:	4718      	bx	r3
   831b4:	400e1000 	.word	0x400e1000
   831b8:	000830bd 	.word	0x000830bd

000831bc <PIOC_Handler>:
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
	pio_handler_process(PIOC, ID_PIOC);
   831bc:	210d      	movs	r1, #13
   831be:	4801      	ldr	r0, [pc, #4]	; (831c4 <PIOC_Handler+0x8>)
   831c0:	4b01      	ldr	r3, [pc, #4]	; (831c8 <PIOC_Handler+0xc>)
   831c2:	4718      	bx	r3
   831c4:	400e1200 	.word	0x400e1200
   831c8:	000830bd 	.word	0x000830bd

000831cc <PIOD_Handler>:
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
	pio_handler_process(PIOD, ID_PIOD);
   831cc:	210e      	movs	r1, #14
   831ce:	4801      	ldr	r0, [pc, #4]	; (831d4 <PIOD_Handler+0x8>)
   831d0:	4b01      	ldr	r3, [pc, #4]	; (831d8 <PIOD_Handler+0xc>)
   831d2:	4718      	bx	r3
   831d4:	400e1400 	.word	0x400e1400
   831d8:	000830bd 	.word	0x000830bd

000831dc <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   831dc:	3801      	subs	r0, #1
   831de:	2802      	cmp	r0, #2
   831e0:	d81a      	bhi.n	83218 <_write+0x3c>
		return -1;
	}

	for (; len != 0; --len) {
   831e2:	b1da      	cbz	r2, 8321c <_write+0x40>
{
   831e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   831e8:	460d      	mov	r5, r1
	for (; len != 0; --len) {
   831ea:	4614      	mov	r4, r2
   831ec:	4f0c      	ldr	r7, [pc, #48]	; (83220 <_write+0x44>)
   831ee:	f8df 8034 	ldr.w	r8, [pc, #52]	; 83224 <_write+0x48>
   831f2:	1c56      	adds	r6, r2, #1
   831f4:	e001      	b.n	831fa <_write+0x1e>
   831f6:	3c01      	subs	r4, #1
   831f8:	d00b      	beq.n	83212 <_write+0x36>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   831fa:	6838      	ldr	r0, [r7, #0]
   831fc:	f8d8 3000 	ldr.w	r3, [r8]
   83200:	f815 1b01 	ldrb.w	r1, [r5], #1
   83204:	4798      	blx	r3
   83206:	2800      	cmp	r0, #0
   83208:	eba6 0204 	sub.w	r2, r6, r4
   8320c:	daf3      	bge.n	831f6 <_write+0x1a>
		return -1;
   8320e:	f04f 32ff 	mov.w	r2, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   83212:	4610      	mov	r0, r2
   83214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   83218:	f04f 32ff 	mov.w	r2, #4294967295
}
   8321c:	4610      	mov	r0, r2
   8321e:	4770      	bx	lr
   83220:	200721b0 	.word	0x200721b0
   83224:	200721ac 	.word	0x200721ac

00083228 <sysclk_enable_usb>:
		pmc_enable_upll_clock();
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
		pmc_enable_udpck();
		return;
	}
}
   83228:	4770      	bx	lr
   8322a:	bf00      	nop

0008322c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8322c:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8322e:	480f      	ldr	r0, [pc, #60]	; (8326c <sysclk_init+0x40>)
   83230:	4d0f      	ldr	r5, [pc, #60]	; (83270 <sysclk_init+0x44>)
   83232:	47a8      	blx	r5
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   83234:	213e      	movs	r1, #62	; 0x3e
   83236:	2000      	movs	r0, #0
   83238:	4b0e      	ldr	r3, [pc, #56]	; (83274 <sysclk_init+0x48>)
   8323a:	4798      	blx	r3
		break;
   8323c:	4c0e      	ldr	r4, [pc, #56]	; (83278 <sysclk_init+0x4c>)
		return pmc_osc_is_ready_mainck();
   8323e:	47a0      	blx	r4
   83240:	2800      	cmp	r0, #0
   83242:	d0fc      	beq.n	8323e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   83244:	4b0d      	ldr	r3, [pc, #52]	; (8327c <sysclk_init+0x50>)
   83246:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83248:	4b0d      	ldr	r3, [pc, #52]	; (83280 <sysclk_init+0x54>)
   8324a:	4a0e      	ldr	r2, [pc, #56]	; (83284 <sysclk_init+0x58>)
   8324c:	4c0e      	ldr	r4, [pc, #56]	; (83288 <sysclk_init+0x5c>)
   8324e:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   83250:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   83252:	2800      	cmp	r0, #0
   83254:	d0fc      	beq.n	83250 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   83256:	4b0d      	ldr	r3, [pc, #52]	; (8328c <sysclk_init+0x60>)
   83258:	2010      	movs	r0, #16
   8325a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8325c:	4b0c      	ldr	r3, [pc, #48]	; (83290 <sysclk_init+0x64>)
   8325e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83260:	462b      	mov	r3, r5

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   83262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
   83266:	4801      	ldr	r0, [pc, #4]	; (8326c <sysclk_init+0x40>)
   83268:	4718      	bx	r3
   8326a:	bf00      	nop
   8326c:	0501bd00 	.word	0x0501bd00
   83270:	2007008d 	.word	0x2007008d
   83274:	0008334d 	.word	0x0008334d
   83278:	0008339d 	.word	0x0008339d
   8327c:	000833ad 	.word	0x000833ad
   83280:	400e0600 	.word	0x400e0600
   83284:	200d3f01 	.word	0x200d3f01
   83288:	000833bd 	.word	0x000833bd
   8328c:	000832f1 	.word	0x000832f1
   83290:	00082fa1 	.word	0x00082fa1

00083294 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83294:	4915      	ldr	r1, [pc, #84]	; (832ec <pmc_switch_mck_to_mainck+0x58>)
   83296:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83298:	f023 0303 	bic.w	r3, r3, #3
   8329c:	f043 0301 	orr.w	r3, r3, #1
   832a0:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   832a2:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   832a4:	071b      	lsls	r3, r3, #28
   832a6:	bf58      	it	pl
   832a8:	f44f 6300 	movpl.w	r3, #2048	; 0x800
   832ac:	d502      	bpl.n	832b4 <pmc_switch_mck_to_mainck+0x20>
   832ae:	e004      	b.n	832ba <pmc_switch_mck_to_mainck+0x26>
			--ul_timeout) {
		if (ul_timeout == 0) {
   832b0:	3b01      	subs	r3, #1
   832b2:	d016      	beq.n	832e2 <pmc_switch_mck_to_mainck+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   832b4:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   832b6:	0712      	lsls	r2, r2, #28
   832b8:	d5fa      	bpl.n	832b0 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   832ba:	490c      	ldr	r1, [pc, #48]	; (832ec <pmc_switch_mck_to_mainck+0x58>)
   832bc:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   832be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   832c2:	4303      	orrs	r3, r0
   832c4:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   832c6:	6e88      	ldr	r0, [r1, #104]	; 0x68
   832c8:	f010 0008 	ands.w	r0, r0, #8
   832cc:	bf08      	it	eq
   832ce:	f44f 6300 	moveq.w	r3, #2048	; 0x800
   832d2:	d002      	beq.n	832da <pmc_switch_mck_to_mainck+0x46>
   832d4:	e007      	b.n	832e6 <pmc_switch_mck_to_mainck+0x52>
			--ul_timeout) {
		if (ul_timeout == 0) {
   832d6:	3b01      	subs	r3, #1
   832d8:	d003      	beq.n	832e2 <pmc_switch_mck_to_mainck+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   832da:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   832dc:	0712      	lsls	r2, r2, #28
   832de:	d5fa      	bpl.n	832d6 <pmc_switch_mck_to_mainck+0x42>
			return 1;
		}
	}

	return 0;
}
   832e0:	4770      	bx	lr
			return 1;
   832e2:	2001      	movs	r0, #1
   832e4:	4770      	bx	lr
	return 0;
   832e6:	2000      	movs	r0, #0
   832e8:	4770      	bx	lr
   832ea:	bf00      	nop
   832ec:	400e0600 	.word	0x400e0600

000832f0 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   832f0:	4915      	ldr	r1, [pc, #84]	; (83348 <pmc_switch_mck_to_pllack+0x58>)
   832f2:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   832f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   832f8:	4303      	orrs	r3, r0
   832fa:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   832fc:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   832fe:	071b      	lsls	r3, r3, #28
   83300:	bf58      	it	pl
   83302:	f44f 6300 	movpl.w	r3, #2048	; 0x800
   83306:	d502      	bpl.n	8330e <pmc_switch_mck_to_pllack+0x1e>
   83308:	e004      	b.n	83314 <pmc_switch_mck_to_pllack+0x24>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8330a:	3b01      	subs	r3, #1
   8330c:	d017      	beq.n	8333e <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8330e:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83310:	0710      	lsls	r0, r2, #28
   83312:	d5fa      	bpl.n	8330a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83314:	490c      	ldr	r1, [pc, #48]	; (83348 <pmc_switch_mck_to_pllack+0x58>)
   83316:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83318:	f023 0303 	bic.w	r3, r3, #3
   8331c:	f043 0302 	orr.w	r3, r3, #2
   83320:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83322:	6e88      	ldr	r0, [r1, #104]	; 0x68
   83324:	f010 0008 	ands.w	r0, r0, #8
   83328:	bf08      	it	eq
   8332a:	f44f 6300 	moveq.w	r3, #2048	; 0x800
   8332e:	d002      	beq.n	83336 <pmc_switch_mck_to_pllack+0x46>
   83330:	e007      	b.n	83342 <pmc_switch_mck_to_pllack+0x52>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83332:	3b01      	subs	r3, #1
   83334:	d003      	beq.n	8333e <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83336:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83338:	0712      	lsls	r2, r2, #28
   8333a:	d5fa      	bpl.n	83332 <pmc_switch_mck_to_pllack+0x42>
			return 1;
		}
	}

	return 0;
}
   8333c:	4770      	bx	lr
			return 1;
   8333e:	2001      	movs	r0, #1
   83340:	4770      	bx	lr
	return 0;
   83342:	2000      	movs	r0, #0
   83344:	4770      	bx	lr
   83346:	bf00      	nop
   83348:	400e0600 	.word	0x400e0600

0008334c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8334c:	b138      	cbz	r0, 8335e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8334e:	4910      	ldr	r1, [pc, #64]	; (83390 <pmc_switch_mainck_to_xtal+0x44>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   83350:	4a10      	ldr	r2, [pc, #64]	; (83394 <pmc_switch_mainck_to_xtal+0x48>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83352:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   83354:	4b10      	ldr	r3, [pc, #64]	; (83398 <pmc_switch_mainck_to_xtal+0x4c>)
   83356:	4002      	ands	r2, r0
   83358:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8335a:	620b      	str	r3, [r1, #32]
   8335c:	4770      	bx	lr
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8335e:	4a0c      	ldr	r2, [pc, #48]	; (83390 <pmc_switch_mainck_to_xtal+0x44>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83360:	0209      	lsls	r1, r1, #8
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83362:	6a10      	ldr	r0, [r2, #32]
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83364:	b28b      	uxth	r3, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   83366:	f420 115c 	bic.w	r1, r0, #3604480	; 0x370000
   8336a:	f021 0103 	bic.w	r1, r1, #3
   8336e:	430b      	orrs	r3, r1
   83370:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83374:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83378:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8337a:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8337c:	07db      	lsls	r3, r3, #31
   8337e:	d5fc      	bpl.n	8337a <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   83380:	6a13      	ldr	r3, [r2, #32]
   83382:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   83386:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8338a:	6213      	str	r3, [r2, #32]
	}
}
   8338c:	4770      	bx	lr
   8338e:	bf00      	nop
   83390:	400e0600 	.word	0x400e0600
   83394:	fec8fffc 	.word	0xfec8fffc
   83398:	01370002 	.word	0x01370002

0008339c <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   8339c:	4b02      	ldr	r3, [pc, #8]	; (833a8 <pmc_osc_is_ready_mainck+0xc>)
   8339e:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   833a0:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   833a4:	4770      	bx	lr
   833a6:	bf00      	nop
   833a8:	400e0600 	.word	0x400e0600

000833ac <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   833ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   833b0:	4b01      	ldr	r3, [pc, #4]	; (833b8 <pmc_disable_pllack+0xc>)
   833b2:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   833b4:	4770      	bx	lr
   833b6:	bf00      	nop
   833b8:	400e0600 	.word	0x400e0600

000833bc <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   833bc:	4b02      	ldr	r3, [pc, #8]	; (833c8 <pmc_is_locked_pllack+0xc>)
   833be:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   833c0:	f000 0002 	and.w	r0, r0, #2
   833c4:	4770      	bx	lr
   833c6:	bf00      	nop
   833c8:	400e0600 	.word	0x400e0600

000833cc <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   833cc:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
   833d0:	4a02      	ldr	r2, [pc, #8]	; (833dc <pmc_enable_upll_clock+0x10>)
   833d2:	61d3      	str	r3, [r2, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   833d4:	6e93      	ldr	r3, [r2, #104]	; 0x68
   833d6:	065b      	lsls	r3, r3, #25
   833d8:	d5fc      	bpl.n	833d4 <pmc_enable_upll_clock+0x8>
}
   833da:	4770      	bx	lr
   833dc:	400e0600 	.word	0x400e0600

000833e0 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   833e0:	4602      	mov	r2, r0
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   833e2:	4b06      	ldr	r3, [pc, #24]	; (833fc <pmc_enable_periph_clk+0x1c>)
   833e4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   833e8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   833ec:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   833f0:	2000      	movs	r0, #0
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   833f2:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   833f6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   833fa:	4770      	bx	lr
   833fc:	400e0600 	.word	0x400e0600

00083400 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   83400:	f44f 7380 	mov.w	r3, #256	; 0x100
   83404:	4a01      	ldr	r2, [pc, #4]	; (8340c <pmc_enable_pck+0xc>)
   83406:	4083      	lsls	r3, r0
   83408:	6013      	str	r3, [r2, #0]
}
   8340a:	4770      	bx	lr
   8340c:	400e0600 	.word	0x400e0600

00083410 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   83410:	4b03      	ldr	r3, [pc, #12]	; (83420 <pmc_set_fast_startup_input+0x10>)
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   83412:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   83416:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   83418:	4310      	orrs	r0, r2
   8341a:	6718      	str	r0, [r3, #112]	; 0x70
}
   8341c:	4770      	bx	lr
   8341e:	bf00      	nop
   83420:	400e0600 	.word	0x400e0600

00083424 <udi_vendor_getsetting>:
	return false; // Not supported request
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
   83424:	4b01      	ldr	r3, [pc, #4]	; (8342c <udi_vendor_getsetting+0x8>)
}
   83426:	7818      	ldrb	r0, [r3, #0]
   83428:	4770      	bx	lr
   8342a:	bf00      	nop
   8342c:	200721b4 	.word	0x200721b4

00083430 <udi_vendor_disable>:
	if (0 == udi_vendor_alternate_setting) {
   83430:	4b02      	ldr	r3, [pc, #8]	; (8343c <udi_vendor_disable+0xc>)
   83432:	781b      	ldrb	r3, [r3, #0]
   83434:	b103      	cbz	r3, 83438 <udi_vendor_disable+0x8>
}
   83436:	4770      	bx	lr
		UDI_VENDOR_DISABLE_EXT();
   83438:	4b01      	ldr	r3, [pc, #4]	; (83440 <udi_vendor_disable+0x10>)
   8343a:	4718      	bx	r3
   8343c:	200721b4 	.word	0x200721b4
   83440:	0008188d 	.word	0x0008188d

00083444 <udi_vendor_setup>:
	if (Udd_setup_is_in()) {
   83444:	4b08      	ldr	r3, [pc, #32]	; (83468 <udi_vendor_setup+0x24>)
   83446:	f993 2000 	ldrsb.w	r2, [r3]
   8344a:	781b      	ldrb	r3, [r3, #0]
   8344c:	2a00      	cmp	r2, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8344e:	f003 0360 	and.w	r3, r3, #96	; 0x60
	if (Udd_setup_is_in()) {
   83452:	db03      	blt.n	8345c <udi_vendor_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83454:	2b40      	cmp	r3, #64	; 0x40
   83456:	d005      	beq.n	83464 <udi_vendor_setup+0x20>
}
   83458:	2000      	movs	r0, #0
   8345a:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8345c:	2b40      	cmp	r3, #64	; 0x40
   8345e:	d1fb      	bne.n	83458 <udi_vendor_setup+0x14>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   83460:	4b02      	ldr	r3, [pc, #8]	; (8346c <udi_vendor_setup+0x28>)
   83462:	4718      	bx	r3
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   83464:	4b02      	ldr	r3, [pc, #8]	; (83470 <udi_vendor_setup+0x2c>)
   83466:	4718      	bx	r3
   83468:	20072288 	.word	0x20072288
   8346c:	000818e9 	.word	0x000818e9
   83470:	00081899 	.word	0x00081899

00083474 <udi_vendor_enable>:
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   83474:	4b06      	ldr	r3, [pc, #24]	; (83490 <udi_vendor_enable+0x1c>)
{
   83476:	b510      	push	{r4, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   83478:	4798      	blx	r3
   8347a:	4a06      	ldr	r2, [pc, #24]	; (83494 <udi_vendor_enable+0x20>)
   8347c:	78c3      	ldrb	r3, [r0, #3]
   8347e:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   83480:	b10b      	cbz	r3, 83486 <udi_vendor_enable+0x12>
}
   83482:	2001      	movs	r0, #1
   83484:	bd10      	pop	{r4, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   83486:	4b04      	ldr	r3, [pc, #16]	; (83498 <udi_vendor_enable+0x24>)
}
   83488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   8348c:	4718      	bx	r3
   8348e:	bf00      	nop
   83490:	00081131 	.word	0x00081131
   83494:	200721b4 	.word	0x200721b4
   83498:	00081865 	.word	0x00081865

0008349c <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   8349c:	b530      	push	{r4, r5, lr}
   8349e:	4684      	mov	ip, r0
   834a0:	4615      	mov	r5, r2
   834a2:	b083      	sub	sp, #12
   834a4:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   834a6:	4662      	mov	r2, ip
   834a8:	2100      	movs	r1, #0
   834aa:	4c03      	ldr	r4, [pc, #12]	; (834b8 <udi_vendor_bulk_in_run+0x1c>)
   834ac:	9500      	str	r5, [sp, #0]
   834ae:	2081      	movs	r0, #129	; 0x81
   834b0:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   834b2:	b003      	add	sp, #12
   834b4:	bd30      	pop	{r4, r5, pc}
   834b6:	bf00      	nop
   834b8:	000843a9 	.word	0x000843a9

000834bc <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   834bc:	b530      	push	{r4, r5, lr}
   834be:	4684      	mov	ip, r0
   834c0:	4615      	mov	r5, r2
   834c2:	b083      	sub	sp, #12
   834c4:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   834c6:	4662      	mov	r2, ip
   834c8:	2100      	movs	r1, #0
   834ca:	4c03      	ldr	r4, [pc, #12]	; (834d8 <udi_vendor_bulk_out_run+0x1c>)
   834cc:	9500      	str	r5, [sp, #0]
   834ce:	2002      	movs	r0, #2
   834d0:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   834d2:	b003      	add	sp, #12
   834d4:	bd30      	pop	{r4, r5, pc}
   834d6:	bf00      	nop
   834d8:	000843a9 	.word	0x000843a9

000834dc <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   834dc:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   834de:	f1a1 030e 	sub.w	r3, r1, #14
   834e2:	2b01      	cmp	r3, #1
   834e4:	d917      	bls.n	83516 <efc_perform_command+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   834e6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   834ea:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   834ec:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   834f0:	2300      	movs	r3, #0
   834f2:	4c0a      	ldr	r4, [pc, #40]	; (8351c <efc_perform_command+0x40>)

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
   834f4:	b2c9      	uxtb	r1, r1
   834f6:	7023      	strb	r3, [r4, #0]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   834f8:	4b09      	ldr	r3, [pc, #36]	; (83520 <efc_perform_command+0x44>)
   834fa:	ea03 2202 	and.w	r2, r3, r2, lsl #8
   834fe:	4311      	orrs	r1, r2
	result = efc_perform_fcr(p_efc,
   83500:	4b08      	ldr	r3, [pc, #32]	; (83524 <efc_perform_command+0x48>)
   83502:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
   83506:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   83508:	b925      	cbnz	r5, 83514 <efc_perform_command+0x38>
		cpu_irq_enable();
   8350a:	2301      	movs	r3, #1
   8350c:	7023      	strb	r3, [r4, #0]
   8350e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83512:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   83514:	bd38      	pop	{r3, r4, r5, pc}
		return EFC_RC_NOT_SUPPORT;
   83516:	f04f 30ff 	mov.w	r0, #4294967295
}
   8351a:	bd38      	pop	{r3, r4, r5, pc}
   8351c:	20070b04 	.word	0x20070b04
   83520:	00ffff00 	.word	0x00ffff00
   83524:	2007019d 	.word	0x2007019d

00083528 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   83528:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   8352c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   83530:	bf0c      	ite	eq
   83532:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   83534:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   83536:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   83538:	bf14      	ite	ne
   8353a:	2001      	movne	r0, #1
   8353c:	2000      	moveq	r0, #0
   8353e:	4770      	bx	lr

00083540 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   83540:	06d3      	lsls	r3, r2, #27
   83542:	d50e      	bpl.n	83562 <pio_configure_interrupt+0x22>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   83544:	0693      	lsls	r3, r2, #26
		p_pio->PIO_AIMER = ul_mask;
   83546:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   8354a:	bf4c      	ite	mi
   8354c:	f8c0 10d4 	strmi.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   83550:	f8c0 10d0 	strpl.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   83554:	0653      	lsls	r3, r2, #25
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   83556:	bf4c      	ite	mi
   83558:	f8c0 10c0 	strmi.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   8355c:	f8c0 10c4 	strpl.w	r1, [r0, #196]	; 0xc4
   83560:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   83562:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
	}
}
   83566:	4770      	bx	lr

00083568 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
   83568:	6401      	str	r1, [r0, #64]	; 0x40
}
   8356a:	4770      	bx	lr

0008356c <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   8356c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   8356e:	4770      	bx	lr

00083570 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   83570:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   83572:	4770      	bx	lr

00083574 <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83574:	0943      	lsrs	r3, r0, #5
   83576:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8357a:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8357e:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   83580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83582:	f000 001f 	and.w	r0, r0, #31
   83586:	fa23 f000 	lsr.w	r0, r3, r0
}
   8358a:	f000 0001 	and.w	r0, r0, #1
   8358e:	4770      	bx	lr

00083590 <pio_set_pin_high>:
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   83590:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83592:	0943      	lsrs	r3, r0, #5
   83594:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83598:	f203 7307 	addw	r3, r3, #1799	; 0x707
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8359c:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   835a0:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   835a2:	fa02 f000 	lsl.w	r0, r2, r0
   835a6:	6318      	str	r0, [r3, #48]	; 0x30
}
   835a8:	4770      	bx	lr
   835aa:	bf00      	nop

000835ac <pio_set_pin_low>:
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   835ac:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   835ae:	0943      	lsrs	r3, r0, #5
   835b0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   835b4:	f203 7307 	addw	r3, r3, #1799	; 0x707
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   835b8:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   835bc:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   835be:	fa02 f000 	lsl.w	r0, r2, r0
   835c2:	6358      	str	r0, [r3, #52]	; 0x34
}
   835c4:	4770      	bx	lr
   835c6:	bf00      	nop

000835c8 <pio_toggle_pin>:
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   835c8:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   835ca:	0943      	lsrs	r3, r0, #5
   835cc:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   835d0:	f203 7307 	addw	r3, r3, #1799	; 0x707
   835d4:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   835d6:	6b99      	ldr	r1, [r3, #56]	; 0x38
   835d8:	f000 001f 	and.w	r0, r0, #31
   835dc:	fa02 f000 	lsl.w	r0, r2, r0
   835e0:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   835e2:	bf14      	ite	ne
   835e4:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   835e6:	6318      	streq	r0, [r3, #48]	; 0x30
}
   835e8:	4770      	bx	lr
   835ea:	bf00      	nop

000835ec <pio_configure_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   835ec:	0943      	lsrs	r3, r0, #5
   835ee:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
	switch (ul_flags & PIO_TYPE_Msk) {
   835f2:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   835f6:	f203 7307 	addw	r3, r3, #1799	; 0x707
	switch (ul_flags & PIO_TYPE_Msk) {
   835fa:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   835fe:	ea4f 2343 	mov.w	r3, r3, lsl #9
	switch (ul_flags & PIO_TYPE_Msk) {
   83602:	d035      	beq.n	83670 <pio_configure_pin+0x84>
{
   83604:	b410      	push	{r4}
	switch (ul_flags & PIO_TYPE_Msk) {
   83606:	d816      	bhi.n	83636 <pio_configure_pin+0x4a>
   83608:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
   8360c:	d01b      	beq.n	83646 <pio_configure_pin+0x5a>
   8360e:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
   83612:	d115      	bne.n	83640 <pio_configure_pin+0x54>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   83614:	f04f 0c01 	mov.w	ip, #1
   83618:	f000 001f 	and.w	r0, r0, #31
   8361c:	fa0c f200 	lsl.w	r2, ip, r0
	p_pio->PIO_IDR = ul_mask;
   83620:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   83622:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   83624:	4310      	orrs	r0, r2
   83626:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   83628:	ea11 000c 	ands.w	r0, r1, ip
	p_pio->PIO_PDR = ul_mask;
   8362c:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
   8362e:	d01b      	beq.n	83668 <pio_configure_pin+0x7c>
		p_pio->PIO_PUER = ul_mask;
   83630:	665a      	str	r2, [r3, #100]	; 0x64
}
   83632:	bc10      	pop	{r4}
   83634:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
   83636:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   8363a:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
   8363e:	d02f      	beq.n	836a0 <pio_configure_pin+0xb4>
   83640:	2000      	movs	r0, #0
}
   83642:	bc10      	pop	{r4}
   83644:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   83646:	f04f 0c01 	mov.w	ip, #1
   8364a:	f000 001f 	and.w	r0, r0, #31
   8364e:	fa0c f200 	lsl.w	r2, ip, r0
	p_pio->PIO_IDR = ul_mask;
   83652:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   83654:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   83656:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   83658:	4020      	ands	r0, r4
   8365a:	ea20 0002 	bic.w	r0, r0, r2
   8365e:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   83660:	ea11 000c 	ands.w	r0, r1, ip
	p_pio->PIO_PDR = ul_mask;
   83664:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
   83666:	d1e3      	bne.n	83630 <pio_configure_pin+0x44>
		p_pio->PIO_PUDR = ul_mask;
   83668:	661a      	str	r2, [r3, #96]	; 0x60
	return 1;
   8366a:	4660      	mov	r0, ip
}
   8366c:	bc10      	pop	{r4}
   8366e:	4770      	bx	lr
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   83670:	2201      	movs	r2, #1
   83672:	f000 001f 	and.w	r0, r0, #31
   83676:	4082      	lsls	r2, r0
	if (ul_pull_up_enable) {
   83678:	07c8      	lsls	r0, r1, #31
	p_pio->PIO_IDR = ul_mask;
   8367a:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   8367c:	bf4c      	ite	mi
   8367e:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83680:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   83682:	f011 0f0a 	tst.w	r1, #10
		p_pio->PIO_IFER = ul_mask;
   83686:	bf14      	ite	ne
   83688:	621a      	strne	r2, [r3, #32]
		p_pio->PIO_IFDR = ul_mask;
   8368a:	625a      	streq	r2, [r3, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   8368c:	0788      	lsls	r0, r1, #30
   8368e:	d422      	bmi.n	836d6 <pio_configure_pin+0xea>
		if (ul_attribute & PIO_DEBOUNCE) {
   83690:	0708      	lsls	r0, r1, #28
			p_pio->PIO_DIFSR = ul_mask;
   83692:	bf48      	it	mi
   83694:	f8c3 2084 	strmi.w	r2, [r3, #132]	; 0x84
	return 1;
   83698:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   8369a:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   8369c:	601a      	str	r2, [r3, #0]
}
   8369e:	4770      	bx	lr
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   836a0:	2201      	movs	r2, #1
   836a2:	f000 001f 	and.w	r0, r0, #31
   836a6:	4082      	lsls	r2, r0
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   836a8:	f001 5c60 	and.w	ip, r1, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   836ac:	f3c1 0480 	ubfx	r4, r1, #2, #1
	if (ul_pull_up_enable) {
   836b0:	07c9      	lsls	r1, r1, #31
	p_pio->PIO_IDR = ul_mask;
   836b2:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   836b4:	bf4c      	ite	mi
   836b6:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   836b8:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_multidrive_enable) {
   836ba:	b954      	cbnz	r4, 836d2 <pio_configure_pin+0xe6>
		p_pio->PIO_MDDR = ul_mask;
   836bc:	655a      	str	r2, [r3, #84]	; 0x54
	if (ul_default_level) {
   836be:	f1bc 5f60 	cmp.w	ip, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
   836c2:	bf0c      	ite	eq
   836c4:	631a      	streq	r2, [r3, #48]	; 0x30
		p_pio->PIO_CODR = ul_mask;
   836c6:	635a      	strne	r2, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   836c8:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   836ca:	601a      	str	r2, [r3, #0]
	return 1;
   836cc:	2001      	movs	r0, #1
}
   836ce:	bc10      	pop	{r4}
   836d0:	4770      	bx	lr
		p_pio->PIO_MDER = ul_mask;
   836d2:	651a      	str	r2, [r3, #80]	; 0x50
   836d4:	e7f3      	b.n	836be <pio_configure_pin+0xd2>
		p_pio->PIO_SCIFSR = ul_mask;
   836d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	return 1;
   836da:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   836dc:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   836de:	601a      	str	r2, [r3, #0]
}
   836e0:	4770      	bx	lr
   836e2:	bf00      	nop

000836e4 <pio_configure_pin_group>:
{
   836e4:	4603      	mov	r3, r0
	switch (ul_flags & PIO_TYPE_Msk) {
   836e6:	f002 40f0 	and.w	r0, r2, #2013265920	; 0x78000000
   836ea:	f1b0 5f20 	cmp.w	r0, #671088640	; 0x28000000
   836ee:	d029      	beq.n	83744 <pio_configure_pin_group+0x60>
{
   836f0:	b410      	push	{r4}
	switch (ul_flags & PIO_TYPE_Msk) {
   836f2:	d810      	bhi.n	83716 <pio_configure_pin_group+0x32>
   836f4:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
   836f8:	d015      	beq.n	83726 <pio_configure_pin_group+0x42>
   836fa:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   836fe:	d10f      	bne.n	83720 <pio_configure_pin_group+0x3c>
	p_pio->PIO_IDR = ul_mask;
   83700:	6459      	str	r1, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   83702:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   83704:	4308      	orrs	r0, r1
   83706:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   83708:	f012 0001 	ands.w	r0, r2, #1
	p_pio->PIO_PDR = ul_mask;
   8370c:	6059      	str	r1, [r3, #4]
	if (ul_pull_up_enable) {
   8370e:	d015      	beq.n	8373c <pio_configure_pin_group+0x58>
		p_pio->PIO_PUER = ul_mask;
   83710:	6659      	str	r1, [r3, #100]	; 0x64
}
   83712:	bc10      	pop	{r4}
   83714:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
   83716:	f002 40e0 	and.w	r0, r2, #1879048192	; 0x70000000
   8371a:	f1b0 5f40 	cmp.w	r0, #805306368	; 0x30000000
   8371e:	d025      	beq.n	8376c <pio_configure_pin_group+0x88>
   83720:	2000      	movs	r0, #0
}
   83722:	bc10      	pop	{r4}
   83724:	4770      	bx	lr
	p_pio->PIO_IDR = ul_mask;
   83726:	6459      	str	r1, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   83728:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8372a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   8372c:	4020      	ands	r0, r4
   8372e:	ea20 0001 	bic.w	r0, r0, r1
   83732:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   83734:	f012 0001 	ands.w	r0, r2, #1
	p_pio->PIO_PDR = ul_mask;
   83738:	6059      	str	r1, [r3, #4]
	if (ul_pull_up_enable) {
   8373a:	d1e9      	bne.n	83710 <pio_configure_pin_group+0x2c>
		p_pio->PIO_PUDR = ul_mask;
   8373c:	6619      	str	r1, [r3, #96]	; 0x60
	return 1;
   8373e:	2001      	movs	r0, #1
}
   83740:	bc10      	pop	{r4}
   83742:	4770      	bx	lr
	if (ul_pull_up_enable) {
   83744:	07d0      	lsls	r0, r2, #31
	p_pio->PIO_IDR = ul_mask;
   83746:	6459      	str	r1, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   83748:	bf4c      	ite	mi
   8374a:	6659      	strmi	r1, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8374c:	6619      	strpl	r1, [r3, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8374e:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   83752:	bf14      	ite	ne
   83754:	6219      	strne	r1, [r3, #32]
		p_pio->PIO_IFDR = ul_mask;
   83756:	6259      	streq	r1, [r3, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   83758:	0790      	lsls	r0, r2, #30
   8375a:	d41e      	bmi.n	8379a <pio_configure_pin_group+0xb6>
		if (ul_attribute & PIO_DEBOUNCE) {
   8375c:	0710      	lsls	r0, r2, #28
			p_pio->PIO_DIFSR = ul_mask;
   8375e:	bf48      	it	mi
   83760:	f8c3 1084 	strmi.w	r1, [r3, #132]	; 0x84
	return 1;
   83764:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   83766:	6159      	str	r1, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   83768:	6019      	str	r1, [r3, #0]
}
   8376a:	4770      	bx	lr
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8376c:	f002 5060 	and.w	r0, r2, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   83770:	f3c2 0480 	ubfx	r4, r2, #2, #1
	if (ul_pull_up_enable) {
   83774:	07d2      	lsls	r2, r2, #31
	p_pio->PIO_IDR = ul_mask;
   83776:	6459      	str	r1, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   83778:	bf4c      	ite	mi
   8377a:	6659      	strmi	r1, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   8377c:	6619      	strpl	r1, [r3, #96]	; 0x60
	if (ul_multidrive_enable) {
   8377e:	b954      	cbnz	r4, 83796 <pio_configure_pin_group+0xb2>
		p_pio->PIO_MDDR = ul_mask;
   83780:	6559      	str	r1, [r3, #84]	; 0x54
	if (ul_default_level) {
   83782:	f1b0 5f60 	cmp.w	r0, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
   83786:	bf0c      	ite	eq
   83788:	6319      	streq	r1, [r3, #48]	; 0x30
		p_pio->PIO_CODR = ul_mask;
   8378a:	6359      	strne	r1, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   8378c:	6119      	str	r1, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   8378e:	6019      	str	r1, [r3, #0]
	return 1;
   83790:	2001      	movs	r0, #1
}
   83792:	bc10      	pop	{r4}
   83794:	4770      	bx	lr
		p_pio->PIO_MDER = ul_mask;
   83796:	6519      	str	r1, [r3, #80]	; 0x50
   83798:	e7f3      	b.n	83782 <pio_configure_pin_group+0x9e>
		p_pio->PIO_SCIFSR = ul_mask;
   8379a:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	return 1;
   8379e:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   837a0:	6159      	str	r1, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   837a2:	6019      	str	r1, [r3, #0]
}
   837a4:	4770      	bx	lr
   837a6:	bf00      	nop

000837a8 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
   837a8:	e7fe      	b.n	837a8 <Dummy_Handler>
   837aa:	bf00      	nop

000837ac <Reset_Handler>:

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   837ac:	4917      	ldr	r1, [pc, #92]	; (8380c <Reset_Handler+0x60>)
   837ae:	4818      	ldr	r0, [pc, #96]	; (83810 <Reset_Handler+0x64>)
{
   837b0:	b508      	push	{r3, lr}
	if (pSrc != pDest) {
   837b2:	4281      	cmp	r1, r0
   837b4:	d009      	beq.n	837ca <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   837b6:	4a17      	ldr	r2, [pc, #92]	; (83814 <Reset_Handler+0x68>)
   837b8:	4290      	cmp	r0, r2
   837ba:	d206      	bcs.n	837ca <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   837bc:	3a01      	subs	r2, #1
   837be:	1a12      	subs	r2, r2, r0
   837c0:	f022 0203 	bic.w	r2, r2, #3
   837c4:	4b14      	ldr	r3, [pc, #80]	; (83818 <Reset_Handler+0x6c>)
   837c6:	3204      	adds	r2, #4
   837c8:	4798      	blx	r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   837ca:	4814      	ldr	r0, [pc, #80]	; (8381c <Reset_Handler+0x70>)
   837cc:	4a14      	ldr	r2, [pc, #80]	; (83820 <Reset_Handler+0x74>)
   837ce:	4290      	cmp	r0, r2
   837d0:	d207      	bcs.n	837e2 <Reset_Handler+0x36>
		*pDest++ = 0;
   837d2:	3a01      	subs	r2, #1
   837d4:	1a12      	subs	r2, r2, r0
   837d6:	f022 0203 	bic.w	r2, r2, #3
   837da:	2100      	movs	r1, #0
   837dc:	4b11      	ldr	r3, [pc, #68]	; (83824 <Reset_Handler+0x78>)
   837de:	3204      	adds	r2, #4
   837e0:	4798      	blx	r3
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   837e2:	4b11      	ldr	r3, [pc, #68]	; (83828 <Reset_Handler+0x7c>)
   837e4:	4911      	ldr	r1, [pc, #68]	; (8382c <Reset_Handler+0x80>)
   837e6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   837ea:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   837ee:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   837f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   837f6:	608a      	str	r2, [r1, #8]
	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   837f8:	d203      	bcs.n	83802 <Reset_Handler+0x56>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   837fa:	688b      	ldr	r3, [r1, #8]
   837fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   83800:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   83802:	4b0b      	ldr	r3, [pc, #44]	; (83830 <Reset_Handler+0x84>)
   83804:	4798      	blx	r3

	/* Branch to main function */
	main();
   83806:	4b0b      	ldr	r3, [pc, #44]	; (83834 <Reset_Handler+0x88>)
   83808:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   8380a:	e7fe      	b.n	8380a <Reset_Handler+0x5e>
   8380c:	0008cdbc 	.word	0x0008cdbc
   83810:	20070000 	.word	0x20070000
   83814:	200714e0 	.word	0x200714e0
   83818:	00085c49 	.word	0x00085c49
   8381c:	200714e0 	.word	0x200714e0
   83820:	20073354 	.word	0x20073354
   83824:	00085d35 	.word	0x00085d35
   83828:	00080000 	.word	0x00080000
   8382c:	e000ed00 	.word	0xe000ed00
   83830:	00085c01 	.word	0x00085c01
   83834:	00080591 	.word	0x00080591

00083838 <twi_set_speed.part.0>:
	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   83838:	4b26      	ldr	r3, [pc, #152]	; (838d4 <twi_set_speed.part.0+0x9c>)
   8383a:	4299      	cmp	r1, r3
   8383c:	d92b      	bls.n	83896 <twi_set_speed.part.0+0x5e>
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
   8383e:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   83840:	4c25      	ldr	r4, [pc, #148]	; (838d8 <twi_set_speed.part.0+0xa0>)
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   83842:	4b26      	ldr	r3, [pc, #152]	; (838dc <twi_set_speed.part.0+0xa4>)
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   83844:	440c      	add	r4, r1
   83846:	00a1      	lsls	r1, r4, #2
   83848:	fbb2 f1f1 	udiv	r1, r2, r1
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8384c:	fba3 2302 	umull	r2, r3, r3, r2
   83850:	0b9b      	lsrs	r3, r3, #14
   83852:	3b04      	subs	r3, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83854:	2bff      	cmp	r3, #255	; 0xff
	uint32_t ckdiv = 0;
   83856:	f04f 0200 	mov.w	r2, #0
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8385a:	f1a1 0104 	sub.w	r1, r1, #4
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8385e:	d935      	bls.n	838cc <twi_set_speed.part.0+0x94>
			/* Increase clock divider */
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   83860:	085b      	lsrs	r3, r3, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83862:	2bff      	cmp	r3, #255	; 0xff
			ckdiv++;
   83864:	f102 0201 	add.w	r2, r2, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83868:	d910      	bls.n	8388c <twi_set_speed.part.0+0x54>
   8386a:	2a07      	cmp	r2, #7
   8386c:	d1f8      	bne.n	83860 <twi_set_speed.part.0+0x28>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8386e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   83872:	0209      	lsls	r1, r1, #8
   83874:	b2db      	uxtb	r3, r3
   83876:	b289      	uxth	r1, r1
   83878:	4313      	orrs	r3, r2
   8387a:	430b      	orrs	r3, r1
		p_twi->TWI_CWGR =
   8387c:	6103      	str	r3, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
   8387e:	bc10      	pop	{r4}
   83880:	2000      	movs	r0, #0
   83882:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83884:	2a07      	cmp	r2, #7
   83886:	d0f2      	beq.n	8386e <twi_set_speed.part.0+0x36>
			chdiv /= TWI_CLK_DIVIDER;
   83888:	0849      	lsrs	r1, r1, #1
			ckdiv++;
   8388a:	3201      	adds	r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8388c:	29ff      	cmp	r1, #255	; 0xff
				TWI_CWGR_CKDIV(ckdiv);		
   8388e:	bf98      	it	ls
   83890:	0412      	lslls	r2, r2, #16
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83892:	d8f7      	bhi.n	83884 <twi_set_speed.part.0+0x4c>
   83894:	e7ed      	b.n	83872 <twi_set_speed.part.0+0x3a>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   83896:	004b      	lsls	r3, r1, #1
   83898:	fbb2 f3f3 	udiv	r3, r2, r3
   8389c:	3b04      	subs	r3, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8389e:	2bff      	cmp	r3, #255	; 0xff
	uint32_t ckdiv = 0;
   838a0:	f04f 0200 	mov.w	r2, #0
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   838a4:	d908      	bls.n	838b8 <twi_set_speed.part.0+0x80>
			c_lh_div /= TWI_CLK_DIVIDER;
   838a6:	085b      	lsrs	r3, r3, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   838a8:	2bff      	cmp	r3, #255	; 0xff
			ckdiv++;
   838aa:	f102 0201 	add.w	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   838ae:	d90b      	bls.n	838c8 <twi_set_speed.part.0+0x90>
   838b0:	2a07      	cmp	r2, #7
   838b2:	d1f8      	bne.n	838a6 <twi_set_speed.part.0+0x6e>
   838b4:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   838b8:	b2d9      	uxtb	r1, r3
   838ba:	021b      	lsls	r3, r3, #8
   838bc:	430a      	orrs	r2, r1
   838be:	b29b      	uxth	r3, r3
   838c0:	4313      	orrs	r3, r2
		p_twi->TWI_CWGR =
   838c2:	6103      	str	r3, [r0, #16]
}
   838c4:	2000      	movs	r0, #0
   838c6:	4770      	bx	lr
				TWI_CWGR_CKDIV(ckdiv);
   838c8:	0412      	lsls	r2, r2, #16
   838ca:	e7f5      	b.n	838b8 <twi_set_speed.part.0+0x80>
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   838cc:	29ff      	cmp	r1, #255	; 0xff
   838ce:	d8db      	bhi.n	83888 <twi_set_speed.part.0+0x50>
   838d0:	e7cf      	b.n	83872 <twi_set_speed.part.0+0x3a>
   838d2:	bf00      	nop
   838d4:	0005dc00 	.word	0x0005dc00
   838d8:	7ffd1200 	.word	0x7ffd1200
   838dc:	057619f1 	.word	0x057619f1

000838e0 <twi_master_init>:
{
   838e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	p_twi->TWI_IDR = ~0UL;
   838e2:	f04f 3eff 	mov.w	lr, #4294967295
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   838e6:	f04f 0c80 	mov.w	ip, #128	; 0x80
	p_twi->TWI_CR = TWI_CR_MSDIS;
   838ea:	2708      	movs	r7, #8
	p_twi->TWI_CR = TWI_CR_SVDIS;
   838ec:	2620      	movs	r6, #32
	p_twi->TWI_CR = TWI_CR_MSEN;
   838ee:	2204      	movs	r2, #4
{
   838f0:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
   838f2:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
	p_twi->TWI_SR;
   838f6:	6a01      	ldr	r1, [r0, #32]
	p_twi->TWI_CR = TWI_CR_SWRST;
   838f8:	f8c0 c000 	str.w	ip, [r0]
	p_twi->TWI_RHR;
   838fc:	6b01      	ldr	r1, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
   838fe:	6007      	str	r7, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   83900:	6006      	str	r6, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
   83902:	6002      	str	r2, [r0, #0]
	if (ul_speed > I2C_FAST_MODE_SPEED) {
   83904:	4b0a      	ldr	r3, [pc, #40]	; (83930 <twi_master_init+0x50>)
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   83906:	6869      	ldr	r1, [r5, #4]
{
   83908:	4604      	mov	r4, r0
	if (ul_speed > I2C_FAST_MODE_SPEED) {
   8390a:	4299      	cmp	r1, r3
   8390c:	d80d      	bhi.n	8392a <twi_master_init+0x4a>
   8390e:	682a      	ldr	r2, [r5, #0]
   83910:	4b08      	ldr	r3, [pc, #32]	; (83934 <twi_master_init+0x54>)
   83912:	4798      	blx	r3
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   83914:	f1a0 0001 	sub.w	r0, r0, #1
   83918:	fab0 f080 	clz	r0, r0
   8391c:	0940      	lsrs	r0, r0, #5
	if (p_opt->smbus == 1) {
   8391e:	7a6b      	ldrb	r3, [r5, #9]
   83920:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   83922:	bf04      	itt	eq
   83924:	2340      	moveq	r3, #64	; 0x40
   83926:	6023      	streq	r3, [r4, #0]
}
   83928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		status = TWI_INVALID_ARGUMENT;
   8392a:	2001      	movs	r0, #1
   8392c:	e7f7      	b.n	8391e <twi_master_init+0x3e>
   8392e:	bf00      	nop
   83930:	00061a80 	.word	0x00061a80
   83934:	00083839 	.word	0x00083839

00083938 <twi_master_read>:
{
   83938:	4684      	mov	ip, r0
	uint32_t cnt = p_packet->length;
   8393a:	68c8      	ldr	r0, [r1, #12]
	if (cnt == 0) {
   8393c:	2800      	cmp	r0, #0
   8393e:	d061      	beq.n	83a04 <twi_master_read+0xcc>
{
   83940:	b470      	push	{r4, r5, r6}
	p_twi->TWI_MMR = 0;
   83942:	2500      	movs	r5, #0
	uint8_t *buffer = p_packet->buffer;
   83944:	688c      	ldr	r4, [r1, #8]
	p_twi->TWI_MMR = 0;
   83946:	f8cc 5004 	str.w	r5, [ip, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   8394a:	7c0b      	ldrb	r3, [r1, #16]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   8394c:	684a      	ldr	r2, [r1, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   8394e:	041b      	lsls	r3, r3, #16
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   83950:	0212      	lsls	r2, r2, #8
   83952:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   83956:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   8395a:	4313      	orrs	r3, r2
   8395c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   83960:	f8cc 3004 	str.w	r3, [ip, #4]
	p_twi->TWI_IADR = 0;
   83964:	f8cc 500c 	str.w	r5, [ip, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   83968:	684a      	ldr	r2, [r1, #4]
	if (len == 0)
   8396a:	2a00      	cmp	r2, #0
   8396c:	d03a      	beq.n	839e4 <twi_master_read+0xac>
	if (len > 1) {
   8396e:	2a01      	cmp	r2, #1
	val = addr[0];
   83970:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
   83972:	dd02      	ble.n	8397a <twi_master_read+0x42>
		val |= addr[1];
   83974:	880b      	ldrh	r3, [r1, #0]
   83976:	ba5b      	rev16	r3, r3
   83978:	b29b      	uxth	r3, r3
	if (len > 2) {
   8397a:	2a02      	cmp	r2, #2
   8397c:	dd02      	ble.n	83984 <twi_master_read+0x4c>
		val |= addr[2];
   8397e:	788a      	ldrb	r2, [r1, #2]
   83980:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	if (cnt == 1) {
   83984:	2801      	cmp	r0, #1
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   83986:	f8cc 300c 	str.w	r3, [ip, #12]
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   8398a:	bf0b      	itete	eq
   8398c:	2303      	moveq	r3, #3
		p_twi->TWI_CR = TWI_CR_START;
   8398e:	2301      	movne	r3, #1
		stop_sent = 1;
   83990:	4605      	moveq	r5, r0
		stop_sent = 0;
   83992:	2500      	movne	r5, #0
   83994:	f247 5230 	movw	r2, #30000	; 0x7530
			p_twi->TWI_CR = TWI_CR_STOP;
   83998:	2602      	movs	r6, #2
		p_twi->TWI_CR = TWI_CR_START;
   8399a:	f8cc 3000 	str.w	r3, [ip]
		status = p_twi->TWI_SR;
   8399e:	f8dc 3020 	ldr.w	r3, [ip, #32]
		if (status & TWI_SR_NACK) {
   839a2:	05d9      	lsls	r1, r3, #23
   839a4:	d413      	bmi.n	839ce <twi_master_read+0x96>
		if (!timeout--) {
   839a6:	1e51      	subs	r1, r2, #1
   839a8:	b372      	cbz	r2, 83a08 <twi_master_read+0xd0>
		if (cnt == 1  && !stop_sent) {
   839aa:	2801      	cmp	r0, #1
   839ac:	d01c      	beq.n	839e8 <twi_master_read+0xb0>
		if (!(status & TWI_SR_RXRDY)) {
   839ae:	079b      	lsls	r3, r3, #30
   839b0:	d521      	bpl.n	839f6 <twi_master_read+0xbe>
		*buffer++ = p_twi->TWI_RHR;
   839b2:	4623      	mov	r3, r4
   839b4:	f8dc 2030 	ldr.w	r2, [ip, #48]	; 0x30
	while (cnt > 0) {
   839b8:	3801      	subs	r0, #1
		*buffer++ = p_twi->TWI_RHR;
   839ba:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt > 0) {
   839be:	d009      	beq.n	839d4 <twi_master_read+0x9c>
		timeout = TWI_TIMEOUT;
   839c0:	f247 5230 	movw	r2, #30000	; 0x7530
   839c4:	461c      	mov	r4, r3
		status = p_twi->TWI_SR;
   839c6:	f8dc 3020 	ldr.w	r3, [ip, #32]
		if (status & TWI_SR_NACK) {
   839ca:	05d9      	lsls	r1, r3, #23
   839cc:	d5eb      	bpl.n	839a6 <twi_master_read+0x6e>
			return TWI_RECEIVE_NACK;
   839ce:	2005      	movs	r0, #5
}
   839d0:	bc70      	pop	{r4, r5, r6}
   839d2:	4770      	bx	lr
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   839d4:	f8dc 3020 	ldr.w	r3, [ip, #32]
   839d8:	07da      	lsls	r2, r3, #31
   839da:	d5fb      	bpl.n	839d4 <twi_master_read+0x9c>
}
   839dc:	bc70      	pop	{r4, r5, r6}
	p_twi->TWI_SR;
   839de:	f8dc 3020 	ldr.w	r3, [ip, #32]
}
   839e2:	4770      	bx	lr
		return 0;
   839e4:	4613      	mov	r3, r2
   839e6:	e7cd      	b.n	83984 <twi_master_read+0x4c>
		if (cnt == 1  && !stop_sent) {
   839e8:	b90d      	cbnz	r5, 839ee <twi_master_read+0xb6>
			p_twi->TWI_CR = TWI_CR_STOP;
   839ea:	f8cc 6000 	str.w	r6, [ip]
		if (!(status & TWI_SR_RXRDY)) {
   839ee:	079b      	lsls	r3, r3, #30
   839f0:	d505      	bpl.n	839fe <twi_master_read+0xc6>
   839f2:	2501      	movs	r5, #1
   839f4:	e7dd      	b.n	839b2 <twi_master_read+0x7a>
   839f6:	4623      	mov	r3, r4
   839f8:	460a      	mov	r2, r1
		timeout = TWI_TIMEOUT;
   839fa:	461c      	mov	r4, r3
   839fc:	e7e3      	b.n	839c6 <twi_master_read+0x8e>
		if (!(status & TWI_SR_RXRDY)) {
   839fe:	460a      	mov	r2, r1
   83a00:	2501      	movs	r5, #1
   83a02:	e7cc      	b.n	8399e <twi_master_read+0x66>
		return TWI_INVALID_ARGUMENT;
   83a04:	2001      	movs	r0, #1
}
   83a06:	4770      	bx	lr
			return TWI_ERROR_TIMEOUT;
   83a08:	2009      	movs	r0, #9
}
   83a0a:	bc70      	pop	{r4, r5, r6}
   83a0c:	4770      	bx	lr
   83a0e:	bf00      	nop

00083a10 <twi_master_write>:
	uint32_t cnt = p_packet->length;
   83a10:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
   83a12:	2a00      	cmp	r2, #0
   83a14:	d038      	beq.n	83a88 <twi_master_write+0x78>
{
   83a16:	b430      	push	{r4, r5}
   83a18:	4603      	mov	r3, r0
	p_twi->TWI_MMR = 0;
   83a1a:	2500      	movs	r5, #0
	uint8_t *buffer = p_packet->buffer;
   83a1c:	6888      	ldr	r0, [r1, #8]
	p_twi->TWI_MMR = 0;
   83a1e:	605d      	str	r5, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   83a20:	7c0c      	ldrb	r4, [r1, #16]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   83a22:	f8d1 c004 	ldr.w	ip, [r1, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   83a26:	0424      	lsls	r4, r4, #16
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   83a28:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   83a2c:	f404 04fe 	and.w	r4, r4, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   83a30:	f40c 7c40 	and.w	ip, ip, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   83a34:	ea44 040c 	orr.w	r4, r4, ip
   83a38:	605c      	str	r4, [r3, #4]
	p_twi->TWI_IADR = 0;
   83a3a:	60dd      	str	r5, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   83a3c:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
   83a3e:	b30d      	cbz	r5, 83a84 <twi_master_write+0x74>
	if (len > 1) {
   83a40:	2d01      	cmp	r5, #1
	val = addr[0];
   83a42:	780c      	ldrb	r4, [r1, #0]
	if (len > 1) {
   83a44:	dd02      	ble.n	83a4c <twi_master_write+0x3c>
		val |= addr[1];
   83a46:	880c      	ldrh	r4, [r1, #0]
   83a48:	ba64      	rev16	r4, r4
   83a4a:	b2a4      	uxth	r4, r4
	if (len > 2) {
   83a4c:	2d02      	cmp	r5, #2
   83a4e:	dd02      	ble.n	83a56 <twi_master_write+0x46>
		val |= addr[2];
   83a50:	7889      	ldrb	r1, [r1, #2]
   83a52:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   83a56:	60dc      	str	r4, [r3, #12]
	while (cnt > 0) {
   83a58:	1881      	adds	r1, r0, r2
   83a5a:	e007      	b.n	83a6c <twi_master_write+0x5c>
		status = p_twi->TWI_SR;
   83a5c:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   83a5e:	05d5      	lsls	r5, r2, #23
   83a60:	d40d      	bmi.n	83a7e <twi_master_write+0x6e>
		if (!(status & TWI_SR_TXRDY)) {
   83a62:	0754      	lsls	r4, r2, #29
		p_twi->TWI_THR = *buffer++;
   83a64:	bf44      	itt	mi
   83a66:	f810 2b01 	ldrbmi.w	r2, [r0], #1
   83a6a:	635a      	strmi	r2, [r3, #52]	; 0x34
	while (cnt > 0) {
   83a6c:	4288      	cmp	r0, r1
   83a6e:	d1f5      	bne.n	83a5c <twi_master_write+0x4c>
   83a70:	e001      	b.n	83a76 <twi_master_write+0x66>
		if (status & TWI_SR_TXRDY) {
   83a72:	0751      	lsls	r1, r2, #29
   83a74:	d40a      	bmi.n	83a8c <twi_master_write+0x7c>
		status = p_twi->TWI_SR;
   83a76:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   83a78:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   83a7c:	d0f9      	beq.n	83a72 <twi_master_write+0x62>
			return TWI_RECEIVE_NACK;
   83a7e:	2005      	movs	r0, #5
}
   83a80:	bc30      	pop	{r4, r5}
   83a82:	4770      	bx	lr
		return 0;
   83a84:	462c      	mov	r4, r5
   83a86:	e7e6      	b.n	83a56 <twi_master_write+0x46>
		return TWI_INVALID_ARGUMENT;
   83a88:	2001      	movs	r0, #1
}
   83a8a:	4770      	bx	lr
	p_twi->TWI_CR = TWI_CR_STOP;
   83a8c:	2202      	movs	r2, #2
   83a8e:	601a      	str	r2, [r3, #0]
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   83a90:	6a1a      	ldr	r2, [r3, #32]
   83a92:	07d2      	lsls	r2, r2, #31
   83a94:	d5fc      	bpl.n	83a90 <twi_master_write+0x80>
}
   83a96:	bc30      	pop	{r4, r5}
   83a98:	4770      	bx	lr
   83a9a:	bf00      	nop

00083a9c <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   83a9c:	4b02      	ldr	r3, [pc, #8]	; (83aa8 <pmc_is_wakeup_clocks_restored+0xc>)
   83a9e:	7818      	ldrb	r0, [r3, #0]
}
   83aa0:	f080 0001 	eor.w	r0, r0, #1
   83aa4:	4770      	bx	lr
   83aa6:	bf00      	nop
   83aa8:	200721b5 	.word	0x200721b5

00083aac <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   83aac:	4a0c      	ldr	r2, [pc, #48]	; (83ae0 <_sbrk+0x34>)
{
   83aae:	4603      	mov	r3, r0
	if (heap == NULL) {
   83ab0:	6810      	ldr	r0, [r2, #0]
	int ramend = (int)&__ram_end__;
   83ab2:	490c      	ldr	r1, [pc, #48]	; (83ae4 <_sbrk+0x38>)
	if (heap == NULL) {
   83ab4:	b130      	cbz	r0, 83ac4 <_sbrk+0x18>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
   83ab6:	4403      	add	r3, r0
   83ab8:	428b      	cmp	r3, r1
		return (caddr_t) -1;	
   83aba:	bfcc      	ite	gt
   83abc:	f04f 30ff 	movgt.w	r0, #4294967295
	}

	heap += incr;
   83ac0:	6013      	strle	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   83ac2:	4770      	bx	lr
{
   83ac4:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
   83ac6:	4c08      	ldr	r4, [pc, #32]	; (83ae8 <_sbrk+0x3c>)
	if (((int)prev_heap + incr) > ramend) {
   83ac8:	4423      	add	r3, r4
   83aca:	428b      	cmp	r3, r1
		heap = (unsigned char *)&_end;
   83acc:	6014      	str	r4, [r2, #0]
	heap += incr;
   83ace:	bfd8      	it	le
   83ad0:	6013      	strle	r3, [r2, #0]
		heap = (unsigned char *)&_end;
   83ad2:	4620      	mov	r0, r4
		return (caddr_t) -1;	
   83ad4:	bfc8      	it	gt
   83ad6:	f04f 30ff 	movgt.w	r0, #4294967295
}
   83ada:	bc10      	pop	{r4}
   83adc:	4770      	bx	lr
   83ade:	bf00      	nop
   83ae0:	200721b8 	.word	0x200721b8
   83ae4:	20087ffc 	.word	0x20087ffc
   83ae8:	20074858 	.word	0x20074858

00083aec <_close>:
}

extern int _close(int file)
{
	return -1;
}
   83aec:	f04f 30ff 	mov.w	r0, #4294967295
   83af0:	4770      	bx	lr
   83af2:	bf00      	nop

00083af4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   83af4:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
   83af8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   83afa:	604b      	str	r3, [r1, #4]
}
   83afc:	4770      	bx	lr
   83afe:	bf00      	nop

00083b00 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   83b00:	2001      	movs	r0, #1
   83b02:	4770      	bx	lr

00083b04 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   83b04:	2000      	movs	r0, #0
   83b06:	4770      	bx	lr

00083b08 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
   83b08:	be00      	bkpt	0x0000
	for (;;);
   83b0a:	e7fe      	b.n	83b0a <_exit+0x2>

00083b0c <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
   83b0c:	4770      	bx	lr
   83b0e:	bf00      	nop

00083b10 <_getpid>:

extern int _getpid(void)
{
	return -1;
}
   83b10:	f04f 30ff 	mov.w	r0, #4294967295
   83b14:	4770      	bx	lr
   83b16:	bf00      	nop

00083b18 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
   83b18:	f890 c014 	ldrb.w	ip, [r0, #20]
{
   83b1c:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
   83b1e:	f01c 0f01 	tst.w	ip, #1
   83b22:	d014      	beq.n	83b4e <udd_ep_finish_job+0x36>
{
   83b24:	b410      	push	{r4}
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
	if (NULL == ptr_job->call_trans) {
   83b26:	6804      	ldr	r4, [r0, #0]
	ptr_job->busy = false;
   83b28:	f36f 0c00 	bfc	ip, #0, #1
   83b2c:	f880 c014 	strb.w	ip, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   83b30:	b15c      	cbz	r4, 83b4a <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
		ep_num |= USB_EP_DIR_IN;
   83b32:	4608      	mov	r0, r1
	if (Is_udd_endpoint_in(ep_num)) {
   83b34:	4906      	ldr	r1, [pc, #24]	; (83b50 <udd_ep_finish_job+0x38>)
   83b36:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   83b3a:	05c9      	lsls	r1, r1, #23
		ep_num |= USB_EP_DIR_IN;
   83b3c:	bf48      	it	mi
   83b3e:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   83b42:	6899      	ldr	r1, [r3, #8]
   83b44:	4623      	mov	r3, r4
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   83b46:	bc10      	pop	{r4}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   83b48:	4718      	bx	r3
}
   83b4a:	bc10      	pop	{r4}
   83b4c:	4770      	bx	lr
   83b4e:	4770      	bx	lr
   83b50:	400ac100 	.word	0x400ac100

00083b54 <udd_ep_trans_done>:

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   83b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if (!ptr_job->busy) {
   83b58:	4d5e      	ldr	r5, [pc, #376]	; (83cd4 <udd_ep_trans_done+0x180>)
	ptr_job = &udd_ep_job[ep - 1];
   83b5a:	f100 3eff 	add.w	lr, r0, #4294967295
	if (!ptr_job->busy) {
   83b5e:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   83b62:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   83b66:	7d19      	ldrb	r1, [r3, #20]
   83b68:	07ca      	lsls	r2, r1, #31
   83b6a:	d57c      	bpl.n	83c66 <udd_ep_trans_done+0x112>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   83b6c:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
   83b70:	42a1      	cmp	r1, r4
   83b72:	4602      	mov	r2, r0
   83b74:	ea4f 004e 	mov.w	r0, lr, lsl #1
   83b78:	d04c      	beq.n	83c14 <udd_ep_trans_done+0xc0>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   83b7a:	1a64      	subs	r4, r4, r1

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   83b7c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   83b80:	d818      	bhi.n	83bb4 <udd_ep_trans_done+0x60>
			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
		}
		if (Is_udd_endpoint_in(ep)) {
   83b82:	4f55      	ldr	r7, [pc, #340]	; (83cd8 <udd_ep_trans_done+0x184>)
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   83b84:	0426      	lsls	r6, r4, #16
		if (Is_udd_endpoint_in(ep)) {
   83b86:	f857 c022 	ldr.w	ip, [r7, r2, lsl #2]
   83b8a:	f41c 7f80 	tst.w	ip, #256	; 0x100
   83b8e:	d06c      	beq.n	83c6a <udd_ep_trans_done+0x116>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   83b90:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   83b94:	f3c7 1c02 	ubfx	ip, r7, #4, #3
   83b98:	2708      	movs	r7, #8
   83b9a:	fa07 f70c 	lsl.w	r7, r7, ip
   83b9e:	3f01      	subs	r7, #1
   83ba0:	4227      	tst	r7, r4
   83ba2:	f000 8093 	beq.w	83ccc <udd_ep_trans_done+0x178>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   83ba6:	7d1f      	ldrb	r7, [r3, #20]
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   83ba8:	f046 0629 	orr.w	r6, r6, #41	; 0x29
				ptr_job->b_shortpacket = false;
   83bac:	f36f 0741 	bfc	r7, #1, #1
   83bb0:	751f      	strb	r7, [r3, #20]
   83bb2:	e009      	b.n	83bc8 <udd_ep_trans_done+0x74>
		if (Is_udd_endpoint_in(ep)) {
   83bb4:	4b48      	ldr	r3, [pc, #288]	; (83cd8 <udd_ep_trans_done+0x184>)
   83bb6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
   83bba:	05e4      	lsls	r4, r4, #23
   83bbc:	d55e      	bpl.n	83c7c <udd_ep_trans_done+0x128>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   83bbe:	2621      	movs	r6, #33	; 0x21
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   83bc0:	f44f 3480 	mov.w	r4, #65536	; 0x10000
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   83bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   83bc8:	eb00 0c0e 	add.w	ip, r0, lr
   83bcc:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
   83bd0:	f8dc 3004 	ldr.w	r3, [ip, #4]
   83bd4:	4419      	add	r1, r3
   83bd6:	4b41      	ldr	r3, [pc, #260]	; (83cdc <udd_ep_trans_done+0x188>)
   83bd8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   83bdc:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83bde:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83be2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83be4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83be8:	f04f 0800 	mov.w	r8, #0
   83bec:	493c      	ldr	r1, [pc, #240]	; (83ce0 <udd_ep_trans_done+0x18c>)
   83bee:	f881 8000 	strb.w	r8, [r1]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   83bf2:	f8d3 800c 	ldr.w	r8, [r3, #12]
   83bf6:	f018 0f10 	tst.w	r8, #16
   83bfa:	d049      	beq.n	83c90 <udd_ep_trans_done+0x13c>
	if (cpu_irq_is_enabled_flags(flags))
   83bfc:	b927      	cbnz	r7, 83c08 <udd_ep_trans_done+0xb4>
		cpu_irq_enable();
   83bfe:	2301      	movs	r3, #1
   83c00:	700b      	strb	r3, [r1, #0]
   83c02:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83c06:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   83c08:	eb00 030e 	add.w	r3, r0, lr
   83c0c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   83c10:	68d9      	ldr	r1, [r3, #12]
   83c12:	6099      	str	r1, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   83c14:	4b30      	ldr	r3, [pc, #192]	; (83cd8 <udd_ep_trans_done+0x184>)
   83c16:	0091      	lsls	r1, r2, #2
   83c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   83c1c:	05df      	lsls	r7, r3, #23
   83c1e:	d506      	bpl.n	83c2e <udd_ep_trans_done+0xda>
		if (ptr_job->b_shortpacket) {
   83c20:	eb00 030e 	add.w	r3, r0, lr
   83c24:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   83c28:	7d1b      	ldrb	r3, [r3, #20]
   83c2a:	079e      	lsls	r6, r3, #30
   83c2c:	d407      	bmi.n	83c3e <udd_ep_trans_done+0xea>
	ptr_job = &udd_ep_job[ep - 1];
   83c2e:	4470      	add	r0, lr
			return;
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   83c30:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   83c34:	2100      	movs	r1, #0
}
   83c36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	udd_ep_finish_job(ptr_job, false, ep);
   83c3a:	4b2a      	ldr	r3, [pc, #168]	; (83ce4 <udd_ep_trans_done+0x190>)
   83c3c:	4718      	bx	r3
			udd_ack_in_send(ep);
   83c3e:	2301      	movs	r3, #1
   83c40:	4c29      	ldr	r4, [pc, #164]	; (83ce8 <udd_ep_trans_done+0x194>)
			if (Is_udd_write_enabled(ep)) {
   83c42:	482a      	ldr	r0, [pc, #168]	; (83cec <udd_ep_trans_done+0x198>)
			udd_ack_in_send(ep);
   83c44:	510b      	str	r3, [r1, r4]
			if (Is_udd_write_enabled(ep)) {
   83c46:	5808      	ldr	r0, [r1, r0]
			udd_enable_in_send_interrupt(ep);
   83c48:	4c29      	ldr	r4, [pc, #164]	; (83cf0 <udd_ep_trans_done+0x19c>)
			if (Is_udd_write_enabled(ep)) {
   83c4a:	03c5      	lsls	r5, r0, #15
				udd_raise_in_send(ep);
   83c4c:	bf48      	it	mi
   83c4e:	4829      	ldrmi	r0, [pc, #164]	; (83cf4 <udd_ep_trans_done+0x1a0>)
			udd_enable_in_send_interrupt(ep);
   83c50:	f04f 0501 	mov.w	r5, #1
				udd_raise_in_send(ep);
   83c54:	bf48      	it	mi
   83c56:	500b      	strmi	r3, [r1, r0]
			udd_enable_endpoint_interrupt(ep);
   83c58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   83c5c:	4826      	ldr	r0, [pc, #152]	; (83cf8 <udd_ep_trans_done+0x1a4>)
   83c5e:	fa03 f202 	lsl.w	r2, r3, r2
			udd_enable_in_send_interrupt(ep);
   83c62:	510d      	str	r5, [r1, r4]
			udd_enable_endpoint_interrupt(ep);
   83c64:	6182      	str	r2, [r0, #24]
}
   83c66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   83c6a:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   83c6e:	f3c3 23c1 	ubfx	r3, r3, #11, #2
   83c72:	2b01      	cmp	r3, #1
   83c74:	d022      	beq.n	83cbc <udd_ep_trans_done+0x168>
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   83c76:	f046 0635 	orr.w	r6, r6, #53	; 0x35
   83c7a:	e7a5      	b.n	83bc8 <udd_ep_trans_done+0x74>
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   83c7c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
   83c80:	f3c4 24c1 	ubfx	r4, r4, #11, #2
   83c84:	2c01      	cmp	r4, #1
   83c86:	d09a      	beq.n	83bbe <udd_ep_trans_done+0x6a>
   83c88:	2635      	movs	r6, #53	; 0x35
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   83c8a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   83c8e:	e79b      	b.n	83bc8 <udd_ep_trans_done+0x74>
			udd_enable_endpoint_dma_interrupt(ep);
   83c90:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   83c94:	609e      	str	r6, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   83c96:	f8dc 300c 	ldr.w	r3, [ip, #12]
			ptr_job->buf_load = next_trans;
   83c9a:	f8cc 4010 	str.w	r4, [ip, #16]
			ptr_job->buf_cnt += next_trans;
   83c9e:	441c      	add	r4, r3
			udd_enable_endpoint_dma_interrupt(ep);
   83ca0:	4b15      	ldr	r3, [pc, #84]	; (83cf8 <udd_ep_trans_done+0x1a4>)
   83ca2:	fa00 f00e 	lsl.w	r0, r0, lr
			ptr_job->buf_cnt += next_trans;
   83ca6:	f8cc 400c 	str.w	r4, [ip, #12]
			udd_enable_endpoint_dma_interrupt(ep);
   83caa:	6198      	str	r0, [r3, #24]
	if (cpu_irq_is_enabled_flags(flags))
   83cac:	2f00      	cmp	r7, #0
   83cae:	d1da      	bne.n	83c66 <udd_ep_trans_done+0x112>
		cpu_irq_enable();
   83cb0:	2301      	movs	r3, #1
   83cb2:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   83cb4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83cb8:	b662      	cpsie	i
}
   83cba:	e7d4      	b.n	83c66 <udd_ep_trans_done+0x112>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   83cbc:	2308      	movs	r3, #8
   83cbe:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   83cc2:	f3c7 1702 	ubfx	r7, r7, #4, #3
   83cc6:	40bb      	lsls	r3, r7
   83cc8:	42a3      	cmp	r3, r4
   83cca:	d2d4      	bcs.n	83c76 <udd_ep_trans_done+0x122>
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   83ccc:	f046 0621 	orr.w	r6, r6, #33	; 0x21
   83cd0:	e77a      	b.n	83bc8 <udd_ep_trans_done+0x74>
   83cd2:	bf00      	nop
   83cd4:	200721c8 	.word	0x200721c8
   83cd8:	400ac100 	.word	0x400ac100
   83cdc:	400ac300 	.word	0x400ac300
   83ce0:	20070b04 	.word	0x20070b04
   83ce4:	00083b19 	.word	0x00083b19
   83ce8:	400ac160 	.word	0x400ac160
   83cec:	400ac130 	.word	0x400ac130
   83cf0:	400ac1f0 	.word	0x400ac1f0
   83cf4:	400ac190 	.word	0x400ac190
   83cf8:	400ac000 	.word	0x400ac000

00083cfc <udd_ctrl_in_sent>:
{
   83cfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83d00:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83d04:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83d06:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83d0a:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   83d0c:	2301      	movs	r3, #1
   83d0e:	4d56      	ldr	r5, [pc, #344]	; (83e68 <udd_ctrl_in_sent+0x16c>)
   83d10:	4956      	ldr	r1, [pc, #344]	; (83e6c <udd_ctrl_in_sent+0x170>)
   83d12:	7028      	strb	r0, [r5, #0]
   83d14:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   83d18:	b91a      	cbnz	r2, 83d22 <udd_ctrl_in_sent+0x26>
		cpu_irq_enable();
   83d1a:	702b      	strb	r3, [r5, #0]
   83d1c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83d20:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   83d22:	f8df 814c 	ldr.w	r8, [pc, #332]	; 83e70 <udd_ctrl_in_sent+0x174>
   83d26:	f898 3000 	ldrb.w	r3, [r8]
   83d2a:	2b03      	cmp	r3, #3
   83d2c:	d05c      	beq.n	83de8 <udd_ctrl_in_sent+0xec>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   83d2e:	4f51      	ldr	r7, [pc, #324]	; (83e74 <udd_ctrl_in_sent+0x178>)
   83d30:	4e51      	ldr	r6, [pc, #324]	; (83e78 <udd_ctrl_in_sent+0x17c>)
   83d32:	883a      	ldrh	r2, [r7, #0]
   83d34:	89b4      	ldrh	r4, [r6, #12]
   83d36:	1aa4      	subs	r4, r4, r2
   83d38:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   83d3a:	2c00      	cmp	r4, #0
   83d3c:	d032      	beq.n	83da4 <udd_ctrl_in_sent+0xa8>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83d3e:	4613      	mov	r3, r2
   83d40:	f8df 9138 	ldr.w	r9, [pc, #312]	; 83e7c <udd_ctrl_in_sent+0x180>
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   83d44:	2c3f      	cmp	r4, #63	; 0x3f
		b_shortpacket = false;
   83d46:	bf86      	itte	hi
   83d48:	2200      	movhi	r2, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   83d4a:	2440      	movhi	r4, #64	; 0x40
		b_shortpacket = true;
   83d4c:	2201      	movls	r2, #1
   83d4e:	f889 2000 	strb.w	r2, [r9]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83d52:	68b2      	ldr	r2, [r6, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83d54:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83d58:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83d5a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83d5e:	2100      	movs	r1, #0
   83d60:	7029      	strb	r1, [r5, #0]
	if (Is_udd_out_received(0)) {
   83d62:	4942      	ldr	r1, [pc, #264]	; (83e6c <udd_ctrl_in_sent+0x170>)
   83d64:	f8d1 1130 	ldr.w	r1, [r1, #304]	; 0x130
   83d68:	0789      	lsls	r1, r1, #30
   83d6a:	d432      	bmi.n	83dd2 <udd_ctrl_in_sent+0xd6>
	for (i = 0; i < nb_remain; i++) {
   83d6c:	b154      	cbz	r4, 83d84 <udd_ctrl_in_sent+0x88>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83d6e:	441a      	add	r2, r3
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   83d70:	4b43      	ldr	r3, [pc, #268]	; (83e80 <udd_ctrl_in_sent+0x184>)
		*ptr_dest++ = *ptr_src++;
   83d72:	4618      	mov	r0, r3
   83d74:	3301      	adds	r3, #1
   83d76:	f812 cb01 	ldrb.w	ip, [r2], #1
	for (i = 0; i < nb_remain; i++) {
   83d7a:	b2d9      	uxtb	r1, r3
   83d7c:	42a1      	cmp	r1, r4
		*ptr_dest++ = *ptr_src++;
   83d7e:	f880 c000 	strb.w	ip, [r0]
	for (i = 0; i < nb_remain; i++) {
   83d82:	d3f6      	bcc.n	83d72 <udd_ctrl_in_sent+0x76>
	udd_ctrl_payload_buf_cnt += nb_remain;
   83d84:	883b      	ldrh	r3, [r7, #0]
	udd_ack_in_send(0);
   83d86:	4a39      	ldr	r2, [pc, #228]	; (83e6c <udd_ctrl_in_sent+0x170>)
	udd_ctrl_payload_buf_cnt += nb_remain;
   83d88:	441c      	add	r4, r3
	udd_ack_in_send(0);
   83d8a:	2301      	movs	r3, #1
	udd_ctrl_payload_buf_cnt += nb_remain;
   83d8c:	803c      	strh	r4, [r7, #0]
	udd_ack_in_send(0);
   83d8e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	udd_enable_in_send_interrupt(0);
   83d92:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   83d96:	b91e      	cbnz	r6, 83da0 <udd_ctrl_in_sent+0xa4>
		cpu_irq_enable();
   83d98:	702b      	strb	r3, [r5, #0]
   83d9a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83d9e:	b662      	cpsie	i
}
   83da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83da4:	4937      	ldr	r1, [pc, #220]	; (83e84 <udd_ctrl_in_sent+0x188>)
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   83da6:	88f0      	ldrh	r0, [r6, #6]
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83da8:	880b      	ldrh	r3, [r1, #0]
   83daa:	4413      	add	r3, r2
   83dac:	b29b      	uxth	r3, r3
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   83dae:	4298      	cmp	r0, r3
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83db0:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   83db2:	d03c      	beq.n	83e2e <udd_ctrl_in_sent+0x132>
					|| b_shortpacket) {
   83db4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 83e7c <udd_ctrl_in_sent+0x180>
   83db8:	f899 a000 	ldrb.w	sl, [r9]
   83dbc:	f1ba 0f00 	cmp.w	sl, #0
   83dc0:	d135      	bne.n	83e2e <udd_ctrl_in_sent+0x132>
		if ((!udd_g_ctrlreq.over_under_run)
   83dc2:	6973      	ldr	r3, [r6, #20]
   83dc4:	b383      	cbz	r3, 83e28 <udd_ctrl_in_sent+0x12c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   83dc6:	4798      	blx	r3
   83dc8:	2800      	cmp	r0, #0
   83dca:	d148      	bne.n	83e5e <udd_ctrl_in_sent+0x162>
		b_shortpacket = true;
   83dcc:	2201      	movs	r2, #1
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83dce:	883b      	ldrh	r3, [r7, #0]
   83dd0:	e7bd      	b.n	83d4e <udd_ctrl_in_sent+0x52>
	if (cpu_irq_is_enabled_flags(flags))
   83dd2:	b926      	cbnz	r6, 83dde <udd_ctrl_in_sent+0xe2>
		cpu_irq_enable();
   83dd4:	2301      	movs	r3, #1
   83dd6:	702b      	strb	r3, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   83dd8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83ddc:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83dde:	2304      	movs	r3, #4
   83de0:	f888 3000 	strb.w	r3, [r8]
}
   83de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (udd_g_ctrlreq.callback) {
   83de8:	4e23      	ldr	r6, [pc, #140]	; (83e78 <udd_ctrl_in_sent+0x17c>)
   83dea:	6933      	ldr	r3, [r6, #16]
   83dec:	b103      	cbz	r3, 83df0 <udd_ctrl_in_sent+0xf4>
		udd_g_ctrlreq.callback();
   83dee:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83df0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83df4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83df6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83dfa:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   83dfc:	2301      	movs	r3, #1
   83dfe:	491b      	ldr	r1, [pc, #108]	; (83e6c <udd_ctrl_in_sent+0x170>)
   83e00:	7028      	strb	r0, [r5, #0]
   83e02:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   83e06:	b91a      	cbnz	r2, 83e10 <udd_ctrl_in_sent+0x114>
		cpu_irq_enable();
   83e08:	702b      	strb	r3, [r5, #0]
   83e0a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83e0e:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   83e10:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   83e12:	2102      	movs	r1, #2
   83e14:	4a15      	ldr	r2, [pc, #84]	; (83e6c <udd_ctrl_in_sent+0x170>)
   83e16:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
	udd_g_ctrlreq.over_under_run = NULL;
   83e1a:	e9c6 3304 	strd	r3, r3, [r6, #16]
	udd_g_ctrlreq.payload_size = 0;
   83e1e:	81b3      	strh	r3, [r6, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   83e20:	f888 3000 	strb.w	r3, [r8]
}
   83e24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83e28:	4613      	mov	r3, r2
		b_shortpacket = true;
   83e2a:	2201      	movs	r2, #1
   83e2c:	e78f      	b.n	83d4e <udd_ctrl_in_sent+0x52>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83e2e:	2304      	movs	r3, #4
   83e30:	f888 3000 	strb.w	r3, [r8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83e34:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83e38:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83e3a:	f3bf 8f5f 	dmb	sy
	udd_ack_nak_in(0);
   83e3e:	2210      	movs	r2, #16
	cpu_irq_disable();
   83e40:	2000      	movs	r0, #0
   83e42:	4b0a      	ldr	r3, [pc, #40]	; (83e6c <udd_ctrl_in_sent+0x170>)
   83e44:	7028      	strb	r0, [r5, #0]
   83e46:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	udd_enable_nak_in_interrupt(0);
   83e4a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   83e4e:	2900      	cmp	r1, #0
   83e50:	d1a6      	bne.n	83da0 <udd_ctrl_in_sent+0xa4>
		cpu_irq_enable();
   83e52:	2301      	movs	r3, #1
   83e54:	702b      	strb	r3, [r5, #0]
   83e56:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83e5a:	b662      	cpsie	i
}
   83e5c:	e7a0      	b.n	83da0 <udd_ctrl_in_sent+0xa4>
			udd_ctrl_payload_buf_cnt = 0;
   83e5e:	803c      	strh	r4, [r7, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   83e60:	4653      	mov	r3, sl
   83e62:	89b4      	ldrh	r4, [r6, #12]
   83e64:	e76e      	b.n	83d44 <udd_ctrl_in_sent+0x48>
   83e66:	bf00      	nop
   83e68:	20070b04 	.word	0x20070b04
   83e6c:	400ac000 	.word	0x400ac000
   83e70:	200721c4 	.word	0x200721c4
   83e74:	200721c0 	.word	0x200721c0
   83e78:	20072288 	.word	0x20072288
   83e7c:	200721bc 	.word	0x200721bc
   83e80:	20180000 	.word	0x20180000
   83e84:	200721c2 	.word	0x200721c2

00083e88 <udd_enable>:
{
   83e88:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83e8a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83e8e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83e90:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83e94:	2200      	movs	r2, #0
   83e96:	4c50      	ldr	r4, [pc, #320]	; (83fd8 <udd_enable+0x150>)
	pmc_enable_periph_clk(ID_UOTGHS);
   83e98:	4b50      	ldr	r3, [pc, #320]	; (83fdc <udd_enable+0x154>)
   83e9a:	2028      	movs	r0, #40	; 0x28
   83e9c:	7022      	strb	r2, [r4, #0]
   83e9e:	4798      	blx	r3
	sysclk_enable_usb();
   83ea0:	4b4f      	ldr	r3, [pc, #316]	; (83fe0 <udd_enable+0x158>)
   83ea2:	4798      	blx	r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   83ea4:	f04f 0c50 	mov.w	ip, #80	; 0x50
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   83ea8:	f44f 7180 	mov.w	r1, #256	; 0x100
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   83eac:	4b4d      	ldr	r3, [pc, #308]	; (83fe4 <udd_enable+0x15c>)
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   83eae:	4a4e      	ldr	r2, [pc, #312]	; (83fe8 <udd_enable+0x160>)
   83eb0:	f883 c328 	strb.w	ip, [r3, #808]	; 0x328
   83eb4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   83eb8:	6059      	str	r1, [r3, #4]
   83eba:	4790      	blx	r2
	otg_disable_id_pin();
   83ebc:	4b4b      	ldr	r3, [pc, #300]	; (83fec <udd_enable+0x164>)
   83ebe:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   83ec2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   83ec6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_force_device_mode();
   83eca:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   83ece:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   83ed2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   83ed6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   83eda:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   83ede:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable_pad();
   83ee2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   83ee6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   83eea:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable();
   83eee:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   83ef2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   83ef6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_low_speed_disable();
   83efa:	681a      	ldr	r2, [r3, #0]
   83efc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   83f00:	601a      	str	r2, [r3, #0]
	udd_high_speed_enable();
   83f02:	681a      	ldr	r2, [r3, #0]
   83f04:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
   83f08:	601a      	str	r2, [r3, #0]
	otg_unfreeze_clock();
   83f0a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   83f0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   83f12:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   83f16:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   83f1a:	0450      	lsls	r0, r2, #17
   83f1c:	d5fb      	bpl.n	83f16 <udd_enable+0x8e>
   83f1e:	2300      	movs	r3, #0
   83f20:	4833      	ldr	r0, [pc, #204]	; (83ff0 <udd_enable+0x168>)
		udd_ep_job[i].stall_requested = false;
   83f22:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   83f26:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
		udd_ep_job[i].busy = false;
   83f2a:	7d11      	ldrb	r1, [r2, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83f2c:	3301      	adds	r3, #1
		udd_ep_job[i].busy = false;
   83f2e:	f021 0105 	bic.w	r1, r1, #5
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83f32:	2b08      	cmp	r3, #8
		udd_ep_job[i].busy = false;
   83f34:	7511      	strb	r1, [r2, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   83f36:	d1f4      	bne.n	83f22 <udd_enable+0x9a>
	otg_ack_vbus_transition();
   83f38:	2202      	movs	r2, #2
   83f3a:	4b2c      	ldr	r3, [pc, #176]	; (83fec <udd_enable+0x164>)
   83f3c:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
	if (Is_otg_vbus_high()) {
   83f40:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   83f44:	0509      	lsls	r1, r1, #20
		otg_raise_vbus_transition();
   83f46:	bf48      	it	mi
   83f48:	f8c3 280c 	strmi.w	r2, [r3, #2060]	; 0x80c
	otg_enable_vbus_interrupt();
   83f4c:	4b27      	ldr	r3, [pc, #156]	; (83fec <udd_enable+0x164>)
	if (!udd_b_sleep_initialized) {
   83f4e:	4929      	ldr	r1, [pc, #164]	; (83ff4 <udd_enable+0x16c>)
	otg_enable_vbus_interrupt();
   83f50:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   83f54:	f042 0202 	orr.w	r2, r2, #2
   83f58:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_freeze_clock();
   83f5c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   83f60:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   83f64:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (!udd_b_sleep_initialized) {
   83f68:	780b      	ldrb	r3, [r1, #0]
   83f6a:	b9ab      	cbnz	r3, 83f98 <udd_enable+0x110>
		udd_b_sleep_initialized = true;
   83f6c:	2001      	movs	r0, #1
		udd_b_idle = false;
   83f6e:	4a22      	ldr	r2, [pc, #136]	; (83ff8 <udd_enable+0x170>)
		udd_b_sleep_initialized = true;
   83f70:	7008      	strb	r0, [r1, #0]
		udd_b_idle = false;
   83f72:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83f74:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83f78:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83f7a:	f3bf 8f5f 	dmb	sy
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   83f7e:	4a1f      	ldr	r2, [pc, #124]	; (83ffc <udd_enable+0x174>)
   83f80:	7023      	strb	r3, [r4, #0]
   83f82:	78d3      	ldrb	r3, [r2, #3]
   83f84:	4403      	add	r3, r0
   83f86:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   83f88:	b161      	cbz	r1, 83fa4 <udd_enable+0x11c>
   83f8a:	b925      	cbnz	r5, 83f96 <udd_enable+0x10e>
		cpu_irq_enable();
   83f8c:	2301      	movs	r3, #1
   83f8e:	7023      	strb	r3, [r4, #0]
   83f90:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83f94:	b662      	cpsie	i
}
   83f96:	bd38      	pop	{r3, r4, r5, pc}
	if (!b_idle && udd_b_idle) {
   83f98:	4b17      	ldr	r3, [pc, #92]	; (83ff8 <udd_enable+0x170>)
   83f9a:	781a      	ldrb	r2, [r3, #0]
   83f9c:	b93a      	cbnz	r2, 83fae <udd_enable+0x126>
	udd_b_idle = b_idle;
   83f9e:	2200      	movs	r2, #0
   83fa0:	701a      	strb	r2, [r3, #0]
}
   83fa2:	e7f2      	b.n	83f8a <udd_enable+0x102>
   83fa4:	7020      	strb	r0, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   83fa6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83faa:	b662      	cpsie	i
}
   83fac:	e7ed      	b.n	83f8a <udd_enable+0x102>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83fae:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83fb2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83fb4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83fb8:	f04f 0c00 	mov.w	ip, #0
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   83fbc:	490f      	ldr	r1, [pc, #60]	; (83ffc <udd_enable+0x174>)
   83fbe:	788a      	ldrb	r2, [r1, #2]
   83fc0:	3a01      	subs	r2, #1
   83fc2:	708a      	strb	r2, [r1, #2]
   83fc4:	f884 c000 	strb.w	ip, [r4]
	if (cpu_irq_is_enabled_flags(flags))
   83fc8:	2800      	cmp	r0, #0
   83fca:	d1e8      	bne.n	83f9e <udd_enable+0x116>
		cpu_irq_enable();
   83fcc:	2201      	movs	r2, #1
   83fce:	7022      	strb	r2, [r4, #0]
   83fd0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83fd4:	b662      	cpsie	i
}
   83fd6:	e7e2      	b.n	83f9e <udd_enable+0x116>
   83fd8:	20070b04 	.word	0x20070b04
   83fdc:	000833e1 	.word	0x000833e1
   83fe0:	00083229 	.word	0x00083229
   83fe4:	e000e100 	.word	0xe000e100
   83fe8:	00083411 	.word	0x00083411
   83fec:	400ac000 	.word	0x400ac000
   83ff0:	200721c8 	.word	0x200721c8
   83ff4:	200721be 	.word	0x200721be
   83ff8:	200721bd 	.word	0x200721bd
   83ffc:	20073304 	.word	0x20073304

00084000 <udd_attach>:
{
   84000:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84002:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84006:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84008:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8400c:	2100      	movs	r1, #0
	if (b_idle && !udd_b_idle) {
   8400e:	4a22      	ldr	r2, [pc, #136]	; (84098 <udd_attach+0x98>)
   84010:	4d22      	ldr	r5, [pc, #136]	; (8409c <udd_attach+0x9c>)
   84012:	7813      	ldrb	r3, [r2, #0]
   84014:	7029      	strb	r1, [r5, #0]
   84016:	b363      	cbz	r3, 84072 <udd_attach+0x72>
	udd_b_idle = b_idle;
   84018:	2101      	movs	r1, #1
	otg_unfreeze_clock();
   8401a:	4b21      	ldr	r3, [pc, #132]	; (840a0 <udd_attach+0xa0>)
	udd_b_idle = b_idle;
   8401c:	7011      	strb	r1, [r2, #0]
	otg_unfreeze_clock();
   8401e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84022:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   84026:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   8402a:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   8402e:	0452      	lsls	r2, r2, #17
   84030:	d5fb      	bpl.n	8402a <udd_attach+0x2a>
	udd_attach_device();
   84032:	681a      	ldr	r2, [r3, #0]
	udd_enable_reset_interrupt();
   84034:	2708      	movs	r7, #8
	udd_attach_device();
   84036:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   8403a:	601a      	str	r2, [r3, #0]
	udd_enable_suspend_interrupt();
   8403c:	2101      	movs	r1, #1
	udd_enable_wake_up_interrupt();
   8403e:	2210      	movs	r2, #16
	udd_enable_sof_interrupt();
   84040:	2404      	movs	r4, #4
	udd_enable_msof_interrupt();
   84042:	2002      	movs	r0, #2
	udd_enable_reset_interrupt();
   84044:	619f      	str	r7, [r3, #24]
	udd_enable_suspend_interrupt();
   84046:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   84048:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   8404a:	619c      	str	r4, [r3, #24]
	udd_enable_msof_interrupt();
   8404c:	6198      	str	r0, [r3, #24]
	udd_ack_reset();
   8404e:	609f      	str	r7, [r3, #8]
	udd_ack_sof();
   84050:	609c      	str	r4, [r3, #8]
	udd_ack_msof();
   84052:	6098      	str	r0, [r3, #8]
	udd_raise_suspend();
   84054:	60d9      	str	r1, [r3, #12]
	udd_ack_wake_up();
   84056:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   84058:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8405c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   84060:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (cpu_irq_is_enabled_flags(flags))
   84064:	b91e      	cbnz	r6, 8406e <udd_attach+0x6e>
		cpu_irq_enable();
   84066:	7029      	strb	r1, [r5, #0]
   84068:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8406c:	b662      	cpsie	i
}
   8406e:	bcf0      	pop	{r4, r5, r6, r7}
   84070:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84072:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84076:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84078:	f3bf 8f5f 	dmb	sy
	++sleepmgr_locks[mode];
   8407c:	4909      	ldr	r1, [pc, #36]	; (840a4 <udd_attach+0xa4>)
	cpu_irq_disable();
   8407e:	702b      	strb	r3, [r5, #0]
   84080:	788b      	ldrb	r3, [r1, #2]
   84082:	3301      	adds	r3, #1
   84084:	708b      	strb	r3, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   84086:	2800      	cmp	r0, #0
   84088:	d1c6      	bne.n	84018 <udd_attach+0x18>
		cpu_irq_enable();
   8408a:	2301      	movs	r3, #1
   8408c:	702b      	strb	r3, [r5, #0]
   8408e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84092:	b662      	cpsie	i
}
   84094:	e7c0      	b.n	84018 <udd_attach+0x18>
   84096:	bf00      	nop
   84098:	200721bd 	.word	0x200721bd
   8409c:	20070b04 	.word	0x20070b04
   840a0:	400ac000 	.word	0x400ac000
   840a4:	20073304 	.word	0x20073304

000840a8 <udd_detach>:
	otg_unfreeze_clock();
   840a8:	4b17      	ldr	r3, [pc, #92]	; (84108 <udd_detach+0x60>)
	if (!b_idle && udd_b_idle) {
   840aa:	4918      	ldr	r1, [pc, #96]	; (8410c <udd_detach+0x64>)
	otg_unfreeze_clock();
   840ac:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   840b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   840b4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_detach_device();
   840b8:	681a      	ldr	r2, [r3, #0]
   840ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   840be:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   840c0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   840c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   840c8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (!b_idle && udd_b_idle) {
   840cc:	780b      	ldrb	r3, [r1, #0]
   840ce:	b913      	cbnz	r3, 840d6 <udd_detach+0x2e>
	udd_b_idle = b_idle;
   840d0:	2300      	movs	r3, #0
   840d2:	700b      	strb	r3, [r1, #0]
   840d4:	4770      	bx	lr
{
   840d6:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   840d8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   840dc:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   840de:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   840e2:	f04f 0c00 	mov.w	ip, #0
	--sleepmgr_locks[mode];
   840e6:	4a0a      	ldr	r2, [pc, #40]	; (84110 <udd_detach+0x68>)
   840e8:	480a      	ldr	r0, [pc, #40]	; (84114 <udd_detach+0x6c>)
   840ea:	7893      	ldrb	r3, [r2, #2]
   840ec:	3b01      	subs	r3, #1
   840ee:	7093      	strb	r3, [r2, #2]
   840f0:	f880 c000 	strb.w	ip, [r0]
	if (cpu_irq_is_enabled_flags(flags))
   840f4:	b924      	cbnz	r4, 84100 <udd_detach+0x58>
		cpu_irq_enable();
   840f6:	2301      	movs	r3, #1
   840f8:	7003      	strb	r3, [r0, #0]
   840fa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   840fe:	b662      	cpsie	i
	udd_b_idle = b_idle;
   84100:	2300      	movs	r3, #0
   84102:	700b      	strb	r3, [r1, #0]
}
   84104:	bc10      	pop	{r4}
   84106:	4770      	bx	lr
   84108:	400ac000 	.word	0x400ac000
   8410c:	200721bd 	.word	0x200721bd
   84110:	20073304 	.word	0x20073304
   84114:	20070b04 	.word	0x20070b04

00084118 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   84118:	4b03      	ldr	r3, [pc, #12]	; (84128 <udd_is_high_speed+0x10>)
   8411a:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
}
   8411e:	f410 5040 	ands.w	r0, r0, #12288	; 0x3000
   84122:	bf18      	it	ne
   84124:	2001      	movne	r0, #1
   84126:	4770      	bx	lr
   84128:	400ac000 	.word	0x400ac000

0008412c <udd_set_address>:
	udd_disable_address();
   8412c:	4b08      	ldr	r3, [pc, #32]	; (84150 <udd_set_address+0x24>)
	udd_configure_address(address);
   8412e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	udd_disable_address();
   84132:	681a      	ldr	r2, [r3, #0]
   84134:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   84138:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   8413a:	681a      	ldr	r2, [r3, #0]
   8413c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84140:	4302      	orrs	r2, r0
   84142:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   84144:	681a      	ldr	r2, [r3, #0]
   84146:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8414a:	601a      	str	r2, [r3, #0]
}
   8414c:	4770      	bx	lr
   8414e:	bf00      	nop
   84150:	400ac000 	.word	0x400ac000

00084154 <udd_getaddress>:
	return udd_get_configured_address();
   84154:	4b02      	ldr	r3, [pc, #8]	; (84160 <udd_getaddress+0xc>)
   84156:	6818      	ldr	r0, [r3, #0]
}
   84158:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   8415c:	4770      	bx	lr
   8415e:	bf00      	nop
   84160:	400ac000 	.word	0x400ac000

00084164 <udd_get_frame_number>:
	return udd_frame_number();
   84164:	4b02      	ldr	r3, [pc, #8]	; (84170 <udd_get_frame_number+0xc>)
   84166:	6a18      	ldr	r0, [r3, #32]
}
   84168:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   8416c:	4770      	bx	lr
   8416e:	bf00      	nop
   84170:	400ac000 	.word	0x400ac000

00084174 <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   84174:	4b02      	ldr	r3, [pc, #8]	; (84180 <udd_get_micro_frame_number+0xc>)
   84176:	6a18      	ldr	r0, [r3, #32]
}
   84178:	f3c0 000d 	ubfx	r0, r0, #0, #14
   8417c:	4770      	bx	lr
   8417e:	bf00      	nop
   84180:	400ac000 	.word	0x400ac000

00084184 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   84184:	4b01      	ldr	r3, [pc, #4]	; (8418c <udd_set_setup_payload+0x8>)
   84186:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   84188:	8199      	strh	r1, [r3, #12]
}
   8418a:	4770      	bx	lr
   8418c:	20072288 	.word	0x20072288

00084190 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84190:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   84194:	2a08      	cmp	r2, #8
   84196:	d900      	bls.n	8419a <udd_ep_free+0xa>
   84198:	4770      	bx	lr
	udd_disable_endpoint(ep_index);
   8419a:	2101      	movs	r1, #1
{
   8419c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_disable_endpoint(ep_index);
   8419e:	4f0e      	ldr	r7, [pc, #56]	; (841d8 <udd_ep_free+0x48>)
   841a0:	fa01 fc02 	lsl.w	ip, r1, r2
   841a4:	69fb      	ldr	r3, [r7, #28]
	udd_unallocate_memory(ep_index);
   841a6:	4d0d      	ldr	r5, [pc, #52]	; (841dc <udd_ep_free+0x4c>)
	udd_disable_endpoint(ep_index);
   841a8:	ea23 030c 	bic.w	r3, r3, ip
   841ac:	61fb      	str	r3, [r7, #28]
	udd_unallocate_memory(ep_index);
   841ae:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   841b2:	1e50      	subs	r0, r2, #1
   841b4:	4c0a      	ldr	r4, [pc, #40]	; (841e0 <udd_ep_free+0x50>)
   841b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   841ba:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
	udd_unallocate_memory(ep_index);
   841be:	f023 0302 	bic.w	r3, r3, #2
   841c2:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   841c6:	4620      	mov	r0, r4
   841c8:	4e06      	ldr	r6, [pc, #24]	; (841e4 <udd_ep_free+0x54>)
   841ca:	47b0      	blx	r6
	udd_ep_job[ep_index - 1].stall_requested = false;
   841cc:	7d23      	ldrb	r3, [r4, #20]
   841ce:	f36f 0382 	bfc	r3, #2, #1
   841d2:	7523      	strb	r3, [r4, #20]
}
   841d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   841d6:	bf00      	nop
   841d8:	400ac000 	.word	0x400ac000
   841dc:	400ac100 	.word	0x400ac100
   841e0:	200721c8 	.word	0x200721c8
   841e4:	00083b19 	.word	0x00083b19

000841e8 <udd_ep_is_halted>:
	return Is_udd_endpoint_stall_requested(ep_index);
   841e8:	4b03      	ldr	r3, [pc, #12]	; (841f8 <udd_ep_is_halted+0x10>)
   841ea:	f000 000f 	and.w	r0, r0, #15
   841ee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   841f2:	f3c0 40c0 	ubfx	r0, r0, #19, #1
   841f6:	4770      	bx	lr
   841f8:	400ac1c0 	.word	0x400ac1c0

000841fc <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   841fc:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   84200:	2b08      	cmp	r3, #8
   84202:	d834      	bhi.n	8426e <udd_ep_set_halt+0x72>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   84204:	4a2f      	ldr	r2, [pc, #188]	; (842c4 <udd_ep_set_halt+0xc8>)
   84206:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8420a:	0311      	lsls	r1, r2, #12
   8420c:	d431      	bmi.n	84272 <udd_ep_set_halt+0x76>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   8420e:	492e      	ldr	r1, [pc, #184]	; (842c8 <udd_ep_set_halt+0xcc>)
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   84210:	1e5a      	subs	r2, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   84212:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   84216:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
   8421a:	f89c 1014 	ldrb.w	r1, [ip, #20]
   8421e:	f011 0204 	ands.w	r2, r1, #4
   84222:	d126      	bne.n	84272 <udd_ep_set_halt+0x76>
	if (ptr_job->busy == true) {
   84224:	f011 0101 	ands.w	r1, r1, #1
   84228:	d121      	bne.n	8426e <udd_ep_set_halt+0x72>
{
   8422a:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8422c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84230:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84232:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84236:	4c25      	ldr	r4, [pc, #148]	; (842cc <udd_ep_set_halt+0xd0>)
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   84238:	0602      	lsls	r2, r0, #24
   8423a:	7021      	strb	r1, [r4, #0]
   8423c:	d41b      	bmi.n	84276 <udd_ep_set_halt+0x7a>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   8423e:	4924      	ldr	r1, [pc, #144]	; (842d0 <udd_ep_set_halt+0xd4>)
	udd_ack_stall(ep_index);
   84240:	2040      	movs	r0, #64	; 0x40
	udd_disable_endpoint_bank_autoswitch(ep_index);
   84242:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   84246:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   8424a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   8424e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
	udd_ack_stall(ep_index);
   84252:	4a20      	ldr	r2, [pc, #128]	; (842d4 <udd_ep_set_halt+0xd8>)
   84254:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   84258:	3290      	adds	r2, #144	; 0x90
   8425a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (cpu_irq_is_enabled_flags(flags))
   8425e:	bb6d      	cbnz	r5, 842bc <udd_ep_set_halt+0xc0>
		cpu_irq_enable();
   84260:	2001      	movs	r0, #1
   84262:	7020      	strb	r0, [r4, #0]
   84264:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84268:	b662      	cpsie	i
}
   8426a:	bcf0      	pop	{r4, r5, r6, r7}
   8426c:	4770      	bx	lr
		return false;
   8426e:	2000      	movs	r0, #0
   84270:	4770      	bx	lr
		return true; // Already STALL
   84272:	2001      	movs	r0, #1
}
   84274:	4770      	bx	lr
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   84276:	4a18      	ldr	r2, [pc, #96]	; (842d8 <udd_ep_set_halt+0xdc>)
   84278:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8427c:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   84280:	d0dd      	beq.n	8423e <udd_ep_set_halt+0x42>
		udd_disable_in_send_interrupt(ep_index);
   84282:	2001      	movs	r0, #1
		ptr_job->stall_requested = true;
   84284:	f89c 2014 	ldrb.w	r2, [ip, #20]
		udd_disable_in_send_interrupt(ep_index);
   84288:	4914      	ldr	r1, [pc, #80]	; (842dc <udd_ep_set_halt+0xe0>)
		ptr_job->stall_requested = true;
   8428a:	f042 0204 	orr.w	r2, r2, #4
   8428e:	f88c 2014 	strb.w	r2, [ip, #20]
		udd_enable_bank_interrupt(ep_index);
   84292:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		udd_enable_endpoint_bank_autoswitch(ep_index);
   84296:	4e0e      	ldr	r6, [pc, #56]	; (842d0 <udd_ep_set_halt+0xd4>)
		udd_disable_in_send_interrupt(ep_index);
   84298:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   8429c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
		udd_enable_bank_interrupt(ep_index);
   842a0:	f8df c03c 	ldr.w	ip, [pc, #60]	; 842e0 <udd_ep_set_halt+0xe4>
		udd_enable_endpoint_interrupt(ep_index);
   842a4:	4f0f      	ldr	r7, [pc, #60]	; (842e4 <udd_ep_set_halt+0xe8>)
		udd_enable_endpoint_bank_autoswitch(ep_index);
   842a6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   842aa:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
		udd_enable_bank_interrupt(ep_index);
   842ae:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   842b2:	fa02 f303 	lsl.w	r3, r2, r3
   842b6:	61bb      	str	r3, [r7, #24]
	if (cpu_irq_is_enabled_flags(flags))
   842b8:	2d00      	cmp	r5, #0
   842ba:	d0d2      	beq.n	84262 <udd_ep_set_halt+0x66>
}
   842bc:	bcf0      	pop	{r4, r5, r6, r7}
		return true; // Already STALL
   842be:	2001      	movs	r0, #1
}
   842c0:	4770      	bx	lr
   842c2:	bf00      	nop
   842c4:	400ac1c0 	.word	0x400ac1c0
   842c8:	200721c8 	.word	0x200721c8
   842cc:	20070b04 	.word	0x20070b04
   842d0:	400ac100 	.word	0x400ac100
   842d4:	400ac160 	.word	0x400ac160
   842d8:	400ac130 	.word	0x400ac130
   842dc:	400ac220 	.word	0x400ac220
   842e0:	400ac1f0 	.word	0x400ac1f0
   842e4:	400ac000 	.word	0x400ac000

000842e8 <udd_ep_clear_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   842e8:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index)
   842ec:	2808      	cmp	r0, #8
   842ee:	d84b      	bhi.n	84388 <udd_ep_clear_halt+0xa0>
{
   842f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   842f2:	1e41      	subs	r1, r0, #1
	if (ptr_job->stall_requested) {
   842f4:	4c25      	ldr	r4, [pc, #148]	; (8438c <udd_ep_clear_halt+0xa4>)
   842f6:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   842fa:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   842fe:	7d15      	ldrb	r5, [r2, #20]
   84300:	004b      	lsls	r3, r1, #1
   84302:	076d      	lsls	r5, r5, #29
   84304:	d524      	bpl.n	84350 <udd_ep_clear_halt+0x68>
		udd_disable_bank_interrupt(ep_index);
   84306:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		ptr_job->stall_requested = false;
   8430a:	7d16      	ldrb	r6, [r2, #20]
		udd_disable_bank_interrupt(ep_index);
   8430c:	4f20      	ldr	r7, [pc, #128]	; (84390 <udd_ep_clear_halt+0xa8>)
		ptr_job->stall_requested = false;
   8430e:	f36f 0682 	bfc	r6, #2, #1
		udd_disable_endpoint_interrupt(ep_index);
   84312:	f8df e080 	ldr.w	lr, [pc, #128]	; 84394 <udd_ep_clear_halt+0xac>
		ptr_job->stall_requested = false;
   84316:	7516      	strb	r6, [r2, #20]
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   84318:	f8df c07c 	ldr.w	ip, [pc, #124]	; 84398 <udd_ep_clear_halt+0xb0>
		udd_disable_bank_interrupt(ep_index);
   8431c:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   84320:	4085      	lsls	r5, r0
   84322:	f8ce 5014 	str.w	r5, [lr, #20]
		udd_disable_bank_interrupt(ep_index);
   84326:	eb07 0680 	add.w	r6, r7, r0, lsl #2
   8432a:	0082      	lsls	r2, r0, #2
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   8432c:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
   84330:	0307      	lsls	r7, r0, #12
   84332:	d415      	bmi.n	84360 <udd_ep_clear_halt+0x78>
		if (ptr_job->busy == true) {
   84334:	440b      	add	r3, r1
   84336:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   8433a:	7d11      	ldrb	r1, [r2, #20]
   8433c:	00db      	lsls	r3, r3, #3
   8433e:	07c8      	lsls	r0, r1, #31
   84340:	d504      	bpl.n	8434c <udd_ep_clear_halt+0x64>
			ptr_job->busy = false;
   84342:	f36f 0100 	bfc	r1, #0, #1
			ptr_job->call_nohalt();
   84346:	58e3      	ldr	r3, [r4, r3]
			ptr_job->busy = false;
   84348:	7511      	strb	r1, [r2, #20]
			ptr_job->call_nohalt();
   8434a:	4798      	blx	r3
	return true;
   8434c:	2001      	movs	r0, #1
}
   8434e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   84350:	4d11      	ldr	r5, [pc, #68]	; (84398 <udd_ep_clear_halt+0xb0>)
   84352:	0082      	lsls	r2, r0, #2
   84354:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   84358:	0300      	lsls	r0, r0, #12
   8435a:	d5f7      	bpl.n	8434c <udd_ep_clear_halt+0x64>
		udd_disable_bank_interrupt(ep_index);
   8435c:	4e0c      	ldr	r6, [pc, #48]	; (84390 <udd_ep_clear_halt+0xa8>)
   8435e:	4416      	add	r6, r2
		if (Is_udd_stall(ep_index)) {
   84360:	480e      	ldr	r0, [pc, #56]	; (8439c <udd_ep_clear_halt+0xb4>)
   84362:	5810      	ldr	r0, [r2, r0]
   84364:	0645      	lsls	r5, r0, #25
   84366:	d506      	bpl.n	84376 <udd_ep_clear_halt+0x8e>
			udd_ack_stall(ep_index);
   84368:	2740      	movs	r7, #64	; 0x40
			udd_reset_data_toggle(ep_index);
   8436a:	f44f 2580 	mov.w	r5, #262144	; 0x40000
			udd_ack_stall(ep_index);
   8436e:	480c      	ldr	r0, [pc, #48]	; (843a0 <udd_ep_clear_halt+0xb8>)
   84370:	5017      	str	r7, [r2, r0]
			udd_reset_data_toggle(ep_index);
   84372:	3090      	adds	r0, #144	; 0x90
   84374:	5015      	str	r5, [r2, r0]
		udd_disable_stall_handshake(ep_index);
   84376:	f44f 2000 	mov.w	r0, #524288	; 0x80000
		udd_enable_endpoint_bank_autoswitch(ep_index);
   8437a:	4d0a      	ldr	r5, [pc, #40]	; (843a4 <udd_ep_clear_halt+0xbc>)
		udd_disable_stall_handshake(ep_index);
   8437c:	6030      	str	r0, [r6, #0]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   8437e:	5950      	ldr	r0, [r2, r5]
   84380:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   84384:	5150      	str	r0, [r2, r5]
	if (b_stall_cleared) {
   84386:	e7d5      	b.n	84334 <udd_ep_clear_halt+0x4c>
		return false;
   84388:	2000      	movs	r0, #0
}
   8438a:	4770      	bx	lr
   8438c:	200721c8 	.word	0x200721c8
   84390:	400ac220 	.word	0x400ac220
   84394:	400ac000 	.word	0x400ac000
   84398:	400ac1c0 	.word	0x400ac1c0
   8439c:	400ac130 	.word	0x400ac130
   843a0:	400ac160 	.word	0x400ac160
   843a4:	400ac100 	.word	0x400ac100

000843a8 <udd_ep_run>:
{
   843a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   843ac:	f000 000f 	and.w	r0, r0, #15
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
   843b0:	4d43      	ldr	r5, [pc, #268]	; (844c0 <udd_ep_run+0x118>)
	if (USB_DEVICE_MAX_EP < ep) {
   843b2:	2808      	cmp	r0, #8
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
   843b4:	f855 8020 	ldr.w	r8, [r5, r0, lsl #2]
	if (USB_DEVICE_MAX_EP < ep) {
   843b8:	d874      	bhi.n	844a4 <udd_ep_run+0xfc>
	if ((!Is_udd_endpoint_enabled(ep))
   843ba:	2601      	movs	r6, #1
   843bc:	4c41      	ldr	r4, [pc, #260]	; (844c4 <udd_ep_run+0x11c>)
   843be:	fa06 f700 	lsl.w	r7, r6, r0
   843c2:	69e4      	ldr	r4, [r4, #28]
   843c4:	4227      	tst	r7, r4
   843c6:	d06d      	beq.n	844a4 <udd_ep_run+0xfc>
			|| Is_udd_endpoint_stall_requested(ep)
   843c8:	4c3f      	ldr	r4, [pc, #252]	; (844c8 <udd_ep_run+0x120>)
   843ca:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   843ce:	0324      	lsls	r4, r4, #12
   843d0:	d468      	bmi.n	844a4 <udd_ep_run+0xfc>
	ptr_job = &udd_ep_job[ep - 1];
   843d2:	f100 3cff 	add.w	ip, r0, #4294967295
			|| ptr_job->stall_requested) {
   843d6:	4f3d      	ldr	r7, [pc, #244]	; (844cc <udd_ep_run+0x124>)
   843d8:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
   843dc:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
   843e0:	f89e 4014 	ldrb.w	r4, [lr, #20]
   843e4:	fa0c fa06 	lsl.w	sl, ip, r6
   843e8:	f014 0b04 	ands.w	fp, r4, #4
   843ec:	d15a      	bne.n	844a4 <udd_ep_run+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   843ee:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   843f2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   843f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   843f8:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 844d0 <udd_ep_run+0x128>
   843fc:	f889 b000 	strb.w	fp, [r9]
	if (ptr_job->busy == true) {
   84400:	f89e b014 	ldrb.w	fp, [lr, #20]
   84404:	f01b 0f01 	tst.w	fp, #1
   84408:	d14b      	bne.n	844a2 <udd_ep_run+0xfa>
	ptr_job->busy = true;
   8440a:	f89e b014 	ldrb.w	fp, [lr, #20]
   8440e:	f04b 0b01 	orr.w	fp, fp, #1
   84412:	f88e b014 	strb.w	fp, [lr, #20]
	if (cpu_irq_is_enabled_flags(flags))
   84416:	b924      	cbnz	r4, 84422 <udd_ep_run+0x7a>
		cpu_irq_enable();
   84418:	f889 6000 	strb.w	r6, [r9]
   8441c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84420:	b662      	cpsie	i
	ptr_job->buf_cnt = 0;
   84422:	2600      	movs	r6, #0
	ptr_job->call_trans = callback;
   84424:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
	ptr_job->buf = buf;
   84428:	eb0a 040c 	add.w	r4, sl, ip
	ptr_job->call_trans = callback;
   8442c:	f847 e034 	str.w	lr, [r7, r4, lsl #3]
	ptr_job->buf = buf;
   84430:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
	ptr_job->buf_size = buf_size;
   84434:	e9c4 2301 	strd	r2, r3, [r4, #4]
	ptr_job->buf_load = 0;
   84438:	e9c4 6603 	strd	r6, r6, [r4, #12]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8443c:	b911      	cbnz	r1, 84444 <udd_ep_run+0x9c>
   8443e:	fab3 f183 	clz	r1, r3
   84442:	0949      	lsrs	r1, r1, #5
   84444:	44e2      	add	sl, ip
   84446:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
   8444a:	7d3b      	ldrb	r3, [r7, #20]
	if (!Is_udd_endpoint_dma_supported(ep)) {
   8444c:	fa5f fc8c 	uxtb.w	ip, ip
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   84450:	f361 0341 	bfi	r3, r1, #1, #1
	if (!Is_udd_endpoint_dma_supported(ep)) {
   84454:	f1bc 0f05 	cmp.w	ip, #5
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   84458:	753b      	strb	r3, [r7, #20]
	if (!Is_udd_endpoint_dma_supported(ep)) {
   8445a:	d926      	bls.n	844aa <udd_ep_run+0x102>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8445c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84460:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84462:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84466:	2100      	movs	r1, #0
		udd_enable_endpoint_interrupt(ep);
   84468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   8446c:	f889 1000 	strb.w	r1, [r9]
   84470:	4914      	ldr	r1, [pc, #80]	; (844c4 <udd_ep_run+0x11c>)
   84472:	4083      	lsls	r3, r0
		if (b_dir_in) {
   84474:	f418 7f80 	tst.w	r8, #256	; 0x100
		udd_enable_endpoint_interrupt(ep);
   84478:	618b      	str	r3, [r1, #24]
			udd_enable_in_send_interrupt(ep);
   8447a:	bf14      	ite	ne
   8447c:	2101      	movne	r1, #1
			udd_enable_out_received_interrupt(ep);
   8447e:	2102      	moveq	r1, #2
			udd_disable_endpoint_bank_autoswitch(ep);
   84480:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
   84484:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   84488:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
			udd_enable_out_received_interrupt(ep);
   8448c:	4b11      	ldr	r3, [pc, #68]	; (844d4 <udd_ep_run+0x12c>)
   8448e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
		cpu_irq_enable();
   84492:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
   84494:	b93a      	cbnz	r2, 844a6 <udd_ep_run+0xfe>
		cpu_irq_enable();
   84496:	f889 0000 	strb.w	r0, [r9]
   8449a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8449e:	b662      	cpsie	i
}
   844a0:	e001      	b.n	844a6 <udd_ep_run+0xfe>
	if (cpu_irq_is_enabled_flags(flags))
   844a2:	b134      	cbz	r4, 844b2 <udd_ep_run+0x10a>
		return false;
   844a4:	2000      	movs	r0, #0
}
   844a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	udd_ep_trans_done(ep);
   844aa:	4b0b      	ldr	r3, [pc, #44]	; (844d8 <udd_ep_run+0x130>)
   844ac:	4798      	blx	r3
	return true;
   844ae:	2001      	movs	r0, #1
   844b0:	e7f9      	b.n	844a6 <udd_ep_run+0xfe>
		cpu_irq_enable();
   844b2:	f889 6000 	strb.w	r6, [r9]
  __ASM volatile ("dmb 0xF":::"memory");
   844b6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   844ba:	b662      	cpsie	i
		return false; // Job already on going
   844bc:	4620      	mov	r0, r4
}
   844be:	e7f2      	b.n	844a6 <udd_ep_run+0xfe>
   844c0:	400ac100 	.word	0x400ac100
   844c4:	400ac000 	.word	0x400ac000
   844c8:	400ac1c0 	.word	0x400ac1c0
   844cc:	200721c8 	.word	0x200721c8
   844d0:	20070b04 	.word	0x20070b04
   844d4:	400ac1f0 	.word	0x400ac1f0
   844d8:	00083b55 	.word	0x00083b55

000844dc <udd_ep_alloc>:
	ep = ep & USB_EP_ADDR_MASK;
   844dc:	f000 030f 	and.w	r3, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   844e0:	2b08      	cmp	r3, #8
   844e2:	f200 80da 	bhi.w	8469a <udd_ep_alloc+0x1be>
{
   844e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (Is_udd_endpoint_enabled(ep)) {
   844ea:	4c74      	ldr	r4, [pc, #464]	; (846bc <udd_ep_alloc+0x1e0>)
{
   844ec:	b085      	sub	sp, #20
	if (Is_udd_endpoint_enabled(ep)) {
   844ee:	69e5      	ldr	r5, [r4, #28]
   844f0:	2401      	movs	r4, #1
   844f2:	409c      	lsls	r4, r3
   844f4:	4025      	ands	r5, r4
   844f6:	f040 80cc 	bne.w	84692 <udd_ep_alloc+0x1b6>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   844fa:	f001 0403 	and.w	r4, r1, #3
   844fe:	3c01      	subs	r4, #1
   84500:	b2e4      	uxtb	r4, r4
   84502:	2c02      	cmp	r4, #2
   84504:	f200 80c5 	bhi.w	84692 <udd_ep_alloc+0x1b6>
   84508:	4e6d      	ldr	r6, [pc, #436]	; (846c0 <udd_ep_alloc+0x1e4>)
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8450a:	4f6e      	ldr	r7, [pc, #440]	; (846c4 <udd_ep_alloc+0x1e8>)
   8450c:	5d34      	ldrb	r4, [r6, r4]
	if (ep > 2) nb_bank = 1;
   8450e:	2b02      	cmp	r3, #2
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   84510:	ea4f 21c1 	mov.w	r1, r1, lsl #11
	switch (nb_bank) {
   84514:	bf98      	it	ls
   84516:	f104 36ff 	addls.w	r6, r4, #4294967295
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8451a:	f401 5cc0 	and.w	ip, r1, #6144	; 0x1800
   8451e:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   84522:	bf96      	itet	ls
   84524:	b2f6      	uxtbls	r6, r6
   84526:	462e      	movhi	r6, r5
   84528:	00b6      	lslls	r6, r6, #2
   8452a:	f421 51cb 	bic.w	r1, r1, #6496	; 0x1960
   8452e:	f010 0f80 	tst.w	r0, #128	; 0x80
   84532:	bf18      	it	ne
   84534:	f44f 7580 	movne.w	r5, #256	; 0x100
   84538:	f021 011c 	bic.w	r1, r1, #28
   8453c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   84540:	461c      	mov	r4, r3
   84542:	ea41 010c 	orr.w	r1, r1, ip
   84546:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
   8454a:	f0c0 80a8 	bcc.w	8469e <udd_ep_alloc+0x1c2>
   8454e:	2270      	movs	r2, #112	; 0x70
	ep_allocated = 1 << ep;
   84550:	f04f 0801 	mov.w	r8, #1
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   84554:	4331      	orrs	r1, r6
   84556:	430d      	orrs	r5, r1
   84558:	432a      	orrs	r2, r5
   8455a:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8455e:	0701      	lsls	r1, r0, #28
	ep_allocated = 1 << ep;
   84560:	fa08 f703 	lsl.w	r7, r8, r3
   84564:	b2be      	uxth	r6, r7
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   84566:	d41b      	bmi.n	845a0 <udd_ep_alloc+0xc4>
   84568:	2208      	movs	r2, #8
		if (Is_udd_endpoint_enabled(i)) {
   8456a:	469c      	mov	ip, r3
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8456c:	4956      	ldr	r1, [pc, #344]	; (846c8 <udd_ep_alloc+0x1ec>)
		if (Is_udd_endpoint_enabled(i)) {
   8456e:	4f53      	ldr	r7, [pc, #332]	; (846bc <udd_ep_alloc+0x1e0>)
   84570:	69fb      	ldr	r3, [r7, #28]
   84572:	fa08 f002 	lsl.w	r0, r8, r2
   84576:	4203      	tst	r3, r0
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   84578:	f102 32ff 	add.w	r2, r2, #4294967295
   8457c:	b2d5      	uxtb	r5, r2
		if (Is_udd_endpoint_enabled(i)) {
   8457e:	d009      	beq.n	84594 <udd_ep_alloc+0xb8>
			udd_disable_endpoint(i);
   84580:	69fb      	ldr	r3, [r7, #28]
			ep_allocated |= 1 << i;
   84582:	4306      	orrs	r6, r0
			udd_disable_endpoint(i);
   84584:	ea23 0000 	bic.w	r0, r3, r0
   84588:	61f8      	str	r0, [r7, #28]
			udd_unallocate_memory(i);
   8458a:	6808      	ldr	r0, [r1, #0]
			ep_allocated |= 1 << i;
   8458c:	b2b6      	uxth	r6, r6
			udd_unallocate_memory(i);
   8458e:	f020 0002 	bic.w	r0, r0, #2
   84592:	6008      	str	r0, [r1, #0]
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   84594:	4565      	cmp	r5, ip
   84596:	f1a1 0104 	sub.w	r1, r1, #4
   8459a:	d8e9      	bhi.n	84570 <udd_ep_alloc+0x94>
		if (ep_allocated & (1 << i)) {
   8459c:	4663      	mov	r3, ip
   8459e:	4637      	mov	r7, r6
   845a0:	f8df 9128 	ldr.w	r9, [pc, #296]	; 846cc <udd_ep_alloc+0x1f0>
   845a4:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   845a8:	4675      	mov	r5, lr
			udd_enable_endpoint(i);
   845aa:	f8df 8110 	ldr.w	r8, [pc, #272]	; 846bc <udd_ep_alloc+0x1e0>
   845ae:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
   845b2:	b2db      	uxtb	r3, r3
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   845b4:	9703      	str	r7, [sp, #12]
   845b6:	e029      	b.n	8460c <udd_ep_alloc+0x130>
					&& !Is_udd_endpoint_in(i)) {
   845b8:	682a      	ldr	r2, [r5, #0]
   845ba:	05d2      	lsls	r2, r2, #23
   845bc:	d456      	bmi.n	8466c <udd_ep_alloc+0x190>
					ptr_job->buf_cnt -= ptr_job->buf_load;
   845be:	e956 7203 	ldrd	r7, r2, [r6, #-12]
   845c2:	1aba      	subs	r2, r7, r2
   845c4:	f846 2c0c 	str.w	r2, [r6, #-12]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   845c8:	f8d5 c000 	ldr.w	ip, [r5]
   845cc:	f856 7c14 	ldr.w	r7, [r6, #-20]
   845d0:	f41c 7f80 	tst.w	ip, #256	; 0x100
   845d4:	bf18      	it	ne
   845d6:	f043 0080 	orrne.w	r0, r3, #128	; 0x80
						ptr_job->b_shortpacket,
   845da:	4471      	add	r1, lr
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   845dc:	f856 3c10 	ldr.w	r3, [r6, #-16]
						ptr_job->b_shortpacket,
   845e0:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
   845e4:	7d09      	ldrb	r1, [r1, #20]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   845e6:	1a9b      	subs	r3, r3, r2
   845e8:	443a      	add	r2, r7
   845ea:	f856 7c18 	ldr.w	r7, [r6, #-24]
   845ee:	f3c1 0140 	ubfx	r1, r1, #1, #1
   845f2:	9700      	str	r7, [sp, #0]
   845f4:	4f36      	ldr	r7, [pc, #216]	; (846d0 <udd_ep_alloc+0x1f4>)
   845f6:	47b8      	blx	r7
				if (!b_restart) {
   845f8:	2800      	cmp	r0, #0
   845fa:	d04a      	beq.n	84692 <udd_ep_alloc+0x1b6>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   845fc:	3401      	adds	r4, #1
   845fe:	b2e3      	uxtb	r3, r4
   84600:	2b09      	cmp	r3, #9
   84602:	f105 0504 	add.w	r5, r5, #4
   84606:	f106 0618 	add.w	r6, r6, #24
   8460a:	d053      	beq.n	846b4 <udd_ep_alloc+0x1d8>
		if (ep_allocated & (1 << i)) {
   8460c:	9a03      	ldr	r2, [sp, #12]
   8460e:	4618      	mov	r0, r3
   84610:	4122      	asrs	r2, r4
   84612:	07d2      	lsls	r2, r2, #31
   84614:	d5f2      	bpl.n	845fc <udd_ep_alloc+0x120>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   84616:	1e61      	subs	r1, r4, #1
			bool b_restart = ptr_job->busy;
   84618:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
   8461c:	eb09 0ccc 	add.w	ip, r9, ip, lsl #3
   84620:	f89c a014 	ldrb.w	sl, [ip, #20]
			udd_enable_endpoint(i);
   84624:	2201      	movs	r2, #1
			ptr_job->busy = false;
   84626:	46d3      	mov	fp, sl
   84628:	f36f 0b00 	bfc	fp, #0, #1
   8462c:	f88c b014 	strb.w	fp, [ip, #20]
			udd_allocate_memory(i);
   84630:	f8d5 b000 	ldr.w	fp, [r5]
			udd_enable_endpoint(i);
   84634:	40a2      	lsls	r2, r4
			udd_allocate_memory(i);
   84636:	f04b 0b02 	orr.w	fp, fp, #2
   8463a:	f8c5 b000 	str.w	fp, [r5]
			udd_enable_endpoint(i);
   8463e:	f8d8 b01c 	ldr.w	fp, [r8, #28]
			bool b_restart = ptr_job->busy;
   84642:	f00a 0a01 	and.w	sl, sl, #1
			udd_enable_endpoint(i);
   84646:	ea42 020b 	orr.w	r2, r2, fp
   8464a:	f8c8 201c 	str.w	r2, [r8, #28]
			if ((!Is_udd_endpoint_configured(i)) && (1)) { //this is dumb
   8464e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			bool b_restart = ptr_job->busy;
   84650:	ea4f 0e41 	mov.w	lr, r1, lsl #1
			if ((!Is_udd_endpoint_configured(i)) && (1)) { //this is dumb
   84654:	0357      	lsls	r7, r2, #13
   84656:	d50c      	bpl.n	84672 <udd_ep_alloc+0x196>
			udd_enable_endpoint_bank_autoswitch(i);
   84658:	682a      	ldr	r2, [r5, #0]
   8465a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   8465e:	602a      	str	r2, [r5, #0]
			if (b_restart) {
   84660:	f1ba 0f00 	cmp.w	sl, #0
   84664:	d0ca      	beq.n	845fc <udd_ep_alloc+0x120>
				if (!Is_udd_endpoint_dma_supported(i)
   84666:	1e5a      	subs	r2, r3, #1
   84668:	2a05      	cmp	r2, #5
   8466a:	d8a5      	bhi.n	845b8 <udd_ep_alloc+0xdc>
						&ptr_job->buf[ptr_job->buf_cnt],
   8466c:	f856 2c0c 	ldr.w	r2, [r6, #-12]
   84670:	e7aa      	b.n	845c8 <udd_ep_alloc+0xec>
				if (NULL == ptr_job->call_trans) {
   84672:	f8dc 3000 	ldr.w	r3, [ip]
   84676:	b163      	cbz	r3, 84692 <udd_ep_alloc+0x1b6>
				if (Is_udd_endpoint_in(i)) {
   84678:	682a      	ldr	r2, [r5, #0]
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   8467a:	4471      	add	r1, lr
				if (Is_udd_endpoint_in(i)) {
   8467c:	05d4      	lsls	r4, r2, #23
					i |= USB_EP_DIR_IN;
   8467e:	bf48      	it	mi
   84680:	f040 0080 	orrmi.w	r0, r0, #128	; 0x80
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   84684:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
   84688:	4602      	mov	r2, r0
   8468a:	f8d9 100c 	ldr.w	r1, [r9, #12]
   8468e:	2001      	movs	r0, #1
   84690:	4798      	blx	r3
				return false;
   84692:	2000      	movs	r0, #0
}
   84694:	b005      	add	sp, #20
   84696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   8469a:	2000      	movs	r0, #0
}
   8469c:	4770      	bx	lr
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8469e:	2a08      	cmp	r2, #8
   846a0:	bf38      	it	cc
   846a2:	2208      	movcc	r2, #8
   846a4:	0052      	lsls	r2, r2, #1
   846a6:	3a01      	subs	r2, #1
   846a8:	fab2 f282 	clz	r2, r2
   846ac:	f1c2 021c 	rsb	r2, r2, #28
   846b0:	0112      	lsls	r2, r2, #4
   846b2:	e74d      	b.n	84550 <udd_ep_alloc+0x74>
	return true;
   846b4:	2001      	movs	r0, #1
}
   846b6:	b005      	add	sp, #20
   846b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   846bc:	400ac000 	.word	0x400ac000
   846c0:	0008c98c 	.word	0x0008c98c
   846c4:	400ac100 	.word	0x400ac100
   846c8:	400ac120 	.word	0x400ac120
   846cc:	200721c8 	.word	0x200721c8
   846d0:	000843a9 	.word	0x000843a9

000846d4 <udd_ep_abort>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   846d4:	f000 020f 	and.w	r2, r0, #15
	if (!Is_udd_endpoint_dma_supported(ep_index)) {
   846d8:	f102 3cff 	add.w	ip, r2, #4294967295
   846dc:	fa5f f38c 	uxtb.w	r3, ip
   846e0:	2b05      	cmp	r3, #5
{
   846e2:	b570      	push	{r4, r5, r6, lr}
	if (!Is_udd_endpoint_dma_supported(ep_index)) {
   846e4:	d919      	bls.n	8471a <udd_ep_abort+0x46>
		udd_disable_endpoint_interrupt(ep_index);
   846e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		udd_disable_out_received_interrupt(ep_index);
   846ea:	2502      	movs	r5, #2
		udd_disable_in_send_interrupt(ep_index);
   846ec:	2401      	movs	r4, #1
		udd_disable_out_received_interrupt(ep_index);
   846ee:	4920      	ldr	r1, [pc, #128]	; (84770 <udd_ep_abort+0x9c>)
		udd_disable_endpoint_interrupt(ep_index);
   846f0:	4e20      	ldr	r6, [pc, #128]	; (84774 <udd_ep_abort+0xa0>)
   846f2:	4093      	lsls	r3, r2
   846f4:	6173      	str	r3, [r6, #20]
		udd_disable_out_received_interrupt(ep_index);
   846f6:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
		udd_disable_in_send_interrupt(ep_index);
   846fa:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
	udd_disable_endpoint_interrupt(ep_index);
   846fe:	491d      	ldr	r1, [pc, #116]	; (84774 <udd_ep_abort+0xa0>)
   84700:	614b      	str	r3, [r1, #20]
	if (ep & USB_EP_DIR_IN) {
   84702:	0601      	lsls	r1, r0, #24
   84704:	d41b      	bmi.n	8473e <udd_ep_abort+0x6a>
}
   84706:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8470a:	481b      	ldr	r0, [pc, #108]	; (84778 <udd_ep_abort+0xa4>)
   8470c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   84710:	2101      	movs	r1, #1
   84712:	4b1a      	ldr	r3, [pc, #104]	; (8477c <udd_ep_abort+0xa8>)
   84714:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
   84718:	4718      	bx	r3
		udd_disable_endpoint_dma_interrupt(ep_index);
   8471a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
		udd_endpoint_dma_set_control(ep_index, 0);
   8471e:	2500      	movs	r5, #0
		udd_disable_endpoint_interrupt(ep_index);
   84720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		udd_endpoint_dma_set_control(ep_index, 0);
   84724:	4916      	ldr	r1, [pc, #88]	; (84780 <udd_ep_abort+0xac>)
		udd_disable_endpoint_dma_interrupt(ep_index);
   84726:	4e13      	ldr	r6, [pc, #76]	; (84774 <udd_ep_abort+0xa0>)
		udd_endpoint_dma_set_control(ep_index, 0);
   84728:	eb01 1102 	add.w	r1, r1, r2, lsl #4
		udd_disable_endpoint_dma_interrupt(ep_index);
   8472c:	fa04 f40c 	lsl.w	r4, r4, ip
   84730:	6174      	str	r4, [r6, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   84732:	608d      	str	r5, [r1, #8]
	udd_disable_endpoint_interrupt(ep_index);
   84734:	490f      	ldr	r1, [pc, #60]	; (84774 <udd_ep_abort+0xa0>)
		udd_disable_endpoint_interrupt(ep_index);
   84736:	4093      	lsls	r3, r2
	udd_disable_endpoint_interrupt(ep_index);
   84738:	614b      	str	r3, [r1, #20]
	if (ep & USB_EP_DIR_IN) {
   8473a:	0601      	lsls	r1, r0, #24
   8473c:	d5e3      	bpl.n	84706 <udd_ep_abort+0x32>
		while(udd_nb_busy_bank(ep_index)) {
   8473e:	4b11      	ldr	r3, [pc, #68]	; (84784 <udd_ep_abort+0xb0>)
   84740:	0095      	lsls	r5, r2, #2
   84742:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
   84746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8474a:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   8474e:	d0da      	beq.n	84706 <udd_ep_abort+0x32>
			udd_kill_last_in_bank(ep_index);
   84750:	f44f 5400 	mov.w	r4, #8192	; 0x2000
   84754:	480c      	ldr	r0, [pc, #48]	; (84788 <udd_ep_abort+0xb4>)
			while(Is_udd_kill_last(ep_index));
   84756:	490d      	ldr	r1, [pc, #52]	; (8478c <udd_ep_abort+0xb8>)
			udd_kill_last_in_bank(ep_index);
   84758:	4428      	add	r0, r5
			while(Is_udd_kill_last(ep_index));
   8475a:	4429      	add	r1, r5
			udd_kill_last_in_bank(ep_index);
   8475c:	6004      	str	r4, [r0, #0]
			while(Is_udd_kill_last(ep_index));
   8475e:	680b      	ldr	r3, [r1, #0]
   84760:	049b      	lsls	r3, r3, #18
   84762:	d4fc      	bmi.n	8475e <udd_ep_abort+0x8a>
		while(udd_nb_busy_bank(ep_index)) {
   84764:	f8de 3000 	ldr.w	r3, [lr]
   84768:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   8476c:	d1f6      	bne.n	8475c <udd_ep_abort+0x88>
   8476e:	e7ca      	b.n	84706 <udd_ep_abort+0x32>
   84770:	400ac220 	.word	0x400ac220
   84774:	400ac000 	.word	0x400ac000
   84778:	200721c8 	.word	0x200721c8
   8477c:	00083b19 	.word	0x00083b19
   84780:	400ac300 	.word	0x400ac300
   84784:	400ac130 	.word	0x400ac130
   84788:	400ac1f0 	.word	0x400ac1f0
   8478c:	400ac1c0 	.word	0x400ac1c0

00084790 <UOTGHS_Handler>:
{
   84790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   84794:	4bb1      	ldr	r3, [pc, #708]	; (84a5c <UOTGHS_Handler+0x2cc>)
{
   84796:	b083      	sub	sp, #12
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   84798:	4798      	blx	r3
   8479a:	b928      	cbnz	r0, 847a8 <UOTGHS_Handler+0x18>
   8479c:	4bb0      	ldr	r3, [pc, #704]	; (84a60 <UOTGHS_Handler+0x2d0>)
   8479e:	685b      	ldr	r3, [r3, #4]
   847a0:	f013 0301 	ands.w	r3, r3, #1
   847a4:	f000 80b8 	beq.w	84918 <UOTGHS_Handler+0x188>
	if (Is_udd_sof()) {
   847a8:	4aad      	ldr	r2, [pc, #692]	; (84a60 <UOTGHS_Handler+0x2d0>)
   847aa:	6853      	ldr	r3, [r2, #4]
   847ac:	075f      	lsls	r7, r3, #29
   847ae:	f100 80a0 	bmi.w	848f2 <UOTGHS_Handler+0x162>
	if (Is_udd_msof()) {
   847b2:	6853      	ldr	r3, [r2, #4]
   847b4:	f013 0302 	ands.w	r3, r3, #2
   847b8:	f040 80a7 	bne.w	8490a <UOTGHS_Handler+0x17a>
	if (!Is_udd_endpoint_interrupt(0)) {
   847bc:	6851      	ldr	r1, [r2, #4]
   847be:	04ce      	lsls	r6, r1, #19
   847c0:	d523      	bpl.n	8480a <UOTGHS_Handler+0x7a>
	udd_disable_nak_out_interrupt(0);
   847c2:	2108      	movs	r1, #8
	udd_disable_nak_in_interrupt(0);
   847c4:	2010      	movs	r0, #16
   847c6:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	udd_disable_nak_out_interrupt(0);
   847ca:	f8c2 1220 	str.w	r1, [r2, #544]	; 0x220
	if (Is_udd_setup_received(0)) {
   847ce:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   847d2:	074d      	lsls	r5, r1, #29
   847d4:	f100 8181 	bmi.w	84ada <UOTGHS_Handler+0x34a>
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   847d8:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   847dc:	07cc      	lsls	r4, r1, #31
   847de:	d504      	bpl.n	847ea <UOTGHS_Handler+0x5a>
   847e0:	f8d2 21c0 	ldr.w	r2, [r2, #448]	; 0x1c0
   847e4:	07d0      	lsls	r0, r2, #31
   847e6:	f100 832c 	bmi.w	84e42 <UOTGHS_Handler+0x6b2>
	if (Is_udd_out_received(0)) {
   847ea:	4a9d      	ldr	r2, [pc, #628]	; (84a60 <UOTGHS_Handler+0x2d0>)
   847ec:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   847f0:	0789      	lsls	r1, r1, #30
   847f2:	f100 8221 	bmi.w	84c38 <UOTGHS_Handler+0x4a8>
	if (Is_udd_nak_out(0)) {
   847f6:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   847fa:	070f      	lsls	r7, r1, #28
   847fc:	f100 8249 	bmi.w	84c92 <UOTGHS_Handler+0x502>
	if (Is_udd_nak_in(0)) {
   84800:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   84804:	06cd      	lsls	r5, r1, #27
   84806:	f100 819b 	bmi.w	84b40 <UOTGHS_Handler+0x3b0>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8480a:	4e96      	ldr	r6, [pc, #600]	; (84a64 <UOTGHS_Handler+0x2d4>)
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8480c:	2101      	movs	r1, #1
   8480e:	4635      	mov	r5, r6
   84810:	4634      	mov	r4, r6
   84812:	f04f 0e04 	mov.w	lr, #4
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   84816:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
		}
#endif
#ifdef UDD_EP_FIFO_SUPPORTED
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_dma_supported(ep)
				&& Is_udd_endpoint_interrupt_enabled(ep)) {
   8481a:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8481e:	4f92      	ldr	r7, [pc, #584]	; (84a68 <UOTGHS_Handler+0x2d8>)
   84820:	4a92      	ldr	r2, [pc, #584]	; (84a6c <UOTGHS_Handler+0x2dc>)
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   84822:	f8df 823c 	ldr.w	r8, [pc, #572]	; 84a60 <UOTGHS_Handler+0x2d0>
   84826:	e029      	b.n	8487c <UOTGHS_Handler+0xec>
				&& Is_udd_endpoint_interrupt_enabled(ep)) {
   84828:	fa0a fc01 	lsl.w	ip, sl, r1
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8482c:	f8d8 b010 	ldr.w	fp, [r8, #16]
   84830:	ea1b 0f0c 	tst.w	fp, ip
   84834:	d014      	beq.n	84860 <UOTGHS_Handler+0xd0>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   84836:	f8d7 b000 	ldr.w	fp, [r7]
   8483a:	f01b 0f01 	tst.w	fp, #1
   8483e:	d005      	beq.n	8484c <UOTGHS_Handler+0xbc>
					&& Is_udd_in_send(ep)) {
   84840:	f8d2 b000 	ldr.w	fp, [r2]
   84844:	f01b 0f01 	tst.w	fp, #1
   84848:	f040 83a8 	bne.w	84f9c <UOTGHS_Handler+0x80c>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   8484c:	6838      	ldr	r0, [r7, #0]
   8484e:	04c0      	lsls	r0, r0, #19
   84850:	d506      	bpl.n	84860 <UOTGHS_Handler+0xd0>
					&& (0 == udd_nb_busy_bank(ep))) {
   84852:	6810      	ldr	r0, [r2, #0]
   84854:	f410 5f40 	tst.w	r0, #12288	; 0x3000
   84858:	f3c0 3b01 	ubfx	fp, r0, #12, #2
   8485c:	f000 83af 	beq.w	84fbe <UOTGHS_Handler+0x82e>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   84860:	3301      	adds	r3, #1
   84862:	2b08      	cmp	r3, #8
   84864:	f10e 0e04 	add.w	lr, lr, #4
   84868:	f102 0204 	add.w	r2, r2, #4
   8486c:	f107 0704 	add.w	r7, r7, #4
   84870:	f104 0418 	add.w	r4, r4, #24
   84874:	f101 0101 	add.w	r1, r1, #1
   84878:	f000 80a5 	beq.w	849c6 <UOTGHS_Handler+0x236>
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8487c:	f8d8 b010 	ldr.w	fp, [r8, #16]
   84880:	fa09 fc03 	lsl.w	ip, r9, r3
   84884:	ea1b 0f0c 	tst.w	fp, ip
   84888:	b2c8      	uxtb	r0, r1
   8488a:	d005      	beq.n	84898 <UOTGHS_Handler+0x108>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   8488c:	f8d8 b004 	ldr.w	fp, [r8, #4]
   84890:	ea1c 0f0b 	tst.w	ip, fp
   84894:	f040 8316 	bne.w	84ec4 <UOTGHS_Handler+0x734>
		if (!Is_udd_endpoint_dma_supported(ep)
   84898:	2b05      	cmp	r3, #5
   8489a:	d9c5      	bls.n	84828 <UOTGHS_Handler+0x98>
				&& Is_udd_endpoint_interrupt_enabled(ep)) {
   8489c:	f8d8 b010 	ldr.w	fp, [r8, #16]
   848a0:	fa0a fc01 	lsl.w	ip, sl, r1
   848a4:	ea1b 0f0c 	tst.w	fp, ip
   848a8:	d0c0      	beq.n	8482c <UOTGHS_Handler+0x9c>
			if (Is_udd_out_received(ep)
   848aa:	f8d2 b000 	ldr.w	fp, [r2]
   848ae:	f01b 0f02 	tst.w	fp, #2
   848b2:	d005      	beq.n	848c0 <UOTGHS_Handler+0x130>
				&& Is_udd_out_received_interrupt_enabled(ep)) {
   848b4:	f8d7 b000 	ldr.w	fp, [r7]
   848b8:	f01b 0f02 	tst.w	fp, #2
   848bc:	f040 8156 	bne.w	84b6c <UOTGHS_Handler+0x3dc>
			if (Is_udd_in_send(ep)
   848c0:	f8d2 b000 	ldr.w	fp, [r2]
   848c4:	f01b 0f01 	tst.w	fp, #1
   848c8:	d12e      	bne.n	84928 <UOTGHS_Handler+0x198>
			if (Is_udd_overflow(ep)
   848ca:	f8d2 b000 	ldr.w	fp, [r2]
   848ce:	f01b 0f20 	tst.w	fp, #32
   848d2:	d109      	bne.n	848e8 <UOTGHS_Handler+0x158>
					|| Is_udd_underflow(ep)
   848d4:	f8d2 b000 	ldr.w	fp, [r2]
   848d8:	f01b 0f04 	tst.w	fp, #4
   848dc:	d104      	bne.n	848e8 <UOTGHS_Handler+0x158>
					|| Is_udd_crc_error(ep)) {
   848de:	f8d2 b000 	ldr.w	fp, [r2]
   848e2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   848e6:	d0a1      	beq.n	8482c <UOTGHS_Handler+0x9c>
				udd_ep_abort(ep);
   848e8:	4b61      	ldr	r3, [pc, #388]	; (84a70 <UOTGHS_Handler+0x2e0>)
}
   848ea:	b003      	add	sp, #12
   848ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				udd_ep_abort(ep);
   848f0:	4718      	bx	r3
		udd_ack_sof();
   848f2:	2304      	movs	r3, #4
   848f4:	6093      	str	r3, [r2, #8]
		if (Is_udd_full_speed_mode()) {
   848f6:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   848fa:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   848fe:	d05f      	beq.n	849c0 <UOTGHS_Handler+0x230>
		UDC_SOF_EVENT();
   84900:	4b5c      	ldr	r3, [pc, #368]	; (84a74 <UOTGHS_Handler+0x2e4>)
}
   84902:	b003      	add	sp, #12
   84904:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udc_sof_notify();
   84908:	4718      	bx	r3
		udd_ack_msof();
   8490a:	2102      	movs	r1, #2
		udc_sof_notify();
   8490c:	4b5a      	ldr	r3, [pc, #360]	; (84a78 <UOTGHS_Handler+0x2e8>)
		udd_ack_msof();
   8490e:	6091      	str	r1, [r2, #8]
}
   84910:	b003      	add	sp, #12
   84912:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udc_sof_notify();
   84916:	4718      	bx	r3
  __ASM volatile ("cpsid i" : : : "memory");
   84918:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8491a:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   8491e:	4a57      	ldr	r2, [pc, #348]	; (84a7c <UOTGHS_Handler+0x2ec>)
   84920:	7013      	strb	r3, [r2, #0]
}
   84922:	b003      	add	sp, #12
   84924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					&& Is_udd_in_send_interrupt_enabled(ep)) {
   84928:	f8d7 b000 	ldr.w	fp, [r7]
   8492c:	f01b 0f01 	tst.w	fp, #1
   84930:	d0cb      	beq.n	848ca <UOTGHS_Handler+0x13a>
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84932:	2708      	movs	r7, #8
   84934:	4a52      	ldr	r2, [pc, #328]	; (84a80 <UOTGHS_Handler+0x2f0>)
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   84936:	eb03 0843 	add.w	r8, r3, r3, lsl #1
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   8493a:	f85e 2002 	ldr.w	r2, [lr, r2]
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   8493e:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84942:	f3c2 1202 	ubfx	r2, r2, #4, #3
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
   84946:	f8d8 900c 	ldr.w	r9, [r8, #12]
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   8494a:	4097      	lsls	r7, r2
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
   8494c:	f8d8 2008 	ldr.w	r2, [r8, #8]
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   84950:	005e      	lsls	r6, r3, #1
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
   84952:	4591      	cmp	r9, r2
   84954:	d305      	bcc.n	84962 <UOTGHS_Handler+0x1d2>
   84956:	f898 2014 	ldrb.w	r2, [r8, #20]
   8495a:	f012 0202 	ands.w	r2, r2, #2
   8495e:	f000 83fe 	beq.w	8515e <UOTGHS_Handler+0x9ce>
		udd_ack_in_send(ep);
   84962:	2401      	movs	r4, #1
   84964:	4a47      	ldr	r2, [pc, #284]	; (84a84 <UOTGHS_Handler+0x2f4>)
		ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   84966:	18f0      	adds	r0, r6, r3
   84968:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
		udd_ack_in_send(ep);
   8496c:	f84e 4002 	str.w	r4, [lr, r2]
		nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   84970:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
   84974:	1b12      	subs	r2, r2, r4
		nb_data = min(nb_remain, pkt_size);
   84976:	42ba      	cmp	r2, r7
   84978:	bf28      	it	cs
   8497a:	463a      	movcs	r2, r7
   8497c:	4616      	mov	r6, r2
		ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   8497e:	6842      	ldr	r2, [r0, #4]
   84980:	4422      	add	r2, r4
		ptr_job->buf_cnt += nb_data;
   84982:	4434      	add	r4, r6
		ptr_job->buf_load = nb_data;
   84984:	e9c0 4603 	strd	r4, r6, [r0, #12]
		for (i = 0; i < nb_data; i++) {
   84988:	2e00      	cmp	r6, #0
   8498a:	f000 8407 	beq.w	8519c <UOTGHS_Handler+0xa0c>
   8498e:	483e      	ldr	r0, [pc, #248]	; (84a88 <UOTGHS_Handler+0x2f8>)
	uint8_t *ptr_dst = (uint8_t *) & udd_get_endpoint_fifo_access(ep, 8);
   84990:	03c9      	lsls	r1, r1, #15
   84992:	4408      	add	r0, r1
   84994:	1994      	adds	r4, r2, r6
			*ptr_dst++ = *ptr_src++;
   84996:	f812 1b01 	ldrb.w	r1, [r2], #1
		for (i = 0; i < nb_data; i++) {
   8499a:	42a2      	cmp	r2, r4
			*ptr_dst++ = *ptr_src++;
   8499c:	f800 1f01 	strb.w	r1, [r0, #1]!
		for (i = 0; i < nb_data; i++) {
   849a0:	d1f9      	bne.n	84996 <UOTGHS_Handler+0x206>
		udd_ack_fifocon(ep);
   849a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   849a6:	4a39      	ldr	r2, [pc, #228]	; (84a8c <UOTGHS_Handler+0x2fc>)
		if (nb_data < pkt_size) {
   849a8:	42b7      	cmp	r7, r6
		udd_ack_fifocon(ep);
   849aa:	f84e 1002 	str.w	r1, [lr, r2]
		if (nb_data < pkt_size) {
   849ae:	d9b8      	bls.n	84922 <UOTGHS_Handler+0x192>
			ptr_job->b_shortpacket = false;
   849b0:	2218      	movs	r2, #24
   849b2:	fb02 5303 	mla	r3, r2, r3, r5
   849b6:	7d1a      	ldrb	r2, [r3, #20]
   849b8:	f36f 0241 	bfc	r2, #1, #1
   849bc:	751a      	strb	r2, [r3, #20]
   849be:	e7b0      	b.n	84922 <UOTGHS_Handler+0x192>
			udc_sof_notify();
   849c0:	4b2d      	ldr	r3, [pc, #180]	; (84a78 <UOTGHS_Handler+0x2e8>)
   849c2:	4798      	blx	r3
   849c4:	e79c      	b.n	84900 <UOTGHS_Handler+0x170>
	if (Is_udd_reset()) {
   849c6:	4926      	ldr	r1, [pc, #152]	; (84a60 <UOTGHS_Handler+0x2d0>)
   849c8:	684a      	ldr	r2, [r1, #4]
   849ca:	f012 0208 	ands.w	r2, r2, #8
   849ce:	f040 81c5 	bne.w	84d5c <UOTGHS_Handler+0x5cc>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   849d2:	690b      	ldr	r3, [r1, #16]
   849d4:	07df      	lsls	r7, r3, #31
   849d6:	d51e      	bpl.n	84a16 <UOTGHS_Handler+0x286>
   849d8:	684b      	ldr	r3, [r1, #4]
   849da:	07de      	lsls	r6, r3, #31
   849dc:	d51b      	bpl.n	84a16 <UOTGHS_Handler+0x286>
		udd_enable_wake_up_interrupt();
   849de:	2010      	movs	r0, #16
		udd_disable_suspend_interrupt();
   849e0:	2401      	movs	r4, #1
		otg_unfreeze_clock();
   849e2:	f8d1 3800 	ldr.w	r3, [r1, #2048]	; 0x800
   849e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   849ea:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		udd_disable_suspend_interrupt();
   849ee:	614c      	str	r4, [r1, #20]
		udd_enable_wake_up_interrupt();
   849f0:	6188      	str	r0, [r1, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   849f2:	f8d1 0800 	ldr.w	r0, [r1, #2048]	; 0x800
	if (!b_idle && udd_b_idle) {
   849f6:	4b26      	ldr	r3, [pc, #152]	; (84a90 <UOTGHS_Handler+0x300>)
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   849f8:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
   849fc:	f8c1 0800 	str.w	r0, [r1, #2048]	; 0x800
	if (!b_idle && udd_b_idle) {
   84a00:	7819      	ldrb	r1, [r3, #0]
   84a02:	2900      	cmp	r1, #0
   84a04:	f040 8342 	bne.w	8508c <UOTGHS_Handler+0x8fc>
	udd_b_idle = b_idle;
   84a08:	2100      	movs	r1, #0
		UDC_SUSPEND_EVENT();
   84a0a:	4a22      	ldr	r2, [pc, #136]	; (84a94 <UOTGHS_Handler+0x304>)
	udd_b_idle = b_idle;
   84a0c:	7019      	strb	r1, [r3, #0]
}
   84a0e:	b003      	add	sp, #12
   84a10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		UDC_RESUME_EVENT();
   84a14:	4710      	bx	r2
	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   84a16:	4b12      	ldr	r3, [pc, #72]	; (84a60 <UOTGHS_Handler+0x2d0>)
   84a18:	691a      	ldr	r2, [r3, #16]
   84a1a:	06d5      	lsls	r5, r2, #27
   84a1c:	d53e      	bpl.n	84a9c <UOTGHS_Handler+0x30c>
   84a1e:	685a      	ldr	r2, [r3, #4]
   84a20:	06d4      	lsls	r4, r2, #27
   84a22:	d53b      	bpl.n	84a9c <UOTGHS_Handler+0x30c>
		otg_unfreeze_clock();
   84a24:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84a28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   84a2c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		while (!Is_otg_clock_usable()) {
   84a30:	e002      	b.n	84a38 <UOTGHS_Handler+0x2a8>
			if (Is_udd_suspend()) {
   84a32:	685a      	ldr	r2, [r3, #4]
   84a34:	07d0      	lsls	r0, r2, #31
   84a36:	d403      	bmi.n	84a40 <UOTGHS_Handler+0x2b0>
		while (!Is_otg_clock_usable()) {
   84a38:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   84a3c:	0451      	lsls	r1, r2, #17
   84a3e:	d5f8      	bpl.n	84a32 <UOTGHS_Handler+0x2a2>
		udd_disable_wake_up_interrupt();
   84a40:	2010      	movs	r0, #16
		udd_enable_suspend_interrupt();
   84a42:	2101      	movs	r1, #1
		udd_disable_wake_up_interrupt();
   84a44:	4a06      	ldr	r2, [pc, #24]	; (84a60 <UOTGHS_Handler+0x2d0>)
	if (b_idle && !udd_b_idle) {
   84a46:	4b12      	ldr	r3, [pc, #72]	; (84a90 <UOTGHS_Handler+0x300>)
		udd_disable_wake_up_interrupt();
   84a48:	6150      	str	r0, [r2, #20]
		udd_enable_suspend_interrupt();
   84a4a:	6191      	str	r1, [r2, #24]
	if (b_idle && !udd_b_idle) {
   84a4c:	781a      	ldrb	r2, [r3, #0]
   84a4e:	2a00      	cmp	r2, #0
   84a50:	f000 82d7 	beq.w	85002 <UOTGHS_Handler+0x872>
	udd_b_idle = b_idle;
   84a54:	2101      	movs	r1, #1
		UDC_RESUME_EVENT();
   84a56:	4a10      	ldr	r2, [pc, #64]	; (84a98 <UOTGHS_Handler+0x308>)
   84a58:	e7d8      	b.n	84a0c <UOTGHS_Handler+0x27c>
   84a5a:	bf00      	nop
   84a5c:	00083a9d 	.word	0x00083a9d
   84a60:	400ac000 	.word	0x400ac000
   84a64:	200721c8 	.word	0x200721c8
   84a68:	400ac1c4 	.word	0x400ac1c4
   84a6c:	400ac134 	.word	0x400ac134
   84a70:	000846d5 	.word	0x000846d5
   84a74:	00081841 	.word	0x00081841
   84a78:	00081189 	.word	0x00081189
   84a7c:	20070b04 	.word	0x20070b04
   84a80:	400ac100 	.word	0x400ac100
   84a84:	400ac160 	.word	0x400ac160
   84a88:	2017ffff 	.word	0x2017ffff
   84a8c:	400ac220 	.word	0x400ac220
   84a90:	200721bd 	.word	0x200721bd
   84a94:	00081831 	.word	0x00081831
   84a98:	00081839 	.word	0x00081839
	if (Is_otg_vbus_transition()) {
   84a9c:	4ba0      	ldr	r3, [pc, #640]	; (84d20 <UOTGHS_Handler+0x590>)
   84a9e:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   84aa2:	0792      	lsls	r2, r2, #30
   84aa4:	f57f af3d 	bpl.w	84922 <UOTGHS_Handler+0x192>
		otg_ack_vbus_transition();
   84aa8:	2102      	movs	r1, #2
		otg_unfreeze_clock();
   84aaa:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84aae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   84ab2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   84ab6:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
		otg_freeze_clock();
   84aba:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84abe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   84ac2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		if (Is_otg_vbus_high()) {
   84ac6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   84aca:	051b      	lsls	r3, r3, #20
   84acc:	f140 81f5 	bpl.w	84eba <UOTGHS_Handler+0x72a>
			udd_attach();
   84ad0:	4b94      	ldr	r3, [pc, #592]	; (84d24 <UOTGHS_Handler+0x594>)
}
   84ad2:	b003      	add	sp, #12
   84ad4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			udd_attach();
   84ad8:	4718      	bx	r3
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   84ada:	4d93      	ldr	r5, [pc, #588]	; (84d28 <UOTGHS_Handler+0x598>)
   84adc:	782b      	ldrb	r3, [r5, #0]
   84ade:	b1eb      	cbz	r3, 84b1c <UOTGHS_Handler+0x38c>
	if (udd_g_ctrlreq.callback) {
   84ae0:	4c92      	ldr	r4, [pc, #584]	; (84d2c <UOTGHS_Handler+0x59c>)
   84ae2:	6923      	ldr	r3, [r4, #16]
   84ae4:	b103      	cbz	r3, 84ae8 <UOTGHS_Handler+0x358>
		udd_g_ctrlreq.callback();
   84ae6:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84ae8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84aec:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84aee:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84af2:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   84af4:	2201      	movs	r2, #1
   84af6:	4b8e      	ldr	r3, [pc, #568]	; (84d30 <UOTGHS_Handler+0x5a0>)
   84af8:	7018      	strb	r0, [r3, #0]
   84afa:	4889      	ldr	r0, [pc, #548]	; (84d20 <UOTGHS_Handler+0x590>)
   84afc:	f8c0 2220 	str.w	r2, [r0, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   84b00:	b919      	cbnz	r1, 84b0a <UOTGHS_Handler+0x37a>
		cpu_irq_enable();
   84b02:	701a      	strb	r2, [r3, #0]
   84b04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84b08:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   84b0a:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   84b0c:	2102      	movs	r1, #2
   84b0e:	4a84      	ldr	r2, [pc, #528]	; (84d20 <UOTGHS_Handler+0x590>)
   84b10:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
	udd_g_ctrlreq.over_under_run = NULL;
   84b14:	e9c4 3304 	strd	r3, r3, [r4, #16]
	udd_g_ctrlreq.payload_size = 0;
   84b18:	81a3      	strh	r3, [r4, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84b1a:	702b      	strb	r3, [r5, #0]
	if (8 != udd_byte_count(0)) {
   84b1c:	4a80      	ldr	r2, [pc, #512]	; (84d20 <UOTGHS_Handler+0x590>)
   84b1e:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   84b22:	f3c3 530a 	ubfx	r3, r3, #20, #11
   84b26:	2b08      	cmp	r3, #8
   84b28:	f000 80c1 	beq.w	84cae <UOTGHS_Handler+0x51e>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84b2c:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   84b2e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
		udd_ack_setup_received(0);
   84b32:	2304      	movs	r3, #4
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84b34:	7028      	strb	r0, [r5, #0]
	udd_enable_stall_handshake(0);
   84b36:	f8c2 11f0 	str.w	r1, [r2, #496]	; 0x1f0
		udd_ack_setup_received(0);
   84b3a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
		return; // Error data number doesn't correspond to SETUP packet
   84b3e:	e6f0      	b.n	84922 <UOTGHS_Handler+0x192>
		udd_ack_nak_in(0);
   84b40:	2310      	movs	r3, #16
   84b42:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	if (Is_udd_out_received(0))
   84b46:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   84b4a:	f013 0302 	ands.w	r3, r3, #2
   84b4e:	f47f aee8 	bne.w	84922 <UOTGHS_Handler+0x192>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   84b52:	4875      	ldr	r0, [pc, #468]	; (84d28 <UOTGHS_Handler+0x598>)
   84b54:	7801      	ldrb	r1, [r0, #0]
   84b56:	2901      	cmp	r1, #1
   84b58:	f000 82ab 	beq.w	850b2 <UOTGHS_Handler+0x922>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   84b5c:	2904      	cmp	r1, #4
   84b5e:	f47f aee0 	bne.w	84922 <UOTGHS_Handler+0x192>
		udd_enable_stall_handshake(0);
   84b62:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   84b66:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
   84b6a:	e6da      	b.n	84922 <UOTGHS_Handler+0x192>
	udd_ack_out_received(ep);
   84b6c:	f04f 0b02 	mov.w	fp, #2
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84b70:	f04f 0808 	mov.w	r8, #8
   84b74:	4e6f      	ldr	r6, [pc, #444]	; (84d34 <UOTGHS_Handler+0x5a4>)
	udd_ack_out_received(ep);
   84b76:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 84d38 <UOTGHS_Handler+0x5a8>
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84b7a:	f85e 6006 	ldr.w	r6, [lr, r6]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   84b7e:	eb03 0743 	add.w	r7, r3, r3, lsl #1
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84b82:	f3c6 1602 	ubfx	r6, r6, #4, #3
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   84b86:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84b8a:	fa08 f806 	lsl.w	r8, r8, r6
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   84b8e:	e9d7 6902 	ldrd	r6, r9, [r7, #8]
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
   84b92:	687f      	ldr	r7, [r7, #4]
	udd_ack_out_received(ep);
   84b94:	f84e b00a 	str.w	fp, [lr, sl]
	nb_data = udd_byte_count(ep);
   84b98:	6812      	ldr	r2, [r2, #0]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   84b9a:	eba6 0b09 	sub.w	fp, r6, r9
	nb_data = udd_byte_count(ep);
   84b9e:	f3c2 5a0a 	ubfx	sl, r2, #20, #11
	if (nb_data < pkt_size) {
   84ba2:	45d0      	cmp	r8, sl
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   84ba4:	ea4f 0643 	mov.w	r6, r3, lsl #1
	if (nb_data < pkt_size) {
   84ba8:	f200 82bb 	bhi.w	85122 <UOTGHS_Handler+0x992>
		if (nb_data >= nb_remain) {
   84bac:	45d3      	cmp	fp, sl
   84bae:	f200 82fb 	bhi.w	851a8 <UOTGHS_Handler+0xa18>
	bool b_full = false, b_short = false;
   84bb2:	f04f 0800 	mov.w	r8, #0
		ptr_job->buf_cnt += nb_data;
   84bb6:	f04f 0a18 	mov.w	sl, #24
   84bba:	fb0a 5a03 	mla	sl, sl, r3, r5
   84bbe:	f8da 200c 	ldr.w	r2, [sl, #12]
		ptr_job->buf_load = nb_data;
   84bc2:	f8ca b010 	str.w	fp, [sl, #16]
		ptr_job->buf_cnt += nb_data;
   84bc6:	445a      	add	r2, fp
   84bc8:	f8ca 200c 	str.w	r2, [sl, #12]
		for (i = 0; i < nb_data; i++) {
   84bcc:	f1bb 0f00 	cmp.w	fp, #0
   84bd0:	f000 82be 	beq.w	85150 <UOTGHS_Handler+0x9c0>
   84bd4:	2201      	movs	r2, #1
   84bd6:	46da      	mov	sl, fp
   84bd8:	9201      	str	r2, [sp, #4]
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(ep, 8);
   84bda:	03c9      	lsls	r1, r1, #15
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
   84bdc:	444f      	add	r7, r9
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(ep, 8);
   84bde:	f101 5900 	add.w	r9, r1, #536870912	; 0x20000000
   84be2:	f509 19c0 	add.w	r9, r9, #1572864	; 0x180000
   84be6:	1e79      	subs	r1, r7, #1
			*ptr_dst++ = *ptr_src++;
   84be8:	460a      	mov	r2, r1
		for (i = 0; i < nb_data; i++) {
   84bea:	3202      	adds	r2, #2
			*ptr_dst++ = *ptr_src++;
   84bec:	f819 bb01 	ldrb.w	fp, [r9], #1
		for (i = 0; i < nb_data; i++) {
   84bf0:	1bd2      	subs	r2, r2, r7
   84bf2:	4552      	cmp	r2, sl
			*ptr_dst++ = *ptr_src++;
   84bf4:	f801 bf01 	strb.w	fp, [r1, #1]!
		for (i = 0; i < nb_data; i++) {
   84bf8:	d3f6      	bcc.n	84be8 <UOTGHS_Handler+0x458>
	udd_ack_fifocon(ep);
   84bfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   84bfe:	4a4f      	ldr	r2, [pc, #316]	; (84d3c <UOTGHS_Handler+0x5ac>)
   84c00:	f84e 1002 	str.w	r1, [lr, r2]
   84c04:	4496      	add	lr, r2
	if (b_full || b_short) {
   84c06:	9a01      	ldr	r2, [sp, #4]
   84c08:	b91a      	cbnz	r2, 84c12 <UOTGHS_Handler+0x482>
   84c0a:	f1b8 0f00 	cmp.w	r8, #0
   84c0e:	f43f ae88 	beq.w	84922 <UOTGHS_Handler+0x192>
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   84c12:	4433      	add	r3, r6
   84c14:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		udd_disable_out_received_interrupt(ep);
   84c18:	2302      	movs	r3, #2
		udd_ep_finish_job(ptr_job, false, ep);
   84c1a:	4602      	mov	r2, r0
   84c1c:	2100      	movs	r1, #0
   84c1e:	4620      	mov	r0, r4
		udd_disable_out_received_interrupt(ep);
   84c20:	f8ce 3000 	str.w	r3, [lr]
		udd_disable_endpoint_interrupt(ep);
   84c24:	4b3e      	ldr	r3, [pc, #248]	; (84d20 <UOTGHS_Handler+0x590>)
   84c26:	f8c3 c014 	str.w	ip, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   84c2a:	68eb      	ldr	r3, [r5, #12]
   84c2c:	60ab      	str	r3, [r5, #8]
		udd_ep_finish_job(ptr_job, false, ep);
   84c2e:	4b44      	ldr	r3, [pc, #272]	; (84d40 <UOTGHS_Handler+0x5b0>)
}
   84c30:	b003      	add	sp, #12
   84c32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udd_ep_finish_job(ptr_job, false, ep);
   84c36:	4718      	bx	r3
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   84c38:	4d3b      	ldr	r5, [pc, #236]	; (84d28 <UOTGHS_Handler+0x598>)
   84c3a:	782b      	ldrb	r3, [r5, #0]
   84c3c:	2b01      	cmp	r3, #1
   84c3e:	f000 8105 	beq.w	84e4c <UOTGHS_Handler+0x6bc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   84c42:	2b02      	cmp	r3, #2
   84c44:	f000 8154 	beq.w	84ef0 <UOTGHS_Handler+0x760>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   84c48:	2b04      	cmp	r3, #4
   84c4a:	f000 8151 	beq.w	84ef0 <UOTGHS_Handler+0x760>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84c4e:	2105      	movs	r1, #5
	udd_enable_stall_handshake(0);
   84c50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   84c54:	4c35      	ldr	r4, [pc, #212]	; (84d2c <UOTGHS_Handler+0x59c>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84c56:	7029      	strb	r1, [r5, #0]
	udd_enable_stall_handshake(0);
   84c58:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84c5c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84c60:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84c62:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84c66:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   84c68:	2201      	movs	r2, #1
   84c6a:	4b31      	ldr	r3, [pc, #196]	; (84d30 <UOTGHS_Handler+0x5a0>)
   84c6c:	7018      	strb	r0, [r3, #0]
   84c6e:	482c      	ldr	r0, [pc, #176]	; (84d20 <UOTGHS_Handler+0x590>)
   84c70:	f8c0 2220 	str.w	r2, [r0, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   84c74:	b919      	cbnz	r1, 84c7e <UOTGHS_Handler+0x4ee>
		cpu_irq_enable();
   84c76:	701a      	strb	r2, [r3, #0]
   84c78:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84c7c:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   84c7e:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   84c80:	2102      	movs	r1, #2
   84c82:	4a27      	ldr	r2, [pc, #156]	; (84d20 <UOTGHS_Handler+0x590>)
   84c84:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
	udd_g_ctrlreq.over_under_run = NULL;
   84c88:	e9c4 3304 	strd	r3, r3, [r4, #16]
	udd_g_ctrlreq.payload_size = 0;
   84c8c:	81a3      	strh	r3, [r4, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84c8e:	702b      	strb	r3, [r5, #0]
   84c90:	e647      	b.n	84922 <UOTGHS_Handler+0x192>
		udd_ack_nak_out(0);
   84c92:	2308      	movs	r3, #8
   84c94:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	if (Is_udd_in_send(0))
   84c98:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   84c9c:	07de      	lsls	r6, r3, #31
   84c9e:	f53f ae40 	bmi.w	84922 <UOTGHS_Handler+0x192>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   84ca2:	4b21      	ldr	r3, [pc, #132]	; (84d28 <UOTGHS_Handler+0x598>)
   84ca4:	781b      	ldrb	r3, [r3, #0]
   84ca6:	2b03      	cmp	r3, #3
   84ca8:	f47f ae3b 	bne.w	84922 <UOTGHS_Handler+0x192>
   84cac:	e759      	b.n	84b62 <UOTGHS_Handler+0x3d2>
   84cae:	4a25      	ldr	r2, [pc, #148]	; (84d44 <UOTGHS_Handler+0x5b4>)
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
   84cb0:	4b25      	ldr	r3, [pc, #148]	; (84d48 <UOTGHS_Handler+0x5b8>)
	for (i = 0; i < 8; i++) {
   84cb2:	4826      	ldr	r0, [pc, #152]	; (84d4c <UOTGHS_Handler+0x5bc>)
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   84cb4:	4619      	mov	r1, r3
   84cb6:	3301      	adds	r3, #1
   84cb8:	7809      	ldrb	r1, [r1, #0]
	for (i = 0; i < 8; i++) {
   84cba:	4283      	cmp	r3, r0
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   84cbc:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   84cc0:	d1f8      	bne.n	84cb4 <UOTGHS_Handler+0x524>
	if (udc_process_setup() == false) {
   84cc2:	4b23      	ldr	r3, [pc, #140]	; (84d50 <UOTGHS_Handler+0x5c0>)
   84cc4:	4798      	blx	r3
   84cc6:	2800      	cmp	r0, #0
   84cc8:	f000 8119 	beq.w	84efe <UOTGHS_Handler+0x76e>
	udd_ack_setup_received(0);
   84ccc:	2104      	movs	r1, #4
   84cce:	4b14      	ldr	r3, [pc, #80]	; (84d20 <UOTGHS_Handler+0x590>)
	if (Udd_setup_is_in()) {
   84cd0:	4a16      	ldr	r2, [pc, #88]	; (84d2c <UOTGHS_Handler+0x59c>)
	udd_ack_setup_received(0);
   84cd2:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	if (Udd_setup_is_in()) {
   84cd6:	f992 1000 	ldrsb.w	r1, [r2]
   84cda:	2900      	cmp	r1, #0
   84cdc:	f2c0 81a4 	blt.w	85028 <UOTGHS_Handler+0x898>
		if (0 == udd_g_ctrlreq.req.wLength) {
   84ce0:	88d2      	ldrh	r2, [r2, #6]
   84ce2:	2a00      	cmp	r2, #0
   84ce4:	f000 81ff 	beq.w	850e6 <UOTGHS_Handler+0x956>
		udd_ctrl_prev_payload_buf_cnt = 0;
   84ce8:	2200      	movs	r2, #0
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   84cea:	2401      	movs	r4, #1
		udd_ack_nak_in(0);
   84cec:	2110      	movs	r1, #16
		udd_ctrl_prev_payload_buf_cnt = 0;
   84cee:	4819      	ldr	r0, [pc, #100]	; (84d54 <UOTGHS_Handler+0x5c4>)
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   84cf0:	702c      	strb	r4, [r5, #0]
		udd_ctrl_prev_payload_buf_cnt = 0;
   84cf2:	8002      	strh	r2, [r0, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84cf4:	4818      	ldr	r0, [pc, #96]	; (84d58 <UOTGHS_Handler+0x5c8>)
   84cf6:	8002      	strh	r2, [r0, #0]
		udd_ack_nak_in(0);
   84cf8:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84cfc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84d00:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84d02:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84d06:	480a      	ldr	r0, [pc, #40]	; (84d30 <UOTGHS_Handler+0x5a0>)
   84d08:	7002      	strb	r2, [r0, #0]
		udd_enable_nak_in_interrupt(0);
   84d0a:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   84d0e:	2d00      	cmp	r5, #0
   84d10:	f47f ae07 	bne.w	84922 <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   84d14:	7004      	strb	r4, [r0, #0]
   84d16:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84d1a:	b662      	cpsie	i
   84d1c:	e601      	b.n	84922 <UOTGHS_Handler+0x192>
   84d1e:	bf00      	nop
   84d20:	400ac000 	.word	0x400ac000
   84d24:	00084001 	.word	0x00084001
   84d28:	200721c4 	.word	0x200721c4
   84d2c:	20072288 	.word	0x20072288
   84d30:	20070b04 	.word	0x20070b04
   84d34:	400ac100 	.word	0x400ac100
   84d38:	400ac160 	.word	0x400ac160
   84d3c:	400ac220 	.word	0x400ac220
   84d40:	00083b19 	.word	0x00083b19
   84d44:	20072287 	.word	0x20072287
   84d48:	20180000 	.word	0x20180000
   84d4c:	20180008 	.word	0x20180008
   84d50:	000811c5 	.word	0x000811c5
   84d54:	200721c2 	.word	0x200721c2
   84d58:	200721c0 	.word	0x200721c0
		udd_ack_reset();
   84d5c:	2401      	movs	r4, #1
   84d5e:	4fb8      	ldr	r7, [pc, #736]	; (85040 <UOTGHS_Handler+0x8b0>)
   84d60:	608b      	str	r3, [r1, #8]
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   84d62:	1e63      	subs	r3, r4, #1
	if (ptr_job->busy == false) {
   84d64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   84d68:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   84d6c:	7d19      	ldrb	r1, [r3, #20]
   84d6e:	b2e2      	uxtb	r2, r4
   84d70:	07c8      	lsls	r0, r1, #31
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84d72:	f104 0401 	add.w	r4, r4, #1
	if (ptr_job->busy == false) {
   84d76:	d50c      	bpl.n	84d92 <UOTGHS_Handler+0x602>
	ptr_job->busy = false;
   84d78:	f36f 0100 	bfc	r1, #0, #1
   84d7c:	7519      	strb	r1, [r3, #20]
	if (NULL == ptr_job->call_trans) {
   84d7e:	6833      	ldr	r3, [r6, #0]
   84d80:	b13b      	cbz	r3, 84d92 <UOTGHS_Handler+0x602>
	if (Is_udd_endpoint_in(ep_num)) {
   84d82:	6839      	ldr	r1, [r7, #0]
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   84d84:	2001      	movs	r0, #1
	if (Is_udd_endpoint_in(ep_num)) {
   84d86:	05c9      	lsls	r1, r1, #23
		ep_num |= USB_EP_DIR_IN;
   84d88:	bf48      	it	mi
   84d8a:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   84d8e:	68b1      	ldr	r1, [r6, #8]
   84d90:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84d92:	2c09      	cmp	r4, #9
   84d94:	f106 0618 	add.w	r6, r6, #24
   84d98:	f107 0704 	add.w	r7, r7, #4
   84d9c:	d1e1      	bne.n	84d62 <UOTGHS_Handler+0x5d2>
		udc_reset();
   84d9e:	4ba9      	ldr	r3, [pc, #676]	; (85044 <UOTGHS_Handler+0x8b4>)
   84da0:	4798      	blx	r3
	udd_configure_address(0);
   84da2:	4ba9      	ldr	r3, [pc, #676]	; (85048 <UOTGHS_Handler+0x8b8>)
   84da4:	681a      	ldr	r2, [r3, #0]
   84da6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84daa:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   84dac:	681a      	ldr	r2, [r3, #0]
   84dae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84db2:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   84db4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   84db8:	f422 52cb 	bic.w	r2, r2, #6496	; 0x1960
   84dbc:	f022 021c 	bic.w	r2, r2, #28
   84dc0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   84dc4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_allocate_memory(0);
   84dc8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   84dcc:	f042 0202 	orr.w	r2, r2, #2
   84dd0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   84dd4:	69da      	ldr	r2, [r3, #28]
   84dd6:	f042 0201 	orr.w	r2, r2, #1
   84dda:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84ddc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84de0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84de2:	f3bf 8f5f 	dmb	sy
	udd_enable_setup_received_interrupt(0);
   84de6:	2004      	movs	r0, #4
	cpu_irq_disable();
   84de8:	2500      	movs	r5, #0
   84dea:	4a98      	ldr	r2, [pc, #608]	; (8504c <UOTGHS_Handler+0x8bc>)
	udd_enable_out_received_interrupt(0);
   84dec:	2402      	movs	r4, #2
   84dee:	7015      	strb	r5, [r2, #0]
	udd_enable_setup_received_interrupt(0);
   84df0:	f8c3 01f0 	str.w	r0, [r3, #496]	; 0x1f0
	udd_enable_endpoint_interrupt(0);
   84df4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	udd_enable_out_received_interrupt(0);
   84df8:	f8c3 41f0 	str.w	r4, [r3, #496]	; 0x1f0
	udd_enable_endpoint_interrupt(0);
   84dfc:	6198      	str	r0, [r3, #24]
	if (cpu_irq_is_enabled_flags(flags))
   84dfe:	b921      	cbnz	r1, 84e0a <UOTGHS_Handler+0x67a>
		cpu_irq_enable();
   84e00:	2301      	movs	r3, #1
   84e02:	7013      	strb	r3, [r2, #0]
   84e04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84e08:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84e0a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84e0e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84e10:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84e14:	2400      	movs	r4, #0
	udd_disable_in_send_interrupt(0);
   84e16:	2301      	movs	r3, #1
   84e18:	488b      	ldr	r0, [pc, #556]	; (85048 <UOTGHS_Handler+0x8b8>)
   84e1a:	7014      	strb	r4, [r2, #0]
   84e1c:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   84e20:	b919      	cbnz	r1, 84e2a <UOTGHS_Handler+0x69a>
		cpu_irq_enable();
   84e22:	7013      	strb	r3, [r2, #0]
   84e24:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84e28:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   84e2a:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   84e2c:	2402      	movs	r4, #2
	udd_g_ctrlreq.callback = NULL;
   84e2e:	4a88      	ldr	r2, [pc, #544]	; (85050 <UOTGHS_Handler+0x8c0>)
	udd_ack_out_received(0);
   84e30:	4885      	ldr	r0, [pc, #532]	; (85048 <UOTGHS_Handler+0x8b8>)
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84e32:	4988      	ldr	r1, [pc, #544]	; (85054 <UOTGHS_Handler+0x8c4>)
	udd_g_ctrlreq.callback = NULL;
   84e34:	6113      	str	r3, [r2, #16]
	udd_ack_out_received(0);
   84e36:	f8c0 4160 	str.w	r4, [r0, #352]	; 0x160
	udd_g_ctrlreq.over_under_run = NULL;
   84e3a:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   84e3c:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84e3e:	700b      	strb	r3, [r1, #0]
		goto udd_interrupt_end;
   84e40:	e56f      	b.n	84922 <UOTGHS_Handler+0x192>
		udd_ctrl_in_sent();
   84e42:	4b85      	ldr	r3, [pc, #532]	; (85058 <UOTGHS_Handler+0x8c8>)
}
   84e44:	b003      	add	sp, #12
   84e46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udd_ctrl_in_sent();
   84e4a:	4718      	bx	r3
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   84e4c:	4f83      	ldr	r7, [pc, #524]	; (8505c <UOTGHS_Handler+0x8cc>)
	nb_data = udd_byte_count(0);
   84e4e:	f8d2 6130 	ldr.w	r6, [r2, #304]	; 0x130
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   84e52:	4c7f      	ldr	r4, [pc, #508]	; (85050 <UOTGHS_Handler+0x8c0>)
   84e54:	883b      	ldrh	r3, [r7, #0]
   84e56:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
	nb_data = udd_byte_count(0);
   84e5a:	f3c6 560a 	ubfx	r6, r6, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   84e5e:	199a      	adds	r2, r3, r6
   84e60:	4594      	cmp	ip, r2
	udd_ctrl_payload_buf_cnt += nb_data;
   84e62:	bfac      	ite	ge
   84e64:	fa1f fc82 	uxthge.w	ip, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   84e68:	ebac 0603 	sublt.w	r6, ip, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84e6c:	68a2      	ldr	r2, [r4, #8]
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   84e6e:	bfb8      	it	lt
   84e70:	b2b6      	uxthlt	r6, r6
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84e72:	441a      	add	r2, r3
	for (i = 0; i < nb_data; i++) {
   84e74:	2e00      	cmp	r6, #0
   84e76:	f000 8151 	beq.w	8511c <UOTGHS_Handler+0x98c>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   84e7a:	4b79      	ldr	r3, [pc, #484]	; (85060 <UOTGHS_Handler+0x8d0>)
		*ptr_dest++ = *ptr_src++;
   84e7c:	4618      	mov	r0, r3
   84e7e:	3301      	adds	r3, #1
   84e80:	7800      	ldrb	r0, [r0, #0]
	for (i = 0; i < nb_data; i++) {
   84e82:	b2d9      	uxtb	r1, r3
   84e84:	42b1      	cmp	r1, r6
		*ptr_dest++ = *ptr_src++;
   84e86:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < nb_data; i++) {
   84e8a:	d3f7      	bcc.n	84e7c <UOTGHS_Handler+0x6ec>
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   84e8c:	2e40      	cmp	r6, #64	; 0x40
	udd_ctrl_payload_buf_cnt += nb_data;
   84e8e:	f8a7 c000 	strh.w	ip, [r7]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   84e92:	d05f      	beq.n	84f54 <UOTGHS_Handler+0x7c4>
		if (NULL != udd_g_ctrlreq.over_under_run) {
   84e94:	6963      	ldr	r3, [r4, #20]
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   84e96:	f8a4 c00c 	strh.w	ip, [r4, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   84e9a:	2b00      	cmp	r3, #0
   84e9c:	d03a      	beq.n	84f14 <UOTGHS_Handler+0x784>
			if (!udd_g_ctrlreq.over_under_run()) {
   84e9e:	4798      	blx	r3
   84ea0:	2800      	cmp	r0, #0
   84ea2:	d137      	bne.n	84f14 <UOTGHS_Handler+0x784>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84ea4:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   84ea6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
			udd_ack_out_received(0);
   84eaa:	2202      	movs	r2, #2
	udd_enable_stall_handshake(0);
   84eac:	4b66      	ldr	r3, [pc, #408]	; (85048 <UOTGHS_Handler+0x8b8>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84eae:	7028      	strb	r0, [r5, #0]
	udd_enable_stall_handshake(0);
   84eb0:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
			udd_ack_out_received(0);
   84eb4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
			return;
   84eb8:	e533      	b.n	84922 <UOTGHS_Handler+0x192>
			udd_detach();
   84eba:	4b6a      	ldr	r3, [pc, #424]	; (85064 <UOTGHS_Handler+0x8d4>)
}
   84ebc:	b003      	add	sp, #12
   84ebe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			udd_detach();
   84ec2:	4718      	bx	r3
			if (udd_endpoint_dma_get_status(ep)
   84ec4:	4a68      	ldr	r2, [pc, #416]	; (85068 <UOTGHS_Handler+0x8d8>)
   84ec6:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   84eca:	68ca      	ldr	r2, [r1, #12]
   84ecc:	07d4      	lsls	r4, r2, #31
   84ece:	f53f ad28 	bmi.w	84922 <UOTGHS_Handler+0x192>
			udd_disable_endpoint_dma_interrupt(ep);
   84ed2:	f8c8 c014 	str.w	ip, [r8, #20]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   84ed6:	68ca      	ldr	r2, [r1, #12]
			if (nb_remaining) {
   84ed8:	0c12      	lsrs	r2, r2, #16
   84eda:	d007      	beq.n	84eec <UOTGHS_Handler+0x75c>
				ptr_job->buf_cnt -= nb_remaining;
   84edc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   84ee0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   84ee4:	68eb      	ldr	r3, [r5, #12]
   84ee6:	1a9a      	subs	r2, r3, r2
				ptr_job->buf_size = ptr_job->buf_cnt;
   84ee8:	e9c5 2202 	strd	r2, r2, [r5, #8]
			udd_ep_trans_done(ep);
   84eec:	4b5f      	ldr	r3, [pc, #380]	; (8506c <UOTGHS_Handler+0x8dc>)
   84eee:	e4fc      	b.n	848ea <UOTGHS_Handler+0x15a>
	if (udd_g_ctrlreq.callback) {
   84ef0:	4c57      	ldr	r4, [pc, #348]	; (85050 <UOTGHS_Handler+0x8c0>)
   84ef2:	6923      	ldr	r3, [r4, #16]
   84ef4:	2b00      	cmp	r3, #0
   84ef6:	f43f aeb1 	beq.w	84c5c <UOTGHS_Handler+0x4cc>
		udd_g_ctrlreq.callback();
   84efa:	4798      	blx	r3
   84efc:	e6ae      	b.n	84c5c <UOTGHS_Handler+0x4cc>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84efe:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   84f00:	f44f 2100 	mov.w	r1, #524288	; 0x80000
		udd_ack_setup_received(0);
   84f04:	2204      	movs	r2, #4
	udd_enable_stall_handshake(0);
   84f06:	4b50      	ldr	r3, [pc, #320]	; (85048 <UOTGHS_Handler+0x8b8>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84f08:	7028      	strb	r0, [r5, #0]
	udd_enable_stall_handshake(0);
   84f0a:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
		udd_ack_setup_received(0);
   84f0e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
		return;
   84f12:	e506      	b.n	84922 <UOTGHS_Handler+0x192>
		udd_ack_out_received(0);
   84f14:	2102      	movs	r1, #2
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   84f16:	2203      	movs	r2, #3
		udd_ack_out_received(0);
   84f18:	4b4b      	ldr	r3, [pc, #300]	; (85048 <UOTGHS_Handler+0x8b8>)
   84f1a:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   84f1e:	702a      	strb	r2, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84f20:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84f24:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84f26:	f3bf 8f5f 	dmb	sy
	udd_ack_in_send(0);
   84f2a:	2201      	movs	r2, #1
	udd_ack_nak_out(0);
   84f2c:	2108      	movs	r1, #8
	cpu_irq_disable();
   84f2e:	2500      	movs	r5, #0
   84f30:	4846      	ldr	r0, [pc, #280]	; (8504c <UOTGHS_Handler+0x8bc>)
   84f32:	7005      	strb	r5, [r0, #0]
	udd_ack_in_send(0);
   84f34:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	udd_enable_in_send_interrupt(0);
   84f38:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	udd_ack_nak_out(0);
   84f3c:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	udd_enable_nak_out_interrupt(0);
   84f40:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   84f44:	2c00      	cmp	r4, #0
   84f46:	f47f acec 	bne.w	84922 <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   84f4a:	7002      	strb	r2, [r0, #0]
   84f4c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84f50:	b662      	cpsie	i
   84f52:	e4e6      	b.n	84922 <UOTGHS_Handler+0x192>
					(udd_ctrl_prev_payload_buf_cnt +
   84f54:	4e46      	ldr	r6, [pc, #280]	; (85070 <UOTGHS_Handler+0x8e0>)
			|| (udd_g_ctrlreq.req.wLength <=
   84f56:	88e2      	ldrh	r2, [r4, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   84f58:	8833      	ldrh	r3, [r6, #0]
   84f5a:	4463      	add	r3, ip
			|| (udd_g_ctrlreq.req.wLength <=
   84f5c:	429a      	cmp	r2, r3
   84f5e:	dd99      	ble.n	84e94 <UOTGHS_Handler+0x704>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   84f60:	89a3      	ldrh	r3, [r4, #12]
   84f62:	4563      	cmp	r3, ip
   84f64:	f000 80e5 	beq.w	85132 <UOTGHS_Handler+0x9a2>
	udd_ack_out_received(0);
   84f68:	2102      	movs	r1, #2
	udd_ack_nak_in(0);
   84f6a:	2210      	movs	r2, #16
	udd_ack_out_received(0);
   84f6c:	4b36      	ldr	r3, [pc, #216]	; (85048 <UOTGHS_Handler+0x8b8>)
   84f6e:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	udd_ack_nak_in(0);
   84f72:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84f76:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84f7a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84f7c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84f80:	2400      	movs	r4, #0
   84f82:	4932      	ldr	r1, [pc, #200]	; (8504c <UOTGHS_Handler+0x8bc>)
   84f84:	700c      	strb	r4, [r1, #0]
	udd_enable_nak_in_interrupt(0);
   84f86:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   84f8a:	2800      	cmp	r0, #0
   84f8c:	f47f acc9 	bne.w	84922 <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   84f90:	2301      	movs	r3, #1
   84f92:	700b      	strb	r3, [r1, #0]
   84f94:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84f98:	b662      	cpsie	i
   84f9a:	e4c2      	b.n	84922 <UOTGHS_Handler+0x192>
				udd_disable_in_send_interrupt(ep);
   84f9c:	2501      	movs	r5, #1
				udd_ack_fifocon(ep);
   84f9e:	f44f 4680 	mov.w	r6, #16384	; 0x4000
				udd_disable_in_send_interrupt(ep);
   84fa2:	4b34      	ldr	r3, [pc, #208]	; (85074 <UOTGHS_Handler+0x8e4>)
				udd_ep_finish_job(ptr_job, false, ep);
   84fa4:	4602      	mov	r2, r0
				udd_ack_in_send(ep);
   84fa6:	4f34      	ldr	r7, [pc, #208]	; (85078 <UOTGHS_Handler+0x8e8>)
				udd_ep_finish_job(ptr_job, false, ep);
   84fa8:	4620      	mov	r0, r4
   84faa:	4c34      	ldr	r4, [pc, #208]	; (8507c <UOTGHS_Handler+0x8ec>)
				udd_disable_in_send_interrupt(ep);
   84fac:	f84e 5003 	str.w	r5, [lr, r3]
				udd_ep_finish_job(ptr_job, false, ep);
   84fb0:	2100      	movs	r1, #0
				udd_ack_in_send(ep);
   84fb2:	f84e 5007 	str.w	r5, [lr, r7]
				udd_ack_fifocon(ep);
   84fb6:	f84e 6003 	str.w	r6, [lr, r3]
		udd_ep_finish_job(ptr_job, false, ep);
   84fba:	4623      	mov	r3, r4
   84fbc:	e638      	b.n	84c30 <UOTGHS_Handler+0x4a0>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   84fbe:	f44f 5280 	mov.w	r2, #4096	; 0x1000

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
				udd_disable_endpoint_bank_autoswitch(ep);
				udd_enable_stall_handshake(ep);
   84fc2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
				udd_reset_data_toggle(ep);
   84fc6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
				ptr_job->stall_requested = false;
   84fca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   84fce:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
				udd_disable_bank_interrupt(ep);
   84fd2:	4b28      	ldr	r3, [pc, #160]	; (85074 <UOTGHS_Handler+0x8e4>)
   84fd4:	f84e 2003 	str.w	r2, [lr, r3]
				udd_disable_endpoint_interrupt(ep);
   84fd8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
   84fdc:	f8c3 c014 	str.w	ip, [r3, #20]
				ptr_job->stall_requested = false;
   84fe0:	7d2b      	ldrb	r3, [r5, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   84fe2:	4a27      	ldr	r2, [pc, #156]	; (85080 <UOTGHS_Handler+0x8f0>)
				ptr_job->stall_requested = false;
   84fe4:	f36b 0382 	bfi	r3, fp, #2, #1
   84fe8:	752b      	strb	r3, [r5, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   84fea:	f85e 3002 	ldr.w	r3, [lr, r2]
   84fee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   84ff2:	f84e 3002 	str.w	r3, [lr, r2]
				udd_enable_stall_handshake(ep);
   84ff6:	4b23      	ldr	r3, [pc, #140]	; (85084 <UOTGHS_Handler+0x8f4>)
   84ff8:	f84e 0003 	str.w	r0, [lr, r3]
				udd_reset_data_toggle(ep);
   84ffc:	f84e 1003 	str.w	r1, [lr, r3]
				return true;
   85000:	e48f      	b.n	84922 <UOTGHS_Handler+0x192>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85002:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85006:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85008:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8500c:	4c0f      	ldr	r4, [pc, #60]	; (8504c <UOTGHS_Handler+0x8bc>)
	++sleepmgr_locks[mode];
   8500e:	481e      	ldr	r0, [pc, #120]	; (85088 <UOTGHS_Handler+0x8f8>)
   85010:	7022      	strb	r2, [r4, #0]
   85012:	7882      	ldrb	r2, [r0, #2]
   85014:	440a      	add	r2, r1
   85016:	7082      	strb	r2, [r0, #2]
	if (cpu_irq_is_enabled_flags(flags))
   85018:	2d00      	cmp	r5, #0
   8501a:	f47f ad1b 	bne.w	84a54 <UOTGHS_Handler+0x2c4>
		cpu_irq_enable();
   8501e:	7021      	strb	r1, [r4, #0]
   85020:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85024:	b662      	cpsie	i
}
   85026:	e515      	b.n	84a54 <UOTGHS_Handler+0x2c4>
		udd_ctrl_prev_payload_buf_cnt = 0;
   85028:	2300      	movs	r3, #0
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   8502a:	2102      	movs	r1, #2
		udd_ctrl_prev_payload_buf_cnt = 0;
   8502c:	4c10      	ldr	r4, [pc, #64]	; (85070 <UOTGHS_Handler+0x8e0>)
		udd_ctrl_payload_buf_cnt = 0;
   8502e:	480b      	ldr	r0, [pc, #44]	; (8505c <UOTGHS_Handler+0x8cc>)
		udd_ctrl_in_sent(); // Send first data transfer
   85030:	4a09      	ldr	r2, [pc, #36]	; (85058 <UOTGHS_Handler+0x8c8>)
		udd_ctrl_prev_payload_buf_cnt = 0;
   85032:	8023      	strh	r3, [r4, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85034:	8003      	strh	r3, [r0, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   85036:	7029      	strb	r1, [r5, #0]
}
   85038:	b003      	add	sp, #12
   8503a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udd_ctrl_in_sent(); // Send first data transfer
   8503e:	4710      	bx	r2
   85040:	400ac104 	.word	0x400ac104
   85044:	00081145 	.word	0x00081145
   85048:	400ac000 	.word	0x400ac000
   8504c:	20070b04 	.word	0x20070b04
   85050:	20072288 	.word	0x20072288
   85054:	200721c4 	.word	0x200721c4
   85058:	00083cfd 	.word	0x00083cfd
   8505c:	200721c0 	.word	0x200721c0
   85060:	20180000 	.word	0x20180000
   85064:	000840a9 	.word	0x000840a9
   85068:	400ac300 	.word	0x400ac300
   8506c:	00083b55 	.word	0x00083b55
   85070:	200721c2 	.word	0x200721c2
   85074:	400ac220 	.word	0x400ac220
   85078:	400ac160 	.word	0x400ac160
   8507c:	00083b19 	.word	0x00083b19
   85080:	400ac100 	.word	0x400ac100
   85084:	400ac1f0 	.word	0x400ac1f0
   85088:	20073304 	.word	0x20073304
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8508c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85090:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85092:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85096:	4854      	ldr	r0, [pc, #336]	; (851e8 <UOTGHS_Handler+0xa58>)
	--sleepmgr_locks[mode];
   85098:	4954      	ldr	r1, [pc, #336]	; (851ec <UOTGHS_Handler+0xa5c>)
   8509a:	7002      	strb	r2, [r0, #0]
   8509c:	788a      	ldrb	r2, [r1, #2]
   8509e:	3a01      	subs	r2, #1
   850a0:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   850a2:	2d00      	cmp	r5, #0
   850a4:	f47f acb0 	bne.w	84a08 <UOTGHS_Handler+0x278>
		cpu_irq_enable();
   850a8:	7004      	strb	r4, [r0, #0]
   850aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   850ae:	b662      	cpsie	i
}
   850b0:	e4aa      	b.n	84a08 <UOTGHS_Handler+0x278>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   850b2:	2403      	movs	r4, #3
   850b4:	7004      	strb	r4, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   850b6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   850ba:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   850bc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   850c0:	4849      	ldr	r0, [pc, #292]	; (851e8 <UOTGHS_Handler+0xa58>)
   850c2:	7003      	strb	r3, [r0, #0]
	udd_ack_nak_out(0);
   850c4:	2308      	movs	r3, #8
	udd_ack_in_send(0);
   850c6:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
	udd_enable_in_send_interrupt(0);
   850ca:	f8c2 11f0 	str.w	r1, [r2, #496]	; 0x1f0
	udd_ack_nak_out(0);
   850ce:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	udd_enable_nak_out_interrupt(0);
   850d2:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   850d6:	2c00      	cmp	r4, #0
   850d8:	f47f ac23 	bne.w	84922 <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   850dc:	7001      	strb	r1, [r0, #0]
   850de:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   850e2:	b662      	cpsie	i
   850e4:	e41d      	b.n	84922 <UOTGHS_Handler+0x192>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   850e6:	2103      	movs	r1, #3
   850e8:	7029      	strb	r1, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   850ea:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   850ee:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   850f0:	f3bf 8f5f 	dmb	sy
	udd_ack_in_send(0);
   850f4:	2101      	movs	r1, #1
	udd_ack_nak_out(0);
   850f6:	2008      	movs	r0, #8
	cpu_irq_disable();
   850f8:	4c3b      	ldr	r4, [pc, #236]	; (851e8 <UOTGHS_Handler+0xa58>)
   850fa:	7022      	strb	r2, [r4, #0]
	udd_ack_in_send(0);
   850fc:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	udd_enable_in_send_interrupt(0);
   85100:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
	udd_ack_nak_out(0);
   85104:	f8c3 0160 	str.w	r0, [r3, #352]	; 0x160
	udd_enable_nak_out_interrupt(0);
   85108:	f8c3 01f0 	str.w	r0, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   8510c:	2d00      	cmp	r5, #0
   8510e:	f47f ac08 	bne.w	84922 <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   85112:	7021      	strb	r1, [r4, #0]
   85114:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85118:	b662      	cpsie	i
   8511a:	e402      	b.n	84922 <UOTGHS_Handler+0x192>
	udd_ctrl_payload_buf_cnt += nb_data;
   8511c:	f8a7 c000 	strh.w	ip, [r7]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   85120:	e6b8      	b.n	84e94 <UOTGHS_Handler+0x704>
	if (nb_data > 0) {
   85122:	f1ba 0f00 	cmp.w	sl, #0
   85126:	d013      	beq.n	85150 <UOTGHS_Handler+0x9c0>
		if (nb_data >= nb_remain) {
   85128:	45d3      	cmp	fp, sl
   8512a:	d84d      	bhi.n	851c8 <UOTGHS_Handler+0xa38>
		b_short = true;
   8512c:	f04f 0801 	mov.w	r8, #1
   85130:	e541      	b.n	84bb6 <UOTGHS_Handler+0x426>
		if (!udd_g_ctrlreq.over_under_run) {
   85132:	6963      	ldr	r3, [r4, #20]
   85134:	2b00      	cmp	r3, #0
   85136:	f43f aeb5 	beq.w	84ea4 <UOTGHS_Handler+0x714>
		if (!udd_g_ctrlreq.over_under_run()) {
   8513a:	4798      	blx	r3
   8513c:	2800      	cmp	r0, #0
   8513e:	f43f aeb1 	beq.w	84ea4 <UOTGHS_Handler+0x714>
		udd_ctrl_payload_buf_cnt = 0;
   85142:	2200      	movs	r2, #0
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85144:	8833      	ldrh	r3, [r6, #0]
   85146:	8839      	ldrh	r1, [r7, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85148:	803a      	strh	r2, [r7, #0]
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8514a:	440b      	add	r3, r1
   8514c:	8033      	strh	r3, [r6, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8514e:	e70b      	b.n	84f68 <UOTGHS_Handler+0x7d8>
	udd_ack_fifocon(ep);
   85150:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   85154:	4a26      	ldr	r2, [pc, #152]	; (851f0 <UOTGHS_Handler+0xa60>)
   85156:	f84e 1002 	str.w	r1, [lr, r2]
   8515a:	4496      	add	lr, r2
   8515c:	e559      	b.n	84c12 <UOTGHS_Handler+0x482>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8515e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85162:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85164:	f3bf 8f5f 	dmb	sy
		udd_disable_in_send_interrupt(ep);
   85168:	2601      	movs	r6, #1
	cpu_irq_disable();
   8516a:	491f      	ldr	r1, [pc, #124]	; (851e8 <UOTGHS_Handler+0xa58>)
   8516c:	700a      	strb	r2, [r1, #0]
   8516e:	4a20      	ldr	r2, [pc, #128]	; (851f0 <UOTGHS_Handler+0xa60>)
   85170:	f84e 6002 	str.w	r6, [lr, r2]
		udd_disable_endpoint_interrupt(ep);
   85174:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
   85178:	f8c2 c014 	str.w	ip, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
   8517c:	b91f      	cbnz	r7, 85186 <UOTGHS_Handler+0x9f6>
		cpu_irq_enable();
   8517e:	700e      	strb	r6, [r1, #0]
   85180:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85184:	b662      	cpsie	i
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   85186:	2618      	movs	r6, #24
   85188:	fb06 5303 	mla	r3, r6, r3, r5
		udd_ep_finish_job(ptr_job, false, ep);
   8518c:	4602      	mov	r2, r0
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   8518e:	68dd      	ldr	r5, [r3, #12]
		udd_ep_finish_job(ptr_job, false, ep);
   85190:	4620      	mov	r0, r4
   85192:	4c18      	ldr	r4, [pc, #96]	; (851f4 <UOTGHS_Handler+0xa64>)
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   85194:	609d      	str	r5, [r3, #8]
		udd_ep_finish_job(ptr_job, false, ep);
   85196:	2100      	movs	r1, #0
   85198:	4623      	mov	r3, r4
   8519a:	e549      	b.n	84c30 <UOTGHS_Handler+0x4a0>
		udd_ack_fifocon(ep);
   8519c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   851a0:	4a13      	ldr	r2, [pc, #76]	; (851f0 <UOTGHS_Handler+0xa60>)
   851a2:	f84e 1002 	str.w	r1, [lr, r2]
		if (nb_data < pkt_size) {
   851a6:	e403      	b.n	849b0 <UOTGHS_Handler+0x220>
		ptr_job->buf_cnt += nb_data;
   851a8:	f04f 0b18 	mov.w	fp, #24
	bool b_full = false, b_short = false;
   851ac:	f04f 0800 	mov.w	r8, #0
		ptr_job->buf_cnt += nb_data;
   851b0:	fb0b 5b03 	mla	fp, fp, r3, r5
   851b4:	f8db 200c 	ldr.w	r2, [fp, #12]
		ptr_job->buf_load = nb_data;
   851b8:	f8cb a010 	str.w	sl, [fp, #16]
		ptr_job->buf_cnt += nb_data;
   851bc:	4452      	add	r2, sl
   851be:	f8cb 200c 	str.w	r2, [fp, #12]
	bool b_full = false, b_short = false;
   851c2:	f8cd 8004 	str.w	r8, [sp, #4]
   851c6:	e508      	b.n	84bda <UOTGHS_Handler+0x44a>
		ptr_job->buf_cnt += nb_data;
   851c8:	f04f 0b18 	mov.w	fp, #24
	bool b_full = false, b_short = false;
   851cc:	2200      	movs	r2, #0
		ptr_job->buf_cnt += nb_data;
   851ce:	fb0b 5b03 	mla	fp, fp, r3, r5
	bool b_full = false, b_short = false;
   851d2:	9201      	str	r2, [sp, #4]
		ptr_job->buf_cnt += nb_data;
   851d4:	f8db 200c 	ldr.w	r2, [fp, #12]
		b_short = true;
   851d8:	f04f 0801 	mov.w	r8, #1
		ptr_job->buf_cnt += nb_data;
   851dc:	4452      	add	r2, sl
		ptr_job->buf_load = nb_data;
   851de:	f8cb a010 	str.w	sl, [fp, #16]
		ptr_job->buf_cnt += nb_data;
   851e2:	f8cb 200c 	str.w	r2, [fp, #12]
		for (i = 0; i < nb_data; i++) {
   851e6:	e4f8      	b.n	84bda <UOTGHS_Handler+0x44a>
   851e8:	20070b04 	.word	0x20070b04
   851ec:	20073304 	.word	0x20073304
   851f0:	400ac220 	.word	0x400ac220
   851f4:	00083b19 	.word	0x00083b19

000851f8 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   851f8:	4a05      	ldr	r2, [pc, #20]	; (85210 <udd_test_mode_j+0x18>)
   851fa:	6813      	ldr	r3, [r2, #0]
   851fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   85200:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85204:	6013      	str	r3, [r2, #0]
	udd_enable_hs_test_mode_j();
   85206:	6813      	ldr	r3, [r2, #0]
   85208:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8520c:	6013      	str	r3, [r2, #0]
}
   8520e:	4770      	bx	lr
   85210:	400ac000 	.word	0x400ac000

00085214 <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   85214:	4a05      	ldr	r2, [pc, #20]	; (8522c <udd_test_mode_k+0x18>)
   85216:	6813      	ldr	r3, [r2, #0]
   85218:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   8521c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85220:	6013      	str	r3, [r2, #0]
	udd_enable_hs_test_mode_k();
   85222:	6813      	ldr	r3, [r2, #0]
   85224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   85228:	6013      	str	r3, [r2, #0]
}
   8522a:	4770      	bx	lr
   8522c:	400ac000 	.word	0x400ac000

00085230 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   85230:	4a03      	ldr	r2, [pc, #12]	; (85240 <udd_test_mode_se0_nak+0x10>)
   85232:	6813      	ldr	r3, [r2, #0]
   85234:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   85238:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8523c:	6013      	str	r3, [r2, #0]
}
   8523e:	4770      	bx	lr
   85240:	400ac000 	.word	0x400ac000

00085244 <udd_test_mode_packet>:
{
   85244:	b410      	push	{r4}
   85246:	b08f      	sub	sp, #60	; 0x3c
	const uint8_t test_packet[] = {
   85248:	46ec      	mov	ip, sp
   8524a:	4c25      	ldr	r4, [pc, #148]	; (852e0 <udd_test_mode_packet+0x9c>)
   8524c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   8524e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   85252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   85254:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   85258:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   8525a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   8525e:	e894 0003 	ldmia.w	r4, {r0, r1}
	ptr_src = test_packet;
   85262:	466b      	mov	r3, sp
	udd_disable_endpoint(0);
   85264:	4a1f      	ldr	r2, [pc, #124]	; (852e4 <udd_test_mode_packet+0xa0>)
	const uint8_t test_packet[] = {
   85266:	f84c 0b04 	str.w	r0, [ip], #4
   8526a:	f88c 1000 	strb.w	r1, [ip]
	udd_disable_endpoint(0);
   8526e:	69d1      	ldr	r1, [r2, #28]
   85270:	f1c3 5000 	rsb	r0, r3, #536870912	; 0x20000000
   85274:	f021 0101 	bic.w	r1, r1, #1
   85278:	61d1      	str	r1, [r2, #28]
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
   8527a:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   8527e:	f10d 0c35 	add.w	ip, sp, #53	; 0x35
   85282:	f421 51cb 	bic.w	r1, r1, #6496	; 0x1960
   85286:	f021 011c 	bic.w	r1, r1, #28
   8528a:	f441 5189 	orr.w	r1, r1, #4384	; 0x1120
   8528e:	f041 0110 	orr.w	r1, r1, #16
   85292:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	udd_allocate_memory(0);
   85296:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   8529a:	f500 10c0 	add.w	r0, r0, #1572864	; 0x180000
   8529e:	f041 0102 	orr.w	r1, r1, #2
   852a2:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	udd_enable_endpoint(0);
   852a6:	69d1      	ldr	r1, [r2, #28]
   852a8:	f041 0101 	orr.w	r1, r1, #1
   852ac:	61d1      	str	r1, [r2, #28]
	udd_enable_hs_test_mode();
   852ae:	6811      	ldr	r1, [r2, #0]
   852b0:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
   852b4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   852b8:	6011      	str	r1, [r2, #0]
	udd_enable_hs_test_mode_packet();
   852ba:	6811      	ldr	r1, [r2, #0]
   852bc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   852c0:	6011      	str	r1, [r2, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   852c2:	181a      	adds	r2, r3, r0
		*ptr_dest++ = *ptr_src++;
   852c4:	f813 1b01 	ldrb.w	r1, [r3], #1
	for (i = 0; i < sizeof(test_packet); i++) {
   852c8:	4563      	cmp	r3, ip
		*ptr_dest++ = *ptr_src++;
   852ca:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   852cc:	d1f9      	bne.n	852c2 <udd_test_mode_packet+0x7e>
	udd_ack_fifocon(0);
   852ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   852d2:	4b04      	ldr	r3, [pc, #16]	; (852e4 <udd_test_mode_packet+0xa0>)
   852d4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
}
   852d8:	b00f      	add	sp, #60	; 0x3c
   852da:	bc10      	pop	{r4}
   852dc:	4770      	bx	lr
   852de:	bf00      	nop
   852e0:	0008c954 	.word	0x0008c954
   852e4:	400ac000 	.word	0x400ac000

000852e8 <board_init>:
#include "ioport.h"

void board_init(void)
{

}
   852e8:	4770      	bx	lr
   852ea:	bf00      	nop

000852ec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   852ec:	4b0c      	ldr	r3, [pc, #48]	; (85320 <cpu_irq_enter_critical+0x34>)
   852ee:	681a      	ldr	r2, [r3, #0]
   852f0:	b922      	cbnz	r2, 852fc <cpu_irq_enter_critical+0x10>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   852f2:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
   852f6:	b129      	cbz	r1, 85304 <cpu_irq_enter_critical+0x18>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   852f8:	490a      	ldr	r1, [pc, #40]	; (85324 <cpu_irq_enter_critical+0x38>)
   852fa:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   852fc:	681a      	ldr	r2, [r3, #0]
   852fe:	3201      	adds	r2, #1
   85300:	601a      	str	r2, [r3, #0]
   85302:	4770      	bx	lr
{
   85304:	b410      	push	{r4}
  __ASM volatile ("cpsid i" : : : "memory");
   85306:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85308:	f3bf 8f5f 	dmb	sy
			cpu_irq_prev_interrupt_state = true;
   8530c:	2001      	movs	r0, #1
			cpu_irq_disable();
   8530e:	4c06      	ldr	r4, [pc, #24]	; (85328 <cpu_irq_enter_critical+0x3c>)
			cpu_irq_prev_interrupt_state = true;
   85310:	4a04      	ldr	r2, [pc, #16]	; (85324 <cpu_irq_enter_critical+0x38>)
			cpu_irq_disable();
   85312:	7021      	strb	r1, [r4, #0]
			cpu_irq_prev_interrupt_state = true;
   85314:	7010      	strb	r0, [r2, #0]
	cpu_irq_critical_section_counter++;
   85316:	681a      	ldr	r2, [r3, #0]
   85318:	3201      	adds	r2, #1
   8531a:	601a      	str	r2, [r3, #0]
}
   8531c:	bc10      	pop	{r4}
   8531e:	4770      	bx	lr
   85320:	200722a0 	.word	0x200722a0
   85324:	200722a4 	.word	0x200722a4
   85328:	20070b04 	.word	0x20070b04

0008532c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   8532c:	4b07      	ldr	r3, [pc, #28]	; (8534c <cpu_irq_leave_critical+0x20>)
   8532e:	681a      	ldr	r2, [r3, #0]
   85330:	3a01      	subs	r2, #1
   85332:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   85334:	681b      	ldr	r3, [r3, #0]
   85336:	b943      	cbnz	r3, 8534a <cpu_irq_leave_critical+0x1e>
   85338:	4b05      	ldr	r3, [pc, #20]	; (85350 <cpu_irq_leave_critical+0x24>)
   8533a:	781b      	ldrb	r3, [r3, #0]
   8533c:	b12b      	cbz	r3, 8534a <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   8533e:	2201      	movs	r2, #1
   85340:	4b04      	ldr	r3, [pc, #16]	; (85354 <cpu_irq_leave_critical+0x28>)
   85342:	701a      	strb	r2, [r3, #0]
   85344:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85348:	b662      	cpsie	i
	}
}
   8534a:	4770      	bx	lr
   8534c:	200722a0 	.word	0x200722a0
   85350:	200722a4 	.word	0x200722a4
   85354:	20070b04 	.word	0x20070b04

00085358 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   85358:	4a02      	ldr	r2, [pc, #8]	; (85364 <udi_cdc_comm_disable+0xc>)
   8535a:	7813      	ldrb	r3, [r2, #0]
   8535c:	3b01      	subs	r3, #1
   8535e:	b2db      	uxtb	r3, r3
   85360:	7013      	strb	r3, [r2, #0]
}
   85362:	4770      	bx	lr
   85364:	200722ba 	.word	0x200722ba

00085368 <udi_cdc_comm_setup>:

static uint8_t udi_cdc_setup_to_port(void)
{
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   85368:	4b20      	ldr	r3, [pc, #128]	; (853ec <udi_cdc_comm_setup+0x84>)
   8536a:	791a      	ldrb	r2, [r3, #4]
	if (Udd_setup_is_in()) {
   8536c:	f993 0000 	ldrsb.w	r0, [r3]
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   85370:	f1a2 0103 	sub.w	r1, r2, #3
   85374:	fab1 f181 	clz	r1, r1
	if (Udd_setup_is_in()) {
   85378:	781a      	ldrb	r2, [r3, #0]
   8537a:	2800      	cmp	r0, #0
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   8537c:	ea4f 1151 	mov.w	r1, r1, lsr #5
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   85380:	f002 0260 	and.w	r2, r2, #96	; 0x60
	if (Udd_setup_is_in()) {
   85384:	db03      	blt.n	8538e <udi_cdc_comm_setup+0x26>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   85386:	2a20      	cmp	r2, #32
   85388:	d014      	beq.n	853b4 <udi_cdc_comm_setup+0x4c>
	return false;  // request Not supported
   8538a:	2000      	movs	r0, #0
}
   8538c:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8538e:	2a20      	cmp	r2, #32
   85390:	d1fb      	bne.n	8538a <udi_cdc_comm_setup+0x22>
			switch (udd_g_ctrlreq.req.bRequest) {
   85392:	785a      	ldrb	r2, [r3, #1]
   85394:	2a21      	cmp	r2, #33	; 0x21
   85396:	d1f8      	bne.n	8538a <udi_cdc_comm_setup+0x22>
				if (sizeof(usb_cdc_line_coding_t) !=
   85398:	f8b3 c006 	ldrh.w	ip, [r3, #6]
   8539c:	f1bc 0f07 	cmp.w	ip, #7
   853a0:	d1f3      	bne.n	8538a <udi_cdc_comm_setup+0x22>
						(uint8_t *) &
   853a2:	4813      	ldr	r0, [pc, #76]	; (853f0 <udi_cdc_comm_setup+0x88>)
   853a4:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
   853a8:	4402      	add	r2, r0
				udd_g_ctrlreq.payload =
   853aa:	609a      	str	r2, [r3, #8]
				return true;
   853ac:	2001      	movs	r0, #1
				udd_g_ctrlreq.payload_size =
   853ae:	f8a3 c00c 	strh.w	ip, [r3, #12]
				return true;
   853b2:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   853b4:	7858      	ldrb	r0, [r3, #1]
   853b6:	2820      	cmp	r0, #32
   853b8:	d005      	beq.n	853c6 <udi_cdc_comm_setup+0x5e>
   853ba:	f1a0 0022 	sub.w	r0, r0, #34	; 0x22
   853be:	fab0 f080 	clz	r0, r0
   853c2:	0940      	lsrs	r0, r0, #5
   853c4:	4770      	bx	lr
				if (sizeof(usb_cdc_line_coding_t) !=
   853c6:	f8b3 c006 	ldrh.w	ip, [r3, #6]
   853ca:	f1bc 0f07 	cmp.w	ip, #7
   853ce:	d1dc      	bne.n	8538a <udi_cdc_comm_setup+0x22>
						(uint8_t *) &
   853d0:	4807      	ldr	r0, [pc, #28]	; (853f0 <udi_cdc_comm_setup+0x88>)
{
   853d2:	b410      	push	{r4}
						(uint8_t *) &
   853d4:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
				udd_g_ctrlreq.callback =
   853d8:	4c06      	ldr	r4, [pc, #24]	; (853f4 <udi_cdc_comm_setup+0x8c>)
						(uint8_t *) &
   853da:	4402      	add	r2, r0
				udd_g_ctrlreq.callback =
   853dc:	611c      	str	r4, [r3, #16]
				udd_g_ctrlreq.payload =
   853de:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   853e0:	f8a3 c00c 	strh.w	ip, [r3, #12]
				return true;
   853e4:	2001      	movs	r0, #1
}
   853e6:	bc10      	pop	{r4}
   853e8:	4770      	bx	lr
   853ea:	bf00      	nop
   853ec:	20072288 	.word	0x20072288
   853f0:	200722ac 	.word	0x200722ac
   853f4:	00085401 	.word	0x00085401

000853f8 <udi_cdc_data_setup>:
}
   853f8:	2000      	movs	r0, #0
   853fa:	4770      	bx	lr

000853fc <udi_cdc_getsetting>:
}
   853fc:	2000      	movs	r0, #0
   853fe:	4770      	bx	lr

00085400 <udi_cdc_line_coding_received>:
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   85400:	4b06      	ldr	r3, [pc, #24]	; (8541c <udi_cdc_line_coding_received+0x1c>)
static void udi_cdc_line_coding_received(void)
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   85402:	4907      	ldr	r1, [pc, #28]	; (85420 <udi_cdc_line_coding_received+0x20>)
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   85404:	7918      	ldrb	r0, [r3, #4]
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   85406:	4b07      	ldr	r3, [pc, #28]	; (85424 <udi_cdc_line_coding_received+0x24>)
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   85408:	f1a0 0003 	sub.w	r0, r0, #3
   8540c:	fab0 f080 	clz	r0, r0
   85410:	0940      	lsrs	r0, r0, #5
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   85412:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   85416:	4411      	add	r1, r2
   85418:	4718      	bx	r3
   8541a:	bf00      	nop
   8541c:	20072288 	.word	0x20072288
   85420:	200722ac 	.word	0x200722ac
   85424:	00082179 	.word	0x00082179

00085428 <udi_cdc_comm_enable>:
{
   85428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (udi_cdc_nb_comm_enabled > UDI_CDC_PORT_NB) {
   8542a:	4d1e      	ldr	r5, [pc, #120]	; (854a4 <udi_cdc_comm_enable+0x7c>)
	udi_cdc_state[port] = CPU_TO_LE16(0);
   8542c:	2200      	movs	r2, #0
	if (udi_cdc_nb_comm_enabled > UDI_CDC_PORT_NB) {
   8542e:	782b      	ldrb	r3, [r5, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
   85430:	f242 06a1 	movw	r6, #8353	; 0x20a1
	if (udi_cdc_nb_comm_enabled > UDI_CDC_PORT_NB) {
   85434:	2b02      	cmp	r3, #2
		udi_cdc_nb_comm_enabled = 0;
   85436:	bf84      	itt	hi
   85438:	2300      	movhi	r3, #0
   8543a:	702b      	strbhi	r3, [r5, #0]
	port = udi_cdc_nb_comm_enabled;
   8543c:	782c      	ldrb	r4, [r5, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   8543e:	481a      	ldr	r0, [pc, #104]	; (854a8 <udi_cdc_comm_enable+0x80>)
	port = udi_cdc_nb_comm_enabled;
   85440:	b2e4      	uxtb	r4, r4
	switch (port) {
   85442:	2c01      	cmp	r4, #1
	udi_cdc_state[port] = CPU_TO_LE16(0);
   85444:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
	uid_cdc_state_msg[port].header.bmRequestType =
   85448:	4b18      	ldr	r3, [pc, #96]	; (854ac <udi_cdc_comm_enable+0x84>)
	switch (port) {
   8544a:	bf14      	ite	ne
   8544c:	2001      	movne	r0, #1
   8544e:	2003      	moveq	r0, #3
	uid_cdc_state_msg[port].header.bmRequestType =
   85450:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   85454:	f823 6011 	strh.w	r6, [r3, r1, lsl #1]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   85458:	f04f 0c02 	mov.w	ip, #2
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   8545c:	f04f 0e08 	mov.w	lr, #8
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   85460:	f06f 073d 	mvn.w	r7, #61	; 0x3d
   85464:	2601      	movs	r6, #1
	uid_cdc_state_msg[port].header.bmRequestType =
   85466:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   8546a:	4911      	ldr	r1, [pc, #68]	; (854b0 <udi_cdc_comm_enable+0x88>)
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   8546c:	8098      	strh	r0, [r3, #4]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   8546e:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   85472:	540a      	strb	r2, [r1, r0]
   85474:	4401      	add	r1, r0
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   85476:	805a      	strh	r2, [r3, #2]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   85478:	4620      	mov	r0, r4
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   8547a:	811a      	strh	r2, [r3, #8]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   8547c:	f8a3 c006 	strh.w	ip, [r3, #6]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   85480:	70ca      	strb	r2, [r1, #3]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   85482:	4b0c      	ldr	r3, [pc, #48]	; (854b4 <udi_cdc_comm_enable+0x8c>)
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   85484:	710a      	strb	r2, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   85486:	714a      	strb	r2, [r1, #5]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   85488:	704f      	strb	r7, [r1, #1]
   8548a:	708e      	strb	r6, [r1, #2]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   8548c:	f881 e006 	strb.w	lr, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   85490:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   85492:	4620      	mov	r0, r4
   85494:	4b08      	ldr	r3, [pc, #32]	; (854b8 <udi_cdc_comm_enable+0x90>)
   85496:	4798      	blx	r3
   85498:	b118      	cbz	r0, 854a2 <udi_cdc_comm_enable+0x7a>
	udi_cdc_nb_comm_enabled++;
   8549a:	782b      	ldrb	r3, [r5, #0]
   8549c:	4433      	add	r3, r6
   8549e:	b2db      	uxtb	r3, r3
   854a0:	702b      	strb	r3, [r5, #0]
}
   854a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   854a4:	200722ba 	.word	0x200722ba
   854a8:	20072ad0 	.word	0x20072ad0
   854ac:	200732ec 	.word	0x200732ec
   854b0:	200722ac 	.word	0x200722ac
   854b4:	00082179 	.word	0x00082179
   854b8:	0008206d 	.word	0x0008206d

000854bc <udi_cdc_data_disable>:
{
   854bc:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   854be:	4a06      	ldr	r2, [pc, #24]	; (854d8 <udi_cdc_data_disable+0x1c>)
	UDI_CDC_DISABLE_EXT(port);
   854c0:	4906      	ldr	r1, [pc, #24]	; (854dc <udi_cdc_data_disable+0x20>)
	udi_cdc_nb_data_enabled--;
   854c2:	7813      	ldrb	r3, [r2, #0]
   854c4:	3b01      	subs	r3, #1
   854c6:	b2db      	uxtb	r3, r3
   854c8:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   854ca:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   854cc:	4788      	blx	r1
	udi_cdc_data_running = false;
   854ce:	2200      	movs	r2, #0
   854d0:	4b03      	ldr	r3, [pc, #12]	; (854e0 <udi_cdc_data_disable+0x24>)
   854d2:	701a      	strb	r2, [r3, #0]
}
   854d4:	bd08      	pop	{r3, pc}
   854d6:	bf00      	nop
   854d8:	200722bb 	.word	0x200722bb
   854dc:	000820a1 	.word	0x000820a1
   854e0:	200722a8 	.word	0x200722a8

000854e4 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
   854e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   854e8:	4e4b      	ldr	r6, [pc, #300]	; (85618 <udi_cdc_tx_send+0x134>)
{
   854ea:	b085      	sub	sp, #20
	if (udi_cdc_tx_trans_ongoing[port]) {
   854ec:	5c33      	ldrb	r3, [r6, r0]
   854ee:	b113      	cbz	r3, 854f6 <udi_cdc_tx_send+0x12>
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   854f0:	b005      	add	sp, #20
   854f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (udd_is_high_speed()) {
   854f6:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8561c <udi_cdc_tx_send+0x138>
   854fa:	4604      	mov	r4, r0
   854fc:	47c8      	blx	r9
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   854fe:	f8df a120 	ldr.w	sl, [pc, #288]	; 85620 <udi_cdc_tx_send+0x13c>
   85502:	f83a 5014 	ldrh.w	r5, [sl, r4, lsl #1]
	if (udd_is_high_speed()) {
   85506:	2800      	cmp	r0, #0
   85508:	d04f      	beq.n	855aa <udi_cdc_tx_send+0xc6>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   8550a:	4b46      	ldr	r3, [pc, #280]	; (85624 <udi_cdc_tx_send+0x140>)
   8550c:	4798      	blx	r3
   8550e:	4285      	cmp	r5, r0
   85510:	d0ee      	beq.n	854f0 <udi_cdc_tx_send+0xc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85512:	f3ef 8310 	mrs	r3, PRIMASK
   85516:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
   85518:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8551a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8551e:	2300      	movs	r3, #0
   85520:	4a41      	ldr	r2, [pc, #260]	; (85628 <udi_cdc_tx_send+0x144>)
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   85522:	4942      	ldr	r1, [pc, #264]	; (8562c <udi_cdc_tx_send+0x148>)
   85524:	7013      	strb	r3, [r2, #0]
   85526:	5d0d      	ldrb	r5, [r1, r4]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   85528:	f8df b104 	ldr.w	fp, [pc, #260]	; 85630 <udi_cdc_tx_send+0x14c>
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   8552c:	b2ed      	uxtb	r5, r5
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   8552e:	eb05 0344 	add.w	r3, r5, r4, lsl #1
   85532:	f83b 3013 	ldrh.w	r3, [fp, r3, lsl #1]
   85536:	46a8      	mov	r8, r5
   85538:	0067      	lsls	r7, r4, #1
   8553a:	2b00      	cmp	r3, #0
   8553c:	d043      	beq.n	855c6 <udi_cdc_tx_send+0xe2>
   8553e:	4b3d      	ldr	r3, [pc, #244]	; (85634 <udi_cdc_tx_send+0x150>)
	sof_zlp_counter = 0;
   85540:	2000      	movs	r0, #0
   85542:	8018      	strh	r0, [r3, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
   85544:	4b3c      	ldr	r3, [pc, #240]	; (85638 <udi_cdc_tx_send+0x154>)
   85546:	5d1b      	ldrb	r3, [r3, r4]
   85548:	2b00      	cmp	r3, #0
   8554a:	d033      	beq.n	855b4 <udi_cdc_tx_send+0xd0>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   8554c:	fab5 f885 	clz	r8, r5
   85550:	ea4f 1858 	mov.w	r8, r8, lsr #5
	udi_cdc_tx_trans_ongoing[port] = true;
   85554:	2301      	movs	r3, #1
	if (cpu_irq_is_enabled_flags(flags))
   85556:	9902      	ldr	r1, [sp, #8]
   85558:	5533      	strb	r3, [r6, r4]
   8555a:	b919      	cbnz	r1, 85564 <udi_cdc_tx_send+0x80>
		cpu_irq_enable();
   8555c:	7013      	strb	r3, [r2, #0]
   8555e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85562:	b662      	cpsie	i
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   85564:	eb07 0508 	add.w	r5, r7, r8
   85568:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
   8556c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85570:	bf14      	ite	ne
   85572:	2601      	movne	r6, #1
   85574:	2600      	moveq	r6, #0
	if (b_short_packet) {
   85576:	d022      	beq.n	855be <udi_cdc_tx_send+0xda>
		if (udd_is_high_speed()) {
   85578:	47c8      	blx	r9
   8557a:	2800      	cmp	r0, #0
   8557c:	d044      	beq.n	85608 <udi_cdc_tx_send+0x124>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   8557e:	4b29      	ldr	r3, [pc, #164]	; (85624 <udi_cdc_tx_send+0x140>)
   85580:	4798      	blx	r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   85582:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   85586:	f82a 0014 	strh.w	r0, [sl, r4, lsl #1]
	udd_ep_run( ep,
   8558a:	482c      	ldr	r0, [pc, #176]	; (8563c <udi_cdc_tx_send+0x158>)
			udi_cdc_tx_buf[port][buf_sel_trans],
   8558c:	4a2c      	ldr	r2, [pc, #176]	; (85640 <udi_cdc_tx_send+0x15c>)
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
   8558e:	2c01      	cmp	r4, #1
			udi_cdc_tx_buf[port][buf_sel_trans],
   85590:	4447      	add	r7, r8
	udd_ep_run( ep,
   85592:	9000      	str	r0, [sp, #0]
   85594:	4631      	mov	r1, r6
   85596:	bf14      	ite	ne
   85598:	2083      	movne	r0, #131	; 0x83
   8559a:	2085      	moveq	r0, #133	; 0x85
   8559c:	4c29      	ldr	r4, [pc, #164]	; (85644 <udi_cdc_tx_send+0x160>)
   8559e:	eb02 2247 	add.w	r2, r2, r7, lsl #9
   855a2:	47a0      	blx	r4
}
   855a4:	b005      	add	sp, #20
   855a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   855aa:	4b27      	ldr	r3, [pc, #156]	; (85648 <udi_cdc_tx_send+0x164>)
   855ac:	4798      	blx	r3
   855ae:	4285      	cmp	r5, r0
   855b0:	d1af      	bne.n	85512 <udi_cdc_tx_send+0x2e>
   855b2:	e79d      	b.n	854f0 <udi_cdc_tx_send+0xc>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   855b4:	fab5 f585 	clz	r5, r5
   855b8:	096d      	lsrs	r5, r5, #5
   855ba:	550d      	strb	r5, [r1, r4]
   855bc:	e7ca      	b.n	85554 <udi_cdc_tx_send+0x70>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   855be:	2200      	movs	r2, #0
   855c0:	f82a 2014 	strh.w	r2, [sl, r4, lsl #1]
   855c4:	e7e1      	b.n	8558a <udi_cdc_tx_send+0xa6>
		sof_zlp_counter++;
   855c6:	4b1b      	ldr	r3, [pc, #108]	; (85634 <udi_cdc_tx_send+0x150>)
   855c8:	8818      	ldrh	r0, [r3, #0]
   855ca:	9303      	str	r3, [sp, #12]
   855cc:	3001      	adds	r0, #1
   855ce:	8018      	strh	r0, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   855d0:	47c8      	blx	r9
   855d2:	9b03      	ldr	r3, [sp, #12]
   855d4:	4a14      	ldr	r2, [pc, #80]	; (85628 <udi_cdc_tx_send+0x144>)
   855d6:	b910      	cbnz	r0, 855de <udi_cdc_tx_send+0xfa>
   855d8:	8818      	ldrh	r0, [r3, #0]
   855da:	2863      	cmp	r0, #99	; 0x63
   855dc:	d90a      	bls.n	855f4 <udi_cdc_tx_send+0x110>
   855de:	9303      	str	r3, [sp, #12]
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   855e0:	47c8      	blx	r9
   855e2:	4a11      	ldr	r2, [pc, #68]	; (85628 <udi_cdc_tx_send+0x144>)
   855e4:	4911      	ldr	r1, [pc, #68]	; (8562c <udi_cdc_tx_send+0x148>)
   855e6:	9b03      	ldr	r3, [sp, #12]
   855e8:	2800      	cmp	r0, #0
   855ea:	d0a9      	beq.n	85540 <udi_cdc_tx_send+0x5c>
   855ec:	8818      	ldrh	r0, [r3, #0]
   855ee:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   855f2:	d2a5      	bcs.n	85540 <udi_cdc_tx_send+0x5c>
	if (cpu_irq_is_enabled_flags(flags))
   855f4:	9b02      	ldr	r3, [sp, #8]
   855f6:	2b00      	cmp	r3, #0
   855f8:	f47f af7a 	bne.w	854f0 <udi_cdc_tx_send+0xc>
		cpu_irq_enable();
   855fc:	2301      	movs	r3, #1
   855fe:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   85600:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85604:	b662      	cpsie	i
}
   85606:	e773      	b.n	854f0 <udi_cdc_tx_send+0xc>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   85608:	4b0f      	ldr	r3, [pc, #60]	; (85648 <udi_cdc_tx_send+0x164>)
   8560a:	4798      	blx	r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   8560c:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   85610:	f82a 0014 	strh.w	r0, [sl, r4, lsl #1]
   85614:	e7b9      	b.n	8558a <udi_cdc_tx_send+0xa6>
   85616:	bf00      	nop
   85618:	200732e8 	.word	0x200732e8
   8561c:	00084119 	.word	0x00084119
   85620:	200732e4 	.word	0x200732e4
   85624:	00084175 	.word	0x00084175
   85628:	20070b04 	.word	0x20070b04
   8562c:	200732e0 	.word	0x200732e0
   85630:	200732d8 	.word	0x200732d8
   85634:	200722a6 	.word	0x200722a6
   85638:	20072ad4 	.word	0x20072ad4
   8563c:	0008564d 	.word	0x0008564d
   85640:	20072ad8 	.word	0x20072ad8
   85644:	000843a9 	.word	0x000843a9
   85648:	00084165 	.word	0x00084165

0008564c <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   8564c:	b100      	cbz	r0, 85650 <udi_cdc_data_sent+0x4>
   8564e:	4770      	bx	lr
   85650:	4603      	mov	r3, r0
	switch (ep) {
   85652:	f1a2 0085 	sub.w	r0, r2, #133	; 0x85
   85656:	fab0 f080 	clz	r0, r0
{
   8565a:	b470      	push	{r4, r5, r6}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   8565c:	4a09      	ldr	r2, [pc, #36]	; (85684 <udi_cdc_data_sent+0x38>)
	switch (ep) {
   8565e:	0940      	lsrs	r0, r0, #5
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   85660:	f812 c000 	ldrb.w	ip, [r2, r0]
   85664:	0042      	lsls	r2, r0, #1
   85666:	f1bc 0f00 	cmp.w	ip, #0
   8566a:	bf08      	it	eq
   8566c:	3201      	addeq	r2, #1
   8566e:	4c06      	ldr	r4, [pc, #24]	; (85688 <udi_cdc_data_sent+0x3c>)
	udi_cdc_tx_both_buf_to_send[port] = false;
   85670:	4e06      	ldr	r6, [pc, #24]	; (8568c <udi_cdc_data_sent+0x40>)
	udi_cdc_tx_trans_ongoing[port] = false;
   85672:	4d07      	ldr	r5, [pc, #28]	; (85690 <udi_cdc_data_sent+0x44>)
	udi_cdc_tx_both_buf_to_send[port] = false;
   85674:	5433      	strb	r3, [r6, r0]
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   85676:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
	udi_cdc_tx_trans_ongoing[port] = false;
   8567a:	542b      	strb	r3, [r5, r0]
	udi_cdc_tx_send(port);
   8567c:	4905      	ldr	r1, [pc, #20]	; (85694 <udi_cdc_data_sent+0x48>)
}
   8567e:	bc70      	pop	{r4, r5, r6}
	udi_cdc_tx_send(port);
   85680:	4708      	bx	r1
   85682:	bf00      	nop
   85684:	200732e0 	.word	0x200732e0
   85688:	200732d8 	.word	0x200732d8
   8568c:	20072ad4 	.word	0x20072ad4
   85690:	200732e8 	.word	0x200732e8
   85694:	000854e5 	.word	0x000854e5

00085698 <udi_cdc_data_sof_notify>:
{
   85698:	b510      	push	{r4, lr}
	udi_cdc_tx_send(port_notify);
   8569a:	4c06      	ldr	r4, [pc, #24]	; (856b4 <udi_cdc_data_sof_notify+0x1c>)
   8569c:	4b06      	ldr	r3, [pc, #24]	; (856b8 <udi_cdc_data_sof_notify+0x20>)
   8569e:	7820      	ldrb	r0, [r4, #0]
   856a0:	4798      	blx	r3
	port_notify++;
   856a2:	7823      	ldrb	r3, [r4, #0]
   856a4:	3301      	adds	r3, #1
   856a6:	b2db      	uxtb	r3, r3
	if (port_notify >= UDI_CDC_PORT_NB) {
   856a8:	2b01      	cmp	r3, #1
		port_notify = 0;
   856aa:	bf88      	it	hi
   856ac:	2300      	movhi	r3, #0
   856ae:	7023      	strb	r3, [r4, #0]
}
   856b0:	bd10      	pop	{r4, pc}
   856b2:	bf00      	nop
   856b4:	200722a5 	.word	0x200722a5
   856b8:	000854e5 	.word	0x000854e5

000856bc <udi_cdc_rx_start>:
{
   856bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   856c0:	4604      	mov	r4, r0
   856c2:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   856c4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   856c8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   856ca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   856ce:	2200      	movs	r2, #0
   856d0:	4b34      	ldr	r3, [pc, #208]	; (857a4 <udi_cdc_rx_start+0xe8>)
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   856d2:	4935      	ldr	r1, [pc, #212]	; (857a8 <udi_cdc_rx_start+0xec>)
	if (udi_cdc_rx_trans_ongoing[port] ||
   856d4:	4e35      	ldr	r6, [pc, #212]	; (857ac <udi_cdc_rx_start+0xf0>)
   856d6:	701a      	strb	r2, [r3, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   856d8:	5d0d      	ldrb	r5, [r1, r4]
	if (udi_cdc_rx_trans_ongoing[port] ||
   856da:	5d32      	ldrb	r2, [r6, r4]
   856dc:	2a00      	cmp	r2, #0
   856de:	d14f      	bne.n	85780 <udi_cdc_rx_start+0xc4>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   856e0:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 857b0 <udi_cdc_rx_start+0xf4>
   856e4:	b2ed      	uxtb	r5, r5
   856e6:	f002 08ff 	and.w	r8, r2, #255	; 0xff
   856ea:	4a32      	ldr	r2, [pc, #200]	; (857b4 <udi_cdc_rx_start+0xf8>)
   856ec:	eb05 0744 	add.w	r7, r5, r4, lsl #1
   856f0:	f832 e014 	ldrh.w	lr, [r2, r4, lsl #1]
   856f4:	f839 c017 	ldrh.w	ip, [r9, r7, lsl #1]
   856f8:	fa1f fe8e 	uxth.w	lr, lr
   856fc:	fa1f fc8c 	uxth.w	ip, ip
	if (udi_cdc_rx_trans_ongoing[port] ||
   85700:	45e6      	cmp	lr, ip
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   85702:	ea4f 0744 	mov.w	r7, r4, lsl #1
	if (udi_cdc_rx_trans_ongoing[port] ||
   85706:	d33b      	bcc.n	85780 <udi_cdc_rx_start+0xc4>
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   85708:	fab5 fc85 	clz	ip, r5
	udi_cdc_rx_trans_ongoing[port] = true;
   8570c:	f04f 0e01 	mov.w	lr, #1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   85710:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
	udi_cdc_rx_pos[port] = 0;
   85714:	f822 8014 	strh.w	r8, [r2, r4, lsl #1]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   85718:	f801 c004 	strb.w	ip, [r1, r4]
	udi_cdc_rx_trans_ongoing[port] = true;
   8571c:	f806 e004 	strb.w	lr, [r6, r4]
	if (cpu_irq_is_enabled_flags(flags))
   85720:	b920      	cbnz	r0, 8572c <udi_cdc_rx_start+0x70>
		cpu_irq_enable();
   85722:	f883 e000 	strb.w	lr, [r3]
   85726:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8572a:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8572c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85730:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85732:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85736:	2000      	movs	r0, #0
   85738:	7018      	strb	r0, [r3, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   8573a:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   8573e:	5d08      	ldrb	r0, [r1, r4]
	pos = udi_cdc_rx_pos[port];
   85740:	b291      	uxth	r1, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   85742:	183a      	adds	r2, r7, r0
   85744:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
   85748:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   8574a:	b926      	cbnz	r6, 85756 <udi_cdc_rx_start+0x9a>
		cpu_irq_enable();
   8574c:	2001      	movs	r0, #1
   8574e:	7018      	strb	r0, [r3, #0]
   85750:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85754:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   85756:	4291      	cmp	r1, r2
   85758:	d11f      	bne.n	8579a <udi_cdc_rx_start+0xde>
	return udd_ep_run(ep,
   8575a:	4817      	ldr	r0, [pc, #92]	; (857b8 <udi_cdc_rx_start+0xfc>)
			udi_cdc_rx_buf[port][buf_sel_trans],
   8575c:	4a17      	ldr	r2, [pc, #92]	; (857bc <udi_cdc_rx_start+0x100>)
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
   8575e:	2c01      	cmp	r4, #1
			udi_cdc_rx_buf[port][buf_sel_trans],
   85760:	443d      	add	r5, r7
	return udd_ep_run(ep,
   85762:	9000      	str	r0, [sp, #0]
   85764:	f44f 7300 	mov.w	r3, #512	; 0x200
   85768:	f04f 0101 	mov.w	r1, #1
   8576c:	bf14      	ite	ne
   8576e:	2004      	movne	r0, #4
   85770:	2006      	moveq	r0, #6
   85772:	4c13      	ldr	r4, [pc, #76]	; (857c0 <udi_cdc_rx_start+0x104>)
   85774:	eb02 2245 	add.w	r2, r2, r5, lsl #9
   85778:	47a0      	blx	r4
}
   8577a:	b003      	add	sp, #12
   8577c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cpu_irq_is_enabled_flags(flags))
   85780:	b938      	cbnz	r0, 85792 <udi_cdc_rx_start+0xd6>
		cpu_irq_enable();
   85782:	2201      	movs	r2, #1
   85784:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   85786:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8578a:	b662      	cpsie	i
   8578c:	b003      	add	sp, #12
   8578e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return false;
   85792:	2000      	movs	r0, #0
}
   85794:	b003      	add	sp, #12
   85796:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		UDI_CDC_RX_NOTIFY(port);
   8579a:	4620      	mov	r0, r4
   8579c:	4b09      	ldr	r3, [pc, #36]	; (857c4 <udi_cdc_rx_start+0x108>)
   8579e:	4798      	blx	r3
   857a0:	e7db      	b.n	8575a <udi_cdc_rx_start+0x9e>
   857a2:	bf00      	nop
   857a4:	20070b04 	.word	0x20070b04
   857a8:	20072ac4 	.word	0x20072ac4
   857ac:	20072acc 	.word	0x20072acc
   857b0:	20072abc 	.word	0x20072abc
   857b4:	20072ac8 	.word	0x20072ac8
   857b8:	00085869 	.word	0x00085869
   857bc:	200722bc 	.word	0x200722bc
   857c0:	000843a9 	.word	0x000843a9
   857c4:	000820dd 	.word	0x000820dd

000857c8 <udi_cdc_data_enable>:
{
   857c8:	b570      	push	{r4, r5, r6, lr}
	if (udi_cdc_nb_data_enabled > UDI_CDC_PORT_NB) {
   857ca:	4e1a      	ldr	r6, [pc, #104]	; (85834 <udi_cdc_data_enable+0x6c>)
	udi_cdc_tx_trans_ongoing[port] = false;
   857cc:	2500      	movs	r5, #0
	if (udi_cdc_nb_data_enabled > UDI_CDC_PORT_NB) {
   857ce:	7833      	ldrb	r3, [r6, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   857d0:	4919      	ldr	r1, [pc, #100]	; (85838 <udi_cdc_data_enable+0x70>)
	if (udi_cdc_nb_data_enabled > UDI_CDC_PORT_NB) {
   857d2:	2b02      	cmp	r3, #2
		udi_cdc_nb_data_enabled = 0;
   857d4:	bf84      	itt	hi
   857d6:	2300      	movhi	r3, #0
   857d8:	7033      	strbhi	r3, [r6, #0]
	port = udi_cdc_nb_data_enabled;
   857da:	7834      	ldrb	r4, [r6, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   857dc:	4b17      	ldr	r3, [pc, #92]	; (8583c <udi_cdc_data_enable+0x74>)
	udi_cdc_tx_buf_nb[port][0] = 0;
   857de:	4818      	ldr	r0, [pc, #96]	; (85840 <udi_cdc_data_enable+0x78>)
	port = udi_cdc_nb_data_enabled;
   857e0:	b2e4      	uxtb	r4, r4
	udi_cdc_tx_buf_nb[port][0] = 0;
   857e2:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
	udi_cdc_tx_buf_sel[port] = 0;
   857e6:	4a17      	ldr	r2, [pc, #92]	; (85844 <udi_cdc_data_enable+0x7c>)
	udi_cdc_tx_trans_ongoing[port] = false;
   857e8:	550d      	strb	r5, [r1, r4]
	udi_cdc_tx_both_buf_to_send[port] = false;
   857ea:	551d      	strb	r5, [r3, r4]
	udi_cdc_tx_sof_num[port] = 0;
   857ec:	4b16      	ldr	r3, [pc, #88]	; (85848 <udi_cdc_data_enable+0x80>)
	udi_cdc_tx_send(port);
   857ee:	4620      	mov	r0, r4
	udi_cdc_tx_buf_sel[port] = 0;
   857f0:	5515      	strb	r5, [r2, r4]
	udi_cdc_tx_sof_num[port] = 0;
   857f2:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
	udi_cdc_tx_send(port);
   857f6:	4b15      	ldr	r3, [pc, #84]	; (8584c <udi_cdc_data_enable+0x84>)
   857f8:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   857fa:	4a15      	ldr	r2, [pc, #84]	; (85850 <udi_cdc_data_enable+0x88>)
	udi_cdc_rx_buf_nb[port][0] = 0;
   857fc:	4b15      	ldr	r3, [pc, #84]	; (85854 <udi_cdc_data_enable+0x8c>)
	udi_cdc_rx_trans_ongoing[port] = false;
   857fe:	5515      	strb	r5, [r2, r4]
	udi_cdc_rx_buf_sel[port] = 0;
   85800:	4a15      	ldr	r2, [pc, #84]	; (85858 <udi_cdc_data_enable+0x90>)
	if (!udi_cdc_rx_start(port)) {
   85802:	4620      	mov	r0, r4
	udi_cdc_rx_buf_sel[port] = 0;
   85804:	5515      	strb	r5, [r2, r4]
	udi_cdc_rx_buf_nb[port][0] = 0;
   85806:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
	udi_cdc_rx_buf_nb[port][1] = 0;
   8580a:	eb03 0284 	add.w	r2, r3, r4, lsl #2
	udi_cdc_rx_pos[port] = 0;
   8580e:	4b13      	ldr	r3, [pc, #76]	; (8585c <udi_cdc_data_enable+0x94>)
	udi_cdc_rx_buf_nb[port][1] = 0;
   85810:	8055      	strh	r5, [r2, #2]
	udi_cdc_rx_pos[port] = 0;
   85812:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
	if (!udi_cdc_rx_start(port)) {
   85816:	4b12      	ldr	r3, [pc, #72]	; (85860 <udi_cdc_data_enable+0x98>)
   85818:	4798      	blx	r3
   8581a:	b130      	cbz	r0, 8582a <udi_cdc_data_enable+0x62>
	udi_cdc_nb_data_enabled++;
   8581c:	7833      	ldrb	r3, [r6, #0]
   8581e:	3301      	adds	r3, #1
   85820:	b2db      	uxtb	r3, r3
   85822:	7033      	strb	r3, [r6, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   85824:	7833      	ldrb	r3, [r6, #0]
   85826:	2b02      	cmp	r3, #2
   85828:	d000      	beq.n	8582c <udi_cdc_data_enable+0x64>
}
   8582a:	bd70      	pop	{r4, r5, r6, pc}
		udi_cdc_data_running = true;
   8582c:	2201      	movs	r2, #1
   8582e:	4b0d      	ldr	r3, [pc, #52]	; (85864 <udi_cdc_data_enable+0x9c>)
   85830:	701a      	strb	r2, [r3, #0]
}
   85832:	bd70      	pop	{r4, r5, r6, pc}
   85834:	200722bb 	.word	0x200722bb
   85838:	200732e8 	.word	0x200732e8
   8583c:	20072ad4 	.word	0x20072ad4
   85840:	200732d8 	.word	0x200732d8
   85844:	200732e0 	.word	0x200732e0
   85848:	200732e4 	.word	0x200732e4
   8584c:	000854e5 	.word	0x000854e5
   85850:	20072acc 	.word	0x20072acc
   85854:	20072abc 	.word	0x20072abc
   85858:	20072ac4 	.word	0x20072ac4
   8585c:	20072ac8 	.word	0x20072ac8
   85860:	000856bd 	.word	0x000856bd
   85864:	200722a8 	.word	0x200722a8

00085868 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   85868:	bb50      	cbnz	r0, 858c0 <udi_cdc_data_received+0x58>
{
   8586a:	b510      	push	{r4, lr}
   8586c:	4686      	mov	lr, r0
	switch (ep) {
   8586e:	f1a2 0006 	sub.w	r0, r2, #6
   85872:	fab0 f080 	clz	r0, r0
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   85876:	4b13      	ldr	r3, [pc, #76]	; (858c4 <udi_cdc_data_received+0x5c>)
	switch (ep) {
   85878:	0940      	lsrs	r0, r0, #5
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   8587a:	5c1b      	ldrb	r3, [r3, r0]
{
   8587c:	b082      	sub	sp, #8
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   8587e:	fab3 f383 	clz	r3, r3
   85882:	095b      	lsrs	r3, r3, #5
	if (!n) {
   85884:	b169      	cbz	r1, 858a2 <udi_cdc_data_received+0x3a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   85886:	4a10      	ldr	r2, [pc, #64]	; (858c8 <udi_cdc_data_received+0x60>)
   85888:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   8588c:	b289      	uxth	r1, r1
   8588e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   85892:	4a0e      	ldr	r2, [pc, #56]	; (858cc <udi_cdc_data_received+0x64>)
	udi_cdc_rx_start(port);
   85894:	4b0e      	ldr	r3, [pc, #56]	; (858d0 <udi_cdc_data_received+0x68>)
	udi_cdc_rx_trans_ongoing[port] = false;
   85896:	f802 e000 	strb.w	lr, [r2, r0]
}
   8589a:	b002      	add	sp, #8
   8589c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	udi_cdc_rx_start(port);
   858a0:	4718      	bx	r3
				udi_cdc_rx_buf[port][buf_sel_trans],
   858a2:	4c0c      	ldr	r4, [pc, #48]	; (858d4 <udi_cdc_data_received+0x6c>)
		udd_ep_run( ep,
   858a4:	490c      	ldr	r1, [pc, #48]	; (858d8 <udi_cdc_data_received+0x70>)
				udi_cdc_rx_buf[port][buf_sel_trans],
   858a6:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
		udd_ep_run( ep,
   858aa:	9100      	str	r1, [sp, #0]
   858ac:	4610      	mov	r0, r2
   858ae:	f44f 7300 	mov.w	r3, #512	; 0x200
   858b2:	eb04 224c 	add.w	r2, r4, ip, lsl #9
   858b6:	2101      	movs	r1, #1
   858b8:	4c08      	ldr	r4, [pc, #32]	; (858dc <udi_cdc_data_received+0x74>)
   858ba:	47a0      	blx	r4
}
   858bc:	b002      	add	sp, #8
   858be:	bd10      	pop	{r4, pc}
   858c0:	4770      	bx	lr
   858c2:	bf00      	nop
   858c4:	20072ac4 	.word	0x20072ac4
   858c8:	20072abc 	.word	0x20072abc
   858cc:	20072acc 	.word	0x20072acc
   858d0:	000856bd 	.word	0x000856bd
   858d4:	200722bc 	.word	0x200722bc
   858d8:	00085869 	.word	0x00085869
   858dc:	000843a9 	.word	0x000843a9

000858e0 <udi_cdc_multi_get_nb_received_data>:
{
   858e0:	b430      	push	{r4, r5}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   858e2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   858e6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   858e8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   858ec:	f04f 0c00 	mov.w	ip, #0
   858f0:	490b      	ldr	r1, [pc, #44]	; (85920 <udi_cdc_multi_get_nb_received_data+0x40>)
	pos = udi_cdc_rx_pos[port];
   858f2:	4b0c      	ldr	r3, [pc, #48]	; (85924 <udi_cdc_multi_get_nb_received_data+0x44>)
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   858f4:	4a0c      	ldr	r2, [pc, #48]	; (85928 <udi_cdc_multi_get_nb_received_data+0x48>)
   858f6:	f881 c000 	strb.w	ip, [r1]
	pos = udi_cdc_rx_pos[port];
   858fa:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   858fe:	5c12      	ldrb	r2, [r2, r0]
   85900:	4d0a      	ldr	r5, [pc, #40]	; (8592c <udi_cdc_multi_get_nb_received_data+0x4c>)
   85902:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   85906:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
	pos = udi_cdc_rx_pos[port];
   8590a:	b29b      	uxth	r3, r3
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   8590c:	b280      	uxth	r0, r0
   8590e:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
   85910:	b924      	cbnz	r4, 8591c <udi_cdc_multi_get_nb_received_data+0x3c>
		cpu_irq_enable();
   85912:	2301      	movs	r3, #1
   85914:	700b      	strb	r3, [r1, #0]
   85916:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8591a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   8591c:	bc30      	pop	{r4, r5}
   8591e:	4770      	bx	lr
   85920:	20070b04 	.word	0x20070b04
   85924:	20072ac8 	.word	0x20072ac8
   85928:	20072ac4 	.word	0x20072ac4
   8592c:	20072abc 	.word	0x20072abc

00085930 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   85930:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85934:	ea4f 0840 	mov.w	r8, r0, lsl #1
   85938:	46c2      	mov	sl, r8
   8593a:	4617      	mov	r7, r2
   8593c:	460b      	mov	r3, r1
   8593e:	4680      	mov	r8, r0
   85940:	4e25      	ldr	r6, [pc, #148]	; (859d8 <udi_cdc_multi_read_buf+0xa8>)
   85942:	4d26      	ldr	r5, [pc, #152]	; (859dc <udi_cdc_multi_read_buf+0xac>)
   85944:	f8df b098 	ldr.w	fp, [pc, #152]	; 859e0 <udi_cdc_multi_read_buf+0xb0>
   85948:	f8df 9098 	ldr.w	r9, [pc, #152]	; 859e4 <udi_cdc_multi_read_buf+0xb4>
   8594c:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8594e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85952:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85954:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85958:	2200      	movs	r2, #0
   8595a:	7032      	strb	r2, [r6, #0]
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   8595c:	f835 0018 	ldrh.w	r0, [r5, r8, lsl #1]
	buf_sel = udi_cdc_rx_buf_sel[port];
   85960:	f81b 1008 	ldrb.w	r1, [fp, r8]
	pos = udi_cdc_rx_pos[port];
   85964:	b280      	uxth	r0, r0
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   85966:	eb0a 0201 	add.w	r2, sl, r1
   8596a:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
	buf_sel = udi_cdc_rx_buf_sel[port];
   8596e:	b2c9      	uxtb	r1, r1
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   85970:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   85972:	b924      	cbnz	r4, 8597e <udi_cdc_multi_read_buf+0x4e>
		cpu_irq_enable();
   85974:	2401      	movs	r4, #1
   85976:	7034      	strb	r4, [r6, #0]
   85978:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8597c:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (again) {
   8597e:	4282      	cmp	r2, r0
		if (!udi_cdc_data_running) {
   85980:	4c19      	ldr	r4, [pc, #100]	; (859e8 <udi_cdc_multi_read_buf+0xb8>)
	while (again) {
   85982:	d806      	bhi.n	85992 <udi_cdc_multi_read_buf+0x62>
		if (!udi_cdc_data_running) {
   85984:	7822      	ldrb	r2, [r4, #0]
   85986:	2a00      	cmp	r2, #0
   85988:	d1e1      	bne.n	8594e <udi_cdc_multi_read_buf+0x1e>

	if (size) {
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   8598a:	4638      	mov	r0, r7
   8598c:	b003      	add	sp, #12
   8598e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   85992:	4451      	add	r1, sl
   85994:	f839 4011 	ldrh.w	r4, [r9, r1, lsl #1]
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85998:	4a14      	ldr	r2, [pc, #80]	; (859ec <udi_cdc_multi_read_buf+0xbc>)
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   8599a:	b2a4      	uxth	r4, r4
   8599c:	1a24      	subs	r4, r4, r0
	if (copy_nb>size) {
   8599e:	42bc      	cmp	r4, r7
   859a0:	bf28      	it	cs
   859a2:	463c      	movcs	r4, r7
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   859a4:	eb00 2141 	add.w	r1, r0, r1, lsl #9
   859a8:	4618      	mov	r0, r3
	ptr_buf += copy_nb;
   859aa:	4423      	add	r3, r4
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   859ac:	4411      	add	r1, r2
	ptr_buf += copy_nb;
   859ae:	9301      	str	r3, [sp, #4]
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   859b0:	4622      	mov	r2, r4
   859b2:	4b0f      	ldr	r3, [pc, #60]	; (859f0 <udi_cdc_multi_read_buf+0xc0>)
   859b4:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   859b6:	f835 2018 	ldrh.w	r2, [r5, r8, lsl #1]
	size -= copy_nb;
   859ba:	1b3f      	subs	r7, r7, r4
	udi_cdc_rx_pos[port] += copy_nb;
   859bc:	4414      	add	r4, r2
   859be:	b2a4      	uxth	r4, r4
	udi_cdc_rx_start(port);
   859c0:	4b0c      	ldr	r3, [pc, #48]	; (859f4 <udi_cdc_multi_read_buf+0xc4>)
   859c2:	4640      	mov	r0, r8
	udi_cdc_rx_pos[port] += copy_nb;
   859c4:	f825 4018 	strh.w	r4, [r5, r8, lsl #1]
	udi_cdc_rx_start(port);
   859c8:	4798      	blx	r3
	if (size) {
   859ca:	9b01      	ldr	r3, [sp, #4]
   859cc:	2f00      	cmp	r7, #0
   859ce:	d1be      	bne.n	8594e <udi_cdc_multi_read_buf+0x1e>
}
   859d0:	4638      	mov	r0, r7
   859d2:	b003      	add	sp, #12
   859d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   859d8:	20070b04 	.word	0x20070b04
   859dc:	20072ac8 	.word	0x20072ac8
   859e0:	20072ac4 	.word	0x20072ac4
   859e4:	20072abc 	.word	0x20072abc
   859e8:	200722a8 	.word	0x200722a8
   859ec:	200722bc 	.word	0x200722bc
   859f0:	00085c49 	.word	0x00085c49
   859f4:	000856bd 	.word	0x000856bd

000859f8 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   859f8:	4603      	mov	r3, r0
   859fa:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   859fc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85a00:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85a02:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85a06:	2100      	movs	r1, #0
   85a08:	4d13      	ldr	r5, [pc, #76]	; (85a58 <udi_cdc_multi_is_tx_ready+0x60>)
	buf_sel = udi_cdc_tx_buf_sel[port];
   85a0a:	4e14      	ldr	r6, [pc, #80]	; (85a5c <udi_cdc_multi_is_tx_ready+0x64>)
   85a0c:	7029      	strb	r1, [r5, #0]
   85a0e:	5cf2      	ldrb	r2, [r6, r3]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   85a10:	4813      	ldr	r0, [pc, #76]	; (85a60 <udi_cdc_multi_is_tx_ready+0x68>)
   85a12:	eb02 0c43 	add.w	ip, r2, r3, lsl #1
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   85a16:	f830 001c 	ldrh.w	r0, [r0, ip, lsl #1]
   85a1a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   85a1e:	d008      	beq.n	85a32 <udi_cdc_multi_is_tx_ready+0x3a>
   85a20:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
   85a22:	b924      	cbnz	r4, 85a2e <udi_cdc_multi_is_tx_ready+0x36>
		cpu_irq_enable();
   85a24:	2301      	movs	r3, #1
   85a26:	702b      	strb	r3, [r5, #0]
   85a28:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85a2c:	b662      	cpsie	i
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
}
   85a2e:	bcf0      	pop	{r4, r5, r6, r7}
   85a30:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
   85a32:	480c      	ldr	r0, [pc, #48]	; (85a64 <udi_cdc_multi_is_tx_ready+0x6c>)
   85a34:	5cc7      	ldrb	r7, [r0, r3]
   85a36:	f007 00ff 	and.w	r0, r7, #255	; 0xff
   85a3a:	b95f      	cbnz	r7, 85a54 <udi_cdc_multi_is_tx_ready+0x5c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   85a3c:	490a      	ldr	r1, [pc, #40]	; (85a68 <udi_cdc_multi_is_tx_ready+0x70>)
   85a3e:	5ccf      	ldrb	r7, [r1, r3]
   85a40:	2f00      	cmp	r7, #0
   85a42:	d1ee      	bne.n	85a22 <udi_cdc_multi_is_tx_ready+0x2a>
			udi_cdc_tx_both_buf_to_send[port] = true;
   85a44:	b2d2      	uxtb	r2, r2
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85a46:	fab2 f282 	clz	r2, r2
			udi_cdc_tx_both_buf_to_send[port] = true;
   85a4a:	2001      	movs	r0, #1
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85a4c:	0952      	lsrs	r2, r2, #5
			udi_cdc_tx_both_buf_to_send[port] = true;
   85a4e:	54c8      	strb	r0, [r1, r3]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85a50:	54f2      	strb	r2, [r6, r3]
			buf_sel_nb = 0;
   85a52:	e7e6      	b.n	85a22 <udi_cdc_multi_is_tx_ready+0x2a>
   85a54:	4608      	mov	r0, r1
   85a56:	e7e4      	b.n	85a22 <udi_cdc_multi_is_tx_ready+0x2a>
   85a58:	20070b04 	.word	0x20070b04
   85a5c:	200732e0 	.word	0x200732e0
   85a60:	200732d8 	.word	0x200732d8
   85a64:	200732e8 	.word	0x200732e8
   85a68:	20072ad4 	.word	0x20072ad4

00085a6c <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   85a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   85a70:	4b39      	ldr	r3, [pc, #228]	; (85b58 <udi_cdc_multi_putc+0xec>)
   85a72:	ebc0 06c0 	rsb	r6, r0, r0, lsl #3
   85a76:	4433      	add	r3, r6
   85a78:	799b      	ldrb	r3, [r3, #6]
   85a7a:	f04f 0801 	mov.w	r8, #1
   85a7e:	f1a3 0309 	sub.w	r3, r3, #9
   85a82:	fab3 f383 	clz	r3, r3
	cpu_irq_disable();
   85a86:	f04f 0e00 	mov.w	lr, #0
   85a8a:	4a34      	ldr	r2, [pc, #208]	; (85b5c <udi_cdc_multi_putc+0xf0>)
   85a8c:	4d34      	ldr	r5, [pc, #208]	; (85b60 <udi_cdc_multi_putc+0xf4>)
   85a8e:	4c35      	ldr	r4, [pc, #212]	; (85b64 <udi_cdc_multi_putc+0xf8>)
		if ((!udi_cdc_tx_trans_ongoing[port])
   85a90:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 85b68 <udi_cdc_multi_putc+0xfc>
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   85a94:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 85b6c <udi_cdc_multi_putc+0x100>
{
   85a98:	b083      	sub	sp, #12
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   85a9a:	095b      	lsrs	r3, r3, #5
   85a9c:	fa00 fc08 	lsl.w	ip, r0, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85aa0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85aa4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85aa6:	f3bf 8f5f 	dmb	sy
   85aaa:	f882 e000 	strb.w	lr, [r2]
	buf_sel = udi_cdc_tx_buf_sel[port];
   85aae:	5c2e      	ldrb	r6, [r5, r0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   85ab0:	eb0c 0a06 	add.w	sl, ip, r6
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   85ab4:	f834 a01a 	ldrh.w	sl, [r4, sl, lsl #1]
	buf_sel = udi_cdc_tx_buf_sel[port];
   85ab8:	b2f6      	uxtb	r6, r6
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   85aba:	f5ba 7f00 	cmp.w	sl, #512	; 0x200
   85abe:	d024      	beq.n	85b0a <udi_cdc_multi_putc+0x9e>
	if (cpu_irq_is_enabled_flags(flags))
   85ac0:	b927      	cbnz	r7, 85acc <udi_cdc_multi_putc+0x60>
		cpu_irq_enable();
   85ac2:	f882 8000 	strb.w	r8, [r2]
   85ac6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85aca:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85acc:	f3ef 8610 	mrs	r6, PRIMASK
   85ad0:	9601      	str	r6, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   85ad2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85ad4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85ad8:	f882 e000 	strb.w	lr, [r2]
	buf_sel = udi_cdc_tx_buf_sel[port];
   85adc:	5c2e      	ldrb	r6, [r5, r0]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   85ade:	4466      	add	r6, ip
   85ae0:	f834 7016 	ldrh.w	r7, [r4, r6, lsl #1]
   85ae4:	eb0b 2a46 	add.w	sl, fp, r6, lsl #9
   85ae8:	f80a 1007 	strb.w	r1, [sl, r7]
   85aec:	3701      	adds	r7, #1
   85aee:	f824 7016 	strh.w	r7, [r4, r6, lsl #1]
	if (cpu_irq_is_enabled_flags(flags))
   85af2:	9e01      	ldr	r6, [sp, #4]
   85af4:	b11e      	cbz	r6, 85afe <udi_cdc_multi_putc+0x92>
	cpu_irq_restore(flags);

	if (b_databit_9) {
   85af6:	b363      	cbz	r3, 85b52 <udi_cdc_multi_putc+0xe6>
		// Send MSB
		b_databit_9 = false;
   85af8:	2300      	movs	r3, #0
		value = value >> 8;
   85afa:	1209      	asrs	r1, r1, #8
		goto udi_cdc_putc_process_one_byte;
   85afc:	e7d0      	b.n	85aa0 <udi_cdc_multi_putc+0x34>
		cpu_irq_enable();
   85afe:	f882 8000 	strb.w	r8, [r2]
   85b02:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85b06:	b662      	cpsie	i
}
   85b08:	e7f5      	b.n	85af6 <udi_cdc_multi_putc+0x8a>
		if ((!udi_cdc_tx_trans_ongoing[port])
   85b0a:	f819 a000 	ldrb.w	sl, [r9, r0]
   85b0e:	f1ba 0f00 	cmp.w	sl, #0
   85b12:	d106      	bne.n	85b22 <udi_cdc_multi_putc+0xb6>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   85b14:	f8df a058 	ldr.w	sl, [pc, #88]	; 85b70 <udi_cdc_multi_putc+0x104>
   85b18:	f81a a000 	ldrb.w	sl, [sl, r0]
   85b1c:	f1ba 0f00 	cmp.w	sl, #0
   85b20:	d006      	beq.n	85b30 <udi_cdc_multi_putc+0xc4>
	if (cpu_irq_is_enabled_flags(flags))
   85b22:	b187      	cbz	r7, 85b46 <udi_cdc_multi_putc+0xda>
			return false;
   85b24:	2000      	movs	r0, #0
		if (!udi_cdc_data_running) {
   85b26:	4b13      	ldr	r3, [pc, #76]	; (85b74 <udi_cdc_multi_putc+0x108>)
   85b28:	781b      	ldrb	r3, [r3, #0]
	}
	return true;
}
   85b2a:	b003      	add	sp, #12
   85b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85b30:	fab6 f686 	clz	r6, r6
			udi_cdc_tx_both_buf_to_send[port] = true;
   85b34:	f8df a038 	ldr.w	sl, [pc, #56]	; 85b70 <udi_cdc_multi_putc+0x104>
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85b38:	0976      	lsrs	r6, r6, #5
			udi_cdc_tx_both_buf_to_send[port] = true;
   85b3a:	f80a 8000 	strb.w	r8, [sl, r0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85b3e:	542e      	strb	r6, [r5, r0]
   85b40:	2f00      	cmp	r7, #0
   85b42:	d0be      	beq.n	85ac2 <udi_cdc_multi_putc+0x56>
   85b44:	e7c2      	b.n	85acc <udi_cdc_multi_putc+0x60>
		cpu_irq_enable();
   85b46:	2301      	movs	r3, #1
   85b48:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   85b4a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85b4e:	b662      	cpsie	i
	return retval;
   85b50:	e7e8      	b.n	85b24 <udi_cdc_multi_putc+0xb8>
	return true;
   85b52:	2001      	movs	r0, #1
   85b54:	e7e9      	b.n	85b2a <udi_cdc_multi_putc+0xbe>
   85b56:	bf00      	nop
   85b58:	200722ac 	.word	0x200722ac
   85b5c:	20070b04 	.word	0x20070b04
   85b60:	200732e0 	.word	0x200732e0
   85b64:	200732d8 	.word	0x200732d8
   85b68:	200732e8 	.word	0x200732e8
   85b6c:	20072ad8 	.word	0x20072ad8
   85b70:	20072ad4 	.word	0x20072ad4
   85b74:	200722a8 	.word	0x200722a8

00085b78 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   85b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   85b7c:	b9a0      	cbnz	r0, 85ba8 <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
   85b7e:	2a00      	cmp	r2, #0
   85b80:	4690      	mov	r8, r2
   85b82:	dd0d      	ble.n	85ba0 <_read+0x28>
   85b84:	460c      	mov	r4, r1
   85b86:	4f0a      	ldr	r7, [pc, #40]	; (85bb0 <_read+0x38>)
   85b88:	4e0a      	ldr	r6, [pc, #40]	; (85bb4 <_read+0x3c>)
   85b8a:	188d      	adds	r5, r1, r2
		ptr_get(stdio_base, ptr);
   85b8c:	4621      	mov	r1, r4
   85b8e:	6838      	ldr	r0, [r7, #0]
   85b90:	6833      	ldr	r3, [r6, #0]
		ptr++;
   85b92:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
   85b94:	4798      	blx	r3
	for (; len > 0; --len) {
   85b96:	42ac      	cmp	r4, r5
   85b98:	d1f8      	bne.n	85b8c <_read+0x14>
		nChars++;
	}
	return nChars;
}
   85b9a:	4640      	mov	r0, r8
   85b9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int nChars = 0;
   85ba0:	4680      	mov	r8, r0
}
   85ba2:	4640      	mov	r0, r8
   85ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   85ba8:	f04f 38ff 	mov.w	r8, #4294967295
   85bac:	e7f5      	b.n	85b9a <_read+0x22>
   85bae:	bf00      	nop
   85bb0:	200721b0 	.word	0x200721b0
   85bb4:	20073300 	.word	0x20073300

00085bb8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   85bb8:	b410      	push	{r4}

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   85bba:	f04f 33ff 	mov.w	r3, #4294967295
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   85bbe:	2402      	movs	r4, #2
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   85bc0:	ea4f 1c81 	mov.w	ip, r1, lsl #6
   85bc4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   85bc8:	f840 400c 	str.w	r4, [r0, ip]
	tc_channel->TC_IDR = 0xFFFFFFFF;
   85bcc:	628b      	str	r3, [r1, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   85bce:	6a0b      	ldr	r3, [r1, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   85bd0:	604a      	str	r2, [r1, #4]
}
   85bd2:	bc10      	pop	{r4}
   85bd4:	4770      	bx	lr
   85bd6:	bf00      	nop

00085bd8 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   85bd8:	2305      	movs	r3, #5
   85bda:	0189      	lsls	r1, r1, #6
   85bdc:	5043      	str	r3, [r0, r1]
}
   85bde:	4770      	bx	lr

00085be0 <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
   85be0:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   85be4:	6142      	str	r2, [r0, #20]
}
   85be6:	4770      	bx	lr

00085be8 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   85be8:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   85bec:	61c2      	str	r2, [r0, #28]
}
   85bee:	4770      	bx	lr

00085bf0 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   85bf0:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   85bf4:	6242      	str	r2, [r0, #36]	; 0x24
}
   85bf6:	4770      	bx	lr

00085bf8 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   85bf8:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	return tc_channel->TC_SR;
   85bfc:	6a00      	ldr	r0, [r0, #32]
}
   85bfe:	4770      	bx	lr

00085c00 <__libc_init_array>:
   85c00:	b570      	push	{r4, r5, r6, lr}
   85c02:	4e0d      	ldr	r6, [pc, #52]	; (85c38 <__libc_init_array+0x38>)
   85c04:	4d0d      	ldr	r5, [pc, #52]	; (85c3c <__libc_init_array+0x3c>)
   85c06:	1b76      	subs	r6, r6, r5
   85c08:	10b6      	asrs	r6, r6, #2
   85c0a:	d006      	beq.n	85c1a <__libc_init_array+0x1a>
   85c0c:	2400      	movs	r4, #0
   85c0e:	f855 3b04 	ldr.w	r3, [r5], #4
   85c12:	3401      	adds	r4, #1
   85c14:	4798      	blx	r3
   85c16:	42a6      	cmp	r6, r4
   85c18:	d1f9      	bne.n	85c0e <__libc_init_array+0xe>
   85c1a:	4e09      	ldr	r6, [pc, #36]	; (85c40 <__libc_init_array+0x40>)
   85c1c:	4d09      	ldr	r5, [pc, #36]	; (85c44 <__libc_init_array+0x44>)
   85c1e:	f007 f8b7 	bl	8cd90 <_init>
   85c22:	1b76      	subs	r6, r6, r5
   85c24:	10b6      	asrs	r6, r6, #2
   85c26:	d006      	beq.n	85c36 <__libc_init_array+0x36>
   85c28:	2400      	movs	r4, #0
   85c2a:	f855 3b04 	ldr.w	r3, [r5], #4
   85c2e:	3401      	adds	r4, #1
   85c30:	4798      	blx	r3
   85c32:	42a6      	cmp	r6, r4
   85c34:	d1f9      	bne.n	85c2a <__libc_init_array+0x2a>
   85c36:	bd70      	pop	{r4, r5, r6, pc}
   85c38:	0008cd9c 	.word	0x0008cd9c
   85c3c:	0008cd9c 	.word	0x0008cd9c
   85c40:	0008cda4 	.word	0x0008cda4
   85c44:	0008cd9c 	.word	0x0008cd9c

00085c48 <memcpy>:
   85c48:	4684      	mov	ip, r0
   85c4a:	ea41 0300 	orr.w	r3, r1, r0
   85c4e:	f013 0303 	ands.w	r3, r3, #3
   85c52:	d149      	bne.n	85ce8 <memcpy+0xa0>
   85c54:	3a40      	subs	r2, #64	; 0x40
   85c56:	d323      	bcc.n	85ca0 <memcpy+0x58>
   85c58:	680b      	ldr	r3, [r1, #0]
   85c5a:	6003      	str	r3, [r0, #0]
   85c5c:	684b      	ldr	r3, [r1, #4]
   85c5e:	6043      	str	r3, [r0, #4]
   85c60:	688b      	ldr	r3, [r1, #8]
   85c62:	6083      	str	r3, [r0, #8]
   85c64:	68cb      	ldr	r3, [r1, #12]
   85c66:	60c3      	str	r3, [r0, #12]
   85c68:	690b      	ldr	r3, [r1, #16]
   85c6a:	6103      	str	r3, [r0, #16]
   85c6c:	694b      	ldr	r3, [r1, #20]
   85c6e:	6143      	str	r3, [r0, #20]
   85c70:	698b      	ldr	r3, [r1, #24]
   85c72:	6183      	str	r3, [r0, #24]
   85c74:	69cb      	ldr	r3, [r1, #28]
   85c76:	61c3      	str	r3, [r0, #28]
   85c78:	6a0b      	ldr	r3, [r1, #32]
   85c7a:	6203      	str	r3, [r0, #32]
   85c7c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85c7e:	6243      	str	r3, [r0, #36]	; 0x24
   85c80:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   85c82:	6283      	str	r3, [r0, #40]	; 0x28
   85c84:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85c86:	62c3      	str	r3, [r0, #44]	; 0x2c
   85c88:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85c8a:	6303      	str	r3, [r0, #48]	; 0x30
   85c8c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85c8e:	6343      	str	r3, [r0, #52]	; 0x34
   85c90:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85c92:	6383      	str	r3, [r0, #56]	; 0x38
   85c94:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85c96:	63c3      	str	r3, [r0, #60]	; 0x3c
   85c98:	3040      	adds	r0, #64	; 0x40
   85c9a:	3140      	adds	r1, #64	; 0x40
   85c9c:	3a40      	subs	r2, #64	; 0x40
   85c9e:	d2db      	bcs.n	85c58 <memcpy+0x10>
   85ca0:	3230      	adds	r2, #48	; 0x30
   85ca2:	d30b      	bcc.n	85cbc <memcpy+0x74>
   85ca4:	680b      	ldr	r3, [r1, #0]
   85ca6:	6003      	str	r3, [r0, #0]
   85ca8:	684b      	ldr	r3, [r1, #4]
   85caa:	6043      	str	r3, [r0, #4]
   85cac:	688b      	ldr	r3, [r1, #8]
   85cae:	6083      	str	r3, [r0, #8]
   85cb0:	68cb      	ldr	r3, [r1, #12]
   85cb2:	60c3      	str	r3, [r0, #12]
   85cb4:	3010      	adds	r0, #16
   85cb6:	3110      	adds	r1, #16
   85cb8:	3a10      	subs	r2, #16
   85cba:	d2f3      	bcs.n	85ca4 <memcpy+0x5c>
   85cbc:	320c      	adds	r2, #12
   85cbe:	d305      	bcc.n	85ccc <memcpy+0x84>
   85cc0:	f851 3b04 	ldr.w	r3, [r1], #4
   85cc4:	f840 3b04 	str.w	r3, [r0], #4
   85cc8:	3a04      	subs	r2, #4
   85cca:	d2f9      	bcs.n	85cc0 <memcpy+0x78>
   85ccc:	3204      	adds	r2, #4
   85cce:	d008      	beq.n	85ce2 <memcpy+0x9a>
   85cd0:	07d2      	lsls	r2, r2, #31
   85cd2:	bf1c      	itt	ne
   85cd4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85cd8:	f800 3b01 	strbne.w	r3, [r0], #1
   85cdc:	d301      	bcc.n	85ce2 <memcpy+0x9a>
   85cde:	880b      	ldrh	r3, [r1, #0]
   85ce0:	8003      	strh	r3, [r0, #0]
   85ce2:	4660      	mov	r0, ip
   85ce4:	4770      	bx	lr
   85ce6:	bf00      	nop
   85ce8:	2a08      	cmp	r2, #8
   85cea:	d313      	bcc.n	85d14 <memcpy+0xcc>
   85cec:	078b      	lsls	r3, r1, #30
   85cee:	d0b1      	beq.n	85c54 <memcpy+0xc>
   85cf0:	f010 0303 	ands.w	r3, r0, #3
   85cf4:	d0ae      	beq.n	85c54 <memcpy+0xc>
   85cf6:	f1c3 0304 	rsb	r3, r3, #4
   85cfa:	1ad2      	subs	r2, r2, r3
   85cfc:	07db      	lsls	r3, r3, #31
   85cfe:	bf1c      	itt	ne
   85d00:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85d04:	f800 3b01 	strbne.w	r3, [r0], #1
   85d08:	d3a4      	bcc.n	85c54 <memcpy+0xc>
   85d0a:	f831 3b02 	ldrh.w	r3, [r1], #2
   85d0e:	f820 3b02 	strh.w	r3, [r0], #2
   85d12:	e79f      	b.n	85c54 <memcpy+0xc>
   85d14:	3a04      	subs	r2, #4
   85d16:	d3d9      	bcc.n	85ccc <memcpy+0x84>
   85d18:	3a01      	subs	r2, #1
   85d1a:	f811 3b01 	ldrb.w	r3, [r1], #1
   85d1e:	f800 3b01 	strb.w	r3, [r0], #1
   85d22:	d2f9      	bcs.n	85d18 <memcpy+0xd0>
   85d24:	780b      	ldrb	r3, [r1, #0]
   85d26:	7003      	strb	r3, [r0, #0]
   85d28:	784b      	ldrb	r3, [r1, #1]
   85d2a:	7043      	strb	r3, [r0, #1]
   85d2c:	788b      	ldrb	r3, [r1, #2]
   85d2e:	7083      	strb	r3, [r0, #2]
   85d30:	4660      	mov	r0, ip
   85d32:	4770      	bx	lr

00085d34 <memset>:
   85d34:	0783      	lsls	r3, r0, #30
   85d36:	b530      	push	{r4, r5, lr}
   85d38:	d048      	beq.n	85dcc <memset+0x98>
   85d3a:	1e54      	subs	r4, r2, #1
   85d3c:	2a00      	cmp	r2, #0
   85d3e:	d03f      	beq.n	85dc0 <memset+0x8c>
   85d40:	4603      	mov	r3, r0
   85d42:	b2ca      	uxtb	r2, r1
   85d44:	e001      	b.n	85d4a <memset+0x16>
   85d46:	3c01      	subs	r4, #1
   85d48:	d33a      	bcc.n	85dc0 <memset+0x8c>
   85d4a:	f803 2b01 	strb.w	r2, [r3], #1
   85d4e:	079d      	lsls	r5, r3, #30
   85d50:	d1f9      	bne.n	85d46 <memset+0x12>
   85d52:	2c03      	cmp	r4, #3
   85d54:	d92d      	bls.n	85db2 <memset+0x7e>
   85d56:	b2cd      	uxtb	r5, r1
   85d58:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   85d5c:	2c0f      	cmp	r4, #15
   85d5e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   85d62:	d936      	bls.n	85dd2 <memset+0x9e>
   85d64:	f1a4 0210 	sub.w	r2, r4, #16
   85d68:	f022 0c0f 	bic.w	ip, r2, #15
   85d6c:	f103 0e20 	add.w	lr, r3, #32
   85d70:	44e6      	add	lr, ip
   85d72:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   85d76:	f103 0210 	add.w	r2, r3, #16
   85d7a:	e942 5504 	strd	r5, r5, [r2, #-16]
   85d7e:	e942 5502 	strd	r5, r5, [r2, #-8]
   85d82:	3210      	adds	r2, #16
   85d84:	4572      	cmp	r2, lr
   85d86:	d1f8      	bne.n	85d7a <memset+0x46>
   85d88:	f10c 0201 	add.w	r2, ip, #1
   85d8c:	f014 0f0c 	tst.w	r4, #12
   85d90:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   85d94:	f004 0c0f 	and.w	ip, r4, #15
   85d98:	d013      	beq.n	85dc2 <memset+0x8e>
   85d9a:	f1ac 0304 	sub.w	r3, ip, #4
   85d9e:	f023 0303 	bic.w	r3, r3, #3
   85da2:	3304      	adds	r3, #4
   85da4:	4413      	add	r3, r2
   85da6:	f842 5b04 	str.w	r5, [r2], #4
   85daa:	4293      	cmp	r3, r2
   85dac:	d1fb      	bne.n	85da6 <memset+0x72>
   85dae:	f00c 0403 	and.w	r4, ip, #3
   85db2:	b12c      	cbz	r4, 85dc0 <memset+0x8c>
   85db4:	b2ca      	uxtb	r2, r1
   85db6:	441c      	add	r4, r3
   85db8:	f803 2b01 	strb.w	r2, [r3], #1
   85dbc:	429c      	cmp	r4, r3
   85dbe:	d1fb      	bne.n	85db8 <memset+0x84>
   85dc0:	bd30      	pop	{r4, r5, pc}
   85dc2:	4664      	mov	r4, ip
   85dc4:	4613      	mov	r3, r2
   85dc6:	2c00      	cmp	r4, #0
   85dc8:	d1f4      	bne.n	85db4 <memset+0x80>
   85dca:	e7f9      	b.n	85dc0 <memset+0x8c>
   85dcc:	4603      	mov	r3, r0
   85dce:	4614      	mov	r4, r2
   85dd0:	e7bf      	b.n	85d52 <memset+0x1e>
   85dd2:	461a      	mov	r2, r3
   85dd4:	46a4      	mov	ip, r4
   85dd6:	e7e0      	b.n	85d9a <memset+0x66>

00085dd8 <sprintf>:
   85dd8:	b40e      	push	{r1, r2, r3}
   85dda:	b530      	push	{r4, r5, lr}
   85ddc:	4604      	mov	r4, r0
   85dde:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   85de2:	b09c      	sub	sp, #112	; 0x70
   85de4:	4a0b      	ldr	r2, [pc, #44]	; (85e14 <sprintf+0x3c>)
   85de6:	ab1f      	add	r3, sp, #124	; 0x7c
   85de8:	490b      	ldr	r1, [pc, #44]	; (85e18 <sprintf+0x40>)
   85dea:	9205      	str	r2, [sp, #20]
   85dec:	f853 2b04 	ldr.w	r2, [r3], #4
   85df0:	6808      	ldr	r0, [r1, #0]
   85df2:	a902      	add	r1, sp, #8
   85df4:	e9cd 3401 	strd	r3, r4, [sp, #4]
   85df8:	9507      	str	r5, [sp, #28]
   85dfa:	9504      	str	r5, [sp, #16]
   85dfc:	9406      	str	r4, [sp, #24]
   85dfe:	f000 f86f 	bl	85ee0 <_svfprintf_r>
   85e02:	2200      	movs	r2, #0
   85e04:	9b02      	ldr	r3, [sp, #8]
   85e06:	701a      	strb	r2, [r3, #0]
   85e08:	b01c      	add	sp, #112	; 0x70
   85e0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   85e0e:	b003      	add	sp, #12
   85e10:	4770      	bx	lr
   85e12:	bf00      	nop
   85e14:	ffff0208 	.word	0xffff0208
   85e18:	20070b30 	.word	0x20070b30

00085e1c <strlen>:
   85e1c:	f020 0103 	bic.w	r1, r0, #3
   85e20:	f010 0003 	ands.w	r0, r0, #3
   85e24:	f1c0 0000 	rsb	r0, r0, #0
   85e28:	f851 3b04 	ldr.w	r3, [r1], #4
   85e2c:	f100 0c04 	add.w	ip, r0, #4
   85e30:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   85e34:	f06f 0200 	mvn.w	r2, #0
   85e38:	bf1c      	itt	ne
   85e3a:	fa22 f20c 	lsrne.w	r2, r2, ip
   85e3e:	4313      	orrne	r3, r2
   85e40:	f04f 0c01 	mov.w	ip, #1
   85e44:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   85e48:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   85e4c:	eba3 020c 	sub.w	r2, r3, ip
   85e50:	ea22 0203 	bic.w	r2, r2, r3
   85e54:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   85e58:	bf04      	itt	eq
   85e5a:	f851 3b04 	ldreq.w	r3, [r1], #4
   85e5e:	3004      	addeq	r0, #4
   85e60:	d0f4      	beq.n	85e4c <strlen+0x30>
   85e62:	f1c2 0100 	rsb	r1, r2, #0
   85e66:	ea02 0201 	and.w	r2, r2, r1
   85e6a:	fab2 f282 	clz	r2, r2
   85e6e:	f1c2 021f 	rsb	r2, r2, #31
   85e72:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   85e76:	4770      	bx	lr

00085e78 <strncpy>:
   85e78:	b530      	push	{r4, r5, lr}
   85e7a:	ea40 0401 	orr.w	r4, r0, r1
   85e7e:	07a3      	lsls	r3, r4, #30
   85e80:	d122      	bne.n	85ec8 <strncpy+0x50>
   85e82:	2a03      	cmp	r2, #3
   85e84:	d920      	bls.n	85ec8 <strncpy+0x50>
   85e86:	460b      	mov	r3, r1
   85e88:	4684      	mov	ip, r0
   85e8a:	4619      	mov	r1, r3
   85e8c:	f853 5b04 	ldr.w	r5, [r3], #4
   85e90:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   85e94:	ea24 0405 	bic.w	r4, r4, r5
   85e98:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   85e9c:	d115      	bne.n	85eca <strncpy+0x52>
   85e9e:	3a04      	subs	r2, #4
   85ea0:	2a03      	cmp	r2, #3
   85ea2:	4619      	mov	r1, r3
   85ea4:	f84c 5b04 	str.w	r5, [ip], #4
   85ea8:	d8ef      	bhi.n	85e8a <strncpy+0x12>
   85eaa:	f101 3eff 	add.w	lr, r1, #4294967295
   85eae:	b152      	cbz	r2, 85ec6 <strncpy+0x4e>
   85eb0:	4663      	mov	r3, ip
   85eb2:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   85eb6:	1e54      	subs	r4, r2, #1
   85eb8:	f803 1b01 	strb.w	r1, [r3], #1
   85ebc:	b141      	cbz	r1, 85ed0 <strncpy+0x58>
   85ebe:	4622      	mov	r2, r4
   85ec0:	469c      	mov	ip, r3
   85ec2:	2a00      	cmp	r2, #0
   85ec4:	d1f4      	bne.n	85eb0 <strncpy+0x38>
   85ec6:	bd30      	pop	{r4, r5, pc}
   85ec8:	4684      	mov	ip, r0
   85eca:	f101 3eff 	add.w	lr, r1, #4294967295
   85ece:	e7ee      	b.n	85eae <strncpy+0x36>
   85ed0:	4462      	add	r2, ip
   85ed2:	2c00      	cmp	r4, #0
   85ed4:	d0f7      	beq.n	85ec6 <strncpy+0x4e>
   85ed6:	f803 1b01 	strb.w	r1, [r3], #1
   85eda:	4293      	cmp	r3, r2
   85edc:	d1fb      	bne.n	85ed6 <strncpy+0x5e>
   85ede:	bd30      	pop	{r4, r5, pc}

00085ee0 <_svfprintf_r>:
   85ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85ee4:	b0d5      	sub	sp, #340	; 0x154
   85ee6:	460c      	mov	r4, r1
   85ee8:	910c      	str	r1, [sp, #48]	; 0x30
   85eea:	4691      	mov	r9, r2
   85eec:	930e      	str	r3, [sp, #56]	; 0x38
   85eee:	900a      	str	r0, [sp, #40]	; 0x28
   85ef0:	f002 feba 	bl	88c68 <_localeconv_r>
   85ef4:	6803      	ldr	r3, [r0, #0]
   85ef6:	4618      	mov	r0, r3
   85ef8:	9317      	str	r3, [sp, #92]	; 0x5c
   85efa:	f7ff ff8f 	bl	85e1c <strlen>
   85efe:	89a3      	ldrh	r3, [r4, #12]
   85f00:	9016      	str	r0, [sp, #88]	; 0x58
   85f02:	0619      	lsls	r1, r3, #24
   85f04:	d503      	bpl.n	85f0e <_svfprintf_r+0x2e>
   85f06:	6923      	ldr	r3, [r4, #16]
   85f08:	2b00      	cmp	r3, #0
   85f0a:	f000 878f 	beq.w	86e2c <_svfprintf_r+0xf4c>
   85f0e:	2400      	movs	r4, #0
   85f10:	ab2b      	add	r3, sp, #172	; 0xac
   85f12:	4622      	mov	r2, r4
   85f14:	4698      	mov	r8, r3
   85f16:	464d      	mov	r5, r9
   85f18:	e9cd 4429 	strd	r4, r4, [sp, #164]	; 0xa4
   85f1c:	9328      	str	r3, [sp, #160]	; 0xa0
   85f1e:	9412      	str	r4, [sp, #72]	; 0x48
   85f20:	2300      	movs	r3, #0
   85f22:	2400      	movs	r4, #0
   85f24:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   85f28:	782b      	ldrb	r3, [r5, #0]
   85f2a:	e9cd 2219 	strd	r2, r2, [sp, #100]	; 0x64
   85f2e:	e9cd 221b 	strd	r2, r2, [sp, #108]	; 0x6c
   85f32:	9218      	str	r2, [sp, #96]	; 0x60
   85f34:	9208      	str	r2, [sp, #32]
   85f36:	2b00      	cmp	r3, #0
   85f38:	f000 81ce 	beq.w	862d8 <_svfprintf_r+0x3f8>
   85f3c:	46aa      	mov	sl, r5
   85f3e:	e004      	b.n	85f4a <_svfprintf_r+0x6a>
   85f40:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
   85f44:	2b00      	cmp	r3, #0
   85f46:	f000 8109 	beq.w	8615c <_svfprintf_r+0x27c>
   85f4a:	2b25      	cmp	r3, #37	; 0x25
   85f4c:	d1f8      	bne.n	85f40 <_svfprintf_r+0x60>
   85f4e:	ebba 0605 	subs.w	r6, sl, r5
   85f52:	f040 8107 	bne.w	86164 <_svfprintf_r+0x284>
   85f56:	f89a 3000 	ldrb.w	r3, [sl]
   85f5a:	2b00      	cmp	r3, #0
   85f5c:	f000 81bc 	beq.w	862d8 <_svfprintf_r+0x3f8>
   85f60:	2300      	movs	r3, #0
   85f62:	f04f 32ff 	mov.w	r2, #4294967295
   85f66:	f04f 092b 	mov.w	r9, #43	; 0x2b
   85f6a:	2420      	movs	r4, #32
   85f6c:	461f      	mov	r7, r3
   85f6e:	f89a 6001 	ldrb.w	r6, [sl, #1]
   85f72:	9207      	str	r2, [sp, #28]
   85f74:	f10a 0a01 	add.w	sl, sl, #1
   85f78:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   85f7c:	9309      	str	r3, [sp, #36]	; 0x24
   85f7e:	f10a 0a01 	add.w	sl, sl, #1
   85f82:	f1a6 0320 	sub.w	r3, r6, #32
   85f86:	2b5a      	cmp	r3, #90	; 0x5a
   85f88:	f200 8120 	bhi.w	861cc <_svfprintf_r+0x2ec>
   85f8c:	e8df f013 	tbh	[pc, r3, lsl #1]
   85f90:	011e02ca 	.word	0x011e02ca
   85f94:	02c5011e 	.word	0x02c5011e
   85f98:	011e011e 	.word	0x011e011e
   85f9c:	02a3011e 	.word	0x02a3011e
   85fa0:	011e011e 	.word	0x011e011e
   85fa4:	02f3006a 	.word	0x02f3006a
   85fa8:	0247011e 	.word	0x0247011e
   85fac:	011e02d9 	.word	0x011e02d9
   85fb0:	005b02d4 	.word	0x005b02d4
   85fb4:	005b005b 	.word	0x005b005b
   85fb8:	005b005b 	.word	0x005b005b
   85fbc:	005b005b 	.word	0x005b005b
   85fc0:	005b005b 	.word	0x005b005b
   85fc4:	011e011e 	.word	0x011e011e
   85fc8:	011e011e 	.word	0x011e011e
   85fcc:	011e011e 	.word	0x011e011e
   85fd0:	01b0011e 	.word	0x01b0011e
   85fd4:	020b011e 	.word	0x020b011e
   85fd8:	01b0007a 	.word	0x01b0007a
   85fdc:	01b001b0 	.word	0x01b001b0
   85fe0:	011e011e 	.word	0x011e011e
   85fe4:	011e011e 	.word	0x011e011e
   85fe8:	011e029e 	.word	0x011e029e
   85fec:	00b6011e 	.word	0x00b6011e
   85ff0:	011e011e 	.word	0x011e011e
   85ff4:	0219011e 	.word	0x0219011e
   85ff8:	024c011e 	.word	0x024c011e
   85ffc:	011e011e 	.word	0x011e011e
   86000:	011e073f 	.word	0x011e073f
   86004:	011e011e 	.word	0x011e011e
   86008:	011e011e 	.word	0x011e011e
   8600c:	011e011e 	.word	0x011e011e
   86010:	01b0011e 	.word	0x01b0011e
   86014:	020b011e 	.word	0x020b011e
   86018:	01b0007c 	.word	0x01b0007c
   8601c:	01b001b0 	.word	0x01b001b0
   86020:	007c0291 	.word	0x007c0291
   86024:	011e0075 	.word	0x011e0075
   86028:	011e0284 	.word	0x011e0284
   8602c:	00b80270 	.word	0x00b80270
   86030:	0075025e 	.word	0x0075025e
   86034:	0219011e 	.word	0x0219011e
   86038:	071c0072 	.word	0x071c0072
   8603c:	011e011e 	.word	0x011e011e
   86040:	011e071f 	.word	0x011e071f
   86044:	0072      	.short	0x0072
   86046:	2200      	movs	r2, #0
   86048:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8604c:	f81a 6b01 	ldrb.w	r6, [sl], #1
   86050:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86054:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   86058:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8605c:	2b09      	cmp	r3, #9
   8605e:	d9f5      	bls.n	8604c <_svfprintf_r+0x16c>
   86060:	9209      	str	r2, [sp, #36]	; 0x24
   86062:	e78e      	b.n	85f82 <_svfprintf_r+0xa2>
   86064:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86066:	f853 2b04 	ldr.w	r2, [r3], #4
   8606a:	2a00      	cmp	r2, #0
   8606c:	9209      	str	r2, [sp, #36]	; 0x24
   8606e:	930e      	str	r3, [sp, #56]	; 0x38
   86070:	f2c0 81d2 	blt.w	86418 <_svfprintf_r+0x538>
   86074:	f89a 6000 	ldrb.w	r6, [sl]
   86078:	e781      	b.n	85f7e <_svfprintf_r+0x9e>
   8607a:	f89a 6000 	ldrb.w	r6, [sl]
   8607e:	f047 0720 	orr.w	r7, r7, #32
   86082:	e77c      	b.n	85f7e <_svfprintf_r+0x9e>
   86084:	f047 0710 	orr.w	r7, r7, #16
   86088:	06ba      	lsls	r2, r7, #26
   8608a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8608c:	f140 817d 	bpl.w	8638a <_svfprintf_r+0x4aa>
   86090:	3307      	adds	r3, #7
   86092:	f023 0307 	bic.w	r3, r3, #7
   86096:	461a      	mov	r2, r3
   86098:	685b      	ldr	r3, [r3, #4]
   8609a:	f852 4b08 	ldr.w	r4, [r2], #8
   8609e:	4699      	mov	r9, r3
   860a0:	920e      	str	r2, [sp, #56]	; 0x38
   860a2:	2b00      	cmp	r3, #0
   860a4:	f2c0 857f 	blt.w	86ba6 <_svfprintf_r+0xcc6>
   860a8:	9b07      	ldr	r3, [sp, #28]
   860aa:	3301      	adds	r3, #1
   860ac:	f001 8039 	beq.w	87122 <_svfprintf_r+0x1242>
   860b0:	ea54 0309 	orrs.w	r3, r4, r9
   860b4:	f027 0b80 	bic.w	fp, r7, #128	; 0x80
   860b8:	f000 8505 	beq.w	86ac6 <_svfprintf_r+0xbe6>
   860bc:	2c0a      	cmp	r4, #10
   860be:	f179 0300 	sbcs.w	r3, r9, #0
   860c2:	f080 8793 	bcs.w	86fec <_svfprintf_r+0x110c>
   860c6:	2301      	movs	r3, #1
   860c8:	465f      	mov	r7, fp
   860ca:	3430      	adds	r4, #48	; 0x30
   860cc:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
   860d0:	930b      	str	r3, [sp, #44]	; 0x2c
   860d2:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   860d6:	9a07      	ldr	r2, [sp, #28]
   860d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   860da:	2300      	movs	r3, #0
   860dc:	428a      	cmp	r2, r1
   860de:	bfb8      	it	lt
   860e0:	460a      	movlt	r2, r1
   860e2:	9206      	str	r2, [sp, #24]
   860e4:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   860e8:	930d      	str	r3, [sp, #52]	; 0x34
   860ea:	930f      	str	r3, [sp, #60]	; 0x3c
   860ec:	9313      	str	r3, [sp, #76]	; 0x4c
   860ee:	9310      	str	r3, [sp, #64]	; 0x40
   860f0:	2a00      	cmp	r2, #0
   860f2:	d07c      	beq.n	861ee <_svfprintf_r+0x30e>
   860f4:	9b06      	ldr	r3, [sp, #24]
   860f6:	3301      	adds	r3, #1
   860f8:	9306      	str	r3, [sp, #24]
   860fa:	e078      	b.n	861ee <_svfprintf_r+0x30e>
   860fc:	f047 0710 	orr.w	r7, r7, #16
   86100:	f017 0920 	ands.w	r9, r7, #32
   86104:	f000 8132 	beq.w	8636c <_svfprintf_r+0x48c>
   86108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8610a:	3307      	adds	r3, #7
   8610c:	f023 0307 	bic.w	r3, r3, #7
   86110:	f8d3 9004 	ldr.w	r9, [r3, #4]
   86114:	f853 4b08 	ldr.w	r4, [r3], #8
   86118:	930e      	str	r3, [sp, #56]	; 0x38
   8611a:	2300      	movs	r3, #0
   8611c:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   86120:	2200      	movs	r2, #0
   86122:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   86126:	9a07      	ldr	r2, [sp, #28]
   86128:	1c51      	adds	r1, r2, #1
   8612a:	f000 822a 	beq.w	86582 <_svfprintf_r+0x6a2>
   8612e:	ea54 0109 	orrs.w	r1, r4, r9
   86132:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
   86136:	f040 8223 	bne.w	86580 <_svfprintf_r+0x6a0>
   8613a:	2a00      	cmp	r2, #0
   8613c:	f041 802b 	bne.w	87196 <_svfprintf_r+0x12b6>
   86140:	2b00      	cmp	r3, #0
   86142:	f040 84c5 	bne.w	86ad0 <_svfprintf_r+0xbf0>
   86146:	f01b 0301 	ands.w	r3, fp, #1
   8614a:	930b      	str	r3, [sp, #44]	; 0x2c
   8614c:	f000 8554 	beq.w	86bf8 <_svfprintf_r+0xd18>
   86150:	2330      	movs	r3, #48	; 0x30
   86152:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   86156:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
   8615a:	e7bc      	b.n	860d6 <_svfprintf_r+0x1f6>
   8615c:	ebba 0605 	subs.w	r6, sl, r5
   86160:	f000 80ba 	beq.w	862d8 <_svfprintf_r+0x3f8>
   86164:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   86166:	e9c8 5600 	strd	r5, r6, [r8]
   8616a:	4433      	add	r3, r6
   8616c:	932a      	str	r3, [sp, #168]	; 0xa8
   8616e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86170:	3301      	adds	r3, #1
   86172:	2b07      	cmp	r3, #7
   86174:	9329      	str	r3, [sp, #164]	; 0xa4
   86176:	dc05      	bgt.n	86184 <_svfprintf_r+0x2a4>
   86178:	f108 0808 	add.w	r8, r8, #8
   8617c:	9b08      	ldr	r3, [sp, #32]
   8617e:	4433      	add	r3, r6
   86180:	9308      	str	r3, [sp, #32]
   86182:	e6e8      	b.n	85f56 <_svfprintf_r+0x76>
   86184:	990c      	ldr	r1, [sp, #48]	; 0x30
   86186:	980a      	ldr	r0, [sp, #40]	; 0x28
   86188:	aa28      	add	r2, sp, #160	; 0xa0
   8618a:	f003 fc67 	bl	89a5c <__ssprint_r>
   8618e:	b980      	cbnz	r0, 861b2 <_svfprintf_r+0x2d2>
   86190:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86194:	e7f2      	b.n	8617c <_svfprintf_r+0x29c>
   86196:	990c      	ldr	r1, [sp, #48]	; 0x30
   86198:	980a      	ldr	r0, [sp, #40]	; 0x28
   8619a:	aa28      	add	r2, sp, #160	; 0xa0
   8619c:	f003 fc5e 	bl	89a5c <__ssprint_r>
   861a0:	2800      	cmp	r0, #0
   861a2:	f000 808a 	beq.w	862ba <_svfprintf_r+0x3da>
   861a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   861a8:	b11b      	cbz	r3, 861b2 <_svfprintf_r+0x2d2>
   861aa:	990d      	ldr	r1, [sp, #52]	; 0x34
   861ac:	980a      	ldr	r0, [sp, #40]	; 0x28
   861ae:	f002 fc5b 	bl	88a68 <_free_r>
   861b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   861b4:	899b      	ldrh	r3, [r3, #12]
   861b6:	f013 0f40 	tst.w	r3, #64	; 0x40
   861ba:	9b08      	ldr	r3, [sp, #32]
   861bc:	bf18      	it	ne
   861be:	f04f 33ff 	movne.w	r3, #4294967295
   861c2:	9308      	str	r3, [sp, #32]
   861c4:	9808      	ldr	r0, [sp, #32]
   861c6:	b055      	add	sp, #340	; 0x154
   861c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   861cc:	2e00      	cmp	r6, #0
   861ce:	f000 8083 	beq.w	862d8 <_svfprintf_r+0x3f8>
   861d2:	2301      	movs	r3, #1
   861d4:	2200      	movs	r2, #0
   861d6:	f88d 60ec 	strb.w	r6, [sp, #236]	; 0xec
   861da:	9306      	str	r3, [sp, #24]
   861dc:	ad3b      	add	r5, sp, #236	; 0xec
   861de:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   861e2:	930b      	str	r3, [sp, #44]	; 0x2c
   861e4:	920d      	str	r2, [sp, #52]	; 0x34
   861e6:	9207      	str	r2, [sp, #28]
   861e8:	920f      	str	r2, [sp, #60]	; 0x3c
   861ea:	9213      	str	r2, [sp, #76]	; 0x4c
   861ec:	9210      	str	r2, [sp, #64]	; 0x40
   861ee:	f017 0302 	ands.w	r3, r7, #2
   861f2:	d002      	beq.n	861fa <_svfprintf_r+0x31a>
   861f4:	9906      	ldr	r1, [sp, #24]
   861f6:	3102      	adds	r1, #2
   861f8:	9106      	str	r1, [sp, #24]
   861fa:	f017 0b84 	ands.w	fp, r7, #132	; 0x84
   861fe:	d107      	bne.n	86210 <_svfprintf_r+0x330>
   86200:	9909      	ldr	r1, [sp, #36]	; 0x24
   86202:	9806      	ldr	r0, [sp, #24]
   86204:	eba1 0900 	sub.w	r9, r1, r0
   86208:	f1b9 0f00 	cmp.w	r9, #0
   8620c:	f300 8336 	bgt.w	8687c <_svfprintf_r+0x99c>
   86210:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86212:	b182      	cbz	r2, 86236 <_svfprintf_r+0x356>
   86214:	2201      	movs	r2, #1
   86216:	f8c8 2004 	str.w	r2, [r8, #4]
   8621a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   8621c:	3401      	adds	r4, #1
   8621e:	3201      	adds	r2, #1
   86220:	f10d 0183 	add.w	r1, sp, #131	; 0x83
   86224:	2a07      	cmp	r2, #7
   86226:	942a      	str	r4, [sp, #168]	; 0xa8
   86228:	9229      	str	r2, [sp, #164]	; 0xa4
   8622a:	f8c8 1000 	str.w	r1, [r8]
   8622e:	f300 8369 	bgt.w	86904 <_svfprintf_r+0xa24>
   86232:	f108 0808 	add.w	r8, r8, #8
   86236:	b17b      	cbz	r3, 86258 <_svfprintf_r+0x378>
   86238:	2302      	movs	r3, #2
   8623a:	f8c8 3004 	str.w	r3, [r8, #4]
   8623e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86240:	3402      	adds	r4, #2
   86242:	3301      	adds	r3, #1
   86244:	aa21      	add	r2, sp, #132	; 0x84
   86246:	2b07      	cmp	r3, #7
   86248:	942a      	str	r4, [sp, #168]	; 0xa8
   8624a:	9329      	str	r3, [sp, #164]	; 0xa4
   8624c:	f8c8 2000 	str.w	r2, [r8]
   86250:	f300 836c 	bgt.w	8692c <_svfprintf_r+0xa4c>
   86254:	f108 0808 	add.w	r8, r8, #8
   86258:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
   8625c:	f000 822e 	beq.w	866bc <_svfprintf_r+0x7dc>
   86260:	9b07      	ldr	r3, [sp, #28]
   86262:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86264:	eba3 0b02 	sub.w	fp, r3, r2
   86268:	f1bb 0f00 	cmp.w	fp, #0
   8626c:	f300 8271 	bgt.w	86752 <_svfprintf_r+0x872>
   86270:	05fb      	lsls	r3, r7, #23
   86272:	f100 81c5 	bmi.w	86600 <_svfprintf_r+0x720>
   86276:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86278:	f8c8 5000 	str.w	r5, [r8]
   8627c:	441c      	add	r4, r3
   8627e:	f8c8 3004 	str.w	r3, [r8, #4]
   86282:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86284:	942a      	str	r4, [sp, #168]	; 0xa8
   86286:	3301      	adds	r3, #1
   86288:	2b07      	cmp	r3, #7
   8628a:	9329      	str	r3, [sp, #164]	; 0xa4
   8628c:	f300 82ea 	bgt.w	86864 <_svfprintf_r+0x984>
   86290:	f108 0808 	add.w	r8, r8, #8
   86294:	077b      	lsls	r3, r7, #29
   86296:	d505      	bpl.n	862a4 <_svfprintf_r+0x3c4>
   86298:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8629a:	9a06      	ldr	r2, [sp, #24]
   8629c:	1a9d      	subs	r5, r3, r2
   8629e:	2d00      	cmp	r5, #0
   862a0:	f300 8350 	bgt.w	86944 <_svfprintf_r+0xa64>
   862a4:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   862a8:	9906      	ldr	r1, [sp, #24]
   862aa:	428a      	cmp	r2, r1
   862ac:	bfac      	ite	ge
   862ae:	189b      	addge	r3, r3, r2
   862b0:	185b      	addlt	r3, r3, r1
   862b2:	9308      	str	r3, [sp, #32]
   862b4:	2c00      	cmp	r4, #0
   862b6:	f47f af6e 	bne.w	86196 <_svfprintf_r+0x2b6>
   862ba:	2300      	movs	r3, #0
   862bc:	9329      	str	r3, [sp, #164]	; 0xa4
   862be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   862c0:	b11b      	cbz	r3, 862ca <_svfprintf_r+0x3ea>
   862c2:	990d      	ldr	r1, [sp, #52]	; 0x34
   862c4:	980a      	ldr	r0, [sp, #40]	; 0x28
   862c6:	f002 fbcf 	bl	88a68 <_free_r>
   862ca:	4655      	mov	r5, sl
   862cc:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   862d0:	782b      	ldrb	r3, [r5, #0]
   862d2:	2b00      	cmp	r3, #0
   862d4:	f47f ae32 	bne.w	85f3c <_svfprintf_r+0x5c>
   862d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   862da:	2b00      	cmp	r3, #0
   862dc:	f43f af69 	beq.w	861b2 <_svfprintf_r+0x2d2>
   862e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   862e2:	980a      	ldr	r0, [sp, #40]	; 0x28
   862e4:	4621      	mov	r1, r4
   862e6:	aa28      	add	r2, sp, #160	; 0xa0
   862e8:	f003 fbb8 	bl	89a5c <__ssprint_r>
   862ec:	89a3      	ldrh	r3, [r4, #12]
   862ee:	e762      	b.n	861b6 <_svfprintf_r+0x2d6>
   862f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   862f2:	3307      	adds	r3, #7
   862f4:	f023 0207 	bic.w	r2, r3, #7
   862f8:	e8f2 3402 	ldrd	r3, r4, [r2], #8
   862fc:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   86300:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   86304:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   86308:	4699      	mov	r9, r3
   8630a:	4618      	mov	r0, r3
   8630c:	920e      	str	r2, [sp, #56]	; 0x38
   8630e:	4621      	mov	r1, r4
   86310:	f04f 32ff 	mov.w	r2, #4294967295
   86314:	4bb6      	ldr	r3, [pc, #728]	; (865f0 <_svfprintf_r+0x710>)
   86316:	f006 f949 	bl	8c5ac <__aeabi_dcmpun>
   8631a:	2800      	cmp	r0, #0
   8631c:	f040 8496 	bne.w	86c4c <_svfprintf_r+0xd6c>
   86320:	4648      	mov	r0, r9
   86322:	4621      	mov	r1, r4
   86324:	f04f 32ff 	mov.w	r2, #4294967295
   86328:	4bb1      	ldr	r3, [pc, #708]	; (865f0 <_svfprintf_r+0x710>)
   8632a:	f006 f921 	bl	8c570 <__aeabi_dcmple>
   8632e:	2800      	cmp	r0, #0
   86330:	f040 848c 	bne.w	86c4c <_svfprintf_r+0xd6c>
   86334:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86338:	2200      	movs	r2, #0
   8633a:	2300      	movs	r3, #0
   8633c:	f006 f90e 	bl	8c55c <__aeabi_dcmplt>
   86340:	2800      	cmp	r0, #0
   86342:	f040 87a6 	bne.w	87292 <_svfprintf_r+0x13b2>
   86346:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   8634a:	2100      	movs	r1, #0
   8634c:	2003      	movs	r0, #3
   8634e:	4da9      	ldr	r5, [pc, #676]	; (865f4 <_svfprintf_r+0x714>)
   86350:	4ba9      	ldr	r3, [pc, #676]	; (865f8 <_svfprintf_r+0x718>)
   86352:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   86356:	910d      	str	r1, [sp, #52]	; 0x34
   86358:	9006      	str	r0, [sp, #24]
   8635a:	2e47      	cmp	r6, #71	; 0x47
   8635c:	bfc8      	it	gt
   8635e:	461d      	movgt	r5, r3
   86360:	9107      	str	r1, [sp, #28]
   86362:	900b      	str	r0, [sp, #44]	; 0x2c
   86364:	910f      	str	r1, [sp, #60]	; 0x3c
   86366:	9113      	str	r1, [sp, #76]	; 0x4c
   86368:	9110      	str	r1, [sp, #64]	; 0x40
   8636a:	e6c1      	b.n	860f0 <_svfprintf_r+0x210>
   8636c:	f017 0310 	ands.w	r3, r7, #16
   86370:	f040 8462 	bne.w	86c38 <_svfprintf_r+0xd58>
   86374:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   86378:	f000 877b 	beq.w	87272 <_svfprintf_r+0x1392>
   8637c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8637e:	4699      	mov	r9, r3
   86380:	f852 4b04 	ldr.w	r4, [r2], #4
   86384:	920e      	str	r2, [sp, #56]	; 0x38
   86386:	b2a4      	uxth	r4, r4
   86388:	e6c7      	b.n	8611a <_svfprintf_r+0x23a>
   8638a:	f853 4b04 	ldr.w	r4, [r3], #4
   8638e:	930e      	str	r3, [sp, #56]	; 0x38
   86390:	06fb      	lsls	r3, r7, #27
   86392:	f100 8441 	bmi.w	86c18 <_svfprintf_r+0xd38>
   86396:	067d      	lsls	r5, r7, #25
   86398:	f140 843b 	bpl.w	86c12 <_svfprintf_r+0xd32>
   8639c:	f344 39c0 	sbfx	r9, r4, #15, #1
   863a0:	464b      	mov	r3, r9
   863a2:	b224      	sxth	r4, r4
   863a4:	e67d      	b.n	860a2 <_svfprintf_r+0x1c2>
   863a6:	2001      	movs	r0, #1
   863a8:	2200      	movs	r2, #0
   863aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   863ac:	9006      	str	r0, [sp, #24]
   863ae:	f853 1b04 	ldr.w	r1, [r3], #4
   863b2:	ad3b      	add	r5, sp, #236	; 0xec
   863b4:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   863b8:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
   863bc:	930e      	str	r3, [sp, #56]	; 0x38
   863be:	900b      	str	r0, [sp, #44]	; 0x2c
   863c0:	e710      	b.n	861e4 <_svfprintf_r+0x304>
   863c2:	f04f 0900 	mov.w	r9, #0
   863c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   863c8:	9b07      	ldr	r3, [sp, #28]
   863ca:	f854 5b04 	ldr.w	r5, [r4], #4
   863ce:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   863d2:	2d00      	cmp	r5, #0
   863d4:	f000 86ee 	beq.w	871b4 <_svfprintf_r+0x12d4>
   863d8:	1c5a      	adds	r2, r3, #1
   863da:	f000 8560 	beq.w	86e9e <_svfprintf_r+0xfbe>
   863de:	461a      	mov	r2, r3
   863e0:	4649      	mov	r1, r9
   863e2:	4628      	mov	r0, r5
   863e4:	f002 fef8 	bl	891d8 <memchr>
   863e8:	900d      	str	r0, [sp, #52]	; 0x34
   863ea:	2800      	cmp	r0, #0
   863ec:	f001 809e 	beq.w	8752c <_svfprintf_r+0x164c>
   863f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   863f2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   863f6:	1b5b      	subs	r3, r3, r5
   863f8:	930b      	str	r3, [sp, #44]	; 0x2c
   863fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   863fe:	f8cd 901c 	str.w	r9, [sp, #28]
   86402:	940e      	str	r4, [sp, #56]	; 0x38
   86404:	9306      	str	r3, [sp, #24]
   86406:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   8640a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   8640e:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   86412:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   86416:	e66b      	b.n	860f0 <_svfprintf_r+0x210>
   86418:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8641a:	425b      	negs	r3, r3
   8641c:	9309      	str	r3, [sp, #36]	; 0x24
   8641e:	f89a 6000 	ldrb.w	r6, [sl]
   86422:	f047 0704 	orr.w	r7, r7, #4
   86426:	e5aa      	b.n	85f7e <_svfprintf_r+0x9e>
   86428:	f047 0b10 	orr.w	fp, r7, #16
   8642c:	f01b 0920 	ands.w	r9, fp, #32
   86430:	f000 83aa 	beq.w	86b88 <_svfprintf_r+0xca8>
   86434:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86436:	3307      	adds	r3, #7
   86438:	f023 0307 	bic.w	r3, r3, #7
   8643c:	461a      	mov	r2, r3
   8643e:	f852 4b08 	ldr.w	r4, [r2], #8
   86442:	f8d3 9004 	ldr.w	r9, [r3, #4]
   86446:	920e      	str	r2, [sp, #56]	; 0x38
   86448:	2301      	movs	r3, #1
   8644a:	e669      	b.n	86120 <_svfprintf_r+0x240>
   8644c:	2230      	movs	r2, #48	; 0x30
   8644e:	2678      	movs	r6, #120	; 0x78
   86450:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86452:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   86456:	f853 4b04 	ldr.w	r4, [r3], #4
   8645a:	4a68      	ldr	r2, [pc, #416]	; (865fc <_svfprintf_r+0x71c>)
   8645c:	930e      	str	r3, [sp, #56]	; 0x38
   8645e:	f04f 0900 	mov.w	r9, #0
   86462:	2302      	movs	r3, #2
   86464:	f047 0b02 	orr.w	fp, r7, #2
   86468:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   8646c:	9218      	str	r2, [sp, #96]	; 0x60
   8646e:	e657      	b.n	86120 <_svfprintf_r+0x240>
   86470:	06bd      	lsls	r5, r7, #26
   86472:	f100 83d6 	bmi.w	86c22 <_svfprintf_r+0xd42>
   86476:	06fc      	lsls	r4, r7, #27
   86478:	f100 8693 	bmi.w	871a2 <_svfprintf_r+0x12c2>
   8647c:	0678      	lsls	r0, r7, #25
   8647e:	f100 875d 	bmi.w	8733c <_svfprintf_r+0x145c>
   86482:	05b9      	lsls	r1, r7, #22
   86484:	f140 868d 	bpl.w	871a2 <_svfprintf_r+0x12c2>
   86488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8648a:	9908      	ldr	r1, [sp, #32]
   8648c:	f853 2b04 	ldr.w	r2, [r3], #4
   86490:	4655      	mov	r5, sl
   86492:	7011      	strb	r1, [r2, #0]
   86494:	930e      	str	r3, [sp, #56]	; 0x38
   86496:	e71b      	b.n	862d0 <_svfprintf_r+0x3f0>
   86498:	f89a 6000 	ldrb.w	r6, [sl]
   8649c:	2e6c      	cmp	r6, #108	; 0x6c
   8649e:	bf03      	ittte	eq
   864a0:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   864a4:	f047 0720 	orreq.w	r7, r7, #32
   864a8:	f10a 0a01 	addeq.w	sl, sl, #1
   864ac:	f047 0710 	orrne.w	r7, r7, #16
   864b0:	e565      	b.n	85f7e <_svfprintf_r+0x9e>
   864b2:	f89a 6000 	ldrb.w	r6, [sl]
   864b6:	2e68      	cmp	r6, #104	; 0x68
   864b8:	bf03      	ittte	eq
   864ba:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   864be:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   864c2:	f10a 0a01 	addeq.w	sl, sl, #1
   864c6:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   864ca:	e558      	b.n	85f7e <_svfprintf_r+0x9e>
   864cc:	f89a 6000 	ldrb.w	r6, [sl]
   864d0:	f047 0708 	orr.w	r7, r7, #8
   864d4:	e553      	b.n	85f7e <_svfprintf_r+0x9e>
   864d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   864d8:	4630      	mov	r0, r6
   864da:	f002 fbc5 	bl	88c68 <_localeconv_r>
   864de:	6843      	ldr	r3, [r0, #4]
   864e0:	4618      	mov	r0, r3
   864e2:	931b      	str	r3, [sp, #108]	; 0x6c
   864e4:	f7ff fc9a 	bl	85e1c <strlen>
   864e8:	4603      	mov	r3, r0
   864ea:	4630      	mov	r0, r6
   864ec:	931c      	str	r3, [sp, #112]	; 0x70
   864ee:	461e      	mov	r6, r3
   864f0:	f002 fbba 	bl	88c68 <_localeconv_r>
   864f4:	6883      	ldr	r3, [r0, #8]
   864f6:	9319      	str	r3, [sp, #100]	; 0x64
   864f8:	2e00      	cmp	r6, #0
   864fa:	f43f adbb 	beq.w	86074 <_svfprintf_r+0x194>
   864fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
   86500:	2b00      	cmp	r3, #0
   86502:	f43f adb7 	beq.w	86074 <_svfprintf_r+0x194>
   86506:	9b19      	ldr	r3, [sp, #100]	; 0x64
   86508:	781b      	ldrb	r3, [r3, #0]
   8650a:	2b00      	cmp	r3, #0
   8650c:	f43f adb2 	beq.w	86074 <_svfprintf_r+0x194>
   86510:	f89a 6000 	ldrb.w	r6, [sl]
   86514:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   86518:	e531      	b.n	85f7e <_svfprintf_r+0x9e>
   8651a:	f89a 6000 	ldrb.w	r6, [sl]
   8651e:	f047 0701 	orr.w	r7, r7, #1
   86522:	e52c      	b.n	85f7e <_svfprintf_r+0x9e>
   86524:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
   86528:	2b00      	cmp	r3, #0
   8652a:	f47f ada3 	bne.w	86074 <_svfprintf_r+0x194>
   8652e:	f89a 6000 	ldrb.w	r6, [sl]
   86532:	f88d 4083 	strb.w	r4, [sp, #131]	; 0x83
   86536:	e522      	b.n	85f7e <_svfprintf_r+0x9e>
   86538:	f89a 6000 	ldrb.w	r6, [sl]
   8653c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   86540:	e51d      	b.n	85f7e <_svfprintf_r+0x9e>
   86542:	4652      	mov	r2, sl
   86544:	f812 6b01 	ldrb.w	r6, [r2], #1
   86548:	2e2a      	cmp	r6, #42	; 0x2a
   8654a:	f001 81eb 	beq.w	87924 <_svfprintf_r+0x1a44>
   8654e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86552:	2b09      	cmp	r3, #9
   86554:	4692      	mov	sl, r2
   86556:	bf98      	it	ls
   86558:	2200      	movls	r2, #0
   8655a:	f201 8003 	bhi.w	87564 <_svfprintf_r+0x1684>
   8655e:	f81a 6b01 	ldrb.w	r6, [sl], #1
   86562:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86566:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   8656a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8656e:	2b09      	cmp	r3, #9
   86570:	d9f5      	bls.n	8655e <_svfprintf_r+0x67e>
   86572:	9207      	str	r2, [sp, #28]
   86574:	e505      	b.n	85f82 <_svfprintf_r+0xa2>
   86576:	f89a 6000 	ldrb.w	r6, [sl]
   8657a:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   8657e:	e4fe      	b.n	85f7e <_svfprintf_r+0x9e>
   86580:	46bb      	mov	fp, r7
   86582:	2b01      	cmp	r3, #1
   86584:	f43f ad9a 	beq.w	860bc <_svfprintf_r+0x1dc>
   86588:	2b02      	cmp	r3, #2
   8658a:	ad54      	add	r5, sp, #336	; 0x150
   8658c:	d112      	bne.n	865b4 <_svfprintf_r+0x6d4>
   8658e:	9a18      	ldr	r2, [sp, #96]	; 0x60
   86590:	f004 030f 	and.w	r3, r4, #15
   86594:	5cd3      	ldrb	r3, [r2, r3]
   86596:	0924      	lsrs	r4, r4, #4
   86598:	ea44 7409 	orr.w	r4, r4, r9, lsl #28
   8659c:	ea4f 1919 	mov.w	r9, r9, lsr #4
   865a0:	f805 3d01 	strb.w	r3, [r5, #-1]!
   865a4:	ea54 0309 	orrs.w	r3, r4, r9
   865a8:	d1f2      	bne.n	86590 <_svfprintf_r+0x6b0>
   865aa:	ab54      	add	r3, sp, #336	; 0x150
   865ac:	1b5b      	subs	r3, r3, r5
   865ae:	465f      	mov	r7, fp
   865b0:	930b      	str	r3, [sp, #44]	; 0x2c
   865b2:	e590      	b.n	860d6 <_svfprintf_r+0x1f6>
   865b4:	f004 0307 	and.w	r3, r4, #7
   865b8:	08e4      	lsrs	r4, r4, #3
   865ba:	ea44 7449 	orr.w	r4, r4, r9, lsl #29
   865be:	ea4f 09d9 	mov.w	r9, r9, lsr #3
   865c2:	3330      	adds	r3, #48	; 0x30
   865c4:	ea54 0109 	orrs.w	r1, r4, r9
   865c8:	462a      	mov	r2, r5
   865ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
   865ce:	d1f1      	bne.n	865b4 <_svfprintf_r+0x6d4>
   865d0:	f01b 0f01 	tst.w	fp, #1
   865d4:	d0e9      	beq.n	865aa <_svfprintf_r+0x6ca>
   865d6:	2b30      	cmp	r3, #48	; 0x30
   865d8:	d0e7      	beq.n	865aa <_svfprintf_r+0x6ca>
   865da:	2330      	movs	r3, #48	; 0x30
   865dc:	3a02      	subs	r2, #2
   865de:	f805 3c01 	strb.w	r3, [r5, #-1]
   865e2:	ab54      	add	r3, sp, #336	; 0x150
   865e4:	1a9b      	subs	r3, r3, r2
   865e6:	465f      	mov	r7, fp
   865e8:	4615      	mov	r5, r2
   865ea:	930b      	str	r3, [sp, #44]	; 0x2c
   865ec:	e573      	b.n	860d6 <_svfprintf_r+0x1f6>
   865ee:	bf00      	nop
   865f0:	7fefffff 	.word	0x7fefffff
   865f4:	0008c994 	.word	0x0008c994
   865f8:	0008c998 	.word	0x0008c998
   865fc:	0008c9a4 	.word	0x0008c9a4
   86600:	2e65      	cmp	r6, #101	; 0x65
   86602:	f340 80e9 	ble.w	867d8 <_svfprintf_r+0x8f8>
   86606:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8660a:	2200      	movs	r2, #0
   8660c:	2300      	movs	r3, #0
   8660e:	f005 ff9b 	bl	8c548 <__aeabi_dcmpeq>
   86612:	2800      	cmp	r0, #0
   86614:	f000 81d2 	beq.w	869bc <_svfprintf_r+0xadc>
   86618:	2301      	movs	r3, #1
   8661a:	f8c8 3004 	str.w	r3, [r8, #4]
   8661e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86620:	4abf      	ldr	r2, [pc, #764]	; (86920 <_svfprintf_r+0xa40>)
   86622:	3301      	adds	r3, #1
   86624:	3401      	adds	r4, #1
   86626:	2b07      	cmp	r3, #7
   86628:	942a      	str	r4, [sp, #168]	; 0xa8
   8662a:	9329      	str	r3, [sp, #164]	; 0xa4
   8662c:	f8c8 2000 	str.w	r2, [r8]
   86630:	f300 857a 	bgt.w	87128 <_svfprintf_r+0x1248>
   86634:	f108 0808 	add.w	r8, r8, #8
   86638:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8663a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8663c:	4293      	cmp	r3, r2
   8663e:	f280 82d7 	bge.w	86bf0 <_svfprintf_r+0xd10>
   86642:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86644:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86646:	441c      	add	r4, r3
   86648:	e9c8 2300 	strd	r2, r3, [r8]
   8664c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8664e:	942a      	str	r4, [sp, #168]	; 0xa8
   86650:	3301      	adds	r3, #1
   86652:	2b07      	cmp	r3, #7
   86654:	9329      	str	r3, [sp, #164]	; 0xa4
   86656:	f300 83dd 	bgt.w	86e14 <_svfprintf_r+0xf34>
   8665a:	f108 0808 	add.w	r8, r8, #8
   8665e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86660:	1e5d      	subs	r5, r3, #1
   86662:	2d00      	cmp	r5, #0
   86664:	f77f ae16 	ble.w	86294 <_svfprintf_r+0x3b4>
   86668:	2d10      	cmp	r5, #16
   8666a:	f341 8141 	ble.w	878f0 <_svfprintf_r+0x1a10>
   8666e:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 86924 <_svfprintf_r+0xa44>
   86672:	4622      	mov	r2, r4
   86674:	4649      	mov	r1, r9
   86676:	2610      	movs	r6, #16
   86678:	46b9      	mov	r9, r7
   8667a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8667c:	460f      	mov	r7, r1
   8667e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   86682:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86684:	e005      	b.n	86692 <_svfprintf_r+0x7b2>
   86686:	f108 0808 	add.w	r8, r8, #8
   8668a:	3d10      	subs	r5, #16
   8668c:	2d10      	cmp	r5, #16
   8668e:	f340 8558 	ble.w	87142 <_svfprintf_r+0x1262>
   86692:	3301      	adds	r3, #1
   86694:	3210      	adds	r2, #16
   86696:	2b07      	cmp	r3, #7
   86698:	e9c8 7600 	strd	r7, r6, [r8]
   8669c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   866a0:	ddf1      	ble.n	86686 <_svfprintf_r+0x7a6>
   866a2:	4621      	mov	r1, r4
   866a4:	4658      	mov	r0, fp
   866a6:	aa28      	add	r2, sp, #160	; 0xa0
   866a8:	f003 f9d8 	bl	89a5c <__ssprint_r>
   866ac:	2800      	cmp	r0, #0
   866ae:	f47f ad7a 	bne.w	861a6 <_svfprintf_r+0x2c6>
   866b2:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   866b6:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   866ba:	e7e6      	b.n	8668a <_svfprintf_r+0x7aa>
   866bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   866be:	9a06      	ldr	r2, [sp, #24]
   866c0:	eba3 0b02 	sub.w	fp, r3, r2
   866c4:	f1bb 0f00 	cmp.w	fp, #0
   866c8:	f77f adca 	ble.w	86260 <_svfprintf_r+0x380>
   866cc:	f1bb 0f10 	cmp.w	fp, #16
   866d0:	f341 8005 	ble.w	876de <_svfprintf_r+0x17fe>
   866d4:	f8df 924c 	ldr.w	r9, [pc, #588]	; 86924 <_svfprintf_r+0xa44>
   866d8:	4641      	mov	r1, r8
   866da:	4620      	mov	r0, r4
   866dc:	46a8      	mov	r8, r5
   866de:	464c      	mov	r4, r9
   866e0:	2310      	movs	r3, #16
   866e2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   866e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   866e6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   866ea:	e006      	b.n	866fa <_svfprintf_r+0x81a>
   866ec:	f1ab 0b10 	sub.w	fp, fp, #16
   866f0:	f1bb 0f10 	cmp.w	fp, #16
   866f4:	f101 0108 	add.w	r1, r1, #8
   866f8:	dd19      	ble.n	8672e <_svfprintf_r+0x84e>
   866fa:	3201      	adds	r2, #1
   866fc:	3010      	adds	r0, #16
   866fe:	2a07      	cmp	r2, #7
   86700:	e9c1 4300 	strd	r4, r3, [r1]
   86704:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   86708:	ddf0      	ble.n	866ec <_svfprintf_r+0x80c>
   8670a:	4629      	mov	r1, r5
   8670c:	4648      	mov	r0, r9
   8670e:	aa28      	add	r2, sp, #160	; 0xa0
   86710:	f003 f9a4 	bl	89a5c <__ssprint_r>
   86714:	2800      	cmp	r0, #0
   86716:	f47f ad46 	bne.w	861a6 <_svfprintf_r+0x2c6>
   8671a:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   8671e:	f1ab 0b10 	sub.w	fp, fp, #16
   86722:	f1bb 0f10 	cmp.w	fp, #16
   86726:	f04f 0310 	mov.w	r3, #16
   8672a:	a92b      	add	r1, sp, #172	; 0xac
   8672c:	dce5      	bgt.n	866fa <_svfprintf_r+0x81a>
   8672e:	4645      	mov	r5, r8
   86730:	46a1      	mov	r9, r4
   86732:	4688      	mov	r8, r1
   86734:	4604      	mov	r4, r0
   86736:	3201      	adds	r2, #1
   86738:	445c      	add	r4, fp
   8673a:	2a07      	cmp	r2, #7
   8673c:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   86740:	f8c8 9000 	str.w	r9, [r8]
   86744:	f8c8 b004 	str.w	fp, [r8, #4]
   86748:	f300 8518 	bgt.w	8717c <_svfprintf_r+0x129c>
   8674c:	f108 0808 	add.w	r8, r8, #8
   86750:	e586      	b.n	86260 <_svfprintf_r+0x380>
   86752:	f1bb 0f10 	cmp.w	fp, #16
   86756:	f340 8597 	ble.w	87288 <_svfprintf_r+0x13a8>
   8675a:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 86924 <_svfprintf_r+0xa44>
   8675e:	4641      	mov	r1, r8
   86760:	4620      	mov	r0, r4
   86762:	46a8      	mov	r8, r5
   86764:	464c      	mov	r4, r9
   86766:	2310      	movs	r3, #16
   86768:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   8676a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   8676c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   86770:	e006      	b.n	86780 <_svfprintf_r+0x8a0>
   86772:	f1ab 0b10 	sub.w	fp, fp, #16
   86776:	f1bb 0f10 	cmp.w	fp, #16
   8677a:	f101 0108 	add.w	r1, r1, #8
   8677e:	dd19      	ble.n	867b4 <_svfprintf_r+0x8d4>
   86780:	3201      	adds	r2, #1
   86782:	3010      	adds	r0, #16
   86784:	2a07      	cmp	r2, #7
   86786:	e9c1 4300 	strd	r4, r3, [r1]
   8678a:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   8678e:	ddf0      	ble.n	86772 <_svfprintf_r+0x892>
   86790:	4629      	mov	r1, r5
   86792:	4648      	mov	r0, r9
   86794:	aa28      	add	r2, sp, #160	; 0xa0
   86796:	f003 f961 	bl	89a5c <__ssprint_r>
   8679a:	2800      	cmp	r0, #0
   8679c:	f47f ad03 	bne.w	861a6 <_svfprintf_r+0x2c6>
   867a0:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   867a4:	f1ab 0b10 	sub.w	fp, fp, #16
   867a8:	f1bb 0f10 	cmp.w	fp, #16
   867ac:	f04f 0310 	mov.w	r3, #16
   867b0:	a92b      	add	r1, sp, #172	; 0xac
   867b2:	dce5      	bgt.n	86780 <_svfprintf_r+0x8a0>
   867b4:	4645      	mov	r5, r8
   867b6:	46a1      	mov	r9, r4
   867b8:	4688      	mov	r8, r1
   867ba:	4604      	mov	r4, r0
   867bc:	3201      	adds	r2, #1
   867be:	445c      	add	r4, fp
   867c0:	2a07      	cmp	r2, #7
   867c2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   867c6:	f8c8 9000 	str.w	r9, [r8]
   867ca:	f8c8 b004 	str.w	fp, [r8, #4]
   867ce:	f300 81ce 	bgt.w	86b6e <_svfprintf_r+0xc8e>
   867d2:	f108 0808 	add.w	r8, r8, #8
   867d6:	e54b      	b.n	86270 <_svfprintf_r+0x390>
   867d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   867da:	2b01      	cmp	r3, #1
   867dc:	f340 817e 	ble.w	86adc <_svfprintf_r+0xbfc>
   867e0:	2301      	movs	r3, #1
   867e2:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   867e4:	3401      	adds	r4, #1
   867e6:	441e      	add	r6, r3
   867e8:	2e07      	cmp	r6, #7
   867ea:	f8c8 5000 	str.w	r5, [r8]
   867ee:	942a      	str	r4, [sp, #168]	; 0xa8
   867f0:	f8c8 3004 	str.w	r3, [r8, #4]
   867f4:	9629      	str	r6, [sp, #164]	; 0xa4
   867f6:	f300 81e1 	bgt.w	86bbc <_svfprintf_r+0xcdc>
   867fa:	f108 0808 	add.w	r8, r8, #8
   867fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86800:	3601      	adds	r6, #1
   86802:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86804:	441c      	add	r4, r3
   86806:	2e07      	cmp	r6, #7
   86808:	e9c8 2300 	strd	r2, r3, [r8]
   8680c:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   86810:	f300 81e1 	bgt.w	86bd6 <_svfprintf_r+0xcf6>
   86814:	f108 0808 	add.w	r8, r8, #8
   86818:	2200      	movs	r2, #0
   8681a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8681e:	2300      	movs	r3, #0
   86820:	f005 fe92 	bl	8c548 <__aeabi_dcmpeq>
   86824:	2800      	cmp	r0, #0
   86826:	f040 8176 	bne.w	86b16 <_svfprintf_r+0xc36>
   8682a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8682c:	3601      	adds	r6, #1
   8682e:	3b01      	subs	r3, #1
   86830:	3501      	adds	r5, #1
   86832:	441c      	add	r4, r3
   86834:	2e07      	cmp	r6, #7
   86836:	f8c8 5000 	str.w	r5, [r8]
   8683a:	9629      	str	r6, [sp, #164]	; 0xa4
   8683c:	f8c8 3004 	str.w	r3, [r8, #4]
   86840:	942a      	str	r4, [sp, #168]	; 0xa8
   86842:	f300 815b 	bgt.w	86afc <_svfprintf_r+0xc1c>
   86846:	f108 0808 	add.w	r8, r8, #8
   8684a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   8684c:	3601      	adds	r6, #1
   8684e:	441c      	add	r4, r3
   86850:	f8c8 3004 	str.w	r3, [r8, #4]
   86854:	2e07      	cmp	r6, #7
   86856:	ab24      	add	r3, sp, #144	; 0x90
   86858:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   8685c:	f8c8 3000 	str.w	r3, [r8]
   86860:	f77f ad16 	ble.w	86290 <_svfprintf_r+0x3b0>
   86864:	990c      	ldr	r1, [sp, #48]	; 0x30
   86866:	980a      	ldr	r0, [sp, #40]	; 0x28
   86868:	aa28      	add	r2, sp, #160	; 0xa0
   8686a:	f003 f8f7 	bl	89a5c <__ssprint_r>
   8686e:	2800      	cmp	r0, #0
   86870:	f47f ac99 	bne.w	861a6 <_svfprintf_r+0x2c6>
   86874:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86876:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8687a:	e50b      	b.n	86294 <_svfprintf_r+0x3b4>
   8687c:	f1b9 0f10 	cmp.w	r9, #16
   86880:	f340 8650 	ble.w	87524 <_svfprintf_r+0x1644>
   86884:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   86888:	4640      	mov	r0, r8
   8688a:	e9cd 361d 	strd	r3, r6, [sp, #116]	; 0x74
   8688e:	46b8      	mov	r8, r7
   86890:	2410      	movs	r4, #16
   86892:	464f      	mov	r7, r9
   86894:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   86896:	46a9      	mov	r9, r5
   86898:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8689a:	e004      	b.n	868a6 <_svfprintf_r+0x9c6>
   8689c:	3f10      	subs	r7, #16
   8689e:	2f10      	cmp	r7, #16
   868a0:	f100 0008 	add.w	r0, r0, #8
   868a4:	dd16      	ble.n	868d4 <_svfprintf_r+0x9f4>
   868a6:	3201      	adds	r2, #1
   868a8:	4b1f      	ldr	r3, [pc, #124]	; (86928 <_svfprintf_r+0xa48>)
   868aa:	3110      	adds	r1, #16
   868ac:	2a07      	cmp	r2, #7
   868ae:	e9c0 3400 	strd	r3, r4, [r0]
   868b2:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   868b6:	ddf1      	ble.n	8689c <_svfprintf_r+0x9bc>
   868b8:	4631      	mov	r1, r6
   868ba:	4628      	mov	r0, r5
   868bc:	aa28      	add	r2, sp, #160	; 0xa0
   868be:	f003 f8cd 	bl	89a5c <__ssprint_r>
   868c2:	2800      	cmp	r0, #0
   868c4:	f47f ac6f 	bne.w	861a6 <_svfprintf_r+0x2c6>
   868c8:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   868cc:	3f10      	subs	r7, #16
   868ce:	2f10      	cmp	r7, #16
   868d0:	a82b      	add	r0, sp, #172	; 0xac
   868d2:	dce8      	bgt.n	868a6 <_svfprintf_r+0x9c6>
   868d4:	464d      	mov	r5, r9
   868d6:	e9dd 361d 	ldrd	r3, r6, [sp, #116]	; 0x74
   868da:	46b9      	mov	r9, r7
   868dc:	4647      	mov	r7, r8
   868de:	4680      	mov	r8, r0
   868e0:	eb09 0401 	add.w	r4, r9, r1
   868e4:	3201      	adds	r2, #1
   868e6:	4910      	ldr	r1, [pc, #64]	; (86928 <_svfprintf_r+0xa48>)
   868e8:	2a07      	cmp	r2, #7
   868ea:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   868ee:	f8c8 9004 	str.w	r9, [r8, #4]
   868f2:	f8c8 1000 	str.w	r1, [r8]
   868f6:	f300 83c3 	bgt.w	87080 <_svfprintf_r+0x11a0>
   868fa:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   868fe:	f108 0808 	add.w	r8, r8, #8
   86902:	e486      	b.n	86212 <_svfprintf_r+0x332>
   86904:	990c      	ldr	r1, [sp, #48]	; 0x30
   86906:	980a      	ldr	r0, [sp, #40]	; 0x28
   86908:	aa28      	add	r2, sp, #160	; 0xa0
   8690a:	931d      	str	r3, [sp, #116]	; 0x74
   8690c:	f003 f8a6 	bl	89a5c <__ssprint_r>
   86910:	2800      	cmp	r0, #0
   86912:	f47f ac48 	bne.w	861a6 <_svfprintf_r+0x2c6>
   86916:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86918:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   8691a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8691e:	e48a      	b.n	86236 <_svfprintf_r+0x356>
   86920:	0008c9d4 	.word	0x0008c9d4
   86924:	0008c9e8 	.word	0x0008c9e8
   86928:	0008c9d8 	.word	0x0008c9d8
   8692c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8692e:	980a      	ldr	r0, [sp, #40]	; 0x28
   86930:	aa28      	add	r2, sp, #160	; 0xa0
   86932:	f003 f893 	bl	89a5c <__ssprint_r>
   86936:	2800      	cmp	r0, #0
   86938:	f47f ac35 	bne.w	861a6 <_svfprintf_r+0x2c6>
   8693c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8693e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86942:	e489      	b.n	86258 <_svfprintf_r+0x378>
   86944:	2d10      	cmp	r5, #16
   86946:	f340 86c4 	ble.w	876d2 <_svfprintf_r+0x17f2>
   8694a:	2610      	movs	r6, #16
   8694c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8694e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   86950:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   86954:	e004      	b.n	86960 <_svfprintf_r+0xa80>
   86956:	3d10      	subs	r5, #16
   86958:	2d10      	cmp	r5, #16
   8695a:	f108 0808 	add.w	r8, r8, #8
   8695e:	dd17      	ble.n	86990 <_svfprintf_r+0xab0>
   86960:	3301      	adds	r3, #1
   86962:	4ab8      	ldr	r2, [pc, #736]	; (86c44 <_svfprintf_r+0xd64>)
   86964:	3410      	adds	r4, #16
   86966:	2b07      	cmp	r3, #7
   86968:	e9c8 2600 	strd	r2, r6, [r8]
   8696c:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   86970:	ddf1      	ble.n	86956 <_svfprintf_r+0xa76>
   86972:	4649      	mov	r1, r9
   86974:	4638      	mov	r0, r7
   86976:	aa28      	add	r2, sp, #160	; 0xa0
   86978:	f003 f870 	bl	89a5c <__ssprint_r>
   8697c:	2800      	cmp	r0, #0
   8697e:	f47f ac12 	bne.w	861a6 <_svfprintf_r+0x2c6>
   86982:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
   86986:	3d10      	subs	r5, #16
   86988:	2d10      	cmp	r5, #16
   8698a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8698e:	dce7      	bgt.n	86960 <_svfprintf_r+0xa80>
   86990:	3301      	adds	r3, #1
   86992:	4aac      	ldr	r2, [pc, #688]	; (86c44 <_svfprintf_r+0xd64>)
   86994:	442c      	add	r4, r5
   86996:	2b07      	cmp	r3, #7
   86998:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   8699c:	f8c8 5004 	str.w	r5, [r8, #4]
   869a0:	f8c8 2000 	str.w	r2, [r8]
   869a4:	f77f ac7e 	ble.w	862a4 <_svfprintf_r+0x3c4>
   869a8:	990c      	ldr	r1, [sp, #48]	; 0x30
   869aa:	980a      	ldr	r0, [sp, #40]	; 0x28
   869ac:	aa28      	add	r2, sp, #160	; 0xa0
   869ae:	f003 f855 	bl	89a5c <__ssprint_r>
   869b2:	2800      	cmp	r0, #0
   869b4:	f47f abf7 	bne.w	861a6 <_svfprintf_r+0x2c6>
   869b8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   869ba:	e473      	b.n	862a4 <_svfprintf_r+0x3c4>
   869bc:	9922      	ldr	r1, [sp, #136]	; 0x88
   869be:	2900      	cmp	r1, #0
   869c0:	f340 836f 	ble.w	870a2 <_svfprintf_r+0x11c2>
   869c4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   869c8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   869ca:	4599      	cmp	r9, r3
   869cc:	bfa8      	it	ge
   869ce:	4699      	movge	r9, r3
   869d0:	f1b9 0f00 	cmp.w	r9, #0
   869d4:	dd0b      	ble.n	869ee <_svfprintf_r+0xb0e>
   869d6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   869d8:	444c      	add	r4, r9
   869da:	3301      	adds	r3, #1
   869dc:	2b07      	cmp	r3, #7
   869de:	e9c8 5900 	strd	r5, r9, [r8]
   869e2:	942a      	str	r4, [sp, #168]	; 0xa8
   869e4:	9329      	str	r3, [sp, #164]	; 0xa4
   869e6:	f300 851d 	bgt.w	87424 <_svfprintf_r+0x1544>
   869ea:	f108 0808 	add.w	r8, r8, #8
   869ee:	9e10      	ldr	r6, [sp, #64]	; 0x40
   869f0:	f1b9 0f00 	cmp.w	r9, #0
   869f4:	bfa8      	it	ge
   869f6:	eba6 0609 	subge.w	r6, r6, r9
   869fa:	2e00      	cmp	r6, #0
   869fc:	f300 8225 	bgt.w	86e4a <_svfprintf_r+0xf6a>
   86a00:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
   86a04:	0578      	lsls	r0, r7, #21
   86a06:	44ab      	add	fp, r5
   86a08:	f100 825f 	bmi.w	86eca <_svfprintf_r+0xfea>
   86a0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86a0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86a10:	4293      	cmp	r3, r2
   86a12:	db02      	blt.n	86a1a <_svfprintf_r+0xb3a>
   86a14:	07f9      	lsls	r1, r7, #31
   86a16:	f140 8476 	bpl.w	87306 <_svfprintf_r+0x1426>
   86a1a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86a1c:	9917      	ldr	r1, [sp, #92]	; 0x5c
   86a1e:	4414      	add	r4, r2
   86a20:	e9c8 1200 	strd	r1, r2, [r8]
   86a24:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   86a26:	942a      	str	r4, [sp, #168]	; 0xa8
   86a28:	3201      	adds	r2, #1
   86a2a:	2a07      	cmp	r2, #7
   86a2c:	9229      	str	r2, [sp, #164]	; 0xa4
   86a2e:	f300 8513 	bgt.w	87458 <_svfprintf_r+0x1578>
   86a32:	f108 0808 	add.w	r8, r8, #8
   86a36:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86a38:	18ae      	adds	r6, r5, r2
   86a3a:	eba6 060b 	sub.w	r6, r6, fp
   86a3e:	1ad5      	subs	r5, r2, r3
   86a40:	42ae      	cmp	r6, r5
   86a42:	bfa8      	it	ge
   86a44:	462e      	movge	r6, r5
   86a46:	2e00      	cmp	r6, #0
   86a48:	dd0d      	ble.n	86a66 <_svfprintf_r+0xb86>
   86a4a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86a4c:	4434      	add	r4, r6
   86a4e:	3301      	adds	r3, #1
   86a50:	2b07      	cmp	r3, #7
   86a52:	f8c8 b000 	str.w	fp, [r8]
   86a56:	f8c8 6004 	str.w	r6, [r8, #4]
   86a5a:	942a      	str	r4, [sp, #168]	; 0xa8
   86a5c:	9329      	str	r3, [sp, #164]	; 0xa4
   86a5e:	f300 8571 	bgt.w	87544 <_svfprintf_r+0x1664>
   86a62:	f108 0808 	add.w	r8, r8, #8
   86a66:	2e00      	cmp	r6, #0
   86a68:	bfa8      	it	ge
   86a6a:	1bad      	subge	r5, r5, r6
   86a6c:	2d00      	cmp	r5, #0
   86a6e:	f77f ac11 	ble.w	86294 <_svfprintf_r+0x3b4>
   86a72:	2d10      	cmp	r5, #16
   86a74:	f340 873c 	ble.w	878f0 <_svfprintf_r+0x1a10>
   86a78:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 86c48 <_svfprintf_r+0xd68>
   86a7c:	4622      	mov	r2, r4
   86a7e:	4649      	mov	r1, r9
   86a80:	2610      	movs	r6, #16
   86a82:	46b9      	mov	r9, r7
   86a84:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86a86:	460f      	mov	r7, r1
   86a88:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   86a8c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86a8e:	e005      	b.n	86a9c <_svfprintf_r+0xbbc>
   86a90:	f108 0808 	add.w	r8, r8, #8
   86a94:	3d10      	subs	r5, #16
   86a96:	2d10      	cmp	r5, #16
   86a98:	f340 8353 	ble.w	87142 <_svfprintf_r+0x1262>
   86a9c:	3301      	adds	r3, #1
   86a9e:	3210      	adds	r2, #16
   86aa0:	2b07      	cmp	r3, #7
   86aa2:	e9c8 7600 	strd	r7, r6, [r8]
   86aa6:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   86aaa:	ddf1      	ble.n	86a90 <_svfprintf_r+0xbb0>
   86aac:	4621      	mov	r1, r4
   86aae:	4658      	mov	r0, fp
   86ab0:	aa28      	add	r2, sp, #160	; 0xa0
   86ab2:	f002 ffd3 	bl	89a5c <__ssprint_r>
   86ab6:	2800      	cmp	r0, #0
   86ab8:	f47f ab75 	bne.w	861a6 <_svfprintf_r+0x2c6>
   86abc:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   86ac0:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86ac4:	e7e6      	b.n	86a94 <_svfprintf_r+0xbb4>
   86ac6:	9b07      	ldr	r3, [sp, #28]
   86ac8:	2b00      	cmp	r3, #0
   86aca:	f47f aafc 	bne.w	860c6 <_svfprintf_r+0x1e6>
   86ace:	465f      	mov	r7, fp
   86ad0:	2300      	movs	r3, #0
   86ad2:	ad54      	add	r5, sp, #336	; 0x150
   86ad4:	9307      	str	r3, [sp, #28]
   86ad6:	930b      	str	r3, [sp, #44]	; 0x2c
   86ad8:	f7ff bafd 	b.w	860d6 <_svfprintf_r+0x1f6>
   86adc:	07fa      	lsls	r2, r7, #31
   86ade:	f53f ae7f 	bmi.w	867e0 <_svfprintf_r+0x900>
   86ae2:	2301      	movs	r3, #1
   86ae4:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   86ae6:	3401      	adds	r4, #1
   86ae8:	441e      	add	r6, r3
   86aea:	2e07      	cmp	r6, #7
   86aec:	f8c8 5000 	str.w	r5, [r8]
   86af0:	942a      	str	r4, [sp, #168]	; 0xa8
   86af2:	f8c8 3004 	str.w	r3, [r8, #4]
   86af6:	9629      	str	r6, [sp, #164]	; 0xa4
   86af8:	f77f aea5 	ble.w	86846 <_svfprintf_r+0x966>
   86afc:	990c      	ldr	r1, [sp, #48]	; 0x30
   86afe:	980a      	ldr	r0, [sp, #40]	; 0x28
   86b00:	aa28      	add	r2, sp, #160	; 0xa0
   86b02:	f002 ffab 	bl	89a5c <__ssprint_r>
   86b06:	2800      	cmp	r0, #0
   86b08:	f47f ab4d 	bne.w	861a6 <_svfprintf_r+0x2c6>
   86b0c:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   86b10:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86b14:	e699      	b.n	8684a <_svfprintf_r+0x96a>
   86b16:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86b18:	1e5d      	subs	r5, r3, #1
   86b1a:	2d00      	cmp	r5, #0
   86b1c:	f77f ae95 	ble.w	8684a <_svfprintf_r+0x96a>
   86b20:	2d10      	cmp	r5, #16
   86b22:	f340 86df 	ble.w	878e4 <_svfprintf_r+0x1a04>
   86b26:	4622      	mov	r2, r4
   86b28:	9707      	str	r7, [sp, #28]
   86b2a:	f04f 0b10 	mov.w	fp, #16
   86b2e:	f8df 9118 	ldr.w	r9, [pc, #280]	; 86c48 <_svfprintf_r+0xd68>
   86b32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86b34:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   86b36:	e005      	b.n	86b44 <_svfprintf_r+0xc64>
   86b38:	f108 0808 	add.w	r8, r8, #8
   86b3c:	3d10      	subs	r5, #16
   86b3e:	2d10      	cmp	r5, #16
   86b40:	f340 837f 	ble.w	87242 <_svfprintf_r+0x1362>
   86b44:	3601      	adds	r6, #1
   86b46:	3210      	adds	r2, #16
   86b48:	2e07      	cmp	r6, #7
   86b4a:	e9c8 9b00 	strd	r9, fp, [r8]
   86b4e:	e9cd 6229 	strd	r6, r2, [sp, #164]	; 0xa4
   86b52:	ddf1      	ble.n	86b38 <_svfprintf_r+0xc58>
   86b54:	4639      	mov	r1, r7
   86b56:	4620      	mov	r0, r4
   86b58:	aa28      	add	r2, sp, #160	; 0xa0
   86b5a:	f002 ff7f 	bl	89a5c <__ssprint_r>
   86b5e:	2800      	cmp	r0, #0
   86b60:	f47f ab21 	bne.w	861a6 <_svfprintf_r+0x2c6>
   86b64:	e9dd 6229 	ldrd	r6, r2, [sp, #164]	; 0xa4
   86b68:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86b6c:	e7e6      	b.n	86b3c <_svfprintf_r+0xc5c>
   86b6e:	990c      	ldr	r1, [sp, #48]	; 0x30
   86b70:	980a      	ldr	r0, [sp, #40]	; 0x28
   86b72:	aa28      	add	r2, sp, #160	; 0xa0
   86b74:	f002 ff72 	bl	89a5c <__ssprint_r>
   86b78:	2800      	cmp	r0, #0
   86b7a:	f47f ab14 	bne.w	861a6 <_svfprintf_r+0x2c6>
   86b7e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86b80:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86b84:	f7ff bb74 	b.w	86270 <_svfprintf_r+0x390>
   86b88:	f01b 0310 	ands.w	r3, fp, #16
   86b8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86b8e:	d13a      	bne.n	86c06 <_svfprintf_r+0xd26>
   86b90:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
   86b94:	d033      	beq.n	86bfe <_svfprintf_r+0xd1e>
   86b96:	f852 4b04 	ldr.w	r4, [r2], #4
   86b9a:	4699      	mov	r9, r3
   86b9c:	920e      	str	r2, [sp, #56]	; 0x38
   86b9e:	2301      	movs	r3, #1
   86ba0:	b2a4      	uxth	r4, r4
   86ba2:	f7ff babd 	b.w	86120 <_svfprintf_r+0x240>
   86ba6:	232d      	movs	r3, #45	; 0x2d
   86ba8:	4264      	negs	r4, r4
   86baa:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   86bae:	46bb      	mov	fp, r7
   86bb0:	f04f 0301 	mov.w	r3, #1
   86bb4:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
   86bb8:	f7ff bab5 	b.w	86126 <_svfprintf_r+0x246>
   86bbc:	990c      	ldr	r1, [sp, #48]	; 0x30
   86bbe:	980a      	ldr	r0, [sp, #40]	; 0x28
   86bc0:	aa28      	add	r2, sp, #160	; 0xa0
   86bc2:	f002 ff4b 	bl	89a5c <__ssprint_r>
   86bc6:	2800      	cmp	r0, #0
   86bc8:	f47f aaed 	bne.w	861a6 <_svfprintf_r+0x2c6>
   86bcc:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   86bd0:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86bd4:	e613      	b.n	867fe <_svfprintf_r+0x91e>
   86bd6:	990c      	ldr	r1, [sp, #48]	; 0x30
   86bd8:	980a      	ldr	r0, [sp, #40]	; 0x28
   86bda:	aa28      	add	r2, sp, #160	; 0xa0
   86bdc:	f002 ff3e 	bl	89a5c <__ssprint_r>
   86be0:	2800      	cmp	r0, #0
   86be2:	f47f aae0 	bne.w	861a6 <_svfprintf_r+0x2c6>
   86be6:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   86bea:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86bee:	e613      	b.n	86818 <_svfprintf_r+0x938>
   86bf0:	07fd      	lsls	r5, r7, #31
   86bf2:	f57f ab4f 	bpl.w	86294 <_svfprintf_r+0x3b4>
   86bf6:	e524      	b.n	86642 <_svfprintf_r+0x762>
   86bf8:	ad54      	add	r5, sp, #336	; 0x150
   86bfa:	f7ff ba6c 	b.w	860d6 <_svfprintf_r+0x1f6>
   86bfe:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
   86c02:	f040 838a 	bne.w	8731a <_svfprintf_r+0x143a>
   86c06:	f852 4b04 	ldr.w	r4, [r2], #4
   86c0a:	2301      	movs	r3, #1
   86c0c:	920e      	str	r2, [sp, #56]	; 0x38
   86c0e:	f7ff ba87 	b.w	86120 <_svfprintf_r+0x240>
   86c12:	05b8      	lsls	r0, r7, #22
   86c14:	f100 839b 	bmi.w	8734e <_svfprintf_r+0x146e>
   86c18:	ea4f 79e4 	mov.w	r9, r4, asr #31
   86c1c:	464b      	mov	r3, r9
   86c1e:	f7ff ba40 	b.w	860a2 <_svfprintf_r+0x1c2>
   86c22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86c24:	9808      	ldr	r0, [sp, #32]
   86c26:	f853 1b04 	ldr.w	r1, [r3], #4
   86c2a:	17c2      	asrs	r2, r0, #31
   86c2c:	4655      	mov	r5, sl
   86c2e:	e9c1 0200 	strd	r0, r2, [r1]
   86c32:	930e      	str	r3, [sp, #56]	; 0x38
   86c34:	f7ff bb4c 	b.w	862d0 <_svfprintf_r+0x3f0>
   86c38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86c3a:	f853 4b04 	ldr.w	r4, [r3], #4
   86c3e:	930e      	str	r3, [sp, #56]	; 0x38
   86c40:	f7ff ba6b 	b.w	8611a <_svfprintf_r+0x23a>
   86c44:	0008c9d8 	.word	0x0008c9d8
   86c48:	0008c9e8 	.word	0x0008c9e8
   86c4c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86c50:	4602      	mov	r2, r0
   86c52:	460b      	mov	r3, r1
   86c54:	f005 fcaa 	bl	8c5ac <__aeabi_dcmpun>
   86c58:	2800      	cmp	r0, #0
   86c5a:	f040 85e9 	bne.w	87830 <_svfprintf_r+0x1950>
   86c5e:	2e61      	cmp	r6, #97	; 0x61
   86c60:	f000 857d 	beq.w	8775e <_svfprintf_r+0x187e>
   86c64:	2e41      	cmp	r6, #65	; 0x41
   86c66:	f000 848b 	beq.w	87580 <_svfprintf_r+0x16a0>
   86c6a:	9b07      	ldr	r3, [sp, #28]
   86c6c:	3301      	adds	r3, #1
   86c6e:	f000 838f 	beq.w	87390 <_svfprintf_r+0x14b0>
   86c72:	f026 0320 	bic.w	r3, r6, #32
   86c76:	2b47      	cmp	r3, #71	; 0x47
   86c78:	9306      	str	r3, [sp, #24]
   86c7a:	f000 858f 	beq.w	8779c <_svfprintf_r+0x18bc>
   86c7e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   86c82:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   86c86:	930f      	str	r3, [sp, #60]	; 0x3c
   86c88:	4613      	mov	r3, r2
   86c8a:	2b00      	cmp	r3, #0
   86c8c:	f2c0 85b0 	blt.w	877f0 <_svfprintf_r+0x1910>
   86c90:	930b      	str	r3, [sp, #44]	; 0x2c
   86c92:	2300      	movs	r3, #0
   86c94:	468b      	mov	fp, r1
   86c96:	931d      	str	r3, [sp, #116]	; 0x74
   86c98:	930d      	str	r3, [sp, #52]	; 0x34
   86c9a:	9b06      	ldr	r3, [sp, #24]
   86c9c:	2b46      	cmp	r3, #70	; 0x46
   86c9e:	f000 83e9 	beq.w	87474 <_svfprintf_r+0x1594>
   86ca2:	2b45      	cmp	r3, #69	; 0x45
   86ca4:	f000 8546 	beq.w	87734 <_svfprintf_r+0x1854>
   86ca8:	9907      	ldr	r1, [sp, #28]
   86caa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86cac:	9101      	str	r1, [sp, #4]
   86cae:	2102      	movs	r1, #2
   86cb0:	9100      	str	r1, [sp, #0]
   86cb2:	a926      	add	r1, sp, #152	; 0x98
   86cb4:	9104      	str	r1, [sp, #16]
   86cb6:	a923      	add	r1, sp, #140	; 0x8c
   86cb8:	9103      	str	r1, [sp, #12]
   86cba:	a922      	add	r1, sp, #136	; 0x88
   86cbc:	465a      	mov	r2, fp
   86cbe:	980a      	ldr	r0, [sp, #40]	; 0x28
   86cc0:	9102      	str	r1, [sp, #8]
   86cc2:	f000 ff05 	bl	87ad0 <_dtoa_r>
   86cc6:	9b06      	ldr	r3, [sp, #24]
   86cc8:	4605      	mov	r5, r0
   86cca:	2b47      	cmp	r3, #71	; 0x47
   86ccc:	f040 863a 	bne.w	87944 <_svfprintf_r+0x1a64>
   86cd0:	f017 0f01 	tst.w	r7, #1
   86cd4:	46b9      	mov	r9, r7
   86cd6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   86cd8:	f040 84fe 	bne.w	876d8 <_svfprintf_r+0x17f8>
   86cdc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86cde:	1b5b      	subs	r3, r3, r5
   86ce0:	9312      	str	r3, [sp, #72]	; 0x48
   86ce2:	9b06      	ldr	r3, [sp, #24]
   86ce4:	2b47      	cmp	r3, #71	; 0x47
   86ce6:	f000 836e 	beq.w	873c6 <_svfprintf_r+0x14e6>
   86cea:	9b06      	ldr	r3, [sp, #24]
   86cec:	2b46      	cmp	r3, #70	; 0x46
   86cee:	f000 83f0 	beq.w	874d2 <_svfprintf_r+0x15f2>
   86cf2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86cf4:	9310      	str	r3, [sp, #64]	; 0x40
   86cf6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86cf8:	9a06      	ldr	r2, [sp, #24]
   86cfa:	3b01      	subs	r3, #1
   86cfc:	2a41      	cmp	r2, #65	; 0x41
   86cfe:	9322      	str	r3, [sp, #136]	; 0x88
   86d00:	f000 85bb 	beq.w	8787a <_svfprintf_r+0x199a>
   86d04:	2100      	movs	r1, #0
   86d06:	b2f2      	uxtb	r2, r6
   86d08:	2b00      	cmp	r3, #0
   86d0a:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
   86d0e:	bfb6      	itet	lt
   86d10:	222d      	movlt	r2, #45	; 0x2d
   86d12:	222b      	movge	r2, #43	; 0x2b
   86d14:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   86d16:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
   86d1a:	bfb8      	it	lt
   86d1c:	f1c3 0301 	rsblt	r3, r3, #1
   86d20:	2b09      	cmp	r3, #9
   86d22:	f340 859b 	ble.w	8785c <_svfprintf_r+0x197c>
   86d26:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
   86d2a:	4662      	mov	r2, ip
   86d2c:	4fb6      	ldr	r7, [pc, #728]	; (87008 <_svfprintf_r+0x1128>)
   86d2e:	461c      	mov	r4, r3
   86d30:	4610      	mov	r0, r2
   86d32:	fb87 1203 	smull	r1, r2, r7, r3
   86d36:	17d9      	asrs	r1, r3, #31
   86d38:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   86d3c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   86d40:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   86d44:	3230      	adds	r2, #48	; 0x30
   86d46:	2c63      	cmp	r4, #99	; 0x63
   86d48:	f800 2c01 	strb.w	r2, [r0, #-1]
   86d4c:	460b      	mov	r3, r1
   86d4e:	f100 32ff 	add.w	r2, r0, #4294967295
   86d52:	dcec      	bgt.n	86d2e <_svfprintf_r+0xe4e>
   86d54:	3330      	adds	r3, #48	; 0x30
   86d56:	1e81      	subs	r1, r0, #2
   86d58:	b2db      	uxtb	r3, r3
   86d5a:	458c      	cmp	ip, r1
   86d5c:	f802 3c01 	strb.w	r3, [r2, #-1]
   86d60:	f240 85f9 	bls.w	87956 <_svfprintf_r+0x1a76>
   86d64:	f10d 0192 	add.w	r1, sp, #146	; 0x92
   86d68:	e001      	b.n	86d6e <_svfprintf_r+0xe8e>
   86d6a:	f812 3b01 	ldrb.w	r3, [r2], #1
   86d6e:	4594      	cmp	ip, r2
   86d70:	f801 3b01 	strb.w	r3, [r1], #1
   86d74:	d1f9      	bne.n	86d6a <_svfprintf_r+0xe8a>
   86d76:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
   86d7a:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   86d7e:	1a1b      	subs	r3, r3, r0
   86d80:	4413      	add	r3, r2
   86d82:	aa24      	add	r2, sp, #144	; 0x90
   86d84:	1a9b      	subs	r3, r3, r2
   86d86:	931a      	str	r3, [sp, #104]	; 0x68
   86d88:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86d8a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   86d8c:	2b01      	cmp	r3, #1
   86d8e:	441a      	add	r2, r3
   86d90:	920b      	str	r2, [sp, #44]	; 0x2c
   86d92:	f340 8581 	ble.w	87898 <_svfprintf_r+0x19b8>
   86d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86d98:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86d9a:	4413      	add	r3, r2
   86d9c:	930b      	str	r3, [sp, #44]	; 0x2c
   86d9e:	2300      	movs	r3, #0
   86da0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86da2:	f429 6780 	bic.w	r7, r9, #1024	; 0x400
   86da6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   86daa:	f447 7780 	orr.w	r7, r7, #256	; 0x100
   86dae:	930f      	str	r3, [sp, #60]	; 0x3c
   86db0:	9206      	str	r2, [sp, #24]
   86db2:	9313      	str	r3, [sp, #76]	; 0x4c
   86db4:	9310      	str	r3, [sp, #64]	; 0x40
   86db6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   86db8:	2b00      	cmp	r3, #0
   86dba:	f040 832c 	bne.w	87416 <_svfprintf_r+0x1536>
   86dbe:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86dc2:	9307      	str	r3, [sp, #28]
   86dc4:	f7ff b994 	b.w	860f0 <_svfprintf_r+0x210>
   86dc8:	46bb      	mov	fp, r7
   86dca:	f7ff bb2f 	b.w	8642c <_svfprintf_r+0x54c>
   86dce:	4b8f      	ldr	r3, [pc, #572]	; (8700c <_svfprintf_r+0x112c>)
   86dd0:	9318      	str	r3, [sp, #96]	; 0x60
   86dd2:	f017 0920 	ands.w	r9, r7, #32
   86dd6:	f000 80f5 	beq.w	86fc4 <_svfprintf_r+0x10e4>
   86dda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86ddc:	3307      	adds	r3, #7
   86dde:	f023 0307 	bic.w	r3, r3, #7
   86de2:	f8d3 9004 	ldr.w	r9, [r3, #4]
   86de6:	f853 4b08 	ldr.w	r4, [r3], #8
   86dea:	930e      	str	r3, [sp, #56]	; 0x38
   86dec:	07f8      	lsls	r0, r7, #31
   86dee:	d509      	bpl.n	86e04 <_svfprintf_r+0xf24>
   86df0:	ea54 0309 	orrs.w	r3, r4, r9
   86df4:	d006      	beq.n	86e04 <_svfprintf_r+0xf24>
   86df6:	2330      	movs	r3, #48	; 0x30
   86df8:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   86dfc:	f047 0702 	orr.w	r7, r7, #2
   86e00:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   86e04:	2302      	movs	r3, #2
   86e06:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   86e0a:	f7ff b989 	b.w	86120 <_svfprintf_r+0x240>
   86e0e:	4b80      	ldr	r3, [pc, #512]	; (87010 <_svfprintf_r+0x1130>)
   86e10:	9318      	str	r3, [sp, #96]	; 0x60
   86e12:	e7de      	b.n	86dd2 <_svfprintf_r+0xef2>
   86e14:	990c      	ldr	r1, [sp, #48]	; 0x30
   86e16:	980a      	ldr	r0, [sp, #40]	; 0x28
   86e18:	aa28      	add	r2, sp, #160	; 0xa0
   86e1a:	f002 fe1f 	bl	89a5c <__ssprint_r>
   86e1e:	2800      	cmp	r0, #0
   86e20:	f47f a9c1 	bne.w	861a6 <_svfprintf_r+0x2c6>
   86e24:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86e26:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86e2a:	e418      	b.n	8665e <_svfprintf_r+0x77e>
   86e2c:	2140      	movs	r1, #64	; 0x40
   86e2e:	980a      	ldr	r0, [sp, #40]	; 0x28
   86e30:	f001 ff26 	bl	88c80 <_malloc_r>
   86e34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86e36:	6018      	str	r0, [r3, #0]
   86e38:	6118      	str	r0, [r3, #16]
   86e3a:	2800      	cmp	r0, #0
   86e3c:	f000 8597 	beq.w	8796e <_svfprintf_r+0x1a8e>
   86e40:	2340      	movs	r3, #64	; 0x40
   86e42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86e44:	6153      	str	r3, [r2, #20]
   86e46:	f7ff b862 	b.w	85f0e <_svfprintf_r+0x2e>
   86e4a:	2e10      	cmp	r6, #16
   86e4c:	f340 8576 	ble.w	8793c <_svfprintf_r+0x1a5c>
   86e50:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 87014 <_svfprintf_r+0x1134>
   86e54:	4642      	mov	r2, r8
   86e56:	4648      	mov	r0, r9
   86e58:	4621      	mov	r1, r4
   86e5a:	46a8      	mov	r8, r5
   86e5c:	46b9      	mov	r9, r7
   86e5e:	f04f 0b10 	mov.w	fp, #16
   86e62:	4607      	mov	r7, r0
   86e64:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86e66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86e68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   86e6a:	e004      	b.n	86e76 <_svfprintf_r+0xf96>
   86e6c:	3208      	adds	r2, #8
   86e6e:	3e10      	subs	r6, #16
   86e70:	2e10      	cmp	r6, #16
   86e72:	f340 8213 	ble.w	8729c <_svfprintf_r+0x13bc>
   86e76:	3301      	adds	r3, #1
   86e78:	3110      	adds	r1, #16
   86e7a:	2b07      	cmp	r3, #7
   86e7c:	e9c2 7b00 	strd	r7, fp, [r2]
   86e80:	e9cd 3129 	strd	r3, r1, [sp, #164]	; 0xa4
   86e84:	ddf2      	ble.n	86e6c <_svfprintf_r+0xf8c>
   86e86:	4629      	mov	r1, r5
   86e88:	4620      	mov	r0, r4
   86e8a:	aa28      	add	r2, sp, #160	; 0xa0
   86e8c:	f002 fde6 	bl	89a5c <__ssprint_r>
   86e90:	2800      	cmp	r0, #0
   86e92:	f47f a988 	bne.w	861a6 <_svfprintf_r+0x2c6>
   86e96:	e9dd 3129 	ldrd	r3, r1, [sp, #164]	; 0xa4
   86e9a:	aa2b      	add	r2, sp, #172	; 0xac
   86e9c:	e7e7      	b.n	86e6e <_svfprintf_r+0xf8e>
   86e9e:	4628      	mov	r0, r5
   86ea0:	f8cd 901c 	str.w	r9, [sp, #28]
   86ea4:	940e      	str	r4, [sp, #56]	; 0x38
   86ea6:	f7fe ffb9 	bl	85e1c <strlen>
   86eaa:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   86eae:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86eb2:	900b      	str	r0, [sp, #44]	; 0x2c
   86eb4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   86eb8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   86ebc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   86ec0:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   86ec4:	9306      	str	r3, [sp, #24]
   86ec6:	f7ff b913 	b.w	860f0 <_svfprintf_r+0x210>
   86eca:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86ecc:	4642      	mov	r2, r8
   86ece:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   86ed2:	18eb      	adds	r3, r5, r3
   86ed4:	465e      	mov	r6, fp
   86ed6:	9307      	str	r3, [sp, #28]
   86ed8:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   86edc:	9710      	str	r7, [sp, #64]	; 0x40
   86ede:	4621      	mov	r1, r4
   86ee0:	9f19      	ldr	r7, [sp, #100]	; 0x64
   86ee2:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
   86ee6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   86eea:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86eee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86ef0:	9513      	str	r5, [sp, #76]	; 0x4c
   86ef2:	f1b8 0f00 	cmp.w	r8, #0
   86ef6:	d02e      	beq.n	86f56 <_svfprintf_r+0x1076>
   86ef8:	bb83      	cbnz	r3, 86f5c <_svfprintf_r+0x107c>
   86efa:	3f01      	subs	r7, #1
   86efc:	f108 38ff 	add.w	r8, r8, #4294967295
   86f00:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   86f02:	4449      	add	r1, r9
   86f04:	e9c2 3900 	strd	r3, r9, [r2]
   86f08:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86f0a:	912a      	str	r1, [sp, #168]	; 0xa8
   86f0c:	3301      	adds	r3, #1
   86f0e:	2b07      	cmp	r3, #7
   86f10:	9329      	str	r3, [sp, #164]	; 0xa4
   86f12:	dc60      	bgt.n	86fd6 <_svfprintf_r+0x10f6>
   86f14:	3208      	adds	r2, #8
   86f16:	9b07      	ldr	r3, [sp, #28]
   86f18:	7838      	ldrb	r0, [r7, #0]
   86f1a:	1b9b      	subs	r3, r3, r6
   86f1c:	4283      	cmp	r3, r0
   86f1e:	bfa8      	it	ge
   86f20:	4603      	movge	r3, r0
   86f22:	2b00      	cmp	r3, #0
   86f24:	461c      	mov	r4, r3
   86f26:	dd0b      	ble.n	86f40 <_svfprintf_r+0x1060>
   86f28:	9829      	ldr	r0, [sp, #164]	; 0xa4
   86f2a:	4419      	add	r1, r3
   86f2c:	3001      	adds	r0, #1
   86f2e:	2807      	cmp	r0, #7
   86f30:	e9c2 6300 	strd	r6, r3, [r2]
   86f34:	912a      	str	r1, [sp, #168]	; 0xa8
   86f36:	9029      	str	r0, [sp, #164]	; 0xa4
   86f38:	f300 8114 	bgt.w	87164 <_svfprintf_r+0x1284>
   86f3c:	7838      	ldrb	r0, [r7, #0]
   86f3e:	3208      	adds	r2, #8
   86f40:	2c00      	cmp	r4, #0
   86f42:	bfb4      	ite	lt
   86f44:	4605      	movlt	r5, r0
   86f46:	1b05      	subge	r5, r0, r4
   86f48:	2d00      	cmp	r5, #0
   86f4a:	dc0b      	bgt.n	86f64 <_svfprintf_r+0x1084>
   86f4c:	4406      	add	r6, r0
   86f4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86f50:	f1b8 0f00 	cmp.w	r8, #0
   86f54:	d1d0      	bne.n	86ef8 <_svfprintf_r+0x1018>
   86f56:	2b00      	cmp	r3, #0
   86f58:	f000 8226 	beq.w	873a8 <_svfprintf_r+0x14c8>
   86f5c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86f5e:	3b01      	subs	r3, #1
   86f60:	930f      	str	r3, [sp, #60]	; 0x3c
   86f62:	e7cd      	b.n	86f00 <_svfprintf_r+0x1020>
   86f64:	2d10      	cmp	r5, #16
   86f66:	f340 849d 	ble.w	878a4 <_svfprintf_r+0x19c4>
   86f6a:	2410      	movs	r4, #16
   86f6c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   86f6e:	e004      	b.n	86f7a <_svfprintf_r+0x109a>
   86f70:	3d10      	subs	r5, #16
   86f72:	2d10      	cmp	r5, #16
   86f74:	f102 0208 	add.w	r2, r2, #8
   86f78:	dd16      	ble.n	86fa8 <_svfprintf_r+0x10c8>
   86f7a:	3001      	adds	r0, #1
   86f7c:	4b25      	ldr	r3, [pc, #148]	; (87014 <_svfprintf_r+0x1134>)
   86f7e:	3110      	adds	r1, #16
   86f80:	2807      	cmp	r0, #7
   86f82:	e9c2 3400 	strd	r3, r4, [r2]
   86f86:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   86f8a:	ddf1      	ble.n	86f70 <_svfprintf_r+0x1090>
   86f8c:	4659      	mov	r1, fp
   86f8e:	4650      	mov	r0, sl
   86f90:	aa28      	add	r2, sp, #160	; 0xa0
   86f92:	f002 fd63 	bl	89a5c <__ssprint_r>
   86f96:	2800      	cmp	r0, #0
   86f98:	f47f a905 	bne.w	861a6 <_svfprintf_r+0x2c6>
   86f9c:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
   86fa0:	3d10      	subs	r5, #16
   86fa2:	2d10      	cmp	r5, #16
   86fa4:	aa2b      	add	r2, sp, #172	; 0xac
   86fa6:	dce8      	bgt.n	86f7a <_svfprintf_r+0x109a>
   86fa8:	3001      	adds	r0, #1
   86faa:	4b1a      	ldr	r3, [pc, #104]	; (87014 <_svfprintf_r+0x1134>)
   86fac:	4429      	add	r1, r5
   86fae:	2807      	cmp	r0, #7
   86fb0:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   86fb4:	6055      	str	r5, [r2, #4]
   86fb6:	6013      	str	r3, [r2, #0]
   86fb8:	f300 8241 	bgt.w	8743e <_svfprintf_r+0x155e>
   86fbc:	7838      	ldrb	r0, [r7, #0]
   86fbe:	3208      	adds	r2, #8
   86fc0:	4406      	add	r6, r0
   86fc2:	e7c4      	b.n	86f4e <_svfprintf_r+0x106e>
   86fc4:	f017 0310 	ands.w	r3, r7, #16
   86fc8:	f000 80a0 	beq.w	8710c <_svfprintf_r+0x122c>
   86fcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86fce:	f853 4b04 	ldr.w	r4, [r3], #4
   86fd2:	930e      	str	r3, [sp, #56]	; 0x38
   86fd4:	e70a      	b.n	86dec <_svfprintf_r+0xf0c>
   86fd6:	4659      	mov	r1, fp
   86fd8:	4650      	mov	r0, sl
   86fda:	aa28      	add	r2, sp, #160	; 0xa0
   86fdc:	f002 fd3e 	bl	89a5c <__ssprint_r>
   86fe0:	2800      	cmp	r0, #0
   86fe2:	f47f a8e0 	bne.w	861a6 <_svfprintf_r+0x2c6>
   86fe6:	992a      	ldr	r1, [sp, #168]	; 0xa8
   86fe8:	aa2b      	add	r2, sp, #172	; 0xac
   86fea:	e794      	b.n	86f16 <_svfprintf_r+0x1036>
   86fec:	2300      	movs	r3, #0
   86fee:	f40b 6280 	and.w	r2, fp, #1024	; 0x400
   86ff2:	9606      	str	r6, [sp, #24]
   86ff4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   86ff8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   86ffc:	4692      	mov	sl, r2
   86ffe:	461e      	mov	r6, r3
   87000:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
   87004:	af54      	add	r7, sp, #336	; 0x150
   87006:	e014      	b.n	87032 <_svfprintf_r+0x1152>
   87008:	66666667 	.word	0x66666667
   8700c:	0008c9a4 	.word	0x0008c9a4
   87010:	0008c9b8 	.word	0x0008c9b8
   87014:	0008c9e8 	.word	0x0008c9e8
   87018:	2300      	movs	r3, #0
   8701a:	4620      	mov	r0, r4
   8701c:	4649      	mov	r1, r9
   8701e:	220a      	movs	r2, #10
   87020:	f005 fb02 	bl	8c628 <__aeabi_uldivmod>
   87024:	2c0a      	cmp	r4, #10
   87026:	f179 0300 	sbcs.w	r3, r9, #0
   8702a:	d31b      	bcc.n	87064 <_svfprintf_r+0x1184>
   8702c:	4604      	mov	r4, r0
   8702e:	4689      	mov	r9, r1
   87030:	462f      	mov	r7, r5
   87032:	4620      	mov	r0, r4
   87034:	220a      	movs	r2, #10
   87036:	2300      	movs	r3, #0
   87038:	4649      	mov	r1, r9
   8703a:	f005 faf5 	bl	8c628 <__aeabi_uldivmod>
   8703e:	3230      	adds	r2, #48	; 0x30
   87040:	1e7d      	subs	r5, r7, #1
   87042:	3601      	adds	r6, #1
   87044:	f807 2c01 	strb.w	r2, [r7, #-1]
   87048:	f1ba 0f00 	cmp.w	sl, #0
   8704c:	d0e4      	beq.n	87018 <_svfprintf_r+0x1138>
   8704e:	f898 3000 	ldrb.w	r3, [r8]
   87052:	429e      	cmp	r6, r3
   87054:	d1e0      	bne.n	87018 <_svfprintf_r+0x1138>
   87056:	2eff      	cmp	r6, #255	; 0xff
   87058:	d0de      	beq.n	87018 <_svfprintf_r+0x1138>
   8705a:	2c0a      	cmp	r4, #10
   8705c:	f179 0300 	sbcs.w	r3, r9, #0
   87060:	f080 8130 	bcs.w	872c4 <_svfprintf_r+0x13e4>
   87064:	ab54      	add	r3, sp, #336	; 0x150
   87066:	1b5b      	subs	r3, r3, r5
   87068:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   8706c:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
   87070:	9612      	str	r6, [sp, #72]	; 0x48
   87072:	465f      	mov	r7, fp
   87074:	9e06      	ldr	r6, [sp, #24]
   87076:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   8707a:	930b      	str	r3, [sp, #44]	; 0x2c
   8707c:	f7ff b82b 	b.w	860d6 <_svfprintf_r+0x1f6>
   87080:	990c      	ldr	r1, [sp, #48]	; 0x30
   87082:	980a      	ldr	r0, [sp, #40]	; 0x28
   87084:	aa28      	add	r2, sp, #160	; 0xa0
   87086:	931d      	str	r3, [sp, #116]	; 0x74
   87088:	f002 fce8 	bl	89a5c <__ssprint_r>
   8708c:	2800      	cmp	r0, #0
   8708e:	f47f a88a 	bne.w	861a6 <_svfprintf_r+0x2c6>
   87092:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87096:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87098:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   8709a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8709e:	f7ff b8b8 	b.w	86212 <_svfprintf_r+0x332>
   870a2:	2301      	movs	r3, #1
   870a4:	f8c8 3004 	str.w	r3, [r8, #4]
   870a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   870aa:	4abc      	ldr	r2, [pc, #752]	; (8739c <_svfprintf_r+0x14bc>)
   870ac:	3301      	adds	r3, #1
   870ae:	3401      	adds	r4, #1
   870b0:	2b07      	cmp	r3, #7
   870b2:	942a      	str	r4, [sp, #168]	; 0xa8
   870b4:	9329      	str	r3, [sp, #164]	; 0xa4
   870b6:	f8c8 2000 	str.w	r2, [r8]
   870ba:	f300 8117 	bgt.w	872ec <_svfprintf_r+0x140c>
   870be:	f108 0808 	add.w	r8, r8, #8
   870c2:	2900      	cmp	r1, #0
   870c4:	f040 8086 	bne.w	871d4 <_svfprintf_r+0x12f4>
   870c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   870ca:	f007 0301 	and.w	r3, r7, #1
   870ce:	4313      	orrs	r3, r2
   870d0:	f43f a8e0 	beq.w	86294 <_svfprintf_r+0x3b4>
   870d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   870d6:	9917      	ldr	r1, [sp, #92]	; 0x5c
   870d8:	191a      	adds	r2, r3, r4
   870da:	e9c8 1300 	strd	r1, r3, [r8]
   870de:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   870e0:	922a      	str	r2, [sp, #168]	; 0xa8
   870e2:	3301      	adds	r3, #1
   870e4:	2b07      	cmp	r3, #7
   870e6:	9329      	str	r3, [sp, #164]	; 0xa4
   870e8:	f300 8137 	bgt.w	8735a <_svfprintf_r+0x147a>
   870ec:	f108 0808 	add.w	r8, r8, #8
   870f0:	9912      	ldr	r1, [sp, #72]	; 0x48
   870f2:	3301      	adds	r3, #1
   870f4:	188c      	adds	r4, r1, r2
   870f6:	2b07      	cmp	r3, #7
   870f8:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   870fc:	f8c8 5000 	str.w	r5, [r8]
   87100:	f8c8 1004 	str.w	r1, [r8, #4]
   87104:	f77f a8c4 	ble.w	86290 <_svfprintf_r+0x3b0>
   87108:	f7ff bbac 	b.w	86864 <_svfprintf_r+0x984>
   8710c:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   87110:	f000 80a5 	beq.w	8725e <_svfprintf_r+0x137e>
   87114:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87116:	4699      	mov	r9, r3
   87118:	f852 4b04 	ldr.w	r4, [r2], #4
   8711c:	920e      	str	r2, [sp, #56]	; 0x38
   8711e:	b2a4      	uxth	r4, r4
   87120:	e664      	b.n	86dec <_svfprintf_r+0xf0c>
   87122:	46bb      	mov	fp, r7
   87124:	f7fe bfca 	b.w	860bc <_svfprintf_r+0x1dc>
   87128:	990c      	ldr	r1, [sp, #48]	; 0x30
   8712a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8712c:	aa28      	add	r2, sp, #160	; 0xa0
   8712e:	f002 fc95 	bl	89a5c <__ssprint_r>
   87132:	2800      	cmp	r0, #0
   87134:	f47f a837 	bne.w	861a6 <_svfprintf_r+0x2c6>
   87138:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8713a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8713e:	f7ff ba7b 	b.w	86638 <_svfprintf_r+0x758>
   87142:	4614      	mov	r4, r2
   87144:	463a      	mov	r2, r7
   87146:	464f      	mov	r7, r9
   87148:	4691      	mov	r9, r2
   8714a:	3301      	adds	r3, #1
   8714c:	442c      	add	r4, r5
   8714e:	2b07      	cmp	r3, #7
   87150:	f8c8 9000 	str.w	r9, [r8]
   87154:	f8c8 5004 	str.w	r5, [r8, #4]
   87158:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   8715c:	f77f a898 	ble.w	86290 <_svfprintf_r+0x3b0>
   87160:	f7ff bb80 	b.w	86864 <_svfprintf_r+0x984>
   87164:	4659      	mov	r1, fp
   87166:	4650      	mov	r0, sl
   87168:	aa28      	add	r2, sp, #160	; 0xa0
   8716a:	f002 fc77 	bl	89a5c <__ssprint_r>
   8716e:	2800      	cmp	r0, #0
   87170:	f47f a819 	bne.w	861a6 <_svfprintf_r+0x2c6>
   87174:	7838      	ldrb	r0, [r7, #0]
   87176:	992a      	ldr	r1, [sp, #168]	; 0xa8
   87178:	aa2b      	add	r2, sp, #172	; 0xac
   8717a:	e6e1      	b.n	86f40 <_svfprintf_r+0x1060>
   8717c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8717e:	980a      	ldr	r0, [sp, #40]	; 0x28
   87180:	aa28      	add	r2, sp, #160	; 0xa0
   87182:	f002 fc6b 	bl	89a5c <__ssprint_r>
   87186:	2800      	cmp	r0, #0
   87188:	f47f a80d 	bne.w	861a6 <_svfprintf_r+0x2c6>
   8718c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8718e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87192:	f7ff b865 	b.w	86260 <_svfprintf_r+0x380>
   87196:	2b01      	cmp	r3, #1
   87198:	46bb      	mov	fp, r7
   8719a:	f47f a9f5 	bne.w	86588 <_svfprintf_r+0x6a8>
   8719e:	f7fe bf92 	b.w	860c6 <_svfprintf_r+0x1e6>
   871a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   871a4:	9908      	ldr	r1, [sp, #32]
   871a6:	f853 2b04 	ldr.w	r2, [r3], #4
   871aa:	4655      	mov	r5, sl
   871ac:	6011      	str	r1, [r2, #0]
   871ae:	930e      	str	r3, [sp, #56]	; 0x38
   871b0:	f7ff b88e 	b.w	862d0 <_svfprintf_r+0x3f0>
   871b4:	2b06      	cmp	r3, #6
   871b6:	4629      	mov	r1, r5
   871b8:	bf28      	it	cs
   871ba:	2306      	movcs	r3, #6
   871bc:	462a      	mov	r2, r5
   871be:	9507      	str	r5, [sp, #28]
   871c0:	950d      	str	r5, [sp, #52]	; 0x34
   871c2:	9306      	str	r3, [sp, #24]
   871c4:	4d76      	ldr	r5, [pc, #472]	; (873a0 <_svfprintf_r+0x14c0>)
   871c6:	940e      	str	r4, [sp, #56]	; 0x38
   871c8:	930b      	str	r3, [sp, #44]	; 0x2c
   871ca:	910f      	str	r1, [sp, #60]	; 0x3c
   871cc:	9113      	str	r1, [sp, #76]	; 0x4c
   871ce:	9110      	str	r1, [sp, #64]	; 0x40
   871d0:	f7fe bf8e 	b.w	860f0 <_svfprintf_r+0x210>
   871d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   871d6:	9817      	ldr	r0, [sp, #92]	; 0x5c
   871d8:	191a      	adds	r2, r3, r4
   871da:	e9c8 0300 	strd	r0, r3, [r8]
   871de:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   871e0:	922a      	str	r2, [sp, #168]	; 0xa8
   871e2:	3301      	adds	r3, #1
   871e4:	2b07      	cmp	r3, #7
   871e6:	9329      	str	r3, [sp, #164]	; 0xa4
   871e8:	f300 80b7 	bgt.w	8735a <_svfprintf_r+0x147a>
   871ec:	f108 0808 	add.w	r8, r8, #8
   871f0:	2900      	cmp	r1, #0
   871f2:	f6bf af7d 	bge.w	870f0 <_svfprintf_r+0x1210>
   871f6:	424e      	negs	r6, r1
   871f8:	3110      	adds	r1, #16
   871fa:	f280 83a9 	bge.w	87950 <_svfprintf_r+0x1a70>
   871fe:	4641      	mov	r1, r8
   87200:	2410      	movs	r4, #16
   87202:	46a8      	mov	r8, r5
   87204:	f8df 919c 	ldr.w	r9, [pc, #412]	; 873a4 <_svfprintf_r+0x14c4>
   87208:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   8720c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   8720e:	e004      	b.n	8721a <_svfprintf_r+0x133a>
   87210:	3108      	adds	r1, #8
   87212:	3e10      	subs	r6, #16
   87214:	2e10      	cmp	r6, #16
   87216:	f340 82a7 	ble.w	87768 <_svfprintf_r+0x1888>
   8721a:	3301      	adds	r3, #1
   8721c:	3210      	adds	r2, #16
   8721e:	2b07      	cmp	r3, #7
   87220:	e9c1 9400 	strd	r9, r4, [r1]
   87224:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   87228:	ddf2      	ble.n	87210 <_svfprintf_r+0x1330>
   8722a:	4629      	mov	r1, r5
   8722c:	4658      	mov	r0, fp
   8722e:	aa28      	add	r2, sp, #160	; 0xa0
   87230:	f002 fc14 	bl	89a5c <__ssprint_r>
   87234:	2800      	cmp	r0, #0
   87236:	f47e afb6 	bne.w	861a6 <_svfprintf_r+0x2c6>
   8723a:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   8723e:	a92b      	add	r1, sp, #172	; 0xac
   87240:	e7e7      	b.n	87212 <_svfprintf_r+0x1332>
   87242:	4614      	mov	r4, r2
   87244:	9f07      	ldr	r7, [sp, #28]
   87246:	3601      	adds	r6, #1
   87248:	442c      	add	r4, r5
   8724a:	2e07      	cmp	r6, #7
   8724c:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   87250:	f8c8 9000 	str.w	r9, [r8]
   87254:	f8c8 5004 	str.w	r5, [r8, #4]
   87258:	f77f aaf5 	ble.w	86846 <_svfprintf_r+0x966>
   8725c:	e44e      	b.n	86afc <_svfprintf_r+0xc1c>
   8725e:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   87262:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87264:	d066      	beq.n	87334 <_svfprintf_r+0x1454>
   87266:	f853 4b04 	ldr.w	r4, [r3], #4
   8726a:	4691      	mov	r9, r2
   8726c:	930e      	str	r3, [sp, #56]	; 0x38
   8726e:	b2e4      	uxtb	r4, r4
   87270:	e5bc      	b.n	86dec <_svfprintf_r+0xf0c>
   87272:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   87276:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87278:	d057      	beq.n	8732a <_svfprintf_r+0x144a>
   8727a:	f853 4b04 	ldr.w	r4, [r3], #4
   8727e:	4691      	mov	r9, r2
   87280:	930e      	str	r3, [sp, #56]	; 0x38
   87282:	b2e4      	uxtb	r4, r4
   87284:	f7fe bf49 	b.w	8611a <_svfprintf_r+0x23a>
   87288:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   8728a:	f8df 9118 	ldr.w	r9, [pc, #280]	; 873a4 <_svfprintf_r+0x14c4>
   8728e:	f7ff ba95 	b.w	867bc <_svfprintf_r+0x8dc>
   87292:	222d      	movs	r2, #45	; 0x2d
   87294:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   87298:	f7ff b857 	b.w	8634a <_svfprintf_r+0x46a>
   8729c:	4645      	mov	r5, r8
   8729e:	4690      	mov	r8, r2
   872a0:	463a      	mov	r2, r7
   872a2:	460c      	mov	r4, r1
   872a4:	464f      	mov	r7, r9
   872a6:	4691      	mov	r9, r2
   872a8:	3301      	adds	r3, #1
   872aa:	4434      	add	r4, r6
   872ac:	2b07      	cmp	r3, #7
   872ae:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   872b2:	f8c8 9000 	str.w	r9, [r8]
   872b6:	f8c8 6004 	str.w	r6, [r8, #4]
   872ba:	dc5c      	bgt.n	87376 <_svfprintf_r+0x1496>
   872bc:	f108 0808 	add.w	r8, r8, #8
   872c0:	f7ff bb9e 	b.w	86a00 <_svfprintf_r+0xb20>
   872c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   872c6:	991b      	ldr	r1, [sp, #108]	; 0x6c
   872c8:	1aed      	subs	r5, r5, r3
   872ca:	461a      	mov	r2, r3
   872cc:	4628      	mov	r0, r5
   872ce:	f7fe fdd3 	bl	85e78 <strncpy>
   872d2:	f898 3001 	ldrb.w	r3, [r8, #1]
   872d6:	b10b      	cbz	r3, 872dc <_svfprintf_r+0x13fc>
   872d8:	f108 0801 	add.w	r8, r8, #1
   872dc:	4620      	mov	r0, r4
   872de:	4649      	mov	r1, r9
   872e0:	220a      	movs	r2, #10
   872e2:	2300      	movs	r3, #0
   872e4:	2600      	movs	r6, #0
   872e6:	f005 f99f 	bl	8c628 <__aeabi_uldivmod>
   872ea:	e69f      	b.n	8702c <_svfprintf_r+0x114c>
   872ec:	990c      	ldr	r1, [sp, #48]	; 0x30
   872ee:	980a      	ldr	r0, [sp, #40]	; 0x28
   872f0:	aa28      	add	r2, sp, #160	; 0xa0
   872f2:	f002 fbb3 	bl	89a5c <__ssprint_r>
   872f6:	2800      	cmp	r0, #0
   872f8:	f47e af55 	bne.w	861a6 <_svfprintf_r+0x2c6>
   872fc:	9922      	ldr	r1, [sp, #136]	; 0x88
   872fe:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87300:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87304:	e6dd      	b.n	870c2 <_svfprintf_r+0x11e2>
   87306:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87308:	18ae      	adds	r6, r5, r2
   8730a:	eba6 060b 	sub.w	r6, r6, fp
   8730e:	1ad5      	subs	r5, r2, r3
   87310:	42ae      	cmp	r6, r5
   87312:	bfa8      	it	ge
   87314:	462e      	movge	r6, r5
   87316:	f7ff bba6 	b.w	86a66 <_svfprintf_r+0xb86>
   8731a:	f852 4b04 	ldr.w	r4, [r2], #4
   8731e:	4689      	mov	r9, r1
   87320:	2301      	movs	r3, #1
   87322:	920e      	str	r2, [sp, #56]	; 0x38
   87324:	b2e4      	uxtb	r4, r4
   87326:	f7fe befb 	b.w	86120 <_svfprintf_r+0x240>
   8732a:	f853 4b04 	ldr.w	r4, [r3], #4
   8732e:	930e      	str	r3, [sp, #56]	; 0x38
   87330:	f7fe bef3 	b.w	8611a <_svfprintf_r+0x23a>
   87334:	f853 4b04 	ldr.w	r4, [r3], #4
   87338:	930e      	str	r3, [sp, #56]	; 0x38
   8733a:	e557      	b.n	86dec <_svfprintf_r+0xf0c>
   8733c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8733e:	9908      	ldr	r1, [sp, #32]
   87340:	f853 2b04 	ldr.w	r2, [r3], #4
   87344:	4655      	mov	r5, sl
   87346:	8011      	strh	r1, [r2, #0]
   87348:	930e      	str	r3, [sp, #56]	; 0x38
   8734a:	f7fe bfc1 	b.w	862d0 <_svfprintf_r+0x3f0>
   8734e:	f344 19c0 	sbfx	r9, r4, #7, #1
   87352:	464b      	mov	r3, r9
   87354:	b264      	sxtb	r4, r4
   87356:	f7fe bea4 	b.w	860a2 <_svfprintf_r+0x1c2>
   8735a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8735c:	980a      	ldr	r0, [sp, #40]	; 0x28
   8735e:	aa28      	add	r2, sp, #160	; 0xa0
   87360:	f002 fb7c 	bl	89a5c <__ssprint_r>
   87364:	2800      	cmp	r0, #0
   87366:	f47e af1e 	bne.w	861a6 <_svfprintf_r+0x2c6>
   8736a:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   8736e:	9922      	ldr	r1, [sp, #136]	; 0x88
   87370:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87374:	e73c      	b.n	871f0 <_svfprintf_r+0x1310>
   87376:	990c      	ldr	r1, [sp, #48]	; 0x30
   87378:	980a      	ldr	r0, [sp, #40]	; 0x28
   8737a:	aa28      	add	r2, sp, #160	; 0xa0
   8737c:	f002 fb6e 	bl	89a5c <__ssprint_r>
   87380:	2800      	cmp	r0, #0
   87382:	f47e af10 	bne.w	861a6 <_svfprintf_r+0x2c6>
   87386:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87388:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8738c:	f7ff bb38 	b.w	86a00 <_svfprintf_r+0xb20>
   87390:	2306      	movs	r3, #6
   87392:	9307      	str	r3, [sp, #28]
   87394:	f026 0320 	bic.w	r3, r6, #32
   87398:	9306      	str	r3, [sp, #24]
   8739a:	e470      	b.n	86c7e <_svfprintf_r+0xd9e>
   8739c:	0008c9d4 	.word	0x0008c9d4
   873a0:	0008c9cc 	.word	0x0008c9cc
   873a4:	0008c9e8 	.word	0x0008c9e8
   873a8:	e9dd 3512 	ldrd	r3, r5, [sp, #72]	; 0x48
   873ac:	18eb      	adds	r3, r5, r3
   873ae:	429e      	cmp	r6, r3
   873b0:	46b3      	mov	fp, r6
   873b2:	9719      	str	r7, [sp, #100]	; 0x64
   873b4:	4690      	mov	r8, r2
   873b6:	460c      	mov	r4, r1
   873b8:	bf28      	it	cs
   873ba:	469b      	movcs	fp, r3
   873bc:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   873c0:	9f10      	ldr	r7, [sp, #64]	; 0x40
   873c2:	f7ff bb23 	b.w	86a0c <_svfprintf_r+0xb2c>
   873c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   873c8:	1cda      	adds	r2, r3, #3
   873ca:	9310      	str	r3, [sp, #64]	; 0x40
   873cc:	db02      	blt.n	873d4 <_svfprintf_r+0x14f4>
   873ce:	9a07      	ldr	r2, [sp, #28]
   873d0:	4293      	cmp	r3, r2
   873d2:	dd04      	ble.n	873de <_svfprintf_r+0x14fe>
   873d4:	3e02      	subs	r6, #2
   873d6:	f026 0320 	bic.w	r3, r6, #32
   873da:	9306      	str	r3, [sp, #24]
   873dc:	e48b      	b.n	86cf6 <_svfprintf_r+0xe16>
   873de:	9b10      	ldr	r3, [sp, #64]	; 0x40
   873e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   873e2:	4293      	cmp	r3, r2
   873e4:	f2c0 80c2 	blt.w	8756c <_svfprintf_r+0x168c>
   873e8:	f019 0f01 	tst.w	r9, #1
   873ec:	f000 821d 	beq.w	8782a <_svfprintf_r+0x194a>
   873f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   873f2:	4413      	add	r3, r2
   873f4:	930b      	str	r3, [sp, #44]	; 0x2c
   873f6:	f419 6f80 	tst.w	r9, #1024	; 0x400
   873fa:	f000 8214 	beq.w	87826 <_svfprintf_r+0x1946>
   873fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87400:	2667      	movs	r6, #103	; 0x67
   87402:	2b00      	cmp	r3, #0
   87404:	dc76      	bgt.n	874f4 <_svfprintf_r+0x1614>
   87406:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87408:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8740c:	9306      	str	r3, [sp, #24]
   8740e:	2300      	movs	r3, #0
   87410:	930f      	str	r3, [sp, #60]	; 0x3c
   87412:	9313      	str	r3, [sp, #76]	; 0x4c
   87414:	e4cf      	b.n	86db6 <_svfprintf_r+0xed6>
   87416:	222d      	movs	r2, #45	; 0x2d
   87418:	2300      	movs	r3, #0
   8741a:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   8741e:	9307      	str	r3, [sp, #28]
   87420:	f7fe be68 	b.w	860f4 <_svfprintf_r+0x214>
   87424:	990c      	ldr	r1, [sp, #48]	; 0x30
   87426:	980a      	ldr	r0, [sp, #40]	; 0x28
   87428:	aa28      	add	r2, sp, #160	; 0xa0
   8742a:	f002 fb17 	bl	89a5c <__ssprint_r>
   8742e:	2800      	cmp	r0, #0
   87430:	f47e aeb9 	bne.w	861a6 <_svfprintf_r+0x2c6>
   87434:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87436:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8743a:	f7ff bad8 	b.w	869ee <_svfprintf_r+0xb0e>
   8743e:	4659      	mov	r1, fp
   87440:	4650      	mov	r0, sl
   87442:	aa28      	add	r2, sp, #160	; 0xa0
   87444:	f002 fb0a 	bl	89a5c <__ssprint_r>
   87448:	2800      	cmp	r0, #0
   8744a:	f47e aeac 	bne.w	861a6 <_svfprintf_r+0x2c6>
   8744e:	7838      	ldrb	r0, [r7, #0]
   87450:	992a      	ldr	r1, [sp, #168]	; 0xa8
   87452:	aa2b      	add	r2, sp, #172	; 0xac
   87454:	4406      	add	r6, r0
   87456:	e57a      	b.n	86f4e <_svfprintf_r+0x106e>
   87458:	990c      	ldr	r1, [sp, #48]	; 0x30
   8745a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8745c:	aa28      	add	r2, sp, #160	; 0xa0
   8745e:	f002 fafd 	bl	89a5c <__ssprint_r>
   87462:	2800      	cmp	r0, #0
   87464:	f47e ae9f 	bne.w	861a6 <_svfprintf_r+0x2c6>
   87468:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8746a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8746c:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87470:	f7ff bae1 	b.w	86a36 <_svfprintf_r+0xb56>
   87474:	9907      	ldr	r1, [sp, #28]
   87476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87478:	9101      	str	r1, [sp, #4]
   8747a:	2103      	movs	r1, #3
   8747c:	9100      	str	r1, [sp, #0]
   8747e:	a926      	add	r1, sp, #152	; 0x98
   87480:	9104      	str	r1, [sp, #16]
   87482:	a923      	add	r1, sp, #140	; 0x8c
   87484:	9103      	str	r1, [sp, #12]
   87486:	a922      	add	r1, sp, #136	; 0x88
   87488:	465a      	mov	r2, fp
   8748a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8748c:	9102      	str	r1, [sp, #8]
   8748e:	f000 fb1f 	bl	87ad0 <_dtoa_r>
   87492:	7803      	ldrb	r3, [r0, #0]
   87494:	4605      	mov	r5, r0
   87496:	2b30      	cmp	r3, #48	; 0x30
   87498:	f000 8216 	beq.w	878c8 <_svfprintf_r+0x19e8>
   8749c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8749e:	9a07      	ldr	r2, [sp, #28]
   874a0:	46b9      	mov	r9, r7
   874a2:	4413      	add	r3, r2
   874a4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   874a6:	18ec      	adds	r4, r5, r3
   874a8:	4658      	mov	r0, fp
   874aa:	2200      	movs	r2, #0
   874ac:	2300      	movs	r3, #0
   874ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   874b0:	f005 f84a 	bl	8c548 <__aeabi_dcmpeq>
   874b4:	b108      	cbz	r0, 874ba <_svfprintf_r+0x15da>
   874b6:	4623      	mov	r3, r4
   874b8:	e411      	b.n	86cde <_svfprintf_r+0xdfe>
   874ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
   874bc:	42a3      	cmp	r3, r4
   874be:	f4bf ac0e 	bcs.w	86cde <_svfprintf_r+0xdfe>
   874c2:	2130      	movs	r1, #48	; 0x30
   874c4:	1c5a      	adds	r2, r3, #1
   874c6:	9226      	str	r2, [sp, #152]	; 0x98
   874c8:	7019      	strb	r1, [r3, #0]
   874ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   874cc:	429c      	cmp	r4, r3
   874ce:	d8f9      	bhi.n	874c4 <_svfprintf_r+0x15e4>
   874d0:	e405      	b.n	86cde <_svfprintf_r+0xdfe>
   874d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   874d4:	2a00      	cmp	r2, #0
   874d6:	9210      	str	r2, [sp, #64]	; 0x40
   874d8:	f340 820e 	ble.w	878f8 <_svfprintf_r+0x1a18>
   874dc:	9907      	ldr	r1, [sp, #28]
   874de:	f009 0301 	and.w	r3, r9, #1
   874e2:	430b      	orrs	r3, r1
   874e4:	f040 817e 	bne.w	877e4 <_svfprintf_r+0x1904>
   874e8:	2666      	movs	r6, #102	; 0x66
   874ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
   874ec:	930b      	str	r3, [sp, #44]	; 0x2c
   874ee:	f419 6f80 	tst.w	r9, #1024	; 0x400
   874f2:	d088      	beq.n	87406 <_svfprintf_r+0x1526>
   874f4:	9919      	ldr	r1, [sp, #100]	; 0x64
   874f6:	780b      	ldrb	r3, [r1, #0]
   874f8:	2bff      	cmp	r3, #255	; 0xff
   874fa:	f000 8225 	beq.w	87948 <_svfprintf_r+0x1a68>
   874fe:	2400      	movs	r4, #0
   87500:	9a10      	ldr	r2, [sp, #64]	; 0x40
   87502:	4620      	mov	r0, r4
   87504:	e004      	b.n	87510 <_svfprintf_r+0x1630>
   87506:	3001      	adds	r0, #1
   87508:	3101      	adds	r1, #1
   8750a:	2bff      	cmp	r3, #255	; 0xff
   8750c:	f000 8159 	beq.w	877c2 <_svfprintf_r+0x18e2>
   87510:	4293      	cmp	r3, r2
   87512:	f280 8156 	bge.w	877c2 <_svfprintf_r+0x18e2>
   87516:	1ad2      	subs	r2, r2, r3
   87518:	784b      	ldrb	r3, [r1, #1]
   8751a:	2b00      	cmp	r3, #0
   8751c:	d1f3      	bne.n	87506 <_svfprintf_r+0x1626>
   8751e:	780b      	ldrb	r3, [r1, #0]
   87520:	3401      	adds	r4, #1
   87522:	e7f2      	b.n	8750a <_svfprintf_r+0x162a>
   87524:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   87528:	f7ff b9da 	b.w	868e0 <_svfprintf_r+0xa00>
   8752c:	9b07      	ldr	r3, [sp, #28]
   8752e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87532:	940e      	str	r4, [sp, #56]	; 0x38
   87534:	9306      	str	r3, [sp, #24]
   87536:	930b      	str	r3, [sp, #44]	; 0x2c
   87538:	9007      	str	r0, [sp, #28]
   8753a:	900f      	str	r0, [sp, #60]	; 0x3c
   8753c:	9013      	str	r0, [sp, #76]	; 0x4c
   8753e:	9010      	str	r0, [sp, #64]	; 0x40
   87540:	f7fe bdd6 	b.w	860f0 <_svfprintf_r+0x210>
   87544:	990c      	ldr	r1, [sp, #48]	; 0x30
   87546:	980a      	ldr	r0, [sp, #40]	; 0x28
   87548:	aa28      	add	r2, sp, #160	; 0xa0
   8754a:	f002 fa87 	bl	89a5c <__ssprint_r>
   8754e:	2800      	cmp	r0, #0
   87550:	f47e ae29 	bne.w	861a6 <_svfprintf_r+0x2c6>
   87554:	9d22      	ldr	r5, [sp, #136]	; 0x88
   87556:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87558:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8755a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8755e:	1b5d      	subs	r5, r3, r5
   87560:	f7ff ba81 	b.w	86a66 <_svfprintf_r+0xb86>
   87564:	2300      	movs	r3, #0
   87566:	9307      	str	r3, [sp, #28]
   87568:	f7fe bd0b 	b.w	85f82 <_svfprintf_r+0xa2>
   8756c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8756e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   87570:	189a      	adds	r2, r3, r2
   87572:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87574:	920b      	str	r2, [sp, #44]	; 0x2c
   87576:	2b00      	cmp	r3, #0
   87578:	f340 8185 	ble.w	87886 <_svfprintf_r+0x19a6>
   8757c:	2667      	movs	r6, #103	; 0x67
   8757e:	e7b6      	b.n	874ee <_svfprintf_r+0x160e>
   87580:	2330      	movs	r3, #48	; 0x30
   87582:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   87586:	2358      	movs	r3, #88	; 0x58
   87588:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
   8758c:	9b07      	ldr	r3, [sp, #28]
   8758e:	f047 0402 	orr.w	r4, r7, #2
   87592:	2b63      	cmp	r3, #99	; 0x63
   87594:	f300 80c4 	bgt.w	87720 <_svfprintf_r+0x1840>
   87598:	2300      	movs	r3, #0
   8759a:	ad3b      	add	r5, sp, #236	; 0xec
   8759c:	930d      	str	r3, [sp, #52]	; 0x34
   8759e:	f447 7381 	orr.w	r3, r7, #258	; 0x102
   875a2:	930f      	str	r3, [sp, #60]	; 0x3c
   875a4:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   875a8:	4613      	mov	r3, r2
   875aa:	2b00      	cmp	r3, #0
   875ac:	4627      	mov	r7, r4
   875ae:	f2c0 8084 	blt.w	876ba <_svfprintf_r+0x17da>
   875b2:	930b      	str	r3, [sp, #44]	; 0x2c
   875b4:	2300      	movs	r3, #0
   875b6:	468b      	mov	fp, r1
   875b8:	931d      	str	r3, [sp, #116]	; 0x74
   875ba:	f026 0320 	bic.w	r3, r6, #32
   875be:	9306      	str	r3, [sp, #24]
   875c0:	2e61      	cmp	r6, #97	; 0x61
   875c2:	f000 8118 	beq.w	877f6 <_svfprintf_r+0x1916>
   875c6:	2e41      	cmp	r6, #65	; 0x41
   875c8:	f47f ab67 	bne.w	86c9a <_svfprintf_r+0xdba>
   875cc:	aa22      	add	r2, sp, #136	; 0x88
   875ce:	4658      	mov	r0, fp
   875d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   875d2:	f002 f9f9 	bl	899c8 <frexp>
   875d6:	2200      	movs	r2, #0
   875d8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   875dc:	f004 fd4c 	bl	8c078 <__aeabi_dmul>
   875e0:	4602      	mov	r2, r0
   875e2:	460b      	mov	r3, r1
   875e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   875e8:	2200      	movs	r2, #0
   875ea:	2300      	movs	r3, #0
   875ec:	f004 ffac 	bl	8c548 <__aeabi_dcmpeq>
   875f0:	b108      	cbz	r0, 875f6 <_svfprintf_r+0x1716>
   875f2:	2301      	movs	r3, #1
   875f4:	9322      	str	r3, [sp, #136]	; 0x88
   875f6:	4bad      	ldr	r3, [pc, #692]	; (878ac <_svfprintf_r+0x19cc>)
   875f8:	930b      	str	r3, [sp, #44]	; 0x2c
   875fa:	9b07      	ldr	r3, [sp, #28]
   875fc:	e9cd a612 	strd	sl, r6, [sp, #72]	; 0x48
   87600:	e9cd 781e 	strd	r7, r8, [sp, #120]	; 0x78
   87604:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   87608:	46ab      	mov	fp, r5
   8760a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   8760e:	f103 39ff 	add.w	r9, r3, #4294967295
   87612:	9510      	str	r5, [sp, #64]	; 0x40
   87614:	e006      	b.n	87624 <_svfprintf_r+0x1744>
   87616:	2200      	movs	r2, #0
   87618:	2300      	movs	r3, #0
   8761a:	f109 39ff 	add.w	r9, r9, #4294967295
   8761e:	f004 ff93 	bl	8c548 <__aeabi_dcmpeq>
   87622:	b9e8      	cbnz	r0, 87660 <_svfprintf_r+0x1780>
   87624:	2200      	movs	r2, #0
   87626:	4ba2      	ldr	r3, [pc, #648]	; (878b0 <_svfprintf_r+0x19d0>)
   87628:	4630      	mov	r0, r6
   8762a:	4639      	mov	r1, r7
   8762c:	f004 fd24 	bl	8c078 <__aeabi_dmul>
   87630:	460f      	mov	r7, r1
   87632:	4606      	mov	r6, r0
   87634:	f004 ffd0 	bl	8c5d8 <__aeabi_d2iz>
   87638:	4604      	mov	r4, r0
   8763a:	f004 fcb3 	bl	8bfa4 <__aeabi_i2d>
   8763e:	460b      	mov	r3, r1
   87640:	4602      	mov	r2, r0
   87642:	4639      	mov	r1, r7
   87644:	4630      	mov	r0, r6
   87646:	f004 fb5f 	bl	8bd08 <__aeabi_dsub>
   8764a:	f81a 3004 	ldrb.w	r3, [sl, r4]
   8764e:	f1b9 3fff 	cmp.w	r9, #4294967295
   87652:	46d8      	mov	r8, fp
   87654:	464d      	mov	r5, r9
   87656:	4606      	mov	r6, r0
   87658:	460f      	mov	r7, r1
   8765a:	f80b 3b01 	strb.w	r3, [fp], #1
   8765e:	d1da      	bne.n	87616 <_svfprintf_r+0x1736>
   87660:	4630      	mov	r0, r6
   87662:	4639      	mov	r1, r7
   87664:	2200      	movs	r2, #0
   87666:	4b93      	ldr	r3, [pc, #588]	; (878b4 <_svfprintf_r+0x19d4>)
   87668:	46a9      	mov	r9, r5
   8766a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   8766e:	9d10      	ldr	r5, [sp, #64]	; 0x40
   87670:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   87674:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87678:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
   8767c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   8767e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   87680:	f004 ff8a 	bl	8c598 <__aeabi_dcmpgt>
   87684:	bb80      	cbnz	r0, 876e8 <_svfprintf_r+0x1808>
   87686:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8768a:	2200      	movs	r2, #0
   8768c:	4b89      	ldr	r3, [pc, #548]	; (878b4 <_svfprintf_r+0x19d4>)
   8768e:	f004 ff5b 	bl	8c548 <__aeabi_dcmpeq>
   87692:	b108      	cbz	r0, 87698 <_svfprintf_r+0x17b8>
   87694:	07e1      	lsls	r1, r4, #31
   87696:	d427      	bmi.n	876e8 <_svfprintf_r+0x1808>
   87698:	464b      	mov	r3, r9
   8769a:	2b00      	cmp	r3, #0
   8769c:	db06      	blt.n	876ac <_svfprintf_r+0x17cc>
   8769e:	2230      	movs	r2, #48	; 0x30
   876a0:	3301      	adds	r3, #1
   876a2:	445b      	add	r3, fp
   876a4:	f80b 2b01 	strb.w	r2, [fp], #1
   876a8:	455b      	cmp	r3, fp
   876aa:	d1fb      	bne.n	876a4 <_svfprintf_r+0x17c4>
   876ac:	ebab 0305 	sub.w	r3, fp, r5
   876b0:	46b9      	mov	r9, r7
   876b2:	9312      	str	r3, [sp, #72]	; 0x48
   876b4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   876b6:	f7ff bb14 	b.w	86ce2 <_svfprintf_r+0xe02>
   876ba:	f026 0320 	bic.w	r3, r6, #32
   876be:	9306      	str	r3, [sp, #24]
   876c0:	222d      	movs	r2, #45	; 0x2d
   876c2:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   876c6:	469b      	mov	fp, r3
   876c8:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   876cc:	921d      	str	r2, [sp, #116]	; 0x74
   876ce:	930b      	str	r3, [sp, #44]	; 0x2c
   876d0:	e776      	b.n	875c0 <_svfprintf_r+0x16e0>
   876d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   876d4:	f7ff b95c 	b.w	86990 <_svfprintf_r+0xab0>
   876d8:	9b07      	ldr	r3, [sp, #28]
   876da:	18ec      	adds	r4, r5, r3
   876dc:	e6e4      	b.n	874a8 <_svfprintf_r+0x15c8>
   876de:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   876e0:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 878b8 <_svfprintf_r+0x19d8>
   876e4:	f7ff b827 	b.w	86736 <_svfprintf_r+0x856>
   876e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   876ea:	9326      	str	r3, [sp, #152]	; 0x98
   876ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   876ee:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   876f2:	7bd9      	ldrb	r1, [r3, #15]
   876f4:	465b      	mov	r3, fp
   876f6:	428a      	cmp	r2, r1
   876f8:	d109      	bne.n	8770e <_svfprintf_r+0x182e>
   876fa:	2030      	movs	r0, #48	; 0x30
   876fc:	f803 0c01 	strb.w	r0, [r3, #-1]
   87700:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87702:	1e5a      	subs	r2, r3, #1
   87704:	9226      	str	r2, [sp, #152]	; 0x98
   87706:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   8770a:	4291      	cmp	r1, r2
   8770c:	d0f6      	beq.n	876fc <_svfprintf_r+0x181c>
   8770e:	2a39      	cmp	r2, #57	; 0x39
   87710:	bf0b      	itete	eq
   87712:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
   87714:	3201      	addne	r2, #1
   87716:	7a92      	ldrbeq	r2, [r2, #10]
   87718:	b2d2      	uxtbne	r2, r2
   8771a:	f803 2c01 	strb.w	r2, [r3, #-1]
   8771e:	e7c5      	b.n	876ac <_svfprintf_r+0x17cc>
   87720:	980a      	ldr	r0, [sp, #40]	; 0x28
   87722:	1c59      	adds	r1, r3, #1
   87724:	f001 faac 	bl	88c80 <_malloc_r>
   87728:	4605      	mov	r5, r0
   8772a:	2800      	cmp	r0, #0
   8772c:	f000 8117 	beq.w	8795e <_svfprintf_r+0x1a7e>
   87730:	900d      	str	r0, [sp, #52]	; 0x34
   87732:	e734      	b.n	8759e <_svfprintf_r+0x16be>
   87734:	2102      	movs	r1, #2
   87736:	9100      	str	r1, [sp, #0]
   87738:	9907      	ldr	r1, [sp, #28]
   8773a:	465a      	mov	r2, fp
   8773c:	1c4c      	adds	r4, r1, #1
   8773e:	a926      	add	r1, sp, #152	; 0x98
   87740:	9104      	str	r1, [sp, #16]
   87742:	a923      	add	r1, sp, #140	; 0x8c
   87744:	9103      	str	r1, [sp, #12]
   87746:	a922      	add	r1, sp, #136	; 0x88
   87748:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8774a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8774c:	9401      	str	r4, [sp, #4]
   8774e:	9102      	str	r1, [sp, #8]
   87750:	f000 f9be 	bl	87ad0 <_dtoa_r>
   87754:	4605      	mov	r5, r0
   87756:	46b9      	mov	r9, r7
   87758:	442c      	add	r4, r5
   8775a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   8775c:	e6a4      	b.n	874a8 <_svfprintf_r+0x15c8>
   8775e:	2330      	movs	r3, #48	; 0x30
   87760:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   87764:	2378      	movs	r3, #120	; 0x78
   87766:	e70f      	b.n	87588 <_svfprintf_r+0x16a8>
   87768:	4645      	mov	r5, r8
   8776a:	4688      	mov	r8, r1
   8776c:	3301      	adds	r3, #1
   8776e:	4432      	add	r2, r6
   87770:	2b07      	cmp	r3, #7
   87772:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   87776:	f8c8 9000 	str.w	r9, [r8]
   8777a:	f8c8 6004 	str.w	r6, [r8, #4]
   8777e:	f77f acb5 	ble.w	870ec <_svfprintf_r+0x120c>
   87782:	990c      	ldr	r1, [sp, #48]	; 0x30
   87784:	980a      	ldr	r0, [sp, #40]	; 0x28
   87786:	aa28      	add	r2, sp, #160	; 0xa0
   87788:	f002 f968 	bl	89a5c <__ssprint_r>
   8778c:	2800      	cmp	r0, #0
   8778e:	f47e ad0a 	bne.w	861a6 <_svfprintf_r+0x2c6>
   87792:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   87796:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8779a:	e4a9      	b.n	870f0 <_svfprintf_r+0x1210>
   8779c:	9b07      	ldr	r3, [sp, #28]
   8779e:	2b00      	cmp	r3, #0
   877a0:	bf08      	it	eq
   877a2:	2301      	moveq	r3, #1
   877a4:	9307      	str	r3, [sp, #28]
   877a6:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   877aa:	930f      	str	r3, [sp, #60]	; 0x3c
   877ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
   877ae:	2b00      	cmp	r3, #0
   877b0:	f2c0 80b6 	blt.w	87920 <_svfprintf_r+0x1a40>
   877b4:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
   877b8:	900d      	str	r0, [sp, #52]	; 0x34
   877ba:	930b      	str	r3, [sp, #44]	; 0x2c
   877bc:	901d      	str	r0, [sp, #116]	; 0x74
   877be:	f7ff ba73 	b.w	86ca8 <_svfprintf_r+0xdc8>
   877c2:	9119      	str	r1, [sp, #100]	; 0x64
   877c4:	9210      	str	r2, [sp, #64]	; 0x40
   877c6:	9013      	str	r0, [sp, #76]	; 0x4c
   877c8:	940f      	str	r4, [sp, #60]	; 0x3c
   877ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   877cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   877ce:	991c      	ldr	r1, [sp, #112]	; 0x70
   877d0:	4413      	add	r3, r2
   877d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   877d4:	fb01 2303 	mla	r3, r1, r3, r2
   877d8:	930b      	str	r3, [sp, #44]	; 0x2c
   877da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   877de:	9306      	str	r3, [sp, #24]
   877e0:	f7ff bae9 	b.w	86db6 <_svfprintf_r+0xed6>
   877e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   877e6:	2666      	movs	r6, #102	; 0x66
   877e8:	18d3      	adds	r3, r2, r3
   877ea:	4419      	add	r1, r3
   877ec:	910b      	str	r1, [sp, #44]	; 0x2c
   877ee:	e67e      	b.n	874ee <_svfprintf_r+0x160e>
   877f0:	2300      	movs	r3, #0
   877f2:	930d      	str	r3, [sp, #52]	; 0x34
   877f4:	e764      	b.n	876c0 <_svfprintf_r+0x17e0>
   877f6:	aa22      	add	r2, sp, #136	; 0x88
   877f8:	4658      	mov	r0, fp
   877fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   877fc:	f002 f8e4 	bl	899c8 <frexp>
   87800:	2200      	movs	r2, #0
   87802:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   87806:	f004 fc37 	bl	8c078 <__aeabi_dmul>
   8780a:	4602      	mov	r2, r0
   8780c:	460b      	mov	r3, r1
   8780e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   87812:	2200      	movs	r2, #0
   87814:	2300      	movs	r3, #0
   87816:	f004 fe97 	bl	8c548 <__aeabi_dcmpeq>
   8781a:	b108      	cbz	r0, 87820 <_svfprintf_r+0x1940>
   8781c:	2301      	movs	r3, #1
   8781e:	9322      	str	r3, [sp, #136]	; 0x88
   87820:	4b26      	ldr	r3, [pc, #152]	; (878bc <_svfprintf_r+0x19dc>)
   87822:	930b      	str	r3, [sp, #44]	; 0x2c
   87824:	e6e9      	b.n	875fa <_svfprintf_r+0x171a>
   87826:	2667      	movs	r6, #103	; 0x67
   87828:	e5ed      	b.n	87406 <_svfprintf_r+0x1526>
   8782a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8782c:	930b      	str	r3, [sp, #44]	; 0x2c
   8782e:	e5e2      	b.n	873f6 <_svfprintf_r+0x1516>
   87830:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87832:	2003      	movs	r0, #3
   87834:	2b00      	cmp	r3, #0
   87836:	bfb8      	it	lt
   87838:	222d      	movlt	r2, #45	; 0x2d
   8783a:	f04f 0300 	mov.w	r3, #0
   8783e:	bfa8      	it	ge
   87840:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
   87844:	4619      	mov	r1, r3
   87846:	930d      	str	r3, [sp, #52]	; 0x34
   87848:	4d1d      	ldr	r5, [pc, #116]	; (878c0 <_svfprintf_r+0x19e0>)
   8784a:	4b1e      	ldr	r3, [pc, #120]	; (878c4 <_svfprintf_r+0x19e4>)
   8784c:	bfb8      	it	lt
   8784e:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
   87852:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   87856:	9006      	str	r0, [sp, #24]
   87858:	f7fe bd7f 	b.w	8635a <_svfprintf_r+0x47a>
   8785c:	2900      	cmp	r1, #0
   8785e:	d144      	bne.n	878ea <_svfprintf_r+0x1a0a>
   87860:	2230      	movs	r2, #48	; 0x30
   87862:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
   87866:	f10d 0293 	add.w	r2, sp, #147	; 0x93
   8786a:	3330      	adds	r3, #48	; 0x30
   8786c:	f802 3b01 	strb.w	r3, [r2], #1
   87870:	ab24      	add	r3, sp, #144	; 0x90
   87872:	1ad3      	subs	r3, r2, r3
   87874:	931a      	str	r3, [sp, #104]	; 0x68
   87876:	f7ff ba87 	b.w	86d88 <_svfprintf_r+0xea8>
   8787a:	f106 020f 	add.w	r2, r6, #15
   8787e:	2101      	movs	r1, #1
   87880:	b2d2      	uxtb	r2, r2
   87882:	f7ff ba41 	b.w	86d08 <_svfprintf_r+0xe28>
   87886:	f1c3 0301 	rsb	r3, r3, #1
   8788a:	441a      	add	r2, r3
   8788c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   87890:	2667      	movs	r6, #103	; 0x67
   87892:	920b      	str	r2, [sp, #44]	; 0x2c
   87894:	9306      	str	r3, [sp, #24]
   87896:	e5ba      	b.n	8740e <_svfprintf_r+0x152e>
   87898:	f019 0f01 	tst.w	r9, #1
   8789c:	f43f aa7f 	beq.w	86d9e <_svfprintf_r+0xebe>
   878a0:	f7ff ba79 	b.w	86d96 <_svfprintf_r+0xeb6>
   878a4:	9829      	ldr	r0, [sp, #164]	; 0xa4
   878a6:	f7ff bb7f 	b.w	86fa8 <_svfprintf_r+0x10c8>
   878aa:	bf00      	nop
   878ac:	0008c9b8 	.word	0x0008c9b8
   878b0:	40300000 	.word	0x40300000
   878b4:	3fe00000 	.word	0x3fe00000
   878b8:	0008c9e8 	.word	0x0008c9e8
   878bc:	0008c9a4 	.word	0x0008c9a4
   878c0:	0008c99c 	.word	0x0008c99c
   878c4:	0008c9a0 	.word	0x0008c9a0
   878c8:	4658      	mov	r0, fp
   878ca:	2200      	movs	r2, #0
   878cc:	2300      	movs	r3, #0
   878ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
   878d0:	f004 fe3a 	bl	8c548 <__aeabi_dcmpeq>
   878d4:	2800      	cmp	r0, #0
   878d6:	f47f ade1 	bne.w	8749c <_svfprintf_r+0x15bc>
   878da:	9b07      	ldr	r3, [sp, #28]
   878dc:	f1c3 0301 	rsb	r3, r3, #1
   878e0:	9322      	str	r3, [sp, #136]	; 0x88
   878e2:	e5dc      	b.n	8749e <_svfprintf_r+0x15be>
   878e4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 87980 <_svfprintf_r+0x1aa0>
   878e8:	e4ad      	b.n	87246 <_svfprintf_r+0x1366>
   878ea:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   878ee:	e7bc      	b.n	8786a <_svfprintf_r+0x198a>
   878f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   878f2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 87980 <_svfprintf_r+0x1aa0>
   878f6:	e428      	b.n	8714a <_svfprintf_r+0x126a>
   878f8:	9a07      	ldr	r2, [sp, #28]
   878fa:	f009 0901 	and.w	r9, r9, #1
   878fe:	ea59 0302 	orrs.w	r3, r9, r2
   87902:	d104      	bne.n	8790e <_svfprintf_r+0x1a2e>
   87904:	2301      	movs	r3, #1
   87906:	2666      	movs	r6, #102	; 0x66
   87908:	9306      	str	r3, [sp, #24]
   8790a:	930b      	str	r3, [sp, #44]	; 0x2c
   8790c:	e57f      	b.n	8740e <_svfprintf_r+0x152e>
   8790e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   87910:	2666      	movs	r6, #102	; 0x66
   87912:	3301      	adds	r3, #1
   87914:	441a      	add	r2, r3
   87916:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   8791a:	920b      	str	r2, [sp, #44]	; 0x2c
   8791c:	9306      	str	r3, [sp, #24]
   8791e:	e576      	b.n	8740e <_svfprintf_r+0x152e>
   87920:	900d      	str	r0, [sp, #52]	; 0x34
   87922:	e6cd      	b.n	876c0 <_svfprintf_r+0x17e0>
   87924:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87926:	f89a 6001 	ldrb.w	r6, [sl, #1]
   8792a:	4692      	mov	sl, r2
   8792c:	f853 2b04 	ldr.w	r2, [r3], #4
   87930:	930e      	str	r3, [sp, #56]	; 0x38
   87932:	ea42 73e2 	orr.w	r3, r2, r2, asr #31
   87936:	9307      	str	r3, [sp, #28]
   87938:	f7fe bb21 	b.w	85f7e <_svfprintf_r+0x9e>
   8793c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8793e:	f8df 9040 	ldr.w	r9, [pc, #64]	; 87980 <_svfprintf_r+0x1aa0>
   87942:	e4b1      	b.n	872a8 <_svfprintf_r+0x13c8>
   87944:	9c07      	ldr	r4, [sp, #28]
   87946:	e706      	b.n	87756 <_svfprintf_r+0x1876>
   87948:	2300      	movs	r3, #0
   8794a:	930f      	str	r3, [sp, #60]	; 0x3c
   8794c:	9313      	str	r3, [sp, #76]	; 0x4c
   8794e:	e73c      	b.n	877ca <_svfprintf_r+0x18ea>
   87950:	f8df 902c 	ldr.w	r9, [pc, #44]	; 87980 <_svfprintf_r+0x1aa0>
   87954:	e70a      	b.n	8776c <_svfprintf_r+0x188c>
   87956:	2302      	movs	r3, #2
   87958:	931a      	str	r3, [sp, #104]	; 0x68
   8795a:	f7ff ba15 	b.w	86d88 <_svfprintf_r+0xea8>
   8795e:	990c      	ldr	r1, [sp, #48]	; 0x30
   87960:	898b      	ldrh	r3, [r1, #12]
   87962:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   87966:	4613      	mov	r3, r2
   87968:	818a      	strh	r2, [r1, #12]
   8796a:	f7fe bc24 	b.w	861b6 <_svfprintf_r+0x2d6>
   8796e:	f04f 32ff 	mov.w	r2, #4294967295
   87972:	230c      	movs	r3, #12
   87974:	9208      	str	r2, [sp, #32]
   87976:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87978:	6013      	str	r3, [r2, #0]
   8797a:	f7fe bc23 	b.w	861c4 <_svfprintf_r+0x2e4>
   8797e:	bf00      	nop
   87980:	0008c9e8 	.word	0x0008c9e8

00087984 <register_fini>:
   87984:	4b02      	ldr	r3, [pc, #8]	; (87990 <register_fini+0xc>)
   87986:	b113      	cbz	r3, 8798e <register_fini+0xa>
   87988:	4802      	ldr	r0, [pc, #8]	; (87994 <register_fini+0x10>)
   8798a:	f000 b805 	b.w	87998 <atexit>
   8798e:	4770      	bx	lr
   87990:	00000000 	.word	0x00000000
   87994:	0008899d 	.word	0x0008899d

00087998 <atexit>:
   87998:	2300      	movs	r3, #0
   8799a:	4601      	mov	r1, r0
   8799c:	461a      	mov	r2, r3
   8799e:	4618      	mov	r0, r3
   879a0:	f002 b8da 	b.w	89b58 <__register_exitproc>

000879a4 <quorem>:
   879a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   879a8:	6903      	ldr	r3, [r0, #16]
   879aa:	690c      	ldr	r4, [r1, #16]
   879ac:	b085      	sub	sp, #20
   879ae:	42a3      	cmp	r3, r4
   879b0:	f2c0 8089 	blt.w	87ac6 <quorem+0x122>
   879b4:	3c01      	subs	r4, #1
   879b6:	f101 0514 	add.w	r5, r1, #20
   879ba:	00a3      	lsls	r3, r4, #2
   879bc:	f100 0814 	add.w	r8, r0, #20
   879c0:	9301      	str	r3, [sp, #4]
   879c2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   879c6:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   879ca:	3301      	adds	r3, #1
   879cc:	468a      	mov	sl, r1
   879ce:	429a      	cmp	r2, r3
   879d0:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   879d4:	4681      	mov	r9, r0
   879d6:	fbb2 f6f3 	udiv	r6, r2, r3
   879da:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   879de:	9102      	str	r1, [sp, #8]
   879e0:	d33a      	bcc.n	87a58 <quorem+0xb4>
   879e2:	2100      	movs	r1, #0
   879e4:	46ae      	mov	lr, r5
   879e6:	4640      	mov	r0, r8
   879e8:	460a      	mov	r2, r1
   879ea:	46a3      	mov	fp, r4
   879ec:	9503      	str	r5, [sp, #12]
   879ee:	f85e 5b04 	ldr.w	r5, [lr], #4
   879f2:	6804      	ldr	r4, [r0, #0]
   879f4:	b2ab      	uxth	r3, r5
   879f6:	fb06 1303 	mla	r3, r6, r3, r1
   879fa:	0c2d      	lsrs	r5, r5, #16
   879fc:	0c19      	lsrs	r1, r3, #16
   879fe:	fb06 1105 	mla	r1, r6, r5, r1
   87a02:	b29b      	uxth	r3, r3
   87a04:	1ad2      	subs	r2, r2, r3
   87a06:	fa1f fc84 	uxth.w	ip, r4
   87a0a:	4494      	add	ip, r2
   87a0c:	b28a      	uxth	r2, r1
   87a0e:	ebc2 4214 	rsb	r2, r2, r4, lsr #16
   87a12:	eb02 422c 	add.w	r2, r2, ip, asr #16
   87a16:	fa1f fc8c 	uxth.w	ip, ip
   87a1a:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   87a1e:	4577      	cmp	r7, lr
   87a20:	f840 3b04 	str.w	r3, [r0], #4
   87a24:	ea4f 4111 	mov.w	r1, r1, lsr #16
   87a28:	ea4f 4222 	mov.w	r2, r2, asr #16
   87a2c:	d2df      	bcs.n	879ee <quorem+0x4a>
   87a2e:	9b01      	ldr	r3, [sp, #4]
   87a30:	465c      	mov	r4, fp
   87a32:	f858 3003 	ldr.w	r3, [r8, r3]
   87a36:	9d03      	ldr	r5, [sp, #12]
   87a38:	b973      	cbnz	r3, 87a58 <quorem+0xb4>
   87a3a:	9b02      	ldr	r3, [sp, #8]
   87a3c:	3b04      	subs	r3, #4
   87a3e:	4598      	cmp	r8, r3
   87a40:	d304      	bcc.n	87a4c <quorem+0xa8>
   87a42:	e007      	b.n	87a54 <quorem+0xb0>
   87a44:	4598      	cmp	r8, r3
   87a46:	f104 34ff 	add.w	r4, r4, #4294967295
   87a4a:	d203      	bcs.n	87a54 <quorem+0xb0>
   87a4c:	f853 2904 	ldr.w	r2, [r3], #-4
   87a50:	2a00      	cmp	r2, #0
   87a52:	d0f7      	beq.n	87a44 <quorem+0xa0>
   87a54:	f8c9 4010 	str.w	r4, [r9, #16]
   87a58:	4651      	mov	r1, sl
   87a5a:	4648      	mov	r0, r9
   87a5c:	f001 fe8c 	bl	89778 <__mcmp>
   87a60:	2800      	cmp	r0, #0
   87a62:	db2c      	blt.n	87abe <quorem+0x11a>
   87a64:	4640      	mov	r0, r8
   87a66:	2300      	movs	r3, #0
   87a68:	3601      	adds	r6, #1
   87a6a:	f855 1b04 	ldr.w	r1, [r5], #4
   87a6e:	f8d0 c000 	ldr.w	ip, [r0]
   87a72:	b28a      	uxth	r2, r1
   87a74:	1a9a      	subs	r2, r3, r2
   87a76:	fa1f fe8c 	uxth.w	lr, ip
   87a7a:	0c0b      	lsrs	r3, r1, #16
   87a7c:	4472      	add	r2, lr
   87a7e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   87a82:	eb03 4322 	add.w	r3, r3, r2, asr #16
   87a86:	b292      	uxth	r2, r2
   87a88:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   87a8c:	42af      	cmp	r7, r5
   87a8e:	f840 2b04 	str.w	r2, [r0], #4
   87a92:	ea4f 4323 	mov.w	r3, r3, asr #16
   87a96:	d2e8      	bcs.n	87a6a <quorem+0xc6>
   87a98:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   87a9c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   87aa0:	b96a      	cbnz	r2, 87abe <quorem+0x11a>
   87aa2:	3b04      	subs	r3, #4
   87aa4:	4598      	cmp	r8, r3
   87aa6:	d304      	bcc.n	87ab2 <quorem+0x10e>
   87aa8:	e007      	b.n	87aba <quorem+0x116>
   87aaa:	4598      	cmp	r8, r3
   87aac:	f104 34ff 	add.w	r4, r4, #4294967295
   87ab0:	d203      	bcs.n	87aba <quorem+0x116>
   87ab2:	f853 2904 	ldr.w	r2, [r3], #-4
   87ab6:	2a00      	cmp	r2, #0
   87ab8:	d0f7      	beq.n	87aaa <quorem+0x106>
   87aba:	f8c9 4010 	str.w	r4, [r9, #16]
   87abe:	4630      	mov	r0, r6
   87ac0:	b005      	add	sp, #20
   87ac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87ac6:	2000      	movs	r0, #0
   87ac8:	b005      	add	sp, #20
   87aca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87ace:	bf00      	nop

00087ad0 <_dtoa_r>:
   87ad0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87ad4:	4690      	mov	r8, r2
   87ad6:	4699      	mov	r9, r3
   87ad8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   87ada:	b099      	sub	sp, #100	; 0x64
   87adc:	4604      	mov	r4, r0
   87ade:	e9cd 8904 	strd	r8, r9, [sp, #16]
   87ae2:	9d25      	ldr	r5, [sp, #148]	; 0x94
   87ae4:	b141      	cbz	r1, 87af8 <_dtoa_r+0x28>
   87ae6:	2301      	movs	r3, #1
   87ae8:	6c42      	ldr	r2, [r0, #68]	; 0x44
   87aea:	4093      	lsls	r3, r2
   87aec:	608b      	str	r3, [r1, #8]
   87aee:	604a      	str	r2, [r1, #4]
   87af0:	f001 fbec 	bl	892cc <_Bfree>
   87af4:	2300      	movs	r3, #0
   87af6:	6423      	str	r3, [r4, #64]	; 0x40
   87af8:	f1b9 0a00 	subs.w	sl, r9, #0
   87afc:	bfb4      	ite	lt
   87afe:	2301      	movlt	r3, #1
   87b00:	2300      	movge	r3, #0
   87b02:	602b      	str	r3, [r5, #0]
   87b04:	4b76      	ldr	r3, [pc, #472]	; (87ce0 <_dtoa_r+0x210>)
   87b06:	bfbc      	itt	lt
   87b08:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   87b0c:	f8cd a014 	strlt.w	sl, [sp, #20]
   87b10:	ea33 030a 	bics.w	r3, r3, sl
   87b14:	f000 80aa 	beq.w	87c6c <_dtoa_r+0x19c>
   87b18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   87b1c:	4610      	mov	r0, r2
   87b1e:	4619      	mov	r1, r3
   87b20:	2200      	movs	r2, #0
   87b22:	2300      	movs	r3, #0
   87b24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   87b28:	f004 fd0e 	bl	8c548 <__aeabi_dcmpeq>
   87b2c:	4607      	mov	r7, r0
   87b2e:	b170      	cbz	r0, 87b4e <_dtoa_r+0x7e>
   87b30:	2301      	movs	r3, #1
   87b32:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87b34:	6013      	str	r3, [r2, #0]
   87b36:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87b38:	2b00      	cmp	r3, #0
   87b3a:	f000 82e6 	beq.w	8810a <_dtoa_r+0x63a>
   87b3e:	4869      	ldr	r0, [pc, #420]	; (87ce4 <_dtoa_r+0x214>)
   87b40:	6018      	str	r0, [r3, #0]
   87b42:	1e43      	subs	r3, r0, #1
   87b44:	9303      	str	r3, [sp, #12]
   87b46:	9803      	ldr	r0, [sp, #12]
   87b48:	b019      	add	sp, #100	; 0x64
   87b4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87b4e:	ab16      	add	r3, sp, #88	; 0x58
   87b50:	9301      	str	r3, [sp, #4]
   87b52:	ab17      	add	r3, sp, #92	; 0x5c
   87b54:	9300      	str	r3, [sp, #0]
   87b56:	4620      	mov	r0, r4
   87b58:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   87b5c:	f001 fed2 	bl	89904 <__d2b>
   87b60:	ea5f 561a 	movs.w	r6, sl, lsr #20
   87b64:	4605      	mov	r5, r0
   87b66:	f040 8097 	bne.w	87c98 <_dtoa_r+0x1c8>
   87b6a:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   87b6e:	443e      	add	r6, r7
   87b70:	f206 4032 	addw	r0, r6, #1074	; 0x432
   87b74:	2820      	cmp	r0, #32
   87b76:	f340 83b7 	ble.w	882e8 <_dtoa_r+0x818>
   87b7a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   87b7e:	fa0a fa00 	lsl.w	sl, sl, r0
   87b82:	f206 4012 	addw	r0, r6, #1042	; 0x412
   87b86:	fa28 f000 	lsr.w	r0, r8, r0
   87b8a:	ea4a 0000 	orr.w	r0, sl, r0
   87b8e:	f004 f9f9 	bl	8bf84 <__aeabi_ui2d>
   87b92:	2301      	movs	r3, #1
   87b94:	3e01      	subs	r6, #1
   87b96:	930f      	str	r3, [sp, #60]	; 0x3c
   87b98:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   87b9c:	2200      	movs	r2, #0
   87b9e:	4b52      	ldr	r3, [pc, #328]	; (87ce8 <_dtoa_r+0x218>)
   87ba0:	f004 f8b2 	bl	8bd08 <__aeabi_dsub>
   87ba4:	a348      	add	r3, pc, #288	; (adr r3, 87cc8 <_dtoa_r+0x1f8>)
   87ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
   87baa:	f004 fa65 	bl	8c078 <__aeabi_dmul>
   87bae:	a348      	add	r3, pc, #288	; (adr r3, 87cd0 <_dtoa_r+0x200>)
   87bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   87bb4:	f004 f8aa 	bl	8bd0c <__adddf3>
   87bb8:	4680      	mov	r8, r0
   87bba:	4630      	mov	r0, r6
   87bbc:	4689      	mov	r9, r1
   87bbe:	f004 f9f1 	bl	8bfa4 <__aeabi_i2d>
   87bc2:	a345      	add	r3, pc, #276	; (adr r3, 87cd8 <_dtoa_r+0x208>)
   87bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   87bc8:	f004 fa56 	bl	8c078 <__aeabi_dmul>
   87bcc:	4602      	mov	r2, r0
   87bce:	460b      	mov	r3, r1
   87bd0:	4640      	mov	r0, r8
   87bd2:	4649      	mov	r1, r9
   87bd4:	f004 f89a 	bl	8bd0c <__adddf3>
   87bd8:	4680      	mov	r8, r0
   87bda:	4689      	mov	r9, r1
   87bdc:	f004 fcfc 	bl	8c5d8 <__aeabi_d2iz>
   87be0:	2200      	movs	r2, #0
   87be2:	4683      	mov	fp, r0
   87be4:	2300      	movs	r3, #0
   87be6:	4640      	mov	r0, r8
   87be8:	4649      	mov	r1, r9
   87bea:	f004 fcb7 	bl	8c55c <__aeabi_dcmplt>
   87bee:	2800      	cmp	r0, #0
   87bf0:	f040 827e 	bne.w	880f0 <_dtoa_r+0x620>
   87bf4:	f1bb 0f16 	cmp.w	fp, #22
   87bf8:	f200 826d 	bhi.w	880d6 <_dtoa_r+0x606>
   87bfc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   87c00:	4b3a      	ldr	r3, [pc, #232]	; (87cec <_dtoa_r+0x21c>)
   87c02:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   87c06:	e9d3 2300 	ldrd	r2, r3, [r3]
   87c0a:	f004 fca7 	bl	8c55c <__aeabi_dcmplt>
   87c0e:	2800      	cmp	r0, #0
   87c10:	d072      	beq.n	87cf8 <_dtoa_r+0x228>
   87c12:	2300      	movs	r3, #0
   87c14:	1bbe      	subs	r6, r7, r6
   87c16:	930e      	str	r3, [sp, #56]	; 0x38
   87c18:	1e73      	subs	r3, r6, #1
   87c1a:	f10b 3bff 	add.w	fp, fp, #4294967295
   87c1e:	9306      	str	r3, [sp, #24]
   87c20:	f100 8260 	bmi.w	880e4 <_dtoa_r+0x614>
   87c24:	2300      	movs	r3, #0
   87c26:	9309      	str	r3, [sp, #36]	; 0x24
   87c28:	f1bb 0f00 	cmp.w	fp, #0
   87c2c:	da6b      	bge.n	87d06 <_dtoa_r+0x236>
   87c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87c30:	f8cd b01c 	str.w	fp, [sp, #28]
   87c34:	eba3 030b 	sub.w	r3, r3, fp
   87c38:	9309      	str	r3, [sp, #36]	; 0x24
   87c3a:	f1cb 0300 	rsb	r3, fp, #0
   87c3e:	930d      	str	r3, [sp, #52]	; 0x34
   87c40:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87c42:	f04f 0b00 	mov.w	fp, #0
   87c46:	2b09      	cmp	r3, #9
   87c48:	d866      	bhi.n	87d18 <_dtoa_r+0x248>
   87c4a:	2b05      	cmp	r3, #5
   87c4c:	f340 834a 	ble.w	882e4 <_dtoa_r+0x814>
   87c50:	2600      	movs	r6, #0
   87c52:	3b04      	subs	r3, #4
   87c54:	9322      	str	r3, [sp, #136]	; 0x88
   87c56:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87c58:	3b02      	subs	r3, #2
   87c5a:	2b03      	cmp	r3, #3
   87c5c:	f200 866c 	bhi.w	88938 <_dtoa_r+0xe68>
   87c60:	e8df f013 	tbh	[pc, r3, lsl #1]
   87c64:	045e0461 	.word	0x045e0461
   87c68:	04380455 	.word	0x04380455
   87c6c:	f242 730f 	movw	r3, #9999	; 0x270f
   87c70:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87c72:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   87c76:	6013      	str	r3, [r2, #0]
   87c78:	ea5a 0308 	orrs.w	r3, sl, r8
   87c7c:	d11a      	bne.n	87cb4 <_dtoa_r+0x1e4>
   87c7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87c80:	2b00      	cmp	r3, #0
   87c82:	f000 8668 	beq.w	88956 <_dtoa_r+0xe86>
   87c86:	4b1a      	ldr	r3, [pc, #104]	; (87cf0 <_dtoa_r+0x220>)
   87c88:	9303      	str	r3, [sp, #12]
   87c8a:	3308      	adds	r3, #8
   87c8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   87c8e:	9803      	ldr	r0, [sp, #12]
   87c90:	6013      	str	r3, [r2, #0]
   87c92:	b019      	add	sp, #100	; 0x64
   87c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87c98:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   87c9c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   87ca0:	4608      	mov	r0, r1
   87ca2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   87ca6:	970f      	str	r7, [sp, #60]	; 0x3c
   87ca8:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   87cac:	9f16      	ldr	r7, [sp, #88]	; 0x58
   87cae:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   87cb2:	e773      	b.n	87b9c <_dtoa_r+0xcc>
   87cb4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87cb6:	2b00      	cmp	r3, #0
   87cb8:	f040 83ef 	bne.w	8849a <_dtoa_r+0x9ca>
   87cbc:	4b0d      	ldr	r3, [pc, #52]	; (87cf4 <_dtoa_r+0x224>)
   87cbe:	9303      	str	r3, [sp, #12]
   87cc0:	e741      	b.n	87b46 <_dtoa_r+0x76>
   87cc2:	bf00      	nop
   87cc4:	f3af 8000 	nop.w
   87cc8:	636f4361 	.word	0x636f4361
   87ccc:	3fd287a7 	.word	0x3fd287a7
   87cd0:	8b60c8b3 	.word	0x8b60c8b3
   87cd4:	3fc68a28 	.word	0x3fc68a28
   87cd8:	509f79fb 	.word	0x509f79fb
   87cdc:	3fd34413 	.word	0x3fd34413
   87ce0:	7ff00000 	.word	0x7ff00000
   87ce4:	0008c9d5 	.word	0x0008c9d5
   87ce8:	3ff80000 	.word	0x3ff80000
   87cec:	0008cb48 	.word	0x0008cb48
   87cf0:	0008c9fc 	.word	0x0008c9fc
   87cf4:	0008c9f8 	.word	0x0008c9f8
   87cf8:	1bbe      	subs	r6, r7, r6
   87cfa:	1e73      	subs	r3, r6, #1
   87cfc:	9306      	str	r3, [sp, #24]
   87cfe:	f100 848a 	bmi.w	88616 <_dtoa_r+0xb46>
   87d02:	900e      	str	r0, [sp, #56]	; 0x38
   87d04:	9009      	str	r0, [sp, #36]	; 0x24
   87d06:	9b06      	ldr	r3, [sp, #24]
   87d08:	445b      	add	r3, fp
   87d0a:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   87d0e:	2300      	movs	r3, #0
   87d10:	930d      	str	r3, [sp, #52]	; 0x34
   87d12:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87d14:	2b09      	cmp	r3, #9
   87d16:	d998      	bls.n	87c4a <_dtoa_r+0x17a>
   87d18:	2300      	movs	r3, #0
   87d1a:	9322      	str	r3, [sp, #136]	; 0x88
   87d1c:	f04f 33ff 	mov.w	r3, #4294967295
   87d20:	2601      	movs	r6, #1
   87d22:	9308      	str	r3, [sp, #32]
   87d24:	2300      	movs	r3, #0
   87d26:	960c      	str	r6, [sp, #48]	; 0x30
   87d28:	9323      	str	r3, [sp, #140]	; 0x8c
   87d2a:	2100      	movs	r1, #0
   87d2c:	9b08      	ldr	r3, [sp, #32]
   87d2e:	6461      	str	r1, [r4, #68]	; 0x44
   87d30:	9312      	str	r3, [sp, #72]	; 0x48
   87d32:	4620      	mov	r0, r4
   87d34:	f001 faa4 	bl	89280 <_Balloc>
   87d38:	9003      	str	r0, [sp, #12]
   87d3a:	2800      	cmp	r0, #0
   87d3c:	f000 8604 	beq.w	88948 <_dtoa_r+0xe78>
   87d40:	9b03      	ldr	r3, [sp, #12]
   87d42:	6423      	str	r3, [r4, #64]	; 0x40
   87d44:	9b08      	ldr	r3, [sp, #32]
   87d46:	2b0e      	cmp	r3, #14
   87d48:	f200 8114 	bhi.w	87f74 <_dtoa_r+0x4a4>
   87d4c:	2e00      	cmp	r6, #0
   87d4e:	f000 8111 	beq.w	87f74 <_dtoa_r+0x4a4>
   87d52:	9907      	ldr	r1, [sp, #28]
   87d54:	2900      	cmp	r1, #0
   87d56:	f340 8460 	ble.w	8861a <_dtoa_r+0xb4a>
   87d5a:	4baf      	ldr	r3, [pc, #700]	; (88018 <_dtoa_r+0x548>)
   87d5c:	f001 020f 	and.w	r2, r1, #15
   87d60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87d64:	460a      	mov	r2, r1
   87d66:	e9d3 6700 	ldrd	r6, r7, [r3]
   87d6a:	ea4f 1821 	mov.w	r8, r1, asr #4
   87d6e:	05d1      	lsls	r1, r2, #23
   87d70:	f140 8417 	bpl.w	885a2 <_dtoa_r+0xad2>
   87d74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   87d78:	4ba8      	ldr	r3, [pc, #672]	; (8801c <_dtoa_r+0x54c>)
   87d7a:	f04f 0a03 	mov.w	sl, #3
   87d7e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   87d82:	f004 faa3 	bl	8c2cc <__aeabi_ddiv>
   87d86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87d8a:	f008 080f 	and.w	r8, r8, #15
   87d8e:	f1b8 0f00 	cmp.w	r8, #0
   87d92:	d013      	beq.n	87dbc <_dtoa_r+0x2ec>
   87d94:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8801c <_dtoa_r+0x54c>
   87d98:	f018 0f01 	tst.w	r8, #1
   87d9c:	d009      	beq.n	87db2 <_dtoa_r+0x2e2>
   87d9e:	e9d9 2300 	ldrd	r2, r3, [r9]
   87da2:	4630      	mov	r0, r6
   87da4:	4639      	mov	r1, r7
   87da6:	f004 f967 	bl	8c078 <__aeabi_dmul>
   87daa:	4606      	mov	r6, r0
   87dac:	460f      	mov	r7, r1
   87dae:	f10a 0a01 	add.w	sl, sl, #1
   87db2:	ea5f 0868 	movs.w	r8, r8, asr #1
   87db6:	f109 0908 	add.w	r9, r9, #8
   87dba:	d1ed      	bne.n	87d98 <_dtoa_r+0x2c8>
   87dbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87dc0:	4632      	mov	r2, r6
   87dc2:	463b      	mov	r3, r7
   87dc4:	f004 fa82 	bl	8c2cc <__aeabi_ddiv>
   87dc8:	4680      	mov	r8, r0
   87dca:	4689      	mov	r9, r1
   87dcc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87dce:	b143      	cbz	r3, 87de2 <_dtoa_r+0x312>
   87dd0:	2200      	movs	r2, #0
   87dd2:	4640      	mov	r0, r8
   87dd4:	4649      	mov	r1, r9
   87dd6:	4b92      	ldr	r3, [pc, #584]	; (88020 <_dtoa_r+0x550>)
   87dd8:	f004 fbc0 	bl	8c55c <__aeabi_dcmplt>
   87ddc:	2800      	cmp	r0, #0
   87dde:	f040 8535 	bne.w	8884c <_dtoa_r+0xd7c>
   87de2:	4650      	mov	r0, sl
   87de4:	f004 f8de 	bl	8bfa4 <__aeabi_i2d>
   87de8:	4642      	mov	r2, r8
   87dea:	464b      	mov	r3, r9
   87dec:	f004 f944 	bl	8c078 <__aeabi_dmul>
   87df0:	4b8c      	ldr	r3, [pc, #560]	; (88024 <_dtoa_r+0x554>)
   87df2:	2200      	movs	r2, #0
   87df4:	f003 ff8a 	bl	8bd0c <__adddf3>
   87df8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   87dfc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87e00:	9311      	str	r3, [sp, #68]	; 0x44
   87e02:	9b08      	ldr	r3, [sp, #32]
   87e04:	2b00      	cmp	r3, #0
   87e06:	f000 8097 	beq.w	87f38 <_dtoa_r+0x468>
   87e0a:	9b07      	ldr	r3, [sp, #28]
   87e0c:	9314      	str	r3, [sp, #80]	; 0x50
   87e0e:	9b08      	ldr	r3, [sp, #32]
   87e10:	9313      	str	r3, [sp, #76]	; 0x4c
   87e12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87e14:	2b00      	cmp	r3, #0
   87e16:	f000 84a9 	beq.w	8876c <_dtoa_r+0xc9c>
   87e1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87e1c:	4b7e      	ldr	r3, [pc, #504]	; (88018 <_dtoa_r+0x548>)
   87e1e:	2000      	movs	r0, #0
   87e20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87e24:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   87e28:	497f      	ldr	r1, [pc, #508]	; (88028 <_dtoa_r+0x558>)
   87e2a:	f004 fa4f 	bl	8c2cc <__aeabi_ddiv>
   87e2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   87e32:	f003 ff69 	bl	8bd08 <__aeabi_dsub>
   87e36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87e3a:	4649      	mov	r1, r9
   87e3c:	4640      	mov	r0, r8
   87e3e:	f004 fbcb 	bl	8c5d8 <__aeabi_d2iz>
   87e42:	4607      	mov	r7, r0
   87e44:	f004 f8ae 	bl	8bfa4 <__aeabi_i2d>
   87e48:	4602      	mov	r2, r0
   87e4a:	460b      	mov	r3, r1
   87e4c:	4640      	mov	r0, r8
   87e4e:	4649      	mov	r1, r9
   87e50:	f003 ff5a 	bl	8bd08 <__aeabi_dsub>
   87e54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   87e58:	9e03      	ldr	r6, [sp, #12]
   87e5a:	3730      	adds	r7, #48	; 0x30
   87e5c:	f806 7b01 	strb.w	r7, [r6], #1
   87e60:	4680      	mov	r8, r0
   87e62:	4689      	mov	r9, r1
   87e64:	f004 fb7a 	bl	8c55c <__aeabi_dcmplt>
   87e68:	2800      	cmp	r0, #0
   87e6a:	f040 852e 	bne.w	888ca <_dtoa_r+0xdfa>
   87e6e:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   87e72:	2700      	movs	r7, #0
   87e74:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   87e78:	9510      	str	r5, [sp, #64]	; 0x40
   87e7a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   87e7c:	9413      	str	r4, [sp, #76]	; 0x4c
   87e7e:	e02a      	b.n	87ed6 <_dtoa_r+0x406>
   87e80:	3701      	adds	r7, #1
   87e82:	42af      	cmp	r7, r5
   87e84:	f280 852e 	bge.w	888e4 <_dtoa_r+0xe14>
   87e88:	4650      	mov	r0, sl
   87e8a:	4659      	mov	r1, fp
   87e8c:	2200      	movs	r2, #0
   87e8e:	4b67      	ldr	r3, [pc, #412]	; (8802c <_dtoa_r+0x55c>)
   87e90:	f004 f8f2 	bl	8c078 <__aeabi_dmul>
   87e94:	2200      	movs	r2, #0
   87e96:	4b65      	ldr	r3, [pc, #404]	; (8802c <_dtoa_r+0x55c>)
   87e98:	4682      	mov	sl, r0
   87e9a:	468b      	mov	fp, r1
   87e9c:	4640      	mov	r0, r8
   87e9e:	4649      	mov	r1, r9
   87ea0:	f004 f8ea 	bl	8c078 <__aeabi_dmul>
   87ea4:	4689      	mov	r9, r1
   87ea6:	4680      	mov	r8, r0
   87ea8:	f004 fb96 	bl	8c5d8 <__aeabi_d2iz>
   87eac:	4604      	mov	r4, r0
   87eae:	f004 f879 	bl	8bfa4 <__aeabi_i2d>
   87eb2:	4602      	mov	r2, r0
   87eb4:	460b      	mov	r3, r1
   87eb6:	4640      	mov	r0, r8
   87eb8:	4649      	mov	r1, r9
   87eba:	f003 ff25 	bl	8bd08 <__aeabi_dsub>
   87ebe:	3430      	adds	r4, #48	; 0x30
   87ec0:	4652      	mov	r2, sl
   87ec2:	465b      	mov	r3, fp
   87ec4:	f806 4b01 	strb.w	r4, [r6], #1
   87ec8:	4680      	mov	r8, r0
   87eca:	4689      	mov	r9, r1
   87ecc:	f004 fb46 	bl	8c55c <__aeabi_dcmplt>
   87ed0:	2800      	cmp	r0, #0
   87ed2:	f040 84f8 	bne.w	888c6 <_dtoa_r+0xdf6>
   87ed6:	4642      	mov	r2, r8
   87ed8:	464b      	mov	r3, r9
   87eda:	2000      	movs	r0, #0
   87edc:	4950      	ldr	r1, [pc, #320]	; (88020 <_dtoa_r+0x550>)
   87ede:	f003 ff13 	bl	8bd08 <__aeabi_dsub>
   87ee2:	4652      	mov	r2, sl
   87ee4:	465b      	mov	r3, fp
   87ee6:	f004 fb39 	bl	8c55c <__aeabi_dcmplt>
   87eea:	2800      	cmp	r0, #0
   87eec:	d0c8      	beq.n	87e80 <_dtoa_r+0x3b0>
   87eee:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   87ef2:	9d10      	ldr	r5, [sp, #64]	; 0x40
   87ef4:	9a03      	ldr	r2, [sp, #12]
   87ef6:	9307      	str	r3, [sp, #28]
   87ef8:	e002      	b.n	87f00 <_dtoa_r+0x430>
   87efa:	4296      	cmp	r6, r2
   87efc:	f000 84cd 	beq.w	8889a <_dtoa_r+0xdca>
   87f00:	46b2      	mov	sl, r6
   87f02:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   87f06:	2b39      	cmp	r3, #57	; 0x39
   87f08:	d0f7      	beq.n	87efa <_dtoa_r+0x42a>
   87f0a:	3301      	adds	r3, #1
   87f0c:	b2db      	uxtb	r3, r3
   87f0e:	7033      	strb	r3, [r6, #0]
   87f10:	9b07      	ldr	r3, [sp, #28]
   87f12:	3301      	adds	r3, #1
   87f14:	9307      	str	r3, [sp, #28]
   87f16:	e1c8      	b.n	882aa <_dtoa_r+0x7da>
   87f18:	4650      	mov	r0, sl
   87f1a:	f004 f843 	bl	8bfa4 <__aeabi_i2d>
   87f1e:	4642      	mov	r2, r8
   87f20:	464b      	mov	r3, r9
   87f22:	f004 f8a9 	bl	8c078 <__aeabi_dmul>
   87f26:	4b3f      	ldr	r3, [pc, #252]	; (88024 <_dtoa_r+0x554>)
   87f28:	2200      	movs	r2, #0
   87f2a:	f003 feef 	bl	8bd0c <__adddf3>
   87f2e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   87f32:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87f36:	9311      	str	r3, [sp, #68]	; 0x44
   87f38:	4640      	mov	r0, r8
   87f3a:	4649      	mov	r1, r9
   87f3c:	2200      	movs	r2, #0
   87f3e:	4b3c      	ldr	r3, [pc, #240]	; (88030 <_dtoa_r+0x560>)
   87f40:	f003 fee2 	bl	8bd08 <__aeabi_dsub>
   87f44:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   87f48:	464b      	mov	r3, r9
   87f4a:	4642      	mov	r2, r8
   87f4c:	4606      	mov	r6, r0
   87f4e:	460f      	mov	r7, r1
   87f50:	f004 fb22 	bl	8c598 <__aeabi_dcmpgt>
   87f54:	4681      	mov	r9, r0
   87f56:	2800      	cmp	r0, #0
   87f58:	f040 84af 	bne.w	888ba <_dtoa_r+0xdea>
   87f5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87f60:	4602      	mov	r2, r0
   87f62:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   87f66:	4630      	mov	r0, r6
   87f68:	4639      	mov	r1, r7
   87f6a:	f004 faf7 	bl	8c55c <__aeabi_dcmplt>
   87f6e:	2800      	cmp	r0, #0
   87f70:	f040 8348 	bne.w	88604 <_dtoa_r+0xb34>
   87f74:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   87f76:	2b00      	cmp	r3, #0
   87f78:	f2c0 808c 	blt.w	88094 <_dtoa_r+0x5c4>
   87f7c:	9a07      	ldr	r2, [sp, #28]
   87f7e:	2a0e      	cmp	r2, #14
   87f80:	f300 8088 	bgt.w	88094 <_dtoa_r+0x5c4>
   87f84:	4b24      	ldr	r3, [pc, #144]	; (88018 <_dtoa_r+0x548>)
   87f86:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87f8a:	e9d3 ab00 	ldrd	sl, fp, [r3]
   87f8e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   87f90:	2b00      	cmp	r3, #0
   87f92:	da1b      	bge.n	87fcc <_dtoa_r+0x4fc>
   87f94:	9b08      	ldr	r3, [sp, #32]
   87f96:	2b00      	cmp	r3, #0
   87f98:	dc18      	bgt.n	87fcc <_dtoa_r+0x4fc>
   87f9a:	f040 8331 	bne.w	88600 <_dtoa_r+0xb30>
   87f9e:	2200      	movs	r2, #0
   87fa0:	4b23      	ldr	r3, [pc, #140]	; (88030 <_dtoa_r+0x560>)
   87fa2:	4650      	mov	r0, sl
   87fa4:	4659      	mov	r1, fp
   87fa6:	f004 f867 	bl	8c078 <__aeabi_dmul>
   87faa:	4602      	mov	r2, r0
   87fac:	460b      	mov	r3, r1
   87fae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   87fb2:	f004 fadd 	bl	8c570 <__aeabi_dcmple>
   87fb6:	f8dd 9020 	ldr.w	r9, [sp, #32]
   87fba:	464e      	mov	r6, r9
   87fbc:	2800      	cmp	r0, #0
   87fbe:	f000 82ca 	beq.w	88556 <_dtoa_r+0xa86>
   87fc2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   87fc4:	f8dd 800c 	ldr.w	r8, [sp, #12]
   87fc8:	43df      	mvns	r7, r3
   87fca:	e2cc      	b.n	88566 <_dtoa_r+0xa96>
   87fcc:	4652      	mov	r2, sl
   87fce:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   87fd2:	465b      	mov	r3, fp
   87fd4:	4638      	mov	r0, r7
   87fd6:	4641      	mov	r1, r8
   87fd8:	f004 f978 	bl	8c2cc <__aeabi_ddiv>
   87fdc:	f004 fafc 	bl	8c5d8 <__aeabi_d2iz>
   87fe0:	4681      	mov	r9, r0
   87fe2:	9009      	str	r0, [sp, #36]	; 0x24
   87fe4:	f003 ffde 	bl	8bfa4 <__aeabi_i2d>
   87fe8:	4652      	mov	r2, sl
   87fea:	465b      	mov	r3, fp
   87fec:	f004 f844 	bl	8c078 <__aeabi_dmul>
   87ff0:	9e03      	ldr	r6, [sp, #12]
   87ff2:	460b      	mov	r3, r1
   87ff4:	4602      	mov	r2, r0
   87ff6:	4641      	mov	r1, r8
   87ff8:	4638      	mov	r0, r7
   87ffa:	f003 fe85 	bl	8bd08 <__aeabi_dsub>
   87ffe:	f109 0330 	add.w	r3, r9, #48	; 0x30
   88002:	f806 3b01 	strb.w	r3, [r6], #1
   88006:	9b08      	ldr	r3, [sp, #32]
   88008:	2b01      	cmp	r3, #1
   8800a:	f000 835f 	beq.w	886cc <_dtoa_r+0xbfc>
   8800e:	9406      	str	r4, [sp, #24]
   88010:	2701      	movs	r7, #1
   88012:	461c      	mov	r4, r3
   88014:	9504      	str	r5, [sp, #16]
   88016:	e02a      	b.n	8806e <_dtoa_r+0x59e>
   88018:	0008cb48 	.word	0x0008cb48
   8801c:	0008cb20 	.word	0x0008cb20
   88020:	3ff00000 	.word	0x3ff00000
   88024:	401c0000 	.word	0x401c0000
   88028:	3fe00000 	.word	0x3fe00000
   8802c:	40240000 	.word	0x40240000
   88030:	40140000 	.word	0x40140000
   88034:	4652      	mov	r2, sl
   88036:	465b      	mov	r3, fp
   88038:	4640      	mov	r0, r8
   8803a:	4649      	mov	r1, r9
   8803c:	f004 f946 	bl	8c2cc <__aeabi_ddiv>
   88040:	f004 faca 	bl	8c5d8 <__aeabi_d2iz>
   88044:	4605      	mov	r5, r0
   88046:	f003 ffad 	bl	8bfa4 <__aeabi_i2d>
   8804a:	4652      	mov	r2, sl
   8804c:	465b      	mov	r3, fp
   8804e:	f004 f813 	bl	8c078 <__aeabi_dmul>
   88052:	3701      	adds	r7, #1
   88054:	460b      	mov	r3, r1
   88056:	4602      	mov	r2, r0
   88058:	4649      	mov	r1, r9
   8805a:	4640      	mov	r0, r8
   8805c:	f003 fe54 	bl	8bd08 <__aeabi_dsub>
   88060:	f105 0330 	add.w	r3, r5, #48	; 0x30
   88064:	42a7      	cmp	r7, r4
   88066:	f806 3b01 	strb.w	r3, [r6], #1
   8806a:	f000 832c 	beq.w	886c6 <_dtoa_r+0xbf6>
   8806e:	2200      	movs	r2, #0
   88070:	4bab      	ldr	r3, [pc, #684]	; (88320 <_dtoa_r+0x850>)
   88072:	f004 f801 	bl	8c078 <__aeabi_dmul>
   88076:	2200      	movs	r2, #0
   88078:	2300      	movs	r3, #0
   8807a:	4680      	mov	r8, r0
   8807c:	4689      	mov	r9, r1
   8807e:	f004 fa63 	bl	8c548 <__aeabi_dcmpeq>
   88082:	2800      	cmp	r0, #0
   88084:	d0d6      	beq.n	88034 <_dtoa_r+0x564>
   88086:	9d04      	ldr	r5, [sp, #16]
   88088:	9c06      	ldr	r4, [sp, #24]
   8808a:	9b07      	ldr	r3, [sp, #28]
   8808c:	46b2      	mov	sl, r6
   8808e:	3301      	adds	r3, #1
   88090:	9307      	str	r3, [sp, #28]
   88092:	e10a      	b.n	882aa <_dtoa_r+0x7da>
   88094:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   88096:	2a00      	cmp	r2, #0
   88098:	d03d      	beq.n	88116 <_dtoa_r+0x646>
   8809a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   8809c:	2a01      	cmp	r2, #1
   8809e:	f340 829f 	ble.w	885e0 <_dtoa_r+0xb10>
   880a2:	9b08      	ldr	r3, [sp, #32]
   880a4:	f103 38ff 	add.w	r8, r3, #4294967295
   880a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   880aa:	4543      	cmp	r3, r8
   880ac:	f2c0 8270 	blt.w	88590 <_dtoa_r+0xac0>
   880b0:	eba3 0808 	sub.w	r8, r3, r8
   880b4:	9b08      	ldr	r3, [sp, #32]
   880b6:	2b00      	cmp	r3, #0
   880b8:	f2c0 8340 	blt.w	8873c <_dtoa_r+0xc6c>
   880bc:	9a06      	ldr	r2, [sp, #24]
   880be:	441a      	add	r2, r3
   880c0:	9206      	str	r2, [sp, #24]
   880c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   880c4:	4617      	mov	r7, r2
   880c6:	441a      	add	r2, r3
   880c8:	9209      	str	r2, [sp, #36]	; 0x24
   880ca:	2101      	movs	r1, #1
   880cc:	4620      	mov	r0, r4
   880ce:	f001 f9a5 	bl	8941c <__i2b>
   880d2:	4606      	mov	r6, r0
   880d4:	e023      	b.n	8811e <_dtoa_r+0x64e>
   880d6:	2301      	movs	r3, #1
   880d8:	1bbe      	subs	r6, r7, r6
   880da:	930e      	str	r3, [sp, #56]	; 0x38
   880dc:	1e73      	subs	r3, r6, #1
   880de:	9306      	str	r3, [sp, #24]
   880e0:	f57f ada0 	bpl.w	87c24 <_dtoa_r+0x154>
   880e4:	f1c6 0301 	rsb	r3, r6, #1
   880e8:	9309      	str	r3, [sp, #36]	; 0x24
   880ea:	2300      	movs	r3, #0
   880ec:	9306      	str	r3, [sp, #24]
   880ee:	e59b      	b.n	87c28 <_dtoa_r+0x158>
   880f0:	4658      	mov	r0, fp
   880f2:	f003 ff57 	bl	8bfa4 <__aeabi_i2d>
   880f6:	4642      	mov	r2, r8
   880f8:	464b      	mov	r3, r9
   880fa:	f004 fa25 	bl	8c548 <__aeabi_dcmpeq>
   880fe:	2800      	cmp	r0, #0
   88100:	f47f ad78 	bne.w	87bf4 <_dtoa_r+0x124>
   88104:	f10b 3bff 	add.w	fp, fp, #4294967295
   88108:	e574      	b.n	87bf4 <_dtoa_r+0x124>
   8810a:	4b86      	ldr	r3, [pc, #536]	; (88324 <_dtoa_r+0x854>)
   8810c:	9303      	str	r3, [sp, #12]
   8810e:	9803      	ldr	r0, [sp, #12]
   88110:	b019      	add	sp, #100	; 0x64
   88112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88116:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   8811a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   8811c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   8811e:	2f00      	cmp	r7, #0
   88120:	dd0c      	ble.n	8813c <_dtoa_r+0x66c>
   88122:	9906      	ldr	r1, [sp, #24]
   88124:	2900      	cmp	r1, #0
   88126:	460b      	mov	r3, r1
   88128:	dd08      	ble.n	8813c <_dtoa_r+0x66c>
   8812a:	42b9      	cmp	r1, r7
   8812c:	bfa8      	it	ge
   8812e:	463b      	movge	r3, r7
   88130:	9a09      	ldr	r2, [sp, #36]	; 0x24
   88132:	1aff      	subs	r7, r7, r3
   88134:	1ad2      	subs	r2, r2, r3
   88136:	1acb      	subs	r3, r1, r3
   88138:	9209      	str	r2, [sp, #36]	; 0x24
   8813a:	9306      	str	r3, [sp, #24]
   8813c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8813e:	b1e3      	cbz	r3, 8817a <_dtoa_r+0x6aa>
   88140:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88142:	2b00      	cmp	r3, #0
   88144:	f000 8260 	beq.w	88608 <_dtoa_r+0xb38>
   88148:	f1b8 0f00 	cmp.w	r8, #0
   8814c:	dd10      	ble.n	88170 <_dtoa_r+0x6a0>
   8814e:	4631      	mov	r1, r6
   88150:	4642      	mov	r2, r8
   88152:	4620      	mov	r0, r4
   88154:	f001 fa3e 	bl	895d4 <__pow5mult>
   88158:	4606      	mov	r6, r0
   8815a:	462a      	mov	r2, r5
   8815c:	4631      	mov	r1, r6
   8815e:	4620      	mov	r0, r4
   88160:	f001 f98a 	bl	89478 <__multiply>
   88164:	4603      	mov	r3, r0
   88166:	4629      	mov	r1, r5
   88168:	4620      	mov	r0, r4
   8816a:	461d      	mov	r5, r3
   8816c:	f001 f8ae 	bl	892cc <_Bfree>
   88170:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88172:	ebb3 0208 	subs.w	r2, r3, r8
   88176:	f040 82db 	bne.w	88730 <_dtoa_r+0xc60>
   8817a:	2101      	movs	r1, #1
   8817c:	4620      	mov	r0, r4
   8817e:	f001 f94d 	bl	8941c <__i2b>
   88182:	f1bb 0f00 	cmp.w	fp, #0
   88186:	4681      	mov	r9, r0
   88188:	f300 80b3 	bgt.w	882f2 <_dtoa_r+0x822>
   8818c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8818e:	2b01      	cmp	r3, #1
   88190:	f340 8188 	ble.w	884a4 <_dtoa_r+0x9d4>
   88194:	f04f 0a00 	mov.w	sl, #0
   88198:	2001      	movs	r0, #1
   8819a:	f1bb 0f00 	cmp.w	fp, #0
   8819e:	f040 80b4 	bne.w	8830a <_dtoa_r+0x83a>
   881a2:	9a06      	ldr	r2, [sp, #24]
   881a4:	4410      	add	r0, r2
   881a6:	f010 001f 	ands.w	r0, r0, #31
   881aa:	f000 8092 	beq.w	882d2 <_dtoa_r+0x802>
   881ae:	f1c0 0320 	rsb	r3, r0, #32
   881b2:	2b04      	cmp	r3, #4
   881b4:	f340 83d3 	ble.w	8895e <_dtoa_r+0xe8e>
   881b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   881ba:	f1c0 001c 	rsb	r0, r0, #28
   881be:	4403      	add	r3, r0
   881c0:	4402      	add	r2, r0
   881c2:	9309      	str	r3, [sp, #36]	; 0x24
   881c4:	4407      	add	r7, r0
   881c6:	9206      	str	r2, [sp, #24]
   881c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   881ca:	2b00      	cmp	r3, #0
   881cc:	dd05      	ble.n	881da <_dtoa_r+0x70a>
   881ce:	4629      	mov	r1, r5
   881d0:	461a      	mov	r2, r3
   881d2:	4620      	mov	r0, r4
   881d4:	f001 fa5a 	bl	8968c <__lshift>
   881d8:	4605      	mov	r5, r0
   881da:	9b06      	ldr	r3, [sp, #24]
   881dc:	2b00      	cmp	r3, #0
   881de:	dd05      	ble.n	881ec <_dtoa_r+0x71c>
   881e0:	4649      	mov	r1, r9
   881e2:	461a      	mov	r2, r3
   881e4:	4620      	mov	r0, r4
   881e6:	f001 fa51 	bl	8968c <__lshift>
   881ea:	4681      	mov	r9, r0
   881ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   881ee:	2b00      	cmp	r3, #0
   881f0:	f040 8138 	bne.w	88464 <_dtoa_r+0x994>
   881f4:	9b08      	ldr	r3, [sp, #32]
   881f6:	2b00      	cmp	r3, #0
   881f8:	f340 811e 	ble.w	88438 <_dtoa_r+0x968>
   881fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   881fe:	2b00      	cmp	r3, #0
   88200:	f040 809f 	bne.w	88342 <_dtoa_r+0x872>
   88204:	9b07      	ldr	r3, [sp, #28]
   88206:	3301      	adds	r3, #1
   88208:	9307      	str	r3, [sp, #28]
   8820a:	2701      	movs	r7, #1
   8820c:	f8dd 800c 	ldr.w	r8, [sp, #12]
   88210:	f8dd a020 	ldr.w	sl, [sp, #32]
   88214:	e007      	b.n	88226 <_dtoa_r+0x756>
   88216:	4629      	mov	r1, r5
   88218:	2300      	movs	r3, #0
   8821a:	220a      	movs	r2, #10
   8821c:	4620      	mov	r0, r4
   8821e:	f001 f85f 	bl	892e0 <__multadd>
   88222:	4605      	mov	r5, r0
   88224:	3701      	adds	r7, #1
   88226:	4649      	mov	r1, r9
   88228:	4628      	mov	r0, r5
   8822a:	f7ff fbbb 	bl	879a4 <quorem>
   8822e:	4557      	cmp	r7, sl
   88230:	f100 0330 	add.w	r3, r0, #48	; 0x30
   88234:	f808 3b01 	strb.w	r3, [r8], #1
   88238:	dbed      	blt.n	88216 <_dtoa_r+0x746>
   8823a:	9a08      	ldr	r2, [sp, #32]
   8823c:	2700      	movs	r7, #0
   8823e:	2a00      	cmp	r2, #0
   88240:	bfcc      	ite	gt
   88242:	4693      	movgt	fp, r2
   88244:	f04f 0b01 	movle.w	fp, #1
   88248:	9a03      	ldr	r2, [sp, #12]
   8824a:	4493      	add	fp, r2
   8824c:	4629      	mov	r1, r5
   8824e:	2201      	movs	r2, #1
   88250:	4620      	mov	r0, r4
   88252:	9304      	str	r3, [sp, #16]
   88254:	f001 fa1a 	bl	8968c <__lshift>
   88258:	4649      	mov	r1, r9
   8825a:	4605      	mov	r5, r0
   8825c:	f001 fa8c 	bl	89778 <__mcmp>
   88260:	2800      	cmp	r0, #0
   88262:	f340 81ab 	ble.w	885bc <_dtoa_r+0xaec>
   88266:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   8826a:	9a03      	ldr	r2, [sp, #12]
   8826c:	f10b 3bff 	add.w	fp, fp, #4294967295
   88270:	e004      	b.n	8827c <_dtoa_r+0x7ac>
   88272:	455a      	cmp	r2, fp
   88274:	f000 81ad 	beq.w	885d2 <_dtoa_r+0xb02>
   88278:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8827c:	2b39      	cmp	r3, #57	; 0x39
   8827e:	f10b 0a01 	add.w	sl, fp, #1
   88282:	d0f6      	beq.n	88272 <_dtoa_r+0x7a2>
   88284:	3301      	adds	r3, #1
   88286:	f88b 3000 	strb.w	r3, [fp]
   8828a:	4649      	mov	r1, r9
   8828c:	4620      	mov	r0, r4
   8828e:	f001 f81d 	bl	892cc <_Bfree>
   88292:	b156      	cbz	r6, 882aa <_dtoa_r+0x7da>
   88294:	b12f      	cbz	r7, 882a2 <_dtoa_r+0x7d2>
   88296:	42b7      	cmp	r7, r6
   88298:	d003      	beq.n	882a2 <_dtoa_r+0x7d2>
   8829a:	4639      	mov	r1, r7
   8829c:	4620      	mov	r0, r4
   8829e:	f001 f815 	bl	892cc <_Bfree>
   882a2:	4631      	mov	r1, r6
   882a4:	4620      	mov	r0, r4
   882a6:	f001 f811 	bl	892cc <_Bfree>
   882aa:	4629      	mov	r1, r5
   882ac:	4620      	mov	r0, r4
   882ae:	f001 f80d 	bl	892cc <_Bfree>
   882b2:	2300      	movs	r3, #0
   882b4:	9a07      	ldr	r2, [sp, #28]
   882b6:	f88a 3000 	strb.w	r3, [sl]
   882ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
   882bc:	601a      	str	r2, [r3, #0]
   882be:	9b26      	ldr	r3, [sp, #152]	; 0x98
   882c0:	2b00      	cmp	r3, #0
   882c2:	f43f ac40 	beq.w	87b46 <_dtoa_r+0x76>
   882c6:	9803      	ldr	r0, [sp, #12]
   882c8:	f8c3 a000 	str.w	sl, [r3]
   882cc:	b019      	add	sp, #100	; 0x64
   882ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   882d2:	201c      	movs	r0, #28
   882d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   882d6:	4407      	add	r7, r0
   882d8:	4403      	add	r3, r0
   882da:	9309      	str	r3, [sp, #36]	; 0x24
   882dc:	9b06      	ldr	r3, [sp, #24]
   882de:	4403      	add	r3, r0
   882e0:	9306      	str	r3, [sp, #24]
   882e2:	e771      	b.n	881c8 <_dtoa_r+0x6f8>
   882e4:	2601      	movs	r6, #1
   882e6:	e4b6      	b.n	87c56 <_dtoa_r+0x186>
   882e8:	f1c0 0020 	rsb	r0, r0, #32
   882ec:	fa08 f000 	lsl.w	r0, r8, r0
   882f0:	e44d      	b.n	87b8e <_dtoa_r+0xbe>
   882f2:	4601      	mov	r1, r0
   882f4:	465a      	mov	r2, fp
   882f6:	4620      	mov	r0, r4
   882f8:	f001 f96c 	bl	895d4 <__pow5mult>
   882fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   882fe:	4681      	mov	r9, r0
   88300:	2b01      	cmp	r3, #1
   88302:	f340 81b6 	ble.w	88672 <_dtoa_r+0xba2>
   88306:	f04f 0a00 	mov.w	sl, #0
   8830a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8830e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   88312:	6918      	ldr	r0, [r3, #16]
   88314:	f001 f836 	bl	89384 <__hi0bits>
   88318:	f1c0 0020 	rsb	r0, r0, #32
   8831c:	e741      	b.n	881a2 <_dtoa_r+0x6d2>
   8831e:	bf00      	nop
   88320:	40240000 	.word	0x40240000
   88324:	0008c9d4 	.word	0x0008c9d4
   88328:	4631      	mov	r1, r6
   8832a:	2300      	movs	r3, #0
   8832c:	220a      	movs	r2, #10
   8832e:	4620      	mov	r0, r4
   88330:	f000 ffd6 	bl	892e0 <__multadd>
   88334:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88336:	4606      	mov	r6, r0
   88338:	2b00      	cmp	r3, #0
   8833a:	f340 82e9 	ble.w	88910 <_dtoa_r+0xe40>
   8833e:	e9cd 8307 	strd	r8, r3, [sp, #28]
   88342:	2f00      	cmp	r7, #0
   88344:	f300 811d 	bgt.w	88582 <_dtoa_r+0xab2>
   88348:	f1ba 0f00 	cmp.w	sl, #0
   8834c:	f040 81d9 	bne.w	88702 <_dtoa_r+0xc32>
   88350:	46b0      	mov	r8, r6
   88352:	9b04      	ldr	r3, [sp, #16]
   88354:	9908      	ldr	r1, [sp, #32]
   88356:	f003 0201 	and.w	r2, r3, #1
   8835a:	9b03      	ldr	r3, [sp, #12]
   8835c:	920a      	str	r2, [sp, #40]	; 0x28
   8835e:	461f      	mov	r7, r3
   88360:	3b01      	subs	r3, #1
   88362:	4419      	add	r1, r3
   88364:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88366:	9108      	str	r1, [sp, #32]
   88368:	4313      	orrs	r3, r2
   8836a:	9309      	str	r3, [sp, #36]	; 0x24
   8836c:	4649      	mov	r1, r9
   8836e:	4628      	mov	r0, r5
   88370:	f7ff fb18 	bl	879a4 <quorem>
   88374:	4631      	mov	r1, r6
   88376:	4683      	mov	fp, r0
   88378:	4628      	mov	r0, r5
   8837a:	f001 f9fd 	bl	89778 <__mcmp>
   8837e:	4642      	mov	r2, r8
   88380:	4649      	mov	r1, r9
   88382:	4682      	mov	sl, r0
   88384:	4620      	mov	r0, r4
   88386:	f001 fa17 	bl	897b8 <__mdiff>
   8838a:	68c2      	ldr	r2, [r0, #12]
   8838c:	4601      	mov	r1, r0
   8838e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   88392:	2a00      	cmp	r2, #0
   88394:	d143      	bne.n	8841e <_dtoa_r+0x94e>
   88396:	9004      	str	r0, [sp, #16]
   88398:	4628      	mov	r0, r5
   8839a:	9306      	str	r3, [sp, #24]
   8839c:	f001 f9ec 	bl	89778 <__mcmp>
   883a0:	4602      	mov	r2, r0
   883a2:	9904      	ldr	r1, [sp, #16]
   883a4:	4620      	mov	r0, r4
   883a6:	9204      	str	r2, [sp, #16]
   883a8:	f000 ff90 	bl	892cc <_Bfree>
   883ac:	9a04      	ldr	r2, [sp, #16]
   883ae:	9b06      	ldr	r3, [sp, #24]
   883b0:	b91a      	cbnz	r2, 883ba <_dtoa_r+0x8ea>
   883b2:	9909      	ldr	r1, [sp, #36]	; 0x24
   883b4:	2900      	cmp	r1, #0
   883b6:	f000 829b 	beq.w	888f0 <_dtoa_r+0xe20>
   883ba:	f1ba 0f00 	cmp.w	sl, #0
   883be:	f2c0 8164 	blt.w	8868a <_dtoa_r+0xbba>
   883c2:	9922      	ldr	r1, [sp, #136]	; 0x88
   883c4:	ea4a 0a01 	orr.w	sl, sl, r1
   883c8:	990a      	ldr	r1, [sp, #40]	; 0x28
   883ca:	ea51 010a 	orrs.w	r1, r1, sl
   883ce:	f000 815c 	beq.w	8868a <_dtoa_r+0xbba>
   883d2:	2a00      	cmp	r2, #0
   883d4:	f300 81b6 	bgt.w	88744 <_dtoa_r+0xc74>
   883d8:	9a08      	ldr	r2, [sp, #32]
   883da:	f107 0a01 	add.w	sl, r7, #1
   883de:	4297      	cmp	r7, r2
   883e0:	46d3      	mov	fp, sl
   883e2:	703b      	strb	r3, [r7, #0]
   883e4:	f000 81b4 	beq.w	88750 <_dtoa_r+0xc80>
   883e8:	4629      	mov	r1, r5
   883ea:	2300      	movs	r3, #0
   883ec:	220a      	movs	r2, #10
   883ee:	4620      	mov	r0, r4
   883f0:	f000 ff76 	bl	892e0 <__multadd>
   883f4:	4546      	cmp	r6, r8
   883f6:	4605      	mov	r5, r0
   883f8:	4631      	mov	r1, r6
   883fa:	f04f 0300 	mov.w	r3, #0
   883fe:	f04f 020a 	mov.w	r2, #10
   88402:	4620      	mov	r0, r4
   88404:	d012      	beq.n	8842c <_dtoa_r+0x95c>
   88406:	f000 ff6b 	bl	892e0 <__multadd>
   8840a:	4641      	mov	r1, r8
   8840c:	4606      	mov	r6, r0
   8840e:	2300      	movs	r3, #0
   88410:	220a      	movs	r2, #10
   88412:	4620      	mov	r0, r4
   88414:	f000 ff64 	bl	892e0 <__multadd>
   88418:	4657      	mov	r7, sl
   8841a:	4680      	mov	r8, r0
   8841c:	e7a6      	b.n	8836c <_dtoa_r+0x89c>
   8841e:	4620      	mov	r0, r4
   88420:	9304      	str	r3, [sp, #16]
   88422:	f000 ff53 	bl	892cc <_Bfree>
   88426:	2201      	movs	r2, #1
   88428:	9b04      	ldr	r3, [sp, #16]
   8842a:	e7c6      	b.n	883ba <_dtoa_r+0x8ea>
   8842c:	f000 ff58 	bl	892e0 <__multadd>
   88430:	4657      	mov	r7, sl
   88432:	4606      	mov	r6, r0
   88434:	4680      	mov	r8, r0
   88436:	e799      	b.n	8836c <_dtoa_r+0x89c>
   88438:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8843a:	2b02      	cmp	r3, #2
   8843c:	dc7a      	bgt.n	88534 <_dtoa_r+0xa64>
   8843e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88440:	2b00      	cmp	r3, #0
   88442:	f47f af7e 	bne.w	88342 <_dtoa_r+0x872>
   88446:	9b07      	ldr	r3, [sp, #28]
   88448:	4649      	mov	r1, r9
   8844a:	3301      	adds	r3, #1
   8844c:	4628      	mov	r0, r5
   8844e:	9307      	str	r3, [sp, #28]
   88450:	f7ff faa8 	bl	879a4 <quorem>
   88454:	f8dd b00c 	ldr.w	fp, [sp, #12]
   88458:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8845c:	2700      	movs	r7, #0
   8845e:	f80b 3b01 	strb.w	r3, [fp], #1
   88462:	e6f3      	b.n	8824c <_dtoa_r+0x77c>
   88464:	4649      	mov	r1, r9
   88466:	4628      	mov	r0, r5
   88468:	f001 f986 	bl	89778 <__mcmp>
   8846c:	2800      	cmp	r0, #0
   8846e:	f6bf aec1 	bge.w	881f4 <_dtoa_r+0x724>
   88472:	4629      	mov	r1, r5
   88474:	2300      	movs	r3, #0
   88476:	220a      	movs	r2, #10
   88478:	4620      	mov	r0, r4
   8847a:	f000 ff31 	bl	892e0 <__multadd>
   8847e:	9b07      	ldr	r3, [sp, #28]
   88480:	4605      	mov	r5, r0
   88482:	f103 38ff 	add.w	r8, r3, #4294967295
   88486:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88488:	2b00      	cmp	r3, #0
   8848a:	f47f af4d 	bne.w	88328 <_dtoa_r+0x858>
   8848e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88490:	2b00      	cmp	r3, #0
   88492:	f340 8234 	ble.w	888fe <_dtoa_r+0xe2e>
   88496:	9308      	str	r3, [sp, #32]
   88498:	e6b7      	b.n	8820a <_dtoa_r+0x73a>
   8849a:	4bb0      	ldr	r3, [pc, #704]	; (8875c <_dtoa_r+0xc8c>)
   8849c:	9303      	str	r3, [sp, #12]
   8849e:	3303      	adds	r3, #3
   884a0:	f7ff bbf4 	b.w	87c8c <_dtoa_r+0x1bc>
   884a4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   884a8:	2900      	cmp	r1, #0
   884aa:	f47f ae73 	bne.w	88194 <_dtoa_r+0x6c4>
   884ae:	f3c2 0313 	ubfx	r3, r2, #0, #20
   884b2:	2b00      	cmp	r3, #0
   884b4:	f47f ae6e 	bne.w	88194 <_dtoa_r+0x6c4>
   884b8:	4ba9      	ldr	r3, [pc, #676]	; (88760 <_dtoa_r+0xc90>)
   884ba:	4013      	ands	r3, r2
   884bc:	2b00      	cmp	r3, #0
   884be:	f000 8200 	beq.w	888c2 <_dtoa_r+0xdf2>
   884c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   884c4:	f04f 0a01 	mov.w	sl, #1
   884c8:	3301      	adds	r3, #1
   884ca:	9309      	str	r3, [sp, #36]	; 0x24
   884cc:	9b06      	ldr	r3, [sp, #24]
   884ce:	3301      	adds	r3, #1
   884d0:	9306      	str	r3, [sp, #24]
   884d2:	e661      	b.n	88198 <_dtoa_r+0x6c8>
   884d4:	2301      	movs	r3, #1
   884d6:	930c      	str	r3, [sp, #48]	; 0x30
   884d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   884da:	9a07      	ldr	r2, [sp, #28]
   884dc:	4413      	add	r3, r2
   884de:	9312      	str	r3, [sp, #72]	; 0x48
   884e0:	3301      	adds	r3, #1
   884e2:	2b01      	cmp	r3, #1
   884e4:	461f      	mov	r7, r3
   884e6:	bfb8      	it	lt
   884e8:	2701      	movlt	r7, #1
   884ea:	9308      	str	r3, [sp, #32]
   884ec:	2100      	movs	r1, #0
   884ee:	2f17      	cmp	r7, #23
   884f0:	6461      	str	r1, [r4, #68]	; 0x44
   884f2:	f77f ac1e 	ble.w	87d32 <_dtoa_r+0x262>
   884f6:	2201      	movs	r2, #1
   884f8:	2304      	movs	r3, #4
   884fa:	005b      	lsls	r3, r3, #1
   884fc:	f103 0014 	add.w	r0, r3, #20
   88500:	42b8      	cmp	r0, r7
   88502:	4611      	mov	r1, r2
   88504:	f102 0201 	add.w	r2, r2, #1
   88508:	d9f7      	bls.n	884fa <_dtoa_r+0xa2a>
   8850a:	6461      	str	r1, [r4, #68]	; 0x44
   8850c:	e411      	b.n	87d32 <_dtoa_r+0x262>
   8850e:	2301      	movs	r3, #1
   88510:	930c      	str	r3, [sp, #48]	; 0x30
   88512:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88514:	2b00      	cmp	r3, #0
   88516:	dd4c      	ble.n	885b2 <_dtoa_r+0xae2>
   88518:	461f      	mov	r7, r3
   8851a:	9312      	str	r3, [sp, #72]	; 0x48
   8851c:	9308      	str	r3, [sp, #32]
   8851e:	e7e5      	b.n	884ec <_dtoa_r+0xa1c>
   88520:	2300      	movs	r3, #0
   88522:	930c      	str	r3, [sp, #48]	; 0x30
   88524:	e7d8      	b.n	884d8 <_dtoa_r+0xa08>
   88526:	2300      	movs	r3, #0
   88528:	930c      	str	r3, [sp, #48]	; 0x30
   8852a:	e7f2      	b.n	88512 <_dtoa_r+0xa42>
   8852c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8852e:	f8cd 801c 	str.w	r8, [sp, #28]
   88532:	9308      	str	r3, [sp, #32]
   88534:	9b08      	ldr	r3, [sp, #32]
   88536:	2b00      	cmp	r3, #0
   88538:	f47f ad43 	bne.w	87fc2 <_dtoa_r+0x4f2>
   8853c:	4649      	mov	r1, r9
   8853e:	2205      	movs	r2, #5
   88540:	4620      	mov	r0, r4
   88542:	f000 fecd 	bl	892e0 <__multadd>
   88546:	4681      	mov	r9, r0
   88548:	4628      	mov	r0, r5
   8854a:	4649      	mov	r1, r9
   8854c:	f001 f914 	bl	89778 <__mcmp>
   88550:	2800      	cmp	r0, #0
   88552:	f77f ad36 	ble.w	87fc2 <_dtoa_r+0x4f2>
   88556:	2331      	movs	r3, #49	; 0x31
   88558:	9803      	ldr	r0, [sp, #12]
   8855a:	9f07      	ldr	r7, [sp, #28]
   8855c:	4680      	mov	r8, r0
   8855e:	f800 3b01 	strb.w	r3, [r0], #1
   88562:	3701      	adds	r7, #1
   88564:	9003      	str	r0, [sp, #12]
   88566:	4649      	mov	r1, r9
   88568:	4620      	mov	r0, r4
   8856a:	f000 feaf 	bl	892cc <_Bfree>
   8856e:	1c7b      	adds	r3, r7, #1
   88570:	f8dd a00c 	ldr.w	sl, [sp, #12]
   88574:	9307      	str	r3, [sp, #28]
   88576:	f8cd 800c 	str.w	r8, [sp, #12]
   8857a:	2e00      	cmp	r6, #0
   8857c:	f47f ae91 	bne.w	882a2 <_dtoa_r+0x7d2>
   88580:	e693      	b.n	882aa <_dtoa_r+0x7da>
   88582:	4631      	mov	r1, r6
   88584:	463a      	mov	r2, r7
   88586:	4620      	mov	r0, r4
   88588:	f001 f880 	bl	8968c <__lshift>
   8858c:	4606      	mov	r6, r0
   8858e:	e6db      	b.n	88348 <_dtoa_r+0x878>
   88590:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88592:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   88596:	eba8 0303 	sub.w	r3, r8, r3
   8859a:	449b      	add	fp, r3
   8859c:	f04f 0800 	mov.w	r8, #0
   885a0:	e588      	b.n	880b4 <_dtoa_r+0x5e4>
   885a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   885a6:	f04f 0a02 	mov.w	sl, #2
   885aa:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   885ae:	f7ff bbee 	b.w	87d8e <_dtoa_r+0x2be>
   885b2:	2301      	movs	r3, #1
   885b4:	9323      	str	r3, [sp, #140]	; 0x8c
   885b6:	9308      	str	r3, [sp, #32]
   885b8:	f7ff bbb7 	b.w	87d2a <_dtoa_r+0x25a>
   885bc:	d103      	bne.n	885c6 <_dtoa_r+0xaf6>
   885be:	9b04      	ldr	r3, [sp, #16]
   885c0:	07d8      	lsls	r0, r3, #31
   885c2:	f53f ae50 	bmi.w	88266 <_dtoa_r+0x796>
   885c6:	46da      	mov	sl, fp
   885c8:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   885cc:	2b30      	cmp	r3, #48	; 0x30
   885ce:	d0fa      	beq.n	885c6 <_dtoa_r+0xaf6>
   885d0:	e65b      	b.n	8828a <_dtoa_r+0x7ba>
   885d2:	9b07      	ldr	r3, [sp, #28]
   885d4:	9a03      	ldr	r2, [sp, #12]
   885d6:	3301      	adds	r3, #1
   885d8:	9307      	str	r3, [sp, #28]
   885da:	2331      	movs	r3, #49	; 0x31
   885dc:	7013      	strb	r3, [r2, #0]
   885de:	e654      	b.n	8828a <_dtoa_r+0x7ba>
   885e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   885e2:	2a00      	cmp	r2, #0
   885e4:	f000 8128 	beq.w	88838 <_dtoa_r+0xd68>
   885e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
   885ec:	9a06      	ldr	r2, [sp, #24]
   885ee:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   885f2:	441a      	add	r2, r3
   885f4:	9206      	str	r2, [sp, #24]
   885f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   885f8:	4617      	mov	r7, r2
   885fa:	441a      	add	r2, r3
   885fc:	9209      	str	r2, [sp, #36]	; 0x24
   885fe:	e564      	b.n	880ca <_dtoa_r+0x5fa>
   88600:	f04f 0900 	mov.w	r9, #0
   88604:	464e      	mov	r6, r9
   88606:	e4dc      	b.n	87fc2 <_dtoa_r+0x4f2>
   88608:	4629      	mov	r1, r5
   8860a:	4620      	mov	r0, r4
   8860c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8860e:	f000 ffe1 	bl	895d4 <__pow5mult>
   88612:	4605      	mov	r5, r0
   88614:	e5b1      	b.n	8817a <_dtoa_r+0x6aa>
   88616:	900e      	str	r0, [sp, #56]	; 0x38
   88618:	e564      	b.n	880e4 <_dtoa_r+0x614>
   8861a:	f000 8111 	beq.w	88840 <_dtoa_r+0xd70>
   8861e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   88622:	9a07      	ldr	r2, [sp, #28]
   88624:	4b4f      	ldr	r3, [pc, #316]	; (88764 <_dtoa_r+0xc94>)
   88626:	4256      	negs	r6, r2
   88628:	f006 020f 	and.w	r2, r6, #15
   8862c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   88630:	e9d3 2300 	ldrd	r2, r3, [r3]
   88634:	f003 fd20 	bl	8c078 <__aeabi_dmul>
   88638:	1136      	asrs	r6, r6, #4
   8863a:	4680      	mov	r8, r0
   8863c:	4689      	mov	r9, r1
   8863e:	f000 8170 	beq.w	88922 <_dtoa_r+0xe52>
   88642:	2300      	movs	r3, #0
   88644:	f04f 0a02 	mov.w	sl, #2
   88648:	4f47      	ldr	r7, [pc, #284]	; (88768 <_dtoa_r+0xc98>)
   8864a:	07f2      	lsls	r2, r6, #31
   8864c:	d506      	bpl.n	8865c <_dtoa_r+0xb8c>
   8864e:	e9d7 2300 	ldrd	r2, r3, [r7]
   88652:	f003 fd11 	bl	8c078 <__aeabi_dmul>
   88656:	2301      	movs	r3, #1
   88658:	f10a 0a01 	add.w	sl, sl, #1
   8865c:	1076      	asrs	r6, r6, #1
   8865e:	f107 0708 	add.w	r7, r7, #8
   88662:	d1f2      	bne.n	8864a <_dtoa_r+0xb7a>
   88664:	2b00      	cmp	r3, #0
   88666:	f43f abb1 	beq.w	87dcc <_dtoa_r+0x2fc>
   8866a:	4680      	mov	r8, r0
   8866c:	4689      	mov	r9, r1
   8866e:	f7ff bbad 	b.w	87dcc <_dtoa_r+0x2fc>
   88672:	9b04      	ldr	r3, [sp, #16]
   88674:	2b00      	cmp	r3, #0
   88676:	f47f ae46 	bne.w	88306 <_dtoa_r+0x836>
   8867a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8867e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   88682:	2b00      	cmp	r3, #0
   88684:	f43f af18 	beq.w	884b8 <_dtoa_r+0x9e8>
   88688:	e63d      	b.n	88306 <_dtoa_r+0x836>
   8868a:	2a00      	cmp	r2, #0
   8868c:	dd12      	ble.n	886b4 <_dtoa_r+0xbe4>
   8868e:	4629      	mov	r1, r5
   88690:	2201      	movs	r2, #1
   88692:	4620      	mov	r0, r4
   88694:	9304      	str	r3, [sp, #16]
   88696:	f000 fff9 	bl	8968c <__lshift>
   8869a:	4649      	mov	r1, r9
   8869c:	4605      	mov	r5, r0
   8869e:	f001 f86b 	bl	89778 <__mcmp>
   886a2:	2800      	cmp	r0, #0
   886a4:	9b04      	ldr	r3, [sp, #16]
   886a6:	f340 8117 	ble.w	888d8 <_dtoa_r+0xe08>
   886aa:	2b39      	cmp	r3, #57	; 0x39
   886ac:	f000 80fb 	beq.w	888a6 <_dtoa_r+0xdd6>
   886b0:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   886b4:	46ba      	mov	sl, r7
   886b6:	9a07      	ldr	r2, [sp, #28]
   886b8:	4637      	mov	r7, r6
   886ba:	3201      	adds	r2, #1
   886bc:	4646      	mov	r6, r8
   886be:	9207      	str	r2, [sp, #28]
   886c0:	f80a 3b01 	strb.w	r3, [sl], #1
   886c4:	e5e1      	b.n	8828a <_dtoa_r+0x7ba>
   886c6:	9509      	str	r5, [sp, #36]	; 0x24
   886c8:	9c06      	ldr	r4, [sp, #24]
   886ca:	9d04      	ldr	r5, [sp, #16]
   886cc:	4602      	mov	r2, r0
   886ce:	460b      	mov	r3, r1
   886d0:	f003 fb1c 	bl	8bd0c <__adddf3>
   886d4:	4652      	mov	r2, sl
   886d6:	465b      	mov	r3, fp
   886d8:	4680      	mov	r8, r0
   886da:	4689      	mov	r9, r1
   886dc:	f003 ff5c 	bl	8c598 <__aeabi_dcmpgt>
   886e0:	b960      	cbnz	r0, 886fc <_dtoa_r+0xc2c>
   886e2:	4652      	mov	r2, sl
   886e4:	465b      	mov	r3, fp
   886e6:	4640      	mov	r0, r8
   886e8:	4649      	mov	r1, r9
   886ea:	f003 ff2d 	bl	8c548 <__aeabi_dcmpeq>
   886ee:	2800      	cmp	r0, #0
   886f0:	f43f accb 	beq.w	8808a <_dtoa_r+0x5ba>
   886f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   886f6:	07d9      	lsls	r1, r3, #31
   886f8:	f57f acc7 	bpl.w	8808a <_dtoa_r+0x5ba>
   886fc:	9a03      	ldr	r2, [sp, #12]
   886fe:	f7ff bbff 	b.w	87f00 <_dtoa_r+0x430>
   88702:	4620      	mov	r0, r4
   88704:	6871      	ldr	r1, [r6, #4]
   88706:	f000 fdbb 	bl	89280 <_Balloc>
   8870a:	4607      	mov	r7, r0
   8870c:	2800      	cmp	r0, #0
   8870e:	f000 810c 	beq.w	8892a <_dtoa_r+0xe5a>
   88712:	6933      	ldr	r3, [r6, #16]
   88714:	f106 010c 	add.w	r1, r6, #12
   88718:	3302      	adds	r3, #2
   8871a:	009a      	lsls	r2, r3, #2
   8871c:	300c      	adds	r0, #12
   8871e:	f7fd fa93 	bl	85c48 <memcpy>
   88722:	4639      	mov	r1, r7
   88724:	2201      	movs	r2, #1
   88726:	4620      	mov	r0, r4
   88728:	f000 ffb0 	bl	8968c <__lshift>
   8872c:	4680      	mov	r8, r0
   8872e:	e610      	b.n	88352 <_dtoa_r+0x882>
   88730:	4629      	mov	r1, r5
   88732:	4620      	mov	r0, r4
   88734:	f000 ff4e 	bl	895d4 <__pow5mult>
   88738:	4605      	mov	r5, r0
   8873a:	e51e      	b.n	8817a <_dtoa_r+0x6aa>
   8873c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   88740:	1a9f      	subs	r7, r3, r2
   88742:	e4c2      	b.n	880ca <_dtoa_r+0x5fa>
   88744:	2b39      	cmp	r3, #57	; 0x39
   88746:	f000 80ae 	beq.w	888a6 <_dtoa_r+0xdd6>
   8874a:	46ba      	mov	sl, r7
   8874c:	3301      	adds	r3, #1
   8874e:	e7b2      	b.n	886b6 <_dtoa_r+0xbe6>
   88750:	9a07      	ldr	r2, [sp, #28]
   88752:	4637      	mov	r7, r6
   88754:	3201      	adds	r2, #1
   88756:	4646      	mov	r6, r8
   88758:	9207      	str	r2, [sp, #28]
   8875a:	e577      	b.n	8824c <_dtoa_r+0x77c>
   8875c:	0008c9f8 	.word	0x0008c9f8
   88760:	7ff00000 	.word	0x7ff00000
   88764:	0008cb48 	.word	0x0008cb48
   88768:	0008cb20 	.word	0x0008cb20
   8876c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   88770:	4983      	ldr	r1, [pc, #524]	; (88980 <_dtoa_r+0xeb0>)
   88772:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   88776:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   8877a:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   8877e:	f003 fc7b 	bl	8c078 <__aeabi_dmul>
   88782:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88786:	4649      	mov	r1, r9
   88788:	4640      	mov	r0, r8
   8878a:	f003 ff25 	bl	8c5d8 <__aeabi_d2iz>
   8878e:	4606      	mov	r6, r0
   88790:	f003 fc08 	bl	8bfa4 <__aeabi_i2d>
   88794:	460b      	mov	r3, r1
   88796:	4602      	mov	r2, r0
   88798:	4649      	mov	r1, r9
   8879a:	4640      	mov	r0, r8
   8879c:	f003 fab4 	bl	8bd08 <__aeabi_dsub>
   887a0:	4653      	mov	r3, sl
   887a2:	9f03      	ldr	r7, [sp, #12]
   887a4:	3630      	adds	r6, #48	; 0x30
   887a6:	2b01      	cmp	r3, #1
   887a8:	4680      	mov	r8, r0
   887aa:	4689      	mov	r9, r1
   887ac:	f807 6b01 	strb.w	r6, [r7], #1
   887b0:	f000 80ac 	beq.w	8890c <_dtoa_r+0xe3c>
   887b4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   887b6:	9b03      	ldr	r3, [sp, #12]
   887b8:	441e      	add	r6, r3
   887ba:	2200      	movs	r2, #0
   887bc:	4b71      	ldr	r3, [pc, #452]	; (88984 <_dtoa_r+0xeb4>)
   887be:	4640      	mov	r0, r8
   887c0:	4649      	mov	r1, r9
   887c2:	f003 fc59 	bl	8c078 <__aeabi_dmul>
   887c6:	4689      	mov	r9, r1
   887c8:	4680      	mov	r8, r0
   887ca:	f003 ff05 	bl	8c5d8 <__aeabi_d2iz>
   887ce:	4682      	mov	sl, r0
   887d0:	f003 fbe8 	bl	8bfa4 <__aeabi_i2d>
   887d4:	4602      	mov	r2, r0
   887d6:	460b      	mov	r3, r1
   887d8:	4640      	mov	r0, r8
   887da:	4649      	mov	r1, r9
   887dc:	f003 fa94 	bl	8bd08 <__aeabi_dsub>
   887e0:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   887e4:	f807 ab01 	strb.w	sl, [r7], #1
   887e8:	42b7      	cmp	r7, r6
   887ea:	4680      	mov	r8, r0
   887ec:	4689      	mov	r9, r1
   887ee:	d1e4      	bne.n	887ba <_dtoa_r+0xcea>
   887f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   887f4:	2200      	movs	r2, #0
   887f6:	4b64      	ldr	r3, [pc, #400]	; (88988 <_dtoa_r+0xeb8>)
   887f8:	f003 fa88 	bl	8bd0c <__adddf3>
   887fc:	4642      	mov	r2, r8
   887fe:	464b      	mov	r3, r9
   88800:	f003 feac 	bl	8c55c <__aeabi_dcmplt>
   88804:	2800      	cmp	r0, #0
   88806:	d162      	bne.n	888ce <_dtoa_r+0xdfe>
   88808:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8880c:	2000      	movs	r0, #0
   8880e:	495e      	ldr	r1, [pc, #376]	; (88988 <_dtoa_r+0xeb8>)
   88810:	f003 fa7a 	bl	8bd08 <__aeabi_dsub>
   88814:	4642      	mov	r2, r8
   88816:	464b      	mov	r3, r9
   88818:	f003 febe 	bl	8c598 <__aeabi_dcmpgt>
   8881c:	2800      	cmp	r0, #0
   8881e:	f43f aba9 	beq.w	87f74 <_dtoa_r+0x4a4>
   88822:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   88826:	46b2      	mov	sl, r6
   88828:	2b30      	cmp	r3, #48	; 0x30
   8882a:	f106 36ff 	add.w	r6, r6, #4294967295
   8882e:	d0f8      	beq.n	88822 <_dtoa_r+0xd52>
   88830:	9b14      	ldr	r3, [sp, #80]	; 0x50
   88832:	3301      	adds	r3, #1
   88834:	9307      	str	r3, [sp, #28]
   88836:	e538      	b.n	882aa <_dtoa_r+0x7da>
   88838:	9b16      	ldr	r3, [sp, #88]	; 0x58
   8883a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8883e:	e6d5      	b.n	885ec <_dtoa_r+0xb1c>
   88840:	f04f 0a02 	mov.w	sl, #2
   88844:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   88848:	f7ff bac0 	b.w	87dcc <_dtoa_r+0x2fc>
   8884c:	9b08      	ldr	r3, [sp, #32]
   8884e:	2b00      	cmp	r3, #0
   88850:	f43f ab62 	beq.w	87f18 <_dtoa_r+0x448>
   88854:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88856:	2b00      	cmp	r3, #0
   88858:	f77f ab8c 	ble.w	87f74 <_dtoa_r+0x4a4>
   8885c:	9313      	str	r3, [sp, #76]	; 0x4c
   8885e:	9b07      	ldr	r3, [sp, #28]
   88860:	2200      	movs	r2, #0
   88862:	3b01      	subs	r3, #1
   88864:	4640      	mov	r0, r8
   88866:	4649      	mov	r1, r9
   88868:	9314      	str	r3, [sp, #80]	; 0x50
   8886a:	4b46      	ldr	r3, [pc, #280]	; (88984 <_dtoa_r+0xeb4>)
   8886c:	f003 fc04 	bl	8c078 <__aeabi_dmul>
   88870:	4680      	mov	r8, r0
   88872:	4689      	mov	r9, r1
   88874:	f10a 0001 	add.w	r0, sl, #1
   88878:	f003 fb94 	bl	8bfa4 <__aeabi_i2d>
   8887c:	4642      	mov	r2, r8
   8887e:	464b      	mov	r3, r9
   88880:	f003 fbfa 	bl	8c078 <__aeabi_dmul>
   88884:	4b41      	ldr	r3, [pc, #260]	; (8898c <_dtoa_r+0xebc>)
   88886:	2200      	movs	r2, #0
   88888:	f003 fa40 	bl	8bd0c <__adddf3>
   8888c:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   88890:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88894:	9311      	str	r3, [sp, #68]	; 0x44
   88896:	f7ff babc 	b.w	87e12 <_dtoa_r+0x342>
   8889a:	9b07      	ldr	r3, [sp, #28]
   8889c:	3301      	adds	r3, #1
   8889e:	9307      	str	r3, [sp, #28]
   888a0:	2331      	movs	r3, #49	; 0x31
   888a2:	f7ff bb34 	b.w	87f0e <_dtoa_r+0x43e>
   888a6:	9b07      	ldr	r3, [sp, #28]
   888a8:	46bb      	mov	fp, r7
   888aa:	3301      	adds	r3, #1
   888ac:	9307      	str	r3, [sp, #28]
   888ae:	2339      	movs	r3, #57	; 0x39
   888b0:	4637      	mov	r7, r6
   888b2:	f80b 3b01 	strb.w	r3, [fp], #1
   888b6:	4646      	mov	r6, r8
   888b8:	e4d7      	b.n	8826a <_dtoa_r+0x79a>
   888ba:	f04f 0900 	mov.w	r9, #0
   888be:	464e      	mov	r6, r9
   888c0:	e649      	b.n	88556 <_dtoa_r+0xa86>
   888c2:	469a      	mov	sl, r3
   888c4:	e468      	b.n	88198 <_dtoa_r+0x6c8>
   888c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
   888c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   888ca:	46b2      	mov	sl, r6
   888cc:	e7b0      	b.n	88830 <_dtoa_r+0xd60>
   888ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
   888d0:	9a03      	ldr	r2, [sp, #12]
   888d2:	9307      	str	r3, [sp, #28]
   888d4:	f7ff bb14 	b.w	87f00 <_dtoa_r+0x430>
   888d8:	f47f aeec 	bne.w	886b4 <_dtoa_r+0xbe4>
   888dc:	07da      	lsls	r2, r3, #31
   888de:	f57f aee9 	bpl.w	886b4 <_dtoa_r+0xbe4>
   888e2:	e6e2      	b.n	886aa <_dtoa_r+0xbda>
   888e4:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   888e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
   888ea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   888ec:	f7ff bb42 	b.w	87f74 <_dtoa_r+0x4a4>
   888f0:	2b39      	cmp	r3, #57	; 0x39
   888f2:	d0d8      	beq.n	888a6 <_dtoa_r+0xdd6>
   888f4:	f1ba 0f00 	cmp.w	sl, #0
   888f8:	f73f aeda 	bgt.w	886b0 <_dtoa_r+0xbe0>
   888fc:	e6da      	b.n	886b4 <_dtoa_r+0xbe4>
   888fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88900:	2b02      	cmp	r3, #2
   88902:	f73f ae13 	bgt.w	8852c <_dtoa_r+0xa5c>
   88906:	f8cd 801c 	str.w	r8, [sp, #28]
   8890a:	e59c      	b.n	88446 <_dtoa_r+0x976>
   8890c:	463e      	mov	r6, r7
   8890e:	e76f      	b.n	887f0 <_dtoa_r+0xd20>
   88910:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88912:	2b02      	cmp	r3, #2
   88914:	f73f ae0a 	bgt.w	8852c <_dtoa_r+0xa5c>
   88918:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8891a:	f8cd 801c 	str.w	r8, [sp, #28]
   8891e:	9308      	str	r3, [sp, #32]
   88920:	e50f      	b.n	88342 <_dtoa_r+0x872>
   88922:	f04f 0a02 	mov.w	sl, #2
   88926:	f7ff ba51 	b.w	87dcc <_dtoa_r+0x2fc>
   8892a:	4602      	mov	r2, r0
   8892c:	f240 21ea 	movw	r1, #746	; 0x2ea
   88930:	4b17      	ldr	r3, [pc, #92]	; (88990 <_dtoa_r+0xec0>)
   88932:	4818      	ldr	r0, [pc, #96]	; (88994 <_dtoa_r+0xec4>)
   88934:	f001 f956 	bl	89be4 <__assert_func>
   88938:	2600      	movs	r6, #0
   8893a:	4620      	mov	r0, r4
   8893c:	4631      	mov	r1, r6
   8893e:	6466      	str	r6, [r4, #68]	; 0x44
   88940:	f000 fc9e 	bl	89280 <_Balloc>
   88944:	9003      	str	r0, [sp, #12]
   88946:	b978      	cbnz	r0, 88968 <_dtoa_r+0xe98>
   88948:	2200      	movs	r2, #0
   8894a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   8894e:	4b10      	ldr	r3, [pc, #64]	; (88990 <_dtoa_r+0xec0>)
   88950:	4810      	ldr	r0, [pc, #64]	; (88994 <_dtoa_r+0xec4>)
   88952:	f001 f947 	bl	89be4 <__assert_func>
   88956:	4b10      	ldr	r3, [pc, #64]	; (88998 <_dtoa_r+0xec8>)
   88958:	9303      	str	r3, [sp, #12]
   8895a:	f7ff b8f4 	b.w	87b46 <_dtoa_r+0x76>
   8895e:	f43f ac33 	beq.w	881c8 <_dtoa_r+0x6f8>
   88962:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   88966:	e4b5      	b.n	882d4 <_dtoa_r+0x804>
   88968:	9b03      	ldr	r3, [sp, #12]
   8896a:	2201      	movs	r2, #1
   8896c:	6423      	str	r3, [r4, #64]	; 0x40
   8896e:	f04f 33ff 	mov.w	r3, #4294967295
   88972:	9623      	str	r6, [sp, #140]	; 0x8c
   88974:	9312      	str	r3, [sp, #72]	; 0x48
   88976:	920c      	str	r2, [sp, #48]	; 0x30
   88978:	9308      	str	r3, [sp, #32]
   8897a:	f7ff bafb 	b.w	87f74 <_dtoa_r+0x4a4>
   8897e:	bf00      	nop
   88980:	0008cb48 	.word	0x0008cb48
   88984:	40240000 	.word	0x40240000
   88988:	3fe00000 	.word	0x3fe00000
   8898c:	401c0000 	.word	0x401c0000
   88990:	0008ca08 	.word	0x0008ca08
   88994:	0008ca1c 	.word	0x0008ca1c
   88998:	0008c9fc 	.word	0x0008c9fc

0008899c <__libc_fini_array>:
   8899c:	b538      	push	{r3, r4, r5, lr}
   8899e:	4b08      	ldr	r3, [pc, #32]	; (889c0 <__libc_fini_array+0x24>)
   889a0:	4d08      	ldr	r5, [pc, #32]	; (889c4 <__libc_fini_array+0x28>)
   889a2:	1b5b      	subs	r3, r3, r5
   889a4:	109c      	asrs	r4, r3, #2
   889a6:	d007      	beq.n	889b8 <__libc_fini_array+0x1c>
   889a8:	3b04      	subs	r3, #4
   889aa:	441d      	add	r5, r3
   889ac:	3c01      	subs	r4, #1
   889ae:	f855 3904 	ldr.w	r3, [r5], #-4
   889b2:	4798      	blx	r3
   889b4:	2c00      	cmp	r4, #0
   889b6:	d1f9      	bne.n	889ac <__libc_fini_array+0x10>
   889b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   889bc:	f004 b9f2 	b.w	8cda4 <_fini>
   889c0:	0008cdb4 	.word	0x0008cdb4
   889c4:	0008cdb0 	.word	0x0008cdb0

000889c8 <_malloc_trim_r>:
   889c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   889ca:	460c      	mov	r4, r1
   889cc:	4f23      	ldr	r7, [pc, #140]	; (88a5c <_malloc_trim_r+0x94>)
   889ce:	4606      	mov	r6, r0
   889d0:	f000 fc4a 	bl	89268 <__malloc_lock>
   889d4:	68bb      	ldr	r3, [r7, #8]
   889d6:	685d      	ldr	r5, [r3, #4]
   889d8:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
   889dc:	f025 0503 	bic.w	r5, r5, #3
   889e0:	330f      	adds	r3, #15
   889e2:	442b      	add	r3, r5
   889e4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   889e8:	f023 030f 	bic.w	r3, r3, #15
   889ec:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   889f0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   889f4:	db07      	blt.n	88a06 <_malloc_trim_r+0x3e>
   889f6:	2100      	movs	r1, #0
   889f8:	4630      	mov	r0, r6
   889fa:	f001 f81d 	bl	89a38 <_sbrk_r>
   889fe:	68bb      	ldr	r3, [r7, #8]
   88a00:	442b      	add	r3, r5
   88a02:	4298      	cmp	r0, r3
   88a04:	d004      	beq.n	88a10 <_malloc_trim_r+0x48>
   88a06:	4630      	mov	r0, r6
   88a08:	f000 fc34 	bl	89274 <__malloc_unlock>
   88a0c:	2000      	movs	r0, #0
   88a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88a10:	4630      	mov	r0, r6
   88a12:	4261      	negs	r1, r4
   88a14:	f001 f810 	bl	89a38 <_sbrk_r>
   88a18:	3001      	adds	r0, #1
   88a1a:	d00d      	beq.n	88a38 <_malloc_trim_r+0x70>
   88a1c:	4a10      	ldr	r2, [pc, #64]	; (88a60 <_malloc_trim_r+0x98>)
   88a1e:	68bb      	ldr	r3, [r7, #8]
   88a20:	1b2d      	subs	r5, r5, r4
   88a22:	f045 0501 	orr.w	r5, r5, #1
   88a26:	605d      	str	r5, [r3, #4]
   88a28:	6813      	ldr	r3, [r2, #0]
   88a2a:	4630      	mov	r0, r6
   88a2c:	1b1b      	subs	r3, r3, r4
   88a2e:	6013      	str	r3, [r2, #0]
   88a30:	f000 fc20 	bl	89274 <__malloc_unlock>
   88a34:	2001      	movs	r0, #1
   88a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88a38:	2100      	movs	r1, #0
   88a3a:	4630      	mov	r0, r6
   88a3c:	f000 fffc 	bl	89a38 <_sbrk_r>
   88a40:	68ba      	ldr	r2, [r7, #8]
   88a42:	1a83      	subs	r3, r0, r2
   88a44:	2b0f      	cmp	r3, #15
   88a46:	ddde      	ble.n	88a06 <_malloc_trim_r+0x3e>
   88a48:	f043 0301 	orr.w	r3, r3, #1
   88a4c:	6053      	str	r3, [r2, #4]
   88a4e:	4b05      	ldr	r3, [pc, #20]	; (88a64 <_malloc_trim_r+0x9c>)
   88a50:	4903      	ldr	r1, [pc, #12]	; (88a60 <_malloc_trim_r+0x98>)
   88a52:	681b      	ldr	r3, [r3, #0]
   88a54:	1ac0      	subs	r0, r0, r3
   88a56:	6008      	str	r0, [r1, #0]
   88a58:	e7d5      	b.n	88a06 <_malloc_trim_r+0x3e>
   88a5a:	bf00      	nop
   88a5c:	20070f64 	.word	0x20070f64
   88a60:	2007331c 	.word	0x2007331c
   88a64:	2007136c 	.word	0x2007136c

00088a68 <_free_r>:
   88a68:	2900      	cmp	r1, #0
   88a6a:	d05e      	beq.n	88b2a <_free_r+0xc2>
   88a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88a6e:	460c      	mov	r4, r1
   88a70:	4606      	mov	r6, r0
   88a72:	f000 fbf9 	bl	89268 <__malloc_lock>
   88a76:	f854 2c04 	ldr.w	r2, [r4, #-4]
   88a7a:	4f78      	ldr	r7, [pc, #480]	; (88c5c <_free_r+0x1f4>)
   88a7c:	f1a4 0508 	sub.w	r5, r4, #8
   88a80:	f022 0101 	bic.w	r1, r2, #1
   88a84:	1868      	adds	r0, r5, r1
   88a86:	f8d7 c008 	ldr.w	ip, [r7, #8]
   88a8a:	6843      	ldr	r3, [r0, #4]
   88a8c:	4584      	cmp	ip, r0
   88a8e:	f023 0303 	bic.w	r3, r3, #3
   88a92:	f000 8087 	beq.w	88ba4 <_free_r+0x13c>
   88a96:	07d2      	lsls	r2, r2, #31
   88a98:	6043      	str	r3, [r0, #4]
   88a9a:	d434      	bmi.n	88b06 <_free_r+0x9e>
   88a9c:	f854 2c08 	ldr.w	r2, [r4, #-8]
   88aa0:	f107 0408 	add.w	r4, r7, #8
   88aa4:	1aad      	subs	r5, r5, r2
   88aa6:	4411      	add	r1, r2
   88aa8:	68aa      	ldr	r2, [r5, #8]
   88aaa:	42a2      	cmp	r2, r4
   88aac:	d068      	beq.n	88b80 <_free_r+0x118>
   88aae:	eb00 0c03 	add.w	ip, r0, r3
   88ab2:	f8dc e004 	ldr.w	lr, [ip, #4]
   88ab6:	f8d5 c00c 	ldr.w	ip, [r5, #12]
   88aba:	f01e 0f01 	tst.w	lr, #1
   88abe:	f8c2 c00c 	str.w	ip, [r2, #12]
   88ac2:	f8cc 2008 	str.w	r2, [ip, #8]
   88ac6:	f000 8091 	beq.w	88bec <_free_r+0x184>
   88aca:	f041 0301 	orr.w	r3, r1, #1
   88ace:	606b      	str	r3, [r5, #4]
   88ad0:	6001      	str	r1, [r0, #0]
   88ad2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   88ad6:	d231      	bcs.n	88b3c <_free_r+0xd4>
   88ad8:	094a      	lsrs	r2, r1, #5
   88ada:	08cb      	lsrs	r3, r1, #3
   88adc:	2101      	movs	r1, #1
   88ade:	4091      	lsls	r1, r2
   88ae0:	687a      	ldr	r2, [r7, #4]
   88ae2:	3301      	adds	r3, #1
   88ae4:	4311      	orrs	r1, r2
   88ae6:	6079      	str	r1, [r7, #4]
   88ae8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   88aec:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   88af0:	3a08      	subs	r2, #8
   88af2:	e9c5 1202 	strd	r1, r2, [r5, #8]
   88af6:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   88afa:	60cd      	str	r5, [r1, #12]
   88afc:	4630      	mov	r0, r6
   88afe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   88b02:	f000 bbb7 	b.w	89274 <__malloc_unlock>
   88b06:	18c2      	adds	r2, r0, r3
   88b08:	6852      	ldr	r2, [r2, #4]
   88b0a:	07d2      	lsls	r2, r2, #31
   88b0c:	d40e      	bmi.n	88b2c <_free_r+0xc4>
   88b0e:	4419      	add	r1, r3
   88b10:	f107 0408 	add.w	r4, r7, #8
   88b14:	6883      	ldr	r3, [r0, #8]
   88b16:	42a3      	cmp	r3, r4
   88b18:	d070      	beq.n	88bfc <_free_r+0x194>
   88b1a:	68c2      	ldr	r2, [r0, #12]
   88b1c:	60da      	str	r2, [r3, #12]
   88b1e:	6093      	str	r3, [r2, #8]
   88b20:	f041 0301 	orr.w	r3, r1, #1
   88b24:	606b      	str	r3, [r5, #4]
   88b26:	5069      	str	r1, [r5, r1]
   88b28:	e7d3      	b.n	88ad2 <_free_r+0x6a>
   88b2a:	4770      	bx	lr
   88b2c:	f041 0301 	orr.w	r3, r1, #1
   88b30:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   88b34:	f844 3c04 	str.w	r3, [r4, #-4]
   88b38:	6001      	str	r1, [r0, #0]
   88b3a:	d3cd      	bcc.n	88ad8 <_free_r+0x70>
   88b3c:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   88b40:	ea4f 2351 	mov.w	r3, r1, lsr #9
   88b44:	d247      	bcs.n	88bd6 <_free_r+0x16e>
   88b46:	098b      	lsrs	r3, r1, #6
   88b48:	f103 0039 	add.w	r0, r3, #57	; 0x39
   88b4c:	f103 0238 	add.w	r2, r3, #56	; 0x38
   88b50:	00c3      	lsls	r3, r0, #3
   88b52:	18f8      	adds	r0, r7, r3
   88b54:	58fb      	ldr	r3, [r7, r3]
   88b56:	3808      	subs	r0, #8
   88b58:	4298      	cmp	r0, r3
   88b5a:	d058      	beq.n	88c0e <_free_r+0x1a6>
   88b5c:	685a      	ldr	r2, [r3, #4]
   88b5e:	f022 0203 	bic.w	r2, r2, #3
   88b62:	428a      	cmp	r2, r1
   88b64:	d902      	bls.n	88b6c <_free_r+0x104>
   88b66:	689b      	ldr	r3, [r3, #8]
   88b68:	4298      	cmp	r0, r3
   88b6a:	d1f7      	bne.n	88b5c <_free_r+0xf4>
   88b6c:	68d8      	ldr	r0, [r3, #12]
   88b6e:	e9c5 3002 	strd	r3, r0, [r5, #8]
   88b72:	6085      	str	r5, [r0, #8]
   88b74:	4630      	mov	r0, r6
   88b76:	60dd      	str	r5, [r3, #12]
   88b78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   88b7c:	f000 bb7a 	b.w	89274 <__malloc_unlock>
   88b80:	18c2      	adds	r2, r0, r3
   88b82:	6852      	ldr	r2, [r2, #4]
   88b84:	07d2      	lsls	r2, r2, #31
   88b86:	d463      	bmi.n	88c50 <_free_r+0x1e8>
   88b88:	440b      	add	r3, r1
   88b8a:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   88b8e:	60ca      	str	r2, [r1, #12]
   88b90:	6091      	str	r1, [r2, #8]
   88b92:	f043 0201 	orr.w	r2, r3, #1
   88b96:	606a      	str	r2, [r5, #4]
   88b98:	4630      	mov	r0, r6
   88b9a:	50eb      	str	r3, [r5, r3]
   88b9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   88ba0:	f000 bb68 	b.w	89274 <__malloc_unlock>
   88ba4:	440b      	add	r3, r1
   88ba6:	07d1      	lsls	r1, r2, #31
   88ba8:	d407      	bmi.n	88bba <_free_r+0x152>
   88baa:	f854 2c08 	ldr.w	r2, [r4, #-8]
   88bae:	1aad      	subs	r5, r5, r2
   88bb0:	4413      	add	r3, r2
   88bb2:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   88bb6:	60ca      	str	r2, [r1, #12]
   88bb8:	6091      	str	r1, [r2, #8]
   88bba:	f043 0201 	orr.w	r2, r3, #1
   88bbe:	606a      	str	r2, [r5, #4]
   88bc0:	4a27      	ldr	r2, [pc, #156]	; (88c60 <_free_r+0x1f8>)
   88bc2:	60bd      	str	r5, [r7, #8]
   88bc4:	6812      	ldr	r2, [r2, #0]
   88bc6:	429a      	cmp	r2, r3
   88bc8:	d898      	bhi.n	88afc <_free_r+0x94>
   88bca:	4b26      	ldr	r3, [pc, #152]	; (88c64 <_free_r+0x1fc>)
   88bcc:	4630      	mov	r0, r6
   88bce:	6819      	ldr	r1, [r3, #0]
   88bd0:	f7ff fefa 	bl	889c8 <_malloc_trim_r>
   88bd4:	e792      	b.n	88afc <_free_r+0x94>
   88bd6:	2b14      	cmp	r3, #20
   88bd8:	d90a      	bls.n	88bf0 <_free_r+0x188>
   88bda:	2b54      	cmp	r3, #84	; 0x54
   88bdc:	d81f      	bhi.n	88c1e <_free_r+0x1b6>
   88bde:	0b0b      	lsrs	r3, r1, #12
   88be0:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   88be4:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   88be8:	00c3      	lsls	r3, r0, #3
   88bea:	e7b2      	b.n	88b52 <_free_r+0xea>
   88bec:	4419      	add	r1, r3
   88bee:	e791      	b.n	88b14 <_free_r+0xac>
   88bf0:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   88bf4:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   88bf8:	00c3      	lsls	r3, r0, #3
   88bfa:	e7aa      	b.n	88b52 <_free_r+0xea>
   88bfc:	f041 0301 	orr.w	r3, r1, #1
   88c00:	e9c7 5504 	strd	r5, r5, [r7, #16]
   88c04:	e9c5 4402 	strd	r4, r4, [r5, #8]
   88c08:	606b      	str	r3, [r5, #4]
   88c0a:	5069      	str	r1, [r5, r1]
   88c0c:	e776      	b.n	88afc <_free_r+0x94>
   88c0e:	2101      	movs	r1, #1
   88c10:	1092      	asrs	r2, r2, #2
   88c12:	fa01 f202 	lsl.w	r2, r1, r2
   88c16:	6879      	ldr	r1, [r7, #4]
   88c18:	430a      	orrs	r2, r1
   88c1a:	607a      	str	r2, [r7, #4]
   88c1c:	e7a7      	b.n	88b6e <_free_r+0x106>
   88c1e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   88c22:	d806      	bhi.n	88c32 <_free_r+0x1ca>
   88c24:	0bcb      	lsrs	r3, r1, #15
   88c26:	f103 0078 	add.w	r0, r3, #120	; 0x78
   88c2a:	f103 0277 	add.w	r2, r3, #119	; 0x77
   88c2e:	00c3      	lsls	r3, r0, #3
   88c30:	e78f      	b.n	88b52 <_free_r+0xea>
   88c32:	f240 5254 	movw	r2, #1364	; 0x554
   88c36:	4293      	cmp	r3, r2
   88c38:	d806      	bhi.n	88c48 <_free_r+0x1e0>
   88c3a:	0c8b      	lsrs	r3, r1, #18
   88c3c:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   88c40:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   88c44:	00c3      	lsls	r3, r0, #3
   88c46:	e784      	b.n	88b52 <_free_r+0xea>
   88c48:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   88c4c:	227e      	movs	r2, #126	; 0x7e
   88c4e:	e780      	b.n	88b52 <_free_r+0xea>
   88c50:	f041 0301 	orr.w	r3, r1, #1
   88c54:	606b      	str	r3, [r5, #4]
   88c56:	6001      	str	r1, [r0, #0]
   88c58:	e750      	b.n	88afc <_free_r+0x94>
   88c5a:	bf00      	nop
   88c5c:	20070f64 	.word	0x20070f64
   88c60:	20071370 	.word	0x20071370
   88c64:	2007334c 	.word	0x2007334c

00088c68 <_localeconv_r>:
   88c68:	4800      	ldr	r0, [pc, #0]	; (88c6c <_localeconv_r+0x4>)
   88c6a:	4770      	bx	lr
   88c6c:	20071464 	.word	0x20071464

00088c70 <__retarget_lock_init_recursive>:
   88c70:	4770      	bx	lr
   88c72:	bf00      	nop

00088c74 <__retarget_lock_close_recursive>:
   88c74:	4770      	bx	lr
   88c76:	bf00      	nop

00088c78 <__retarget_lock_acquire_recursive>:
   88c78:	4770      	bx	lr
   88c7a:	bf00      	nop

00088c7c <__retarget_lock_release_recursive>:
   88c7c:	4770      	bx	lr
   88c7e:	bf00      	nop

00088c80 <_malloc_r>:
   88c80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88c84:	f101 050b 	add.w	r5, r1, #11
   88c88:	2d16      	cmp	r5, #22
   88c8a:	4606      	mov	r6, r0
   88c8c:	b083      	sub	sp, #12
   88c8e:	d825      	bhi.n	88cdc <_malloc_r+0x5c>
   88c90:	2910      	cmp	r1, #16
   88c92:	f200 80b8 	bhi.w	88e06 <_malloc_r+0x186>
   88c96:	f000 fae7 	bl	89268 <__malloc_lock>
   88c9a:	2510      	movs	r5, #16
   88c9c:	2218      	movs	r2, #24
   88c9e:	f04f 0c02 	mov.w	ip, #2
   88ca2:	4fb5      	ldr	r7, [pc, #724]	; (88f78 <_malloc_r+0x2f8>)
   88ca4:	443a      	add	r2, r7
   88ca6:	6853      	ldr	r3, [r2, #4]
   88ca8:	f1a2 0108 	sub.w	r1, r2, #8
   88cac:	428b      	cmp	r3, r1
   88cae:	f000 80b7 	beq.w	88e20 <_malloc_r+0x1a0>
   88cb2:	685a      	ldr	r2, [r3, #4]
   88cb4:	68d9      	ldr	r1, [r3, #12]
   88cb6:	f022 0203 	bic.w	r2, r2, #3
   88cba:	441a      	add	r2, r3
   88cbc:	689c      	ldr	r4, [r3, #8]
   88cbe:	4630      	mov	r0, r6
   88cc0:	60e1      	str	r1, [r4, #12]
   88cc2:	608c      	str	r4, [r1, #8]
   88cc4:	6851      	ldr	r1, [r2, #4]
   88cc6:	f103 0408 	add.w	r4, r3, #8
   88cca:	f041 0101 	orr.w	r1, r1, #1
   88cce:	6051      	str	r1, [r2, #4]
   88cd0:	f000 fad0 	bl	89274 <__malloc_unlock>
   88cd4:	4620      	mov	r0, r4
   88cd6:	b003      	add	sp, #12
   88cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88cdc:	f035 0507 	bics.w	r5, r5, #7
   88ce0:	f100 8091 	bmi.w	88e06 <_malloc_r+0x186>
   88ce4:	42a9      	cmp	r1, r5
   88ce6:	f200 808e 	bhi.w	88e06 <_malloc_r+0x186>
   88cea:	f000 fabd 	bl	89268 <__malloc_lock>
   88cee:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   88cf2:	f0c0 8194 	bcc.w	8901e <_malloc_r+0x39e>
   88cf6:	0a6b      	lsrs	r3, r5, #9
   88cf8:	f000 808c 	beq.w	88e14 <_malloc_r+0x194>
   88cfc:	2b04      	cmp	r3, #4
   88cfe:	f200 816a 	bhi.w	88fd6 <_malloc_r+0x356>
   88d02:	09ab      	lsrs	r3, r5, #6
   88d04:	f103 0c39 	add.w	ip, r3, #57	; 0x39
   88d08:	f103 0438 	add.w	r4, r3, #56	; 0x38
   88d0c:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   88d10:	4f99      	ldr	r7, [pc, #612]	; (88f78 <_malloc_r+0x2f8>)
   88d12:	4438      	add	r0, r7
   88d14:	6843      	ldr	r3, [r0, #4]
   88d16:	3808      	subs	r0, #8
   88d18:	4298      	cmp	r0, r3
   88d1a:	d106      	bne.n	88d2a <_malloc_r+0xaa>
   88d1c:	e00c      	b.n	88d38 <_malloc_r+0xb8>
   88d1e:	2900      	cmp	r1, #0
   88d20:	f280 8126 	bge.w	88f70 <_malloc_r+0x2f0>
   88d24:	68db      	ldr	r3, [r3, #12]
   88d26:	4298      	cmp	r0, r3
   88d28:	d006      	beq.n	88d38 <_malloc_r+0xb8>
   88d2a:	685a      	ldr	r2, [r3, #4]
   88d2c:	f022 0203 	bic.w	r2, r2, #3
   88d30:	1b51      	subs	r1, r2, r5
   88d32:	290f      	cmp	r1, #15
   88d34:	ddf3      	ble.n	88d1e <_malloc_r+0x9e>
   88d36:	46a4      	mov	ip, r4
   88d38:	693c      	ldr	r4, [r7, #16]
   88d3a:	f8df e240 	ldr.w	lr, [pc, #576]	; 88f7c <_malloc_r+0x2fc>
   88d3e:	4574      	cmp	r4, lr
   88d40:	d07a      	beq.n	88e38 <_malloc_r+0x1b8>
   88d42:	6862      	ldr	r2, [r4, #4]
   88d44:	f022 0203 	bic.w	r2, r2, #3
   88d48:	1b53      	subs	r3, r2, r5
   88d4a:	2b0f      	cmp	r3, #15
   88d4c:	f300 8176 	bgt.w	8903c <_malloc_r+0x3bc>
   88d50:	2b00      	cmp	r3, #0
   88d52:	e9c7 ee04 	strd	lr, lr, [r7, #16]
   88d56:	f280 8167 	bge.w	89028 <_malloc_r+0x3a8>
   88d5a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   88d5e:	f080 8119 	bcs.w	88f94 <_malloc_r+0x314>
   88d62:	2101      	movs	r1, #1
   88d64:	08d3      	lsrs	r3, r2, #3
   88d66:	0952      	lsrs	r2, r2, #5
   88d68:	440b      	add	r3, r1
   88d6a:	4091      	lsls	r1, r2
   88d6c:	687a      	ldr	r2, [r7, #4]
   88d6e:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
   88d72:	430a      	orrs	r2, r1
   88d74:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   88d78:	3908      	subs	r1, #8
   88d7a:	60a0      	str	r0, [r4, #8]
   88d7c:	60e1      	str	r1, [r4, #12]
   88d7e:	607a      	str	r2, [r7, #4]
   88d80:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   88d84:	60c4      	str	r4, [r0, #12]
   88d86:	2101      	movs	r1, #1
   88d88:	ea4f 03ac 	mov.w	r3, ip, asr #2
   88d8c:	4099      	lsls	r1, r3
   88d8e:	4291      	cmp	r1, r2
   88d90:	d859      	bhi.n	88e46 <_malloc_r+0x1c6>
   88d92:	4211      	tst	r1, r2
   88d94:	d106      	bne.n	88da4 <_malloc_r+0x124>
   88d96:	f02c 0c03 	bic.w	ip, ip, #3
   88d9a:	0049      	lsls	r1, r1, #1
   88d9c:	4211      	tst	r1, r2
   88d9e:	f10c 0c04 	add.w	ip, ip, #4
   88da2:	d0fa      	beq.n	88d9a <_malloc_r+0x11a>
   88da4:	eb07 09cc 	add.w	r9, r7, ip, lsl #3
   88da8:	4648      	mov	r0, r9
   88daa:	4664      	mov	r4, ip
   88dac:	f8d0 800c 	ldr.w	r8, [r0, #12]
   88db0:	4540      	cmp	r0, r8
   88db2:	d108      	bne.n	88dc6 <_malloc_r+0x146>
   88db4:	e11c      	b.n	88ff0 <_malloc_r+0x370>
   88db6:	2b00      	cmp	r3, #0
   88db8:	f280 8121 	bge.w	88ffe <_malloc_r+0x37e>
   88dbc:	f8d8 800c 	ldr.w	r8, [r8, #12]
   88dc0:	4540      	cmp	r0, r8
   88dc2:	f000 8115 	beq.w	88ff0 <_malloc_r+0x370>
   88dc6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   88dca:	f022 0203 	bic.w	r2, r2, #3
   88dce:	1b53      	subs	r3, r2, r5
   88dd0:	2b0f      	cmp	r3, #15
   88dd2:	ddf0      	ble.n	88db6 <_malloc_r+0x136>
   88dd4:	eb08 0105 	add.w	r1, r8, r5
   88dd8:	f045 0501 	orr.w	r5, r5, #1
   88ddc:	f8c8 5004 	str.w	r5, [r8, #4]
   88de0:	4630      	mov	r0, r6
   88de2:	e9d8 6402 	ldrd	r6, r4, [r8, #8]
   88de6:	60f4      	str	r4, [r6, #12]
   88de8:	60a6      	str	r6, [r4, #8]
   88dea:	f043 0401 	orr.w	r4, r3, #1
   88dee:	e9c7 1104 	strd	r1, r1, [r7, #16]
   88df2:	604c      	str	r4, [r1, #4]
   88df4:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   88df8:	f848 3002 	str.w	r3, [r8, r2]
   88dfc:	f000 fa3a 	bl	89274 <__malloc_unlock>
   88e00:	f108 0408 	add.w	r4, r8, #8
   88e04:	e002      	b.n	88e0c <_malloc_r+0x18c>
   88e06:	230c      	movs	r3, #12
   88e08:	2400      	movs	r4, #0
   88e0a:	6033      	str	r3, [r6, #0]
   88e0c:	4620      	mov	r0, r4
   88e0e:	b003      	add	sp, #12
   88e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88e14:	f44f 7000 	mov.w	r0, #512	; 0x200
   88e18:	f04f 0c40 	mov.w	ip, #64	; 0x40
   88e1c:	243f      	movs	r4, #63	; 0x3f
   88e1e:	e777      	b.n	88d10 <_malloc_r+0x90>
   88e20:	68d3      	ldr	r3, [r2, #12]
   88e22:	429a      	cmp	r2, r3
   88e24:	bf08      	it	eq
   88e26:	f10c 0c02 	addeq.w	ip, ip, #2
   88e2a:	f47f af42 	bne.w	88cb2 <_malloc_r+0x32>
   88e2e:	693c      	ldr	r4, [r7, #16]
   88e30:	f8df e148 	ldr.w	lr, [pc, #328]	; 88f7c <_malloc_r+0x2fc>
   88e34:	4574      	cmp	r4, lr
   88e36:	d184      	bne.n	88d42 <_malloc_r+0xc2>
   88e38:	2101      	movs	r1, #1
   88e3a:	687a      	ldr	r2, [r7, #4]
   88e3c:	ea4f 03ac 	mov.w	r3, ip, asr #2
   88e40:	4099      	lsls	r1, r3
   88e42:	4291      	cmp	r1, r2
   88e44:	d9a5      	bls.n	88d92 <_malloc_r+0x112>
   88e46:	68bc      	ldr	r4, [r7, #8]
   88e48:	6863      	ldr	r3, [r4, #4]
   88e4a:	f023 0903 	bic.w	r9, r3, #3
   88e4e:	454d      	cmp	r5, r9
   88e50:	d803      	bhi.n	88e5a <_malloc_r+0x1da>
   88e52:	eba9 0305 	sub.w	r3, r9, r5
   88e56:	2b0f      	cmp	r3, #15
   88e58:	dc7a      	bgt.n	88f50 <_malloc_r+0x2d0>
   88e5a:	f8df b124 	ldr.w	fp, [pc, #292]	; 88f80 <_malloc_r+0x300>
   88e5e:	4b49      	ldr	r3, [pc, #292]	; (88f84 <_malloc_r+0x304>)
   88e60:	f8db 2000 	ldr.w	r2, [fp]
   88e64:	681b      	ldr	r3, [r3, #0]
   88e66:	3201      	adds	r2, #1
   88e68:	442b      	add	r3, r5
   88e6a:	eb04 0a09 	add.w	sl, r4, r9
   88e6e:	f000 812f 	beq.w	890d0 <_malloc_r+0x450>
   88e72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   88e76:	330f      	adds	r3, #15
   88e78:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   88e7c:	f028 080f 	bic.w	r8, r8, #15
   88e80:	4641      	mov	r1, r8
   88e82:	4630      	mov	r0, r6
   88e84:	f000 fdd8 	bl	89a38 <_sbrk_r>
   88e88:	1c41      	adds	r1, r0, #1
   88e8a:	4602      	mov	r2, r0
   88e8c:	f000 80ef 	beq.w	8906e <_malloc_r+0x3ee>
   88e90:	4582      	cmp	sl, r0
   88e92:	f200 80ea 	bhi.w	8906a <_malloc_r+0x3ea>
   88e96:	4b3c      	ldr	r3, [pc, #240]	; (88f88 <_malloc_r+0x308>)
   88e98:	6819      	ldr	r1, [r3, #0]
   88e9a:	4441      	add	r1, r8
   88e9c:	4608      	mov	r0, r1
   88e9e:	6019      	str	r1, [r3, #0]
   88ea0:	f000 8149 	beq.w	89136 <_malloc_r+0x4b6>
   88ea4:	f8db 1000 	ldr.w	r1, [fp]
   88ea8:	9301      	str	r3, [sp, #4]
   88eaa:	3101      	adds	r1, #1
   88eac:	bf1b      	ittet	ne
   88eae:	eba2 0a0a 	subne.w	sl, r2, sl
   88eb2:	4450      	addne	r0, sl
   88eb4:	f8cb 2000 	streq.w	r2, [fp]
   88eb8:	6018      	strne	r0, [r3, #0]
   88eba:	f012 0b07 	ands.w	fp, r2, #7
   88ebe:	f000 8111 	beq.w	890e4 <_malloc_r+0x464>
   88ec2:	f1cb 0108 	rsb	r1, fp, #8
   88ec6:	440a      	add	r2, r1
   88ec8:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   88ecc:	4490      	add	r8, r2
   88ece:	3108      	adds	r1, #8
   88ed0:	eba1 0108 	sub.w	r1, r1, r8
   88ed4:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   88ed8:	4651      	mov	r1, sl
   88eda:	4630      	mov	r0, r6
   88edc:	9200      	str	r2, [sp, #0]
   88ede:	f000 fdab 	bl	89a38 <_sbrk_r>
   88ee2:	1c42      	adds	r2, r0, #1
   88ee4:	e9dd 2300 	ldrd	r2, r3, [sp]
   88ee8:	f000 814b 	beq.w	89182 <_malloc_r+0x502>
   88eec:	1a80      	subs	r0, r0, r2
   88eee:	eb00 080a 	add.w	r8, r0, sl
   88ef2:	6819      	ldr	r1, [r3, #0]
   88ef4:	f048 0001 	orr.w	r0, r8, #1
   88ef8:	4451      	add	r1, sl
   88efa:	42bc      	cmp	r4, r7
   88efc:	60ba      	str	r2, [r7, #8]
   88efe:	6019      	str	r1, [r3, #0]
   88f00:	6050      	str	r0, [r2, #4]
   88f02:	f000 8124 	beq.w	8914e <_malloc_r+0x4ce>
   88f06:	f1b9 0f0f 	cmp.w	r9, #15
   88f0a:	f240 8122 	bls.w	89152 <_malloc_r+0x4d2>
   88f0e:	f04f 0e05 	mov.w	lr, #5
   88f12:	6860      	ldr	r0, [r4, #4]
   88f14:	f1a9 0c0c 	sub.w	ip, r9, #12
   88f18:	f02c 0c07 	bic.w	ip, ip, #7
   88f1c:	f000 0001 	and.w	r0, r0, #1
   88f20:	ea40 000c 	orr.w	r0, r0, ip
   88f24:	6060      	str	r0, [r4, #4]
   88f26:	f1bc 0f0f 	cmp.w	ip, #15
   88f2a:	eb04 000c 	add.w	r0, r4, ip
   88f2e:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   88f32:	f200 812e 	bhi.w	89192 <_malloc_r+0x512>
   88f36:	4614      	mov	r4, r2
   88f38:	6850      	ldr	r0, [r2, #4]
   88f3a:	4b14      	ldr	r3, [pc, #80]	; (88f8c <_malloc_r+0x30c>)
   88f3c:	681a      	ldr	r2, [r3, #0]
   88f3e:	428a      	cmp	r2, r1
   88f40:	bf38      	it	cc
   88f42:	6019      	strcc	r1, [r3, #0]
   88f44:	4b12      	ldr	r3, [pc, #72]	; (88f90 <_malloc_r+0x310>)
   88f46:	681a      	ldr	r2, [r3, #0]
   88f48:	428a      	cmp	r2, r1
   88f4a:	bf38      	it	cc
   88f4c:	6019      	strcc	r1, [r3, #0]
   88f4e:	e090      	b.n	89072 <_malloc_r+0x3f2>
   88f50:	1962      	adds	r2, r4, r5
   88f52:	f043 0301 	orr.w	r3, r3, #1
   88f56:	f045 0501 	orr.w	r5, r5, #1
   88f5a:	6065      	str	r5, [r4, #4]
   88f5c:	4630      	mov	r0, r6
   88f5e:	60ba      	str	r2, [r7, #8]
   88f60:	3408      	adds	r4, #8
   88f62:	6053      	str	r3, [r2, #4]
   88f64:	f000 f986 	bl	89274 <__malloc_unlock>
   88f68:	4620      	mov	r0, r4
   88f6a:	b003      	add	sp, #12
   88f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88f70:	68d9      	ldr	r1, [r3, #12]
   88f72:	441a      	add	r2, r3
   88f74:	e6a2      	b.n	88cbc <_malloc_r+0x3c>
   88f76:	bf00      	nop
   88f78:	20070f64 	.word	0x20070f64
   88f7c:	20070f6c 	.word	0x20070f6c
   88f80:	2007136c 	.word	0x2007136c
   88f84:	2007334c 	.word	0x2007334c
   88f88:	2007331c 	.word	0x2007331c
   88f8c:	20073344 	.word	0x20073344
   88f90:	20073348 	.word	0x20073348
   88f94:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   88f98:	ea4f 2352 	mov.w	r3, r2, lsr #9
   88f9c:	d35f      	bcc.n	8905e <_malloc_r+0x3de>
   88f9e:	2b14      	cmp	r3, #20
   88fa0:	f200 80b1 	bhi.w	89106 <_malloc_r+0x486>
   88fa4:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   88fa8:	00c9      	lsls	r1, r1, #3
   88faa:	335b      	adds	r3, #91	; 0x5b
   88fac:	1878      	adds	r0, r7, r1
   88fae:	5879      	ldr	r1, [r7, r1]
   88fb0:	3808      	subs	r0, #8
   88fb2:	4288      	cmp	r0, r1
   88fb4:	f000 808f 	beq.w	890d6 <_malloc_r+0x456>
   88fb8:	684b      	ldr	r3, [r1, #4]
   88fba:	f023 0303 	bic.w	r3, r3, #3
   88fbe:	4293      	cmp	r3, r2
   88fc0:	d902      	bls.n	88fc8 <_malloc_r+0x348>
   88fc2:	6889      	ldr	r1, [r1, #8]
   88fc4:	4288      	cmp	r0, r1
   88fc6:	d1f7      	bne.n	88fb8 <_malloc_r+0x338>
   88fc8:	68c8      	ldr	r0, [r1, #12]
   88fca:	687a      	ldr	r2, [r7, #4]
   88fcc:	e9c4 1002 	strd	r1, r0, [r4, #8]
   88fd0:	6084      	str	r4, [r0, #8]
   88fd2:	60cc      	str	r4, [r1, #12]
   88fd4:	e6d7      	b.n	88d86 <_malloc_r+0x106>
   88fd6:	2b14      	cmp	r3, #20
   88fd8:	d959      	bls.n	8908e <_malloc_r+0x40e>
   88fda:	2b54      	cmp	r3, #84	; 0x54
   88fdc:	f200 809b 	bhi.w	89116 <_malloc_r+0x496>
   88fe0:	0b2b      	lsrs	r3, r5, #12
   88fe2:	f103 0c6f 	add.w	ip, r3, #111	; 0x6f
   88fe6:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   88fea:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   88fee:	e68f      	b.n	88d10 <_malloc_r+0x90>
   88ff0:	3401      	adds	r4, #1
   88ff2:	07a3      	lsls	r3, r4, #30
   88ff4:	f100 0008 	add.w	r0, r0, #8
   88ff8:	f47f aed8 	bne.w	88dac <_malloc_r+0x12c>
   88ffc:	e053      	b.n	890a6 <_malloc_r+0x426>
   88ffe:	4644      	mov	r4, r8
   89000:	4442      	add	r2, r8
   89002:	6853      	ldr	r3, [r2, #4]
   89004:	f8d8 100c 	ldr.w	r1, [r8, #12]
   89008:	f043 0301 	orr.w	r3, r3, #1
   8900c:	6053      	str	r3, [r2, #4]
   8900e:	f854 3f08 	ldr.w	r3, [r4, #8]!
   89012:	4630      	mov	r0, r6
   89014:	60d9      	str	r1, [r3, #12]
   89016:	608b      	str	r3, [r1, #8]
   89018:	f000 f92c 	bl	89274 <__malloc_unlock>
   8901c:	e6f6      	b.n	88e0c <_malloc_r+0x18c>
   8901e:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   89022:	f105 0208 	add.w	r2, r5, #8
   89026:	e63c      	b.n	88ca2 <_malloc_r+0x22>
   89028:	4422      	add	r2, r4
   8902a:	6853      	ldr	r3, [r2, #4]
   8902c:	4630      	mov	r0, r6
   8902e:	f043 0301 	orr.w	r3, r3, #1
   89032:	6053      	str	r3, [r2, #4]
   89034:	f000 f91e 	bl	89274 <__malloc_unlock>
   89038:	3408      	adds	r4, #8
   8903a:	e6e7      	b.n	88e0c <_malloc_r+0x18c>
   8903c:	1961      	adds	r1, r4, r5
   8903e:	f045 0501 	orr.w	r5, r5, #1
   89042:	6065      	str	r5, [r4, #4]
   89044:	f043 0501 	orr.w	r5, r3, #1
   89048:	e9c7 1104 	strd	r1, r1, [r7, #16]
   8904c:	4630      	mov	r0, r6
   8904e:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   89052:	604d      	str	r5, [r1, #4]
   89054:	50a3      	str	r3, [r4, r2]
   89056:	f000 f90d 	bl	89274 <__malloc_unlock>
   8905a:	3408      	adds	r4, #8
   8905c:	e6d6      	b.n	88e0c <_malloc_r+0x18c>
   8905e:	0993      	lsrs	r3, r2, #6
   89060:	f103 0139 	add.w	r1, r3, #57	; 0x39
   89064:	00c9      	lsls	r1, r1, #3
   89066:	3338      	adds	r3, #56	; 0x38
   89068:	e7a0      	b.n	88fac <_malloc_r+0x32c>
   8906a:	42bc      	cmp	r4, r7
   8906c:	d05e      	beq.n	8912c <_malloc_r+0x4ac>
   8906e:	68bc      	ldr	r4, [r7, #8]
   89070:	6860      	ldr	r0, [r4, #4]
   89072:	f020 0803 	bic.w	r8, r0, #3
   89076:	4545      	cmp	r5, r8
   89078:	eba8 0305 	sub.w	r3, r8, r5
   8907c:	d802      	bhi.n	89084 <_malloc_r+0x404>
   8907e:	2b0f      	cmp	r3, #15
   89080:	f73f af66 	bgt.w	88f50 <_malloc_r+0x2d0>
   89084:	4630      	mov	r0, r6
   89086:	f000 f8f5 	bl	89274 <__malloc_unlock>
   8908a:	2400      	movs	r4, #0
   8908c:	e6be      	b.n	88e0c <_malloc_r+0x18c>
   8908e:	f103 0c5c 	add.w	ip, r3, #92	; 0x5c
   89092:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   89096:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8909a:	e639      	b.n	88d10 <_malloc_r+0x90>
   8909c:	f859 3908 	ldr.w	r3, [r9], #-8
   890a0:	454b      	cmp	r3, r9
   890a2:	f040 8095 	bne.w	891d0 <_malloc_r+0x550>
   890a6:	f01c 0f03 	tst.w	ip, #3
   890aa:	f10c 3cff 	add.w	ip, ip, #4294967295
   890ae:	d1f5      	bne.n	8909c <_malloc_r+0x41c>
   890b0:	687b      	ldr	r3, [r7, #4]
   890b2:	ea23 0301 	bic.w	r3, r3, r1
   890b6:	607b      	str	r3, [r7, #4]
   890b8:	0049      	lsls	r1, r1, #1
   890ba:	4299      	cmp	r1, r3
   890bc:	f63f aec3 	bhi.w	88e46 <_malloc_r+0x1c6>
   890c0:	b911      	cbnz	r1, 890c8 <_malloc_r+0x448>
   890c2:	e6c0      	b.n	88e46 <_malloc_r+0x1c6>
   890c4:	0049      	lsls	r1, r1, #1
   890c6:	3404      	adds	r4, #4
   890c8:	4219      	tst	r1, r3
   890ca:	d0fb      	beq.n	890c4 <_malloc_r+0x444>
   890cc:	46a4      	mov	ip, r4
   890ce:	e669      	b.n	88da4 <_malloc_r+0x124>
   890d0:	f103 0810 	add.w	r8, r3, #16
   890d4:	e6d4      	b.n	88e80 <_malloc_r+0x200>
   890d6:	2201      	movs	r2, #1
   890d8:	109b      	asrs	r3, r3, #2
   890da:	409a      	lsls	r2, r3
   890dc:	687b      	ldr	r3, [r7, #4]
   890de:	431a      	orrs	r2, r3
   890e0:	607a      	str	r2, [r7, #4]
   890e2:	e773      	b.n	88fcc <_malloc_r+0x34c>
   890e4:	eb02 0108 	add.w	r1, r2, r8
   890e8:	4249      	negs	r1, r1
   890ea:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   890ee:	4651      	mov	r1, sl
   890f0:	4630      	mov	r0, r6
   890f2:	9200      	str	r2, [sp, #0]
   890f4:	f000 fca0 	bl	89a38 <_sbrk_r>
   890f8:	1c43      	adds	r3, r0, #1
   890fa:	e9dd 2300 	ldrd	r2, r3, [sp]
   890fe:	f47f aef5 	bne.w	88eec <_malloc_r+0x26c>
   89102:	46da      	mov	sl, fp
   89104:	e6f5      	b.n	88ef2 <_malloc_r+0x272>
   89106:	2b54      	cmp	r3, #84	; 0x54
   89108:	d826      	bhi.n	89158 <_malloc_r+0x4d8>
   8910a:	0b13      	lsrs	r3, r2, #12
   8910c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   89110:	00c9      	lsls	r1, r1, #3
   89112:	336e      	adds	r3, #110	; 0x6e
   89114:	e74a      	b.n	88fac <_malloc_r+0x32c>
   89116:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8911a:	d826      	bhi.n	8916a <_malloc_r+0x4ea>
   8911c:	0beb      	lsrs	r3, r5, #15
   8911e:	f103 0c78 	add.w	ip, r3, #120	; 0x78
   89122:	f103 0477 	add.w	r4, r3, #119	; 0x77
   89126:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8912a:	e5f1      	b.n	88d10 <_malloc_r+0x90>
   8912c:	4b29      	ldr	r3, [pc, #164]	; (891d4 <_malloc_r+0x554>)
   8912e:	6818      	ldr	r0, [r3, #0]
   89130:	4440      	add	r0, r8
   89132:	6018      	str	r0, [r3, #0]
   89134:	e6b6      	b.n	88ea4 <_malloc_r+0x224>
   89136:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8913a:	f1bc 0f00 	cmp.w	ip, #0
   8913e:	f47f aeb1 	bne.w	88ea4 <_malloc_r+0x224>
   89142:	68bc      	ldr	r4, [r7, #8]
   89144:	44c8      	add	r8, r9
   89146:	f048 0001 	orr.w	r0, r8, #1
   8914a:	6060      	str	r0, [r4, #4]
   8914c:	e6f5      	b.n	88f3a <_malloc_r+0x2ba>
   8914e:	4614      	mov	r4, r2
   89150:	e6f3      	b.n	88f3a <_malloc_r+0x2ba>
   89152:	2301      	movs	r3, #1
   89154:	6053      	str	r3, [r2, #4]
   89156:	e795      	b.n	89084 <_malloc_r+0x404>
   89158:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8915c:	d824      	bhi.n	891a8 <_malloc_r+0x528>
   8915e:	0bd3      	lsrs	r3, r2, #15
   89160:	f103 0178 	add.w	r1, r3, #120	; 0x78
   89164:	00c9      	lsls	r1, r1, #3
   89166:	3377      	adds	r3, #119	; 0x77
   89168:	e720      	b.n	88fac <_malloc_r+0x32c>
   8916a:	f240 5254 	movw	r2, #1364	; 0x554
   8916e:	4293      	cmp	r3, r2
   89170:	d824      	bhi.n	891bc <_malloc_r+0x53c>
   89172:	0cab      	lsrs	r3, r5, #18
   89174:	f103 0c7d 	add.w	ip, r3, #125	; 0x7d
   89178:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   8917c:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   89180:	e5c6      	b.n	88d10 <_malloc_r+0x90>
   89182:	f1ab 0b08 	sub.w	fp, fp, #8
   89186:	44d8      	add	r8, fp
   89188:	f04f 0a00 	mov.w	sl, #0
   8918c:	eba8 0802 	sub.w	r8, r8, r2
   89190:	e6af      	b.n	88ef2 <_malloc_r+0x272>
   89192:	f104 0108 	add.w	r1, r4, #8
   89196:	4630      	mov	r0, r6
   89198:	9300      	str	r3, [sp, #0]
   8919a:	f7ff fc65 	bl	88a68 <_free_r>
   8919e:	68bc      	ldr	r4, [r7, #8]
   891a0:	9b00      	ldr	r3, [sp, #0]
   891a2:	6860      	ldr	r0, [r4, #4]
   891a4:	6819      	ldr	r1, [r3, #0]
   891a6:	e6c8      	b.n	88f3a <_malloc_r+0x2ba>
   891a8:	f240 5154 	movw	r1, #1364	; 0x554
   891ac:	428b      	cmp	r3, r1
   891ae:	d80b      	bhi.n	891c8 <_malloc_r+0x548>
   891b0:	0c93      	lsrs	r3, r2, #18
   891b2:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   891b6:	00c9      	lsls	r1, r1, #3
   891b8:	337c      	adds	r3, #124	; 0x7c
   891ba:	e6f7      	b.n	88fac <_malloc_r+0x32c>
   891bc:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
   891c0:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
   891c4:	247e      	movs	r4, #126	; 0x7e
   891c6:	e5a3      	b.n	88d10 <_malloc_r+0x90>
   891c8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   891cc:	237e      	movs	r3, #126	; 0x7e
   891ce:	e6ed      	b.n	88fac <_malloc_r+0x32c>
   891d0:	687b      	ldr	r3, [r7, #4]
   891d2:	e771      	b.n	890b8 <_malloc_r+0x438>
   891d4:	2007331c 	.word	0x2007331c

000891d8 <memchr>:
   891d8:	fa5f fc81 	uxtb.w	ip, r1
   891dc:	0781      	lsls	r1, r0, #30
   891de:	d010      	beq.n	89202 <memchr+0x2a>
   891e0:	4603      	mov	r3, r0
   891e2:	1e51      	subs	r1, r2, #1
   891e4:	b92a      	cbnz	r2, 891f2 <memchr+0x1a>
   891e6:	e00a      	b.n	891fe <memchr+0x26>
   891e8:	079a      	lsls	r2, r3, #30
   891ea:	4618      	mov	r0, r3
   891ec:	d00a      	beq.n	89204 <memchr+0x2c>
   891ee:	3901      	subs	r1, #1
   891f0:	d305      	bcc.n	891fe <memchr+0x26>
   891f2:	4618      	mov	r0, r3
   891f4:	f813 2b01 	ldrb.w	r2, [r3], #1
   891f8:	4562      	cmp	r2, ip
   891fa:	d1f5      	bne.n	891e8 <memchr+0x10>
   891fc:	4770      	bx	lr
   891fe:	2000      	movs	r0, #0
   89200:	4770      	bx	lr
   89202:	4611      	mov	r1, r2
   89204:	2903      	cmp	r1, #3
   89206:	d80c      	bhi.n	89222 <memchr+0x4a>
   89208:	2900      	cmp	r1, #0
   8920a:	d0f8      	beq.n	891fe <memchr+0x26>
   8920c:	4603      	mov	r3, r0
   8920e:	4401      	add	r1, r0
   89210:	e001      	b.n	89216 <memchr+0x3e>
   89212:	428b      	cmp	r3, r1
   89214:	d0f3      	beq.n	891fe <memchr+0x26>
   89216:	4618      	mov	r0, r3
   89218:	f813 2b01 	ldrb.w	r2, [r3], #1
   8921c:	4562      	cmp	r2, ip
   8921e:	d1f8      	bne.n	89212 <memchr+0x3a>
   89220:	e7ec      	b.n	891fc <memchr+0x24>
   89222:	4602      	mov	r2, r0
   89224:	b510      	push	{r4, lr}
   89226:	ea4c 240c 	orr.w	r4, ip, ip, lsl #8
   8922a:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
   8922e:	4610      	mov	r0, r2
   89230:	6803      	ldr	r3, [r0, #0]
   89232:	3204      	adds	r2, #4
   89234:	4063      	eors	r3, r4
   89236:	f1a3 3e01 	sub.w	lr, r3, #16843009	; 0x1010101
   8923a:	ea2e 0303 	bic.w	r3, lr, r3
   8923e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   89242:	d104      	bne.n	8924e <memchr+0x76>
   89244:	3904      	subs	r1, #4
   89246:	2903      	cmp	r1, #3
   89248:	4610      	mov	r0, r2
   8924a:	d8f0      	bhi.n	8922e <memchr+0x56>
   8924c:	b151      	cbz	r1, 89264 <memchr+0x8c>
   8924e:	4603      	mov	r3, r0
   89250:	4401      	add	r1, r0
   89252:	e001      	b.n	89258 <memchr+0x80>
   89254:	428b      	cmp	r3, r1
   89256:	d005      	beq.n	89264 <memchr+0x8c>
   89258:	4618      	mov	r0, r3
   8925a:	f813 2b01 	ldrb.w	r2, [r3], #1
   8925e:	4562      	cmp	r2, ip
   89260:	d1f8      	bne.n	89254 <memchr+0x7c>
   89262:	bd10      	pop	{r4, pc}
   89264:	2000      	movs	r0, #0
   89266:	bd10      	pop	{r4, pc}

00089268 <__malloc_lock>:
   89268:	4801      	ldr	r0, [pc, #4]	; (89270 <__malloc_lock+0x8>)
   8926a:	f7ff bd05 	b.w	88c78 <__retarget_lock_acquire_recursive>
   8926e:	bf00      	nop
   89270:	20073310 	.word	0x20073310

00089274 <__malloc_unlock>:
   89274:	4801      	ldr	r0, [pc, #4]	; (8927c <__malloc_unlock+0x8>)
   89276:	f7ff bd01 	b.w	88c7c <__retarget_lock_release_recursive>
   8927a:	bf00      	nop
   8927c:	20073310 	.word	0x20073310

00089280 <_Balloc>:
   89280:	b538      	push	{r3, r4, r5, lr}
   89282:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   89284:	4605      	mov	r5, r0
   89286:	460c      	mov	r4, r1
   89288:	b14b      	cbz	r3, 8929e <_Balloc+0x1e>
   8928a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8928e:	b180      	cbz	r0, 892b2 <_Balloc+0x32>
   89290:	6802      	ldr	r2, [r0, #0]
   89292:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   89296:	2300      	movs	r3, #0
   89298:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8929c:	bd38      	pop	{r3, r4, r5, pc}
   8929e:	2221      	movs	r2, #33	; 0x21
   892a0:	2104      	movs	r1, #4
   892a2:	f000 fcbf 	bl	89c24 <_calloc_r>
   892a6:	4603      	mov	r3, r0
   892a8:	64e8      	str	r0, [r5, #76]	; 0x4c
   892aa:	2800      	cmp	r0, #0
   892ac:	d1ed      	bne.n	8928a <_Balloc+0xa>
   892ae:	2000      	movs	r0, #0
   892b0:	bd38      	pop	{r3, r4, r5, pc}
   892b2:	2101      	movs	r1, #1
   892b4:	4628      	mov	r0, r5
   892b6:	fa01 f504 	lsl.w	r5, r1, r4
   892ba:	1d6a      	adds	r2, r5, #5
   892bc:	0092      	lsls	r2, r2, #2
   892be:	f000 fcb1 	bl	89c24 <_calloc_r>
   892c2:	2800      	cmp	r0, #0
   892c4:	d0f3      	beq.n	892ae <_Balloc+0x2e>
   892c6:	e9c0 4501 	strd	r4, r5, [r0, #4]
   892ca:	e7e4      	b.n	89296 <_Balloc+0x16>

000892cc <_Bfree>:
   892cc:	b131      	cbz	r1, 892dc <_Bfree+0x10>
   892ce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   892d0:	684a      	ldr	r2, [r1, #4]
   892d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   892d6:	6008      	str	r0, [r1, #0]
   892d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   892dc:	4770      	bx	lr
   892de:	bf00      	nop

000892e0 <__multadd>:
   892e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   892e4:	f04f 0e00 	mov.w	lr, #0
   892e8:	460e      	mov	r6, r1
   892ea:	461c      	mov	r4, r3
   892ec:	690d      	ldr	r5, [r1, #16]
   892ee:	4607      	mov	r7, r0
   892f0:	f101 0014 	add.w	r0, r1, #20
   892f4:	6801      	ldr	r1, [r0, #0]
   892f6:	f10e 0e01 	add.w	lr, lr, #1
   892fa:	b28b      	uxth	r3, r1
   892fc:	fb02 4303 	mla	r3, r2, r3, r4
   89300:	0c09      	lsrs	r1, r1, #16
   89302:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   89306:	fb02 cc01 	mla	ip, r2, r1, ip
   8930a:	b29b      	uxth	r3, r3
   8930c:	eb03 430c 	add.w	r3, r3, ip, lsl #16
   89310:	4575      	cmp	r5, lr
   89312:	f840 3b04 	str.w	r3, [r0], #4
   89316:	ea4f 441c 	mov.w	r4, ip, lsr #16
   8931a:	dceb      	bgt.n	892f4 <__multadd+0x14>
   8931c:	b13c      	cbz	r4, 8932e <__multadd+0x4e>
   8931e:	68b3      	ldr	r3, [r6, #8]
   89320:	42ab      	cmp	r3, r5
   89322:	dd07      	ble.n	89334 <__multadd+0x54>
   89324:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   89328:	3501      	adds	r5, #1
   8932a:	615c      	str	r4, [r3, #20]
   8932c:	6135      	str	r5, [r6, #16]
   8932e:	4630      	mov	r0, r6
   89330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89334:	6871      	ldr	r1, [r6, #4]
   89336:	4638      	mov	r0, r7
   89338:	3101      	adds	r1, #1
   8933a:	f7ff ffa1 	bl	89280 <_Balloc>
   8933e:	4680      	mov	r8, r0
   89340:	b1a8      	cbz	r0, 8936e <__multadd+0x8e>
   89342:	6932      	ldr	r2, [r6, #16]
   89344:	f106 010c 	add.w	r1, r6, #12
   89348:	3202      	adds	r2, #2
   8934a:	0092      	lsls	r2, r2, #2
   8934c:	300c      	adds	r0, #12
   8934e:	f7fc fc7b 	bl	85c48 <memcpy>
   89352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   89354:	6872      	ldr	r2, [r6, #4]
   89356:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8935a:	6031      	str	r1, [r6, #0]
   8935c:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   89360:	4646      	mov	r6, r8
   89362:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   89366:	3501      	adds	r5, #1
   89368:	615c      	str	r4, [r3, #20]
   8936a:	6135      	str	r5, [r6, #16]
   8936c:	e7df      	b.n	8932e <__multadd+0x4e>
   8936e:	4602      	mov	r2, r0
   89370:	21b5      	movs	r1, #181	; 0xb5
   89372:	4b02      	ldr	r3, [pc, #8]	; (8937c <__multadd+0x9c>)
   89374:	4802      	ldr	r0, [pc, #8]	; (89380 <__multadd+0xa0>)
   89376:	f000 fc35 	bl	89be4 <__assert_func>
   8937a:	bf00      	nop
   8937c:	0008ca08 	.word	0x0008ca08
   89380:	0008ca9c 	.word	0x0008ca9c

00089384 <__hi0bits>:
   89384:	0c02      	lsrs	r2, r0, #16
   89386:	0412      	lsls	r2, r2, #16
   89388:	4603      	mov	r3, r0
   8938a:	b9ca      	cbnz	r2, 893c0 <__hi0bits+0x3c>
   8938c:	2010      	movs	r0, #16
   8938e:	4083      	lsls	r3, r0
   89390:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   89394:	bf04      	itt	eq
   89396:	021b      	lsleq	r3, r3, #8
   89398:	3008      	addeq	r0, #8
   8939a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8939e:	bf04      	itt	eq
   893a0:	011b      	lsleq	r3, r3, #4
   893a2:	3004      	addeq	r0, #4
   893a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   893a8:	bf04      	itt	eq
   893aa:	009b      	lsleq	r3, r3, #2
   893ac:	3002      	addeq	r0, #2
   893ae:	2b00      	cmp	r3, #0
   893b0:	db05      	blt.n	893be <__hi0bits+0x3a>
   893b2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   893b6:	f100 0001 	add.w	r0, r0, #1
   893ba:	bf08      	it	eq
   893bc:	2020      	moveq	r0, #32
   893be:	4770      	bx	lr
   893c0:	2000      	movs	r0, #0
   893c2:	e7e5      	b.n	89390 <__hi0bits+0xc>

000893c4 <__lo0bits>:
   893c4:	6803      	ldr	r3, [r0, #0]
   893c6:	4602      	mov	r2, r0
   893c8:	f013 0007 	ands.w	r0, r3, #7
   893cc:	d009      	beq.n	893e2 <__lo0bits+0x1e>
   893ce:	07d9      	lsls	r1, r3, #31
   893d0:	d41f      	bmi.n	89412 <__lo0bits+0x4e>
   893d2:	0798      	lsls	r0, r3, #30
   893d4:	bf4b      	itete	mi
   893d6:	085b      	lsrmi	r3, r3, #1
   893d8:	089b      	lsrpl	r3, r3, #2
   893da:	2001      	movmi	r0, #1
   893dc:	2002      	movpl	r0, #2
   893de:	6013      	str	r3, [r2, #0]
   893e0:	4770      	bx	lr
   893e2:	b299      	uxth	r1, r3
   893e4:	b909      	cbnz	r1, 893ea <__lo0bits+0x26>
   893e6:	2010      	movs	r0, #16
   893e8:	40c3      	lsrs	r3, r0
   893ea:	b2d9      	uxtb	r1, r3
   893ec:	b909      	cbnz	r1, 893f2 <__lo0bits+0x2e>
   893ee:	3008      	adds	r0, #8
   893f0:	0a1b      	lsrs	r3, r3, #8
   893f2:	0719      	lsls	r1, r3, #28
   893f4:	bf04      	itt	eq
   893f6:	091b      	lsreq	r3, r3, #4
   893f8:	3004      	addeq	r0, #4
   893fa:	0799      	lsls	r1, r3, #30
   893fc:	bf04      	itt	eq
   893fe:	089b      	lsreq	r3, r3, #2
   89400:	3002      	addeq	r0, #2
   89402:	07d9      	lsls	r1, r3, #31
   89404:	d403      	bmi.n	8940e <__lo0bits+0x4a>
   89406:	085b      	lsrs	r3, r3, #1
   89408:	f100 0001 	add.w	r0, r0, #1
   8940c:	d003      	beq.n	89416 <__lo0bits+0x52>
   8940e:	6013      	str	r3, [r2, #0]
   89410:	4770      	bx	lr
   89412:	2000      	movs	r0, #0
   89414:	4770      	bx	lr
   89416:	2020      	movs	r0, #32
   89418:	4770      	bx	lr
   8941a:	bf00      	nop

0008941c <__i2b>:
   8941c:	b538      	push	{r3, r4, r5, lr}
   8941e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   89420:	4604      	mov	r4, r0
   89422:	460d      	mov	r5, r1
   89424:	b14b      	cbz	r3, 8943a <__i2b+0x1e>
   89426:	6858      	ldr	r0, [r3, #4]
   89428:	b1b0      	cbz	r0, 89458 <__i2b+0x3c>
   8942a:	6802      	ldr	r2, [r0, #0]
   8942c:	605a      	str	r2, [r3, #4]
   8942e:	2200      	movs	r2, #0
   89430:	2301      	movs	r3, #1
   89432:	6145      	str	r5, [r0, #20]
   89434:	e9c0 2303 	strd	r2, r3, [r0, #12]
   89438:	bd38      	pop	{r3, r4, r5, pc}
   8943a:	2221      	movs	r2, #33	; 0x21
   8943c:	2104      	movs	r1, #4
   8943e:	f000 fbf1 	bl	89c24 <_calloc_r>
   89442:	4603      	mov	r3, r0
   89444:	64e0      	str	r0, [r4, #76]	; 0x4c
   89446:	2800      	cmp	r0, #0
   89448:	d1ed      	bne.n	89426 <__i2b+0xa>
   8944a:	2200      	movs	r2, #0
   8944c:	f44f 71a0 	mov.w	r1, #320	; 0x140
   89450:	4b07      	ldr	r3, [pc, #28]	; (89470 <__i2b+0x54>)
   89452:	4808      	ldr	r0, [pc, #32]	; (89474 <__i2b+0x58>)
   89454:	f000 fbc6 	bl	89be4 <__assert_func>
   89458:	221c      	movs	r2, #28
   8945a:	2101      	movs	r1, #1
   8945c:	4620      	mov	r0, r4
   8945e:	f000 fbe1 	bl	89c24 <_calloc_r>
   89462:	2800      	cmp	r0, #0
   89464:	d0f1      	beq.n	8944a <__i2b+0x2e>
   89466:	2201      	movs	r2, #1
   89468:	2302      	movs	r3, #2
   8946a:	e9c0 2301 	strd	r2, r3, [r0, #4]
   8946e:	e7de      	b.n	8942e <__i2b+0x12>
   89470:	0008ca08 	.word	0x0008ca08
   89474:	0008ca9c 	.word	0x0008ca9c

00089478 <__multiply>:
   89478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8947c:	690e      	ldr	r6, [r1, #16]
   8947e:	6915      	ldr	r5, [r2, #16]
   89480:	4688      	mov	r8, r1
   89482:	42ae      	cmp	r6, r5
   89484:	4614      	mov	r4, r2
   89486:	b085      	sub	sp, #20
   89488:	db05      	blt.n	89496 <__multiply+0x1e>
   8948a:	462a      	mov	r2, r5
   8948c:	4623      	mov	r3, r4
   8948e:	4635      	mov	r5, r6
   89490:	460c      	mov	r4, r1
   89492:	4616      	mov	r6, r2
   89494:	4698      	mov	r8, r3
   89496:	68a3      	ldr	r3, [r4, #8]
   89498:	6861      	ldr	r1, [r4, #4]
   8949a:	19af      	adds	r7, r5, r6
   8949c:	42bb      	cmp	r3, r7
   8949e:	bfb8      	it	lt
   894a0:	3101      	addlt	r1, #1
   894a2:	f7ff feed 	bl	89280 <_Balloc>
   894a6:	9001      	str	r0, [sp, #4]
   894a8:	2800      	cmp	r0, #0
   894aa:	f000 8087 	beq.w	895bc <__multiply+0x144>
   894ae:	9b01      	ldr	r3, [sp, #4]
   894b0:	f103 0914 	add.w	r9, r3, #20
   894b4:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   894b8:	45d1      	cmp	r9, sl
   894ba:	d205      	bcs.n	894c8 <__multiply+0x50>
   894bc:	464b      	mov	r3, r9
   894be:	2200      	movs	r2, #0
   894c0:	f843 2b04 	str.w	r2, [r3], #4
   894c4:	459a      	cmp	sl, r3
   894c6:	d8fb      	bhi.n	894c0 <__multiply+0x48>
   894c8:	f108 0814 	add.w	r8, r8, #20
   894cc:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   894d0:	f104 0314 	add.w	r3, r4, #20
   894d4:	45d8      	cmp	r8, fp
   894d6:	461a      	mov	r2, r3
   894d8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   894dc:	d25f      	bcs.n	8959e <__multiply+0x126>
   894de:	1b2b      	subs	r3, r5, r4
   894e0:	3b15      	subs	r3, #21
   894e2:	f023 0303 	bic.w	r3, r3, #3
   894e6:	3304      	adds	r3, #4
   894e8:	3415      	adds	r4, #21
   894ea:	42a5      	cmp	r5, r4
   894ec:	bf38      	it	cc
   894ee:	2304      	movcc	r3, #4
   894f0:	e9cd a702 	strd	sl, r7, [sp, #8]
   894f4:	46ac      	mov	ip, r5
   894f6:	461f      	mov	r7, r3
   894f8:	4692      	mov	sl, r2
   894fa:	e005      	b.n	89508 <__multiply+0x90>
   894fc:	0c00      	lsrs	r0, r0, #16
   894fe:	d129      	bne.n	89554 <__multiply+0xdc>
   89500:	45c3      	cmp	fp, r8
   89502:	f109 0904 	add.w	r9, r9, #4
   89506:	d948      	bls.n	8959a <__multiply+0x122>
   89508:	f858 0b04 	ldr.w	r0, [r8], #4
   8950c:	b285      	uxth	r5, r0
   8950e:	2d00      	cmp	r5, #0
   89510:	d0f4      	beq.n	894fc <__multiply+0x84>
   89512:	4656      	mov	r6, sl
   89514:	464c      	mov	r4, r9
   89516:	2300      	movs	r3, #0
   89518:	f856 0b04 	ldr.w	r0, [r6], #4
   8951c:	6821      	ldr	r1, [r4, #0]
   8951e:	b282      	uxth	r2, r0
   89520:	fa1f fe81 	uxth.w	lr, r1
   89524:	fb05 ee02 	mla	lr, r5, r2, lr
   89528:	0c00      	lsrs	r0, r0, #16
   8952a:	0c0a      	lsrs	r2, r1, #16
   8952c:	fb05 2200 	mla	r2, r5, r0, r2
   89530:	4473      	add	r3, lr
   89532:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   89536:	b29b      	uxth	r3, r3
   89538:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8953c:	45b4      	cmp	ip, r6
   8953e:	f844 3b04 	str.w	r3, [r4], #4
   89542:	ea4f 4312 	mov.w	r3, r2, lsr #16
   89546:	d8e7      	bhi.n	89518 <__multiply+0xa0>
   89548:	f849 3007 	str.w	r3, [r9, r7]
   8954c:	f858 0c04 	ldr.w	r0, [r8, #-4]
   89550:	0c00      	lsrs	r0, r0, #16
   89552:	d0d5      	beq.n	89500 <__multiply+0x88>
   89554:	f8d9 3000 	ldr.w	r3, [r9]
   89558:	4654      	mov	r4, sl
   8955a:	4619      	mov	r1, r3
   8955c:	464d      	mov	r5, r9
   8955e:	2200      	movs	r2, #0
   89560:	8826      	ldrh	r6, [r4, #0]
   89562:	0c09      	lsrs	r1, r1, #16
   89564:	fb00 1106 	mla	r1, r0, r6, r1
   89568:	b29b      	uxth	r3, r3
   8956a:	440a      	add	r2, r1
   8956c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   89570:	f845 3b04 	str.w	r3, [r5], #4
   89574:	f854 6b04 	ldr.w	r6, [r4], #4
   89578:	6829      	ldr	r1, [r5, #0]
   8957a:	0c36      	lsrs	r6, r6, #16
   8957c:	b28b      	uxth	r3, r1
   8957e:	fb00 3306 	mla	r3, r0, r6, r3
   89582:	45a4      	cmp	ip, r4
   89584:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   89588:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8958c:	d8e8      	bhi.n	89560 <__multiply+0xe8>
   8958e:	45c3      	cmp	fp, r8
   89590:	f849 3007 	str.w	r3, [r9, r7]
   89594:	f109 0904 	add.w	r9, r9, #4
   89598:	d8b6      	bhi.n	89508 <__multiply+0x90>
   8959a:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   8959e:	2f00      	cmp	r7, #0
   895a0:	dc02      	bgt.n	895a8 <__multiply+0x130>
   895a2:	e005      	b.n	895b0 <__multiply+0x138>
   895a4:	3f01      	subs	r7, #1
   895a6:	d003      	beq.n	895b0 <__multiply+0x138>
   895a8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   895ac:	2b00      	cmp	r3, #0
   895ae:	d0f9      	beq.n	895a4 <__multiply+0x12c>
   895b0:	9b01      	ldr	r3, [sp, #4]
   895b2:	4618      	mov	r0, r3
   895b4:	611f      	str	r7, [r3, #16]
   895b6:	b005      	add	sp, #20
   895b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   895bc:	4602      	mov	r2, r0
   895be:	f240 115d 	movw	r1, #349	; 0x15d
   895c2:	4b02      	ldr	r3, [pc, #8]	; (895cc <__multiply+0x154>)
   895c4:	4802      	ldr	r0, [pc, #8]	; (895d0 <__multiply+0x158>)
   895c6:	f000 fb0d 	bl	89be4 <__assert_func>
   895ca:	bf00      	nop
   895cc:	0008ca08 	.word	0x0008ca08
   895d0:	0008ca9c 	.word	0x0008ca9c

000895d4 <__pow5mult>:
   895d4:	f012 0303 	ands.w	r3, r2, #3
   895d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   895dc:	4614      	mov	r4, r2
   895de:	4607      	mov	r7, r0
   895e0:	d12e      	bne.n	89640 <__pow5mult+0x6c>
   895e2:	460e      	mov	r6, r1
   895e4:	10a4      	asrs	r4, r4, #2
   895e6:	d01c      	beq.n	89622 <__pow5mult+0x4e>
   895e8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   895ea:	b395      	cbz	r5, 89652 <__pow5mult+0x7e>
   895ec:	07e3      	lsls	r3, r4, #31
   895ee:	f04f 0800 	mov.w	r8, #0
   895f2:	d406      	bmi.n	89602 <__pow5mult+0x2e>
   895f4:	1064      	asrs	r4, r4, #1
   895f6:	d014      	beq.n	89622 <__pow5mult+0x4e>
   895f8:	6828      	ldr	r0, [r5, #0]
   895fa:	b1a8      	cbz	r0, 89628 <__pow5mult+0x54>
   895fc:	4605      	mov	r5, r0
   895fe:	07e3      	lsls	r3, r4, #31
   89600:	d5f8      	bpl.n	895f4 <__pow5mult+0x20>
   89602:	462a      	mov	r2, r5
   89604:	4631      	mov	r1, r6
   89606:	4638      	mov	r0, r7
   89608:	f7ff ff36 	bl	89478 <__multiply>
   8960c:	b1b6      	cbz	r6, 8963c <__pow5mult+0x68>
   8960e:	6871      	ldr	r1, [r6, #4]
   89610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   89612:	1064      	asrs	r4, r4, #1
   89614:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   89618:	6032      	str	r2, [r6, #0]
   8961a:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8961e:	4606      	mov	r6, r0
   89620:	d1ea      	bne.n	895f8 <__pow5mult+0x24>
   89622:	4630      	mov	r0, r6
   89624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89628:	462a      	mov	r2, r5
   8962a:	4629      	mov	r1, r5
   8962c:	4638      	mov	r0, r7
   8962e:	f7ff ff23 	bl	89478 <__multiply>
   89632:	6028      	str	r0, [r5, #0]
   89634:	4605      	mov	r5, r0
   89636:	f8c0 8000 	str.w	r8, [r0]
   8963a:	e7e0      	b.n	895fe <__pow5mult+0x2a>
   8963c:	4606      	mov	r6, r0
   8963e:	e7d9      	b.n	895f4 <__pow5mult+0x20>
   89640:	4a0f      	ldr	r2, [pc, #60]	; (89680 <__pow5mult+0xac>)
   89642:	3b01      	subs	r3, #1
   89644:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   89648:	2300      	movs	r3, #0
   8964a:	f7ff fe49 	bl	892e0 <__multadd>
   8964e:	4606      	mov	r6, r0
   89650:	e7c8      	b.n	895e4 <__pow5mult+0x10>
   89652:	2101      	movs	r1, #1
   89654:	4638      	mov	r0, r7
   89656:	f7ff fe13 	bl	89280 <_Balloc>
   8965a:	4605      	mov	r5, r0
   8965c:	b140      	cbz	r0, 89670 <__pow5mult+0x9c>
   8965e:	f240 2371 	movw	r3, #625	; 0x271
   89662:	2201      	movs	r2, #1
   89664:	e9c0 2304 	strd	r2, r3, [r0, #16]
   89668:	2300      	movs	r3, #0
   8966a:	64b8      	str	r0, [r7, #72]	; 0x48
   8966c:	6003      	str	r3, [r0, #0]
   8966e:	e7bd      	b.n	895ec <__pow5mult+0x18>
   89670:	4602      	mov	r2, r0
   89672:	f44f 71a0 	mov.w	r1, #320	; 0x140
   89676:	4b03      	ldr	r3, [pc, #12]	; (89684 <__pow5mult+0xb0>)
   89678:	4803      	ldr	r0, [pc, #12]	; (89688 <__pow5mult+0xb4>)
   8967a:	f000 fab3 	bl	89be4 <__assert_func>
   8967e:	bf00      	nop
   89680:	0008cc10 	.word	0x0008cc10
   89684:	0008ca08 	.word	0x0008ca08
   89688:	0008ca9c 	.word	0x0008ca9c

0008968c <__lshift>:
   8968c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89690:	460c      	mov	r4, r1
   89692:	6926      	ldr	r6, [r4, #16]
   89694:	68a3      	ldr	r3, [r4, #8]
   89696:	eb06 1662 	add.w	r6, r6, r2, asr #5
   8969a:	1c75      	adds	r5, r6, #1
   8969c:	429d      	cmp	r5, r3
   8969e:	4690      	mov	r8, r2
   896a0:	4607      	mov	r7, r0
   896a2:	6849      	ldr	r1, [r1, #4]
   896a4:	ea4f 1962 	mov.w	r9, r2, asr #5
   896a8:	dd04      	ble.n	896b4 <__lshift+0x28>
   896aa:	005b      	lsls	r3, r3, #1
   896ac:	429d      	cmp	r5, r3
   896ae:	f101 0101 	add.w	r1, r1, #1
   896b2:	dcfa      	bgt.n	896aa <__lshift+0x1e>
   896b4:	4638      	mov	r0, r7
   896b6:	f7ff fde3 	bl	89280 <_Balloc>
   896ba:	2800      	cmp	r0, #0
   896bc:	d051      	beq.n	89762 <__lshift+0xd6>
   896be:	f1b9 0f00 	cmp.w	r9, #0
   896c2:	f100 0114 	add.w	r1, r0, #20
   896c6:	dd0f      	ble.n	896e8 <__lshift+0x5c>
   896c8:	460b      	mov	r3, r1
   896ca:	f04f 0c00 	mov.w	ip, #0
   896ce:	f109 0205 	add.w	r2, r9, #5
   896d2:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   896d6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   896da:	f843 cb04 	str.w	ip, [r3], #4
   896de:	4293      	cmp	r3, r2
   896e0:	d1fb      	bne.n	896da <__lshift+0x4e>
   896e2:	f1ae 0314 	sub.w	r3, lr, #20
   896e6:	4419      	add	r1, r3
   896e8:	6922      	ldr	r2, [r4, #16]
   896ea:	f104 0314 	add.w	r3, r4, #20
   896ee:	f018 081f 	ands.w	r8, r8, #31
   896f2:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   896f6:	d02c      	beq.n	89752 <__lshift+0xc6>
   896f8:	468e      	mov	lr, r1
   896fa:	f04f 0a00 	mov.w	sl, #0
   896fe:	f1c8 0920 	rsb	r9, r8, #32
   89702:	681a      	ldr	r2, [r3, #0]
   89704:	fa02 f208 	lsl.w	r2, r2, r8
   89708:	ea42 020a 	orr.w	r2, r2, sl
   8970c:	f84e 2b04 	str.w	r2, [lr], #4
   89710:	f853 2b04 	ldr.w	r2, [r3], #4
   89714:	459c      	cmp	ip, r3
   89716:	fa22 fa09 	lsr.w	sl, r2, r9
   8971a:	d8f2      	bhi.n	89702 <__lshift+0x76>
   8971c:	ebac 0304 	sub.w	r3, ip, r4
   89720:	3b15      	subs	r3, #21
   89722:	f023 0303 	bic.w	r3, r3, #3
   89726:	3304      	adds	r3, #4
   89728:	f104 0215 	add.w	r2, r4, #21
   8972c:	4594      	cmp	ip, r2
   8972e:	bf38      	it	cc
   89730:	2304      	movcc	r3, #4
   89732:	f1ba 0f00 	cmp.w	sl, #0
   89736:	bf18      	it	ne
   89738:	462e      	movne	r6, r5
   8973a:	f841 a003 	str.w	sl, [r1, r3]
   8973e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   89740:	6862      	ldr	r2, [r4, #4]
   89742:	6106      	str	r6, [r0, #16]
   89744:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   89748:	6021      	str	r1, [r4, #0]
   8974a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   8974e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89752:	3904      	subs	r1, #4
   89754:	f853 2b04 	ldr.w	r2, [r3], #4
   89758:	459c      	cmp	ip, r3
   8975a:	f841 2f04 	str.w	r2, [r1, #4]!
   8975e:	d8f9      	bhi.n	89754 <__lshift+0xc8>
   89760:	e7ed      	b.n	8973e <__lshift+0xb2>
   89762:	4602      	mov	r2, r0
   89764:	f240 11d9 	movw	r1, #473	; 0x1d9
   89768:	4b01      	ldr	r3, [pc, #4]	; (89770 <__lshift+0xe4>)
   8976a:	4802      	ldr	r0, [pc, #8]	; (89774 <__lshift+0xe8>)
   8976c:	f000 fa3a 	bl	89be4 <__assert_func>
   89770:	0008ca08 	.word	0x0008ca08
   89774:	0008ca9c 	.word	0x0008ca9c

00089778 <__mcmp>:
   89778:	4684      	mov	ip, r0
   8977a:	690b      	ldr	r3, [r1, #16]
   8977c:	6900      	ldr	r0, [r0, #16]
   8977e:	1ac0      	subs	r0, r0, r3
   89780:	d115      	bne.n	897ae <__mcmp+0x36>
   89782:	f10c 0c14 	add.w	ip, ip, #20
   89786:	3114      	adds	r1, #20
   89788:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   8978c:	b410      	push	{r4}
   8978e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   89792:	e001      	b.n	89798 <__mcmp+0x20>
   89794:	4594      	cmp	ip, r2
   89796:	d208      	bcs.n	897aa <__mcmp+0x32>
   89798:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   8979c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   897a0:	428c      	cmp	r4, r1
   897a2:	d0f7      	beq.n	89794 <__mcmp+0x1c>
   897a4:	d204      	bcs.n	897b0 <__mcmp+0x38>
   897a6:	f04f 30ff 	mov.w	r0, #4294967295
   897aa:	bc10      	pop	{r4}
   897ac:	4770      	bx	lr
   897ae:	4770      	bx	lr
   897b0:	2001      	movs	r0, #1
   897b2:	bc10      	pop	{r4}
   897b4:	4770      	bx	lr
   897b6:	bf00      	nop

000897b8 <__mdiff>:
   897b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   897bc:	690c      	ldr	r4, [r1, #16]
   897be:	6913      	ldr	r3, [r2, #16]
   897c0:	4689      	mov	r9, r1
   897c2:	1ae4      	subs	r4, r4, r3
   897c4:	2c00      	cmp	r4, #0
   897c6:	4617      	mov	r7, r2
   897c8:	d17d      	bne.n	898c6 <__mdiff+0x10e>
   897ca:	f101 0614 	add.w	r6, r1, #20
   897ce:	3214      	adds	r2, #20
   897d0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   897d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   897d8:	e001      	b.n	897de <__mdiff+0x26>
   897da:	429e      	cmp	r6, r3
   897dc:	d276      	bcs.n	898cc <__mdiff+0x114>
   897de:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   897e2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   897e6:	428d      	cmp	r5, r1
   897e8:	d0f7      	beq.n	897da <__mdiff+0x22>
   897ea:	d367      	bcc.n	898bc <__mdiff+0x104>
   897ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
   897f0:	f7ff fd46 	bl	89280 <_Balloc>
   897f4:	2800      	cmp	r0, #0
   897f6:	d073      	beq.n	898e0 <__mdiff+0x128>
   897f8:	f8d9 5010 	ldr.w	r5, [r9, #16]
   897fc:	60c4      	str	r4, [r0, #12]
   897fe:	f100 0414 	add.w	r4, r0, #20
   89802:	4626      	mov	r6, r4
   89804:	f04f 0a00 	mov.w	sl, #0
   89808:	693b      	ldr	r3, [r7, #16]
   8980a:	f109 0814 	add.w	r8, r9, #20
   8980e:	f107 0e14 	add.w	lr, r7, #20
   89812:	f109 0c10 	add.w	ip, r9, #16
   89816:	eb08 0285 	add.w	r2, r8, r5, lsl #2
   8981a:	eb0e 0983 	add.w	r9, lr, r3, lsl #2
   8981e:	f85c bf04 	ldr.w	fp, [ip, #4]!
   89822:	f85e 1b04 	ldr.w	r1, [lr], #4
   89826:	fa1f f38b 	uxth.w	r3, fp
   8982a:	4453      	add	r3, sl
   8982c:	fa1f fa81 	uxth.w	sl, r1
   89830:	0c09      	lsrs	r1, r1, #16
   89832:	eba3 030a 	sub.w	r3, r3, sl
   89836:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
   8983a:	eb01 4123 	add.w	r1, r1, r3, asr #16
   8983e:	b29b      	uxth	r3, r3
   89840:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   89844:	45f1      	cmp	r9, lr
   89846:	f846 3b04 	str.w	r3, [r6], #4
   8984a:	ea4f 4a21 	mov.w	sl, r1, asr #16
   8984e:	d8e6      	bhi.n	8981e <__mdiff+0x66>
   89850:	eba9 0107 	sub.w	r1, r9, r7
   89854:	3915      	subs	r1, #21
   89856:	3715      	adds	r7, #21
   89858:	45b9      	cmp	r9, r7
   8985a:	f021 0603 	bic.w	r6, r1, #3
   8985e:	f106 0604 	add.w	r6, r6, #4
   89862:	bf38      	it	cc
   89864:	2604      	movcc	r6, #4
   89866:	f021 0103 	bic.w	r1, r1, #3
   8986a:	bf38      	it	cc
   8986c:	2100      	movcc	r1, #0
   8986e:	44b0      	add	r8, r6
   89870:	4542      	cmp	r2, r8
   89872:	4426      	add	r6, r4
   89874:	440c      	add	r4, r1
   89876:	d918      	bls.n	898aa <__mdiff+0xf2>
   89878:	4637      	mov	r7, r6
   8987a:	4644      	mov	r4, r8
   8987c:	f854 1b04 	ldr.w	r1, [r4], #4
   89880:	b28b      	uxth	r3, r1
   89882:	4453      	add	r3, sl
   89884:	ea4f 4a23 	mov.w	sl, r3, asr #16
   89888:	eb0a 4111 	add.w	r1, sl, r1, lsr #16
   8988c:	b29b      	uxth	r3, r3
   8988e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   89892:	42a2      	cmp	r2, r4
   89894:	f847 3b04 	str.w	r3, [r7], #4
   89898:	ea4f 4a21 	mov.w	sl, r1, asr #16
   8989c:	d8ee      	bhi.n	8987c <__mdiff+0xc4>
   8989e:	1e54      	subs	r4, r2, #1
   898a0:	eba4 0408 	sub.w	r4, r4, r8
   898a4:	f024 0403 	bic.w	r4, r4, #3
   898a8:	4434      	add	r4, r6
   898aa:	b923      	cbnz	r3, 898b6 <__mdiff+0xfe>
   898ac:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   898b0:	3d01      	subs	r5, #1
   898b2:	2b00      	cmp	r3, #0
   898b4:	d0fa      	beq.n	898ac <__mdiff+0xf4>
   898b6:	6105      	str	r5, [r0, #16]
   898b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   898bc:	464b      	mov	r3, r9
   898be:	2401      	movs	r4, #1
   898c0:	46b9      	mov	r9, r7
   898c2:	461f      	mov	r7, r3
   898c4:	e792      	b.n	897ec <__mdiff+0x34>
   898c6:	dbf9      	blt.n	898bc <__mdiff+0x104>
   898c8:	2400      	movs	r4, #0
   898ca:	e78f      	b.n	897ec <__mdiff+0x34>
   898cc:	2100      	movs	r1, #0
   898ce:	f7ff fcd7 	bl	89280 <_Balloc>
   898d2:	b160      	cbz	r0, 898ee <__mdiff+0x136>
   898d4:	2201      	movs	r2, #1
   898d6:	2300      	movs	r3, #0
   898d8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   898dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   898e0:	4602      	mov	r2, r0
   898e2:	f44f 7110 	mov.w	r1, #576	; 0x240
   898e6:	4b05      	ldr	r3, [pc, #20]	; (898fc <__mdiff+0x144>)
   898e8:	4805      	ldr	r0, [pc, #20]	; (89900 <__mdiff+0x148>)
   898ea:	f000 f97b 	bl	89be4 <__assert_func>
   898ee:	4602      	mov	r2, r0
   898f0:	f240 2132 	movw	r1, #562	; 0x232
   898f4:	4b01      	ldr	r3, [pc, #4]	; (898fc <__mdiff+0x144>)
   898f6:	4802      	ldr	r0, [pc, #8]	; (89900 <__mdiff+0x148>)
   898f8:	f000 f974 	bl	89be4 <__assert_func>
   898fc:	0008ca08 	.word	0x0008ca08
   89900:	0008ca9c 	.word	0x0008ca9c

00089904 <__d2b>:
   89904:	b570      	push	{r4, r5, r6, lr}
   89906:	2101      	movs	r1, #1
   89908:	b082      	sub	sp, #8
   8990a:	4616      	mov	r6, r2
   8990c:	461d      	mov	r5, r3
   8990e:	f7ff fcb7 	bl	89280 <_Balloc>
   89912:	4604      	mov	r4, r0
   89914:	2800      	cmp	r0, #0
   89916:	d04c      	beq.n	899b2 <__d2b+0xae>
   89918:	462b      	mov	r3, r5
   8991a:	f3c5 550a 	ubfx	r5, r5, #20, #11
   8991e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   89922:	b10d      	cbz	r5, 89928 <__d2b+0x24>
   89924:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   89928:	2e00      	cmp	r6, #0
   8992a:	9301      	str	r3, [sp, #4]
   8992c:	d022      	beq.n	89974 <__d2b+0x70>
   8992e:	4668      	mov	r0, sp
   89930:	9600      	str	r6, [sp, #0]
   89932:	f7ff fd47 	bl	893c4 <__lo0bits>
   89936:	2800      	cmp	r0, #0
   89938:	d037      	beq.n	899aa <__d2b+0xa6>
   8993a:	9b01      	ldr	r3, [sp, #4]
   8993c:	9900      	ldr	r1, [sp, #0]
   8993e:	f1c0 0220 	rsb	r2, r0, #32
   89942:	fa03 f202 	lsl.w	r2, r3, r2
   89946:	430a      	orrs	r2, r1
   89948:	40c3      	lsrs	r3, r0
   8994a:	9301      	str	r3, [sp, #4]
   8994c:	6162      	str	r2, [r4, #20]
   8994e:	2b00      	cmp	r3, #0
   89950:	bf14      	ite	ne
   89952:	2102      	movne	r1, #2
   89954:	2101      	moveq	r1, #1
   89956:	61a3      	str	r3, [r4, #24]
   89958:	6121      	str	r1, [r4, #16]
   8995a:	b1b5      	cbz	r5, 8998a <__d2b+0x86>
   8995c:	9b06      	ldr	r3, [sp, #24]
   8995e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   89962:	4405      	add	r5, r0
   89964:	601d      	str	r5, [r3, #0]
   89966:	9b07      	ldr	r3, [sp, #28]
   89968:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8996c:	6018      	str	r0, [r3, #0]
   8996e:	4620      	mov	r0, r4
   89970:	b002      	add	sp, #8
   89972:	bd70      	pop	{r4, r5, r6, pc}
   89974:	a801      	add	r0, sp, #4
   89976:	f7ff fd25 	bl	893c4 <__lo0bits>
   8997a:	2301      	movs	r3, #1
   8997c:	9a01      	ldr	r2, [sp, #4]
   8997e:	4619      	mov	r1, r3
   89980:	6162      	str	r2, [r4, #20]
   89982:	3020      	adds	r0, #32
   89984:	6123      	str	r3, [r4, #16]
   89986:	2d00      	cmp	r5, #0
   89988:	d1e8      	bne.n	8995c <__d2b+0x58>
   8998a:	eb04 0281 	add.w	r2, r4, r1, lsl #2
   8998e:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
   89992:	6910      	ldr	r0, [r2, #16]
   89994:	9a06      	ldr	r2, [sp, #24]
   89996:	6013      	str	r3, [r2, #0]
   89998:	f7ff fcf4 	bl	89384 <__hi0bits>
   8999c:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   899a0:	4620      	mov	r0, r4
   899a2:	9b07      	ldr	r3, [sp, #28]
   899a4:	6019      	str	r1, [r3, #0]
   899a6:	b002      	add	sp, #8
   899a8:	bd70      	pop	{r4, r5, r6, pc}
   899aa:	e9dd 2300 	ldrd	r2, r3, [sp]
   899ae:	6162      	str	r2, [r4, #20]
   899b0:	e7cd      	b.n	8994e <__d2b+0x4a>
   899b2:	4602      	mov	r2, r0
   899b4:	f240 310a 	movw	r1, #778	; 0x30a
   899b8:	4b01      	ldr	r3, [pc, #4]	; (899c0 <__d2b+0xbc>)
   899ba:	4802      	ldr	r0, [pc, #8]	; (899c4 <__d2b+0xc0>)
   899bc:	f000 f912 	bl	89be4 <__assert_func>
   899c0:	0008ca08 	.word	0x0008ca08
   899c4:	0008ca9c 	.word	0x0008ca9c

000899c8 <frexp>:
   899c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   899ca:	2700      	movs	r7, #0
   899cc:	f8df c05c 	ldr.w	ip, [pc, #92]	; 89a2c <frexp+0x64>
   899d0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   899d4:	4563      	cmp	r3, ip
   899d6:	4604      	mov	r4, r0
   899d8:	460d      	mov	r5, r1
   899da:	6017      	str	r7, [r2, #0]
   899dc:	dc23      	bgt.n	89a26 <frexp+0x5e>
   899de:	4684      	mov	ip, r0
   899e0:	ea53 0c0c 	orrs.w	ip, r3, ip
   899e4:	d01f      	beq.n	89a26 <frexp+0x5e>
   899e6:	f8df c048 	ldr.w	ip, [pc, #72]	; 89a30 <frexp+0x68>
   899ea:	4616      	mov	r6, r2
   899ec:	ea01 0c0c 	and.w	ip, r1, ip
   899f0:	460a      	mov	r2, r1
   899f2:	f1bc 0f00 	cmp.w	ip, #0
   899f6:	d109      	bne.n	89a0c <frexp+0x44>
   899f8:	2200      	movs	r2, #0
   899fa:	4b0e      	ldr	r3, [pc, #56]	; (89a34 <frexp+0x6c>)
   899fc:	f002 fb3c 	bl	8c078 <__aeabi_dmul>
   89a00:	f06f 0735 	mvn.w	r7, #53	; 0x35
   89a04:	4604      	mov	r4, r0
   89a06:	460a      	mov	r2, r1
   89a08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   89a0c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   89a10:	151b      	asrs	r3, r3, #20
   89a12:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   89a16:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   89a1a:	443b      	add	r3, r7
   89a1c:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   89a20:	6033      	str	r3, [r6, #0]
   89a22:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   89a26:	4620      	mov	r0, r4
   89a28:	4629      	mov	r1, r5
   89a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89a2c:	7fefffff 	.word	0x7fefffff
   89a30:	7ff00000 	.word	0x7ff00000
   89a34:	43500000 	.word	0x43500000

00089a38 <_sbrk_r>:
   89a38:	2200      	movs	r2, #0
   89a3a:	b538      	push	{r3, r4, r5, lr}
   89a3c:	4d06      	ldr	r5, [pc, #24]	; (89a58 <_sbrk_r+0x20>)
   89a3e:	4604      	mov	r4, r0
   89a40:	4608      	mov	r0, r1
   89a42:	602a      	str	r2, [r5, #0]
   89a44:	f7fa f832 	bl	83aac <_sbrk>
   89a48:	1c43      	adds	r3, r0, #1
   89a4a:	d000      	beq.n	89a4e <_sbrk_r+0x16>
   89a4c:	bd38      	pop	{r3, r4, r5, pc}
   89a4e:	682b      	ldr	r3, [r5, #0]
   89a50:	2b00      	cmp	r3, #0
   89a52:	d0fb      	beq.n	89a4c <_sbrk_r+0x14>
   89a54:	6023      	str	r3, [r4, #0]
   89a56:	bd38      	pop	{r3, r4, r5, pc}
   89a58:	20073350 	.word	0x20073350

00089a5c <__ssprint_r>:
   89a5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89a60:	6893      	ldr	r3, [r2, #8]
   89a62:	4691      	mov	r9, r2
   89a64:	b083      	sub	sp, #12
   89a66:	2b00      	cmp	r3, #0
   89a68:	d06e      	beq.n	89b48 <__ssprint_r+0xec>
   89a6a:	6817      	ldr	r7, [r2, #0]
   89a6c:	4680      	mov	r8, r0
   89a6e:	460c      	mov	r4, r1
   89a70:	6808      	ldr	r0, [r1, #0]
   89a72:	688d      	ldr	r5, [r1, #8]
   89a74:	3708      	adds	r7, #8
   89a76:	e044      	b.n	89b02 <__ssprint_r+0xa6>
   89a78:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   89a7c:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   89a80:	d02e      	beq.n	89ae0 <__ssprint_r+0x84>
   89a82:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   89a86:	1a45      	subs	r5, r0, r1
   89a88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   89a8c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   89a90:	19aa      	adds	r2, r5, r6
   89a92:	ea4f 0a63 	mov.w	sl, r3, asr #1
   89a96:	1c53      	adds	r3, r2, #1
   89a98:	4553      	cmp	r3, sl
   89a9a:	4652      	mov	r2, sl
   89a9c:	bf84      	itt	hi
   89a9e:	469a      	movhi	sl, r3
   89aa0:	4652      	movhi	r2, sl
   89aa2:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   89aa6:	d036      	beq.n	89b16 <__ssprint_r+0xba>
   89aa8:	4611      	mov	r1, r2
   89aaa:	4640      	mov	r0, r8
   89aac:	f7ff f8e8 	bl	88c80 <_malloc_r>
   89ab0:	2800      	cmp	r0, #0
   89ab2:	d03a      	beq.n	89b2a <__ssprint_r+0xce>
   89ab4:	462a      	mov	r2, r5
   89ab6:	6921      	ldr	r1, [r4, #16]
   89ab8:	9001      	str	r0, [sp, #4]
   89aba:	f7fc f8c5 	bl	85c48 <memcpy>
   89abe:	89a2      	ldrh	r2, [r4, #12]
   89ac0:	9b01      	ldr	r3, [sp, #4]
   89ac2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   89ac6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   89aca:	81a2      	strh	r2, [r4, #12]
   89acc:	1958      	adds	r0, r3, r5
   89ace:	ebaa 0505 	sub.w	r5, sl, r5
   89ad2:	60a5      	str	r5, [r4, #8]
   89ad4:	f8c4 a014 	str.w	sl, [r4, #20]
   89ad8:	4635      	mov	r5, r6
   89ada:	46b2      	mov	sl, r6
   89adc:	6123      	str	r3, [r4, #16]
   89ade:	6020      	str	r0, [r4, #0]
   89ae0:	4659      	mov	r1, fp
   89ae2:	4652      	mov	r2, sl
   89ae4:	f000 f910 	bl	89d08 <memmove>
   89ae8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   89aec:	68a1      	ldr	r1, [r4, #8]
   89aee:	6820      	ldr	r0, [r4, #0]
   89af0:	1b4d      	subs	r5, r1, r5
   89af2:	4450      	add	r0, sl
   89af4:	1b9e      	subs	r6, r3, r6
   89af6:	60a5      	str	r5, [r4, #8]
   89af8:	6020      	str	r0, [r4, #0]
   89afa:	f8c9 6008 	str.w	r6, [r9, #8]
   89afe:	b31e      	cbz	r6, 89b48 <__ssprint_r+0xec>
   89b00:	3708      	adds	r7, #8
   89b02:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   89b06:	2e00      	cmp	r6, #0
   89b08:	d0fa      	beq.n	89b00 <__ssprint_r+0xa4>
   89b0a:	42b5      	cmp	r5, r6
   89b0c:	46aa      	mov	sl, r5
   89b0e:	d9b3      	bls.n	89a78 <__ssprint_r+0x1c>
   89b10:	4635      	mov	r5, r6
   89b12:	46b2      	mov	sl, r6
   89b14:	e7e4      	b.n	89ae0 <__ssprint_r+0x84>
   89b16:	4640      	mov	r0, r8
   89b18:	f000 f972 	bl	89e00 <_realloc_r>
   89b1c:	4603      	mov	r3, r0
   89b1e:	2800      	cmp	r0, #0
   89b20:	d1d4      	bne.n	89acc <__ssprint_r+0x70>
   89b22:	4640      	mov	r0, r8
   89b24:	6921      	ldr	r1, [r4, #16]
   89b26:	f7fe ff9f 	bl	88a68 <_free_r>
   89b2a:	230c      	movs	r3, #12
   89b2c:	2200      	movs	r2, #0
   89b2e:	f04f 30ff 	mov.w	r0, #4294967295
   89b32:	f8c8 3000 	str.w	r3, [r8]
   89b36:	89a3      	ldrh	r3, [r4, #12]
   89b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89b3c:	81a3      	strh	r3, [r4, #12]
   89b3e:	e9c9 2201 	strd	r2, r2, [r9, #4]
   89b42:	b003      	add	sp, #12
   89b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89b48:	2300      	movs	r3, #0
   89b4a:	4618      	mov	r0, r3
   89b4c:	f8c9 3004 	str.w	r3, [r9, #4]
   89b50:	b003      	add	sp, #12
   89b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89b56:	bf00      	nop

00089b58 <__register_exitproc>:
   89b58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89b5c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 89bdc <__register_exitproc+0x84>
   89b60:	4606      	mov	r6, r0
   89b62:	f8da 0000 	ldr.w	r0, [sl]
   89b66:	4698      	mov	r8, r3
   89b68:	460f      	mov	r7, r1
   89b6a:	4691      	mov	r9, r2
   89b6c:	f7ff f884 	bl	88c78 <__retarget_lock_acquire_recursive>
   89b70:	4b1b      	ldr	r3, [pc, #108]	; (89be0 <__register_exitproc+0x88>)
   89b72:	681b      	ldr	r3, [r3, #0]
   89b74:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   89b78:	b324      	cbz	r4, 89bc4 <__register_exitproc+0x6c>
   89b7a:	6865      	ldr	r5, [r4, #4]
   89b7c:	2d1f      	cmp	r5, #31
   89b7e:	dc26      	bgt.n	89bce <__register_exitproc+0x76>
   89b80:	b95e      	cbnz	r6, 89b9a <__register_exitproc+0x42>
   89b82:	1c6b      	adds	r3, r5, #1
   89b84:	3502      	adds	r5, #2
   89b86:	f8da 0000 	ldr.w	r0, [sl]
   89b8a:	6063      	str	r3, [r4, #4]
   89b8c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   89b90:	f7ff f874 	bl	88c7c <__retarget_lock_release_recursive>
   89b94:	2000      	movs	r0, #0
   89b96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89b9a:	2301      	movs	r3, #1
   89b9c:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   89ba0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   89ba4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   89ba8:	40ab      	lsls	r3, r5
   89baa:	431a      	orrs	r2, r3
   89bac:	2e02      	cmp	r6, #2
   89bae:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   89bb2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   89bb6:	d1e4      	bne.n	89b82 <__register_exitproc+0x2a>
   89bb8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   89bbc:	4313      	orrs	r3, r2
   89bbe:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   89bc2:	e7de      	b.n	89b82 <__register_exitproc+0x2a>
   89bc4:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   89bc8:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   89bcc:	e7d5      	b.n	89b7a <__register_exitproc+0x22>
   89bce:	f8da 0000 	ldr.w	r0, [sl]
   89bd2:	f7ff f853 	bl	88c7c <__retarget_lock_release_recursive>
   89bd6:	f04f 30ff 	mov.w	r0, #4294967295
   89bda:	e7dc      	b.n	89b96 <__register_exitproc+0x3e>
   89bdc:	20070f60 	.word	0x20070f60
   89be0:	0008c990 	.word	0x0008c990

00089be4 <__assert_func>:
   89be4:	4614      	mov	r4, r2
   89be6:	b500      	push	{lr}
   89be8:	461a      	mov	r2, r3
   89bea:	4b0a      	ldr	r3, [pc, #40]	; (89c14 <__assert_func+0x30>)
   89bec:	460d      	mov	r5, r1
   89bee:	681b      	ldr	r3, [r3, #0]
   89bf0:	b085      	sub	sp, #20
   89bf2:	68de      	ldr	r6, [r3, #12]
   89bf4:	4603      	mov	r3, r0
   89bf6:	b14c      	cbz	r4, 89c0c <__assert_func+0x28>
   89bf8:	4907      	ldr	r1, [pc, #28]	; (89c18 <__assert_func+0x34>)
   89bfa:	9101      	str	r1, [sp, #4]
   89bfc:	4630      	mov	r0, r6
   89bfe:	4907      	ldr	r1, [pc, #28]	; (89c1c <__assert_func+0x38>)
   89c00:	9402      	str	r4, [sp, #8]
   89c02:	9500      	str	r5, [sp, #0]
   89c04:	f000 f850 	bl	89ca8 <fiprintf>
   89c08:	f001 faaa 	bl	8b160 <abort>
   89c0c:	4904      	ldr	r1, [pc, #16]	; (89c20 <__assert_func+0x3c>)
   89c0e:	460c      	mov	r4, r1
   89c10:	e7f3      	b.n	89bfa <__assert_func+0x16>
   89c12:	bf00      	nop
   89c14:	20070b30 	.word	0x20070b30
   89c18:	0008cc1c 	.word	0x0008cc1c
   89c1c:	0008cc2c 	.word	0x0008cc2c
   89c20:	0008cc28 	.word	0x0008cc28

00089c24 <_calloc_r>:
   89c24:	b538      	push	{r3, r4, r5, lr}
   89c26:	fba1 1402 	umull	r1, r4, r1, r2
   89c2a:	bb84      	cbnz	r4, 89c8e <_calloc_r+0x6a>
   89c2c:	f7ff f828 	bl	88c80 <_malloc_r>
   89c30:	4605      	mov	r5, r0
   89c32:	b1d8      	cbz	r0, 89c6c <_calloc_r+0x48>
   89c34:	f850 2c04 	ldr.w	r2, [r0, #-4]
   89c38:	f022 0203 	bic.w	r2, r2, #3
   89c3c:	3a04      	subs	r2, #4
   89c3e:	2a24      	cmp	r2, #36	; 0x24
   89c40:	d816      	bhi.n	89c70 <_calloc_r+0x4c>
   89c42:	2a13      	cmp	r2, #19
   89c44:	d919      	bls.n	89c7a <_calloc_r+0x56>
   89c46:	2a1b      	cmp	r2, #27
   89c48:	e9c0 4400 	strd	r4, r4, [r0]
   89c4c:	d91c      	bls.n	89c88 <_calloc_r+0x64>
   89c4e:	2300      	movs	r3, #0
   89c50:	2a24      	cmp	r2, #36	; 0x24
   89c52:	bf14      	ite	ne
   89c54:	f100 0210 	addne.w	r2, r0, #16
   89c58:	f100 0218 	addeq.w	r2, r0, #24
   89c5c:	e9c0 4402 	strd	r4, r4, [r0, #8]
   89c60:	bf04      	itt	eq
   89c62:	6104      	streq	r4, [r0, #16]
   89c64:	6144      	streq	r4, [r0, #20]
   89c66:	e9c2 3300 	strd	r3, r3, [r2]
   89c6a:	6093      	str	r3, [r2, #8]
   89c6c:	4628      	mov	r0, r5
   89c6e:	bd38      	pop	{r3, r4, r5, pc}
   89c70:	4621      	mov	r1, r4
   89c72:	f7fc f85f 	bl	85d34 <memset>
   89c76:	4628      	mov	r0, r5
   89c78:	bd38      	pop	{r3, r4, r5, pc}
   89c7a:	4602      	mov	r2, r0
   89c7c:	2300      	movs	r3, #0
   89c7e:	4628      	mov	r0, r5
   89c80:	e9c2 3300 	strd	r3, r3, [r2]
   89c84:	6093      	str	r3, [r2, #8]
   89c86:	bd38      	pop	{r3, r4, r5, pc}
   89c88:	f100 0208 	add.w	r2, r0, #8
   89c8c:	e7f6      	b.n	89c7c <_calloc_r+0x58>
   89c8e:	f000 f805 	bl	89c9c <__errno>
   89c92:	230c      	movs	r3, #12
   89c94:	2500      	movs	r5, #0
   89c96:	6003      	str	r3, [r0, #0]
   89c98:	e7e8      	b.n	89c6c <_calloc_r+0x48>
   89c9a:	bf00      	nop

00089c9c <__errno>:
   89c9c:	4b01      	ldr	r3, [pc, #4]	; (89ca4 <__errno+0x8>)
   89c9e:	6818      	ldr	r0, [r3, #0]
   89ca0:	4770      	bx	lr
   89ca2:	bf00      	nop
   89ca4:	20070b30 	.word	0x20070b30

00089ca8 <fiprintf>:
   89ca8:	b40e      	push	{r1, r2, r3}
   89caa:	b500      	push	{lr}
   89cac:	4a07      	ldr	r2, [pc, #28]	; (89ccc <fiprintf+0x24>)
   89cae:	b082      	sub	sp, #8
   89cb0:	ab03      	add	r3, sp, #12
   89cb2:	4601      	mov	r1, r0
   89cb4:	6810      	ldr	r0, [r2, #0]
   89cb6:	f853 2b04 	ldr.w	r2, [r3], #4
   89cba:	9301      	str	r3, [sp, #4]
   89cbc:	f000 faca 	bl	8a254 <_vfiprintf_r>
   89cc0:	b002      	add	sp, #8
   89cc2:	f85d eb04 	ldr.w	lr, [sp], #4
   89cc6:	b003      	add	sp, #12
   89cc8:	4770      	bx	lr
   89cca:	bf00      	nop
   89ccc:	20070b30 	.word	0x20070b30

00089cd0 <__locale_mb_cur_max>:
   89cd0:	4b01      	ldr	r3, [pc, #4]	; (89cd8 <__locale_mb_cur_max+0x8>)
   89cd2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   89cd6:	4770      	bx	lr
   89cd8:	20071374 	.word	0x20071374

00089cdc <__ascii_mbtowc>:
   89cdc:	b082      	sub	sp, #8
   89cde:	b149      	cbz	r1, 89cf4 <__ascii_mbtowc+0x18>
   89ce0:	b15a      	cbz	r2, 89cfa <__ascii_mbtowc+0x1e>
   89ce2:	b16b      	cbz	r3, 89d00 <__ascii_mbtowc+0x24>
   89ce4:	7813      	ldrb	r3, [r2, #0]
   89ce6:	600b      	str	r3, [r1, #0]
   89ce8:	7812      	ldrb	r2, [r2, #0]
   89cea:	1e10      	subs	r0, r2, #0
   89cec:	bf18      	it	ne
   89cee:	2001      	movne	r0, #1
   89cf0:	b002      	add	sp, #8
   89cf2:	4770      	bx	lr
   89cf4:	a901      	add	r1, sp, #4
   89cf6:	2a00      	cmp	r2, #0
   89cf8:	d1f3      	bne.n	89ce2 <__ascii_mbtowc+0x6>
   89cfa:	4610      	mov	r0, r2
   89cfc:	b002      	add	sp, #8
   89cfe:	4770      	bx	lr
   89d00:	f06f 0001 	mvn.w	r0, #1
   89d04:	e7f4      	b.n	89cf0 <__ascii_mbtowc+0x14>
   89d06:	bf00      	nop

00089d08 <memmove>:
   89d08:	4288      	cmp	r0, r1
   89d0a:	d90d      	bls.n	89d28 <memmove+0x20>
   89d0c:	188b      	adds	r3, r1, r2
   89d0e:	4283      	cmp	r3, r0
   89d10:	d90a      	bls.n	89d28 <memmove+0x20>
   89d12:	eb00 0c02 	add.w	ip, r0, r2
   89d16:	b1ba      	cbz	r2, 89d48 <memmove+0x40>
   89d18:	4662      	mov	r2, ip
   89d1a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   89d1e:	4299      	cmp	r1, r3
   89d20:	f802 cd01 	strb.w	ip, [r2, #-1]!
   89d24:	d1f9      	bne.n	89d1a <memmove+0x12>
   89d26:	4770      	bx	lr
   89d28:	2a0f      	cmp	r2, #15
   89d2a:	d80e      	bhi.n	89d4a <memmove+0x42>
   89d2c:	4603      	mov	r3, r0
   89d2e:	f102 3cff 	add.w	ip, r2, #4294967295
   89d32:	b14a      	cbz	r2, 89d48 <memmove+0x40>
   89d34:	f10c 0c01 	add.w	ip, ip, #1
   89d38:	3b01      	subs	r3, #1
   89d3a:	448c      	add	ip, r1
   89d3c:	f811 2b01 	ldrb.w	r2, [r1], #1
   89d40:	4561      	cmp	r1, ip
   89d42:	f803 2f01 	strb.w	r2, [r3, #1]!
   89d46:	d1f9      	bne.n	89d3c <memmove+0x34>
   89d48:	4770      	bx	lr
   89d4a:	ea40 0301 	orr.w	r3, r0, r1
   89d4e:	079b      	lsls	r3, r3, #30
   89d50:	d14f      	bne.n	89df2 <memmove+0xea>
   89d52:	f1a2 0310 	sub.w	r3, r2, #16
   89d56:	b570      	push	{r4, r5, r6, lr}
   89d58:	f101 0c20 	add.w	ip, r1, #32
   89d5c:	f023 050f 	bic.w	r5, r3, #15
   89d60:	f101 0e10 	add.w	lr, r1, #16
   89d64:	f100 0410 	add.w	r4, r0, #16
   89d68:	44ac      	add	ip, r5
   89d6a:	091b      	lsrs	r3, r3, #4
   89d6c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   89d70:	f10e 0e10 	add.w	lr, lr, #16
   89d74:	f844 5c10 	str.w	r5, [r4, #-16]
   89d78:	f85e 5c1c 	ldr.w	r5, [lr, #-28]
   89d7c:	3410      	adds	r4, #16
   89d7e:	f844 5c1c 	str.w	r5, [r4, #-28]
   89d82:	f85e 5c18 	ldr.w	r5, [lr, #-24]
   89d86:	f844 5c18 	str.w	r5, [r4, #-24]
   89d8a:	f85e 5c14 	ldr.w	r5, [lr, #-20]
   89d8e:	45e6      	cmp	lr, ip
   89d90:	f844 5c14 	str.w	r5, [r4, #-20]
   89d94:	d1ea      	bne.n	89d6c <memmove+0x64>
   89d96:	3301      	adds	r3, #1
   89d98:	f012 0f0c 	tst.w	r2, #12
   89d9c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   89da0:	f002 040f 	and.w	r4, r2, #15
   89da4:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   89da8:	d027      	beq.n	89dfa <memmove+0xf2>
   89daa:	468e      	mov	lr, r1
   89dac:	3c04      	subs	r4, #4
   89dae:	f024 0603 	bic.w	r6, r4, #3
   89db2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   89db6:	441e      	add	r6, r3
   89db8:	1f1c      	subs	r4, r3, #4
   89dba:	f85e 5b04 	ldr.w	r5, [lr], #4
   89dbe:	f844 5f04 	str.w	r5, [r4, #4]!
   89dc2:	42b4      	cmp	r4, r6
   89dc4:	d1f9      	bne.n	89dba <memmove+0xb2>
   89dc6:	f10c 0401 	add.w	r4, ip, #1
   89dca:	f002 0203 	and.w	r2, r2, #3
   89dce:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   89dd2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   89dd6:	f102 3cff 	add.w	ip, r2, #4294967295
   89dda:	b14a      	cbz	r2, 89df0 <memmove+0xe8>
   89ddc:	f10c 0c01 	add.w	ip, ip, #1
   89de0:	3b01      	subs	r3, #1
   89de2:	448c      	add	ip, r1
   89de4:	f811 2b01 	ldrb.w	r2, [r1], #1
   89de8:	4561      	cmp	r1, ip
   89dea:	f803 2f01 	strb.w	r2, [r3, #1]!
   89dee:	d1f9      	bne.n	89de4 <memmove+0xdc>
   89df0:	bd70      	pop	{r4, r5, r6, pc}
   89df2:	4603      	mov	r3, r0
   89df4:	f102 3cff 	add.w	ip, r2, #4294967295
   89df8:	e79c      	b.n	89d34 <memmove+0x2c>
   89dfa:	4622      	mov	r2, r4
   89dfc:	e7eb      	b.n	89dd6 <memmove+0xce>
   89dfe:	bf00      	nop

00089e00 <_realloc_r>:
   89e00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89e04:	4616      	mov	r6, r2
   89e06:	2900      	cmp	r1, #0
   89e08:	f000 8098 	beq.w	89f3c <_realloc_r+0x13c>
   89e0c:	f106 050b 	add.w	r5, r6, #11
   89e10:	4680      	mov	r8, r0
   89e12:	460c      	mov	r4, r1
   89e14:	f7ff fa28 	bl	89268 <__malloc_lock>
   89e18:	2d16      	cmp	r5, #22
   89e1a:	d85d      	bhi.n	89ed8 <_realloc_r+0xd8>
   89e1c:	2510      	movs	r5, #16
   89e1e:	462a      	mov	r2, r5
   89e20:	42ae      	cmp	r6, r5
   89e22:	d85e      	bhi.n	89ee2 <_realloc_r+0xe2>
   89e24:	f854 1c04 	ldr.w	r1, [r4, #-4]
   89e28:	f1a4 0908 	sub.w	r9, r4, #8
   89e2c:	f021 0703 	bic.w	r7, r1, #3
   89e30:	4297      	cmp	r7, r2
   89e32:	da62      	bge.n	89efa <_realloc_r+0xfa>
   89e34:	4bbc      	ldr	r3, [pc, #752]	; (8a128 <_realloc_r+0x328>)
   89e36:	eb09 0007 	add.w	r0, r9, r7
   89e3a:	f8d3 c008 	ldr.w	ip, [r3, #8]
   89e3e:	4584      	cmp	ip, r0
   89e40:	f000 8097 	beq.w	89f72 <_realloc_r+0x172>
   89e44:	f8d0 c004 	ldr.w	ip, [r0, #4]
   89e48:	f02c 0301 	bic.w	r3, ip, #1
   89e4c:	4403      	add	r3, r0
   89e4e:	685b      	ldr	r3, [r3, #4]
   89e50:	07db      	lsls	r3, r3, #31
   89e52:	d468      	bmi.n	89f26 <_realloc_r+0x126>
   89e54:	f02c 0c03 	bic.w	ip, ip, #3
   89e58:	eb07 030c 	add.w	r3, r7, ip
   89e5c:	4293      	cmp	r3, r2
   89e5e:	da47      	bge.n	89ef0 <_realloc_r+0xf0>
   89e60:	07cb      	lsls	r3, r1, #31
   89e62:	d410      	bmi.n	89e86 <_realloc_r+0x86>
   89e64:	f854 3c08 	ldr.w	r3, [r4, #-8]
   89e68:	eba9 0a03 	sub.w	sl, r9, r3
   89e6c:	f8da 3004 	ldr.w	r3, [sl, #4]
   89e70:	f023 0103 	bic.w	r1, r3, #3
   89e74:	448c      	add	ip, r1
   89e76:	44bc      	add	ip, r7
   89e78:	4594      	cmp	ip, r2
   89e7a:	f280 8111 	bge.w	8a0a0 <_realloc_r+0x2a0>
   89e7e:	187b      	adds	r3, r7, r1
   89e80:	4293      	cmp	r3, r2
   89e82:	f280 80e8 	bge.w	8a056 <_realloc_r+0x256>
   89e86:	4631      	mov	r1, r6
   89e88:	4640      	mov	r0, r8
   89e8a:	f7fe fef9 	bl	88c80 <_malloc_r>
   89e8e:	4606      	mov	r6, r0
   89e90:	b1e0      	cbz	r0, 89ecc <_realloc_r+0xcc>
   89e92:	f854 3c04 	ldr.w	r3, [r4, #-4]
   89e96:	f1a0 0208 	sub.w	r2, r0, #8
   89e9a:	f023 0301 	bic.w	r3, r3, #1
   89e9e:	444b      	add	r3, r9
   89ea0:	4293      	cmp	r3, r2
   89ea2:	f000 80d2 	beq.w	8a04a <_realloc_r+0x24a>
   89ea6:	1f3a      	subs	r2, r7, #4
   89ea8:	2a24      	cmp	r2, #36	; 0x24
   89eaa:	f200 80f5 	bhi.w	8a098 <_realloc_r+0x298>
   89eae:	2a13      	cmp	r2, #19
   89eb0:	f200 80ac 	bhi.w	8a00c <_realloc_r+0x20c>
   89eb4:	4603      	mov	r3, r0
   89eb6:	4622      	mov	r2, r4
   89eb8:	6811      	ldr	r1, [r2, #0]
   89eba:	6019      	str	r1, [r3, #0]
   89ebc:	6851      	ldr	r1, [r2, #4]
   89ebe:	6059      	str	r1, [r3, #4]
   89ec0:	6892      	ldr	r2, [r2, #8]
   89ec2:	609a      	str	r2, [r3, #8]
   89ec4:	4621      	mov	r1, r4
   89ec6:	4640      	mov	r0, r8
   89ec8:	f7fe fdce 	bl	88a68 <_free_r>
   89ecc:	4640      	mov	r0, r8
   89ece:	f7ff f9d1 	bl	89274 <__malloc_unlock>
   89ed2:	4630      	mov	r0, r6
   89ed4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89ed8:	f025 0507 	bic.w	r5, r5, #7
   89edc:	2d00      	cmp	r5, #0
   89ede:	462a      	mov	r2, r5
   89ee0:	da9e      	bge.n	89e20 <_realloc_r+0x20>
   89ee2:	230c      	movs	r3, #12
   89ee4:	2600      	movs	r6, #0
   89ee6:	f8c8 3000 	str.w	r3, [r8]
   89eea:	4630      	mov	r0, r6
   89eec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89ef0:	461f      	mov	r7, r3
   89ef2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   89ef6:	60d3      	str	r3, [r2, #12]
   89ef8:	609a      	str	r2, [r3, #8]
   89efa:	1b7b      	subs	r3, r7, r5
   89efc:	2b0f      	cmp	r3, #15
   89efe:	d822      	bhi.n	89f46 <_realloc_r+0x146>
   89f00:	f8d9 3004 	ldr.w	r3, [r9, #4]
   89f04:	f003 0301 	and.w	r3, r3, #1
   89f08:	433b      	orrs	r3, r7
   89f0a:	f8c9 3004 	str.w	r3, [r9, #4]
   89f0e:	444f      	add	r7, r9
   89f10:	687b      	ldr	r3, [r7, #4]
   89f12:	f043 0301 	orr.w	r3, r3, #1
   89f16:	607b      	str	r3, [r7, #4]
   89f18:	4626      	mov	r6, r4
   89f1a:	4640      	mov	r0, r8
   89f1c:	f7ff f9aa 	bl	89274 <__malloc_unlock>
   89f20:	4630      	mov	r0, r6
   89f22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89f26:	07c9      	lsls	r1, r1, #31
   89f28:	d4ad      	bmi.n	89e86 <_realloc_r+0x86>
   89f2a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   89f2e:	eba9 0a03 	sub.w	sl, r9, r3
   89f32:	f8da 1004 	ldr.w	r1, [sl, #4]
   89f36:	f021 0103 	bic.w	r1, r1, #3
   89f3a:	e7a0      	b.n	89e7e <_realloc_r+0x7e>
   89f3c:	4611      	mov	r1, r2
   89f3e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89f42:	f7fe be9d 	b.w	88c80 <_malloc_r>
   89f46:	f8d9 1004 	ldr.w	r1, [r9, #4]
   89f4a:	f043 0301 	orr.w	r3, r3, #1
   89f4e:	f001 0101 	and.w	r1, r1, #1
   89f52:	4329      	orrs	r1, r5
   89f54:	f8c9 1004 	str.w	r1, [r9, #4]
   89f58:	eb09 0105 	add.w	r1, r9, r5
   89f5c:	604b      	str	r3, [r1, #4]
   89f5e:	444f      	add	r7, r9
   89f60:	687b      	ldr	r3, [r7, #4]
   89f62:	4640      	mov	r0, r8
   89f64:	f043 0301 	orr.w	r3, r3, #1
   89f68:	3108      	adds	r1, #8
   89f6a:	607b      	str	r3, [r7, #4]
   89f6c:	f7fe fd7c 	bl	88a68 <_free_r>
   89f70:	e7d2      	b.n	89f18 <_realloc_r+0x118>
   89f72:	f8dc 0004 	ldr.w	r0, [ip, #4]
   89f76:	f020 0b03 	bic.w	fp, r0, #3
   89f7a:	eb07 0c0b 	add.w	ip, r7, fp
   89f7e:	f105 0010 	add.w	r0, r5, #16
   89f82:	4584      	cmp	ip, r0
   89f84:	da4d      	bge.n	8a022 <_realloc_r+0x222>
   89f86:	07c9      	lsls	r1, r1, #31
   89f88:	f53f af7d 	bmi.w	89e86 <_realloc_r+0x86>
   89f8c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   89f90:	eba9 0a01 	sub.w	sl, r9, r1
   89f94:	f8da 1004 	ldr.w	r1, [sl, #4]
   89f98:	f021 0103 	bic.w	r1, r1, #3
   89f9c:	448b      	add	fp, r1
   89f9e:	44bb      	add	fp, r7
   89fa0:	4558      	cmp	r0, fp
   89fa2:	f73f af6c 	bgt.w	89e7e <_realloc_r+0x7e>
   89fa6:	4656      	mov	r6, sl
   89fa8:	f8da 100c 	ldr.w	r1, [sl, #12]
   89fac:	f856 0f08 	ldr.w	r0, [r6, #8]!
   89fb0:	1f3a      	subs	r2, r7, #4
   89fb2:	2a24      	cmp	r2, #36	; 0x24
   89fb4:	60c1      	str	r1, [r0, #12]
   89fb6:	6088      	str	r0, [r1, #8]
   89fb8:	f200 80db 	bhi.w	8a172 <_realloc_r+0x372>
   89fbc:	2a13      	cmp	r2, #19
   89fbe:	f240 80d6 	bls.w	8a16e <_realloc_r+0x36e>
   89fc2:	6821      	ldr	r1, [r4, #0]
   89fc4:	2a1b      	cmp	r2, #27
   89fc6:	f8ca 1008 	str.w	r1, [sl, #8]
   89fca:	6861      	ldr	r1, [r4, #4]
   89fcc:	f8ca 100c 	str.w	r1, [sl, #12]
   89fd0:	f200 80e0 	bhi.w	8a194 <_realloc_r+0x394>
   89fd4:	3408      	adds	r4, #8
   89fd6:	f10a 0210 	add.w	r2, sl, #16
   89fda:	6821      	ldr	r1, [r4, #0]
   89fdc:	6011      	str	r1, [r2, #0]
   89fde:	6861      	ldr	r1, [r4, #4]
   89fe0:	6051      	str	r1, [r2, #4]
   89fe2:	68a1      	ldr	r1, [r4, #8]
   89fe4:	6091      	str	r1, [r2, #8]
   89fe6:	ebab 0205 	sub.w	r2, fp, r5
   89fea:	eb0a 0105 	add.w	r1, sl, r5
   89fee:	f042 0201 	orr.w	r2, r2, #1
   89ff2:	6099      	str	r1, [r3, #8]
   89ff4:	604a      	str	r2, [r1, #4]
   89ff6:	f8da 3004 	ldr.w	r3, [sl, #4]
   89ffa:	4640      	mov	r0, r8
   89ffc:	f003 0301 	and.w	r3, r3, #1
   8a000:	431d      	orrs	r5, r3
   8a002:	f8ca 5004 	str.w	r5, [sl, #4]
   8a006:	f7ff f935 	bl	89274 <__malloc_unlock>
   8a00a:	e76e      	b.n	89eea <_realloc_r+0xea>
   8a00c:	6823      	ldr	r3, [r4, #0]
   8a00e:	2a1b      	cmp	r2, #27
   8a010:	6003      	str	r3, [r0, #0]
   8a012:	6863      	ldr	r3, [r4, #4]
   8a014:	6043      	str	r3, [r0, #4]
   8a016:	d868      	bhi.n	8a0ea <_realloc_r+0x2ea>
   8a018:	f104 0208 	add.w	r2, r4, #8
   8a01c:	f100 0308 	add.w	r3, r0, #8
   8a020:	e74a      	b.n	89eb8 <_realloc_r+0xb8>
   8a022:	eb09 0205 	add.w	r2, r9, r5
   8a026:	ebac 0c05 	sub.w	ip, ip, r5
   8a02a:	609a      	str	r2, [r3, #8]
   8a02c:	f04c 0301 	orr.w	r3, ip, #1
   8a030:	6053      	str	r3, [r2, #4]
   8a032:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a036:	4640      	mov	r0, r8
   8a038:	f003 0301 	and.w	r3, r3, #1
   8a03c:	431d      	orrs	r5, r3
   8a03e:	f844 5c04 	str.w	r5, [r4, #-4]
   8a042:	f7ff f917 	bl	89274 <__malloc_unlock>
   8a046:	4626      	mov	r6, r4
   8a048:	e74f      	b.n	89eea <_realloc_r+0xea>
   8a04a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8a04e:	f023 0303 	bic.w	r3, r3, #3
   8a052:	441f      	add	r7, r3
   8a054:	e751      	b.n	89efa <_realloc_r+0xfa>
   8a056:	4656      	mov	r6, sl
   8a058:	f8da 100c 	ldr.w	r1, [sl, #12]
   8a05c:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8a060:	1f3a      	subs	r2, r7, #4
   8a062:	2a24      	cmp	r2, #36	; 0x24
   8a064:	60c1      	str	r1, [r0, #12]
   8a066:	6088      	str	r0, [r1, #8]
   8a068:	d84c      	bhi.n	8a104 <_realloc_r+0x304>
   8a06a:	2a13      	cmp	r2, #19
   8a06c:	d948      	bls.n	8a100 <_realloc_r+0x300>
   8a06e:	6821      	ldr	r1, [r4, #0]
   8a070:	2a1b      	cmp	r2, #27
   8a072:	f8ca 1008 	str.w	r1, [sl, #8]
   8a076:	6861      	ldr	r1, [r4, #4]
   8a078:	f8ca 100c 	str.w	r1, [sl, #12]
   8a07c:	d856      	bhi.n	8a12c <_realloc_r+0x32c>
   8a07e:	3408      	adds	r4, #8
   8a080:	f10a 0210 	add.w	r2, sl, #16
   8a084:	461f      	mov	r7, r3
   8a086:	6823      	ldr	r3, [r4, #0]
   8a088:	46d1      	mov	r9, sl
   8a08a:	6013      	str	r3, [r2, #0]
   8a08c:	6863      	ldr	r3, [r4, #4]
   8a08e:	6053      	str	r3, [r2, #4]
   8a090:	68a3      	ldr	r3, [r4, #8]
   8a092:	4634      	mov	r4, r6
   8a094:	6093      	str	r3, [r2, #8]
   8a096:	e730      	b.n	89efa <_realloc_r+0xfa>
   8a098:	4621      	mov	r1, r4
   8a09a:	f7ff fe35 	bl	89d08 <memmove>
   8a09e:	e711      	b.n	89ec4 <_realloc_r+0xc4>
   8a0a0:	4656      	mov	r6, sl
   8a0a2:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8a0a6:	60cb      	str	r3, [r1, #12]
   8a0a8:	6099      	str	r1, [r3, #8]
   8a0aa:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8a0ae:	f8da 300c 	ldr.w	r3, [sl, #12]
   8a0b2:	1f3a      	subs	r2, r7, #4
   8a0b4:	2a24      	cmp	r2, #36	; 0x24
   8a0b6:	60cb      	str	r3, [r1, #12]
   8a0b8:	6099      	str	r1, [r3, #8]
   8a0ba:	d82d      	bhi.n	8a118 <_realloc_r+0x318>
   8a0bc:	2a13      	cmp	r2, #19
   8a0be:	d929      	bls.n	8a114 <_realloc_r+0x314>
   8a0c0:	6823      	ldr	r3, [r4, #0]
   8a0c2:	2a1b      	cmp	r2, #27
   8a0c4:	f8ca 3008 	str.w	r3, [sl, #8]
   8a0c8:	6863      	ldr	r3, [r4, #4]
   8a0ca:	f8ca 300c 	str.w	r3, [sl, #12]
   8a0ce:	d842      	bhi.n	8a156 <_realloc_r+0x356>
   8a0d0:	3408      	adds	r4, #8
   8a0d2:	f10a 0310 	add.w	r3, sl, #16
   8a0d6:	6822      	ldr	r2, [r4, #0]
   8a0d8:	4667      	mov	r7, ip
   8a0da:	601a      	str	r2, [r3, #0]
   8a0dc:	6862      	ldr	r2, [r4, #4]
   8a0de:	46d1      	mov	r9, sl
   8a0e0:	605a      	str	r2, [r3, #4]
   8a0e2:	68a2      	ldr	r2, [r4, #8]
   8a0e4:	4634      	mov	r4, r6
   8a0e6:	609a      	str	r2, [r3, #8]
   8a0e8:	e707      	b.n	89efa <_realloc_r+0xfa>
   8a0ea:	68a3      	ldr	r3, [r4, #8]
   8a0ec:	2a24      	cmp	r2, #36	; 0x24
   8a0ee:	6083      	str	r3, [r0, #8]
   8a0f0:	68e3      	ldr	r3, [r4, #12]
   8a0f2:	60c3      	str	r3, [r0, #12]
   8a0f4:	d026      	beq.n	8a144 <_realloc_r+0x344>
   8a0f6:	f104 0210 	add.w	r2, r4, #16
   8a0fa:	f100 0310 	add.w	r3, r0, #16
   8a0fe:	e6db      	b.n	89eb8 <_realloc_r+0xb8>
   8a100:	4632      	mov	r2, r6
   8a102:	e7bf      	b.n	8a084 <_realloc_r+0x284>
   8a104:	4621      	mov	r1, r4
   8a106:	4630      	mov	r0, r6
   8a108:	461f      	mov	r7, r3
   8a10a:	46d1      	mov	r9, sl
   8a10c:	f7ff fdfc 	bl	89d08 <memmove>
   8a110:	4634      	mov	r4, r6
   8a112:	e6f2      	b.n	89efa <_realloc_r+0xfa>
   8a114:	4633      	mov	r3, r6
   8a116:	e7de      	b.n	8a0d6 <_realloc_r+0x2d6>
   8a118:	4621      	mov	r1, r4
   8a11a:	4630      	mov	r0, r6
   8a11c:	4667      	mov	r7, ip
   8a11e:	46d1      	mov	r9, sl
   8a120:	f7ff fdf2 	bl	89d08 <memmove>
   8a124:	4634      	mov	r4, r6
   8a126:	e6e8      	b.n	89efa <_realloc_r+0xfa>
   8a128:	20070f64 	.word	0x20070f64
   8a12c:	68a1      	ldr	r1, [r4, #8]
   8a12e:	2a24      	cmp	r2, #36	; 0x24
   8a130:	f8ca 1010 	str.w	r1, [sl, #16]
   8a134:	68e1      	ldr	r1, [r4, #12]
   8a136:	f8ca 1014 	str.w	r1, [sl, #20]
   8a13a:	d020      	beq.n	8a17e <_realloc_r+0x37e>
   8a13c:	3410      	adds	r4, #16
   8a13e:	f10a 0218 	add.w	r2, sl, #24
   8a142:	e79f      	b.n	8a084 <_realloc_r+0x284>
   8a144:	6923      	ldr	r3, [r4, #16]
   8a146:	f104 0218 	add.w	r2, r4, #24
   8a14a:	6103      	str	r3, [r0, #16]
   8a14c:	6963      	ldr	r3, [r4, #20]
   8a14e:	6143      	str	r3, [r0, #20]
   8a150:	f100 0318 	add.w	r3, r0, #24
   8a154:	e6b0      	b.n	89eb8 <_realloc_r+0xb8>
   8a156:	68a3      	ldr	r3, [r4, #8]
   8a158:	2a24      	cmp	r2, #36	; 0x24
   8a15a:	f8ca 3010 	str.w	r3, [sl, #16]
   8a15e:	68e3      	ldr	r3, [r4, #12]
   8a160:	f8ca 3014 	str.w	r3, [sl, #20]
   8a164:	d022      	beq.n	8a1ac <_realloc_r+0x3ac>
   8a166:	3410      	adds	r4, #16
   8a168:	f10a 0318 	add.w	r3, sl, #24
   8a16c:	e7b3      	b.n	8a0d6 <_realloc_r+0x2d6>
   8a16e:	4632      	mov	r2, r6
   8a170:	e733      	b.n	89fda <_realloc_r+0x1da>
   8a172:	4621      	mov	r1, r4
   8a174:	4630      	mov	r0, r6
   8a176:	f7ff fdc7 	bl	89d08 <memmove>
   8a17a:	4b17      	ldr	r3, [pc, #92]	; (8a1d8 <_realloc_r+0x3d8>)
   8a17c:	e733      	b.n	89fe6 <_realloc_r+0x1e6>
   8a17e:	6922      	ldr	r2, [r4, #16]
   8a180:	3418      	adds	r4, #24
   8a182:	f8ca 2018 	str.w	r2, [sl, #24]
   8a186:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8a18a:	f8ca 201c 	str.w	r2, [sl, #28]
   8a18e:	f10a 0220 	add.w	r2, sl, #32
   8a192:	e777      	b.n	8a084 <_realloc_r+0x284>
   8a194:	68a1      	ldr	r1, [r4, #8]
   8a196:	2a24      	cmp	r2, #36	; 0x24
   8a198:	f8ca 1010 	str.w	r1, [sl, #16]
   8a19c:	68e1      	ldr	r1, [r4, #12]
   8a19e:	f8ca 1014 	str.w	r1, [sl, #20]
   8a1a2:	d00e      	beq.n	8a1c2 <_realloc_r+0x3c2>
   8a1a4:	3410      	adds	r4, #16
   8a1a6:	f10a 0218 	add.w	r2, sl, #24
   8a1aa:	e716      	b.n	89fda <_realloc_r+0x1da>
   8a1ac:	6923      	ldr	r3, [r4, #16]
   8a1ae:	3418      	adds	r4, #24
   8a1b0:	f8ca 3018 	str.w	r3, [sl, #24]
   8a1b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a1b8:	f8ca 301c 	str.w	r3, [sl, #28]
   8a1bc:	f10a 0320 	add.w	r3, sl, #32
   8a1c0:	e789      	b.n	8a0d6 <_realloc_r+0x2d6>
   8a1c2:	6922      	ldr	r2, [r4, #16]
   8a1c4:	3418      	adds	r4, #24
   8a1c6:	f8ca 2018 	str.w	r2, [sl, #24]
   8a1ca:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8a1ce:	f8ca 201c 	str.w	r2, [sl, #28]
   8a1d2:	f10a 0220 	add.w	r2, sl, #32
   8a1d6:	e700      	b.n	89fda <_realloc_r+0x1da>
   8a1d8:	20070f64 	.word	0x20070f64

0008a1dc <__sprint_r.part.0>:
   8a1dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a1e0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8a1e2:	4690      	mov	r8, r2
   8a1e4:	049c      	lsls	r4, r3, #18
   8a1e6:	d52d      	bpl.n	8a244 <__sprint_r.part.0+0x68>
   8a1e8:	6893      	ldr	r3, [r2, #8]
   8a1ea:	6812      	ldr	r2, [r2, #0]
   8a1ec:	b343      	cbz	r3, 8a240 <__sprint_r.part.0+0x64>
   8a1ee:	468b      	mov	fp, r1
   8a1f0:	4606      	mov	r6, r0
   8a1f2:	f102 0908 	add.w	r9, r2, #8
   8a1f6:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   8a1fa:	ea5f 079a 	movs.w	r7, sl, lsr #2
   8a1fe:	d015      	beq.n	8a22c <__sprint_r.part.0+0x50>
   8a200:	2400      	movs	r4, #0
   8a202:	3d04      	subs	r5, #4
   8a204:	e001      	b.n	8a20a <__sprint_r.part.0+0x2e>
   8a206:	42a7      	cmp	r7, r4
   8a208:	d00e      	beq.n	8a228 <__sprint_r.part.0+0x4c>
   8a20a:	465a      	mov	r2, fp
   8a20c:	4630      	mov	r0, r6
   8a20e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8a212:	f001 f955 	bl	8b4c0 <_fputwc_r>
   8a216:	1c43      	adds	r3, r0, #1
   8a218:	f104 0401 	add.w	r4, r4, #1
   8a21c:	d1f3      	bne.n	8a206 <__sprint_r.part.0+0x2a>
   8a21e:	2300      	movs	r3, #0
   8a220:	e9c8 3301 	strd	r3, r3, [r8, #4]
   8a224:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a228:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8a22c:	f02a 0a03 	bic.w	sl, sl, #3
   8a230:	eba3 030a 	sub.w	r3, r3, sl
   8a234:	f8c8 3008 	str.w	r3, [r8, #8]
   8a238:	f109 0908 	add.w	r9, r9, #8
   8a23c:	2b00      	cmp	r3, #0
   8a23e:	d1da      	bne.n	8a1f6 <__sprint_r.part.0+0x1a>
   8a240:	2000      	movs	r0, #0
   8a242:	e7ec      	b.n	8a21e <__sprint_r.part.0+0x42>
   8a244:	f001 f970 	bl	8b528 <__sfvwrite_r>
   8a248:	2300      	movs	r3, #0
   8a24a:	e9c8 3301 	strd	r3, r3, [r8, #4]
   8a24e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a252:	bf00      	nop

0008a254 <_vfiprintf_r>:
   8a254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a258:	b0bd      	sub	sp, #244	; 0xf4
   8a25a:	461c      	mov	r4, r3
   8a25c:	4617      	mov	r7, r2
   8a25e:	e9cd 3005 	strd	r3, r0, [sp, #20]
   8a262:	9102      	str	r1, [sp, #8]
   8a264:	b118      	cbz	r0, 8a26e <_vfiprintf_r+0x1a>
   8a266:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8a268:	2b00      	cmp	r3, #0
   8a26a:	f000 8277 	beq.w	8a75c <_vfiprintf_r+0x508>
   8a26e:	9a02      	ldr	r2, [sp, #8]
   8a270:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8a272:	07de      	lsls	r6, r3, #31
   8a274:	f140 8184 	bpl.w	8a580 <_vfiprintf_r+0x32c>
   8a278:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   8a27c:	b28a      	uxth	r2, r1
   8a27e:	0490      	lsls	r0, r2, #18
   8a280:	d408      	bmi.n	8a294 <_vfiprintf_r+0x40>
   8a282:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   8a286:	9902      	ldr	r1, [sp, #8]
   8a288:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8a28a:	818a      	strh	r2, [r1, #12]
   8a28c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8a290:	b292      	uxth	r2, r2
   8a292:	664b      	str	r3, [r1, #100]	; 0x64
   8a294:	0711      	lsls	r1, r2, #28
   8a296:	f140 80ec 	bpl.w	8a472 <_vfiprintf_r+0x21e>
   8a29a:	9b02      	ldr	r3, [sp, #8]
   8a29c:	691b      	ldr	r3, [r3, #16]
   8a29e:	2b00      	cmp	r3, #0
   8a2a0:	f000 80e7 	beq.w	8a472 <_vfiprintf_r+0x21e>
   8a2a4:	f002 031a 	and.w	r3, r2, #26
   8a2a8:	2b0a      	cmp	r3, #10
   8a2aa:	f000 80f0 	beq.w	8a48e <_vfiprintf_r+0x23a>
   8a2ae:	ab13      	add	r3, sp, #76	; 0x4c
   8a2b0:	9310      	str	r3, [sp, #64]	; 0x40
   8a2b2:	2300      	movs	r3, #0
   8a2b4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   8a2b8:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   8a2bc:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   8a2c0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8a2c4:	9304      	str	r3, [sp, #16]
   8a2c6:	783b      	ldrb	r3, [r7, #0]
   8a2c8:	2b00      	cmp	r3, #0
   8a2ca:	f000 8146 	beq.w	8a55a <_vfiprintf_r+0x306>
   8a2ce:	463c      	mov	r4, r7
   8a2d0:	e004      	b.n	8a2dc <_vfiprintf_r+0x88>
   8a2d2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8a2d6:	2b00      	cmp	r3, #0
   8a2d8:	f000 8121 	beq.w	8a51e <_vfiprintf_r+0x2ca>
   8a2dc:	2b25      	cmp	r3, #37	; 0x25
   8a2de:	d1f8      	bne.n	8a2d2 <_vfiprintf_r+0x7e>
   8a2e0:	1be5      	subs	r5, r4, r7
   8a2e2:	f040 811e 	bne.w	8a522 <_vfiprintf_r+0x2ce>
   8a2e6:	7823      	ldrb	r3, [r4, #0]
   8a2e8:	2b00      	cmp	r3, #0
   8a2ea:	f000 8136 	beq.w	8a55a <_vfiprintf_r+0x306>
   8a2ee:	f04f 0300 	mov.w	r3, #0
   8a2f2:	2500      	movs	r5, #0
   8a2f4:	f04f 3bff 	mov.w	fp, #4294967295
   8a2f8:	f04f 082b 	mov.w	r8, #43	; 0x2b
   8a2fc:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8a300:	7863      	ldrb	r3, [r4, #1]
   8a302:	9503      	str	r5, [sp, #12]
   8a304:	1c67      	adds	r7, r4, #1
   8a306:	3701      	adds	r7, #1
   8a308:	f1a3 0220 	sub.w	r2, r3, #32
   8a30c:	2a5a      	cmp	r2, #90	; 0x5a
   8a30e:	f200 8146 	bhi.w	8a59e <_vfiprintf_r+0x34a>
   8a312:	e8df f012 	tbh	[pc, r2, lsl #1]
   8a316:	02a1      	.short	0x02a1
   8a318:	01440144 	.word	0x01440144
   8a31c:	0144029d 	.word	0x0144029d
   8a320:	01440144 	.word	0x01440144
   8a324:	0144027c 	.word	0x0144027c
   8a328:	006a0144 	.word	0x006a0144
   8a32c:	01440253 	.word	0x01440253
   8a330:	02af0229 	.word	0x02af0229
   8a334:	02ab0144 	.word	0x02ab0144
   8a338:	005b005b 	.word	0x005b005b
   8a33c:	005b005b 	.word	0x005b005b
   8a340:	005b005b 	.word	0x005b005b
   8a344:	005b005b 	.word	0x005b005b
   8a348:	0144005b 	.word	0x0144005b
   8a34c:	01440144 	.word	0x01440144
   8a350:	01440144 	.word	0x01440144
   8a354:	01440144 	.word	0x01440144
   8a358:	01440144 	.word	0x01440144
   8a35c:	00780213 	.word	0x00780213
   8a360:	01440144 	.word	0x01440144
   8a364:	01440144 	.word	0x01440144
   8a368:	01440144 	.word	0x01440144
   8a36c:	01440144 	.word	0x01440144
   8a370:	01440144 	.word	0x01440144
   8a374:	014400d1 	.word	0x014400d1
   8a378:	01440144 	.word	0x01440144
   8a37c:	014401f7 	.word	0x014401f7
   8a380:	01440241 	.word	0x01440241
   8a384:	05210144 	.word	0x05210144
   8a388:	01440144 	.word	0x01440144
   8a38c:	01440144 	.word	0x01440144
   8a390:	01440144 	.word	0x01440144
   8a394:	01440144 	.word	0x01440144
   8a398:	01440144 	.word	0x01440144
   8a39c:	007a0213 	.word	0x007a0213
   8a3a0:	01440144 	.word	0x01440144
   8a3a4:	02370144 	.word	0x02370144
   8a3a8:	0074007a 	.word	0x0074007a
   8a3ac:	022d0144 	.word	0x022d0144
   8a3b0:	02690144 	.word	0x02690144
   8a3b4:	025700d3 	.word	0x025700d3
   8a3b8:	01440074 	.word	0x01440074
   8a3bc:	007201f7 	.word	0x007201f7
   8a3c0:	01440541 	.word	0x01440541
   8a3c4:	05430144 	.word	0x05430144
   8a3c8:	00720144 	.word	0x00720144
   8a3cc:	2100      	movs	r1, #0
   8a3ce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8a3d2:	f817 3b01 	ldrb.w	r3, [r7], #1
   8a3d6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8a3da:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   8a3de:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8a3e2:	2a09      	cmp	r2, #9
   8a3e4:	d9f5      	bls.n	8a3d2 <_vfiprintf_r+0x17e>
   8a3e6:	9103      	str	r1, [sp, #12]
   8a3e8:	e78e      	b.n	8a308 <_vfiprintf_r+0xb4>
   8a3ea:	9b05      	ldr	r3, [sp, #20]
   8a3ec:	f853 2b04 	ldr.w	r2, [r3], #4
   8a3f0:	2a00      	cmp	r2, #0
   8a3f2:	9203      	str	r2, [sp, #12]
   8a3f4:	9305      	str	r3, [sp, #20]
   8a3f6:	f2c0 81b4 	blt.w	8a762 <_vfiprintf_r+0x50e>
   8a3fa:	783b      	ldrb	r3, [r7, #0]
   8a3fc:	e783      	b.n	8a306 <_vfiprintf_r+0xb2>
   8a3fe:	783b      	ldrb	r3, [r7, #0]
   8a400:	f045 0520 	orr.w	r5, r5, #32
   8a404:	e77f      	b.n	8a306 <_vfiprintf_r+0xb2>
   8a406:	f045 0510 	orr.w	r5, r5, #16
   8a40a:	06ac      	lsls	r4, r5, #26
   8a40c:	9e05      	ldr	r6, [sp, #20]
   8a40e:	f140 816b 	bpl.w	8a6e8 <_vfiprintf_r+0x494>
   8a412:	3607      	adds	r6, #7
   8a414:	f026 0607 	bic.w	r6, r6, #7
   8a418:	4632      	mov	r2, r6
   8a41a:	6873      	ldr	r3, [r6, #4]
   8a41c:	f852 6b08 	ldr.w	r6, [r2], #8
   8a420:	4698      	mov	r8, r3
   8a422:	9205      	str	r2, [sp, #20]
   8a424:	2b00      	cmp	r3, #0
   8a426:	f2c0 8449 	blt.w	8acbc <_vfiprintf_r+0xa68>
   8a42a:	f1bb 3fff 	cmp.w	fp, #4294967295
   8a42e:	f000 8531 	beq.w	8ae94 <_vfiprintf_r+0xc40>
   8a432:	ea56 0308 	orrs.w	r3, r6, r8
   8a436:	f025 0a80 	bic.w	sl, r5, #128	; 0x80
   8a43a:	f000 8425 	beq.w	8ac88 <_vfiprintf_r+0xa34>
   8a43e:	2e0a      	cmp	r6, #10
   8a440:	f178 0300 	sbcs.w	r3, r8, #0
   8a444:	f080 84e1 	bcs.w	8ae0a <_vfiprintf_r+0xbb6>
   8a448:	2301      	movs	r3, #1
   8a44a:	4655      	mov	r5, sl
   8a44c:	3630      	adds	r6, #48	; 0x30
   8a44e:	f88d 60ef 	strb.w	r6, [sp, #239]	; 0xef
   8a452:	9301      	str	r3, [sp, #4]
   8a454:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   8a458:	f8dd 8004 	ldr.w	r8, [sp, #4]
   8a45c:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   8a460:	45d8      	cmp	r8, fp
   8a462:	bfb8      	it	lt
   8a464:	46d8      	movlt	r8, fp
   8a466:	2b00      	cmp	r3, #0
   8a468:	f000 80a8 	beq.w	8a5bc <_vfiprintf_r+0x368>
   8a46c:	f108 0801 	add.w	r8, r8, #1
   8a470:	e0a4      	b.n	8a5bc <_vfiprintf_r+0x368>
   8a472:	9d02      	ldr	r5, [sp, #8]
   8a474:	9806      	ldr	r0, [sp, #24]
   8a476:	4629      	mov	r1, r5
   8a478:	f000 fe08 	bl	8b08c <__swsetup_r>
   8a47c:	2800      	cmp	r0, #0
   8a47e:	f040 8594 	bne.w	8afaa <_vfiprintf_r+0xd56>
   8a482:	89aa      	ldrh	r2, [r5, #12]
   8a484:	f002 031a 	and.w	r3, r2, #26
   8a488:	2b0a      	cmp	r3, #10
   8a48a:	f47f af10 	bne.w	8a2ae <_vfiprintf_r+0x5a>
   8a48e:	9902      	ldr	r1, [sp, #8]
   8a490:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   8a494:	2b00      	cmp	r3, #0
   8a496:	f6ff af0a 	blt.w	8a2ae <_vfiprintf_r+0x5a>
   8a49a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8a49c:	07de      	lsls	r6, r3, #31
   8a49e:	d402      	bmi.n	8a4a6 <_vfiprintf_r+0x252>
   8a4a0:	0595      	lsls	r5, r2, #22
   8a4a2:	f140 8562 	bpl.w	8af6a <_vfiprintf_r+0xd16>
   8a4a6:	4623      	mov	r3, r4
   8a4a8:	463a      	mov	r2, r7
   8a4aa:	9902      	ldr	r1, [sp, #8]
   8a4ac:	9806      	ldr	r0, [sp, #24]
   8a4ae:	b03d      	add	sp, #244	; 0xf4
   8a4b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a4b4:	f000 bd9a 	b.w	8afec <__sbprintf>
   8a4b8:	f045 0510 	orr.w	r5, r5, #16
   8a4bc:	f015 0820 	ands.w	r8, r5, #32
   8a4c0:	f000 8103 	beq.w	8a6ca <_vfiprintf_r+0x476>
   8a4c4:	9e05      	ldr	r6, [sp, #20]
   8a4c6:	3607      	adds	r6, #7
   8a4c8:	f026 0607 	bic.w	r6, r6, #7
   8a4cc:	4633      	mov	r3, r6
   8a4ce:	f8d6 8004 	ldr.w	r8, [r6, #4]
   8a4d2:	f853 6b08 	ldr.w	r6, [r3], #8
   8a4d6:	9305      	str	r3, [sp, #20]
   8a4d8:	2300      	movs	r3, #0
   8a4da:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   8a4de:	f04f 0200 	mov.w	r2, #0
   8a4e2:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   8a4e6:	f1bb 3fff 	cmp.w	fp, #4294967295
   8a4ea:	f000 81dd 	beq.w	8a8a8 <_vfiprintf_r+0x654>
   8a4ee:	ea56 0208 	orrs.w	r2, r6, r8
   8a4f2:	f02a 0580 	bic.w	r5, sl, #128	; 0x80
   8a4f6:	f040 81d6 	bne.w	8a8a6 <_vfiprintf_r+0x652>
   8a4fa:	f1bb 0f00 	cmp.w	fp, #0
   8a4fe:	f040 84cc 	bne.w	8ae9a <_vfiprintf_r+0xc46>
   8a502:	2b00      	cmp	r3, #0
   8a504:	f040 83c5 	bne.w	8ac92 <_vfiprintf_r+0xa3e>
   8a508:	f01a 0301 	ands.w	r3, sl, #1
   8a50c:	9301      	str	r3, [sp, #4]
   8a50e:	f000 83ec 	beq.w	8acea <_vfiprintf_r+0xa96>
   8a512:	2330      	movs	r3, #48	; 0x30
   8a514:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   8a518:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
   8a51c:	e79c      	b.n	8a458 <_vfiprintf_r+0x204>
   8a51e:	1be5      	subs	r5, r4, r7
   8a520:	d01b      	beq.n	8a55a <_vfiprintf_r+0x306>
   8a522:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8a524:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8a526:	3301      	adds	r3, #1
   8a528:	442a      	add	r2, r5
   8a52a:	2b07      	cmp	r3, #7
   8a52c:	e9c9 7500 	strd	r7, r5, [r9]
   8a530:	9212      	str	r2, [sp, #72]	; 0x48
   8a532:	9311      	str	r3, [sp, #68]	; 0x44
   8a534:	dc05      	bgt.n	8a542 <_vfiprintf_r+0x2ee>
   8a536:	f109 0908 	add.w	r9, r9, #8
   8a53a:	9b04      	ldr	r3, [sp, #16]
   8a53c:	442b      	add	r3, r5
   8a53e:	9304      	str	r3, [sp, #16]
   8a540:	e6d1      	b.n	8a2e6 <_vfiprintf_r+0x92>
   8a542:	2a00      	cmp	r2, #0
   8a544:	f000 839c 	beq.w	8ac80 <_vfiprintf_r+0xa2c>
   8a548:	9902      	ldr	r1, [sp, #8]
   8a54a:	9806      	ldr	r0, [sp, #24]
   8a54c:	aa10      	add	r2, sp, #64	; 0x40
   8a54e:	f7ff fe45 	bl	8a1dc <__sprint_r.part.0>
   8a552:	b940      	cbnz	r0, 8a566 <_vfiprintf_r+0x312>
   8a554:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8a558:	e7ef      	b.n	8a53a <_vfiprintf_r+0x2e6>
   8a55a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a55c:	2b00      	cmp	r3, #0
   8a55e:	f040 8515 	bne.w	8af8c <_vfiprintf_r+0xd38>
   8a562:	2300      	movs	r3, #0
   8a564:	9311      	str	r3, [sp, #68]	; 0x44
   8a566:	9a02      	ldr	r2, [sp, #8]
   8a568:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8a56a:	07d9      	lsls	r1, r3, #31
   8a56c:	f140 80a2 	bpl.w	8a6b4 <_vfiprintf_r+0x460>
   8a570:	8993      	ldrh	r3, [r2, #12]
   8a572:	065b      	lsls	r3, r3, #25
   8a574:	f100 8525 	bmi.w	8afc2 <_vfiprintf_r+0xd6e>
   8a578:	9804      	ldr	r0, [sp, #16]
   8a57a:	b03d      	add	sp, #244	; 0xf4
   8a57c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a580:	9b02      	ldr	r3, [sp, #8]
   8a582:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   8a586:	058d      	lsls	r5, r1, #22
   8a588:	b28a      	uxth	r2, r1
   8a58a:	f53f ae78 	bmi.w	8a27e <_vfiprintf_r+0x2a>
   8a58e:	461d      	mov	r5, r3
   8a590:	6d98      	ldr	r0, [r3, #88]	; 0x58
   8a592:	f7fe fb71 	bl	88c78 <__retarget_lock_acquire_recursive>
   8a596:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   8a59a:	b28a      	uxth	r2, r1
   8a59c:	e66f      	b.n	8a27e <_vfiprintf_r+0x2a>
   8a59e:	2b00      	cmp	r3, #0
   8a5a0:	d0db      	beq.n	8a55a <_vfiprintf_r+0x306>
   8a5a2:	f04f 0801 	mov.w	r8, #1
   8a5a6:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   8a5aa:	f04f 0300 	mov.w	r3, #0
   8a5ae:	ac23      	add	r4, sp, #140	; 0x8c
   8a5b0:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8a5b4:	f8cd 8004 	str.w	r8, [sp, #4]
   8a5b8:	f04f 0b00 	mov.w	fp, #0
   8a5bc:	f015 0302 	ands.w	r3, r5, #2
   8a5c0:	9307      	str	r3, [sp, #28]
   8a5c2:	bf18      	it	ne
   8a5c4:	f108 0802 	addne.w	r8, r8, #2
   8a5c8:	f015 0384 	ands.w	r3, r5, #132	; 0x84
   8a5cc:	9308      	str	r3, [sp, #32]
   8a5ce:	d105      	bne.n	8a5dc <_vfiprintf_r+0x388>
   8a5d0:	9b03      	ldr	r3, [sp, #12]
   8a5d2:	eba3 0608 	sub.w	r6, r3, r8
   8a5d6:	2e00      	cmp	r6, #0
   8a5d8:	f300 828a 	bgt.w	8aaf0 <_vfiprintf_r+0x89c>
   8a5dc:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8a5e0:	1c48      	adds	r0, r1, #1
   8a5e2:	f89d 603b 	ldrb.w	r6, [sp, #59]	; 0x3b
   8a5e6:	b176      	cbz	r6, 8a606 <_vfiprintf_r+0x3b2>
   8a5e8:	2101      	movs	r1, #1
   8a5ea:	3201      	adds	r2, #1
   8a5ec:	f10d 063b 	add.w	r6, sp, #59	; 0x3b
   8a5f0:	2807      	cmp	r0, #7
   8a5f2:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8a5f6:	e9c9 6100 	strd	r6, r1, [r9]
   8a5fa:	f300 8258 	bgt.w	8aaae <_vfiprintf_r+0x85a>
   8a5fe:	4601      	mov	r1, r0
   8a600:	f109 0908 	add.w	r9, r9, #8
   8a604:	3001      	adds	r0, #1
   8a606:	9b07      	ldr	r3, [sp, #28]
   8a608:	b1d3      	cbz	r3, 8a640 <_vfiprintf_r+0x3ec>
   8a60a:	2302      	movs	r3, #2
   8a60c:	3202      	adds	r2, #2
   8a60e:	f8c9 3004 	str.w	r3, [r9, #4]
   8a612:	2807      	cmp	r0, #7
   8a614:	ab0f      	add	r3, sp, #60	; 0x3c
   8a616:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8a61a:	f8c9 3000 	str.w	r3, [r9]
   8a61e:	f340 8262 	ble.w	8aae6 <_vfiprintf_r+0x892>
   8a622:	2a00      	cmp	r2, #0
   8a624:	f000 8327 	beq.w	8ac76 <_vfiprintf_r+0xa22>
   8a628:	9902      	ldr	r1, [sp, #8]
   8a62a:	9806      	ldr	r0, [sp, #24]
   8a62c:	aa10      	add	r2, sp, #64	; 0x40
   8a62e:	f7ff fdd5 	bl	8a1dc <__sprint_r.part.0>
   8a632:	2800      	cmp	r0, #0
   8a634:	d197      	bne.n	8a566 <_vfiprintf_r+0x312>
   8a636:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8a63a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8a63e:	1c48      	adds	r0, r1, #1
   8a640:	9b08      	ldr	r3, [sp, #32]
   8a642:	2b80      	cmp	r3, #128	; 0x80
   8a644:	f000 8171 	beq.w	8a92a <_vfiprintf_r+0x6d6>
   8a648:	9b01      	ldr	r3, [sp, #4]
   8a64a:	ebab 0603 	sub.w	r6, fp, r3
   8a64e:	2e00      	cmp	r6, #0
   8a650:	f300 81cf 	bgt.w	8a9f2 <_vfiprintf_r+0x79e>
   8a654:	9b01      	ldr	r3, [sp, #4]
   8a656:	2807      	cmp	r0, #7
   8a658:	441a      	add	r2, r3
   8a65a:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8a65e:	f8c9 4000 	str.w	r4, [r9]
   8a662:	f8c9 3004 	str.w	r3, [r9, #4]
   8a666:	f340 815d 	ble.w	8a924 <_vfiprintf_r+0x6d0>
   8a66a:	2a00      	cmp	r2, #0
   8a66c:	f000 8293 	beq.w	8ab96 <_vfiprintf_r+0x942>
   8a670:	9902      	ldr	r1, [sp, #8]
   8a672:	9806      	ldr	r0, [sp, #24]
   8a674:	aa10      	add	r2, sp, #64	; 0x40
   8a676:	f7ff fdb1 	bl	8a1dc <__sprint_r.part.0>
   8a67a:	2800      	cmp	r0, #0
   8a67c:	f47f af73 	bne.w	8a566 <_vfiprintf_r+0x312>
   8a680:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8a682:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8a686:	0768      	lsls	r0, r5, #29
   8a688:	d505      	bpl.n	8a696 <_vfiprintf_r+0x442>
   8a68a:	9b03      	ldr	r3, [sp, #12]
   8a68c:	eba3 0408 	sub.w	r4, r3, r8
   8a690:	2c00      	cmp	r4, #0
   8a692:	f300 828a 	bgt.w	8abaa <_vfiprintf_r+0x956>
   8a696:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   8a69a:	4541      	cmp	r1, r8
   8a69c:	bfac      	ite	ge
   8a69e:	185b      	addge	r3, r3, r1
   8a6a0:	4443      	addlt	r3, r8
   8a6a2:	9304      	str	r3, [sp, #16]
   8a6a4:	2a00      	cmp	r2, #0
   8a6a6:	f040 81f3 	bne.w	8aa90 <_vfiprintf_r+0x83c>
   8a6aa:	2300      	movs	r3, #0
   8a6ac:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8a6b0:	9311      	str	r3, [sp, #68]	; 0x44
   8a6b2:	e608      	b.n	8a2c6 <_vfiprintf_r+0x72>
   8a6b4:	9b02      	ldr	r3, [sp, #8]
   8a6b6:	899b      	ldrh	r3, [r3, #12]
   8a6b8:	059a      	lsls	r2, r3, #22
   8a6ba:	f53f af5a 	bmi.w	8a572 <_vfiprintf_r+0x31e>
   8a6be:	9c02      	ldr	r4, [sp, #8]
   8a6c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a6c2:	f7fe fadb 	bl	88c7c <__retarget_lock_release_recursive>
   8a6c6:	89a3      	ldrh	r3, [r4, #12]
   8a6c8:	e753      	b.n	8a572 <_vfiprintf_r+0x31e>
   8a6ca:	f015 0310 	ands.w	r3, r5, #16
   8a6ce:	f040 8318 	bne.w	8ad02 <_vfiprintf_r+0xaae>
   8a6d2:	f015 0240 	ands.w	r2, r5, #64	; 0x40
   8a6d6:	f000 8310 	beq.w	8acfa <_vfiprintf_r+0xaa6>
   8a6da:	9e05      	ldr	r6, [sp, #20]
   8a6dc:	4698      	mov	r8, r3
   8a6de:	f856 3b04 	ldr.w	r3, [r6], #4
   8a6e2:	9605      	str	r6, [sp, #20]
   8a6e4:	b29e      	uxth	r6, r3
   8a6e6:	e6f7      	b.n	8a4d8 <_vfiprintf_r+0x284>
   8a6e8:	f856 3b04 	ldr.w	r3, [r6], #4
   8a6ec:	06e8      	lsls	r0, r5, #27
   8a6ee:	9605      	str	r6, [sp, #20]
   8a6f0:	f100 8310 	bmi.w	8ad14 <_vfiprintf_r+0xac0>
   8a6f4:	0669      	lsls	r1, r5, #25
   8a6f6:	f140 830a 	bpl.w	8ad0e <_vfiprintf_r+0xaba>
   8a6fa:	f343 38c0 	sbfx	r8, r3, #15, #1
   8a6fe:	b21e      	sxth	r6, r3
   8a700:	4643      	mov	r3, r8
   8a702:	e68f      	b.n	8a424 <_vfiprintf_r+0x1d0>
   8a704:	f04f 0300 	mov.w	r3, #0
   8a708:	9e05      	ldr	r6, [sp, #20]
   8a70a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8a70e:	f856 4b04 	ldr.w	r4, [r6], #4
   8a712:	2c00      	cmp	r4, #0
   8a714:	f000 83cf 	beq.w	8aeb6 <_vfiprintf_r+0xc62>
   8a718:	f1bb 3fff 	cmp.w	fp, #4294967295
   8a71c:	f000 8341 	beq.w	8ada2 <_vfiprintf_r+0xb4e>
   8a720:	465a      	mov	r2, fp
   8a722:	2100      	movs	r1, #0
   8a724:	4620      	mov	r0, r4
   8a726:	f7fe fd57 	bl	891d8 <memchr>
   8a72a:	2800      	cmp	r0, #0
   8a72c:	f000 8422 	beq.w	8af74 <_vfiprintf_r+0xd20>
   8a730:	1b03      	subs	r3, r0, r4
   8a732:	f04f 0b00 	mov.w	fp, #0
   8a736:	9605      	str	r6, [sp, #20]
   8a738:	9301      	str	r3, [sp, #4]
   8a73a:	e68d      	b.n	8a458 <_vfiprintf_r+0x204>
   8a73c:	f04f 0300 	mov.w	r3, #0
   8a740:	f04f 0801 	mov.w	r8, #1
   8a744:	9e05      	ldr	r6, [sp, #20]
   8a746:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8a74a:	f856 3b04 	ldr.w	r3, [r6], #4
   8a74e:	ac23      	add	r4, sp, #140	; 0x8c
   8a750:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   8a754:	9605      	str	r6, [sp, #20]
   8a756:	f8cd 8004 	str.w	r8, [sp, #4]
   8a75a:	e72d      	b.n	8a5b8 <_vfiprintf_r+0x364>
   8a75c:	f000 fdce 	bl	8b2fc <__sinit>
   8a760:	e585      	b.n	8a26e <_vfiprintf_r+0x1a>
   8a762:	9b03      	ldr	r3, [sp, #12]
   8a764:	425b      	negs	r3, r3
   8a766:	9303      	str	r3, [sp, #12]
   8a768:	783b      	ldrb	r3, [r7, #0]
   8a76a:	f045 0504 	orr.w	r5, r5, #4
   8a76e:	e5ca      	b.n	8a306 <_vfiprintf_r+0xb2>
   8a770:	783b      	ldrb	r3, [r7, #0]
   8a772:	2b6c      	cmp	r3, #108	; 0x6c
   8a774:	bf03      	ittte	eq
   8a776:	787b      	ldrbeq	r3, [r7, #1]
   8a778:	f045 0520 	orreq.w	r5, r5, #32
   8a77c:	3701      	addeq	r7, #1
   8a77e:	f045 0510 	orrne.w	r5, r5, #16
   8a782:	e5c0      	b.n	8a306 <_vfiprintf_r+0xb2>
   8a784:	783b      	ldrb	r3, [r7, #0]
   8a786:	2b68      	cmp	r3, #104	; 0x68
   8a788:	bf03      	ittte	eq
   8a78a:	787b      	ldrbeq	r3, [r7, #1]
   8a78c:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
   8a790:	3701      	addeq	r7, #1
   8a792:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
   8a796:	e5b6      	b.n	8a306 <_vfiprintf_r+0xb2>
   8a798:	f045 0a10 	orr.w	sl, r5, #16
   8a79c:	f01a 0820 	ands.w	r8, sl, #32
   8a7a0:	f000 827e 	beq.w	8aca0 <_vfiprintf_r+0xa4c>
   8a7a4:	9e05      	ldr	r6, [sp, #20]
   8a7a6:	2301      	movs	r3, #1
   8a7a8:	3607      	adds	r6, #7
   8a7aa:	f026 0607 	bic.w	r6, r6, #7
   8a7ae:	4632      	mov	r2, r6
   8a7b0:	f8d6 8004 	ldr.w	r8, [r6, #4]
   8a7b4:	f852 6b08 	ldr.w	r6, [r2], #8
   8a7b8:	9205      	str	r2, [sp, #20]
   8a7ba:	e690      	b.n	8a4de <_vfiprintf_r+0x28a>
   8a7bc:	783b      	ldrb	r3, [r7, #0]
   8a7be:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
   8a7c2:	e5a0      	b.n	8a306 <_vfiprintf_r+0xb2>
   8a7c4:	2230      	movs	r2, #48	; 0x30
   8a7c6:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   8a7ca:	2278      	movs	r2, #120	; 0x78
   8a7cc:	9b05      	ldr	r3, [sp, #20]
   8a7ce:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
   8a7d2:	f853 6b04 	ldr.w	r6, [r3], #4
   8a7d6:	4abe      	ldr	r2, [pc, #760]	; (8aad0 <_vfiprintf_r+0x87c>)
   8a7d8:	9305      	str	r3, [sp, #20]
   8a7da:	f04f 0800 	mov.w	r8, #0
   8a7de:	2302      	movs	r3, #2
   8a7e0:	f045 0a02 	orr.w	sl, r5, #2
   8a7e4:	9209      	str	r2, [sp, #36]	; 0x24
   8a7e6:	e67a      	b.n	8a4de <_vfiprintf_r+0x28a>
   8a7e8:	06ae      	lsls	r6, r5, #26
   8a7ea:	f100 82a4 	bmi.w	8ad36 <_vfiprintf_r+0xae2>
   8a7ee:	06ec      	lsls	r4, r5, #27
   8a7f0:	f100 8359 	bmi.w	8aea6 <_vfiprintf_r+0xc52>
   8a7f4:	0668      	lsls	r0, r5, #25
   8a7f6:	f100 83b0 	bmi.w	8af5a <_vfiprintf_r+0xd06>
   8a7fa:	05a9      	lsls	r1, r5, #22
   8a7fc:	f140 8353 	bpl.w	8aea6 <_vfiprintf_r+0xc52>
   8a800:	9e05      	ldr	r6, [sp, #20]
   8a802:	9a04      	ldr	r2, [sp, #16]
   8a804:	f856 3b04 	ldr.w	r3, [r6], #4
   8a808:	701a      	strb	r2, [r3, #0]
   8a80a:	9605      	str	r6, [sp, #20]
   8a80c:	e55b      	b.n	8a2c6 <_vfiprintf_r+0x72>
   8a80e:	9c06      	ldr	r4, [sp, #24]
   8a810:	4620      	mov	r0, r4
   8a812:	f7fe fa29 	bl	88c68 <_localeconv_r>
   8a816:	6843      	ldr	r3, [r0, #4]
   8a818:	4618      	mov	r0, r3
   8a81a:	930b      	str	r3, [sp, #44]	; 0x2c
   8a81c:	f7fb fafe 	bl	85e1c <strlen>
   8a820:	4603      	mov	r3, r0
   8a822:	4620      	mov	r0, r4
   8a824:	930c      	str	r3, [sp, #48]	; 0x30
   8a826:	461c      	mov	r4, r3
   8a828:	f7fe fa1e 	bl	88c68 <_localeconv_r>
   8a82c:	6883      	ldr	r3, [r0, #8]
   8a82e:	930a      	str	r3, [sp, #40]	; 0x28
   8a830:	2c00      	cmp	r4, #0
   8a832:	f43f ade2 	beq.w	8a3fa <_vfiprintf_r+0x1a6>
   8a836:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a838:	2b00      	cmp	r3, #0
   8a83a:	f43f adde 	beq.w	8a3fa <_vfiprintf_r+0x1a6>
   8a83e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a840:	781b      	ldrb	r3, [r3, #0]
   8a842:	2b00      	cmp	r3, #0
   8a844:	f43f add9 	beq.w	8a3fa <_vfiprintf_r+0x1a6>
   8a848:	783b      	ldrb	r3, [r7, #0]
   8a84a:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
   8a84e:	e55a      	b.n	8a306 <_vfiprintf_r+0xb2>
   8a850:	783b      	ldrb	r3, [r7, #0]
   8a852:	f045 0501 	orr.w	r5, r5, #1
   8a856:	e556      	b.n	8a306 <_vfiprintf_r+0xb2>
   8a858:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   8a85c:	2b00      	cmp	r3, #0
   8a85e:	f47f adcc 	bne.w	8a3fa <_vfiprintf_r+0x1a6>
   8a862:	2320      	movs	r3, #32
   8a864:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8a868:	783b      	ldrb	r3, [r7, #0]
   8a86a:	e54c      	b.n	8a306 <_vfiprintf_r+0xb2>
   8a86c:	783b      	ldrb	r3, [r7, #0]
   8a86e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   8a872:	e548      	b.n	8a306 <_vfiprintf_r+0xb2>
   8a874:	4639      	mov	r1, r7
   8a876:	f811 3b01 	ldrb.w	r3, [r1], #1
   8a87a:	2b2a      	cmp	r3, #42	; 0x2a
   8a87c:	f000 83a6 	beq.w	8afcc <_vfiprintf_r+0xd78>
   8a880:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8a884:	2a09      	cmp	r2, #9
   8a886:	460f      	mov	r7, r1
   8a888:	f04f 0b00 	mov.w	fp, #0
   8a88c:	f63f ad3c 	bhi.w	8a308 <_vfiprintf_r+0xb4>
   8a890:	f817 3b01 	ldrb.w	r3, [r7], #1
   8a894:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
   8a898:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
   8a89c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8a8a0:	2a09      	cmp	r2, #9
   8a8a2:	d9f5      	bls.n	8a890 <_vfiprintf_r+0x63c>
   8a8a4:	e530      	b.n	8a308 <_vfiprintf_r+0xb4>
   8a8a6:	46aa      	mov	sl, r5
   8a8a8:	2b01      	cmp	r3, #1
   8a8aa:	f43f adc8 	beq.w	8a43e <_vfiprintf_r+0x1ea>
   8a8ae:	2b02      	cmp	r3, #2
   8a8b0:	ac3c      	add	r4, sp, #240	; 0xf0
   8a8b2:	d112      	bne.n	8a8da <_vfiprintf_r+0x686>
   8a8b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8a8b6:	f006 030f 	and.w	r3, r6, #15
   8a8ba:	5cd3      	ldrb	r3, [r2, r3]
   8a8bc:	0936      	lsrs	r6, r6, #4
   8a8be:	ea46 7608 	orr.w	r6, r6, r8, lsl #28
   8a8c2:	ea4f 1818 	mov.w	r8, r8, lsr #4
   8a8c6:	f804 3d01 	strb.w	r3, [r4, #-1]!
   8a8ca:	ea56 0308 	orrs.w	r3, r6, r8
   8a8ce:	d1f2      	bne.n	8a8b6 <_vfiprintf_r+0x662>
   8a8d0:	ab3c      	add	r3, sp, #240	; 0xf0
   8a8d2:	1b1b      	subs	r3, r3, r4
   8a8d4:	4655      	mov	r5, sl
   8a8d6:	9301      	str	r3, [sp, #4]
   8a8d8:	e5be      	b.n	8a458 <_vfiprintf_r+0x204>
   8a8da:	f006 0307 	and.w	r3, r6, #7
   8a8de:	08f6      	lsrs	r6, r6, #3
   8a8e0:	ea46 7648 	orr.w	r6, r6, r8, lsl #29
   8a8e4:	ea4f 08d8 	mov.w	r8, r8, lsr #3
   8a8e8:	3330      	adds	r3, #48	; 0x30
   8a8ea:	ea56 0108 	orrs.w	r1, r6, r8
   8a8ee:	4622      	mov	r2, r4
   8a8f0:	f804 3d01 	strb.w	r3, [r4, #-1]!
   8a8f4:	d1f1      	bne.n	8a8da <_vfiprintf_r+0x686>
   8a8f6:	f01a 0f01 	tst.w	sl, #1
   8a8fa:	d0e9      	beq.n	8a8d0 <_vfiprintf_r+0x67c>
   8a8fc:	2b30      	cmp	r3, #48	; 0x30
   8a8fe:	d0e7      	beq.n	8a8d0 <_vfiprintf_r+0x67c>
   8a900:	2330      	movs	r3, #48	; 0x30
   8a902:	3a02      	subs	r2, #2
   8a904:	f804 3c01 	strb.w	r3, [r4, #-1]
   8a908:	ab3c      	add	r3, sp, #240	; 0xf0
   8a90a:	1a9b      	subs	r3, r3, r2
   8a90c:	4655      	mov	r5, sl
   8a90e:	4614      	mov	r4, r2
   8a910:	9301      	str	r3, [sp, #4]
   8a912:	e5a1      	b.n	8a458 <_vfiprintf_r+0x204>
   8a914:	2301      	movs	r3, #1
   8a916:	9a01      	ldr	r2, [sp, #4]
   8a918:	9413      	str	r4, [sp, #76]	; 0x4c
   8a91a:	9311      	str	r3, [sp, #68]	; 0x44
   8a91c:	9214      	str	r2, [sp, #80]	; 0x50
   8a91e:	9212      	str	r2, [sp, #72]	; 0x48
   8a920:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8a924:	f109 0908 	add.w	r9, r9, #8
   8a928:	e6ad      	b.n	8a686 <_vfiprintf_r+0x432>
   8a92a:	9b03      	ldr	r3, [sp, #12]
   8a92c:	eba3 0608 	sub.w	r6, r3, r8
   8a930:	2e00      	cmp	r6, #0
   8a932:	f77f ae89 	ble.w	8a648 <_vfiprintf_r+0x3f4>
   8a936:	2e10      	cmp	r6, #16
   8a938:	f8df a198 	ldr.w	sl, [pc, #408]	; 8aad4 <_vfiprintf_r+0x880>
   8a93c:	dd38      	ble.n	8a9b0 <_vfiprintf_r+0x75c>
   8a93e:	4653      	mov	r3, sl
   8a940:	46cc      	mov	ip, r9
   8a942:	46ba      	mov	sl, r7
   8a944:	46c1      	mov	r9, r8
   8a946:	9407      	str	r4, [sp, #28]
   8a948:	46a8      	mov	r8, r5
   8a94a:	461f      	mov	r7, r3
   8a94c:	9c06      	ldr	r4, [sp, #24]
   8a94e:	9d02      	ldr	r5, [sp, #8]
   8a950:	e007      	b.n	8a962 <_vfiprintf_r+0x70e>
   8a952:	f101 0e02 	add.w	lr, r1, #2
   8a956:	4601      	mov	r1, r0
   8a958:	f10c 0c08 	add.w	ip, ip, #8
   8a95c:	3e10      	subs	r6, #16
   8a95e:	2e10      	cmp	r6, #16
   8a960:	dd1e      	ble.n	8a9a0 <_vfiprintf_r+0x74c>
   8a962:	2310      	movs	r3, #16
   8a964:	1c48      	adds	r0, r1, #1
   8a966:	3210      	adds	r2, #16
   8a968:	2807      	cmp	r0, #7
   8a96a:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8a96e:	f8cc 7000 	str.w	r7, [ip]
   8a972:	f8cc 3004 	str.w	r3, [ip, #4]
   8a976:	ddec      	ble.n	8a952 <_vfiprintf_r+0x6fe>
   8a978:	2a00      	cmp	r2, #0
   8a97a:	f000 8092 	beq.w	8aaa2 <_vfiprintf_r+0x84e>
   8a97e:	4629      	mov	r1, r5
   8a980:	4620      	mov	r0, r4
   8a982:	aa10      	add	r2, sp, #64	; 0x40
   8a984:	f7ff fc2a 	bl	8a1dc <__sprint_r.part.0>
   8a988:	2800      	cmp	r0, #0
   8a98a:	f47f adec 	bne.w	8a566 <_vfiprintf_r+0x312>
   8a98e:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8a992:	3e10      	subs	r6, #16
   8a994:	2e10      	cmp	r6, #16
   8a996:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8a99a:	f101 0e01 	add.w	lr, r1, #1
   8a99e:	dce0      	bgt.n	8a962 <_vfiprintf_r+0x70e>
   8a9a0:	463b      	mov	r3, r7
   8a9a2:	4645      	mov	r5, r8
   8a9a4:	4657      	mov	r7, sl
   8a9a6:	46c8      	mov	r8, r9
   8a9a8:	4670      	mov	r0, lr
   8a9aa:	46e1      	mov	r9, ip
   8a9ac:	469a      	mov	sl, r3
   8a9ae:	9c07      	ldr	r4, [sp, #28]
   8a9b0:	4432      	add	r2, r6
   8a9b2:	2807      	cmp	r0, #7
   8a9b4:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8a9b8:	f8c9 a000 	str.w	sl, [r9]
   8a9bc:	f8c9 6004 	str.w	r6, [r9, #4]
   8a9c0:	f340 8196 	ble.w	8acf0 <_vfiprintf_r+0xa9c>
   8a9c4:	2a00      	cmp	r2, #0
   8a9c6:	f000 829a 	beq.w	8aefe <_vfiprintf_r+0xcaa>
   8a9ca:	9902      	ldr	r1, [sp, #8]
   8a9cc:	9806      	ldr	r0, [sp, #24]
   8a9ce:	aa10      	add	r2, sp, #64	; 0x40
   8a9d0:	f7ff fc04 	bl	8a1dc <__sprint_r.part.0>
   8a9d4:	2800      	cmp	r0, #0
   8a9d6:	f47f adc6 	bne.w	8a566 <_vfiprintf_r+0x312>
   8a9da:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8a9de:	9b01      	ldr	r3, [sp, #4]
   8a9e0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8a9e4:	ebab 0603 	sub.w	r6, fp, r3
   8a9e8:	2e00      	cmp	r6, #0
   8a9ea:	f101 0001 	add.w	r0, r1, #1
   8a9ee:	f77f ae31 	ble.w	8a654 <_vfiprintf_r+0x400>
   8a9f2:	2e10      	cmp	r6, #16
   8a9f4:	f340 826b 	ble.w	8aece <_vfiprintf_r+0xc7a>
   8a9f8:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8aad4 <_vfiprintf_r+0x880>
   8a9fc:	46cc      	mov	ip, r9
   8a9fe:	4653      	mov	r3, sl
   8aa00:	46c1      	mov	r9, r8
   8aa02:	46ba      	mov	sl, r7
   8aa04:	46a8      	mov	r8, r5
   8aa06:	9407      	str	r4, [sp, #28]
   8aa08:	f04f 0b10 	mov.w	fp, #16
   8aa0c:	461f      	mov	r7, r3
   8aa0e:	9c06      	ldr	r4, [sp, #24]
   8aa10:	9d02      	ldr	r5, [sp, #8]
   8aa12:	e007      	b.n	8aa24 <_vfiprintf_r+0x7d0>
   8aa14:	f101 0e02 	add.w	lr, r1, #2
   8aa18:	4601      	mov	r1, r0
   8aa1a:	f10c 0c08 	add.w	ip, ip, #8
   8aa1e:	3e10      	subs	r6, #16
   8aa20:	2e10      	cmp	r6, #16
   8aa22:	dd19      	ble.n	8aa58 <_vfiprintf_r+0x804>
   8aa24:	1c48      	adds	r0, r1, #1
   8aa26:	3210      	adds	r2, #16
   8aa28:	2807      	cmp	r0, #7
   8aa2a:	e9cc 7b00 	strd	r7, fp, [ip]
   8aa2e:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8aa32:	ddef      	ble.n	8aa14 <_vfiprintf_r+0x7c0>
   8aa34:	b332      	cbz	r2, 8aa84 <_vfiprintf_r+0x830>
   8aa36:	4629      	mov	r1, r5
   8aa38:	4620      	mov	r0, r4
   8aa3a:	aa10      	add	r2, sp, #64	; 0x40
   8aa3c:	f7ff fbce 	bl	8a1dc <__sprint_r.part.0>
   8aa40:	2800      	cmp	r0, #0
   8aa42:	f47f ad90 	bne.w	8a566 <_vfiprintf_r+0x312>
   8aa46:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8aa4a:	3e10      	subs	r6, #16
   8aa4c:	2e10      	cmp	r6, #16
   8aa4e:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8aa52:	f101 0e01 	add.w	lr, r1, #1
   8aa56:	dce5      	bgt.n	8aa24 <_vfiprintf_r+0x7d0>
   8aa58:	463b      	mov	r3, r7
   8aa5a:	4645      	mov	r5, r8
   8aa5c:	4657      	mov	r7, sl
   8aa5e:	46c8      	mov	r8, r9
   8aa60:	4670      	mov	r0, lr
   8aa62:	46e1      	mov	r9, ip
   8aa64:	469a      	mov	sl, r3
   8aa66:	9c07      	ldr	r4, [sp, #28]
   8aa68:	4432      	add	r2, r6
   8aa6a:	2807      	cmp	r0, #7
   8aa6c:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8aa70:	f8c9 a000 	str.w	sl, [r9]
   8aa74:	f8c9 6004 	str.w	r6, [r9, #4]
   8aa78:	f300 80e9 	bgt.w	8ac4e <_vfiprintf_r+0x9fa>
   8aa7c:	f109 0908 	add.w	r9, r9, #8
   8aa80:	3001      	adds	r0, #1
   8aa82:	e5e7      	b.n	8a654 <_vfiprintf_r+0x400>
   8aa84:	f04f 0e01 	mov.w	lr, #1
   8aa88:	4611      	mov	r1, r2
   8aa8a:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8aa8e:	e7c6      	b.n	8aa1e <_vfiprintf_r+0x7ca>
   8aa90:	9902      	ldr	r1, [sp, #8]
   8aa92:	9806      	ldr	r0, [sp, #24]
   8aa94:	aa10      	add	r2, sp, #64	; 0x40
   8aa96:	f7ff fba1 	bl	8a1dc <__sprint_r.part.0>
   8aa9a:	2800      	cmp	r0, #0
   8aa9c:	f43f ae05 	beq.w	8a6aa <_vfiprintf_r+0x456>
   8aaa0:	e561      	b.n	8a566 <_vfiprintf_r+0x312>
   8aaa2:	f04f 0e01 	mov.w	lr, #1
   8aaa6:	4611      	mov	r1, r2
   8aaa8:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8aaac:	e756      	b.n	8a95c <_vfiprintf_r+0x708>
   8aaae:	2a00      	cmp	r2, #0
   8aab0:	f000 80de 	beq.w	8ac70 <_vfiprintf_r+0xa1c>
   8aab4:	9902      	ldr	r1, [sp, #8]
   8aab6:	9806      	ldr	r0, [sp, #24]
   8aab8:	aa10      	add	r2, sp, #64	; 0x40
   8aaba:	f7ff fb8f 	bl	8a1dc <__sprint_r.part.0>
   8aabe:	2800      	cmp	r0, #0
   8aac0:	f47f ad51 	bne.w	8a566 <_vfiprintf_r+0x312>
   8aac4:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8aac8:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8aacc:	1c48      	adds	r0, r1, #1
   8aace:	e59a      	b.n	8a606 <_vfiprintf_r+0x3b2>
   8aad0:	0008c9a4 	.word	0x0008c9a4
   8aad4:	0008cc7c 	.word	0x0008cc7c
   8aad8:	2202      	movs	r2, #2
   8aada:	2001      	movs	r0, #1
   8aadc:	ab0f      	add	r3, sp, #60	; 0x3c
   8aade:	9313      	str	r3, [sp, #76]	; 0x4c
   8aae0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8aae4:	9214      	str	r2, [sp, #80]	; 0x50
   8aae6:	4601      	mov	r1, r0
   8aae8:	f109 0908 	add.w	r9, r9, #8
   8aaec:	1c48      	adds	r0, r1, #1
   8aaee:	e5a7      	b.n	8a640 <_vfiprintf_r+0x3ec>
   8aaf0:	2e10      	cmp	r6, #16
   8aaf2:	f340 8245 	ble.w	8af80 <_vfiprintf_r+0xd2c>
   8aaf6:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   8aafa:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 8adec <_vfiprintf_r+0xb98>
   8aafe:	4619      	mov	r1, r3
   8ab00:	4653      	mov	r3, sl
   8ab02:	46cc      	mov	ip, r9
   8ab04:	46ba      	mov	sl, r7
   8ab06:	46c1      	mov	r9, r8
   8ab08:	940d      	str	r4, [sp, #52]	; 0x34
   8ab0a:	46a8      	mov	r8, r5
   8ab0c:	461f      	mov	r7, r3
   8ab0e:	9c06      	ldr	r4, [sp, #24]
   8ab10:	9d02      	ldr	r5, [sp, #8]
   8ab12:	e007      	b.n	8ab24 <_vfiprintf_r+0x8d0>
   8ab14:	f101 0e02 	add.w	lr, r1, #2
   8ab18:	4601      	mov	r1, r0
   8ab1a:	f10c 0c08 	add.w	ip, ip, #8
   8ab1e:	3e10      	subs	r6, #16
   8ab20:	2e10      	cmp	r6, #16
   8ab22:	dd1c      	ble.n	8ab5e <_vfiprintf_r+0x90a>
   8ab24:	2310      	movs	r3, #16
   8ab26:	1c48      	adds	r0, r1, #1
   8ab28:	3210      	adds	r2, #16
   8ab2a:	2807      	cmp	r0, #7
   8ab2c:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8ab30:	f8cc 7000 	str.w	r7, [ip]
   8ab34:	f8cc 3004 	str.w	r3, [ip, #4]
   8ab38:	ddec      	ble.n	8ab14 <_vfiprintf_r+0x8c0>
   8ab3a:	b332      	cbz	r2, 8ab8a <_vfiprintf_r+0x936>
   8ab3c:	4629      	mov	r1, r5
   8ab3e:	4620      	mov	r0, r4
   8ab40:	aa10      	add	r2, sp, #64	; 0x40
   8ab42:	f7ff fb4b 	bl	8a1dc <__sprint_r.part.0>
   8ab46:	2800      	cmp	r0, #0
   8ab48:	f47f ad0d 	bne.w	8a566 <_vfiprintf_r+0x312>
   8ab4c:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8ab50:	3e10      	subs	r6, #16
   8ab52:	2e10      	cmp	r6, #16
   8ab54:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8ab58:	f101 0e01 	add.w	lr, r1, #1
   8ab5c:	dce2      	bgt.n	8ab24 <_vfiprintf_r+0x8d0>
   8ab5e:	463b      	mov	r3, r7
   8ab60:	4645      	mov	r5, r8
   8ab62:	4657      	mov	r7, sl
   8ab64:	46c8      	mov	r8, r9
   8ab66:	4671      	mov	r1, lr
   8ab68:	46e1      	mov	r9, ip
   8ab6a:	469a      	mov	sl, r3
   8ab6c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   8ab6e:	4432      	add	r2, r6
   8ab70:	2907      	cmp	r1, #7
   8ab72:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   8ab76:	f8c9 a000 	str.w	sl, [r9]
   8ab7a:	f8c9 6004 	str.w	r6, [r9, #4]
   8ab7e:	f300 80a7 	bgt.w	8acd0 <_vfiprintf_r+0xa7c>
   8ab82:	f109 0908 	add.w	r9, r9, #8
   8ab86:	1c48      	adds	r0, r1, #1
   8ab88:	e52b      	b.n	8a5e2 <_vfiprintf_r+0x38e>
   8ab8a:	4611      	mov	r1, r2
   8ab8c:	f04f 0e01 	mov.w	lr, #1
   8ab90:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8ab94:	e7c3      	b.n	8ab1e <_vfiprintf_r+0x8ca>
   8ab96:	076c      	lsls	r4, r5, #29
   8ab98:	9211      	str	r2, [sp, #68]	; 0x44
   8ab9a:	d550      	bpl.n	8ac3e <_vfiprintf_r+0x9ea>
   8ab9c:	9b03      	ldr	r3, [sp, #12]
   8ab9e:	eba3 0408 	sub.w	r4, r3, r8
   8aba2:	2c00      	cmp	r4, #0
   8aba4:	dd4b      	ble.n	8ac3e <_vfiprintf_r+0x9ea>
   8aba6:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8abaa:	2c10      	cmp	r4, #16
   8abac:	f340 81f8 	ble.w	8afa0 <_vfiprintf_r+0xd4c>
   8abb0:	f8df a238 	ldr.w	sl, [pc, #568]	; 8adec <_vfiprintf_r+0xb98>
   8abb4:	2510      	movs	r5, #16
   8abb6:	4653      	mov	r3, sl
   8abb8:	9911      	ldr	r1, [sp, #68]	; 0x44
   8abba:	46ba      	mov	sl, r7
   8abbc:	9e06      	ldr	r6, [sp, #24]
   8abbe:	461f      	mov	r7, r3
   8abc0:	f8dd b008 	ldr.w	fp, [sp, #8]
   8abc4:	e006      	b.n	8abd4 <_vfiprintf_r+0x980>
   8abc6:	1c88      	adds	r0, r1, #2
   8abc8:	4619      	mov	r1, r3
   8abca:	f109 0908 	add.w	r9, r9, #8
   8abce:	3c10      	subs	r4, #16
   8abd0:	2c10      	cmp	r4, #16
   8abd2:	dd19      	ble.n	8ac08 <_vfiprintf_r+0x9b4>
   8abd4:	1c4b      	adds	r3, r1, #1
   8abd6:	3210      	adds	r2, #16
   8abd8:	2b07      	cmp	r3, #7
   8abda:	e9c9 7500 	strd	r7, r5, [r9]
   8abde:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   8abe2:	ddf0      	ble.n	8abc6 <_vfiprintf_r+0x972>
   8abe4:	b332      	cbz	r2, 8ac34 <_vfiprintf_r+0x9e0>
   8abe6:	4659      	mov	r1, fp
   8abe8:	4630      	mov	r0, r6
   8abea:	aa10      	add	r2, sp, #64	; 0x40
   8abec:	f7ff faf6 	bl	8a1dc <__sprint_r.part.0>
   8abf0:	2800      	cmp	r0, #0
   8abf2:	f47f acb8 	bne.w	8a566 <_vfiprintf_r+0x312>
   8abf6:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8abfa:	3c10      	subs	r4, #16
   8abfc:	2c10      	cmp	r4, #16
   8abfe:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ac02:	f101 0001 	add.w	r0, r1, #1
   8ac06:	dce5      	bgt.n	8abd4 <_vfiprintf_r+0x980>
   8ac08:	463b      	mov	r3, r7
   8ac0a:	4657      	mov	r7, sl
   8ac0c:	469a      	mov	sl, r3
   8ac0e:	4422      	add	r2, r4
   8ac10:	2807      	cmp	r0, #7
   8ac12:	e9c9 a400 	strd	sl, r4, [r9]
   8ac16:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8ac1a:	f77f ad3c 	ble.w	8a696 <_vfiprintf_r+0x442>
   8ac1e:	b172      	cbz	r2, 8ac3e <_vfiprintf_r+0x9ea>
   8ac20:	9902      	ldr	r1, [sp, #8]
   8ac22:	9806      	ldr	r0, [sp, #24]
   8ac24:	aa10      	add	r2, sp, #64	; 0x40
   8ac26:	f7ff fad9 	bl	8a1dc <__sprint_r.part.0>
   8ac2a:	2800      	cmp	r0, #0
   8ac2c:	f47f ac9b 	bne.w	8a566 <_vfiprintf_r+0x312>
   8ac30:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8ac32:	e530      	b.n	8a696 <_vfiprintf_r+0x442>
   8ac34:	2001      	movs	r0, #1
   8ac36:	4611      	mov	r1, r2
   8ac38:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ac3c:	e7c7      	b.n	8abce <_vfiprintf_r+0x97a>
   8ac3e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   8ac42:	4542      	cmp	r2, r8
   8ac44:	bfac      	ite	ge
   8ac46:	189b      	addge	r3, r3, r2
   8ac48:	4443      	addlt	r3, r8
   8ac4a:	9304      	str	r3, [sp, #16]
   8ac4c:	e52d      	b.n	8a6aa <_vfiprintf_r+0x456>
   8ac4e:	2a00      	cmp	r2, #0
   8ac50:	f43f ae60 	beq.w	8a914 <_vfiprintf_r+0x6c0>
   8ac54:	9902      	ldr	r1, [sp, #8]
   8ac56:	9806      	ldr	r0, [sp, #24]
   8ac58:	aa10      	add	r2, sp, #64	; 0x40
   8ac5a:	f7ff fabf 	bl	8a1dc <__sprint_r.part.0>
   8ac5e:	2800      	cmp	r0, #0
   8ac60:	f47f ac81 	bne.w	8a566 <_vfiprintf_r+0x312>
   8ac64:	9811      	ldr	r0, [sp, #68]	; 0x44
   8ac66:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8ac68:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ac6c:	3001      	adds	r0, #1
   8ac6e:	e4f1      	b.n	8a654 <_vfiprintf_r+0x400>
   8ac70:	9b07      	ldr	r3, [sp, #28]
   8ac72:	2b00      	cmp	r3, #0
   8ac74:	d169      	bne.n	8ad4a <_vfiprintf_r+0xaf6>
   8ac76:	2001      	movs	r0, #1
   8ac78:	4611      	mov	r1, r2
   8ac7a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ac7e:	e4df      	b.n	8a640 <_vfiprintf_r+0x3ec>
   8ac80:	9211      	str	r2, [sp, #68]	; 0x44
   8ac82:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ac86:	e458      	b.n	8a53a <_vfiprintf_r+0x2e6>
   8ac88:	f1bb 0f00 	cmp.w	fp, #0
   8ac8c:	f47f abdc 	bne.w	8a448 <_vfiprintf_r+0x1f4>
   8ac90:	4655      	mov	r5, sl
   8ac92:	f04f 0b00 	mov.w	fp, #0
   8ac96:	ac3c      	add	r4, sp, #240	; 0xf0
   8ac98:	f8cd b004 	str.w	fp, [sp, #4]
   8ac9c:	f7ff bbdc 	b.w	8a458 <_vfiprintf_r+0x204>
   8aca0:	f01a 0310 	ands.w	r3, sl, #16
   8aca4:	d140      	bne.n	8ad28 <_vfiprintf_r+0xad4>
   8aca6:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
   8acaa:	d039      	beq.n	8ad20 <_vfiprintf_r+0xacc>
   8acac:	9e05      	ldr	r6, [sp, #20]
   8acae:	4698      	mov	r8, r3
   8acb0:	f856 2b04 	ldr.w	r2, [r6], #4
   8acb4:	2301      	movs	r3, #1
   8acb6:	9605      	str	r6, [sp, #20]
   8acb8:	b296      	uxth	r6, r2
   8acba:	e410      	b.n	8a4de <_vfiprintf_r+0x28a>
   8acbc:	232d      	movs	r3, #45	; 0x2d
   8acbe:	4276      	negs	r6, r6
   8acc0:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8acc4:	46aa      	mov	sl, r5
   8acc6:	f04f 0301 	mov.w	r3, #1
   8acca:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
   8acce:	e40a      	b.n	8a4e6 <_vfiprintf_r+0x292>
   8acd0:	2a00      	cmp	r2, #0
   8acd2:	d06f      	beq.n	8adb4 <_vfiprintf_r+0xb60>
   8acd4:	9902      	ldr	r1, [sp, #8]
   8acd6:	9806      	ldr	r0, [sp, #24]
   8acd8:	aa10      	add	r2, sp, #64	; 0x40
   8acda:	f7ff fa7f 	bl	8a1dc <__sprint_r.part.0>
   8acde:	2800      	cmp	r0, #0
   8ace0:	f47f ac41 	bne.w	8a566 <_vfiprintf_r+0x312>
   8ace4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ace8:	e478      	b.n	8a5dc <_vfiprintf_r+0x388>
   8acea:	ac3c      	add	r4, sp, #240	; 0xf0
   8acec:	f7ff bbb4 	b.w	8a458 <_vfiprintf_r+0x204>
   8acf0:	4601      	mov	r1, r0
   8acf2:	f109 0908 	add.w	r9, r9, #8
   8acf6:	3001      	adds	r0, #1
   8acf8:	e4a6      	b.n	8a648 <_vfiprintf_r+0x3f4>
   8acfa:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   8acfe:	f040 811d 	bne.w	8af3c <_vfiprintf_r+0xce8>
   8ad02:	9b05      	ldr	r3, [sp, #20]
   8ad04:	f853 6b04 	ldr.w	r6, [r3], #4
   8ad08:	9305      	str	r3, [sp, #20]
   8ad0a:	f7ff bbe5 	b.w	8a4d8 <_vfiprintf_r+0x284>
   8ad0e:	05aa      	lsls	r2, r5, #22
   8ad10:	f100 810e 	bmi.w	8af30 <_vfiprintf_r+0xcdc>
   8ad14:	ea4f 78e3 	mov.w	r8, r3, asr #31
   8ad18:	461e      	mov	r6, r3
   8ad1a:	4643      	mov	r3, r8
   8ad1c:	f7ff bb82 	b.w	8a424 <_vfiprintf_r+0x1d0>
   8ad20:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
   8ad24:	f040 80fb 	bne.w	8af1e <_vfiprintf_r+0xcca>
   8ad28:	9a05      	ldr	r2, [sp, #20]
   8ad2a:	2301      	movs	r3, #1
   8ad2c:	f852 6b04 	ldr.w	r6, [r2], #4
   8ad30:	9205      	str	r2, [sp, #20]
   8ad32:	f7ff bbd4 	b.w	8a4de <_vfiprintf_r+0x28a>
   8ad36:	e9dd 1604 	ldrd	r1, r6, [sp, #16]
   8ad3a:	f856 2b04 	ldr.w	r2, [r6], #4
   8ad3e:	17cb      	asrs	r3, r1, #31
   8ad40:	e9c2 1300 	strd	r1, r3, [r2]
   8ad44:	9605      	str	r6, [sp, #20]
   8ad46:	f7ff babe 	b.w	8a2c6 <_vfiprintf_r+0x72>
   8ad4a:	2202      	movs	r2, #2
   8ad4c:	ab0f      	add	r3, sp, #60	; 0x3c
   8ad4e:	9313      	str	r3, [sp, #76]	; 0x4c
   8ad50:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ad54:	9214      	str	r2, [sp, #80]	; 0x50
   8ad56:	e6c7      	b.n	8aae8 <_vfiprintf_r+0x894>
   8ad58:	4a25      	ldr	r2, [pc, #148]	; (8adf0 <_vfiprintf_r+0xb9c>)
   8ad5a:	9209      	str	r2, [sp, #36]	; 0x24
   8ad5c:	f015 0820 	ands.w	r8, r5, #32
   8ad60:	d036      	beq.n	8add0 <_vfiprintf_r+0xb7c>
   8ad62:	9e05      	ldr	r6, [sp, #20]
   8ad64:	3607      	adds	r6, #7
   8ad66:	f026 0607 	bic.w	r6, r6, #7
   8ad6a:	4632      	mov	r2, r6
   8ad6c:	f8d6 8004 	ldr.w	r8, [r6, #4]
   8ad70:	f852 6b08 	ldr.w	r6, [r2], #8
   8ad74:	9205      	str	r2, [sp, #20]
   8ad76:	07ea      	lsls	r2, r5, #31
   8ad78:	d509      	bpl.n	8ad8e <_vfiprintf_r+0xb3a>
   8ad7a:	ea56 0208 	orrs.w	r2, r6, r8
   8ad7e:	d006      	beq.n	8ad8e <_vfiprintf_r+0xb3a>
   8ad80:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   8ad84:	2330      	movs	r3, #48	; 0x30
   8ad86:	f045 0502 	orr.w	r5, r5, #2
   8ad8a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   8ad8e:	2302      	movs	r3, #2
   8ad90:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   8ad94:	f7ff bba3 	b.w	8a4de <_vfiprintf_r+0x28a>
   8ad98:	46aa      	mov	sl, r5
   8ad9a:	e4ff      	b.n	8a79c <_vfiprintf_r+0x548>
   8ad9c:	4a15      	ldr	r2, [pc, #84]	; (8adf4 <_vfiprintf_r+0xba0>)
   8ad9e:	9209      	str	r2, [sp, #36]	; 0x24
   8ada0:	e7dc      	b.n	8ad5c <_vfiprintf_r+0xb08>
   8ada2:	4620      	mov	r0, r4
   8ada4:	9605      	str	r6, [sp, #20]
   8ada6:	f7fb f839 	bl	85e1c <strlen>
   8adaa:	f04f 0b00 	mov.w	fp, #0
   8adae:	9001      	str	r0, [sp, #4]
   8adb0:	f7ff bb52 	b.w	8a458 <_vfiprintf_r+0x204>
   8adb4:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   8adb8:	2900      	cmp	r1, #0
   8adba:	f000 80a6 	beq.w	8af0a <_vfiprintf_r+0xcb6>
   8adbe:	2001      	movs	r0, #1
   8adc0:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
   8adc4:	9213      	str	r2, [sp, #76]	; 0x4c
   8adc6:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8adca:	4602      	mov	r2, r0
   8adcc:	9014      	str	r0, [sp, #80]	; 0x50
   8adce:	e416      	b.n	8a5fe <_vfiprintf_r+0x3aa>
   8add0:	f015 0210 	ands.w	r2, r5, #16
   8add4:	d114      	bne.n	8ae00 <_vfiprintf_r+0xbac>
   8add6:	f015 0140 	ands.w	r1, r5, #64	; 0x40
   8adda:	d00d      	beq.n	8adf8 <_vfiprintf_r+0xba4>
   8addc:	9e05      	ldr	r6, [sp, #20]
   8adde:	4690      	mov	r8, r2
   8ade0:	f856 2b04 	ldr.w	r2, [r6], #4
   8ade4:	9605      	str	r6, [sp, #20]
   8ade6:	b296      	uxth	r6, r2
   8ade8:	e7c5      	b.n	8ad76 <_vfiprintf_r+0xb22>
   8adea:	bf00      	nop
   8adec:	0008cc6c 	.word	0x0008cc6c
   8adf0:	0008c9b8 	.word	0x0008c9b8
   8adf4:	0008c9a4 	.word	0x0008c9a4
   8adf8:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   8adfc:	f040 80a6 	bne.w	8af4c <_vfiprintf_r+0xcf8>
   8ae00:	9a05      	ldr	r2, [sp, #20]
   8ae02:	f852 6b04 	ldr.w	r6, [r2], #4
   8ae06:	9205      	str	r2, [sp, #20]
   8ae08:	e7b5      	b.n	8ad76 <_vfiprintf_r+0xb22>
   8ae0a:	2300      	movs	r3, #0
   8ae0c:	f40a 6280 	and.w	r2, sl, #1024	; 0x400
   8ae10:	f8cd b004 	str.w	fp, [sp, #4]
   8ae14:	f8cd a01c 	str.w	sl, [sp, #28]
   8ae18:	46bb      	mov	fp, r7
   8ae1a:	f8cd 9020 	str.w	r9, [sp, #32]
   8ae1e:	469a      	mov	sl, r3
   8ae20:	4617      	mov	r7, r2
   8ae22:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8ae26:	ad3c      	add	r5, sp, #240	; 0xf0
   8ae28:	e00c      	b.n	8ae44 <_vfiprintf_r+0xbf0>
   8ae2a:	2300      	movs	r3, #0
   8ae2c:	4630      	mov	r0, r6
   8ae2e:	4641      	mov	r1, r8
   8ae30:	220a      	movs	r2, #10
   8ae32:	f001 fbf9 	bl	8c628 <__aeabi_uldivmod>
   8ae36:	2e0a      	cmp	r6, #10
   8ae38:	f178 0300 	sbcs.w	r3, r8, #0
   8ae3c:	d31b      	bcc.n	8ae76 <_vfiprintf_r+0xc22>
   8ae3e:	4606      	mov	r6, r0
   8ae40:	4688      	mov	r8, r1
   8ae42:	4625      	mov	r5, r4
   8ae44:	4630      	mov	r0, r6
   8ae46:	4641      	mov	r1, r8
   8ae48:	220a      	movs	r2, #10
   8ae4a:	2300      	movs	r3, #0
   8ae4c:	f001 fbec 	bl	8c628 <__aeabi_uldivmod>
   8ae50:	3230      	adds	r2, #48	; 0x30
   8ae52:	1e6c      	subs	r4, r5, #1
   8ae54:	f10a 0a01 	add.w	sl, sl, #1
   8ae58:	f805 2c01 	strb.w	r2, [r5, #-1]
   8ae5c:	2f00      	cmp	r7, #0
   8ae5e:	d0e4      	beq.n	8ae2a <_vfiprintf_r+0xbd6>
   8ae60:	f899 3000 	ldrb.w	r3, [r9]
   8ae64:	4553      	cmp	r3, sl
   8ae66:	d1e0      	bne.n	8ae2a <_vfiprintf_r+0xbd6>
   8ae68:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   8ae6c:	d0dd      	beq.n	8ae2a <_vfiprintf_r+0xbd6>
   8ae6e:	2e0a      	cmp	r6, #10
   8ae70:	f178 0300 	sbcs.w	r3, r8, #0
   8ae74:	d22e      	bcs.n	8aed4 <_vfiprintf_r+0xc80>
   8ae76:	f8dd a01c 	ldr.w	sl, [sp, #28]
   8ae7a:	ab3c      	add	r3, sp, #240	; 0xf0
   8ae7c:	1b1b      	subs	r3, r3, r4
   8ae7e:	465f      	mov	r7, fp
   8ae80:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   8ae84:	f8dd b004 	ldr.w	fp, [sp, #4]
   8ae88:	4655      	mov	r5, sl
   8ae8a:	f8dd 9020 	ldr.w	r9, [sp, #32]
   8ae8e:	9301      	str	r3, [sp, #4]
   8ae90:	f7ff bae2 	b.w	8a458 <_vfiprintf_r+0x204>
   8ae94:	46aa      	mov	sl, r5
   8ae96:	f7ff bad2 	b.w	8a43e <_vfiprintf_r+0x1ea>
   8ae9a:	2b01      	cmp	r3, #1
   8ae9c:	46aa      	mov	sl, r5
   8ae9e:	f47f ad06 	bne.w	8a8ae <_vfiprintf_r+0x65a>
   8aea2:	f7ff bad1 	b.w	8a448 <_vfiprintf_r+0x1f4>
   8aea6:	9e05      	ldr	r6, [sp, #20]
   8aea8:	9a04      	ldr	r2, [sp, #16]
   8aeaa:	f856 3b04 	ldr.w	r3, [r6], #4
   8aeae:	601a      	str	r2, [r3, #0]
   8aeb0:	9605      	str	r6, [sp, #20]
   8aeb2:	f7ff ba08 	b.w	8a2c6 <_vfiprintf_r+0x72>
   8aeb6:	f1bb 0f06 	cmp.w	fp, #6
   8aeba:	46d8      	mov	r8, fp
   8aebc:	bf28      	it	cs
   8aebe:	f04f 0806 	movcs.w	r8, #6
   8aec2:	4c47      	ldr	r4, [pc, #284]	; (8afe0 <_vfiprintf_r+0xd8c>)
   8aec4:	f8cd 8004 	str.w	r8, [sp, #4]
   8aec8:	9605      	str	r6, [sp, #20]
   8aeca:	f7ff bb75 	b.w	8a5b8 <_vfiprintf_r+0x364>
   8aece:	f8df a114 	ldr.w	sl, [pc, #276]	; 8afe4 <_vfiprintf_r+0xd90>
   8aed2:	e5c9      	b.n	8aa68 <_vfiprintf_r+0x814>
   8aed4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8aed6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8aed8:	1ae4      	subs	r4, r4, r3
   8aeda:	461a      	mov	r2, r3
   8aedc:	4620      	mov	r0, r4
   8aede:	f7fa ffcb 	bl	85e78 <strncpy>
   8aee2:	f899 3001 	ldrb.w	r3, [r9, #1]
   8aee6:	b10b      	cbz	r3, 8aeec <_vfiprintf_r+0xc98>
   8aee8:	f109 0901 	add.w	r9, r9, #1
   8aeec:	4630      	mov	r0, r6
   8aeee:	4641      	mov	r1, r8
   8aef0:	220a      	movs	r2, #10
   8aef2:	2300      	movs	r3, #0
   8aef4:	f04f 0a00 	mov.w	sl, #0
   8aef8:	f001 fb96 	bl	8c628 <__aeabi_uldivmod>
   8aefc:	e79f      	b.n	8ae3e <_vfiprintf_r+0xbea>
   8aefe:	2001      	movs	r0, #1
   8af00:	4611      	mov	r1, r2
   8af02:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8af06:	f7ff bb9f 	b.w	8a648 <_vfiprintf_r+0x3f4>
   8af0a:	9b07      	ldr	r3, [sp, #28]
   8af0c:	2b00      	cmp	r3, #0
   8af0e:	f47f ade3 	bne.w	8aad8 <_vfiprintf_r+0x884>
   8af12:	4611      	mov	r1, r2
   8af14:	2001      	movs	r0, #1
   8af16:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8af1a:	f7ff bb95 	b.w	8a648 <_vfiprintf_r+0x3f4>
   8af1e:	9e05      	ldr	r6, [sp, #20]
   8af20:	4690      	mov	r8, r2
   8af22:	f856 2b04 	ldr.w	r2, [r6], #4
   8af26:	2301      	movs	r3, #1
   8af28:	9605      	str	r6, [sp, #20]
   8af2a:	b2d6      	uxtb	r6, r2
   8af2c:	f7ff bad7 	b.w	8a4de <_vfiprintf_r+0x28a>
   8af30:	f343 18c0 	sbfx	r8, r3, #7, #1
   8af34:	b25e      	sxtb	r6, r3
   8af36:	4643      	mov	r3, r8
   8af38:	f7ff ba74 	b.w	8a424 <_vfiprintf_r+0x1d0>
   8af3c:	9e05      	ldr	r6, [sp, #20]
   8af3e:	4690      	mov	r8, r2
   8af40:	f856 3b04 	ldr.w	r3, [r6], #4
   8af44:	9605      	str	r6, [sp, #20]
   8af46:	b2de      	uxtb	r6, r3
   8af48:	f7ff bac6 	b.w	8a4d8 <_vfiprintf_r+0x284>
   8af4c:	9e05      	ldr	r6, [sp, #20]
   8af4e:	4688      	mov	r8, r1
   8af50:	f856 2b04 	ldr.w	r2, [r6], #4
   8af54:	9605      	str	r6, [sp, #20]
   8af56:	b2d6      	uxtb	r6, r2
   8af58:	e70d      	b.n	8ad76 <_vfiprintf_r+0xb22>
   8af5a:	9e05      	ldr	r6, [sp, #20]
   8af5c:	9a04      	ldr	r2, [sp, #16]
   8af5e:	f856 3b04 	ldr.w	r3, [r6], #4
   8af62:	801a      	strh	r2, [r3, #0]
   8af64:	9605      	str	r6, [sp, #20]
   8af66:	f7ff b9ae 	b.w	8a2c6 <_vfiprintf_r+0x72>
   8af6a:	6d88      	ldr	r0, [r1, #88]	; 0x58
   8af6c:	f7fd fe86 	bl	88c7c <__retarget_lock_release_recursive>
   8af70:	f7ff ba99 	b.w	8a4a6 <_vfiprintf_r+0x252>
   8af74:	f8cd b004 	str.w	fp, [sp, #4]
   8af78:	9605      	str	r6, [sp, #20]
   8af7a:	4683      	mov	fp, r0
   8af7c:	f7ff ba6c 	b.w	8a458 <_vfiprintf_r+0x204>
   8af80:	9911      	ldr	r1, [sp, #68]	; 0x44
   8af82:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8af84:	f8df a060 	ldr.w	sl, [pc, #96]	; 8afe8 <_vfiprintf_r+0xd94>
   8af88:	3101      	adds	r1, #1
   8af8a:	e5f0      	b.n	8ab6e <_vfiprintf_r+0x91a>
   8af8c:	9902      	ldr	r1, [sp, #8]
   8af8e:	9806      	ldr	r0, [sp, #24]
   8af90:	aa10      	add	r2, sp, #64	; 0x40
   8af92:	f7ff f923 	bl	8a1dc <__sprint_r.part.0>
   8af96:	2800      	cmp	r0, #0
   8af98:	f43f aae3 	beq.w	8a562 <_vfiprintf_r+0x30e>
   8af9c:	f7ff bae3 	b.w	8a566 <_vfiprintf_r+0x312>
   8afa0:	9811      	ldr	r0, [sp, #68]	; 0x44
   8afa2:	f8df a044 	ldr.w	sl, [pc, #68]	; 8afe8 <_vfiprintf_r+0xd94>
   8afa6:	3001      	adds	r0, #1
   8afa8:	e631      	b.n	8ac0e <_vfiprintf_r+0x9ba>
   8afaa:	9b02      	ldr	r3, [sp, #8]
   8afac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   8afae:	07db      	lsls	r3, r3, #31
   8afb0:	d407      	bmi.n	8afc2 <_vfiprintf_r+0xd6e>
   8afb2:	9b02      	ldr	r3, [sp, #8]
   8afb4:	899b      	ldrh	r3, [r3, #12]
   8afb6:	059f      	lsls	r7, r3, #22
   8afb8:	d403      	bmi.n	8afc2 <_vfiprintf_r+0xd6e>
   8afba:	9b02      	ldr	r3, [sp, #8]
   8afbc:	6d98      	ldr	r0, [r3, #88]	; 0x58
   8afbe:	f7fd fe5d 	bl	88c7c <__retarget_lock_release_recursive>
   8afc2:	f04f 33ff 	mov.w	r3, #4294967295
   8afc6:	9304      	str	r3, [sp, #16]
   8afc8:	f7ff bad6 	b.w	8a578 <_vfiprintf_r+0x324>
   8afcc:	9a05      	ldr	r2, [sp, #20]
   8afce:	787b      	ldrb	r3, [r7, #1]
   8afd0:	460f      	mov	r7, r1
   8afd2:	f852 1b04 	ldr.w	r1, [r2], #4
   8afd6:	9205      	str	r2, [sp, #20]
   8afd8:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
   8afdc:	f7ff b993 	b.w	8a306 <_vfiprintf_r+0xb2>
   8afe0:	0008c9cc 	.word	0x0008c9cc
   8afe4:	0008cc7c 	.word	0x0008cc7c
   8afe8:	0008cc6c 	.word	0x0008cc6c

0008afec <__sbprintf>:
   8afec:	b5f0      	push	{r4, r5, r6, r7, lr}
   8afee:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   8aff2:	4615      	mov	r5, r2
   8aff4:	2400      	movs	r4, #0
   8aff6:	4606      	mov	r6, r0
   8aff8:	461f      	mov	r7, r3
   8affa:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   8affe:	ab1a      	add	r3, sp, #104	; 0x68
   8b000:	9300      	str	r3, [sp, #0]
   8b002:	9304      	str	r3, [sp, #16]
   8b004:	898b      	ldrh	r3, [r1, #12]
   8b006:	a816      	add	r0, sp, #88	; 0x58
   8b008:	f023 0302 	bic.w	r3, r3, #2
   8b00c:	f8ad 300c 	strh.w	r3, [sp, #12]
   8b010:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8b012:	9406      	str	r4, [sp, #24]
   8b014:	9319      	str	r3, [sp, #100]	; 0x64
   8b016:	89cb      	ldrh	r3, [r1, #14]
   8b018:	460c      	mov	r4, r1
   8b01a:	f8ad 300e 	strh.w	r3, [sp, #14]
   8b01e:	69cb      	ldr	r3, [r1, #28]
   8b020:	f8cd c008 	str.w	ip, [sp, #8]
   8b024:	9307      	str	r3, [sp, #28]
   8b026:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8b028:	f8cd c014 	str.w	ip, [sp, #20]
   8b02c:	9309      	str	r3, [sp, #36]	; 0x24
   8b02e:	f7fd fe1f 	bl	88c70 <__retarget_lock_init_recursive>
   8b032:	462a      	mov	r2, r5
   8b034:	463b      	mov	r3, r7
   8b036:	4669      	mov	r1, sp
   8b038:	4630      	mov	r0, r6
   8b03a:	f7ff f90b 	bl	8a254 <_vfiprintf_r>
   8b03e:	1e05      	subs	r5, r0, #0
   8b040:	db07      	blt.n	8b052 <__sbprintf+0x66>
   8b042:	4669      	mov	r1, sp
   8b044:	4630      	mov	r0, r6
   8b046:	f000 f925 	bl	8b294 <_fflush_r>
   8b04a:	2800      	cmp	r0, #0
   8b04c:	bf18      	it	ne
   8b04e:	f04f 35ff 	movne.w	r5, #4294967295
   8b052:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8b056:	065b      	lsls	r3, r3, #25
   8b058:	d503      	bpl.n	8b062 <__sbprintf+0x76>
   8b05a:	89a3      	ldrh	r3, [r4, #12]
   8b05c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b060:	81a3      	strh	r3, [r4, #12]
   8b062:	9816      	ldr	r0, [sp, #88]	; 0x58
   8b064:	f7fd fe06 	bl	88c74 <__retarget_lock_close_recursive>
   8b068:	4628      	mov	r0, r5
   8b06a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   8b06e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0008b070 <__ascii_wctomb>:
   8b070:	4603      	mov	r3, r0
   8b072:	b149      	cbz	r1, 8b088 <__ascii_wctomb+0x18>
   8b074:	2aff      	cmp	r2, #255	; 0xff
   8b076:	d802      	bhi.n	8b07e <__ascii_wctomb+0xe>
   8b078:	2001      	movs	r0, #1
   8b07a:	700a      	strb	r2, [r1, #0]
   8b07c:	4770      	bx	lr
   8b07e:	228a      	movs	r2, #138	; 0x8a
   8b080:	f04f 30ff 	mov.w	r0, #4294967295
   8b084:	601a      	str	r2, [r3, #0]
   8b086:	4770      	bx	lr
   8b088:	4608      	mov	r0, r1
   8b08a:	4770      	bx	lr

0008b08c <__swsetup_r>:
   8b08c:	b538      	push	{r3, r4, r5, lr}
   8b08e:	4b33      	ldr	r3, [pc, #204]	; (8b15c <__swsetup_r+0xd0>)
   8b090:	4605      	mov	r5, r0
   8b092:	681b      	ldr	r3, [r3, #0]
   8b094:	460c      	mov	r4, r1
   8b096:	b10b      	cbz	r3, 8b09c <__swsetup_r+0x10>
   8b098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   8b09a:	b312      	cbz	r2, 8b0e2 <__swsetup_r+0x56>
   8b09c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b0a0:	0718      	lsls	r0, r3, #28
   8b0a2:	b29a      	uxth	r2, r3
   8b0a4:	d525      	bpl.n	8b0f2 <__swsetup_r+0x66>
   8b0a6:	6921      	ldr	r1, [r4, #16]
   8b0a8:	2900      	cmp	r1, #0
   8b0aa:	d02d      	beq.n	8b108 <__swsetup_r+0x7c>
   8b0ac:	f012 0001 	ands.w	r0, r2, #1
   8b0b0:	d007      	beq.n	8b0c2 <__swsetup_r+0x36>
   8b0b2:	2500      	movs	r5, #0
   8b0b4:	6960      	ldr	r0, [r4, #20]
   8b0b6:	60a5      	str	r5, [r4, #8]
   8b0b8:	4240      	negs	r0, r0
   8b0ba:	61a0      	str	r0, [r4, #24]
   8b0bc:	b139      	cbz	r1, 8b0ce <__swsetup_r+0x42>
   8b0be:	2000      	movs	r0, #0
   8b0c0:	bd38      	pop	{r3, r4, r5, pc}
   8b0c2:	0795      	lsls	r5, r2, #30
   8b0c4:	bf58      	it	pl
   8b0c6:	6960      	ldrpl	r0, [r4, #20]
   8b0c8:	60a0      	str	r0, [r4, #8]
   8b0ca:	2900      	cmp	r1, #0
   8b0cc:	d1f7      	bne.n	8b0be <__swsetup_r+0x32>
   8b0ce:	0612      	lsls	r2, r2, #24
   8b0d0:	bf58      	it	pl
   8b0d2:	4608      	movpl	r0, r1
   8b0d4:	d5f4      	bpl.n	8b0c0 <__swsetup_r+0x34>
   8b0d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b0da:	f04f 30ff 	mov.w	r0, #4294967295
   8b0de:	81a3      	strh	r3, [r4, #12]
   8b0e0:	bd38      	pop	{r3, r4, r5, pc}
   8b0e2:	4618      	mov	r0, r3
   8b0e4:	f000 f90a 	bl	8b2fc <__sinit>
   8b0e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b0ec:	0718      	lsls	r0, r3, #28
   8b0ee:	b29a      	uxth	r2, r3
   8b0f0:	d4d9      	bmi.n	8b0a6 <__swsetup_r+0x1a>
   8b0f2:	06d1      	lsls	r1, r2, #27
   8b0f4:	d52a      	bpl.n	8b14c <__swsetup_r+0xc0>
   8b0f6:	0752      	lsls	r2, r2, #29
   8b0f8:	d414      	bmi.n	8b124 <__swsetup_r+0x98>
   8b0fa:	6921      	ldr	r1, [r4, #16]
   8b0fc:	f043 0308 	orr.w	r3, r3, #8
   8b100:	81a3      	strh	r3, [r4, #12]
   8b102:	b29a      	uxth	r2, r3
   8b104:	2900      	cmp	r1, #0
   8b106:	d1d1      	bne.n	8b0ac <__swsetup_r+0x20>
   8b108:	f402 7020 	and.w	r0, r2, #640	; 0x280
   8b10c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8b110:	d0cc      	beq.n	8b0ac <__swsetup_r+0x20>
   8b112:	4621      	mov	r1, r4
   8b114:	4628      	mov	r0, r5
   8b116:	f000 fba3 	bl	8b860 <__smakebuf_r>
   8b11a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b11e:	6921      	ldr	r1, [r4, #16]
   8b120:	b29a      	uxth	r2, r3
   8b122:	e7c3      	b.n	8b0ac <__swsetup_r+0x20>
   8b124:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8b126:	b151      	cbz	r1, 8b13e <__swsetup_r+0xb2>
   8b128:	f104 0240 	add.w	r2, r4, #64	; 0x40
   8b12c:	4291      	cmp	r1, r2
   8b12e:	d004      	beq.n	8b13a <__swsetup_r+0xae>
   8b130:	4628      	mov	r0, r5
   8b132:	f7fd fc99 	bl	88a68 <_free_r>
   8b136:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b13a:	2200      	movs	r2, #0
   8b13c:	6322      	str	r2, [r4, #48]	; 0x30
   8b13e:	2200      	movs	r2, #0
   8b140:	6921      	ldr	r1, [r4, #16]
   8b142:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   8b146:	e9c4 1200 	strd	r1, r2, [r4]
   8b14a:	e7d7      	b.n	8b0fc <__swsetup_r+0x70>
   8b14c:	2209      	movs	r2, #9
   8b14e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b152:	602a      	str	r2, [r5, #0]
   8b154:	f04f 30ff 	mov.w	r0, #4294967295
   8b158:	81a3      	strh	r3, [r4, #12]
   8b15a:	bd38      	pop	{r3, r4, r5, pc}
   8b15c:	20070b30 	.word	0x20070b30

0008b160 <abort>:
   8b160:	2006      	movs	r0, #6
   8b162:	b508      	push	{r3, lr}
   8b164:	f000 fbec 	bl	8b940 <raise>
   8b168:	2001      	movs	r0, #1
   8b16a:	f7f8 fccd 	bl	83b08 <_exit>
   8b16e:	bf00      	nop

0008b170 <__sflush_r>:
   8b170:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8b174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b176:	460c      	mov	r4, r1
   8b178:	0711      	lsls	r1, r2, #28
   8b17a:	4607      	mov	r7, r0
   8b17c:	d443      	bmi.n	8b206 <__sflush_r+0x96>
   8b17e:	6863      	ldr	r3, [r4, #4]
   8b180:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8b184:	2b00      	cmp	r3, #0
   8b186:	81a2      	strh	r2, [r4, #12]
   8b188:	dd5b      	ble.n	8b242 <__sflush_r+0xd2>
   8b18a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   8b18c:	2d00      	cmp	r5, #0
   8b18e:	d056      	beq.n	8b23e <__sflush_r+0xce>
   8b190:	2300      	movs	r3, #0
   8b192:	683e      	ldr	r6, [r7, #0]
   8b194:	603b      	str	r3, [r7, #0]
   8b196:	b293      	uxth	r3, r2
   8b198:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   8b19c:	d155      	bne.n	8b24a <__sflush_r+0xda>
   8b19e:	2301      	movs	r3, #1
   8b1a0:	4638      	mov	r0, r7
   8b1a2:	69e1      	ldr	r1, [r4, #28]
   8b1a4:	47a8      	blx	r5
   8b1a6:	1c42      	adds	r2, r0, #1
   8b1a8:	d065      	beq.n	8b276 <__sflush_r+0x106>
   8b1aa:	89a3      	ldrh	r3, [r4, #12]
   8b1ac:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   8b1ae:	075b      	lsls	r3, r3, #29
   8b1b0:	d505      	bpl.n	8b1be <__sflush_r+0x4e>
   8b1b2:	6863      	ldr	r3, [r4, #4]
   8b1b4:	1ac0      	subs	r0, r0, r3
   8b1b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8b1b8:	b10b      	cbz	r3, 8b1be <__sflush_r+0x4e>
   8b1ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8b1bc:	1ac0      	subs	r0, r0, r3
   8b1be:	4602      	mov	r2, r0
   8b1c0:	69e1      	ldr	r1, [r4, #28]
   8b1c2:	2300      	movs	r3, #0
   8b1c4:	4638      	mov	r0, r7
   8b1c6:	47a8      	blx	r5
   8b1c8:	1c41      	adds	r1, r0, #1
   8b1ca:	d140      	bne.n	8b24e <__sflush_r+0xde>
   8b1cc:	683b      	ldr	r3, [r7, #0]
   8b1ce:	2b00      	cmp	r3, #0
   8b1d0:	d03d      	beq.n	8b24e <__sflush_r+0xde>
   8b1d2:	2b1d      	cmp	r3, #29
   8b1d4:	d001      	beq.n	8b1da <__sflush_r+0x6a>
   8b1d6:	2b16      	cmp	r3, #22
   8b1d8:	d154      	bne.n	8b284 <__sflush_r+0x114>
   8b1da:	2200      	movs	r2, #0
   8b1dc:	89a3      	ldrh	r3, [r4, #12]
   8b1de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8b1e2:	81a3      	strh	r3, [r4, #12]
   8b1e4:	6923      	ldr	r3, [r4, #16]
   8b1e6:	e9c4 3200 	strd	r3, r2, [r4]
   8b1ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8b1ec:	603e      	str	r6, [r7, #0]
   8b1ee:	b331      	cbz	r1, 8b23e <__sflush_r+0xce>
   8b1f0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8b1f4:	4299      	cmp	r1, r3
   8b1f6:	d002      	beq.n	8b1fe <__sflush_r+0x8e>
   8b1f8:	4638      	mov	r0, r7
   8b1fa:	f7fd fc35 	bl	88a68 <_free_r>
   8b1fe:	2300      	movs	r3, #0
   8b200:	4618      	mov	r0, r3
   8b202:	6323      	str	r3, [r4, #48]	; 0x30
   8b204:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b206:	6926      	ldr	r6, [r4, #16]
   8b208:	b1ce      	cbz	r6, 8b23e <__sflush_r+0xce>
   8b20a:	b293      	uxth	r3, r2
   8b20c:	079a      	lsls	r2, r3, #30
   8b20e:	bf18      	it	ne
   8b210:	2300      	movne	r3, #0
   8b212:	6825      	ldr	r5, [r4, #0]
   8b214:	bf08      	it	eq
   8b216:	6963      	ldreq	r3, [r4, #20]
   8b218:	6026      	str	r6, [r4, #0]
   8b21a:	1bad      	subs	r5, r5, r6
   8b21c:	60a3      	str	r3, [r4, #8]
   8b21e:	e00c      	b.n	8b23a <__sflush_r+0xca>
   8b220:	462b      	mov	r3, r5
   8b222:	4632      	mov	r2, r6
   8b224:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8b228:	4638      	mov	r0, r7
   8b22a:	69e1      	ldr	r1, [r4, #28]
   8b22c:	47e0      	blx	ip
   8b22e:	f1b0 0c00 	subs.w	ip, r0, #0
   8b232:	eba5 050c 	sub.w	r5, r5, ip
   8b236:	4466      	add	r6, ip
   8b238:	dd16      	ble.n	8b268 <__sflush_r+0xf8>
   8b23a:	2d00      	cmp	r5, #0
   8b23c:	dcf0      	bgt.n	8b220 <__sflush_r+0xb0>
   8b23e:	2000      	movs	r0, #0
   8b240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b242:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8b244:	2b00      	cmp	r3, #0
   8b246:	dca0      	bgt.n	8b18a <__sflush_r+0x1a>
   8b248:	e7f9      	b.n	8b23e <__sflush_r+0xce>
   8b24a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   8b24c:	e7af      	b.n	8b1ae <__sflush_r+0x3e>
   8b24e:	2200      	movs	r2, #0
   8b250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b254:	6062      	str	r2, [r4, #4]
   8b256:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8b25a:	6922      	ldr	r2, [r4, #16]
   8b25c:	81a3      	strh	r3, [r4, #12]
   8b25e:	04db      	lsls	r3, r3, #19
   8b260:	6022      	str	r2, [r4, #0]
   8b262:	d5c2      	bpl.n	8b1ea <__sflush_r+0x7a>
   8b264:	6520      	str	r0, [r4, #80]	; 0x50
   8b266:	e7c0      	b.n	8b1ea <__sflush_r+0x7a>
   8b268:	89a3      	ldrh	r3, [r4, #12]
   8b26a:	f04f 30ff 	mov.w	r0, #4294967295
   8b26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b272:	81a3      	strh	r3, [r4, #12]
   8b274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b276:	683b      	ldr	r3, [r7, #0]
   8b278:	2b00      	cmp	r3, #0
   8b27a:	d096      	beq.n	8b1aa <__sflush_r+0x3a>
   8b27c:	2b1d      	cmp	r3, #29
   8b27e:	d006      	beq.n	8b28e <__sflush_r+0x11e>
   8b280:	2b16      	cmp	r3, #22
   8b282:	d004      	beq.n	8b28e <__sflush_r+0x11e>
   8b284:	89a3      	ldrh	r3, [r4, #12]
   8b286:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b28a:	81a3      	strh	r3, [r4, #12]
   8b28c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b28e:	2000      	movs	r0, #0
   8b290:	603e      	str	r6, [r7, #0]
   8b292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0008b294 <_fflush_r>:
   8b294:	b538      	push	{r3, r4, r5, lr}
   8b296:	4605      	mov	r5, r0
   8b298:	460c      	mov	r4, r1
   8b29a:	b108      	cbz	r0, 8b2a0 <_fflush_r+0xc>
   8b29c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8b29e:	b1a3      	cbz	r3, 8b2ca <_fflush_r+0x36>
   8b2a0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8b2a4:	b1b8      	cbz	r0, 8b2d6 <_fflush_r+0x42>
   8b2a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b2a8:	07db      	lsls	r3, r3, #31
   8b2aa:	d401      	bmi.n	8b2b0 <_fflush_r+0x1c>
   8b2ac:	0581      	lsls	r1, r0, #22
   8b2ae:	d515      	bpl.n	8b2dc <_fflush_r+0x48>
   8b2b0:	4628      	mov	r0, r5
   8b2b2:	4621      	mov	r1, r4
   8b2b4:	f7ff ff5c 	bl	8b170 <__sflush_r>
   8b2b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b2ba:	4605      	mov	r5, r0
   8b2bc:	07da      	lsls	r2, r3, #31
   8b2be:	d402      	bmi.n	8b2c6 <_fflush_r+0x32>
   8b2c0:	89a3      	ldrh	r3, [r4, #12]
   8b2c2:	059b      	lsls	r3, r3, #22
   8b2c4:	d50e      	bpl.n	8b2e4 <_fflush_r+0x50>
   8b2c6:	4628      	mov	r0, r5
   8b2c8:	bd38      	pop	{r3, r4, r5, pc}
   8b2ca:	f000 f817 	bl	8b2fc <__sinit>
   8b2ce:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8b2d2:	2800      	cmp	r0, #0
   8b2d4:	d1e7      	bne.n	8b2a6 <_fflush_r+0x12>
   8b2d6:	4605      	mov	r5, r0
   8b2d8:	4628      	mov	r0, r5
   8b2da:	bd38      	pop	{r3, r4, r5, pc}
   8b2dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b2de:	f7fd fccb 	bl	88c78 <__retarget_lock_acquire_recursive>
   8b2e2:	e7e5      	b.n	8b2b0 <_fflush_r+0x1c>
   8b2e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b2e6:	f7fd fcc9 	bl	88c7c <__retarget_lock_release_recursive>
   8b2ea:	4628      	mov	r0, r5
   8b2ec:	bd38      	pop	{r3, r4, r5, pc}
   8b2ee:	bf00      	nop

0008b2f0 <_cleanup_r>:
   8b2f0:	4901      	ldr	r1, [pc, #4]	; (8b2f8 <_cleanup_r+0x8>)
   8b2f2:	f000 ba91 	b.w	8b818 <_fwalk_reent>
   8b2f6:	bf00      	nop
   8b2f8:	0008bb91 	.word	0x0008bb91

0008b2fc <__sinit>:
   8b2fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b300:	4682      	mov	sl, r0
   8b302:	4839      	ldr	r0, [pc, #228]	; (8b3e8 <__sinit+0xec>)
   8b304:	f7fd fcb8 	bl	88c78 <__retarget_lock_acquire_recursive>
   8b308:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
   8b30c:	2c00      	cmp	r4, #0
   8b30e:	d166      	bne.n	8b3de <__sinit+0xe2>
   8b310:	2304      	movs	r3, #4
   8b312:	2203      	movs	r2, #3
   8b314:	4935      	ldr	r1, [pc, #212]	; (8b3ec <__sinit+0xf0>)
   8b316:	f8da 5004 	ldr.w	r5, [sl, #4]
   8b31a:	f8ca 103c 	str.w	r1, [sl, #60]	; 0x3c
   8b31e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8b3f0 <__sinit+0xf4>
   8b322:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8b3f4 <__sinit+0xf8>
   8b326:	4f34      	ldr	r7, [pc, #208]	; (8b3f8 <__sinit+0xfc>)
   8b328:	4e34      	ldr	r6, [pc, #208]	; (8b3fc <__sinit+0x100>)
   8b32a:	f50a 713b 	add.w	r1, sl, #748	; 0x2ec
   8b32e:	e9ca 21b9 	strd	r2, r1, [sl, #740]	; 0x2e4
   8b332:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
   8b336:	4621      	mov	r1, r4
   8b338:	60eb      	str	r3, [r5, #12]
   8b33a:	2208      	movs	r2, #8
   8b33c:	e9c5 4400 	strd	r4, r4, [r5]
   8b340:	e9c5 4404 	strd	r4, r4, [r5, #16]
   8b344:	666c      	str	r4, [r5, #100]	; 0x64
   8b346:	60ac      	str	r4, [r5, #8]
   8b348:	61ac      	str	r4, [r5, #24]
   8b34a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8b34e:	f7fa fcf1 	bl	85d34 <memset>
   8b352:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8b356:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   8b35a:	62ee      	str	r6, [r5, #44]	; 0x2c
   8b35c:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8b360:	f7fd fc86 	bl	88c70 <__retarget_lock_init_recursive>
   8b364:	f8da 5008 	ldr.w	r5, [sl, #8]
   8b368:	4b25      	ldr	r3, [pc, #148]	; (8b400 <__sinit+0x104>)
   8b36a:	4621      	mov	r1, r4
   8b36c:	60eb      	str	r3, [r5, #12]
   8b36e:	2208      	movs	r2, #8
   8b370:	e9c5 4400 	strd	r4, r4, [r5]
   8b374:	e9c5 4404 	strd	r4, r4, [r5, #16]
   8b378:	666c      	str	r4, [r5, #100]	; 0x64
   8b37a:	60ac      	str	r4, [r5, #8]
   8b37c:	61ac      	str	r4, [r5, #24]
   8b37e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8b382:	f7fa fcd7 	bl	85d34 <memset>
   8b386:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8b38a:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   8b38e:	62ee      	str	r6, [r5, #44]	; 0x2c
   8b390:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8b394:	f7fd fc6c 	bl	88c70 <__retarget_lock_init_recursive>
   8b398:	f8da 500c 	ldr.w	r5, [sl, #12]
   8b39c:	4b19      	ldr	r3, [pc, #100]	; (8b404 <__sinit+0x108>)
   8b39e:	4621      	mov	r1, r4
   8b3a0:	60eb      	str	r3, [r5, #12]
   8b3a2:	2208      	movs	r2, #8
   8b3a4:	e9c5 4400 	strd	r4, r4, [r5]
   8b3a8:	e9c5 4404 	strd	r4, r4, [r5, #16]
   8b3ac:	666c      	str	r4, [r5, #100]	; 0x64
   8b3ae:	60ac      	str	r4, [r5, #8]
   8b3b0:	61ac      	str	r4, [r5, #24]
   8b3b2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8b3b6:	f7fa fcbd 	bl	85d34 <memset>
   8b3ba:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8b3be:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8b3c2:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
   8b3c6:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
   8b3ca:	f7fd fc51 	bl	88c70 <__retarget_lock_init_recursive>
   8b3ce:	2301      	movs	r3, #1
   8b3d0:	4805      	ldr	r0, [pc, #20]	; (8b3e8 <__sinit+0xec>)
   8b3d2:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
   8b3d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b3da:	f7fd bc4f 	b.w	88c7c <__retarget_lock_release_recursive>
   8b3de:	4802      	ldr	r0, [pc, #8]	; (8b3e8 <__sinit+0xec>)
   8b3e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b3e4:	f7fd bc4a 	b.w	88c7c <__retarget_lock_release_recursive>
   8b3e8:	20073318 	.word	0x20073318
   8b3ec:	0008b2f1 	.word	0x0008b2f1
   8b3f0:	0008b9c9 	.word	0x0008b9c9
   8b3f4:	0008b9ed 	.word	0x0008b9ed
   8b3f8:	0008ba2d 	.word	0x0008ba2d
   8b3fc:	0008ba4d 	.word	0x0008ba4d
   8b400:	00010009 	.word	0x00010009
   8b404:	00020012 	.word	0x00020012

0008b408 <__sfp_lock_acquire>:
   8b408:	4801      	ldr	r0, [pc, #4]	; (8b410 <__sfp_lock_acquire+0x8>)
   8b40a:	f7fd bc35 	b.w	88c78 <__retarget_lock_acquire_recursive>
   8b40e:	bf00      	nop
   8b410:	20073314 	.word	0x20073314

0008b414 <__sfp_lock_release>:
   8b414:	4801      	ldr	r0, [pc, #4]	; (8b41c <__sfp_lock_release+0x8>)
   8b416:	f7fd bc31 	b.w	88c7c <__retarget_lock_release_recursive>
   8b41a:	bf00      	nop
   8b41c:	20073314 	.word	0x20073314

0008b420 <__fputwc>:
   8b420:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8b424:	b083      	sub	sp, #12
   8b426:	4607      	mov	r7, r0
   8b428:	4688      	mov	r8, r1
   8b42a:	4614      	mov	r4, r2
   8b42c:	f7fe fc50 	bl	89cd0 <__locale_mb_cur_max>
   8b430:	2801      	cmp	r0, #1
   8b432:	d103      	bne.n	8b43c <__fputwc+0x1c>
   8b434:	f108 33ff 	add.w	r3, r8, #4294967295
   8b438:	2bfe      	cmp	r3, #254	; 0xfe
   8b43a:	d933      	bls.n	8b4a4 <__fputwc+0x84>
   8b43c:	4642      	mov	r2, r8
   8b43e:	4638      	mov	r0, r7
   8b440:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8b444:	a901      	add	r1, sp, #4
   8b446:	f000 fb5d 	bl	8bb04 <_wcrtomb_r>
   8b44a:	1c42      	adds	r2, r0, #1
   8b44c:	4606      	mov	r6, r0
   8b44e:	d02f      	beq.n	8b4b0 <__fputwc+0x90>
   8b450:	b318      	cbz	r0, 8b49a <__fputwc+0x7a>
   8b452:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8b456:	2500      	movs	r5, #0
   8b458:	f10d 0905 	add.w	r9, sp, #5
   8b45c:	e008      	b.n	8b470 <__fputwc+0x50>
   8b45e:	6823      	ldr	r3, [r4, #0]
   8b460:	1c5a      	adds	r2, r3, #1
   8b462:	6022      	str	r2, [r4, #0]
   8b464:	7019      	strb	r1, [r3, #0]
   8b466:	3501      	adds	r5, #1
   8b468:	42b5      	cmp	r5, r6
   8b46a:	d216      	bcs.n	8b49a <__fputwc+0x7a>
   8b46c:	f819 1b01 	ldrb.w	r1, [r9], #1
   8b470:	68a3      	ldr	r3, [r4, #8]
   8b472:	3b01      	subs	r3, #1
   8b474:	2b00      	cmp	r3, #0
   8b476:	60a3      	str	r3, [r4, #8]
   8b478:	daf1      	bge.n	8b45e <__fputwc+0x3e>
   8b47a:	69a2      	ldr	r2, [r4, #24]
   8b47c:	4293      	cmp	r3, r2
   8b47e:	db01      	blt.n	8b484 <__fputwc+0x64>
   8b480:	290a      	cmp	r1, #10
   8b482:	d1ec      	bne.n	8b45e <__fputwc+0x3e>
   8b484:	4622      	mov	r2, r4
   8b486:	4638      	mov	r0, r7
   8b488:	f000 fae4 	bl	8ba54 <__swbuf_r>
   8b48c:	1c43      	adds	r3, r0, #1
   8b48e:	d1ea      	bne.n	8b466 <__fputwc+0x46>
   8b490:	4606      	mov	r6, r0
   8b492:	4630      	mov	r0, r6
   8b494:	b003      	add	sp, #12
   8b496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8b49a:	4646      	mov	r6, r8
   8b49c:	4630      	mov	r0, r6
   8b49e:	b003      	add	sp, #12
   8b4a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8b4a4:	fa5f f188 	uxtb.w	r1, r8
   8b4a8:	4606      	mov	r6, r0
   8b4aa:	f88d 1004 	strb.w	r1, [sp, #4]
   8b4ae:	e7d2      	b.n	8b456 <__fputwc+0x36>
   8b4b0:	4630      	mov	r0, r6
   8b4b2:	89a3      	ldrh	r3, [r4, #12]
   8b4b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b4b8:	81a3      	strh	r3, [r4, #12]
   8b4ba:	b003      	add	sp, #12
   8b4bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008b4c0 <_fputwc_r>:
   8b4c0:	b530      	push	{r4, r5, lr}
   8b4c2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8b4c4:	4614      	mov	r4, r2
   8b4c6:	f013 0f01 	tst.w	r3, #1
   8b4ca:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8b4ce:	4605      	mov	r5, r0
   8b4d0:	b083      	sub	sp, #12
   8b4d2:	b29a      	uxth	r2, r3
   8b4d4:	d101      	bne.n	8b4da <_fputwc_r+0x1a>
   8b4d6:	0598      	lsls	r0, r3, #22
   8b4d8:	d51c      	bpl.n	8b514 <_fputwc_r+0x54>
   8b4da:	0490      	lsls	r0, r2, #18
   8b4dc:	d406      	bmi.n	8b4ec <_fputwc_r+0x2c>
   8b4de:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8b4e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8b4e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8b4e8:	81a3      	strh	r3, [r4, #12]
   8b4ea:	6662      	str	r2, [r4, #100]	; 0x64
   8b4ec:	4622      	mov	r2, r4
   8b4ee:	4628      	mov	r0, r5
   8b4f0:	f7ff ff96 	bl	8b420 <__fputwc>
   8b4f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b4f6:	4605      	mov	r5, r0
   8b4f8:	07da      	lsls	r2, r3, #31
   8b4fa:	d402      	bmi.n	8b502 <_fputwc_r+0x42>
   8b4fc:	89a3      	ldrh	r3, [r4, #12]
   8b4fe:	059b      	lsls	r3, r3, #22
   8b500:	d502      	bpl.n	8b508 <_fputwc_r+0x48>
   8b502:	4628      	mov	r0, r5
   8b504:	b003      	add	sp, #12
   8b506:	bd30      	pop	{r4, r5, pc}
   8b508:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b50a:	f7fd fbb7 	bl	88c7c <__retarget_lock_release_recursive>
   8b50e:	4628      	mov	r0, r5
   8b510:	b003      	add	sp, #12
   8b512:	bd30      	pop	{r4, r5, pc}
   8b514:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b516:	9101      	str	r1, [sp, #4]
   8b518:	f7fd fbae 	bl	88c78 <__retarget_lock_acquire_recursive>
   8b51c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b520:	9901      	ldr	r1, [sp, #4]
   8b522:	b29a      	uxth	r2, r3
   8b524:	e7d9      	b.n	8b4da <_fputwc_r+0x1a>
   8b526:	bf00      	nop

0008b528 <__sfvwrite_r>:
   8b528:	6893      	ldr	r3, [r2, #8]
   8b52a:	2b00      	cmp	r3, #0
   8b52c:	f000 80b7 	beq.w	8b69e <__sfvwrite_r+0x176>
   8b530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b534:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   8b538:	460c      	mov	r4, r1
   8b53a:	0719      	lsls	r1, r3, #28
   8b53c:	4680      	mov	r8, r0
   8b53e:	4617      	mov	r7, r2
   8b540:	b083      	sub	sp, #12
   8b542:	b298      	uxth	r0, r3
   8b544:	d525      	bpl.n	8b592 <__sfvwrite_r+0x6a>
   8b546:	6923      	ldr	r3, [r4, #16]
   8b548:	b31b      	cbz	r3, 8b592 <__sfvwrite_r+0x6a>
   8b54a:	f010 0302 	ands.w	r3, r0, #2
   8b54e:	683d      	ldr	r5, [r7, #0]
   8b550:	d02d      	beq.n	8b5ae <__sfvwrite_r+0x86>
   8b552:	f04f 0b00 	mov.w	fp, #0
   8b556:	465e      	mov	r6, fp
   8b558:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8b814 <__sfvwrite_r+0x2ec>
   8b55c:	2e00      	cmp	r6, #0
   8b55e:	f000 808b 	beq.w	8b678 <__sfvwrite_r+0x150>
   8b562:	4556      	cmp	r6, sl
   8b564:	4633      	mov	r3, r6
   8b566:	465a      	mov	r2, fp
   8b568:	bf28      	it	cs
   8b56a:	4653      	movcs	r3, sl
   8b56c:	4640      	mov	r0, r8
   8b56e:	69e1      	ldr	r1, [r4, #28]
   8b570:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8b574:	47e0      	blx	ip
   8b576:	2800      	cmp	r0, #0
   8b578:	f340 8087 	ble.w	8b68a <__sfvwrite_r+0x162>
   8b57c:	68bb      	ldr	r3, [r7, #8]
   8b57e:	4483      	add	fp, r0
   8b580:	1a1b      	subs	r3, r3, r0
   8b582:	1a36      	subs	r6, r6, r0
   8b584:	60bb      	str	r3, [r7, #8]
   8b586:	2b00      	cmp	r3, #0
   8b588:	d1e8      	bne.n	8b55c <__sfvwrite_r+0x34>
   8b58a:	2000      	movs	r0, #0
   8b58c:	b003      	add	sp, #12
   8b58e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b592:	4621      	mov	r1, r4
   8b594:	4640      	mov	r0, r8
   8b596:	f7ff fd79 	bl	8b08c <__swsetup_r>
   8b59a:	2800      	cmp	r0, #0
   8b59c:	f040 8136 	bne.w	8b80c <__sfvwrite_r+0x2e4>
   8b5a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b5a4:	683d      	ldr	r5, [r7, #0]
   8b5a6:	b298      	uxth	r0, r3
   8b5a8:	f010 0302 	ands.w	r3, r0, #2
   8b5ac:	d1d1      	bne.n	8b552 <__sfvwrite_r+0x2a>
   8b5ae:	f010 0901 	ands.w	r9, r0, #1
   8b5b2:	d176      	bne.n	8b6a2 <__sfvwrite_r+0x17a>
   8b5b4:	464e      	mov	r6, r9
   8b5b6:	2e00      	cmp	r6, #0
   8b5b8:	d05a      	beq.n	8b670 <__sfvwrite_r+0x148>
   8b5ba:	0582      	lsls	r2, r0, #22
   8b5bc:	f8d4 b008 	ldr.w	fp, [r4, #8]
   8b5c0:	f140 80b5 	bpl.w	8b72e <__sfvwrite_r+0x206>
   8b5c4:	45b3      	cmp	fp, r6
   8b5c6:	465a      	mov	r2, fp
   8b5c8:	f200 80cd 	bhi.w	8b766 <__sfvwrite_r+0x23e>
   8b5cc:	f410 6f90 	tst.w	r0, #1152	; 0x480
   8b5d0:	f000 80cb 	beq.w	8b76a <__sfvwrite_r+0x242>
   8b5d4:	6823      	ldr	r3, [r4, #0]
   8b5d6:	6921      	ldr	r1, [r4, #16]
   8b5d8:	eba3 0b01 	sub.w	fp, r3, r1
   8b5dc:	6963      	ldr	r3, [r4, #20]
   8b5de:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   8b5e2:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   8b5e6:	f10b 0301 	add.w	r3, fp, #1
   8b5ea:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   8b5ee:	4433      	add	r3, r6
   8b5f0:	4553      	cmp	r3, sl
   8b5f2:	4652      	mov	r2, sl
   8b5f4:	bf84      	itt	hi
   8b5f6:	469a      	movhi	sl, r3
   8b5f8:	4652      	movhi	r2, sl
   8b5fa:	0543      	lsls	r3, r0, #21
   8b5fc:	f140 80ea 	bpl.w	8b7d4 <__sfvwrite_r+0x2ac>
   8b600:	4611      	mov	r1, r2
   8b602:	4640      	mov	r0, r8
   8b604:	f7fd fb3c 	bl	88c80 <_malloc_r>
   8b608:	2800      	cmp	r0, #0
   8b60a:	f000 80f9 	beq.w	8b800 <__sfvwrite_r+0x2d8>
   8b60e:	465a      	mov	r2, fp
   8b610:	6921      	ldr	r1, [r4, #16]
   8b612:	9001      	str	r0, [sp, #4]
   8b614:	f7fa fb18 	bl	85c48 <memcpy>
   8b618:	89a2      	ldrh	r2, [r4, #12]
   8b61a:	9b01      	ldr	r3, [sp, #4]
   8b61c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8b620:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8b624:	81a2      	strh	r2, [r4, #12]
   8b626:	eb03 000b 	add.w	r0, r3, fp
   8b62a:	6123      	str	r3, [r4, #16]
   8b62c:	4632      	mov	r2, r6
   8b62e:	ebaa 030b 	sub.w	r3, sl, fp
   8b632:	46b3      	mov	fp, r6
   8b634:	f8c4 a014 	str.w	sl, [r4, #20]
   8b638:	60a3      	str	r3, [r4, #8]
   8b63a:	6020      	str	r0, [r4, #0]
   8b63c:	46b2      	mov	sl, r6
   8b63e:	2600      	movs	r6, #0
   8b640:	4649      	mov	r1, r9
   8b642:	9201      	str	r2, [sp, #4]
   8b644:	f7fe fb60 	bl	89d08 <memmove>
   8b648:	68a3      	ldr	r3, [r4, #8]
   8b64a:	6821      	ldr	r1, [r4, #0]
   8b64c:	9a01      	ldr	r2, [sp, #4]
   8b64e:	eba3 030b 	sub.w	r3, r3, fp
   8b652:	440a      	add	r2, r1
   8b654:	60a3      	str	r3, [r4, #8]
   8b656:	6022      	str	r2, [r4, #0]
   8b658:	68b8      	ldr	r0, [r7, #8]
   8b65a:	44d1      	add	r9, sl
   8b65c:	eba0 000a 	sub.w	r0, r0, sl
   8b660:	60b8      	str	r0, [r7, #8]
   8b662:	2800      	cmp	r0, #0
   8b664:	d091      	beq.n	8b58a <__sfvwrite_r+0x62>
   8b666:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8b66a:	b280      	uxth	r0, r0
   8b66c:	2e00      	cmp	r6, #0
   8b66e:	d1a4      	bne.n	8b5ba <__sfvwrite_r+0x92>
   8b670:	e9d5 9600 	ldrd	r9, r6, [r5]
   8b674:	3508      	adds	r5, #8
   8b676:	e79e      	b.n	8b5b6 <__sfvwrite_r+0x8e>
   8b678:	e9d5 b600 	ldrd	fp, r6, [r5]
   8b67c:	3508      	adds	r5, #8
   8b67e:	e76d      	b.n	8b55c <__sfvwrite_r+0x34>
   8b680:	4621      	mov	r1, r4
   8b682:	4640      	mov	r0, r8
   8b684:	f7ff fe06 	bl	8b294 <_fflush_r>
   8b688:	b380      	cbz	r0, 8b6ec <__sfvwrite_r+0x1c4>
   8b68a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b68e:	f04f 30ff 	mov.w	r0, #4294967295
   8b692:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b696:	81a3      	strh	r3, [r4, #12]
   8b698:	b003      	add	sp, #12
   8b69a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b69e:	2000      	movs	r0, #0
   8b6a0:	4770      	bx	lr
   8b6a2:	461e      	mov	r6, r3
   8b6a4:	46aa      	mov	sl, r5
   8b6a6:	4699      	mov	r9, r3
   8b6a8:	4618      	mov	r0, r3
   8b6aa:	461d      	mov	r5, r3
   8b6ac:	b356      	cbz	r6, 8b704 <__sfvwrite_r+0x1dc>
   8b6ae:	2800      	cmp	r0, #0
   8b6b0:	d032      	beq.n	8b718 <__sfvwrite_r+0x1f0>
   8b6b2:	464a      	mov	r2, r9
   8b6b4:	6820      	ldr	r0, [r4, #0]
   8b6b6:	6921      	ldr	r1, [r4, #16]
   8b6b8:	42b2      	cmp	r2, r6
   8b6ba:	bf28      	it	cs
   8b6bc:	4632      	movcs	r2, r6
   8b6be:	4288      	cmp	r0, r1
   8b6c0:	6963      	ldr	r3, [r4, #20]
   8b6c2:	d904      	bls.n	8b6ce <__sfvwrite_r+0x1a6>
   8b6c4:	68a1      	ldr	r1, [r4, #8]
   8b6c6:	eb03 0b01 	add.w	fp, r3, r1
   8b6ca:	455a      	cmp	r2, fp
   8b6cc:	dc74      	bgt.n	8b7b8 <__sfvwrite_r+0x290>
   8b6ce:	4293      	cmp	r3, r2
   8b6d0:	dc65      	bgt.n	8b79e <__sfvwrite_r+0x276>
   8b6d2:	462a      	mov	r2, r5
   8b6d4:	4640      	mov	r0, r8
   8b6d6:	69e1      	ldr	r1, [r4, #28]
   8b6d8:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8b6dc:	47e0      	blx	ip
   8b6de:	f1b0 0b00 	subs.w	fp, r0, #0
   8b6e2:	ddd2      	ble.n	8b68a <__sfvwrite_r+0x162>
   8b6e4:	ebb9 090b 	subs.w	r9, r9, fp
   8b6e8:	d0ca      	beq.n	8b680 <__sfvwrite_r+0x158>
   8b6ea:	2001      	movs	r0, #1
   8b6ec:	68bb      	ldr	r3, [r7, #8]
   8b6ee:	445d      	add	r5, fp
   8b6f0:	eba3 030b 	sub.w	r3, r3, fp
   8b6f4:	eba6 060b 	sub.w	r6, r6, fp
   8b6f8:	60bb      	str	r3, [r7, #8]
   8b6fa:	2b00      	cmp	r3, #0
   8b6fc:	f43f af45 	beq.w	8b58a <__sfvwrite_r+0x62>
   8b700:	2e00      	cmp	r6, #0
   8b702:	d1d4      	bne.n	8b6ae <__sfvwrite_r+0x186>
   8b704:	f10a 0308 	add.w	r3, sl, #8
   8b708:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8b70c:	469a      	mov	sl, r3
   8b70e:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8b712:	3308      	adds	r3, #8
   8b714:	2e00      	cmp	r6, #0
   8b716:	d0f7      	beq.n	8b708 <__sfvwrite_r+0x1e0>
   8b718:	4632      	mov	r2, r6
   8b71a:	210a      	movs	r1, #10
   8b71c:	4628      	mov	r0, r5
   8b71e:	f7fd fd5b 	bl	891d8 <memchr>
   8b722:	2800      	cmp	r0, #0
   8b724:	d069      	beq.n	8b7fa <__sfvwrite_r+0x2d2>
   8b726:	3001      	adds	r0, #1
   8b728:	eba0 0905 	sub.w	r9, r0, r5
   8b72c:	e7c1      	b.n	8b6b2 <__sfvwrite_r+0x18a>
   8b72e:	6820      	ldr	r0, [r4, #0]
   8b730:	6923      	ldr	r3, [r4, #16]
   8b732:	4298      	cmp	r0, r3
   8b734:	d81b      	bhi.n	8b76e <__sfvwrite_r+0x246>
   8b736:	6963      	ldr	r3, [r4, #20]
   8b738:	42b3      	cmp	r3, r6
   8b73a:	d818      	bhi.n	8b76e <__sfvwrite_r+0x246>
   8b73c:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   8b740:	45b4      	cmp	ip, r6
   8b742:	bf28      	it	cs
   8b744:	46b4      	movcs	ip, r6
   8b746:	fb9c fcf3 	sdiv	ip, ip, r3
   8b74a:	464a      	mov	r2, r9
   8b74c:	fb03 f30c 	mul.w	r3, r3, ip
   8b750:	4640      	mov	r0, r8
   8b752:	69e1      	ldr	r1, [r4, #28]
   8b754:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8b758:	47e0      	blx	ip
   8b75a:	f1b0 0a00 	subs.w	sl, r0, #0
   8b75e:	dd94      	ble.n	8b68a <__sfvwrite_r+0x162>
   8b760:	eba6 060a 	sub.w	r6, r6, sl
   8b764:	e778      	b.n	8b658 <__sfvwrite_r+0x130>
   8b766:	46b3      	mov	fp, r6
   8b768:	4632      	mov	r2, r6
   8b76a:	6820      	ldr	r0, [r4, #0]
   8b76c:	e766      	b.n	8b63c <__sfvwrite_r+0x114>
   8b76e:	45b3      	cmp	fp, r6
   8b770:	46da      	mov	sl, fp
   8b772:	bf28      	it	cs
   8b774:	46b2      	movcs	sl, r6
   8b776:	4649      	mov	r1, r9
   8b778:	4652      	mov	r2, sl
   8b77a:	f7fe fac5 	bl	89d08 <memmove>
   8b77e:	68a3      	ldr	r3, [r4, #8]
   8b780:	6822      	ldr	r2, [r4, #0]
   8b782:	eba3 030a 	sub.w	r3, r3, sl
   8b786:	4452      	add	r2, sl
   8b788:	60a3      	str	r3, [r4, #8]
   8b78a:	6022      	str	r2, [r4, #0]
   8b78c:	2b00      	cmp	r3, #0
   8b78e:	d1e7      	bne.n	8b760 <__sfvwrite_r+0x238>
   8b790:	4621      	mov	r1, r4
   8b792:	4640      	mov	r0, r8
   8b794:	f7ff fd7e 	bl	8b294 <_fflush_r>
   8b798:	2800      	cmp	r0, #0
   8b79a:	d0e1      	beq.n	8b760 <__sfvwrite_r+0x238>
   8b79c:	e775      	b.n	8b68a <__sfvwrite_r+0x162>
   8b79e:	4629      	mov	r1, r5
   8b7a0:	4693      	mov	fp, r2
   8b7a2:	9201      	str	r2, [sp, #4]
   8b7a4:	f7fe fab0 	bl	89d08 <memmove>
   8b7a8:	68a3      	ldr	r3, [r4, #8]
   8b7aa:	9a01      	ldr	r2, [sp, #4]
   8b7ac:	1a9b      	subs	r3, r3, r2
   8b7ae:	60a3      	str	r3, [r4, #8]
   8b7b0:	6823      	ldr	r3, [r4, #0]
   8b7b2:	441a      	add	r2, r3
   8b7b4:	6022      	str	r2, [r4, #0]
   8b7b6:	e795      	b.n	8b6e4 <__sfvwrite_r+0x1bc>
   8b7b8:	4629      	mov	r1, r5
   8b7ba:	465a      	mov	r2, fp
   8b7bc:	f7fe faa4 	bl	89d08 <memmove>
   8b7c0:	6823      	ldr	r3, [r4, #0]
   8b7c2:	4621      	mov	r1, r4
   8b7c4:	445b      	add	r3, fp
   8b7c6:	4640      	mov	r0, r8
   8b7c8:	6023      	str	r3, [r4, #0]
   8b7ca:	f7ff fd63 	bl	8b294 <_fflush_r>
   8b7ce:	2800      	cmp	r0, #0
   8b7d0:	d088      	beq.n	8b6e4 <__sfvwrite_r+0x1bc>
   8b7d2:	e75a      	b.n	8b68a <__sfvwrite_r+0x162>
   8b7d4:	4640      	mov	r0, r8
   8b7d6:	f7fe fb13 	bl	89e00 <_realloc_r>
   8b7da:	4603      	mov	r3, r0
   8b7dc:	2800      	cmp	r0, #0
   8b7de:	f47f af22 	bne.w	8b626 <__sfvwrite_r+0xfe>
   8b7e2:	4640      	mov	r0, r8
   8b7e4:	6921      	ldr	r1, [r4, #16]
   8b7e6:	f7fd f93f 	bl	88a68 <_free_r>
   8b7ea:	220c      	movs	r2, #12
   8b7ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b7f0:	f8c8 2000 	str.w	r2, [r8]
   8b7f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8b7f8:	e749      	b.n	8b68e <__sfvwrite_r+0x166>
   8b7fa:	1c72      	adds	r2, r6, #1
   8b7fc:	4691      	mov	r9, r2
   8b7fe:	e759      	b.n	8b6b4 <__sfvwrite_r+0x18c>
   8b800:	220c      	movs	r2, #12
   8b802:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b806:	f8c8 2000 	str.w	r2, [r8]
   8b80a:	e740      	b.n	8b68e <__sfvwrite_r+0x166>
   8b80c:	f04f 30ff 	mov.w	r0, #4294967295
   8b810:	e6bc      	b.n	8b58c <__sfvwrite_r+0x64>
   8b812:	bf00      	nop
   8b814:	7ffffc00 	.word	0x7ffffc00

0008b818 <_fwalk_reent>:
   8b818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8b81c:	f04f 0900 	mov.w	r9, #0
   8b820:	4607      	mov	r7, r0
   8b822:	4688      	mov	r8, r1
   8b824:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8b828:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8b82c:	3d01      	subs	r5, #1
   8b82e:	d410      	bmi.n	8b852 <_fwalk_reent+0x3a>
   8b830:	89a3      	ldrh	r3, [r4, #12]
   8b832:	3d01      	subs	r5, #1
   8b834:	2b01      	cmp	r3, #1
   8b836:	d908      	bls.n	8b84a <_fwalk_reent+0x32>
   8b838:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8b83c:	3301      	adds	r3, #1
   8b83e:	d004      	beq.n	8b84a <_fwalk_reent+0x32>
   8b840:	4621      	mov	r1, r4
   8b842:	4638      	mov	r0, r7
   8b844:	47c0      	blx	r8
   8b846:	ea49 0900 	orr.w	r9, r9, r0
   8b84a:	1c6b      	adds	r3, r5, #1
   8b84c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8b850:	d1ee      	bne.n	8b830 <_fwalk_reent+0x18>
   8b852:	6836      	ldr	r6, [r6, #0]
   8b854:	2e00      	cmp	r6, #0
   8b856:	d1e7      	bne.n	8b828 <_fwalk_reent+0x10>
   8b858:	4648      	mov	r0, r9
   8b85a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8b85e:	bf00      	nop

0008b860 <__smakebuf_r>:
   8b860:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b864:	898b      	ldrh	r3, [r1, #12]
   8b866:	460c      	mov	r4, r1
   8b868:	0799      	lsls	r1, r3, #30
   8b86a:	b096      	sub	sp, #88	; 0x58
   8b86c:	d508      	bpl.n	8b880 <__smakebuf_r+0x20>
   8b86e:	2201      	movs	r2, #1
   8b870:	f104 0343 	add.w	r3, r4, #67	; 0x43
   8b874:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8b878:	6023      	str	r3, [r4, #0]
   8b87a:	b016      	add	sp, #88	; 0x58
   8b87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b880:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8b884:	4606      	mov	r6, r0
   8b886:	2900      	cmp	r1, #0
   8b888:	db27      	blt.n	8b8da <__smakebuf_r+0x7a>
   8b88a:	466a      	mov	r2, sp
   8b88c:	f000 f9e6 	bl	8bc5c <_fstat_r>
   8b890:	2800      	cmp	r0, #0
   8b892:	db21      	blt.n	8b8d8 <__smakebuf_r+0x78>
   8b894:	9d01      	ldr	r5, [sp, #4]
   8b896:	f44f 6880 	mov.w	r8, #1024	; 0x400
   8b89a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   8b89e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   8b8a2:	fab5 f585 	clz	r5, r5
   8b8a6:	f44f 6700 	mov.w	r7, #2048	; 0x800
   8b8aa:	096d      	lsrs	r5, r5, #5
   8b8ac:	4641      	mov	r1, r8
   8b8ae:	4630      	mov	r0, r6
   8b8b0:	f7fd f9e6 	bl	88c80 <_malloc_r>
   8b8b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b8b8:	b1f0      	cbz	r0, 8b8f8 <__smakebuf_r+0x98>
   8b8ba:	4a20      	ldr	r2, [pc, #128]	; (8b93c <__smakebuf_r+0xdc>)
   8b8bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8b8c0:	63f2      	str	r2, [r6, #60]	; 0x3c
   8b8c2:	f8c4 8014 	str.w	r8, [r4, #20]
   8b8c6:	81a3      	strh	r3, [r4, #12]
   8b8c8:	6020      	str	r0, [r4, #0]
   8b8ca:	6120      	str	r0, [r4, #16]
   8b8cc:	bb35      	cbnz	r5, 8b91c <__smakebuf_r+0xbc>
   8b8ce:	433b      	orrs	r3, r7
   8b8d0:	81a3      	strh	r3, [r4, #12]
   8b8d2:	b016      	add	sp, #88	; 0x58
   8b8d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b8d8:	89a3      	ldrh	r3, [r4, #12]
   8b8da:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   8b8de:	d019      	beq.n	8b914 <__smakebuf_r+0xb4>
   8b8e0:	f04f 0840 	mov.w	r8, #64	; 0x40
   8b8e4:	4630      	mov	r0, r6
   8b8e6:	4641      	mov	r1, r8
   8b8e8:	2500      	movs	r5, #0
   8b8ea:	f7fd f9c9 	bl	88c80 <_malloc_r>
   8b8ee:	462f      	mov	r7, r5
   8b8f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b8f4:	2800      	cmp	r0, #0
   8b8f6:	d1e0      	bne.n	8b8ba <__smakebuf_r+0x5a>
   8b8f8:	059a      	lsls	r2, r3, #22
   8b8fa:	d4be      	bmi.n	8b87a <__smakebuf_r+0x1a>
   8b8fc:	2101      	movs	r1, #1
   8b8fe:	f023 0303 	bic.w	r3, r3, #3
   8b902:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8b906:	f043 0302 	orr.w	r3, r3, #2
   8b90a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   8b90e:	81a3      	strh	r3, [r4, #12]
   8b910:	6022      	str	r2, [r4, #0]
   8b912:	e7b2      	b.n	8b87a <__smakebuf_r+0x1a>
   8b914:	f44f 6880 	mov.w	r8, #1024	; 0x400
   8b918:	462f      	mov	r7, r5
   8b91a:	e7c7      	b.n	8b8ac <__smakebuf_r+0x4c>
   8b91c:	4630      	mov	r0, r6
   8b91e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8b922:	f000 f9af 	bl	8bc84 <_isatty_r>
   8b926:	b910      	cbnz	r0, 8b92e <__smakebuf_r+0xce>
   8b928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b92c:	e7cf      	b.n	8b8ce <__smakebuf_r+0x6e>
   8b92e:	89a3      	ldrh	r3, [r4, #12]
   8b930:	f023 0303 	bic.w	r3, r3, #3
   8b934:	f043 0301 	orr.w	r3, r3, #1
   8b938:	b21b      	sxth	r3, r3
   8b93a:	e7c8      	b.n	8b8ce <__smakebuf_r+0x6e>
   8b93c:	0008b2f1 	.word	0x0008b2f1

0008b940 <raise>:
   8b940:	b538      	push	{r3, r4, r5, lr}
   8b942:	4b15      	ldr	r3, [pc, #84]	; (8b998 <raise+0x58>)
   8b944:	281f      	cmp	r0, #31
   8b946:	681d      	ldr	r5, [r3, #0]
   8b948:	d820      	bhi.n	8b98c <raise+0x4c>
   8b94a:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
   8b94e:	4604      	mov	r4, r0
   8b950:	b162      	cbz	r2, 8b96c <raise+0x2c>
   8b952:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   8b956:	b14b      	cbz	r3, 8b96c <raise+0x2c>
   8b958:	2b01      	cmp	r3, #1
   8b95a:	d015      	beq.n	8b988 <raise+0x48>
   8b95c:	1c59      	adds	r1, r3, #1
   8b95e:	d00f      	beq.n	8b980 <raise+0x40>
   8b960:	2500      	movs	r5, #0
   8b962:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   8b966:	4798      	blx	r3
   8b968:	4628      	mov	r0, r5
   8b96a:	bd38      	pop	{r3, r4, r5, pc}
   8b96c:	4628      	mov	r0, r5
   8b96e:	f000 f829 	bl	8b9c4 <_getpid_r>
   8b972:	4622      	mov	r2, r4
   8b974:	4601      	mov	r1, r0
   8b976:	4628      	mov	r0, r5
   8b978:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8b97c:	f000 b80e 	b.w	8b99c <_kill_r>
   8b980:	2316      	movs	r3, #22
   8b982:	2001      	movs	r0, #1
   8b984:	602b      	str	r3, [r5, #0]
   8b986:	bd38      	pop	{r3, r4, r5, pc}
   8b988:	2000      	movs	r0, #0
   8b98a:	bd38      	pop	{r3, r4, r5, pc}
   8b98c:	2316      	movs	r3, #22
   8b98e:	f04f 30ff 	mov.w	r0, #4294967295
   8b992:	602b      	str	r3, [r5, #0]
   8b994:	bd38      	pop	{r3, r4, r5, pc}
   8b996:	bf00      	nop
   8b998:	20070b30 	.word	0x20070b30

0008b99c <_kill_r>:
   8b99c:	b570      	push	{r4, r5, r6, lr}
   8b99e:	2600      	movs	r6, #0
   8b9a0:	4d07      	ldr	r5, [pc, #28]	; (8b9c0 <_kill_r+0x24>)
   8b9a2:	4604      	mov	r4, r0
   8b9a4:	4608      	mov	r0, r1
   8b9a6:	4611      	mov	r1, r2
   8b9a8:	602e      	str	r6, [r5, #0]
   8b9aa:	f7f8 f8af 	bl	83b0c <_kill>
   8b9ae:	1c43      	adds	r3, r0, #1
   8b9b0:	d000      	beq.n	8b9b4 <_kill_r+0x18>
   8b9b2:	bd70      	pop	{r4, r5, r6, pc}
   8b9b4:	682b      	ldr	r3, [r5, #0]
   8b9b6:	2b00      	cmp	r3, #0
   8b9b8:	d0fb      	beq.n	8b9b2 <_kill_r+0x16>
   8b9ba:	6023      	str	r3, [r4, #0]
   8b9bc:	bd70      	pop	{r4, r5, r6, pc}
   8b9be:	bf00      	nop
   8b9c0:	20073350 	.word	0x20073350

0008b9c4 <_getpid_r>:
   8b9c4:	f7f8 b8a4 	b.w	83b10 <_getpid>

0008b9c8 <__sread>:
   8b9c8:	b510      	push	{r4, lr}
   8b9ca:	460c      	mov	r4, r1
   8b9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8b9d0:	f000 f980 	bl	8bcd4 <_read_r>
   8b9d4:	2800      	cmp	r0, #0
   8b9d6:	db03      	blt.n	8b9e0 <__sread+0x18>
   8b9d8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8b9da:	4403      	add	r3, r0
   8b9dc:	6523      	str	r3, [r4, #80]	; 0x50
   8b9de:	bd10      	pop	{r4, pc}
   8b9e0:	89a3      	ldrh	r3, [r4, #12]
   8b9e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8b9e6:	81a3      	strh	r3, [r4, #12]
   8b9e8:	bd10      	pop	{r4, pc}
   8b9ea:	bf00      	nop

0008b9ec <__swrite>:
   8b9ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b9f0:	460c      	mov	r4, r1
   8b9f2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8b9f6:	461f      	mov	r7, r3
   8b9f8:	05cb      	lsls	r3, r1, #23
   8b9fa:	4605      	mov	r5, r0
   8b9fc:	4616      	mov	r6, r2
   8b9fe:	d40b      	bmi.n	8ba18 <__swrite+0x2c>
   8ba00:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8ba04:	81a1      	strh	r1, [r4, #12]
   8ba06:	463b      	mov	r3, r7
   8ba08:	4632      	mov	r2, r6
   8ba0a:	4628      	mov	r0, r5
   8ba0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8ba10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8ba14:	f000 b894 	b.w	8bb40 <_write_r>
   8ba18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8ba1c:	2302      	movs	r3, #2
   8ba1e:	2200      	movs	r2, #0
   8ba20:	f000 f942 	bl	8bca8 <_lseek_r>
   8ba24:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8ba28:	e7ea      	b.n	8ba00 <__swrite+0x14>
   8ba2a:	bf00      	nop

0008ba2c <__sseek>:
   8ba2c:	b510      	push	{r4, lr}
   8ba2e:	460c      	mov	r4, r1
   8ba30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8ba34:	f000 f938 	bl	8bca8 <_lseek_r>
   8ba38:	89a3      	ldrh	r3, [r4, #12]
   8ba3a:	1c42      	adds	r2, r0, #1
   8ba3c:	bf0e      	itee	eq
   8ba3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8ba42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8ba46:	6520      	strne	r0, [r4, #80]	; 0x50
   8ba48:	81a3      	strh	r3, [r4, #12]
   8ba4a:	bd10      	pop	{r4, pc}

0008ba4c <__sclose>:
   8ba4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8ba50:	f000 b88c 	b.w	8bb6c <_close_r>

0008ba54 <__swbuf_r>:
   8ba54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ba56:	4606      	mov	r6, r0
   8ba58:	460d      	mov	r5, r1
   8ba5a:	4614      	mov	r4, r2
   8ba5c:	b110      	cbz	r0, 8ba64 <__swbuf_r+0x10>
   8ba5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8ba60:	2b00      	cmp	r3, #0
   8ba62:	d043      	beq.n	8baec <__swbuf_r+0x98>
   8ba64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8ba68:	69a3      	ldr	r3, [r4, #24]
   8ba6a:	0710      	lsls	r0, r2, #28
   8ba6c:	60a3      	str	r3, [r4, #8]
   8ba6e:	b291      	uxth	r1, r2
   8ba70:	d51b      	bpl.n	8baaa <__swbuf_r+0x56>
   8ba72:	6923      	ldr	r3, [r4, #16]
   8ba74:	b1cb      	cbz	r3, 8baaa <__swbuf_r+0x56>
   8ba76:	b2ed      	uxtb	r5, r5
   8ba78:	0489      	lsls	r1, r1, #18
   8ba7a:	462f      	mov	r7, r5
   8ba7c:	d522      	bpl.n	8bac4 <__swbuf_r+0x70>
   8ba7e:	6822      	ldr	r2, [r4, #0]
   8ba80:	6961      	ldr	r1, [r4, #20]
   8ba82:	1ad3      	subs	r3, r2, r3
   8ba84:	4299      	cmp	r1, r3
   8ba86:	dd29      	ble.n	8badc <__swbuf_r+0x88>
   8ba88:	3301      	adds	r3, #1
   8ba8a:	68a1      	ldr	r1, [r4, #8]
   8ba8c:	3901      	subs	r1, #1
   8ba8e:	60a1      	str	r1, [r4, #8]
   8ba90:	1c51      	adds	r1, r2, #1
   8ba92:	6021      	str	r1, [r4, #0]
   8ba94:	7015      	strb	r5, [r2, #0]
   8ba96:	6962      	ldr	r2, [r4, #20]
   8ba98:	429a      	cmp	r2, r3
   8ba9a:	d02a      	beq.n	8baf2 <__swbuf_r+0x9e>
   8ba9c:	89a3      	ldrh	r3, [r4, #12]
   8ba9e:	07db      	lsls	r3, r3, #31
   8baa0:	d501      	bpl.n	8baa6 <__swbuf_r+0x52>
   8baa2:	2d0a      	cmp	r5, #10
   8baa4:	d025      	beq.n	8baf2 <__swbuf_r+0x9e>
   8baa6:	4638      	mov	r0, r7
   8baa8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8baaa:	4621      	mov	r1, r4
   8baac:	4630      	mov	r0, r6
   8baae:	f7ff faed 	bl	8b08c <__swsetup_r>
   8bab2:	bb20      	cbnz	r0, 8bafe <__swbuf_r+0xaa>
   8bab4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8bab8:	b2ed      	uxtb	r5, r5
   8baba:	b291      	uxth	r1, r2
   8babc:	0489      	lsls	r1, r1, #18
   8babe:	462f      	mov	r7, r5
   8bac0:	6923      	ldr	r3, [r4, #16]
   8bac2:	d4dc      	bmi.n	8ba7e <__swbuf_r+0x2a>
   8bac4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8bac8:	81a2      	strh	r2, [r4, #12]
   8baca:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8bacc:	6961      	ldr	r1, [r4, #20]
   8bace:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   8bad2:	6662      	str	r2, [r4, #100]	; 0x64
   8bad4:	6822      	ldr	r2, [r4, #0]
   8bad6:	1ad3      	subs	r3, r2, r3
   8bad8:	4299      	cmp	r1, r3
   8bada:	dcd5      	bgt.n	8ba88 <__swbuf_r+0x34>
   8badc:	4621      	mov	r1, r4
   8bade:	4630      	mov	r0, r6
   8bae0:	f7ff fbd8 	bl	8b294 <_fflush_r>
   8bae4:	b958      	cbnz	r0, 8bafe <__swbuf_r+0xaa>
   8bae6:	2301      	movs	r3, #1
   8bae8:	6822      	ldr	r2, [r4, #0]
   8baea:	e7ce      	b.n	8ba8a <__swbuf_r+0x36>
   8baec:	f7ff fc06 	bl	8b2fc <__sinit>
   8baf0:	e7b8      	b.n	8ba64 <__swbuf_r+0x10>
   8baf2:	4621      	mov	r1, r4
   8baf4:	4630      	mov	r0, r6
   8baf6:	f7ff fbcd 	bl	8b294 <_fflush_r>
   8bafa:	2800      	cmp	r0, #0
   8bafc:	d0d3      	beq.n	8baa6 <__swbuf_r+0x52>
   8bafe:	f04f 37ff 	mov.w	r7, #4294967295
   8bb02:	e7d0      	b.n	8baa6 <__swbuf_r+0x52>

0008bb04 <_wcrtomb_r>:
   8bb04:	b570      	push	{r4, r5, r6, lr}
   8bb06:	4605      	mov	r5, r0
   8bb08:	461c      	mov	r4, r3
   8bb0a:	b084      	sub	sp, #16
   8bb0c:	b139      	cbz	r1, 8bb1e <_wcrtomb_r+0x1a>
   8bb0e:	4e0b      	ldr	r6, [pc, #44]	; (8bb3c <_wcrtomb_r+0x38>)
   8bb10:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
   8bb14:	47b0      	blx	r6
   8bb16:	1c43      	adds	r3, r0, #1
   8bb18:	d009      	beq.n	8bb2e <_wcrtomb_r+0x2a>
   8bb1a:	b004      	add	sp, #16
   8bb1c:	bd70      	pop	{r4, r5, r6, pc}
   8bb1e:	460a      	mov	r2, r1
   8bb20:	4906      	ldr	r1, [pc, #24]	; (8bb3c <_wcrtomb_r+0x38>)
   8bb22:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
   8bb26:	a901      	add	r1, sp, #4
   8bb28:	47b0      	blx	r6
   8bb2a:	1c43      	adds	r3, r0, #1
   8bb2c:	d1f5      	bne.n	8bb1a <_wcrtomb_r+0x16>
   8bb2e:	2200      	movs	r2, #0
   8bb30:	238a      	movs	r3, #138	; 0x8a
   8bb32:	6022      	str	r2, [r4, #0]
   8bb34:	602b      	str	r3, [r5, #0]
   8bb36:	b004      	add	sp, #16
   8bb38:	bd70      	pop	{r4, r5, r6, pc}
   8bb3a:	bf00      	nop
   8bb3c:	20071374 	.word	0x20071374

0008bb40 <_write_r>:
   8bb40:	b538      	push	{r3, r4, r5, lr}
   8bb42:	460c      	mov	r4, r1
   8bb44:	4611      	mov	r1, r2
   8bb46:	2200      	movs	r2, #0
   8bb48:	4684      	mov	ip, r0
   8bb4a:	4d07      	ldr	r5, [pc, #28]	; (8bb68 <_write_r+0x28>)
   8bb4c:	4620      	mov	r0, r4
   8bb4e:	602a      	str	r2, [r5, #0]
   8bb50:	461a      	mov	r2, r3
   8bb52:	4664      	mov	r4, ip
   8bb54:	f7f7 fb42 	bl	831dc <_write>
   8bb58:	1c43      	adds	r3, r0, #1
   8bb5a:	d000      	beq.n	8bb5e <_write_r+0x1e>
   8bb5c:	bd38      	pop	{r3, r4, r5, pc}
   8bb5e:	682b      	ldr	r3, [r5, #0]
   8bb60:	2b00      	cmp	r3, #0
   8bb62:	d0fb      	beq.n	8bb5c <_write_r+0x1c>
   8bb64:	6023      	str	r3, [r4, #0]
   8bb66:	bd38      	pop	{r3, r4, r5, pc}
   8bb68:	20073350 	.word	0x20073350

0008bb6c <_close_r>:
   8bb6c:	2200      	movs	r2, #0
   8bb6e:	b538      	push	{r3, r4, r5, lr}
   8bb70:	4d06      	ldr	r5, [pc, #24]	; (8bb8c <_close_r+0x20>)
   8bb72:	4604      	mov	r4, r0
   8bb74:	4608      	mov	r0, r1
   8bb76:	602a      	str	r2, [r5, #0]
   8bb78:	f7f7 ffb8 	bl	83aec <_close>
   8bb7c:	1c43      	adds	r3, r0, #1
   8bb7e:	d000      	beq.n	8bb82 <_close_r+0x16>
   8bb80:	bd38      	pop	{r3, r4, r5, pc}
   8bb82:	682b      	ldr	r3, [r5, #0]
   8bb84:	2b00      	cmp	r3, #0
   8bb86:	d0fb      	beq.n	8bb80 <_close_r+0x14>
   8bb88:	6023      	str	r3, [r4, #0]
   8bb8a:	bd38      	pop	{r3, r4, r5, pc}
   8bb8c:	20073350 	.word	0x20073350

0008bb90 <_fclose_r>:
   8bb90:	b570      	push	{r4, r5, r6, lr}
   8bb92:	2900      	cmp	r1, #0
   8bb94:	d04b      	beq.n	8bc2e <_fclose_r+0x9e>
   8bb96:	4606      	mov	r6, r0
   8bb98:	460c      	mov	r4, r1
   8bb9a:	b110      	cbz	r0, 8bba2 <_fclose_r+0x12>
   8bb9c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8bb9e:	2b00      	cmp	r3, #0
   8bba0:	d048      	beq.n	8bc34 <_fclose_r+0xa4>
   8bba2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8bba4:	07d8      	lsls	r0, r3, #31
   8bba6:	d534      	bpl.n	8bc12 <_fclose_r+0x82>
   8bba8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bbac:	2b00      	cmp	r3, #0
   8bbae:	d03e      	beq.n	8bc2e <_fclose_r+0x9e>
   8bbb0:	4621      	mov	r1, r4
   8bbb2:	4630      	mov	r0, r6
   8bbb4:	f7ff fadc 	bl	8b170 <__sflush_r>
   8bbb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8bbba:	4605      	mov	r5, r0
   8bbbc:	b133      	cbz	r3, 8bbcc <_fclose_r+0x3c>
   8bbbe:	4630      	mov	r0, r6
   8bbc0:	69e1      	ldr	r1, [r4, #28]
   8bbc2:	4798      	blx	r3
   8bbc4:	2800      	cmp	r0, #0
   8bbc6:	bfb8      	it	lt
   8bbc8:	f04f 35ff 	movlt.w	r5, #4294967295
   8bbcc:	89a3      	ldrh	r3, [r4, #12]
   8bbce:	061a      	lsls	r2, r3, #24
   8bbd0:	d43b      	bmi.n	8bc4a <_fclose_r+0xba>
   8bbd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8bbd4:	b141      	cbz	r1, 8bbe8 <_fclose_r+0x58>
   8bbd6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8bbda:	4299      	cmp	r1, r3
   8bbdc:	d002      	beq.n	8bbe4 <_fclose_r+0x54>
   8bbde:	4630      	mov	r0, r6
   8bbe0:	f7fc ff42 	bl	88a68 <_free_r>
   8bbe4:	2300      	movs	r3, #0
   8bbe6:	6323      	str	r3, [r4, #48]	; 0x30
   8bbe8:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8bbea:	b121      	cbz	r1, 8bbf6 <_fclose_r+0x66>
   8bbec:	4630      	mov	r0, r6
   8bbee:	f7fc ff3b 	bl	88a68 <_free_r>
   8bbf2:	2300      	movs	r3, #0
   8bbf4:	6463      	str	r3, [r4, #68]	; 0x44
   8bbf6:	f7ff fc07 	bl	8b408 <__sfp_lock_acquire>
   8bbfa:	2200      	movs	r2, #0
   8bbfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8bbfe:	81a2      	strh	r2, [r4, #12]
   8bc00:	07db      	lsls	r3, r3, #31
   8bc02:	d527      	bpl.n	8bc54 <_fclose_r+0xc4>
   8bc04:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bc06:	f7fd f835 	bl	88c74 <__retarget_lock_close_recursive>
   8bc0a:	f7ff fc03 	bl	8b414 <__sfp_lock_release>
   8bc0e:	4628      	mov	r0, r5
   8bc10:	bd70      	pop	{r4, r5, r6, pc}
   8bc12:	89a3      	ldrh	r3, [r4, #12]
   8bc14:	0599      	lsls	r1, r3, #22
   8bc16:	d4cb      	bmi.n	8bbb0 <_fclose_r+0x20>
   8bc18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bc1a:	f7fd f82d 	bl	88c78 <__retarget_lock_acquire_recursive>
   8bc1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bc22:	2b00      	cmp	r3, #0
   8bc24:	d1c4      	bne.n	8bbb0 <_fclose_r+0x20>
   8bc26:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8bc28:	f015 0501 	ands.w	r5, r5, #1
   8bc2c:	d008      	beq.n	8bc40 <_fclose_r+0xb0>
   8bc2e:	2500      	movs	r5, #0
   8bc30:	4628      	mov	r0, r5
   8bc32:	bd70      	pop	{r4, r5, r6, pc}
   8bc34:	f7ff fb62 	bl	8b2fc <__sinit>
   8bc38:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8bc3a:	07d8      	lsls	r0, r3, #31
   8bc3c:	d4b4      	bmi.n	8bba8 <_fclose_r+0x18>
   8bc3e:	e7e8      	b.n	8bc12 <_fclose_r+0x82>
   8bc40:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bc42:	f7fd f81b 	bl	88c7c <__retarget_lock_release_recursive>
   8bc46:	4628      	mov	r0, r5
   8bc48:	bd70      	pop	{r4, r5, r6, pc}
   8bc4a:	4630      	mov	r0, r6
   8bc4c:	6921      	ldr	r1, [r4, #16]
   8bc4e:	f7fc ff0b 	bl	88a68 <_free_r>
   8bc52:	e7be      	b.n	8bbd2 <_fclose_r+0x42>
   8bc54:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bc56:	f7fd f811 	bl	88c7c <__retarget_lock_release_recursive>
   8bc5a:	e7d3      	b.n	8bc04 <_fclose_r+0x74>

0008bc5c <_fstat_r>:
   8bc5c:	b570      	push	{r4, r5, r6, lr}
   8bc5e:	2600      	movs	r6, #0
   8bc60:	4d07      	ldr	r5, [pc, #28]	; (8bc80 <_fstat_r+0x24>)
   8bc62:	4604      	mov	r4, r0
   8bc64:	4608      	mov	r0, r1
   8bc66:	4611      	mov	r1, r2
   8bc68:	602e      	str	r6, [r5, #0]
   8bc6a:	f7f7 ff43 	bl	83af4 <_fstat>
   8bc6e:	1c43      	adds	r3, r0, #1
   8bc70:	d000      	beq.n	8bc74 <_fstat_r+0x18>
   8bc72:	bd70      	pop	{r4, r5, r6, pc}
   8bc74:	682b      	ldr	r3, [r5, #0]
   8bc76:	2b00      	cmp	r3, #0
   8bc78:	d0fb      	beq.n	8bc72 <_fstat_r+0x16>
   8bc7a:	6023      	str	r3, [r4, #0]
   8bc7c:	bd70      	pop	{r4, r5, r6, pc}
   8bc7e:	bf00      	nop
   8bc80:	20073350 	.word	0x20073350

0008bc84 <_isatty_r>:
   8bc84:	2200      	movs	r2, #0
   8bc86:	b538      	push	{r3, r4, r5, lr}
   8bc88:	4d06      	ldr	r5, [pc, #24]	; (8bca4 <_isatty_r+0x20>)
   8bc8a:	4604      	mov	r4, r0
   8bc8c:	4608      	mov	r0, r1
   8bc8e:	602a      	str	r2, [r5, #0]
   8bc90:	f7f7 ff36 	bl	83b00 <_isatty>
   8bc94:	1c43      	adds	r3, r0, #1
   8bc96:	d000      	beq.n	8bc9a <_isatty_r+0x16>
   8bc98:	bd38      	pop	{r3, r4, r5, pc}
   8bc9a:	682b      	ldr	r3, [r5, #0]
   8bc9c:	2b00      	cmp	r3, #0
   8bc9e:	d0fb      	beq.n	8bc98 <_isatty_r+0x14>
   8bca0:	6023      	str	r3, [r4, #0]
   8bca2:	bd38      	pop	{r3, r4, r5, pc}
   8bca4:	20073350 	.word	0x20073350

0008bca8 <_lseek_r>:
   8bca8:	b538      	push	{r3, r4, r5, lr}
   8bcaa:	460c      	mov	r4, r1
   8bcac:	4611      	mov	r1, r2
   8bcae:	2200      	movs	r2, #0
   8bcb0:	4684      	mov	ip, r0
   8bcb2:	4d07      	ldr	r5, [pc, #28]	; (8bcd0 <_lseek_r+0x28>)
   8bcb4:	4620      	mov	r0, r4
   8bcb6:	602a      	str	r2, [r5, #0]
   8bcb8:	461a      	mov	r2, r3
   8bcba:	4664      	mov	r4, ip
   8bcbc:	f7f7 ff22 	bl	83b04 <_lseek>
   8bcc0:	1c43      	adds	r3, r0, #1
   8bcc2:	d000      	beq.n	8bcc6 <_lseek_r+0x1e>
   8bcc4:	bd38      	pop	{r3, r4, r5, pc}
   8bcc6:	682b      	ldr	r3, [r5, #0]
   8bcc8:	2b00      	cmp	r3, #0
   8bcca:	d0fb      	beq.n	8bcc4 <_lseek_r+0x1c>
   8bccc:	6023      	str	r3, [r4, #0]
   8bcce:	bd38      	pop	{r3, r4, r5, pc}
   8bcd0:	20073350 	.word	0x20073350

0008bcd4 <_read_r>:
   8bcd4:	b538      	push	{r3, r4, r5, lr}
   8bcd6:	460c      	mov	r4, r1
   8bcd8:	4611      	mov	r1, r2
   8bcda:	2200      	movs	r2, #0
   8bcdc:	4684      	mov	ip, r0
   8bcde:	4d07      	ldr	r5, [pc, #28]	; (8bcfc <_read_r+0x28>)
   8bce0:	4620      	mov	r0, r4
   8bce2:	602a      	str	r2, [r5, #0]
   8bce4:	461a      	mov	r2, r3
   8bce6:	4664      	mov	r4, ip
   8bce8:	f7f9 ff46 	bl	85b78 <_read>
   8bcec:	1c43      	adds	r3, r0, #1
   8bcee:	d000      	beq.n	8bcf2 <_read_r+0x1e>
   8bcf0:	bd38      	pop	{r3, r4, r5, pc}
   8bcf2:	682b      	ldr	r3, [r5, #0]
   8bcf4:	2b00      	cmp	r3, #0
   8bcf6:	d0fb      	beq.n	8bcf0 <_read_r+0x1c>
   8bcf8:	6023      	str	r3, [r4, #0]
   8bcfa:	bd38      	pop	{r3, r4, r5, pc}
   8bcfc:	20073350 	.word	0x20073350

0008bd00 <__aeabi_drsub>:
   8bd00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8bd04:	e002      	b.n	8bd0c <__adddf3>
   8bd06:	bf00      	nop

0008bd08 <__aeabi_dsub>:
   8bd08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008bd0c <__adddf3>:
   8bd0c:	b530      	push	{r4, r5, lr}
   8bd0e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8bd12:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8bd16:	ea94 0f05 	teq	r4, r5
   8bd1a:	bf08      	it	eq
   8bd1c:	ea90 0f02 	teqeq	r0, r2
   8bd20:	bf1f      	itttt	ne
   8bd22:	ea54 0c00 	orrsne.w	ip, r4, r0
   8bd26:	ea55 0c02 	orrsne.w	ip, r5, r2
   8bd2a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8bd2e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8bd32:	f000 80e2 	beq.w	8befa <__adddf3+0x1ee>
   8bd36:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8bd3a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8bd3e:	bfb8      	it	lt
   8bd40:	426d      	neglt	r5, r5
   8bd42:	dd0c      	ble.n	8bd5e <__adddf3+0x52>
   8bd44:	442c      	add	r4, r5
   8bd46:	ea80 0202 	eor.w	r2, r0, r2
   8bd4a:	ea81 0303 	eor.w	r3, r1, r3
   8bd4e:	ea82 0000 	eor.w	r0, r2, r0
   8bd52:	ea83 0101 	eor.w	r1, r3, r1
   8bd56:	ea80 0202 	eor.w	r2, r0, r2
   8bd5a:	ea81 0303 	eor.w	r3, r1, r3
   8bd5e:	2d36      	cmp	r5, #54	; 0x36
   8bd60:	bf88      	it	hi
   8bd62:	bd30      	pophi	{r4, r5, pc}
   8bd64:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8bd68:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8bd6c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8bd70:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8bd74:	d002      	beq.n	8bd7c <__adddf3+0x70>
   8bd76:	4240      	negs	r0, r0
   8bd78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8bd7c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8bd80:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8bd84:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8bd88:	d002      	beq.n	8bd90 <__adddf3+0x84>
   8bd8a:	4252      	negs	r2, r2
   8bd8c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8bd90:	ea94 0f05 	teq	r4, r5
   8bd94:	f000 80a7 	beq.w	8bee6 <__adddf3+0x1da>
   8bd98:	f1a4 0401 	sub.w	r4, r4, #1
   8bd9c:	f1d5 0e20 	rsbs	lr, r5, #32
   8bda0:	db0d      	blt.n	8bdbe <__adddf3+0xb2>
   8bda2:	fa02 fc0e 	lsl.w	ip, r2, lr
   8bda6:	fa22 f205 	lsr.w	r2, r2, r5
   8bdaa:	1880      	adds	r0, r0, r2
   8bdac:	f141 0100 	adc.w	r1, r1, #0
   8bdb0:	fa03 f20e 	lsl.w	r2, r3, lr
   8bdb4:	1880      	adds	r0, r0, r2
   8bdb6:	fa43 f305 	asr.w	r3, r3, r5
   8bdba:	4159      	adcs	r1, r3
   8bdbc:	e00e      	b.n	8bddc <__adddf3+0xd0>
   8bdbe:	f1a5 0520 	sub.w	r5, r5, #32
   8bdc2:	f10e 0e20 	add.w	lr, lr, #32
   8bdc6:	2a01      	cmp	r2, #1
   8bdc8:	fa03 fc0e 	lsl.w	ip, r3, lr
   8bdcc:	bf28      	it	cs
   8bdce:	f04c 0c02 	orrcs.w	ip, ip, #2
   8bdd2:	fa43 f305 	asr.w	r3, r3, r5
   8bdd6:	18c0      	adds	r0, r0, r3
   8bdd8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8bddc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8bde0:	d507      	bpl.n	8bdf2 <__adddf3+0xe6>
   8bde2:	f04f 0e00 	mov.w	lr, #0
   8bde6:	f1dc 0c00 	rsbs	ip, ip, #0
   8bdea:	eb7e 0000 	sbcs.w	r0, lr, r0
   8bdee:	eb6e 0101 	sbc.w	r1, lr, r1
   8bdf2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8bdf6:	d31b      	bcc.n	8be30 <__adddf3+0x124>
   8bdf8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8bdfc:	d30c      	bcc.n	8be18 <__adddf3+0x10c>
   8bdfe:	0849      	lsrs	r1, r1, #1
   8be00:	ea5f 0030 	movs.w	r0, r0, rrx
   8be04:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8be08:	f104 0401 	add.w	r4, r4, #1
   8be0c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8be10:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8be14:	f080 809a 	bcs.w	8bf4c <__adddf3+0x240>
   8be18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8be1c:	bf08      	it	eq
   8be1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8be22:	f150 0000 	adcs.w	r0, r0, #0
   8be26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8be2a:	ea41 0105 	orr.w	r1, r1, r5
   8be2e:	bd30      	pop	{r4, r5, pc}
   8be30:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8be34:	4140      	adcs	r0, r0
   8be36:	eb41 0101 	adc.w	r1, r1, r1
   8be3a:	3c01      	subs	r4, #1
   8be3c:	bf28      	it	cs
   8be3e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8be42:	d2e9      	bcs.n	8be18 <__adddf3+0x10c>
   8be44:	f091 0f00 	teq	r1, #0
   8be48:	bf04      	itt	eq
   8be4a:	4601      	moveq	r1, r0
   8be4c:	2000      	moveq	r0, #0
   8be4e:	fab1 f381 	clz	r3, r1
   8be52:	bf08      	it	eq
   8be54:	3320      	addeq	r3, #32
   8be56:	f1a3 030b 	sub.w	r3, r3, #11
   8be5a:	f1b3 0220 	subs.w	r2, r3, #32
   8be5e:	da0c      	bge.n	8be7a <__adddf3+0x16e>
   8be60:	320c      	adds	r2, #12
   8be62:	dd08      	ble.n	8be76 <__adddf3+0x16a>
   8be64:	f102 0c14 	add.w	ip, r2, #20
   8be68:	f1c2 020c 	rsb	r2, r2, #12
   8be6c:	fa01 f00c 	lsl.w	r0, r1, ip
   8be70:	fa21 f102 	lsr.w	r1, r1, r2
   8be74:	e00c      	b.n	8be90 <__adddf3+0x184>
   8be76:	f102 0214 	add.w	r2, r2, #20
   8be7a:	bfd8      	it	le
   8be7c:	f1c2 0c20 	rsble	ip, r2, #32
   8be80:	fa01 f102 	lsl.w	r1, r1, r2
   8be84:	fa20 fc0c 	lsr.w	ip, r0, ip
   8be88:	bfdc      	itt	le
   8be8a:	ea41 010c 	orrle.w	r1, r1, ip
   8be8e:	4090      	lslle	r0, r2
   8be90:	1ae4      	subs	r4, r4, r3
   8be92:	bfa2      	ittt	ge
   8be94:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8be98:	4329      	orrge	r1, r5
   8be9a:	bd30      	popge	{r4, r5, pc}
   8be9c:	ea6f 0404 	mvn.w	r4, r4
   8bea0:	3c1f      	subs	r4, #31
   8bea2:	da1c      	bge.n	8bede <__adddf3+0x1d2>
   8bea4:	340c      	adds	r4, #12
   8bea6:	dc0e      	bgt.n	8bec6 <__adddf3+0x1ba>
   8bea8:	f104 0414 	add.w	r4, r4, #20
   8beac:	f1c4 0220 	rsb	r2, r4, #32
   8beb0:	fa20 f004 	lsr.w	r0, r0, r4
   8beb4:	fa01 f302 	lsl.w	r3, r1, r2
   8beb8:	ea40 0003 	orr.w	r0, r0, r3
   8bebc:	fa21 f304 	lsr.w	r3, r1, r4
   8bec0:	ea45 0103 	orr.w	r1, r5, r3
   8bec4:	bd30      	pop	{r4, r5, pc}
   8bec6:	f1c4 040c 	rsb	r4, r4, #12
   8beca:	f1c4 0220 	rsb	r2, r4, #32
   8bece:	fa20 f002 	lsr.w	r0, r0, r2
   8bed2:	fa01 f304 	lsl.w	r3, r1, r4
   8bed6:	ea40 0003 	orr.w	r0, r0, r3
   8beda:	4629      	mov	r1, r5
   8bedc:	bd30      	pop	{r4, r5, pc}
   8bede:	fa21 f004 	lsr.w	r0, r1, r4
   8bee2:	4629      	mov	r1, r5
   8bee4:	bd30      	pop	{r4, r5, pc}
   8bee6:	f094 0f00 	teq	r4, #0
   8beea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8beee:	bf06      	itte	eq
   8bef0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8bef4:	3401      	addeq	r4, #1
   8bef6:	3d01      	subne	r5, #1
   8bef8:	e74e      	b.n	8bd98 <__adddf3+0x8c>
   8befa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8befe:	bf18      	it	ne
   8bf00:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8bf04:	d029      	beq.n	8bf5a <__adddf3+0x24e>
   8bf06:	ea94 0f05 	teq	r4, r5
   8bf0a:	bf08      	it	eq
   8bf0c:	ea90 0f02 	teqeq	r0, r2
   8bf10:	d005      	beq.n	8bf1e <__adddf3+0x212>
   8bf12:	ea54 0c00 	orrs.w	ip, r4, r0
   8bf16:	bf04      	itt	eq
   8bf18:	4619      	moveq	r1, r3
   8bf1a:	4610      	moveq	r0, r2
   8bf1c:	bd30      	pop	{r4, r5, pc}
   8bf1e:	ea91 0f03 	teq	r1, r3
   8bf22:	bf1e      	ittt	ne
   8bf24:	2100      	movne	r1, #0
   8bf26:	2000      	movne	r0, #0
   8bf28:	bd30      	popne	{r4, r5, pc}
   8bf2a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8bf2e:	d105      	bne.n	8bf3c <__adddf3+0x230>
   8bf30:	0040      	lsls	r0, r0, #1
   8bf32:	4149      	adcs	r1, r1
   8bf34:	bf28      	it	cs
   8bf36:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8bf3a:	bd30      	pop	{r4, r5, pc}
   8bf3c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8bf40:	bf3c      	itt	cc
   8bf42:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8bf46:	bd30      	popcc	{r4, r5, pc}
   8bf48:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8bf4c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8bf50:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8bf54:	f04f 0000 	mov.w	r0, #0
   8bf58:	bd30      	pop	{r4, r5, pc}
   8bf5a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8bf5e:	bf1a      	itte	ne
   8bf60:	4619      	movne	r1, r3
   8bf62:	4610      	movne	r0, r2
   8bf64:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8bf68:	bf1c      	itt	ne
   8bf6a:	460b      	movne	r3, r1
   8bf6c:	4602      	movne	r2, r0
   8bf6e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8bf72:	bf06      	itte	eq
   8bf74:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8bf78:	ea91 0f03 	teqeq	r1, r3
   8bf7c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8bf80:	bd30      	pop	{r4, r5, pc}
   8bf82:	bf00      	nop

0008bf84 <__aeabi_ui2d>:
   8bf84:	f090 0f00 	teq	r0, #0
   8bf88:	bf04      	itt	eq
   8bf8a:	2100      	moveq	r1, #0
   8bf8c:	4770      	bxeq	lr
   8bf8e:	b530      	push	{r4, r5, lr}
   8bf90:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8bf94:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8bf98:	f04f 0500 	mov.w	r5, #0
   8bf9c:	f04f 0100 	mov.w	r1, #0
   8bfa0:	e750      	b.n	8be44 <__adddf3+0x138>
   8bfa2:	bf00      	nop

0008bfa4 <__aeabi_i2d>:
   8bfa4:	f090 0f00 	teq	r0, #0
   8bfa8:	bf04      	itt	eq
   8bfaa:	2100      	moveq	r1, #0
   8bfac:	4770      	bxeq	lr
   8bfae:	b530      	push	{r4, r5, lr}
   8bfb0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8bfb4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8bfb8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8bfbc:	bf48      	it	mi
   8bfbe:	4240      	negmi	r0, r0
   8bfc0:	f04f 0100 	mov.w	r1, #0
   8bfc4:	e73e      	b.n	8be44 <__adddf3+0x138>
   8bfc6:	bf00      	nop

0008bfc8 <__aeabi_f2d>:
   8bfc8:	0042      	lsls	r2, r0, #1
   8bfca:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8bfce:	ea4f 0131 	mov.w	r1, r1, rrx
   8bfd2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8bfd6:	bf1f      	itttt	ne
   8bfd8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8bfdc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8bfe0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8bfe4:	4770      	bxne	lr
   8bfe6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8bfea:	bf08      	it	eq
   8bfec:	4770      	bxeq	lr
   8bfee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8bff2:	bf04      	itt	eq
   8bff4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8bff8:	4770      	bxeq	lr
   8bffa:	b530      	push	{r4, r5, lr}
   8bffc:	f44f 7460 	mov.w	r4, #896	; 0x380
   8c000:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c004:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c008:	e71c      	b.n	8be44 <__adddf3+0x138>
   8c00a:	bf00      	nop

0008c00c <__aeabi_ul2d>:
   8c00c:	ea50 0201 	orrs.w	r2, r0, r1
   8c010:	bf08      	it	eq
   8c012:	4770      	bxeq	lr
   8c014:	b530      	push	{r4, r5, lr}
   8c016:	f04f 0500 	mov.w	r5, #0
   8c01a:	e00a      	b.n	8c032 <__aeabi_l2d+0x16>

0008c01c <__aeabi_l2d>:
   8c01c:	ea50 0201 	orrs.w	r2, r0, r1
   8c020:	bf08      	it	eq
   8c022:	4770      	bxeq	lr
   8c024:	b530      	push	{r4, r5, lr}
   8c026:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8c02a:	d502      	bpl.n	8c032 <__aeabi_l2d+0x16>
   8c02c:	4240      	negs	r0, r0
   8c02e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c032:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c036:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c03a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8c03e:	f43f aed8 	beq.w	8bdf2 <__adddf3+0xe6>
   8c042:	f04f 0203 	mov.w	r2, #3
   8c046:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c04a:	bf18      	it	ne
   8c04c:	3203      	addne	r2, #3
   8c04e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c052:	bf18      	it	ne
   8c054:	3203      	addne	r2, #3
   8c056:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8c05a:	f1c2 0320 	rsb	r3, r2, #32
   8c05e:	fa00 fc03 	lsl.w	ip, r0, r3
   8c062:	fa20 f002 	lsr.w	r0, r0, r2
   8c066:	fa01 fe03 	lsl.w	lr, r1, r3
   8c06a:	ea40 000e 	orr.w	r0, r0, lr
   8c06e:	fa21 f102 	lsr.w	r1, r1, r2
   8c072:	4414      	add	r4, r2
   8c074:	e6bd      	b.n	8bdf2 <__adddf3+0xe6>
   8c076:	bf00      	nop

0008c078 <__aeabi_dmul>:
   8c078:	b570      	push	{r4, r5, r6, lr}
   8c07a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c07e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c082:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c086:	bf1d      	ittte	ne
   8c088:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c08c:	ea94 0f0c 	teqne	r4, ip
   8c090:	ea95 0f0c 	teqne	r5, ip
   8c094:	f000 f8de 	bleq	8c254 <__aeabi_dmul+0x1dc>
   8c098:	442c      	add	r4, r5
   8c09a:	ea81 0603 	eor.w	r6, r1, r3
   8c09e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8c0a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8c0a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8c0aa:	bf18      	it	ne
   8c0ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8c0b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c0b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8c0b8:	d038      	beq.n	8c12c <__aeabi_dmul+0xb4>
   8c0ba:	fba0 ce02 	umull	ip, lr, r0, r2
   8c0be:	f04f 0500 	mov.w	r5, #0
   8c0c2:	fbe1 e502 	umlal	lr, r5, r1, r2
   8c0c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8c0ca:	fbe0 e503 	umlal	lr, r5, r0, r3
   8c0ce:	f04f 0600 	mov.w	r6, #0
   8c0d2:	fbe1 5603 	umlal	r5, r6, r1, r3
   8c0d6:	f09c 0f00 	teq	ip, #0
   8c0da:	bf18      	it	ne
   8c0dc:	f04e 0e01 	orrne.w	lr, lr, #1
   8c0e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8c0e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8c0e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8c0ec:	d204      	bcs.n	8c0f8 <__aeabi_dmul+0x80>
   8c0ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8c0f2:	416d      	adcs	r5, r5
   8c0f4:	eb46 0606 	adc.w	r6, r6, r6
   8c0f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8c0fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8c100:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8c104:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8c108:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8c10c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c110:	bf88      	it	hi
   8c112:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c116:	d81e      	bhi.n	8c156 <__aeabi_dmul+0xde>
   8c118:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8c11c:	bf08      	it	eq
   8c11e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8c122:	f150 0000 	adcs.w	r0, r0, #0
   8c126:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c12a:	bd70      	pop	{r4, r5, r6, pc}
   8c12c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8c130:	ea46 0101 	orr.w	r1, r6, r1
   8c134:	ea40 0002 	orr.w	r0, r0, r2
   8c138:	ea81 0103 	eor.w	r1, r1, r3
   8c13c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8c140:	bfc2      	ittt	gt
   8c142:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c146:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c14a:	bd70      	popgt	{r4, r5, r6, pc}
   8c14c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c150:	f04f 0e00 	mov.w	lr, #0
   8c154:	3c01      	subs	r4, #1
   8c156:	f300 80ab 	bgt.w	8c2b0 <__aeabi_dmul+0x238>
   8c15a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8c15e:	bfde      	ittt	le
   8c160:	2000      	movle	r0, #0
   8c162:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8c166:	bd70      	pople	{r4, r5, r6, pc}
   8c168:	f1c4 0400 	rsb	r4, r4, #0
   8c16c:	3c20      	subs	r4, #32
   8c16e:	da35      	bge.n	8c1dc <__aeabi_dmul+0x164>
   8c170:	340c      	adds	r4, #12
   8c172:	dc1b      	bgt.n	8c1ac <__aeabi_dmul+0x134>
   8c174:	f104 0414 	add.w	r4, r4, #20
   8c178:	f1c4 0520 	rsb	r5, r4, #32
   8c17c:	fa00 f305 	lsl.w	r3, r0, r5
   8c180:	fa20 f004 	lsr.w	r0, r0, r4
   8c184:	fa01 f205 	lsl.w	r2, r1, r5
   8c188:	ea40 0002 	orr.w	r0, r0, r2
   8c18c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8c190:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c194:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c198:	fa21 f604 	lsr.w	r6, r1, r4
   8c19c:	eb42 0106 	adc.w	r1, r2, r6
   8c1a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c1a4:	bf08      	it	eq
   8c1a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c1aa:	bd70      	pop	{r4, r5, r6, pc}
   8c1ac:	f1c4 040c 	rsb	r4, r4, #12
   8c1b0:	f1c4 0520 	rsb	r5, r4, #32
   8c1b4:	fa00 f304 	lsl.w	r3, r0, r4
   8c1b8:	fa20 f005 	lsr.w	r0, r0, r5
   8c1bc:	fa01 f204 	lsl.w	r2, r1, r4
   8c1c0:	ea40 0002 	orr.w	r0, r0, r2
   8c1c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c1c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c1cc:	f141 0100 	adc.w	r1, r1, #0
   8c1d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c1d4:	bf08      	it	eq
   8c1d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c1da:	bd70      	pop	{r4, r5, r6, pc}
   8c1dc:	f1c4 0520 	rsb	r5, r4, #32
   8c1e0:	fa00 f205 	lsl.w	r2, r0, r5
   8c1e4:	ea4e 0e02 	orr.w	lr, lr, r2
   8c1e8:	fa20 f304 	lsr.w	r3, r0, r4
   8c1ec:	fa01 f205 	lsl.w	r2, r1, r5
   8c1f0:	ea43 0302 	orr.w	r3, r3, r2
   8c1f4:	fa21 f004 	lsr.w	r0, r1, r4
   8c1f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c1fc:	fa21 f204 	lsr.w	r2, r1, r4
   8c200:	ea20 0002 	bic.w	r0, r0, r2
   8c204:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8c208:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c20c:	bf08      	it	eq
   8c20e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c212:	bd70      	pop	{r4, r5, r6, pc}
   8c214:	f094 0f00 	teq	r4, #0
   8c218:	d10f      	bne.n	8c23a <__aeabi_dmul+0x1c2>
   8c21a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8c21e:	0040      	lsls	r0, r0, #1
   8c220:	eb41 0101 	adc.w	r1, r1, r1
   8c224:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c228:	bf08      	it	eq
   8c22a:	3c01      	subeq	r4, #1
   8c22c:	d0f7      	beq.n	8c21e <__aeabi_dmul+0x1a6>
   8c22e:	ea41 0106 	orr.w	r1, r1, r6
   8c232:	f095 0f00 	teq	r5, #0
   8c236:	bf18      	it	ne
   8c238:	4770      	bxne	lr
   8c23a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8c23e:	0052      	lsls	r2, r2, #1
   8c240:	eb43 0303 	adc.w	r3, r3, r3
   8c244:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8c248:	bf08      	it	eq
   8c24a:	3d01      	subeq	r5, #1
   8c24c:	d0f7      	beq.n	8c23e <__aeabi_dmul+0x1c6>
   8c24e:	ea43 0306 	orr.w	r3, r3, r6
   8c252:	4770      	bx	lr
   8c254:	ea94 0f0c 	teq	r4, ip
   8c258:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c25c:	bf18      	it	ne
   8c25e:	ea95 0f0c 	teqne	r5, ip
   8c262:	d00c      	beq.n	8c27e <__aeabi_dmul+0x206>
   8c264:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c268:	bf18      	it	ne
   8c26a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c26e:	d1d1      	bne.n	8c214 <__aeabi_dmul+0x19c>
   8c270:	ea81 0103 	eor.w	r1, r1, r3
   8c274:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c278:	f04f 0000 	mov.w	r0, #0
   8c27c:	bd70      	pop	{r4, r5, r6, pc}
   8c27e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c282:	bf06      	itte	eq
   8c284:	4610      	moveq	r0, r2
   8c286:	4619      	moveq	r1, r3
   8c288:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c28c:	d019      	beq.n	8c2c2 <__aeabi_dmul+0x24a>
   8c28e:	ea94 0f0c 	teq	r4, ip
   8c292:	d102      	bne.n	8c29a <__aeabi_dmul+0x222>
   8c294:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8c298:	d113      	bne.n	8c2c2 <__aeabi_dmul+0x24a>
   8c29a:	ea95 0f0c 	teq	r5, ip
   8c29e:	d105      	bne.n	8c2ac <__aeabi_dmul+0x234>
   8c2a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8c2a4:	bf1c      	itt	ne
   8c2a6:	4610      	movne	r0, r2
   8c2a8:	4619      	movne	r1, r3
   8c2aa:	d10a      	bne.n	8c2c2 <__aeabi_dmul+0x24a>
   8c2ac:	ea81 0103 	eor.w	r1, r1, r3
   8c2b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c2b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c2b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c2bc:	f04f 0000 	mov.w	r0, #0
   8c2c0:	bd70      	pop	{r4, r5, r6, pc}
   8c2c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c2c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8c2ca:	bd70      	pop	{r4, r5, r6, pc}

0008c2cc <__aeabi_ddiv>:
   8c2cc:	b570      	push	{r4, r5, r6, lr}
   8c2ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c2d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c2d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c2da:	bf1d      	ittte	ne
   8c2dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c2e0:	ea94 0f0c 	teqne	r4, ip
   8c2e4:	ea95 0f0c 	teqne	r5, ip
   8c2e8:	f000 f8a7 	bleq	8c43a <__aeabi_ddiv+0x16e>
   8c2ec:	eba4 0405 	sub.w	r4, r4, r5
   8c2f0:	ea81 0e03 	eor.w	lr, r1, r3
   8c2f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c2f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c2fc:	f000 8088 	beq.w	8c410 <__aeabi_ddiv+0x144>
   8c300:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c304:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8c308:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8c30c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8c310:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8c314:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8c318:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8c31c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8c320:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8c324:	429d      	cmp	r5, r3
   8c326:	bf08      	it	eq
   8c328:	4296      	cmpeq	r6, r2
   8c32a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8c32e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8c332:	d202      	bcs.n	8c33a <__aeabi_ddiv+0x6e>
   8c334:	085b      	lsrs	r3, r3, #1
   8c336:	ea4f 0232 	mov.w	r2, r2, rrx
   8c33a:	1ab6      	subs	r6, r6, r2
   8c33c:	eb65 0503 	sbc.w	r5, r5, r3
   8c340:	085b      	lsrs	r3, r3, #1
   8c342:	ea4f 0232 	mov.w	r2, r2, rrx
   8c346:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8c34a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8c34e:	ebb6 0e02 	subs.w	lr, r6, r2
   8c352:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c356:	bf22      	ittt	cs
   8c358:	1ab6      	subcs	r6, r6, r2
   8c35a:	4675      	movcs	r5, lr
   8c35c:	ea40 000c 	orrcs.w	r0, r0, ip
   8c360:	085b      	lsrs	r3, r3, #1
   8c362:	ea4f 0232 	mov.w	r2, r2, rrx
   8c366:	ebb6 0e02 	subs.w	lr, r6, r2
   8c36a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c36e:	bf22      	ittt	cs
   8c370:	1ab6      	subcs	r6, r6, r2
   8c372:	4675      	movcs	r5, lr
   8c374:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8c378:	085b      	lsrs	r3, r3, #1
   8c37a:	ea4f 0232 	mov.w	r2, r2, rrx
   8c37e:	ebb6 0e02 	subs.w	lr, r6, r2
   8c382:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c386:	bf22      	ittt	cs
   8c388:	1ab6      	subcs	r6, r6, r2
   8c38a:	4675      	movcs	r5, lr
   8c38c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8c390:	085b      	lsrs	r3, r3, #1
   8c392:	ea4f 0232 	mov.w	r2, r2, rrx
   8c396:	ebb6 0e02 	subs.w	lr, r6, r2
   8c39a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c39e:	bf22      	ittt	cs
   8c3a0:	1ab6      	subcs	r6, r6, r2
   8c3a2:	4675      	movcs	r5, lr
   8c3a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8c3a8:	ea55 0e06 	orrs.w	lr, r5, r6
   8c3ac:	d018      	beq.n	8c3e0 <__aeabi_ddiv+0x114>
   8c3ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8c3b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8c3b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8c3ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8c3be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8c3c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8c3c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8c3ca:	d1c0      	bne.n	8c34e <__aeabi_ddiv+0x82>
   8c3cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c3d0:	d10b      	bne.n	8c3ea <__aeabi_ddiv+0x11e>
   8c3d2:	ea41 0100 	orr.w	r1, r1, r0
   8c3d6:	f04f 0000 	mov.w	r0, #0
   8c3da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8c3de:	e7b6      	b.n	8c34e <__aeabi_ddiv+0x82>
   8c3e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c3e4:	bf04      	itt	eq
   8c3e6:	4301      	orreq	r1, r0
   8c3e8:	2000      	moveq	r0, #0
   8c3ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c3ee:	bf88      	it	hi
   8c3f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c3f4:	f63f aeaf 	bhi.w	8c156 <__aeabi_dmul+0xde>
   8c3f8:	ebb5 0c03 	subs.w	ip, r5, r3
   8c3fc:	bf04      	itt	eq
   8c3fe:	ebb6 0c02 	subseq.w	ip, r6, r2
   8c402:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c406:	f150 0000 	adcs.w	r0, r0, #0
   8c40a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c40e:	bd70      	pop	{r4, r5, r6, pc}
   8c410:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8c414:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8c418:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8c41c:	bfc2      	ittt	gt
   8c41e:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c422:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c426:	bd70      	popgt	{r4, r5, r6, pc}
   8c428:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c42c:	f04f 0e00 	mov.w	lr, #0
   8c430:	3c01      	subs	r4, #1
   8c432:	e690      	b.n	8c156 <__aeabi_dmul+0xde>
   8c434:	ea45 0e06 	orr.w	lr, r5, r6
   8c438:	e68d      	b.n	8c156 <__aeabi_dmul+0xde>
   8c43a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c43e:	ea94 0f0c 	teq	r4, ip
   8c442:	bf08      	it	eq
   8c444:	ea95 0f0c 	teqeq	r5, ip
   8c448:	f43f af3b 	beq.w	8c2c2 <__aeabi_dmul+0x24a>
   8c44c:	ea94 0f0c 	teq	r4, ip
   8c450:	d10a      	bne.n	8c468 <__aeabi_ddiv+0x19c>
   8c452:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c456:	f47f af34 	bne.w	8c2c2 <__aeabi_dmul+0x24a>
   8c45a:	ea95 0f0c 	teq	r5, ip
   8c45e:	f47f af25 	bne.w	8c2ac <__aeabi_dmul+0x234>
   8c462:	4610      	mov	r0, r2
   8c464:	4619      	mov	r1, r3
   8c466:	e72c      	b.n	8c2c2 <__aeabi_dmul+0x24a>
   8c468:	ea95 0f0c 	teq	r5, ip
   8c46c:	d106      	bne.n	8c47c <__aeabi_ddiv+0x1b0>
   8c46e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c472:	f43f aefd 	beq.w	8c270 <__aeabi_dmul+0x1f8>
   8c476:	4610      	mov	r0, r2
   8c478:	4619      	mov	r1, r3
   8c47a:	e722      	b.n	8c2c2 <__aeabi_dmul+0x24a>
   8c47c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c480:	bf18      	it	ne
   8c482:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c486:	f47f aec5 	bne.w	8c214 <__aeabi_dmul+0x19c>
   8c48a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8c48e:	f47f af0d 	bne.w	8c2ac <__aeabi_dmul+0x234>
   8c492:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8c496:	f47f aeeb 	bne.w	8c270 <__aeabi_dmul+0x1f8>
   8c49a:	e712      	b.n	8c2c2 <__aeabi_dmul+0x24a>

0008c49c <__gedf2>:
   8c49c:	f04f 3cff 	mov.w	ip, #4294967295
   8c4a0:	e006      	b.n	8c4b0 <__cmpdf2+0x4>
   8c4a2:	bf00      	nop

0008c4a4 <__ledf2>:
   8c4a4:	f04f 0c01 	mov.w	ip, #1
   8c4a8:	e002      	b.n	8c4b0 <__cmpdf2+0x4>
   8c4aa:	bf00      	nop

0008c4ac <__cmpdf2>:
   8c4ac:	f04f 0c01 	mov.w	ip, #1
   8c4b0:	f84d cd04 	str.w	ip, [sp, #-4]!
   8c4b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c4b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c4bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c4c0:	bf18      	it	ne
   8c4c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8c4c6:	d01b      	beq.n	8c500 <__cmpdf2+0x54>
   8c4c8:	b001      	add	sp, #4
   8c4ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8c4ce:	bf0c      	ite	eq
   8c4d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8c4d4:	ea91 0f03 	teqne	r1, r3
   8c4d8:	bf02      	ittt	eq
   8c4da:	ea90 0f02 	teqeq	r0, r2
   8c4de:	2000      	moveq	r0, #0
   8c4e0:	4770      	bxeq	lr
   8c4e2:	f110 0f00 	cmn.w	r0, #0
   8c4e6:	ea91 0f03 	teq	r1, r3
   8c4ea:	bf58      	it	pl
   8c4ec:	4299      	cmppl	r1, r3
   8c4ee:	bf08      	it	eq
   8c4f0:	4290      	cmpeq	r0, r2
   8c4f2:	bf2c      	ite	cs
   8c4f4:	17d8      	asrcs	r0, r3, #31
   8c4f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8c4fa:	f040 0001 	orr.w	r0, r0, #1
   8c4fe:	4770      	bx	lr
   8c500:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c504:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c508:	d102      	bne.n	8c510 <__cmpdf2+0x64>
   8c50a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8c50e:	d107      	bne.n	8c520 <__cmpdf2+0x74>
   8c510:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c514:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c518:	d1d6      	bne.n	8c4c8 <__cmpdf2+0x1c>
   8c51a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8c51e:	d0d3      	beq.n	8c4c8 <__cmpdf2+0x1c>
   8c520:	f85d 0b04 	ldr.w	r0, [sp], #4
   8c524:	4770      	bx	lr
   8c526:	bf00      	nop

0008c528 <__aeabi_cdrcmple>:
   8c528:	4684      	mov	ip, r0
   8c52a:	4610      	mov	r0, r2
   8c52c:	4662      	mov	r2, ip
   8c52e:	468c      	mov	ip, r1
   8c530:	4619      	mov	r1, r3
   8c532:	4663      	mov	r3, ip
   8c534:	e000      	b.n	8c538 <__aeabi_cdcmpeq>
   8c536:	bf00      	nop

0008c538 <__aeabi_cdcmpeq>:
   8c538:	b501      	push	{r0, lr}
   8c53a:	f7ff ffb7 	bl	8c4ac <__cmpdf2>
   8c53e:	2800      	cmp	r0, #0
   8c540:	bf48      	it	mi
   8c542:	f110 0f00 	cmnmi.w	r0, #0
   8c546:	bd01      	pop	{r0, pc}

0008c548 <__aeabi_dcmpeq>:
   8c548:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c54c:	f7ff fff4 	bl	8c538 <__aeabi_cdcmpeq>
   8c550:	bf0c      	ite	eq
   8c552:	2001      	moveq	r0, #1
   8c554:	2000      	movne	r0, #0
   8c556:	f85d fb08 	ldr.w	pc, [sp], #8
   8c55a:	bf00      	nop

0008c55c <__aeabi_dcmplt>:
   8c55c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c560:	f7ff ffea 	bl	8c538 <__aeabi_cdcmpeq>
   8c564:	bf34      	ite	cc
   8c566:	2001      	movcc	r0, #1
   8c568:	2000      	movcs	r0, #0
   8c56a:	f85d fb08 	ldr.w	pc, [sp], #8
   8c56e:	bf00      	nop

0008c570 <__aeabi_dcmple>:
   8c570:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c574:	f7ff ffe0 	bl	8c538 <__aeabi_cdcmpeq>
   8c578:	bf94      	ite	ls
   8c57a:	2001      	movls	r0, #1
   8c57c:	2000      	movhi	r0, #0
   8c57e:	f85d fb08 	ldr.w	pc, [sp], #8
   8c582:	bf00      	nop

0008c584 <__aeabi_dcmpge>:
   8c584:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c588:	f7ff ffce 	bl	8c528 <__aeabi_cdrcmple>
   8c58c:	bf94      	ite	ls
   8c58e:	2001      	movls	r0, #1
   8c590:	2000      	movhi	r0, #0
   8c592:	f85d fb08 	ldr.w	pc, [sp], #8
   8c596:	bf00      	nop

0008c598 <__aeabi_dcmpgt>:
   8c598:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c59c:	f7ff ffc4 	bl	8c528 <__aeabi_cdrcmple>
   8c5a0:	bf34      	ite	cc
   8c5a2:	2001      	movcc	r0, #1
   8c5a4:	2000      	movcs	r0, #0
   8c5a6:	f85d fb08 	ldr.w	pc, [sp], #8
   8c5aa:	bf00      	nop

0008c5ac <__aeabi_dcmpun>:
   8c5ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c5b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c5b4:	d102      	bne.n	8c5bc <__aeabi_dcmpun+0x10>
   8c5b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8c5ba:	d10a      	bne.n	8c5d2 <__aeabi_dcmpun+0x26>
   8c5bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c5c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c5c4:	d102      	bne.n	8c5cc <__aeabi_dcmpun+0x20>
   8c5c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8c5ca:	d102      	bne.n	8c5d2 <__aeabi_dcmpun+0x26>
   8c5cc:	f04f 0000 	mov.w	r0, #0
   8c5d0:	4770      	bx	lr
   8c5d2:	f04f 0001 	mov.w	r0, #1
   8c5d6:	4770      	bx	lr

0008c5d8 <__aeabi_d2iz>:
   8c5d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8c5dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8c5e0:	d215      	bcs.n	8c60e <__aeabi_d2iz+0x36>
   8c5e2:	d511      	bpl.n	8c608 <__aeabi_d2iz+0x30>
   8c5e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8c5e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8c5ec:	d912      	bls.n	8c614 <__aeabi_d2iz+0x3c>
   8c5ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8c5f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8c5f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8c5fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c5fe:	fa23 f002 	lsr.w	r0, r3, r2
   8c602:	bf18      	it	ne
   8c604:	4240      	negne	r0, r0
   8c606:	4770      	bx	lr
   8c608:	f04f 0000 	mov.w	r0, #0
   8c60c:	4770      	bx	lr
   8c60e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8c612:	d105      	bne.n	8c620 <__aeabi_d2iz+0x48>
   8c614:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8c618:	bf08      	it	eq
   8c61a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8c61e:	4770      	bx	lr
   8c620:	f04f 0000 	mov.w	r0, #0
   8c624:	4770      	bx	lr
   8c626:	bf00      	nop

0008c628 <__aeabi_uldivmod>:
   8c628:	b953      	cbnz	r3, 8c640 <__aeabi_uldivmod+0x18>
   8c62a:	b94a      	cbnz	r2, 8c640 <__aeabi_uldivmod+0x18>
   8c62c:	2900      	cmp	r1, #0
   8c62e:	bf08      	it	eq
   8c630:	2800      	cmpeq	r0, #0
   8c632:	bf1c      	itt	ne
   8c634:	f04f 31ff 	movne.w	r1, #4294967295
   8c638:	f04f 30ff 	movne.w	r0, #4294967295
   8c63c:	f000 b976 	b.w	8c92c <__aeabi_idiv0>
   8c640:	f1ad 0c08 	sub.w	ip, sp, #8
   8c644:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8c648:	f000 f806 	bl	8c658 <__udivmoddi4>
   8c64c:	f8dd e004 	ldr.w	lr, [sp, #4]
   8c650:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8c654:	b004      	add	sp, #16
   8c656:	4770      	bx	lr

0008c658 <__udivmoddi4>:
   8c658:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8c65c:	9e08      	ldr	r6, [sp, #32]
   8c65e:	460d      	mov	r5, r1
   8c660:	4604      	mov	r4, r0
   8c662:	4688      	mov	r8, r1
   8c664:	2b00      	cmp	r3, #0
   8c666:	d14d      	bne.n	8c704 <__udivmoddi4+0xac>
   8c668:	428a      	cmp	r2, r1
   8c66a:	4694      	mov	ip, r2
   8c66c:	d968      	bls.n	8c740 <__udivmoddi4+0xe8>
   8c66e:	fab2 f282 	clz	r2, r2
   8c672:	b152      	cbz	r2, 8c68a <__udivmoddi4+0x32>
   8c674:	fa01 f302 	lsl.w	r3, r1, r2
   8c678:	f1c2 0120 	rsb	r1, r2, #32
   8c67c:	fa20 f101 	lsr.w	r1, r0, r1
   8c680:	fa0c fc02 	lsl.w	ip, ip, r2
   8c684:	ea41 0803 	orr.w	r8, r1, r3
   8c688:	4094      	lsls	r4, r2
   8c68a:	ea4f 411c 	mov.w	r1, ip, lsr #16
   8c68e:	fbb8 f7f1 	udiv	r7, r8, r1
   8c692:	fa1f fe8c 	uxth.w	lr, ip
   8c696:	fb01 8817 	mls	r8, r1, r7, r8
   8c69a:	fb07 f00e 	mul.w	r0, r7, lr
   8c69e:	0c23      	lsrs	r3, r4, #16
   8c6a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8c6a4:	4298      	cmp	r0, r3
   8c6a6:	d90a      	bls.n	8c6be <__udivmoddi4+0x66>
   8c6a8:	eb1c 0303 	adds.w	r3, ip, r3
   8c6ac:	f107 35ff 	add.w	r5, r7, #4294967295
   8c6b0:	f080 811e 	bcs.w	8c8f0 <__udivmoddi4+0x298>
   8c6b4:	4298      	cmp	r0, r3
   8c6b6:	f240 811b 	bls.w	8c8f0 <__udivmoddi4+0x298>
   8c6ba:	3f02      	subs	r7, #2
   8c6bc:	4463      	add	r3, ip
   8c6be:	1a1b      	subs	r3, r3, r0
   8c6c0:	fbb3 f0f1 	udiv	r0, r3, r1
   8c6c4:	fb01 3310 	mls	r3, r1, r0, r3
   8c6c8:	fb00 fe0e 	mul.w	lr, r0, lr
   8c6cc:	b2a4      	uxth	r4, r4
   8c6ce:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   8c6d2:	45a6      	cmp	lr, r4
   8c6d4:	d90a      	bls.n	8c6ec <__udivmoddi4+0x94>
   8c6d6:	eb1c 0404 	adds.w	r4, ip, r4
   8c6da:	f100 33ff 	add.w	r3, r0, #4294967295
   8c6de:	f080 8109 	bcs.w	8c8f4 <__udivmoddi4+0x29c>
   8c6e2:	45a6      	cmp	lr, r4
   8c6e4:	f240 8106 	bls.w	8c8f4 <__udivmoddi4+0x29c>
   8c6e8:	4464      	add	r4, ip
   8c6ea:	3802      	subs	r0, #2
   8c6ec:	2100      	movs	r1, #0
   8c6ee:	eba4 040e 	sub.w	r4, r4, lr
   8c6f2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   8c6f6:	b11e      	cbz	r6, 8c700 <__udivmoddi4+0xa8>
   8c6f8:	2300      	movs	r3, #0
   8c6fa:	40d4      	lsrs	r4, r2
   8c6fc:	e9c6 4300 	strd	r4, r3, [r6]
   8c700:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8c704:	428b      	cmp	r3, r1
   8c706:	d908      	bls.n	8c71a <__udivmoddi4+0xc2>
   8c708:	2e00      	cmp	r6, #0
   8c70a:	f000 80ee 	beq.w	8c8ea <__udivmoddi4+0x292>
   8c70e:	2100      	movs	r1, #0
   8c710:	e9c6 0500 	strd	r0, r5, [r6]
   8c714:	4608      	mov	r0, r1
   8c716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8c71a:	fab3 f183 	clz	r1, r3
   8c71e:	2900      	cmp	r1, #0
   8c720:	d14a      	bne.n	8c7b8 <__udivmoddi4+0x160>
   8c722:	42ab      	cmp	r3, r5
   8c724:	d302      	bcc.n	8c72c <__udivmoddi4+0xd4>
   8c726:	4282      	cmp	r2, r0
   8c728:	f200 80fc 	bhi.w	8c924 <__udivmoddi4+0x2cc>
   8c72c:	1a84      	subs	r4, r0, r2
   8c72e:	eb65 0303 	sbc.w	r3, r5, r3
   8c732:	2001      	movs	r0, #1
   8c734:	4698      	mov	r8, r3
   8c736:	2e00      	cmp	r6, #0
   8c738:	d0e2      	beq.n	8c700 <__udivmoddi4+0xa8>
   8c73a:	e9c6 4800 	strd	r4, r8, [r6]
   8c73e:	e7df      	b.n	8c700 <__udivmoddi4+0xa8>
   8c740:	b902      	cbnz	r2, 8c744 <__udivmoddi4+0xec>
   8c742:	deff      	udf	#255	; 0xff
   8c744:	fab2 f282 	clz	r2, r2
   8c748:	2a00      	cmp	r2, #0
   8c74a:	f040 8091 	bne.w	8c870 <__udivmoddi4+0x218>
   8c74e:	eba1 000c 	sub.w	r0, r1, ip
   8c752:	2101      	movs	r1, #1
   8c754:	ea4f 471c 	mov.w	r7, ip, lsr #16
   8c758:	fa1f fe8c 	uxth.w	lr, ip
   8c75c:	fbb0 f3f7 	udiv	r3, r0, r7
   8c760:	fb07 0013 	mls	r0, r7, r3, r0
   8c764:	0c25      	lsrs	r5, r4, #16
   8c766:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   8c76a:	fb0e f003 	mul.w	r0, lr, r3
   8c76e:	42a8      	cmp	r0, r5
   8c770:	d908      	bls.n	8c784 <__udivmoddi4+0x12c>
   8c772:	eb1c 0505 	adds.w	r5, ip, r5
   8c776:	f103 38ff 	add.w	r8, r3, #4294967295
   8c77a:	d202      	bcs.n	8c782 <__udivmoddi4+0x12a>
   8c77c:	42a8      	cmp	r0, r5
   8c77e:	f200 80ce 	bhi.w	8c91e <__udivmoddi4+0x2c6>
   8c782:	4643      	mov	r3, r8
   8c784:	1a2d      	subs	r5, r5, r0
   8c786:	fbb5 f0f7 	udiv	r0, r5, r7
   8c78a:	fb07 5510 	mls	r5, r7, r0, r5
   8c78e:	fb0e fe00 	mul.w	lr, lr, r0
   8c792:	b2a4      	uxth	r4, r4
   8c794:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8c798:	45a6      	cmp	lr, r4
   8c79a:	d908      	bls.n	8c7ae <__udivmoddi4+0x156>
   8c79c:	eb1c 0404 	adds.w	r4, ip, r4
   8c7a0:	f100 35ff 	add.w	r5, r0, #4294967295
   8c7a4:	d202      	bcs.n	8c7ac <__udivmoddi4+0x154>
   8c7a6:	45a6      	cmp	lr, r4
   8c7a8:	f200 80b6 	bhi.w	8c918 <__udivmoddi4+0x2c0>
   8c7ac:	4628      	mov	r0, r5
   8c7ae:	eba4 040e 	sub.w	r4, r4, lr
   8c7b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8c7b6:	e79e      	b.n	8c6f6 <__udivmoddi4+0x9e>
   8c7b8:	f1c1 0720 	rsb	r7, r1, #32
   8c7bc:	408b      	lsls	r3, r1
   8c7be:	fa22 fc07 	lsr.w	ip, r2, r7
   8c7c2:	ea4c 0c03 	orr.w	ip, ip, r3
   8c7c6:	fa25 fa07 	lsr.w	sl, r5, r7
   8c7ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8c7ce:	fbba f8f9 	udiv	r8, sl, r9
   8c7d2:	fa20 f307 	lsr.w	r3, r0, r7
   8c7d6:	fb09 aa18 	mls	sl, r9, r8, sl
   8c7da:	408d      	lsls	r5, r1
   8c7dc:	fa1f fe8c 	uxth.w	lr, ip
   8c7e0:	431d      	orrs	r5, r3
   8c7e2:	fa00 f301 	lsl.w	r3, r0, r1
   8c7e6:	fb08 f00e 	mul.w	r0, r8, lr
   8c7ea:	0c2c      	lsrs	r4, r5, #16
   8c7ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
   8c7f0:	42a0      	cmp	r0, r4
   8c7f2:	fa02 f201 	lsl.w	r2, r2, r1
   8c7f6:	d90b      	bls.n	8c810 <__udivmoddi4+0x1b8>
   8c7f8:	eb1c 0404 	adds.w	r4, ip, r4
   8c7fc:	f108 3aff 	add.w	sl, r8, #4294967295
   8c800:	f080 8088 	bcs.w	8c914 <__udivmoddi4+0x2bc>
   8c804:	42a0      	cmp	r0, r4
   8c806:	f240 8085 	bls.w	8c914 <__udivmoddi4+0x2bc>
   8c80a:	f1a8 0802 	sub.w	r8, r8, #2
   8c80e:	4464      	add	r4, ip
   8c810:	1a24      	subs	r4, r4, r0
   8c812:	fbb4 f0f9 	udiv	r0, r4, r9
   8c816:	fb09 4410 	mls	r4, r9, r0, r4
   8c81a:	fb00 fe0e 	mul.w	lr, r0, lr
   8c81e:	b2ad      	uxth	r5, r5
   8c820:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   8c824:	45a6      	cmp	lr, r4
   8c826:	d908      	bls.n	8c83a <__udivmoddi4+0x1e2>
   8c828:	eb1c 0404 	adds.w	r4, ip, r4
   8c82c:	f100 35ff 	add.w	r5, r0, #4294967295
   8c830:	d26c      	bcs.n	8c90c <__udivmoddi4+0x2b4>
   8c832:	45a6      	cmp	lr, r4
   8c834:	d96a      	bls.n	8c90c <__udivmoddi4+0x2b4>
   8c836:	3802      	subs	r0, #2
   8c838:	4464      	add	r4, ip
   8c83a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   8c83e:	fba0 9502 	umull	r9, r5, r0, r2
   8c842:	eba4 040e 	sub.w	r4, r4, lr
   8c846:	42ac      	cmp	r4, r5
   8c848:	46c8      	mov	r8, r9
   8c84a:	46ae      	mov	lr, r5
   8c84c:	d356      	bcc.n	8c8fc <__udivmoddi4+0x2a4>
   8c84e:	d053      	beq.n	8c8f8 <__udivmoddi4+0x2a0>
   8c850:	2e00      	cmp	r6, #0
   8c852:	d069      	beq.n	8c928 <__udivmoddi4+0x2d0>
   8c854:	ebb3 0208 	subs.w	r2, r3, r8
   8c858:	eb64 040e 	sbc.w	r4, r4, lr
   8c85c:	fa22 f301 	lsr.w	r3, r2, r1
   8c860:	fa04 f707 	lsl.w	r7, r4, r7
   8c864:	431f      	orrs	r7, r3
   8c866:	40cc      	lsrs	r4, r1
   8c868:	e9c6 7400 	strd	r7, r4, [r6]
   8c86c:	2100      	movs	r1, #0
   8c86e:	e747      	b.n	8c700 <__udivmoddi4+0xa8>
   8c870:	fa0c fc02 	lsl.w	ip, ip, r2
   8c874:	f1c2 0120 	rsb	r1, r2, #32
   8c878:	fa25 f301 	lsr.w	r3, r5, r1
   8c87c:	ea4f 471c 	mov.w	r7, ip, lsr #16
   8c880:	fa20 f101 	lsr.w	r1, r0, r1
   8c884:	4095      	lsls	r5, r2
   8c886:	430d      	orrs	r5, r1
   8c888:	fbb3 f1f7 	udiv	r1, r3, r7
   8c88c:	fb07 3311 	mls	r3, r7, r1, r3
   8c890:	fa1f fe8c 	uxth.w	lr, ip
   8c894:	0c28      	lsrs	r0, r5, #16
   8c896:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8c89a:	fb01 f30e 	mul.w	r3, r1, lr
   8c89e:	4283      	cmp	r3, r0
   8c8a0:	fa04 f402 	lsl.w	r4, r4, r2
   8c8a4:	d908      	bls.n	8c8b8 <__udivmoddi4+0x260>
   8c8a6:	eb1c 0000 	adds.w	r0, ip, r0
   8c8aa:	f101 38ff 	add.w	r8, r1, #4294967295
   8c8ae:	d22f      	bcs.n	8c910 <__udivmoddi4+0x2b8>
   8c8b0:	4283      	cmp	r3, r0
   8c8b2:	d92d      	bls.n	8c910 <__udivmoddi4+0x2b8>
   8c8b4:	3902      	subs	r1, #2
   8c8b6:	4460      	add	r0, ip
   8c8b8:	1ac0      	subs	r0, r0, r3
   8c8ba:	fbb0 f3f7 	udiv	r3, r0, r7
   8c8be:	fb07 0013 	mls	r0, r7, r3, r0
   8c8c2:	b2ad      	uxth	r5, r5
   8c8c4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   8c8c8:	fb03 f00e 	mul.w	r0, r3, lr
   8c8cc:	42a8      	cmp	r0, r5
   8c8ce:	d908      	bls.n	8c8e2 <__udivmoddi4+0x28a>
   8c8d0:	eb1c 0505 	adds.w	r5, ip, r5
   8c8d4:	f103 38ff 	add.w	r8, r3, #4294967295
   8c8d8:	d216      	bcs.n	8c908 <__udivmoddi4+0x2b0>
   8c8da:	42a8      	cmp	r0, r5
   8c8dc:	d914      	bls.n	8c908 <__udivmoddi4+0x2b0>
   8c8de:	3b02      	subs	r3, #2
   8c8e0:	4465      	add	r5, ip
   8c8e2:	1a28      	subs	r0, r5, r0
   8c8e4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   8c8e8:	e738      	b.n	8c75c <__udivmoddi4+0x104>
   8c8ea:	4631      	mov	r1, r6
   8c8ec:	4630      	mov	r0, r6
   8c8ee:	e707      	b.n	8c700 <__udivmoddi4+0xa8>
   8c8f0:	462f      	mov	r7, r5
   8c8f2:	e6e4      	b.n	8c6be <__udivmoddi4+0x66>
   8c8f4:	4618      	mov	r0, r3
   8c8f6:	e6f9      	b.n	8c6ec <__udivmoddi4+0x94>
   8c8f8:	454b      	cmp	r3, r9
   8c8fa:	d2a9      	bcs.n	8c850 <__udivmoddi4+0x1f8>
   8c8fc:	ebb9 0802 	subs.w	r8, r9, r2
   8c900:	eb65 0e0c 	sbc.w	lr, r5, ip
   8c904:	3801      	subs	r0, #1
   8c906:	e7a3      	b.n	8c850 <__udivmoddi4+0x1f8>
   8c908:	4643      	mov	r3, r8
   8c90a:	e7ea      	b.n	8c8e2 <__udivmoddi4+0x28a>
   8c90c:	4628      	mov	r0, r5
   8c90e:	e794      	b.n	8c83a <__udivmoddi4+0x1e2>
   8c910:	4641      	mov	r1, r8
   8c912:	e7d1      	b.n	8c8b8 <__udivmoddi4+0x260>
   8c914:	46d0      	mov	r8, sl
   8c916:	e77b      	b.n	8c810 <__udivmoddi4+0x1b8>
   8c918:	4464      	add	r4, ip
   8c91a:	3802      	subs	r0, #2
   8c91c:	e747      	b.n	8c7ae <__udivmoddi4+0x156>
   8c91e:	3b02      	subs	r3, #2
   8c920:	4465      	add	r5, ip
   8c922:	e72f      	b.n	8c784 <__udivmoddi4+0x12c>
   8c924:	4608      	mov	r0, r1
   8c926:	e706      	b.n	8c736 <__udivmoddi4+0xde>
   8c928:	4631      	mov	r1, r6
   8c92a:	e6e9      	b.n	8c700 <__udivmoddi4+0xa8>

0008c92c <__aeabi_idiv0>:
   8c92c:	4770      	bx	lr
   8c92e:	bf00      	nop
   8c930:	78383025 	.word	0x78383025
   8c934:	00000000 	.word	0x00000000

0008c938 <BUILD_DATE>:
   8c938:	206e614a 32203932 00333230              Jan 29 2023.

0008c944 <BUILD_TIME>:
   8c944:	313a3431 36343a36 00000000 00000000     14:16:46........
   8c954:	00000000 00000000 aaaaaa00 aaaaaaaa     ................
   8c964:	eeeeeeaa eeeeeeee fffffeee ffffffff     ................
   8c974:	ffffffff dfbf7fff fdfbf7ef dfbf7efc     .............~..
   8c984:	fdfbf7ef 0000007e                       ....~...

0008c98c <CSWTCH.109>:
   8c98c:	00010102                                ....

0008c990 <_global_impure_ptr>:
   8c990:	20070b38 00464e49 00666e69 004e414e     8.. INF.inf.NAN.
   8c9a0:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8c9b0:	66656463 00000000 33323130 37363534     cdef....01234567
   8c9c0:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8c9d0:	0000296c 00000030                       l)..0...

0008c9d8 <blanks.1>:
   8c9d8:	20202020 20202020 20202020 20202020                     

0008c9e8 <zeroes.0>:
   8c9e8:	30303030 30303030 30303030 30303030     0000000000000000
   8c9f8:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8ca08:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8ca18:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8ca28:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8ca38:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8ca48:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8ca58:	656e696c 3833332d 3230325f 31303131     line-338_2021101
   8ca68:	36315f38 31353433 33303236 6372732f     8_1634516203/src
   8ca78:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8ca88:	2f636269 6c647473 642f6269 2e616f74     ibc/stdlib/dtoa.
   8ca98:	00000063 746e6d2f 726f772f 6170736b     c.../mnt/workspa
   8caa8:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8cab8:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8cac8:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8cad8:	656e696c 3833332d 3230325f 31303131     line-338_2021101
   8cae8:	36315f38 31353433 33303236 6372732f     8_1634516203/src
   8caf8:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8cb08:	2f636269 6c647473 6d2f6269 63657270     ibc/stdlib/mprec
   8cb18:	0000632e 00000000                       .c......

0008cb20 <__mprec_bigtens>:
   8cb20:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8cb30:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8cb40:	7f73bf3c 75154fdd                       <.s..O.u

0008cb48 <__mprec_tens>:
   8cb48:	00000000 3ff00000 00000000 40240000     .......?......$@
   8cb58:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8cb68:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8cb78:	00000000 412e8480 00000000 416312d0     .......A......cA
   8cb88:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8cb98:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8cba8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8cbb8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8cbc8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8cbd8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8cbe8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8cbf8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8cc08:	79d99db4 44ea7843                       ...yCx.D

0008cc10 <p05.0>:
   8cc10:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8cc20:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8cc30:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8cc40:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8cc50:	2520656e 25732564 00000a73 00000043     ne %d%s%s...C...
   8cc60:	49534f50 00000058 0000002e              POSIX.......

0008cc6c <blanks.1>:
   8cc6c:	20202020 20202020 20202020 20202020                     

0008cc7c <zeroes.0>:
   8cc7c:	30303030 30303030 30303030 30303030     0000000000000000

0008cc8c <_ctype_>:
   8cc8c:	20202000 20202020 28282020 20282828     .         ((((( 
   8cc9c:	20202020 20202020 20202020 20202020                     
   8ccac:	10108820 10101010 10101010 10101010      ...............
   8ccbc:	04040410 04040404 10040404 10101010     ................
   8cccc:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8ccdc:	01010101 01010101 01010101 10101010     ................
   8ccec:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8ccfc:	02020202 02020202 02020202 10101010     ................
   8cd0c:	00000020 00000000 00000000 00000000      ...............
   8cd1c:	00000000 00000000 00000000 00000000     ................
   8cd2c:	00000000 00000000 00000000 00000000     ................
   8cd3c:	00000000 00000000 00000000 00000000     ................
   8cd4c:	00000000 00000000 00000000 00000000     ................
   8cd5c:	00000000 00000000 00000000 00000000     ................
   8cd6c:	00000000 00000000 00000000 00000000     ................
   8cd7c:	00000000 00000000 00000000 00000000     ................
   8cd8c:	00000000                                ....

0008cd90 <_init>:
   8cd90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cd92:	bf00      	nop
   8cd94:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8cd96:	bc08      	pop	{r3}
   8cd98:	469e      	mov	lr, r3
   8cd9a:	4770      	bx	lr

0008cd9c <__init_array_start>:
   8cd9c:	00087985 	.word	0x00087985

0008cda0 <__frame_dummy_init_array_entry>:
   8cda0:	00080119                                ....

0008cda4 <_fini>:
   8cda4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cda6:	bf00      	nop
   8cda8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8cdaa:	bc08      	pop	{r3}
   8cdac:	469e      	mov	lr, r3
   8cdae:	4770      	bx	lr

0008cdb0 <__do_global_dtors_aux_fini_array_entry>:
   8cdb0:	00f5 0008                                   ....

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4819      	ldr	r0, [pc, #100]	; (2007006c <SystemInit+0x6c>)
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070006:	491a      	ldr	r1, [pc, #104]	; (20070070 <SystemInit+0x70>)
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070008:	4a1a      	ldr	r2, [pc, #104]	; (20070074 <SystemInit+0x74>)
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000a:	6003      	str	r3, [r0, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	600b      	str	r3, [r1, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	6a13      	ldr	r3, [r2, #32]
20070010:	01db      	lsls	r3, r3, #7
20070012:	d404      	bmi.n	2007001e <SystemInit+0x1e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070014:	4b18      	ldr	r3, [pc, #96]	; (20070078 <SystemInit+0x78>)
20070016:	6213      	str	r3, [r2, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070018:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007001a:	07d8      	lsls	r0, r3, #31
2007001c:	d5fc      	bpl.n	20070018 <SystemInit+0x18>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2007001e:	4a15      	ldr	r2, [pc, #84]	; (20070074 <SystemInit+0x74>)
20070020:	4b16      	ldr	r3, [pc, #88]	; (2007007c <SystemInit+0x7c>)
20070022:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20070024:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070026:	03d9      	lsls	r1, r3, #15
20070028:	d5fc      	bpl.n	20070024 <SystemInit+0x24>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2007002a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2007002c:	4811      	ldr	r0, [pc, #68]	; (20070074 <SystemInit+0x74>)
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2007002e:	f023 0303 	bic.w	r3, r3, #3
20070032:	f043 0301 	orr.w	r3, r3, #1
20070036:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070038:	6e83      	ldr	r3, [r0, #104]	; 0x68
2007003a:	071b      	lsls	r3, r3, #28
2007003c:	d5fc      	bpl.n	20070038 <SystemInit+0x38>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007003e:	4b10      	ldr	r3, [pc, #64]	; (20070080 <SystemInit+0x80>)
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070040:	490c      	ldr	r1, [pc, #48]	; (20070074 <SystemInit+0x74>)
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070042:	6283      	str	r3, [r0, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070044:	6e8b      	ldr	r3, [r1, #104]	; 0x68
20070046:	0798      	lsls	r0, r3, #30
20070048:	d5fc      	bpl.n	20070044 <SystemInit+0x44>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007004a:	2311      	movs	r3, #17
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2007004c:	4a09      	ldr	r2, [pc, #36]	; (20070074 <SystemInit+0x74>)
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007004e:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070050:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070052:	0719      	lsls	r1, r3, #28
20070054:	d5fc      	bpl.n	20070050 <SystemInit+0x50>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070056:	2312      	movs	r3, #18
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	4906      	ldr	r1, [pc, #24]	; (20070074 <SystemInit+0x74>)
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007005a:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2007005c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
2007005e:	071b      	lsls	r3, r3, #28
20070060:	d5fc      	bpl.n	2007005c <SystemInit+0x5c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070062:	4b08      	ldr	r3, [pc, #32]	; (20070084 <SystemInit+0x84>)
20070064:	4a08      	ldr	r2, [pc, #32]	; (20070088 <SystemInit+0x88>)
20070066:	601a      	str	r2, [r3, #0]
}
20070068:	4770      	bx	lr
2007006a:	bf00      	nop
2007006c:	400e0a00 	.word	0x400e0a00
20070070:	400e0c00 	.word	0x400e0c00
20070074:	400e0600 	.word	0x400e0600
20070078:	00370809 	.word	0x00370809
2007007c:	01370809 	.word	0x01370809
20070080:	200d3f01 	.word	0x200d3f01
20070084:	20070948 	.word	0x20070948
20070088:	0501bd00 	.word	0x0501bd00

2007008c <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
2007008c:	4b19      	ldr	r3, [pc, #100]	; (200700f4 <system_init_flash+0x68>)
2007008e:	4298      	cmp	r0, r3
20070090:	d805      	bhi.n	2007009e <system_init_flash+0x12>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20070092:	2300      	movs	r3, #0
20070094:	4918      	ldr	r1, [pc, #96]	; (200700f8 <system_init_flash+0x6c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20070096:	4a19      	ldr	r2, [pc, #100]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20070098:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
2007009a:	6013      	str	r3, [r2, #0]
2007009c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
2007009e:	4b18      	ldr	r3, [pc, #96]	; (20070100 <system_init_flash+0x74>)
200700a0:	4298      	cmp	r0, r3
200700a2:	d806      	bhi.n	200700b2 <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700a4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700a8:	4913      	ldr	r1, [pc, #76]	; (200700f8 <system_init_flash+0x6c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700aa:	4a14      	ldr	r2, [pc, #80]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ac:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ae:	6013      	str	r3, [r2, #0]
200700b0:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b2:	4b14      	ldr	r3, [pc, #80]	; (20070104 <system_init_flash+0x78>)
200700b4:	4298      	cmp	r0, r3
200700b6:	d309      	bcc.n	200700cc <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b8:	4b13      	ldr	r3, [pc, #76]	; (20070108 <system_init_flash+0x7c>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d80d      	bhi.n	200700da <system_init_flash+0x4e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700be:	f44f 7340 	mov.w	r3, #768	; 0x300
200700c2:	490d      	ldr	r1, [pc, #52]	; (200700f8 <system_init_flash+0x6c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700c4:	4a0d      	ldr	r2, [pc, #52]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700c6:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700c8:	6013      	str	r3, [r2, #0]
200700ca:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700cc:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d0:	4909      	ldr	r1, [pc, #36]	; (200700f8 <system_init_flash+0x6c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700d2:	4a0a      	ldr	r2, [pc, #40]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700da:	4b0c      	ldr	r3, [pc, #48]	; (2007010c <system_init_flash+0x80>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700dc:	4906      	ldr	r1, [pc, #24]	; (200700f8 <system_init_flash+0x6c>)
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700de:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700e0:	bf94      	ite	ls
200700e2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700e6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ea:	4a04      	ldr	r2, [pc, #16]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700ec:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ee:	6013      	str	r3, [r2, #0]
	}
}
200700f0:	4770      	bx	lr
200700f2:	bf00      	nop
200700f4:	0121eabf 	.word	0x0121eabf
200700f8:	400e0a00 	.word	0x400e0a00
200700fc:	400e0c00 	.word	0x400e0c00
20070100:	02faf07f 	.word	0x02faf07f
20070104:	03d09000 	.word	0x03d09000
20070108:	04c4b3ff 	.word	0x04c4b3ff
2007010c:	055d4a7f 	.word	0x055d4a7f

20070110 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070110:	b530      	push	{r4, r5, lr}
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMS32|| SAM4CMP32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
20070112:	4c20      	ldr	r4, [pc, #128]	; (20070194 <efc_perform_read_sequence+0x84>)
{
20070114:	b083      	sub	sp, #12
			(uint32_t *) ((p_efc == EFC0) ?
20070116:	42a0      	cmp	r0, r4
20070118:	bf0c      	ite	eq
2007011a:	f44f 2c00 	moveq.w	ip, #524288	; 0x80000
2007011e:	f44f 2c40 	movne.w	ip, #786432	; 0xc0000
{
20070122:	9d06      	ldr	r5, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070124:	b393      	cbz	r3, 2007018c <efc_perform_read_sequence+0x7c>
20070126:	4686      	mov	lr, r0
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20070128:	6800      	ldr	r0, [r0, #0]
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2007012a:	b2c9      	uxtb	r1, r1
2007012c:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FMR |= (0x1u << 16);
20070130:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
20070134:	f8ce 0000 	str.w	r0, [lr]
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070138:	f8ce 1004 	str.w	r1, [lr, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2007013c:	f8de 1008 	ldr.w	r1, [lr, #8]
20070140:	9101      	str	r1, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20070142:	9801      	ldr	r0, [sp, #4]
20070144:	f010 0001 	ands.w	r0, r0, #1
20070148:	d1f8      	bne.n	2007013c <efc_perform_read_sequence+0x2c>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007014a:	b165      	cbz	r5, 20070166 <efc_perform_read_sequence+0x56>
2007014c:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
20070150:	f1ac 0104 	sub.w	r1, ip, #4
20070154:	3b04      	subs	r3, #4
20070156:	f1a5 0c04 	sub.w	ip, r5, #4
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007015a:	f851 4f04 	ldr.w	r4, [r1, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007015e:	4561      	cmp	r1, ip
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20070160:	f843 4f04 	str.w	r4, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070164:	d1f9      	bne.n	2007015a <efc_perform_read_sequence+0x4a>
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20070166:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20070168:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
2007016c:	f8ce 2004 	str.w	r2, [lr, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070170:	f8de 3008 	ldr.w	r3, [lr, #8]
20070174:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070176:	9b01      	ldr	r3, [sp, #4]
20070178:	07db      	lsls	r3, r3, #31
2007017a:	d5f9      	bpl.n	20070170 <efc_perform_read_sequence+0x60>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2007017c:	f8de 3000 	ldr.w	r3, [lr]
20070180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20070184:	f8ce 3000 	str.w	r3, [lr]

	return EFC_RC_OK;
}
20070188:	b003      	add	sp, #12
2007018a:	bd30      	pop	{r4, r5, pc}
		return EFC_RC_INVALID;
2007018c:	2002      	movs	r0, #2
}
2007018e:	b003      	add	sp, #12
20070190:	bd30      	pop	{r4, r5, pc}
20070192:	bf00      	nop
20070194:	400e0a00 	.word	0x400e0a00

20070198 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20070198:	6001      	str	r1, [r0, #0]
}
2007019a:	4770      	bx	lr

2007019c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2007019c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2007019e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200701a0:	6883      	ldr	r3, [r0, #8]
200701a2:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200701a4:	9b01      	ldr	r3, [sp, #4]
200701a6:	07db      	lsls	r3, r3, #31
200701a8:	d5fa      	bpl.n	200701a0 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
200701aa:	9801      	ldr	r0, [sp, #4]
}
200701ac:	f000 0006 	and.w	r0, r0, #6
200701b0:	b002      	add	sp, #8
200701b2:	4770      	bx	lr

200701b4 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
200701b4:	f3bf 8f5f 	dmb	sy
200701b8:	3801      	subs	r0, #1
200701ba:	d1fb      	bne.n	200701b4 <portable_delay_cycles>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
200701bc:	4770      	bx	lr
200701be:	0000      	movs	r0, r0

200701c0 <pin_spi1_cs>:
200701c0:	ffff ffff                                   ....

200701c4 <pin_spi1_miso>:
200701c4:	ffff ffff                                   ....

200701c8 <pin_spi1_mosi>:
200701c8:	ffff ffff                                   ....

200701cc <pin_spi1_sck>:
200701cc:	ffff ffff                                   ....

200701d0 <usb_serial_number>:
200701d0:	3030 3030 3030 3030 3030 3030 4544 4441     000000000000DEAD
200701e0:	4542 4645 0000 0000 0000 0000 0000 0000     BEEF............
200701f0:	0000 0000                                   ....

200701f4 <USER_TWI_PACKET>:
200701f4:	0000 0000 0001 0000 0000 0000 0000 0000     ................
20070204:	0000 0000                                   ....

20070208 <last_power_state.0>:
20070208:	0001 0000                                   ....

2007020c <MS_BOS_PACKET>:
2007020c:	0f05 0021 1c01 0510 df00 dd60 89d8 c745     ..!.......`...E.
2007021c:	9c4c 65d2 9e9d 8a64 009f 0300 4a06 0101     L..e..d......J..
2007022c:	0000 0000                                   ....

20070230 <MS_OS_DESC>:
20070230:	000a 0000 0000 0603 014a 0008 0002 0000     ........J.......
20070240:	00a0 0014 0003 4957 554e 4253 0000 0000     ......WINUSB....
20070250:	0000 0000 0000 0084 0004 0007 002a 0044     ............*.D.
20070260:	0065 0076 0069 0063 0065 0049 006e 0074     e.v.i.c.e.I.n.t.
20070270:	0065 0072 0066 0061 0063 0065 0047 0055     e.r.f.a.c.e.G.U.
20070280:	0049 0044 0073 0000 0050 007b 0030 0041     I.D.s...P.{.0.A.
20070290:	0043 0045 0032 0042 0033 0045 002d 0032     C.E.2.B.3.E.-.2.
200702a0:	0042 0033 0045 002d 0032 0042 0033 0045     B.3.E.-.2.B.3.E.
200702b0:	002d 0032 0042 0033 0045 002d 0034 0033     -.2.B.3.E.-.4.3.
200702c0:	0034 0030 0030 0041 0043 0045 0032 0042     4.0.0.A.C.E.2.B.
200702d0:	0033 0045 007d 0000 0000 0008 0002 0001     3.E.}...........
200702e0:	00a0 0014 0003 4957 554e 4253 0000 0000     ......WINUSB....
200702f0:	0000 0000 0000 0084 0004 0007 002a 0044     ............*.D.
20070300:	0065 0076 0069 0063 0065 0049 006e 0074     e.v.i.c.e.I.n.t.
20070310:	0065 0072 0066 0061 0063 0065 0047 0055     e.r.f.a.c.e.G.U.
20070320:	0049 0044 0073 0000 0050 007b 0031 0041     I.D.s...P.{.1.A.
20070330:	0043 0045 0032 0042 0033 0045 002d 0032     C.E.2.B.3.E.-.2.
20070340:	0042 0033 0045 002d 0032 0042 0033 0045     B.3.E.-.2.B.3.E.
20070350:	002d 0032 0042 0033 0045 002d 0034 0033     -.2.B.3.E.-.4.3.
20070360:	0034 0030 0031 0041 0043 0045 0032 0042     4.0.1.A.C.E.2.B.
20070370:	0033 0045 007d 0000 0000 0000               3.E.}.......

2007037c <udc_string_desc>:
2007037c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
2007038c:	0000 0000 0000 0000 0000 0000 0000 0000     ................
2007039c:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200703ac:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200703bc:	0000 0000                                   ....

200703c0 <udc_string_desc_languageid>:
200703c0:	0304 0409                                   ....

200703c4 <udc_string_manufacturer_name>:
200703c4:	654e 4177 2045 6554 6863 6f6e 6f6c 7967     NewAE Technology
200703d4:	4920 636e 002e 0000                          Inc....

200703dc <udc_string_product_name>:
200703dc:	6843 7069 6857 7369 6570 6572 2072 5743     ChipWhisperer CW
200703ec:	3433 2030 202d 754c 616e 4220 616f 6472     340 - Luna Board
200703fc:	                                             .

200703fd <main_b_vendor_enable>:
200703fd:	0001                                         ...

20070400 <usart0_driver>:
20070400:	8000 4009 0000 0000 0000 0000 0000 0000     ...@............
20070410:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070420:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070430:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070440:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070450:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070460:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070470:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070480:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070490:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704a0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704b0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704c0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704d0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704e0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704f0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070500:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070510:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070520:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070530:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070540:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070550:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070560:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070570:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070580:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070590:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705a0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705b0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705c0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705d0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705e0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705f0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070600:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070610:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070620:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070630:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070640:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070650:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070660:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070670:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070680:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070690:	0000 0000 0000 0000 0000 0000 0009 0000     ................

200706a0 <usart1_driver>:
200706a0:	c000 4009 0000 0000 0000 0000 0000 0000     ...@............
200706b0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200706c0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200706d0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200706e0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200706f0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070700:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070710:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070720:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070730:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070740:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070750:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070760:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070770:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070780:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070790:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707a0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707b0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707c0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707d0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707e0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707f0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070800:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070810:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070820:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070830:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070840:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070850:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070860:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070870:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070880:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070890:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708a0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708b0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708c0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708d0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708e0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708f0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070900:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070910:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070920:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070930:	0000 0000 0000 0000 0001 0000 0009 0000     ................

20070940 <vccint_setting>:
20070940:	03e8 0000                                   ....

20070944 <xram>:
20070944:	0000 6000                                   ...`

20070948 <SystemCoreClock>:
20070948:	0900 003d                                   ..=.

2007094c <udi_api_vendor>:
2007094c:	3475 0008 3431 0008 3445 0008 3425 0008     u4..14..E4..%4..
2007095c:	0000 0000                                   ....

20070960 <udc_config>:
20070960:	0ad0 2007 0980 2007 0ad0 2007 0ae4 2007     ... ... ... ... 
20070970:	0978 2007 0000 0000                         x.. ....

20070978 <udc_config_hs>:
20070978:	0a2c 2007 0af0 2007                         ,.. ... 

20070980 <udc_config_lsfs>:
20070980:	0988 2007 0af0 2007                         ... ... 

20070988 <udc_desc_fs>:
20070988:	0209 00a4 0105 8000 09fa 0004 0200 ffff     ................
20070998:	00ff 0507 0281 0040 0700 0205 4002 0000     ......@......@..
200709a8:	0b08 0201 0202 0000 0409 0001 0201 0002     ................
200709b8:	0500 0024 0110 2404 0202 2405 0106 0502     ..$....$...$....
200709c8:	0124 0203 0507 0387 0040 0910 0204 0200     $.......@.......
200709d8:	000a 0000 0507 0283 0040 0700 0405 4002     ........@......@
200709e8:	0000 0b08 0203 0202 0000 0409 0003 0201     ................
200709f8:	0002 0500 0024 0110 2404 0202 2405 0306     ....$....$...$..
20070a08:	0504 0124 0403 0507 0388 0040 0910 0404     ..$.......@.....
20070a18:	0200 000a 0000 0507 0285 0040 0700 0605     ..........@.....
20070a28:	4002 0000                                   .@..

20070a2c <udc_desc_hs>:
20070a2c:	0209 00a4 0105 8000 09fa 0004 0200 ffff     ................
20070a3c:	00ff 0507 0281 0200 0700 0205 0002 0002     ................
20070a4c:	0b08 0201 0202 0000 0409 0001 0201 0002     ................
20070a5c:	0500 0024 0110 2404 0202 2405 0106 0502     ..$....$...$....
20070a6c:	0124 0203 0507 0387 0040 0910 0204 0200     $.......@.......
20070a7c:	000a 0000 0507 0283 0200 0700 0405 0002     ................
20070a8c:	0002 0b08 0203 0202 0000 0409 0003 0201     ................
20070a9c:	0002 0500 0024 0110 2404 0202 2405 0306     ....$....$...$..
20070aac:	0504 0124 0403 0507 0388 0040 0910 0404     ..$.......@.....
20070abc:	0200 000a 0000 0507 0285 0200 0700 0605     ................
20070acc:	0002 0002                                   ....

20070ad0 <udc_device_desc>:
20070ad0:	0112 0200 0000 4000 2b3e c340 0900 0201     .......@>+@.....
20070ae0:	0103 0000                                   ....

20070ae4 <udc_device_qual>:
20070ae4:	060a 0200 0000 4000 0001 0000               .......@....

20070af0 <udi_apis>:
20070af0:	094c 2007 0b08 2007 0b1c 2007 0b08 2007     L.. ... ... ... 
20070b00:	0b1c 2007                                   ... 

20070b04 <g_interrupt_enabled>:
20070b04:	0001 0000                                   ....

20070b08 <udi_api_cdc_comm>:
20070b08:	5429 0008 5359 0008 5369 0008 53fd 0008     )T..YS..iS...S..
20070b18:	0000 0000                                   ....

20070b1c <udi_api_cdc_data>:
20070b1c:	57c9 0008 54bd 0008 53f9 0008 53fd 0008     .W...T...S...S..
20070b2c:	5699 0008                                   .V..

20070b30 <_impure_ptr>:
20070b30:	0b38 2007 0000 0000                         8.. ....

20070b38 <impure_data>:
20070b38:	0000 0000 0e24 2007 0e8c 2007 0ef4 2007     ....$.. ... ... 
20070b48:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070b58:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070b68:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070b78:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070b88:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070b98:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ba8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070bb8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070bc8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070bd8:	0000 0000 0000 0000 0001 0000 0000 0000     ................
20070be8:	330e abcd 1234 e66d deec 0005 000b 0000     .3..4.m.........
20070bf8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c08:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c18:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c28:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c38:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c48:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c58:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c68:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c78:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c88:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c98:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ca8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070cb8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070cc8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070cd8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ce8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070cf8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d08:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d18:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d28:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d38:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d48:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d58:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d68:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d78:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d88:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d98:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070da8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070db8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070dc8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070dd8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070de8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070df8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e08:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e18:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e28:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e38:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e48:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e58:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e68:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e78:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e88:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e98:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ea8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070eb8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ec8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ed8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ee8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ef8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f08:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f18:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f28:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f38:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f48:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f58:	0000 0000 0000 0000                         ........

20070f60 <__atexit_recursive_mutex>:
20070f60:	330c 2007                                   .3. 

20070f64 <__malloc_av_>:
20070f64:	0000 0000 0000 0000 0f64 2007 0f64 2007     ........d.. d.. 
20070f74:	0f6c 2007 0f6c 2007 0f74 2007 0f74 2007     l.. l.. t.. t.. 
20070f84:	0f7c 2007 0f7c 2007 0f84 2007 0f84 2007     |.. |.. ... ... 
20070f94:	0f8c 2007 0f8c 2007 0f94 2007 0f94 2007     ... ... ... ... 
20070fa4:	0f9c 2007 0f9c 2007 0fa4 2007 0fa4 2007     ... ... ... ... 
20070fb4:	0fac 2007 0fac 2007 0fb4 2007 0fb4 2007     ... ... ... ... 
20070fc4:	0fbc 2007 0fbc 2007 0fc4 2007 0fc4 2007     ... ... ... ... 
20070fd4:	0fcc 2007 0fcc 2007 0fd4 2007 0fd4 2007     ... ... ... ... 
20070fe4:	0fdc 2007 0fdc 2007 0fe4 2007 0fe4 2007     ... ... ... ... 
20070ff4:	0fec 2007 0fec 2007 0ff4 2007 0ff4 2007     ... ... ... ... 
20071004:	0ffc 2007 0ffc 2007 1004 2007 1004 2007     ... ... ... ... 
20071014:	100c 2007 100c 2007 1014 2007 1014 2007     ... ... ... ... 
20071024:	101c 2007 101c 2007 1024 2007 1024 2007     ... ... $.. $.. 
20071034:	102c 2007 102c 2007 1034 2007 1034 2007     ,.. ,.. 4.. 4.. 
20071044:	103c 2007 103c 2007 1044 2007 1044 2007     <.. <.. D.. D.. 
20071054:	104c 2007 104c 2007 1054 2007 1054 2007     L.. L.. T.. T.. 
20071064:	105c 2007 105c 2007 1064 2007 1064 2007     \.. \.. d.. d.. 
20071074:	106c 2007 106c 2007 1074 2007 1074 2007     l.. l.. t.. t.. 
20071084:	107c 2007 107c 2007 1084 2007 1084 2007     |.. |.. ... ... 
20071094:	108c 2007 108c 2007 1094 2007 1094 2007     ... ... ... ... 
200710a4:	109c 2007 109c 2007 10a4 2007 10a4 2007     ... ... ... ... 
200710b4:	10ac 2007 10ac 2007 10b4 2007 10b4 2007     ... ... ... ... 
200710c4:	10bc 2007 10bc 2007 10c4 2007 10c4 2007     ... ... ... ... 
200710d4:	10cc 2007 10cc 2007 10d4 2007 10d4 2007     ... ... ... ... 
200710e4:	10dc 2007 10dc 2007 10e4 2007 10e4 2007     ... ... ... ... 
200710f4:	10ec 2007 10ec 2007 10f4 2007 10f4 2007     ... ... ... ... 
20071104:	10fc 2007 10fc 2007 1104 2007 1104 2007     ... ... ... ... 
20071114:	110c 2007 110c 2007 1114 2007 1114 2007     ... ... ... ... 
20071124:	111c 2007 111c 2007 1124 2007 1124 2007     ... ... $.. $.. 
20071134:	112c 2007 112c 2007 1134 2007 1134 2007     ,.. ,.. 4.. 4.. 
20071144:	113c 2007 113c 2007 1144 2007 1144 2007     <.. <.. D.. D.. 
20071154:	114c 2007 114c 2007 1154 2007 1154 2007     L.. L.. T.. T.. 
20071164:	115c 2007 115c 2007 1164 2007 1164 2007     \.. \.. d.. d.. 
20071174:	116c 2007 116c 2007 1174 2007 1174 2007     l.. l.. t.. t.. 
20071184:	117c 2007 117c 2007 1184 2007 1184 2007     |.. |.. ... ... 
20071194:	118c 2007 118c 2007 1194 2007 1194 2007     ... ... ... ... 
200711a4:	119c 2007 119c 2007 11a4 2007 11a4 2007     ... ... ... ... 
200711b4:	11ac 2007 11ac 2007 11b4 2007 11b4 2007     ... ... ... ... 
200711c4:	11bc 2007 11bc 2007 11c4 2007 11c4 2007     ... ... ... ... 
200711d4:	11cc 2007 11cc 2007 11d4 2007 11d4 2007     ... ... ... ... 
200711e4:	11dc 2007 11dc 2007 11e4 2007 11e4 2007     ... ... ... ... 
200711f4:	11ec 2007 11ec 2007 11f4 2007 11f4 2007     ... ... ... ... 
20071204:	11fc 2007 11fc 2007 1204 2007 1204 2007     ... ... ... ... 
20071214:	120c 2007 120c 2007 1214 2007 1214 2007     ... ... ... ... 
20071224:	121c 2007 121c 2007 1224 2007 1224 2007     ... ... $.. $.. 
20071234:	122c 2007 122c 2007 1234 2007 1234 2007     ,.. ,.. 4.. 4.. 
20071244:	123c 2007 123c 2007 1244 2007 1244 2007     <.. <.. D.. D.. 
20071254:	124c 2007 124c 2007 1254 2007 1254 2007     L.. L.. T.. T.. 
20071264:	125c 2007 125c 2007 1264 2007 1264 2007     \.. \.. d.. d.. 
20071274:	126c 2007 126c 2007 1274 2007 1274 2007     l.. l.. t.. t.. 
20071284:	127c 2007 127c 2007 1284 2007 1284 2007     |.. |.. ... ... 
20071294:	128c 2007 128c 2007 1294 2007 1294 2007     ... ... ... ... 
200712a4:	129c 2007 129c 2007 12a4 2007 12a4 2007     ... ... ... ... 
200712b4:	12ac 2007 12ac 2007 12b4 2007 12b4 2007     ... ... ... ... 
200712c4:	12bc 2007 12bc 2007 12c4 2007 12c4 2007     ... ... ... ... 
200712d4:	12cc 2007 12cc 2007 12d4 2007 12d4 2007     ... ... ... ... 
200712e4:	12dc 2007 12dc 2007 12e4 2007 12e4 2007     ... ... ... ... 
200712f4:	12ec 2007 12ec 2007 12f4 2007 12f4 2007     ... ... ... ... 
20071304:	12fc 2007 12fc 2007 1304 2007 1304 2007     ... ... ... ... 
20071314:	130c 2007 130c 2007 1314 2007 1314 2007     ... ... ... ... 
20071324:	131c 2007 131c 2007 1324 2007 1324 2007     ... ... $.. $.. 
20071334:	132c 2007 132c 2007 1334 2007 1334 2007     ,.. ,.. 4.. 4.. 
20071344:	133c 2007 133c 2007 1344 2007 1344 2007     <.. <.. D.. D.. 
20071354:	134c 2007 134c 2007 1354 2007 1354 2007     L.. L.. T.. T.. 
20071364:	135c 2007 135c 2007                         \.. \.. 

2007136c <__malloc_sbrk_base>:
2007136c:	ffff ffff                                   ....

20071370 <__malloc_trim_threshold>:
20071370:	0000 0002                                   ....

20071374 <__global_locale>:
20071374:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
20071384:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071394:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
200713a4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200713b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
200713c4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200713d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
200713e4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200713f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
20071404:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071414:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
20071424:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071434:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
20071444:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071454:	b071 0008 9cdd 0008 0000 0000 cc8c 0008     q...............
20071464:	cc68 0008 cc28 0008 cc28 0008 cc28 0008     h...(...(...(...
20071474:	cc28 0008 cc28 0008 cc28 0008 cc28 0008     (...(...(...(...
20071484:	cc28 0008 cc28 0008 ffff ffff ffff ffff     (...(...........
20071494:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
200714a4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200714b4:	0000 0000 0000 0000 0000 5341 4943 0049     ..........ASCII.
200714c4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200714d4:	0000 0000 0000 0000 0000 0000               ............
