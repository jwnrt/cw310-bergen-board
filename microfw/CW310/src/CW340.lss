
CW340.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000ceb4  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008ceb4  0008ceb4  0001ceb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000014e0  20070000  0008cebc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001e74  200714e0  0008e39c  000214e0  2**2
                  ALLOC
  4 .stack        00001504  20073354  00090210  000214e0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000214e0  2**0
                  CONTENTS, READONLY
  6 .comment      00000049  00000000  00000000  00021509  2**0
                  CONTENTS, READONLY
  7 .debug_info   00021fbd  00000000  00000000  00021552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00006649  00000000  00000000  0004350f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    00011170  00000000  00000000  00049b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001490  00000000  00000000  0005acc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00005388  00000000  00000000  0005c158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  00025308  00000000  00000000  000614e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0002d683  00000000  00000000  000867e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    000750ce  00000000  00000000  000b3e6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00004bd8  00000000  00000000  00128f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	58 48 07 20 a1 38 08 00 9d 38 08 00 9d 38 08 00     XH. .8...8...8..
   80010:	9d 38 08 00 9d 38 08 00 9d 38 08 00 00 00 00 00     .8...8...8......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 9d 38 08 00     .............8..
   80030:	9d 38 08 00 00 00 00 00 9d 38 08 00 9d 38 08 00     .8.......8...8..
   80040:	9d 38 08 00 9d 38 08 00 9d 38 08 00 9d 38 08 00     .8...8...8...8..
   80050:	9d 38 08 00 9d 38 08 00 9d 38 08 00 9d 38 08 00     .8...8...8...8..
   80060:	9d 38 08 00 9d 38 08 00 00 00 00 00 91 32 08 00     .8...8.......2..
   80070:	a1 32 08 00 b1 32 08 00 c1 32 08 00 00 00 00 00     .2...2...2......
   80080:	00 00 00 00 b5 1c 08 00 c5 1c 08 00 9d 38 08 00     .............8..
   80090:	9d 38 08 00 9d 38 08 00 9d 38 08 00 9d 38 08 00     .8...8...8...8..
   800a0:	9d 38 08 00 00 00 00 00 9d 38 08 00 9d 38 08 00     .8.......8...8..
   800b0:	ad 0f 08 00 9d 38 08 00 9d 38 08 00 9d 38 08 00     .....8...8...8..
   800c0:	9d 38 08 00 9d 38 08 00 9d 38 08 00 9d 38 08 00     .8...8...8...8..
   800d0:	9d 38 08 00 9d 38 08 00 9d 38 08 00 9d 38 08 00     .8...8...8...8..
   800e0:	91 48 08 00 9d 38 08 00 9d 38 08 00 9d 38 08 00     .H...8...8...8..
   800f0:	9d 38 08 00                                         .8..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200714e0 	.word	0x200714e0
   80110:	00000000 	.word	0x00000000
   80114:	0008cebc 	.word	0x0008cebc

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b03      	ldr	r3, [pc, #12]	; (80128 <frame_dummy+0x10>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4903      	ldr	r1, [pc, #12]	; (8012c <frame_dummy+0x14>)
   80120:	4803      	ldr	r0, [pc, #12]	; (80130 <frame_dummy+0x18>)
   80122:	f3af 8000 	nop.w
   80126:	bd08      	pop	{r3, pc}
   80128:	00000000 	.word	0x00000000
   8012c:	200714e4 	.word	0x200714e4
   80130:	0008cebc 	.word	0x0008cebc

00080134 <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
   80134:	2300      	movs	r3, #0
   80136:	6043      	str	r3, [r0, #4]
   80138:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
   8013a:	6083      	str	r3, [r0, #8]
}
   8013c:	4770      	bx	lr
   8013e:	bf00      	nop

00080140 <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   80140:	b410      	push	{r4}
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   80142:	6804      	ldr	r4, [r0, #0]
    newhead++;
   80144:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   80146:	2cc8      	cmp	r4, #200	; 0xc8
   80148:	bf28      	it	cs
   8014a:	2400      	movcs	r4, #0
   8014c:	e000      	b.n	80150 <add_to_circ_buf+0x10>
    while (newhead == cbuf->tail)
    {
        if (!block)
   8014e:	b142      	cbz	r2, 80162 <add_to_circ_buf+0x22>
    while (newhead == cbuf->tail)
   80150:	6843      	ldr	r3, [r0, #4]
   80152:	42a3      	cmp	r3, r4
   80154:	d0fb      	beq.n	8014e <add_to_circ_buf+0xe>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   80156:	6803      	ldr	r3, [r0, #0]
   80158:	4403      	add	r3, r0
   8015a:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   8015c:	6004      	str	r4, [r0, #0]
}
   8015e:	bc10      	pop	{r4}
   80160:	4770      	bx	lr
            cbuf->dropped++;
   80162:	6883      	ldr	r3, [r0, #8]
}
   80164:	bc10      	pop	{r4}
            cbuf->dropped++;
   80166:	3301      	adds	r3, #1
   80168:	6083      	str	r3, [r0, #8]
}
   8016a:	4770      	bx	lr

0008016c <get_from_circ_buf>:
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   8016c:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];

    if (newtail == cbuf->head)
   8016e:	6801      	ldr	r1, [r0, #0]
{
   80170:	4602      	mov	r2, r0
    if (newtail == cbuf->head)
   80172:	4299      	cmp	r1, r3
    uint8_t retval = cbuf->buf[newtail];
   80174:	4418      	add	r0, r3
   80176:	7b00      	ldrb	r0, [r0, #12]
    if (newtail == cbuf->head)
   80178:	d005      	beq.n	80186 <get_from_circ_buf+0x1a>
        return SERIAL_ERR;

    newtail++;
   8017a:	3301      	adds	r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   8017c:	2bc8      	cmp	r3, #200	; 0xc8
   8017e:	bf28      	it	cs
   80180:	2300      	movcs	r3, #0
    cbuf->tail = newtail;
   80182:	6053      	str	r3, [r2, #4]

    return retval;
   80184:	4770      	bx	lr
        return SERIAL_ERR;
   80186:	20ff      	movs	r0, #255	; 0xff
}
   80188:	4770      	bx	lr
   8018a:	bf00      	nop

0008018c <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   8018c:	6803      	ldr	r3, [r0, #0]
    return (head != cbuf->tail);
   8018e:	6840      	ldr	r0, [r0, #4]
}
   80190:	1ac0      	subs	r0, r0, r3
   80192:	bf18      	it	ne
   80194:	2001      	movne	r0, #1
   80196:	4770      	bx	lr

00080198 <circ_buf_count>:
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

    count = cbuf->head;
   80198:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
   8019a:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
   8019c:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
   8019e:	bf48      	it	mi
   801a0:	30c8      	addmi	r0, #200	; 0xc8
    return (unsigned int)count;
}
   801a2:	4770      	bx	lr

000801a4 <spi1util_init>:
int pin_spi1_sck = -1;
int pin_spi1_cs = -1;

/* FPGA Programming: Init pins - assumes FPGA already programmed to use these */
void spi1util_init(void)
{
   801a4:	b510      	push	{r4, lr}
    /* IO setup is done when IO pins are configured right now */
	gpio_set_pin_high(pin_spi1_cs);
   801a6:	4a05      	ldr	r2, [pc, #20]	; (801bc <spi1util_init+0x18>)
   801a8:	4b05      	ldr	r3, [pc, #20]	; (801c0 <spi1util_init+0x1c>)
   801aa:	6810      	ldr	r0, [r2, #0]
   801ac:	4798      	blx	r3
	gpio_set_pin_low(pin_spi1_sck);
}
   801ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gpio_set_pin_low(pin_spi1_sck);
   801b2:	4a04      	ldr	r2, [pc, #16]	; (801c4 <spi1util_init+0x20>)
   801b4:	4b04      	ldr	r3, [pc, #16]	; (801c8 <spi1util_init+0x24>)
   801b6:	6810      	ldr	r0, [r2, #0]
   801b8:	4718      	bx	r3
   801ba:	bf00      	nop
   801bc:	200701c0 	.word	0x200701c0
   801c0:	00083685 	.word	0x00083685
   801c4:	200701cc 	.word	0x200701cc
   801c8:	000836a1 	.word	0x000836a1

000801cc <spi1util_cs_low>:

/* SPI CS Pin Low */
void spi1util_cs_low(void)
{
	gpio_set_pin_low(pin_spi1_cs);
   801cc:	4a01      	ldr	r2, [pc, #4]	; (801d4 <spi1util_cs_low+0x8>)
   801ce:	4b02      	ldr	r3, [pc, #8]	; (801d8 <spi1util_cs_low+0xc>)
   801d0:	6810      	ldr	r0, [r2, #0]
   801d2:	4718      	bx	r3
   801d4:	200701c0 	.word	0x200701c0
   801d8:	000836a1 	.word	0x000836a1

000801dc <spi1util_cs_high>:
}

/* SPI CS Pin High */
void spi1util_cs_high(void)
{
	gpio_set_pin_high(pin_spi1_cs);
   801dc:	4a01      	ldr	r2, [pc, #4]	; (801e4 <spi1util_cs_high+0x8>)
   801de:	4b02      	ldr	r3, [pc, #8]	; (801e8 <spi1util_cs_high+0xc>)
   801e0:	6810      	ldr	r0, [r2, #0]
   801e2:	4718      	bx	r3
   801e4:	200701c0 	.word	0x200701c0
   801e8:	00083685 	.word	0x00083685

000801ec <spi1util_xferbyte>:
}

/* SPI data byte transfer */
uint8_t spi1util_xferbyte(uint8_t databyte)
{
   801ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   801f0:	2608      	movs	r6, #8
	uint8_t result = 0;
   801f2:	2400      	movs	r4, #0
{
   801f4:	4605      	mov	r5, r0

	for(unsigned int i=0; i < 8; i++){	
   801f6:	f8df b064 	ldr.w	fp, [pc, #100]	; 8025c <spi1util_xferbyte+0x70>
   801fa:	4f19      	ldr	r7, [pc, #100]	; (80260 <spi1util_xferbyte+0x74>)
   801fc:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80264 <spi1util_xferbyte+0x78>
   80200:	f8df a064 	ldr.w	sl, [pc, #100]	; 80268 <spi1util_xferbyte+0x7c>
   80204:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8026c <spi1util_xferbyte+0x80>
   80208:	e008      	b.n	8021c <spi1util_xferbyte+0x30>
		gpio_set_pin_low(pin_spi1_sck);

		if (databyte & 0x80){
			gpio_set_pin_high(pin_spi1_mosi);
			} else {
			gpio_set_pin_low(pin_spi1_mosi);
   8020a:	47c0      	blx	r8
		}
		
		gpio_set_pin_high(pin_spi1_sck);
   8020c:	6838      	ldr	r0, [r7, #0]
   8020e:	47c8      	blx	r9
		databyte = databyte << 1;
   80210:	006d      	lsls	r5, r5, #1
		result = result << 1;
   80212:	0064      	lsls	r4, r4, #1
	for(unsigned int i=0; i < 8; i++){	
   80214:	3e01      	subs	r6, #1
		databyte = databyte << 1;
   80216:	b2ed      	uxtb	r5, r5
		result = result << 1;
   80218:	b2e4      	uxtb	r4, r4
	for(unsigned int i=0; i < 8; i++){	
   8021a:	d010      	beq.n	8023e <spi1util_xferbyte+0x52>
		result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   8021c:	4b14      	ldr	r3, [pc, #80]	; (80270 <spi1util_xferbyte+0x84>)
   8021e:	f8db 0000 	ldr.w	r0, [fp]
   80222:	4798      	blx	r3
   80224:	4603      	mov	r3, r0
		gpio_set_pin_low(pin_spi1_sck);
   80226:	6838      	ldr	r0, [r7, #0]
		result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80228:	2b00      	cmp	r3, #0
   8022a:	bf18      	it	ne
   8022c:	f044 0401 	orrne.w	r4, r4, #1
		gpio_set_pin_low(pin_spi1_sck);
   80230:	47c0      	blx	r8
		if (databyte & 0x80){
   80232:	062b      	lsls	r3, r5, #24
			gpio_set_pin_high(pin_spi1_mosi);
   80234:	f8da 0000 	ldr.w	r0, [sl]
		if (databyte & 0x80){
   80238:	d5e7      	bpl.n	8020a <spi1util_xferbyte+0x1e>
			gpio_set_pin_high(pin_spi1_mosi);
   8023a:	47c8      	blx	r9
   8023c:	e7e6      	b.n	8020c <spi1util_xferbyte+0x20>
	}

	result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   8023e:	f8db 0000 	ldr.w	r0, [fp]
   80242:	4b0b      	ldr	r3, [pc, #44]	; (80270 <spi1util_xferbyte+0x84>)
   80244:	4798      	blx	r3
   80246:	4603      	mov	r3, r0
   80248:	2b00      	cmp	r3, #0
   8024a:	bf18      	it	ne
   8024c:	f044 0401 	orrne.w	r4, r4, #1

	gpio_set_pin_low(pin_spi1_sck);
   80250:	6838      	ldr	r0, [r7, #0]
	result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80252:	b264      	sxtb	r4, r4
	gpio_set_pin_low(pin_spi1_sck);
   80254:	47c0      	blx	r8

	return result;
}
   80256:	b2e0      	uxtb	r0, r4
   80258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8025c:	200701c4 	.word	0x200701c4
   80260:	200701cc 	.word	0x200701cc
   80264:	000836a1 	.word	0x000836a1
   80268:	200701c8 	.word	0x200701c8
   8026c:	00083685 	.word	0x00083685
   80270:	00083669 	.word	0x00083669

00080274 <spi1util_deinit>:


void spi1util_deinit(void)
{
	/* IO setup is done when IO pins are configured right now */
   80274:	4770      	bx	lr
   80276:	bf00      	nop

00080278 <fpga_pins>:
void fpga_pins(bool enabled);
void usb_pwr_setup(void);
void check_power_state(void);

void fpga_pins(bool enabled)
{
   80278:	b570      	push	{r4, r5, r6, lr}
   8027a:	4605      	mov	r5, r0
	gpio_configure_pin(PIN_FPGA_DONE_GPIO, PIN_FPGA_DONE_FLAGS);
   8027c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80280:	2031      	movs	r0, #49	; 0x31
   80282:	4c52      	ldr	r4, [pc, #328]	; (803cc <fpga_pins+0x154>)
   80284:	47a0      	blx	r4
	
	//gpio_configure_pin(PIO_PB22_IDX, PIO_OUTPUT_0);
	//gpio_configure_pin(PIO_PB18_IDX, PIO_OUTPUT_0);	
	
	if (enabled){
   80286:	2d00      	cmp	r5, #0
   80288:	d04a      	beq.n	80320 <fpga_pins+0xa8>
		#ifdef CONF_BOARD_PCK0
		gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   8028a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8028e:	2036      	movs	r0, #54	; 0x36
   80290:	47a0      	blx	r4
		#ifdef CONF_BOARD_PCK1
		gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
		#endif
		
		
		gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   80292:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80296:	200a      	movs	r0, #10
   80298:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   8029a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8029e:	200b      	movs	r0, #11
   802a0:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART1_RXD, PIN_USART1_RXD_FLAGS);
   802a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802a6:	200c      	movs	r0, #12
   802a8:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART1_TXD, PIN_USART1_TXD_FLAGS);
   802aa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802ae:	200d      	movs	r0, #13
   802b0:	47a0      	blx	r4
		
		gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   802b2:	4947      	ldr	r1, [pc, #284]	; (803d0 <fpga_pins+0x158>)
   802b4:	2042      	movs	r0, #66	; 0x42
   802b6:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
   802b8:	4945      	ldr	r1, [pc, #276]	; (803d0 <fpga_pins+0x158>)
   802ba:	2043      	movs	r0, #67	; 0x43
   802bc:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   802be:	4944      	ldr	r1, [pc, #272]	; (803d0 <fpga_pins+0x158>)
   802c0:	2044      	movs	r0, #68	; 0x44
   802c2:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   802c4:	4942      	ldr	r1, [pc, #264]	; (803d0 <fpga_pins+0x158>)
   802c6:	2045      	movs	r0, #69	; 0x45
   802c8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   802ca:	4941      	ldr	r1, [pc, #260]	; (803d0 <fpga_pins+0x158>)
   802cc:	2046      	movs	r0, #70	; 0x46
   802ce:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   802d0:	493f      	ldr	r1, [pc, #252]	; (803d0 <fpga_pins+0x158>)
   802d2:	2047      	movs	r0, #71	; 0x47
   802d4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   802d6:	493e      	ldr	r1, [pc, #248]	; (803d0 <fpga_pins+0x158>)
   802d8:	2048      	movs	r0, #72	; 0x48
   802da:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   802dc:	493c      	ldr	r1, [pc, #240]	; (803d0 <fpga_pins+0x158>)
   802de:	2049      	movs	r0, #73	; 0x49
   802e0:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   802e2:	493c      	ldr	r1, [pc, #240]	; (803d4 <fpga_pins+0x15c>)
   802e4:	201d      	movs	r0, #29
   802e6:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
   802e8:	4939      	ldr	r1, [pc, #228]	; (803d0 <fpga_pins+0x158>)
   802ea:	2052      	movs	r0, #82	; 0x52
   802ec:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   802ee:	4939      	ldr	r1, [pc, #228]	; (803d4 <fpga_pins+0x15c>)
   802f0:	2006      	movs	r0, #6
   802f2:	47a0      	blx	r4
		// gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_DATA_BUS_FLAG1);
		//gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_DATA_BUS_FLAG1); /* TODO: Add ADDR20 back */
		
		
		/* FPGA Programming pins */
		FPGA_NPROG_SETUP();
   802f4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   802f8:	2033      	movs	r0, #51	; 0x33
   802fa:	47a0      	blx	r4
		FPGA_NPROG_HIGH();		
   802fc:	2033      	movs	r0, #51	; 0x33
   802fe:	4b36      	ldr	r3, [pc, #216]	; (803d8 <fpga_pins+0x160>)
   80300:	4798      	blx	r3
		//gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
		//gpio_set_pin_high(FPGA_ALE_GPIO);
			
		//Force FPGA trigger
		
		gpio_configure_pin(FPGA_TRIGGER_GPIO, FPGA_TRIGGER_FLAGS);
   80302:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80306:	2057      	movs	r0, #87	; 0x57
   80308:	47a0      	blx	r4
		
		gpio_configure_pin(PIN_FPGA_PROGRAM_GPIO, PIN_FPGA_PROGRAM_FLAGS);
   8030a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8030e:	2033      	movs	r0, #51	; 0x33
   80310:	47a0      	blx	r4
		gpio_configure_pin(SPI_MISO_GPIO, PIO_INPUT); /* TODO: Add back */
		gpio_configure_pin(SPI_MOSI_GPIO, PIO_INPUT); /* TODO: Add back */
		gpio_configure_pin(SPI_SPCK_GPIO, PIO_INPUT); /* TODO: Add back */
	}
	
	gpio_configure_pin(PIN_FPGA_DONE_GPIO, PIN_FPGA_DONE_FLAGS);
   80312:	4623      	mov	r3, r4
	
}
   80314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	gpio_configure_pin(PIN_FPGA_DONE_GPIO, PIN_FPGA_DONE_FLAGS);
   80318:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8031c:	2031      	movs	r0, #49	; 0x31
   8031e:	4718      	bx	r3
		gpio_configure_pin(PIN_PCK0, PIO_INPUT);
   80320:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80324:	2036      	movs	r0, #54	; 0x36
   80326:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART0_RXD, PIO_INPUT);
   80328:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8032c:	200a      	movs	r0, #10
   8032e:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART0_TXD, PIO_INPUT);
   80330:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80334:	200b      	movs	r0, #11
   80336:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART1_RXD, PIO_INPUT);
   80338:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8033c:	200c      	movs	r0, #12
   8033e:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART1_TXD, PIO_INPUT);
   80340:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80344:	200d      	movs	r0, #13
   80346:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIO_INPUT);
   80348:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8034c:	2042      	movs	r0, #66	; 0x42
   8034e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIO_INPUT);
   80350:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80354:	2043      	movs	r0, #67	; 0x43
   80356:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIO_INPUT);
   80358:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8035c:	2044      	movs	r0, #68	; 0x44
   8035e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIO_INPUT);
   80360:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80364:	2045      	movs	r0, #69	; 0x45
   80366:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIO_INPUT);
   80368:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8036c:	2046      	movs	r0, #70	; 0x46
   8036e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIO_INPUT);
   80370:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80374:	2047      	movs	r0, #71	; 0x47
   80376:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIO_INPUT);
   80378:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8037c:	2048      	movs	r0, #72	; 0x48
   8037e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIO_INPUT);
   80380:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80384:	2049      	movs	r0, #73	; 0x49
   80386:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NRD, PIO_INPUT);
   80388:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8038c:	201d      	movs	r0, #29
   8038e:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NWE, PIO_INPUT);
   80390:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80394:	2052      	movs	r0, #82	; 0x52
   80396:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NCS0, PIO_INPUT);
   80398:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8039c:	2006      	movs	r0, #6
   8039e:	47a0      	blx	r4
		gpio_configure_pin(FPGA_TRIGGER_GPIO, PIO_INPUT);
   803a0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803a4:	2057      	movs	r0, #87	; 0x57
   803a6:	47a0      	blx	r4
		gpio_configure_pin(PIN_FPGA_PROGRAM_GPIO, PIO_INPUT);
   803a8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803ac:	2033      	movs	r0, #51	; 0x33
   803ae:	47a0      	blx	r4
		gpio_configure_pin(SPI_MISO_GPIO, PIO_INPUT); /* TODO: Add back */
   803b0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803b4:	2019      	movs	r0, #25
   803b6:	47a0      	blx	r4
		gpio_configure_pin(SPI_MOSI_GPIO, PIO_INPUT); /* TODO: Add back */
   803b8:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803bc:	201a      	movs	r0, #26
   803be:	47a0      	blx	r4
		gpio_configure_pin(SPI_SPCK_GPIO, PIO_INPUT); /* TODO: Add back */
   803c0:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803c4:	201b      	movs	r0, #27
   803c6:	47a0      	blx	r4
   803c8:	e7a3      	b.n	80312 <fpga_pins+0x9a>
   803ca:	bf00      	nop
   803cc:	000836e1 	.word	0x000836e1
   803d0:	08000001 	.word	0x08000001
   803d4:	10000001 	.word	0x10000001
   803d8:	00083685 	.word	0x00083685

000803dc <i2c_setup>:

#define TPS56520_ADDR 0x34
void i2c_setup(void)
{
   803dc:	b530      	push	{r4, r5, lr}
	gpio_configure_pin(PIN_PWD_SDA, PIN_PWD_SDA_FLAGS);
   803de:	4d0c      	ldr	r5, [pc, #48]	; (80410 <i2c_setup+0x34>)
{
   803e0:	b085      	sub	sp, #20
	gpio_configure_pin(PIN_PWD_SDA, PIN_PWD_SDA_FLAGS);
   803e2:	4629      	mov	r1, r5
   803e4:	4c0b      	ldr	r4, [pc, #44]	; (80414 <i2c_setup+0x38>)
   803e6:	2011      	movs	r0, #17
   803e8:	47a0      	blx	r4
	gpio_configure_pin(PIN_PWD_SCL, PIN_PWD_SCL_FLAGS);
   803ea:	4629      	mov	r1, r5
   803ec:	2012      	movs	r0, #18
   803ee:	47a0      	blx	r4
	
	twi_master_options_t opt = {
   803f0:	f24c 3250 	movw	r2, #50000	; 0xc350
   803f4:	2100      	movs	r1, #0
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
   803f6:	4c08      	ldr	r4, [pc, #32]	; (80418 <i2c_setup+0x3c>)
   803f8:	e9cd 2102 	strd	r2, r1, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   803fc:	4b07      	ldr	r3, [pc, #28]	; (8041c <i2c_setup+0x40>)
   803fe:	2016      	movs	r0, #22
   80400:	9401      	str	r4, [sp, #4]
   80402:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   80404:	4b06      	ldr	r3, [pc, #24]	; (80420 <i2c_setup+0x44>)
   80406:	a901      	add	r1, sp, #4
   80408:	4806      	ldr	r0, [pc, #24]	; (80424 <i2c_setup+0x48>)
   8040a:	4798      	blx	r3
		.speed = 50000,
		.chip  = 0x00
	};
	
	twi_master_setup(TWI0, &opt);	
}
   8040c:	b005      	add	sp, #20
   8040e:	bd30      	pop	{r4, r5, pc}
   80410:	08000001 	.word	0x08000001
   80414:	000836e1 	.word	0x000836e1
   80418:	0501bd00 	.word	0x0501bd00
   8041c:	000834d5 	.word	0x000834d5
   80420:	000839d5 	.word	0x000839d5
   80424:	4008c000 	.word	0x4008c000

00080428 <peripheral_setup>:

void peripheral_setup(void)
{
   80428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// delay_ms(1);
	// gpio_configure_pin(PIN_USB_RESET, PIO_TYPE_PIO_OUTPUT_1);
	// gpio_set_pin_high(PIN_USB_RESET); //reset enable
	// setup interrupts
	irq_initialize_vectors();
	cpu_irq_enable();
   8042c:	f04f 0801 	mov.w	r8, #1
   80430:	4e42      	ldr	r6, [pc, #264]	; (8053c <peripheral_setup+0x114>)
   80432:	200b      	movs	r0, #11
   80434:	47b0      	blx	r6
   80436:	200c      	movs	r0, #12
   80438:	47b0      	blx	r6
   8043a:	200d      	movs	r0, #13
   8043c:	47b0      	blx	r6
   8043e:	200e      	movs	r0, #14
   80440:	47b0      	blx	r6
	fpga_pins(0); // set FPGA pins as inputs
   80442:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80540 <peripheral_setup+0x118>
   80446:	2000      	movs	r0, #0
   80448:	47c8      	blx	r9
	enable_switched_power();
   8044a:	4b3e      	ldr	r3, [pc, #248]	; (80544 <peripheral_setup+0x11c>)
   8044c:	4798      	blx	r3
	gpio_configure_pin(PIN_SWSTATE_GPIO, PIN_SWSTATE_FLAGS);
   8044e:	4c3e      	ldr	r4, [pc, #248]	; (80548 <peripheral_setup+0x120>)
   80450:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80454:	203a      	movs	r0, #58	; 0x3a
   80456:	47a0      	blx	r4
	gpio_configure_pin(PIN_USB_HBEAT, PIN_USB_HBEAT_FLAGS);
   80458:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8045c:	2003      	movs	r0, #3
   8045e:	47a0      	blx	r4
	gpio_configure_pin(PIN_TEMP_ERR_LED, PIN_TEMP_ERR_LED_FLAGS);
   80460:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80464:	2000      	movs	r0, #0
   80466:	47a0      	blx	r4
	gpio_configure_pin(PIN_TEMP_OK_LED, PIN_TEMP_OK_LED_FLAGS);
   80468:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8046c:	2001      	movs	r0, #1
   8046e:	47a0      	blx	r4
	cpu_irq_enable();
   80470:	4b36      	ldr	r3, [pc, #216]	; (8054c <peripheral_setup+0x124>)
   80472:	f883 8000 	strb.w	r8, [r3]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   80476:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8047a:	b662      	cpsie	i
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
   8047c:	2500      	movs	r5, #0
   8047e:	4b34      	ldr	r3, [pc, #208]	; (80550 <peripheral_setup+0x128>)

	// Initialize the sleep manager
	sleepmgr_init();

#if !SAMD21 && !SAMR21
	sysclk_init();
   80480:	4a34      	ldr	r2, [pc, #208]	; (80554 <peripheral_setup+0x12c>)
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   80482:	f883 8005 	strb.w	r8, [r3, #5]
		sleepmgr_locks[i] = 0;
   80486:	701d      	strb	r5, [r3, #0]
   80488:	705d      	strb	r5, [r3, #1]
   8048a:	709d      	strb	r5, [r3, #2]
   8048c:	70dd      	strb	r5, [r3, #3]
   8048e:	711d      	strb	r5, [r3, #4]
   80490:	4790      	blx	r2
	board_init();
   80492:	4b31      	ldr	r3, [pc, #196]	; (80558 <peripheral_setup+0x130>)
   80494:	4798      	blx	r3
	//But you can't define things invalid, so hold is auto-calculated:	
	//NRD_HOLD = NRD_CYCLE - NRD SETUP - NRD PULSE
	//NCS_RD_HOLD = NRD_CYCLE - NCS_RD_SETUP - NCS_RD_PULSE

	pmc_enable_periph_clk(ID_SMC);	
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(2)
   80496:	4f31      	ldr	r7, [pc, #196]	; (8055c <peripheral_setup+0x134>)
	i2c_setup(); // setup I2C comms
   80498:	4b31      	ldr	r3, [pc, #196]	; (80560 <peripheral_setup+0x138>)
   8049a:	4798      	blx	r3
	pmc_enable_periph_clk(ID_SMC);	
   8049c:	2009      	movs	r0, #9
   8049e:	47b0      	blx	r6
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(2)
   804a0:	4629      	mov	r1, r5
   804a2:	4638      	mov	r0, r7
   804a4:	4a2f      	ldr	r2, [pc, #188]	; (80564 <peripheral_setup+0x13c>)
   804a6:	4b30      	ldr	r3, [pc, #192]	; (80568 <peripheral_setup+0x140>)
   804a8:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(3)
	| SMC_SETUP_NRD_SETUP(2)
	| SMC_SETUP_NCS_RD_SETUP(3));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(6)
   804aa:	4629      	mov	r1, r5
   804ac:	4638      	mov	r0, r7
   804ae:	4a2f      	ldr	r2, [pc, #188]	; (8056c <peripheral_setup+0x144>)
   804b0:	4b2f      	ldr	r3, [pc, #188]	; (80570 <peripheral_setup+0x148>)
   804b2:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(2)
	| SMC_PULSE_NRD_PULSE(6)
	| SMC_PULSE_NCS_RD_PULSE(6));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(12)
   804b4:	4629      	mov	r1, r5
   804b6:	4638      	mov	r0, r7
   804b8:	f04f 120c 	mov.w	r2, #786444	; 0xc000c
   804bc:	4b2d      	ldr	r3, [pc, #180]	; (80574 <peripheral_setup+0x14c>)
   804be:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(12));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   804c0:	4629      	mov	r1, r5
   804c2:	4638      	mov	r0, r7
   804c4:	2203      	movs	r2, #3
   804c6:	4b2c      	ldr	r3, [pc, #176]	; (80578 <peripheral_setup+0x150>)
   804c8:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   804ca:	2204      	movs	r2, #4
   804cc:	4b2b      	ldr	r3, [pc, #172]	; (8057c <peripheral_setup+0x154>)
	pmc_enable_pck(ul_id);
   804ce:	4628      	mov	r0, r5
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   804d0:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   804d2:	4b2b      	ldr	r3, [pc, #172]	; (80580 <peripheral_setup+0x158>)
   804d4:	4798      	blx	r3
        | SMC_MODE_DBW_BIT_8);


	/* Enable PCLK0 at 84 MHz */	
	genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
	pmc_enable_upll_clock();
   804d6:	4b2b      	ldr	r3, [pc, #172]	; (80584 <peripheral_setup+0x15c>)
   804d8:	4798      	blx	r3
	pmc_enable_periph_clk(ID_UOTGHS);
   804da:	2028      	movs	r0, #40	; 0x28
   804dc:	47b0      	blx	r6

	// Setup fan PWM
	gpio_configure_pin(PIO_PB25_IDX, PIO_PERIPH_B);	
   804de:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   804e2:	2039      	movs	r0, #57	; 0x39
   804e4:	47a0      	blx	r4

	fan_pwm_init();
   804e6:	4b28      	ldr	r3, [pc, #160]	; (80588 <peripheral_setup+0x160>)
   804e8:	4798      	blx	r3
	fan_pwm_set_duty_cycle(75); //Set at 50% in case we crash - will be tuned later
   804ea:	4b28      	ldr	r3, [pc, #160]	; (8058c <peripheral_setup+0x164>)
   804ec:	204b      	movs	r0, #75	; 0x4b
   804ee:	4798      	blx	r3

	// tps56520_init(); // set FPGA voltage to default (1V) //do later, after daughter board connected
	cdce906_init();  //Init CDCE906 PLL Chip
   804f0:	4b27      	ldr	r3, [pc, #156]	; (80590 <peripheral_setup+0x168>)
   804f2:	4798      	blx	r3

	// gpio_set_pin_low(PIN_USB_RESET); // bring USB-PD chip out of reset
	// delay_ms(100); //TODO - these delays are way off??

	// turn on power pins for various on board regulators
	power_init();
   804f4:	4b27      	ldr	r3, [pc, #156]	; (80594 <peripheral_setup+0x16c>)
   804f6:	4798      	blx	r3

	// enable on board thermometers for monitoring board temps
	thermals_init(); 
   804f8:	4b27      	ldr	r3, [pc, #156]	; (80598 <peripheral_setup+0x170>)
   804fa:	4798      	blx	r3

	/* Enable SMC */
	fpga_pins(true);
   804fc:	4640      	mov	r0, r8
   804fe:	47c8      	blx	r9

	udc_start();
   80500:	4b26      	ldr	r3, [pc, #152]	; (8059c <peripheral_setup+0x174>)
   80502:	4798      	blx	r3

	// enable periodic interrupt to check thermals
	periodic_timer_init();
   80504:	4b26      	ldr	r3, [pc, #152]	; (805a0 <peripheral_setup+0x178>)
   80506:	4798      	blx	r3

	// enable power delivery to FPGA (Tgt Power switch)
	gpio_configure_pin(PIO_PB27_IDX, PIO_OUTPUT_1 | PIO_DEFAULT);
   80508:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8050c:	203b      	movs	r0, #59	; 0x3b
   8050e:	47a0      	blx	r4

	enable_fpga_power();
   80510:	4b24      	ldr	r3, [pc, #144]	; (805a4 <peripheral_setup+0x17c>)
   80512:	4798      	blx	r3

	gpio_configure_pin(PIN_FPGA_M0, PIN_FPGA_M0_FLAGS);
   80514:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80518:	2013      	movs	r0, #19
   8051a:	47a0      	blx	r4
	gpio_configure_pin(PIN_FPGA_M1, PIN_FPGA_M1_FLAGS);
   8051c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80520:	2014      	movs	r0, #20
   80522:	47a0      	blx	r4
	gpio_configure_pin(PIN_FPGA_M2, PIN_FPGA_M2_FLAGS);
   80524:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80528:	2015      	movs	r0, #21
   8052a:	47a0      	blx	r4

	gpio_configure_pin(PIN_VBUS_DETECT, PIN_VBUS_DETECT_FLAGS);
   8052c:	4623      	mov	r3, r4
}
   8052e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gpio_configure_pin(PIN_VBUS_DETECT, PIN_VBUS_DETECT_FLAGS);
   80532:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80536:	204f      	movs	r0, #79	; 0x4f
   80538:	4718      	bx	r3
   8053a:	bf00      	nop
   8053c:	000834d5 	.word	0x000834d5
   80540:	00080279 	.word	0x00080279
   80544:	000809d9 	.word	0x000809d9
   80548:	000836e1 	.word	0x000836e1
   8054c:	20070b04 	.word	0x20070b04
   80550:	20073304 	.word	0x20073304
   80554:	00083321 	.word	0x00083321
   80558:	000853e9 	.word	0x000853e9
   8055c:	400e0000 	.word	0x400e0000
   80560:	000803dd 	.word	0x000803dd
   80564:	03020302 	.word	0x03020302
   80568:	0008317d 	.word	0x0008317d
   8056c:	06060206 	.word	0x06060206
   80570:	00083189 	.word	0x00083189
   80574:	00083195 	.word	0x00083195
   80578:	000831a1 	.word	0x000831a1
   8057c:	400e0600 	.word	0x400e0600
   80580:	000834f5 	.word	0x000834f5
   80584:	000834c1 	.word	0x000834c1
   80588:	00080e41 	.word	0x00080e41
   8058c:	00080e95 	.word	0x00080e95
   80590:	00082df1 	.word	0x00082df1
   80594:	00080a95 	.word	0x00080a95
   80598:	00080b41 	.word	0x00080b41
   8059c:	00081181 	.word	0x00081181
   805a0:	00080f29 	.word	0x00080f29
   805a4:	00080df9 	.word	0x00080df9

000805a8 <main>:

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
	volatile uint32_t reset_reason = 0;
   805a8:	2300      	movs	r3, #0
{
   805aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	// capture reset reason as watchdog on by default...
	reset_reason = RSTC->RSTC_SR;
	reset_reason = reset_reason; //Still a thing in 2021??
	WDT->WDT_MR = (1 << 25); //disable watchdog
   805ae:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
   805b2:	f8df 9094 	ldr.w	r9, [pc, #148]	; 80648 <main+0xa0>
{
   805b6:	b086      	sub	sp, #24
   805b8:	464c      	mov	r4, r9
	reset_reason = RSTC->RSTC_SR;
   805ba:	4a24      	ldr	r2, [pc, #144]	; (8064c <main+0xa4>)
	volatile uint32_t reset_reason = 0;
   805bc:	9301      	str	r3, [sp, #4]
	reset_reason = RSTC->RSTC_SR;
   805be:	f8d2 a004 	ldr.w	sl, [r2, #4]
	
	// unlock I2C
	I2C_LOCK = 0;
   805c2:	f8df c08c 	ldr.w	ip, [pc, #140]	; 80650 <main+0xa8>
	reset_reason = RSTC->RSTC_SR;
   805c6:	f8cd a004 	str.w	sl, [sp, #4]
	reset_reason = reset_reason; //Still a thing in 2021??
   805ca:	f8dd a004 	ldr.w	sl, [sp, #4]
	
	//Convert serial number to ASCII for USB Serial number
	uint32_t serial_number[4];
	flash_read_unique_id(serial_number, sizeof(serial_number));
   805ce:	4e21      	ldr	r6, [pc, #132]	; (80654 <main+0xac>)
	reset_reason = reset_reason; //Still a thing in 2021??
   805d0:	f8cd a004 	str.w	sl, [sp, #4]
	flash_read_unique_id(serial_number, sizeof(serial_number));
   805d4:	a802      	add	r0, sp, #8
	WDT->WDT_MR = (1 << 25); //disable watchdog
   805d6:	f8c2 e054 	str.w	lr, [r2, #84]	; 0x54
	flash_read_unique_id(serial_number, sizeof(serial_number));
   805da:	2110      	movs	r1, #16
   805dc:	4605      	mov	r5, r0
	I2C_LOCK = 0;
   805de:	f88c 3000 	strb.w	r3, [ip]
	flash_read_unique_id(serial_number, sizeof(serial_number));
   805e2:	4f1d      	ldr	r7, [pc, #116]	; (80658 <main+0xb0>)
   805e4:	47b0      	blx	r6
	for(unsigned int i = 0; i < 4; i++){
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);
   805e6:	4e1d      	ldr	r6, [pc, #116]	; (8065c <main+0xb4>)
   805e8:	f10d 0818 	add.w	r8, sp, #24
   805ec:	f855 2b04 	ldr.w	r2, [r5], #4
   805f0:	4620      	mov	r0, r4
   805f2:	4631      	mov	r1, r6
   805f4:	47b8      	blx	r7
	for(unsigned int i = 0; i < 4; i++){
   805f6:	4545      	cmp	r5, r8
   805f8:	f104 0408 	add.w	r4, r4, #8
   805fc:	d1f6      	bne.n	805ec <main+0x44>
	}
	usb_serial_number[32] = 0;
   805fe:	2200      	movs	r2, #0

	peripheral_setup(); // turn on required peripherals
   80600:	4b17      	ldr	r3, [pc, #92]	; (80660 <main+0xb8>)
	usb_serial_number[32] = 0;
   80602:	f889 2020 	strb.w	r2, [r9, #32]
	peripheral_setup(); // turn on required peripherals
   80606:	4798      	blx	r3
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);

	
	
	naeusb_register_handlers();
   80608:	4b16      	ldr	r3, [pc, #88]	; (80664 <main+0xbc>)
   8060a:	4798      	blx	r3
	naeusart_register_handlers();
   8060c:	4b16      	ldr	r3, [pc, #88]	; (80668 <main+0xc0>)
   8060e:	4798      	blx	r3
	fpga_target_register_handlers();
   80610:	4b16      	ldr	r3, [pc, #88]	; (8066c <main+0xc4>)
   80612:	4798      	blx	r3
	bergen_register_handlers();
   80614:	4b16      	ldr	r3, [pc, #88]	; (80670 <main+0xc8>)
		cdc_send_to_pc();
		check_power_state(); //make sure power hasn't been killed		
		if (!TPS_CONNECTED) {
			if (tps56520_set(600)) {
				if (tps56520_set(1000)) {
					TPS_CONNECTED = true;
   80616:	f04f 0801 	mov.w	r8, #1
   8061a:	4e16      	ldr	r6, [pc, #88]	; (80674 <main+0xcc>)
   8061c:	4d16      	ldr	r5, [pc, #88]	; (80678 <main+0xd0>)
   8061e:	4c17      	ldr	r4, [pc, #92]	; (8067c <main+0xd4>)
   80620:	4f17      	ldr	r7, [pc, #92]	; (80680 <main+0xd8>)
	bergen_register_handlers();
   80622:	4798      	blx	r3
		cdc_send_to_pc();
   80624:	47b0      	blx	r6
		check_power_state(); //make sure power hasn't been killed		
   80626:	47a8      	blx	r5
		if (!TPS_CONNECTED) {
   80628:	7823      	ldrb	r3, [r4, #0]
   8062a:	2b00      	cmp	r3, #0
   8062c:	d1fa      	bne.n	80624 <main+0x7c>
			if (tps56520_set(600)) {
   8062e:	f44f 7016 	mov.w	r0, #600	; 0x258
   80632:	47b8      	blx	r7
   80634:	2800      	cmp	r0, #0
   80636:	d0f5      	beq.n	80624 <main+0x7c>
				if (tps56520_set(1000)) {
   80638:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   8063c:	47b8      	blx	r7
   8063e:	2800      	cmp	r0, #0
   80640:	d0f0      	beq.n	80624 <main+0x7c>
					TPS_CONNECTED = true;
   80642:	f884 8000 	strb.w	r8, [r4]
   80646:	e7ed      	b.n	80624 <main+0x7c>
   80648:	200701d0 	.word	0x200701d0
   8064c:	400e1a00 	.word	0x400e1a00
   80650:	20072133 	.word	0x20072133
   80654:	00082f3d 	.word	0x00082f3d
   80658:	00085ed9 	.word	0x00085ed9
   8065c:	0008ca30 	.word	0x0008ca30
   80660:	00080429 	.word	0x00080429
   80664:	00081aed 	.word	0x00081aed
   80668:	00081fb1 	.word	0x00081fb1
   8066c:	00082b11 	.word	0x00082b11
   80670:	000808cd 	.word	0x000808cd
   80674:	000822cd 	.word	0x000822cd
   80678:	00080ee5 	.word	0x00080ee5
   8067c:	20072132 	.word	0x20072132
   80680:	00082dad 	.word	0x00082dad

00080684 <ctrl_i2c_setup>:
	I2C_LOCK = 0;
}

void ctrl_i2c_setup(void)
{
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)
   80684:	4a0d      	ldr	r2, [pc, #52]	; (806bc <ctrl_i2c_setup+0x38>)
   80686:	88d3      	ldrh	r3, [r2, #6]
   80688:	8991      	ldrh	r1, [r2, #12]
   8068a:	4299      	cmp	r1, r3
   8068c:	d314      	bcc.n	806b8 <ctrl_i2c_setup+0x34>
	return;
	
	uint8_t addr_len = udd_g_ctrlreq.req.wLength - 1;
	if ((addr_len > 3) || (addr_len < 1)) {
   8068e:	3b02      	subs	r3, #2
   80690:	b2db      	uxtb	r3, r3
   80692:	2b02      	cmp	r3, #2
   80694:	d810      	bhi.n	806b8 <ctrl_i2c_setup+0x34>
{
   80696:	b410      	push	{r4}
		return;
	}
	USER_TWI_PACKET.chip = udd_g_ctrlreq.payload[0];
   80698:	6894      	ldr	r4, [r2, #8]
   8069a:	4809      	ldr	r0, [pc, #36]	; (806c0 <ctrl_i2c_setup+0x3c>)
   8069c:	4622      	mov	r2, r4
   8069e:	7824      	ldrb	r4, [r4, #0]
   806a0:	4601      	mov	r1, r0
   806a2:	7404      	strb	r4, [r0, #16]
	for (uint8_t i = 0; i < addr_len; i++) {
   806a4:	1c50      	adds	r0, r2, #1
   806a6:	4403      	add	r3, r0
		USER_TWI_PACKET.addr[i] = udd_g_ctrlreq.payload[i+1];
   806a8:	f812 0f01 	ldrb.w	r0, [r2, #1]!
	for (uint8_t i = 0; i < addr_len; i++) {
   806ac:	429a      	cmp	r2, r3
		USER_TWI_PACKET.addr[i] = udd_g_ctrlreq.payload[i+1];
   806ae:	f801 0b01 	strb.w	r0, [r1], #1
	for (uint8_t i = 0; i < addr_len; i++) {
   806b2:	d1f9      	bne.n	806a8 <ctrl_i2c_setup+0x24>
	}
	
	
}
   806b4:	bc10      	pop	{r4}
   806b6:	4770      	bx	lr
   806b8:	4770      	bx	lr
   806ba:	bf00      	nop
   806bc:	20072288 	.word	0x20072288
   806c0:	200701f4 	.word	0x200701f4

000806c4 <bergen_setup_out_received>:
bool naeusb_cdc_settings_in(void);
void naeusb_cdc_settings_out(void);

bool bergen_setup_out_received(void)
{
	switch (udd_g_ctrlreq.req.bRequest) {			
   806c4:	4a0d      	ldr	r2, [pc, #52]	; (806fc <bergen_setup_out_received+0x38>)
   806c6:	7853      	ldrb	r3, [r2, #1]
   806c8:	3b41      	subs	r3, #65	; 0x41
   806ca:	2b03      	cmp	r3, #3
   806cc:	d813      	bhi.n	806f6 <bergen_setup_out_received+0x32>
   806ce:	e8df f003 	tbb	[pc, r3]
   806d2:	0a0e      	.short	0x0a0e
   806d4:	0206      	.short	0x0206
		case REQ_I2C_SETUP:
			udd_g_ctrlreq.callback = ctrl_i2c_setup;
			return true;
			
		case REQ_I2C_DATA:
			udd_g_ctrlreq.callback = ctrl_i2c_send;
   806d6:	4b0a      	ldr	r3, [pc, #40]	; (80700 <bergen_setup_out_received+0x3c>)
			return true;
   806d8:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_i2c_send;
   806da:	6113      	str	r3, [r2, #16]
			return true;
   806dc:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_i2c_setup;
   806de:	4b09      	ldr	r3, [pc, #36]	; (80704 <bergen_setup_out_received+0x40>)
			return true;
   806e0:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_i2c_setup;
   806e2:	6113      	str	r3, [r2, #16]
			return true;
   806e4:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_fpga_temp_cb;
   806e6:	4b08      	ldr	r3, [pc, #32]	; (80708 <bergen_setup_out_received+0x44>)
			return true;
   806e8:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_fpga_temp_cb;
   806ea:	6113      	str	r3, [r2, #16]
			return true;
   806ec:	4770      	bx	lr
			
		case REQ_FPGA_CDC:
			udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   806ee:	4b07      	ldr	r3, [pc, #28]	; (8070c <bergen_setup_out_received+0x48>)
			return true;
   806f0:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   806f2:	6113      	str	r3, [r2, #16]
			return true;
   806f4:	4770      	bx	lr
	switch (udd_g_ctrlreq.req.bRequest) {			
   806f6:	2000      	movs	r0, #0
			break;
	}
	return false;
}
   806f8:	4770      	bx	lr
   806fa:	bf00      	nop
   806fc:	20072288 	.word	0x20072288
   80700:	00080711 	.word	0x00080711
   80704:	00080685 	.word	0x00080685
   80708:	00080871 	.word	0x00080871
   8070c:	00081b4d 	.word	0x00081b4d

00080710 <ctrl_i2c_send>:
{
   80710:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)
   80712:	4b0e      	ldr	r3, [pc, #56]	; (8074c <ctrl_i2c_send+0x3c>)
   80714:	88da      	ldrh	r2, [r3, #6]
   80716:	8999      	ldrh	r1, [r3, #12]
   80718:	4291      	cmp	r1, r2
   8071a:	d307      	bcc.n	8072c <ctrl_i2c_send+0x1c>
	if (I2C_LOCK) {
   8071c:	4c0c      	ldr	r4, [pc, #48]	; (80750 <ctrl_i2c_send+0x40>)
   8071e:	7821      	ldrb	r1, [r4, #0]
   80720:	f001 05ff 	and.w	r5, r1, #255	; 0xff
   80724:	b119      	cbz	r1, 8072e <ctrl_i2c_send+0x1e>
		I2C_STATUS = 1;
   80726:	2201      	movs	r2, #1
   80728:	4b0a      	ldr	r3, [pc, #40]	; (80754 <ctrl_i2c_send+0x44>)
   8072a:	701a      	strb	r2, [r3, #0]
}
   8072c:	bd38      	pop	{r3, r4, r5, pc}
	USER_TWI_PACKET.buffer = udd_g_ctrlreq.payload;
   8072e:	490a      	ldr	r1, [pc, #40]	; (80758 <ctrl_i2c_send+0x48>)
   80730:	689b      	ldr	r3, [r3, #8]
	USER_TWI_PACKET.length = udd_g_ctrlreq.req.wLength;
   80732:	60ca      	str	r2, [r1, #12]
	I2C_LOCK = 1;
   80734:	2201      	movs	r2, #1
	USER_TWI_PACKET.buffer = udd_g_ctrlreq.payload;
   80736:	608b      	str	r3, [r1, #8]
	I2C_STATUS = twi_master_write(TWI0, &USER_TWI_PACKET);
   80738:	4808      	ldr	r0, [pc, #32]	; (8075c <ctrl_i2c_send+0x4c>)
   8073a:	4b09      	ldr	r3, [pc, #36]	; (80760 <ctrl_i2c_send+0x50>)
	I2C_LOCK = 1;
   8073c:	7022      	strb	r2, [r4, #0]
	I2C_STATUS = twi_master_write(TWI0, &USER_TWI_PACKET);
   8073e:	4798      	blx	r3
   80740:	4b04      	ldr	r3, [pc, #16]	; (80754 <ctrl_i2c_send+0x44>)
   80742:	b2c0      	uxtb	r0, r0
   80744:	7018      	strb	r0, [r3, #0]
	I2C_LOCK = 0;
   80746:	7025      	strb	r5, [r4, #0]
}
   80748:	bd38      	pop	{r3, r4, r5, pc}
   8074a:	bf00      	nop
   8074c:	20072288 	.word	0x20072288
   80750:	20072133 	.word	0x20072133
   80754:	20071c9c 	.word	0x20071c9c
   80758:	200701f4 	.word	0x200701f4
   8075c:	4008c000 	.word	0x4008c000
   80760:	00083b05 	.word	0x00083b05

00080764 <bergen_setup_in_received>:

bool bergen_setup_in_received(void)
{
   80764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t addr;
	switch (udd_g_ctrlreq.req.bRequest & 0xFF) {
   80768:	4c37      	ldr	r4, [pc, #220]	; (80848 <bergen_setup_in_received+0xe4>)
   8076a:	7863      	ldrb	r3, [r4, #1]
   8076c:	3b41      	subs	r3, #65	; 0x41
   8076e:	2b03      	cmp	r3, #3
   80770:	d867      	bhi.n	80842 <bergen_setup_in_received+0xde>
   80772:	e8df f003 	tbb	[pc, r3]
   80776:	3441      	.short	0x3441
   80778:	021b      	.short	0x021b
			break;
		
		case REQ_I2C_DATA:
			USER_TWI_PACKET.length = udd_g_ctrlreq.req.wLength;
			USER_TWI_PACKET.buffer = respbuf + 1;
			if (I2C_LOCK) {
   8077a:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8084c <bergen_setup_in_received+0xe8>
			USER_TWI_PACKET.length = udd_g_ctrlreq.req.wLength;
   8077e:	4f34      	ldr	r7, [pc, #208]	; (80850 <bergen_setup_in_received+0xec>)
   80780:	88e3      	ldrh	r3, [r4, #6]
			USER_TWI_PACKET.buffer = respbuf + 1;
   80782:	4e34      	ldr	r6, [pc, #208]	; (80854 <bergen_setup_in_received+0xf0>)
			if (I2C_LOCK) {
   80784:	f898 2000 	ldrb.w	r2, [r8]
			USER_TWI_PACKET.buffer = respbuf + 1;
   80788:	e9c7 6302 	strd	r6, r3, [r7, #8]
			if (I2C_LOCK) {
   8078c:	f002 09ff 	and.w	r9, r2, #255	; 0xff
   80790:	2a00      	cmp	r2, #0
   80792:	d035      	beq.n	80800 <bergen_setup_in_received+0x9c>
				respbuf[0] = 1;
   80794:	2201      	movs	r2, #1
				I2C_STATUS = 1;
   80796:	4930      	ldr	r1, [pc, #192]	; (80858 <bergen_setup_in_received+0xf4>)
				respbuf[0] = 1;
   80798:	1e70      	subs	r0, r6, #1
				udd_g_ctrlreq.payload = respbuf;
				udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   8079a:	4413      	add	r3, r2
				respbuf[0] = 1;
   8079c:	f806 2c01 	strb.w	r2, [r6, #-1]
				I2C_STATUS = 1;
   807a0:	700a      	strb	r2, [r1, #0]
				udd_g_ctrlreq.payload = respbuf;
   807a2:	60a0      	str	r0, [r4, #8]
				udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   807a4:	81a3      	strh	r3, [r4, #12]
				return true;
   807a6:	4610      	mov	r0, r2
		case REQ_FPGA_CDC:
			return naeusb_cdc_settings_in();
			break;
	}
	return false;
}
   807a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			respbuf[1] = USER_TWI_PACKET.chip;
   807ac:	4f28      	ldr	r7, [pc, #160]	; (80850 <bergen_setup_in_received+0xec>)
			respbuf[0] = I2C_STATUS;
   807ae:	4b2a      	ldr	r3, [pc, #168]	; (80858 <bergen_setup_in_received+0xf4>)
   807b0:	4e2a      	ldr	r6, [pc, #168]	; (8085c <bergen_setup_in_received+0xf8>)
   807b2:	781a      	ldrb	r2, [r3, #0]
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   807b4:	687d      	ldr	r5, [r7, #4]
			respbuf[1] = USER_TWI_PACKET.chip;
   807b6:	7c3b      	ldrb	r3, [r7, #16]
			respbuf[0] = I2C_STATUS;
   807b8:	7032      	strb	r2, [r6, #0]
			respbuf[1] = USER_TWI_PACKET.chip;
   807ba:	7073      	strb	r3, [r6, #1]
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   807bc:	2d00      	cmp	r5, #0
   807be:	d03e      	beq.n	8083e <bergen_setup_in_received+0xda>
   807c0:	2300      	movs	r3, #0
   807c2:	1c58      	adds	r0, r3, #1
				respbuf[i + 2] = USER_TWI_PACKET.addr[i];
   807c4:	5cf9      	ldrb	r1, [r7, r3]
   807c6:	18f2      	adds	r2, r6, r3
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   807c8:	b2c3      	uxtb	r3, r0
   807ca:	42ab      	cmp	r3, r5
				respbuf[i + 2] = USER_TWI_PACKET.addr[i];
   807cc:	7091      	strb	r1, [r2, #2]
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   807ce:	d3f8      	bcc.n	807c2 <bergen_setup_in_received+0x5e>
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.addr_length + 2;
   807d0:	3502      	adds	r5, #2
   807d2:	b2ad      	uxth	r5, r5
			return true;
   807d4:	2001      	movs	r0, #1
			udd_g_ctrlreq.payload = respbuf;
   807d6:	60a6      	str	r6, [r4, #8]
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.addr_length + 2;
   807d8:	81a5      	strh	r5, [r4, #12]
}
   807da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (I2C_LOCK) {
   807de:	4b1b      	ldr	r3, [pc, #108]	; (8084c <bergen_setup_in_received+0xe8>)
   807e0:	781b      	ldrb	r3, [r3, #0]
   807e2:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   807e6:	b1eb      	cbz	r3, 80824 <bergen_setup_in_received+0xc0>
				respbuf[0] = 1;
   807e8:	2301      	movs	r3, #1
   807ea:	4a1c      	ldr	r2, [pc, #112]	; (8085c <bergen_setup_in_received+0xf8>)
				return true;
   807ec:	4618      	mov	r0, r3
				respbuf[0] = 1;
   807ee:	7013      	strb	r3, [r2, #0]
				udd_g_ctrlreq.payload = respbuf;
   807f0:	60a2      	str	r2, [r4, #8]
				udd_g_ctrlreq.payload_size = 1;
   807f2:	81a3      	strh	r3, [r4, #12]
}
   807f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return naeusb_cdc_settings_in();
   807f8:	4b19      	ldr	r3, [pc, #100]	; (80860 <bergen_setup_in_received+0xfc>)
}
   807fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return naeusb_cdc_settings_in();
   807fe:	4718      	bx	r3
			I2C_LOCK = 1;
   80800:	2501      	movs	r5, #1
			twi_master_read(TWI0, &USER_TWI_PACKET);
   80802:	4b18      	ldr	r3, [pc, #96]	; (80864 <bergen_setup_in_received+0x100>)
   80804:	4639      	mov	r1, r7
   80806:	4818      	ldr	r0, [pc, #96]	; (80868 <bergen_setup_in_received+0x104>)
			I2C_LOCK = 1;
   80808:	f888 5000 	strb.w	r5, [r8]
			twi_master_read(TWI0, &USER_TWI_PACKET);
   8080c:	4798      	blx	r3
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   8080e:	68fb      	ldr	r3, [r7, #12]
			respbuf[0] = 0;
   80810:	f806 9c01 	strb.w	r9, [r6, #-1]
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   80814:	442b      	add	r3, r5
			respbuf[0] = 0;
   80816:	3e01      	subs	r6, #1
			return true;
   80818:	4628      	mov	r0, r5
			I2C_LOCK = 0;
   8081a:	f888 9000 	strb.w	r9, [r8]
			udd_g_ctrlreq.payload = respbuf;
   8081e:	60a6      	str	r6, [r4, #8]
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   80820:	81a3      	strh	r3, [r4, #12]
			return true;
   80822:	e7da      	b.n	807da <bergen_setup_in_received+0x76>
			max1617_register_read(addr, respbuf + 1);
   80824:	4d0b      	ldr	r5, [pc, #44]	; (80854 <bergen_setup_in_received+0xf0>)
   80826:	4b11      	ldr	r3, [pc, #68]	; (8086c <bergen_setup_in_received+0x108>)
   80828:	4629      	mov	r1, r5
   8082a:	78a0      	ldrb	r0, [r4, #2]
   8082c:	4798      	blx	r3
			udd_g_ctrlreq.payload_size = 2;
   8082e:	2302      	movs	r3, #2
			respbuf[0] = 0;
   80830:	1e6a      	subs	r2, r5, #1
			return true;
   80832:	2001      	movs	r0, #1
			respbuf[0] = 0;
   80834:	f805 6c01 	strb.w	r6, [r5, #-1]
			udd_g_ctrlreq.payload = respbuf;
   80838:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = 2;
   8083a:	81a3      	strh	r3, [r4, #12]
			return true;
   8083c:	e7cd      	b.n	807da <bergen_setup_in_received+0x76>
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   8083e:	2502      	movs	r5, #2
   80840:	e7c8      	b.n	807d4 <bergen_setup_in_received+0x70>
	switch (udd_g_ctrlreq.req.bRequest & 0xFF) {
   80842:	2000      	movs	r0, #0
   80844:	e7c9      	b.n	807da <bergen_setup_in_received+0x76>
   80846:	bf00      	nop
   80848:	20072288 	.word	0x20072288
   8084c:	20072133 	.word	0x20072133
   80850:	200701f4 	.word	0x200701f4
   80854:	20071a19 	.word	0x20071a19
   80858:	20071c9c 	.word	0x20071c9c
   8085c:	20071a18 	.word	0x20071a18
   80860:	0008205d 	.word	0x0008205d
   80864:	00083a2d 	.word	0x00083a2d
   80868:	4008c000 	.word	0x4008c000
   8086c:	000809ed 	.word	0x000809ed

00080870 <ctrl_fpga_temp_cb>:
{
   80870:	b538      	push	{r3, r4, r5, lr}
	if (I2C_LOCK) {
   80872:	4c0b      	ldr	r4, [pc, #44]	; (808a0 <ctrl_fpga_temp_cb+0x30>)
   80874:	7823      	ldrb	r3, [r4, #0]
   80876:	b11b      	cbz	r3, 80880 <ctrl_fpga_temp_cb+0x10>
		I2C_STATUS = 1;
   80878:	2201      	movs	r2, #1
   8087a:	4b0a      	ldr	r3, [pc, #40]	; (808a4 <ctrl_fpga_temp_cb+0x34>)
   8087c:	701a      	strb	r2, [r3, #0]
}
   8087e:	bd38      	pop	{r3, r4, r5, pc}
	I2C_LOCK = 1;
   80880:	2101      	movs	r1, #1
   80882:	f003 05ff 	and.w	r5, r3, #255	; 0xff
	max1617_register_write(udd_g_ctrlreq.req.wValue & 0xFF, udd_g_ctrlreq.payload[0]);
   80886:	4b08      	ldr	r3, [pc, #32]	; (808a8 <ctrl_fpga_temp_cb+0x38>)
	I2C_LOCK = 1;
   80888:	7021      	strb	r1, [r4, #0]
	max1617_register_write(udd_g_ctrlreq.req.wValue & 0xFF, udd_g_ctrlreq.payload[0]);
   8088a:	689a      	ldr	r2, [r3, #8]
   8088c:	7898      	ldrb	r0, [r3, #2]
   8088e:	f992 1000 	ldrsb.w	r1, [r2]
   80892:	4b06      	ldr	r3, [pc, #24]	; (808ac <ctrl_fpga_temp_cb+0x3c>)
   80894:	4798      	blx	r3
	I2C_STATUS = 0;
   80896:	4b03      	ldr	r3, [pc, #12]	; (808a4 <ctrl_fpga_temp_cb+0x34>)
	I2C_LOCK = 0;
   80898:	7025      	strb	r5, [r4, #0]
	I2C_STATUS = 0;
   8089a:	701d      	strb	r5, [r3, #0]
}
   8089c:	bd38      	pop	{r3, r4, r5, pc}
   8089e:	bf00      	nop
   808a0:	20072133 	.word	0x20072133
   808a4:	20071c9c 	.word	0x20071c9c
   808a8:	20072288 	.word	0x20072288
   808ac:	00080a3d 	.word	0x00080a3d

000808b0 <ui_powerdown>:
}
   808b0:	4770      	bx	lr
   808b2:	bf00      	nop

000808b4 <ui_wakeup>:
   808b4:	4770      	bx	lr
   808b6:	bf00      	nop

000808b8 <ui_process>:
	if (!(frame_number % 0x200))
   808b8:	f3c0 0008 	ubfx	r0, r0, #0, #9
   808bc:	b100      	cbz	r0, 808c0 <ui_process+0x8>
}
   808be:	4770      	bx	lr
		gpio_toggle_pin(PIN_USB_HBEAT);
   808c0:	2003      	movs	r0, #3
   808c2:	4b01      	ldr	r3, [pc, #4]	; (808c8 <ui_process+0x10>)
   808c4:	4718      	bx	r3
   808c6:	bf00      	nop
   808c8:	000836bd 	.word	0x000836bd

000808cc <bergen_register_handlers>:

void bergen_register_handlers(void)
{
   808cc:	b510      	push	{r4, lr}
	naeusb_add_in_handler(bergen_setup_in_received);
   808ce:	4b04      	ldr	r3, [pc, #16]	; (808e0 <bergen_register_handlers+0x14>)
   808d0:	4804      	ldr	r0, [pc, #16]	; (808e4 <bergen_register_handlers+0x18>)
   808d2:	4798      	blx	r3
	naeusb_add_out_handler(bergen_setup_out_received);
   808d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	naeusb_add_out_handler(bergen_setup_out_received);
   808d8:	4803      	ldr	r0, [pc, #12]	; (808e8 <bergen_register_handlers+0x1c>)
   808da:	4b04      	ldr	r3, [pc, #16]	; (808ec <bergen_register_handlers+0x20>)
   808dc:	4718      	bx	r3
   808de:	bf00      	nop
   808e0:	00081825 	.word	0x00081825
   808e4:	00080765 	.word	0x00080765
   808e8:	000806c5 	.word	0x000806c5
   808ec:	0008184d 	.word	0x0008184d

000808f0 <pgood_alert_handler>:
	// 	}
	// }
}

void pgood_alert_handler(const uint32_t id, const uint32_t index)
{
   808f0:	b510      	push	{r4, lr}
	if (pio_get(PIOC, PIO_INPUT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN) != (PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN) || 
   808f2:	f44f 12c8 	mov.w	r2, #1638400	; 0x190000
   808f6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   808fa:	480a      	ldr	r0, [pc, #40]	; (80924 <pgood_alert_handler+0x34>)
   808fc:	4c0a      	ldr	r4, [pc, #40]	; (80928 <pgood_alert_handler+0x38>)
   808fe:	47a0      	blx	r4
   80900:	f5b0 1fc8 	cmp.w	r0, #1638400	; 0x190000
   80904:	d005      	beq.n	80912 <pgood_alert_handler+0x22>
		!pio_get(PIOB, PIO_INPUT, PIN_PGOOD_3V3_PIN))
		if (power_toggles++ > 5) {
   80906:	4a09      	ldr	r2, [pc, #36]	; (8092c <pgood_alert_handler+0x3c>)
   80908:	7813      	ldrb	r3, [r2, #0]
   8090a:	3301      	adds	r3, #1
   8090c:	b2db      	uxtb	r3, r3
   8090e:	7013      	strb	r3, [r2, #0]
			//kill_fpga_power(); //lots of glitching on PIO?
		}
   80910:	bd10      	pop	{r4, pc}
		!pio_get(PIOB, PIO_INPUT, PIN_PGOOD_3V3_PIN))
   80912:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80916:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8091a:	4805      	ldr	r0, [pc, #20]	; (80930 <pgood_alert_handler+0x40>)
   8091c:	47a0      	blx	r4
	if (pio_get(PIOC, PIO_INPUT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN) != (PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN) || 
   8091e:	2800      	cmp	r0, #0
   80920:	d0f1      	beq.n	80906 <pgood_alert_handler+0x16>
   80922:	bd10      	pop	{r4, pc}
   80924:	400e1200 	.word	0x400e1200
   80928:	0008361d 	.word	0x0008361d
   8092c:	200714fd 	.word	0x200714fd
   80930:	400e1000 	.word	0x400e1000

00080934 <fpga_power_reset_handler>:
{
   80934:	b538      	push	{r3, r4, r5, lr}
	if (!pio_get(PIOB, PIO_INPUT, PIN_FPGA_POWER_RESET_PIN)) {
   80936:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8093a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8093e:	480d      	ldr	r0, [pc, #52]	; (80974 <fpga_power_reset_handler+0x40>)
   80940:	4b0d      	ldr	r3, [pc, #52]	; (80978 <fpga_power_reset_handler+0x44>)
   80942:	4798      	blx	r3
   80944:	b958      	cbnz	r0, 8095e <fpga_power_reset_handler+0x2a>
   80946:	4604      	mov	r4, r0
		power_killed = false;
   80948:	4d0c      	ldr	r5, [pc, #48]	; (8097c <fpga_power_reset_handler+0x48>)
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   8094a:	203b      	movs	r0, #59	; 0x3b
   8094c:	4b0c      	ldr	r3, [pc, #48]	; (80980 <fpga_power_reset_handler+0x4c>)
		power_killed = false;
   8094e:	702c      	strb	r4, [r5, #0]
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   80950:	4798      	blx	r3
	fpga_pins(false);
   80952:	4b0c      	ldr	r3, [pc, #48]	; (80984 <fpga_power_reset_handler+0x50>)
   80954:	4620      	mov	r0, r4
   80956:	4798      	blx	r3
	power_killed = true;
   80958:	2301      	movs	r3, #1
   8095a:	702b      	strb	r3, [r5, #0]
}
   8095c:	bd38      	pop	{r3, r4, r5, pc}
	gpio_set_pin_high(PIN_FPGA_PWR_ENABLE);
   8095e:	203b      	movs	r0, #59	; 0x3b
   80960:	4b09      	ldr	r3, [pc, #36]	; (80988 <fpga_power_reset_handler+0x54>)
   80962:	4798      	blx	r3
	fpga_pins(true);
   80964:	4b07      	ldr	r3, [pc, #28]	; (80984 <fpga_power_reset_handler+0x50>)
   80966:	2001      	movs	r0, #1
   80968:	4798      	blx	r3
	power_killed = false;
   8096a:	2200      	movs	r2, #0
   8096c:	4b03      	ldr	r3, [pc, #12]	; (8097c <fpga_power_reset_handler+0x48>)
   8096e:	701a      	strb	r2, [r3, #0]
}
   80970:	bd38      	pop	{r3, r4, r5, pc}
   80972:	bf00      	nop
   80974:	400e1000 	.word	0x400e1000
   80978:	0008361d 	.word	0x0008361d
   8097c:	200714fc 	.word	0x200714fc
   80980:	000836a1 	.word	0x000836a1
   80984:	00080279 	.word	0x00080279
   80988:	00083685 	.word	0x00083685

0008098c <max1617_alert_handler>:
	if ((id == ID_PIOA) && (index == PIO_PA16) && (!pio_get(PIOA, PIO_INPUT, PIO_PA16))) {
   8098c:	280b      	cmp	r0, #11
   8098e:	d000      	beq.n	80992 <max1617_alert_handler+0x6>
   80990:	4770      	bx	lr
   80992:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   80996:	d1fb      	bne.n	80990 <max1617_alert_handler+0x4>
   80998:	460a      	mov	r2, r1
{
   8099a:	b570      	push	{r4, r5, r6, lr}
	if ((id == ID_PIOA) && (index == PIO_PA16) && (!pio_get(PIOA, PIO_INPUT, PIO_PA16))) {
   8099c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   809a0:	4808      	ldr	r0, [pc, #32]	; (809c4 <max1617_alert_handler+0x38>)
   809a2:	4b09      	ldr	r3, [pc, #36]	; (809c8 <max1617_alert_handler+0x3c>)
   809a4:	4798      	blx	r3
   809a6:	4604      	mov	r4, r0
   809a8:	b100      	cbz	r0, 809ac <max1617_alert_handler+0x20>
}
   809aa:	bd70      	pop	{r4, r5, r6, pc}
			power_killed = true;
   809ac:	2601      	movs	r6, #1
   809ae:	4d07      	ldr	r5, [pc, #28]	; (809cc <max1617_alert_handler+0x40>)
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   809b0:	203b      	movs	r0, #59	; 0x3b
   809b2:	4b07      	ldr	r3, [pc, #28]	; (809d0 <max1617_alert_handler+0x44>)
			power_killed = true;
   809b4:	702e      	strb	r6, [r5, #0]
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   809b6:	4798      	blx	r3
	fpga_pins(false);
   809b8:	4620      	mov	r0, r4
   809ba:	4b06      	ldr	r3, [pc, #24]	; (809d4 <max1617_alert_handler+0x48>)
   809bc:	4798      	blx	r3
	power_killed = true;
   809be:	702e      	strb	r6, [r5, #0]
}
   809c0:	bd70      	pop	{r4, r5, r6, pc}
   809c2:	bf00      	nop
   809c4:	400e0e00 	.word	0x400e0e00
   809c8:	0008361d 	.word	0x0008361d
   809cc:	200714fc 	.word	0x200714fc
   809d0:	000836a1 	.word	0x000836a1
   809d4:	00080279 	.word	0x00080279

000809d8 <enable_switched_power>:
{
   809d8:	b508      	push	{r3, lr}
	gpio_configure_pin(PIN_SAM_SWITCHED_PWR_ENABLE, PIN_SAM_SWITCHED_PWR_ENABLE_FLAGS);
   809da:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   809de:	4b02      	ldr	r3, [pc, #8]	; (809e8 <enable_switched_power+0x10>)
   809e0:	2004      	movs	r0, #4
   809e2:	4798      	blx	r3
}
   809e4:	2000      	movs	r0, #0
   809e6:	bd08      	pop	{r3, pc}
   809e8:	000836e1 	.word	0x000836e1

000809ec <max1617_register_read>:
{
   809ec:	b530      	push	{r4, r5, lr}
	twi_package_t max_packet = {
   809ee:	f04f 0c00 	mov.w	ip, #0
   809f2:	2301      	movs	r3, #1
   809f4:	f04f 0e18 	mov.w	lr, #24
	if (I2C_LOCK) {
   809f8:	4c0d      	ldr	r4, [pc, #52]	; (80a30 <max1617_register_read+0x44>)
{
   809fa:	b087      	sub	sp, #28
	if (I2C_LOCK) {
   809fc:	7822      	ldrb	r2, [r4, #0]
	twi_package_t max_packet = {
   809fe:	f88d c005 	strb.w	ip, [sp, #5]
   80a02:	f88d c006 	strb.w	ip, [sp, #6]
   80a06:	9103      	str	r1, [sp, #12]
   80a08:	f88d e014 	strb.w	lr, [sp, #20]
   80a0c:	f88d 0004 	strb.w	r0, [sp, #4]
   80a10:	9302      	str	r3, [sp, #8]
   80a12:	9304      	str	r3, [sp, #16]
	if (I2C_LOCK) {
   80a14:	b94a      	cbnz	r2, 80a2a <max1617_register_read+0x3e>
	I2C_LOCK = 1;
   80a16:	f002 05ff 	and.w	r5, r2, #255	; 0xff
	int rtn = twi_master_read(MAX1617_I2C, &max_packet);
   80a1a:	4806      	ldr	r0, [pc, #24]	; (80a34 <max1617_register_read+0x48>)
   80a1c:	4a06      	ldr	r2, [pc, #24]	; (80a38 <max1617_register_read+0x4c>)
   80a1e:	a901      	add	r1, sp, #4
	I2C_LOCK = 1;
   80a20:	7023      	strb	r3, [r4, #0]
	int rtn = twi_master_read(MAX1617_I2C, &max_packet);
   80a22:	4790      	blx	r2
	I2C_LOCK = 0;
   80a24:	7025      	strb	r5, [r4, #0]
}
   80a26:	b007      	add	sp, #28
   80a28:	bd30      	pop	{r4, r5, pc}
		return -1;
   80a2a:	f04f 30ff 	mov.w	r0, #4294967295
   80a2e:	e7fa      	b.n	80a26 <max1617_register_read+0x3a>
   80a30:	20072133 	.word	0x20072133
   80a34:	4008c000 	.word	0x4008c000
   80a38:	00083a2d 	.word	0x00083a2d

00080a3c <max1617_register_write>:
{
   80a3c:	b530      	push	{r4, r5, lr}
	twi_package_t max_packet = {
   80a3e:	f04f 0c00 	mov.w	ip, #0
   80a42:	2301      	movs	r3, #1
   80a44:	f04f 0e18 	mov.w	lr, #24
{
   80a48:	b089      	sub	sp, #36	; 0x24
	if (I2C_LOCK) {
   80a4a:	4c0f      	ldr	r4, [pc, #60]	; (80a88 <max1617_register_write+0x4c>)
	twi_package_t max_packet = {
   80a4c:	f10d 0207 	add.w	r2, sp, #7
   80a50:	9205      	str	r2, [sp, #20]
	if (I2C_LOCK) {
   80a52:	7822      	ldrb	r2, [r4, #0]
	twi_package_t max_packet = {
   80a54:	f88d c00d 	strb.w	ip, [sp, #13]
   80a58:	f88d c00e 	strb.w	ip, [sp, #14]
   80a5c:	f88d e01c 	strb.w	lr, [sp, #28]
{
   80a60:	f88d 1007 	strb.w	r1, [sp, #7]
	twi_package_t max_packet = {
   80a64:	f88d 000c 	strb.w	r0, [sp, #12]
   80a68:	9304      	str	r3, [sp, #16]
   80a6a:	9306      	str	r3, [sp, #24]
	if (I2C_LOCK) {
   80a6c:	b94a      	cbnz	r2, 80a82 <max1617_register_write+0x46>
	I2C_LOCK = 1;
   80a6e:	f002 05ff 	and.w	r5, r2, #255	; 0xff
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80a72:	4806      	ldr	r0, [pc, #24]	; (80a8c <max1617_register_write+0x50>)
   80a74:	4a06      	ldr	r2, [pc, #24]	; (80a90 <max1617_register_write+0x54>)
   80a76:	a903      	add	r1, sp, #12
	I2C_LOCK = 1;
   80a78:	7023      	strb	r3, [r4, #0]
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80a7a:	4790      	blx	r2
	I2C_LOCK = 0;
   80a7c:	7025      	strb	r5, [r4, #0]
}
   80a7e:	b009      	add	sp, #36	; 0x24
   80a80:	bd30      	pop	{r4, r5, pc}
		return -1;
   80a82:	f04f 30ff 	mov.w	r0, #4294967295
   80a86:	e7fa      	b.n	80a7e <max1617_register_write+0x42>
   80a88:	20072133 	.word	0x20072133
   80a8c:	4008c000 	.word	0x4008c000
   80a90:	00083b05 	.word	0x00083b05

00080a94 <power_init>:
{
   80a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	pmc_enable_periph_clk(ID_PIOC);
   80a98:	200d      	movs	r0, #13
{
   80a9a:	b083      	sub	sp, #12
	pio_configure_pin_group(PIN_PGOOD_VCCINT_PORT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80a9c:	4d1f      	ldr	r5, [pc, #124]	; (80b1c <power_init+0x88>)
	pmc_enable_periph_clk(ID_PIOC);
   80a9e:	4c20      	ldr	r4, [pc, #128]	; (80b20 <power_init+0x8c>)
	pio_configure_pin_group(PIN_PGOOD_VCCINT_PORT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80aa0:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80b24 <power_init+0x90>
	pmc_enable_periph_clk(ID_PIOC);
   80aa4:	47a0      	blx	r4
	pio_handler_set(PIN_PGOOD_VCCINT_PORT, ID_PIOC, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIO_IT_FALL_EDGE, pgood_alert_handler);
   80aa6:	4f20      	ldr	r7, [pc, #128]	; (80b28 <power_init+0x94>)
	pmc_enable_periph_clk(ID_PIOB);
   80aa8:	200c      	movs	r0, #12
   80aaa:	47a0      	blx	r4
	pio_configure_pin_group(PIN_PGOOD_VCCINT_PORT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80aac:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80b2c <power_init+0x98>
   80ab0:	464a      	mov	r2, r9
   80ab2:	f44f 11c8 	mov.w	r1, #1638400	; 0x190000
   80ab6:	4628      	mov	r0, r5
   80ab8:	47c0      	blx	r8
	pio_configure_pin_group(PIN_PGOOD_3V3_PORT, PIN_PGOOD_3V3_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80aba:	4c1d      	ldr	r4, [pc, #116]	; (80b30 <power_init+0x9c>)
	pio_handler_set(PIN_PGOOD_VCCINT_PORT, ID_PIOC, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIO_IT_FALL_EDGE, pgood_alert_handler);
   80abc:	2350      	movs	r3, #80	; 0x50
   80abe:	f44f 12c8 	mov.w	r2, #1638400	; 0x190000
   80ac2:	4e1c      	ldr	r6, [pc, #112]	; (80b34 <power_init+0xa0>)
   80ac4:	210d      	movs	r1, #13
   80ac6:	4628      	mov	r0, r5
   80ac8:	9700      	str	r7, [sp, #0]
   80aca:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PGOOD_VCCINT_PORT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN);
   80acc:	4628      	mov	r0, r5
   80ace:	f44f 11c8 	mov.w	r1, #1638400	; 0x190000
   80ad2:	4d19      	ldr	r5, [pc, #100]	; (80b38 <power_init+0xa4>)
   80ad4:	47a8      	blx	r5
	pio_configure_pin_group(PIN_PGOOD_3V3_PORT, PIN_PGOOD_3V3_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80ad6:	464a      	mov	r2, r9
   80ad8:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80adc:	4620      	mov	r0, r4
   80ade:	47c0      	blx	r8
	pio_handler_set(PIN_PGOOD_3V3_PORT, ID_PIOB, PIN_PGOOD_3V3_PIN, PIO_IT_FALL_EDGE, pgood_alert_handler);
   80ae0:	2350      	movs	r3, #80	; 0x50
   80ae2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80ae6:	210c      	movs	r1, #12
   80ae8:	4620      	mov	r0, r4
   80aea:	9700      	str	r7, [sp, #0]
   80aec:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PGOOD_3V3_PORT, PIN_PGOOD_3V3_PIN);
   80aee:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80af2:	4620      	mov	r0, r4
   80af4:	47a8      	blx	r5
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80af6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80afa:	4b10      	ldr	r3, [pc, #64]	; (80b3c <power_init+0xa8>)
   80afc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   80b00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   80b04:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   80b08:	2190      	movs	r1, #144	; 0x90
}
   80b0a:	2000      	movs	r0, #0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80b0c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   80b10:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80b14:	601a      	str	r2, [r3, #0]
   80b16:	b003      	add	sp, #12
   80b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80b1c:	400e1200 	.word	0x400e1200
   80b20:	000834d5 	.word	0x000834d5
   80b24:	2800000a 	.word	0x2800000a
   80b28:	000808f1 	.word	0x000808f1
   80b2c:	000837d9 	.word	0x000837d9
   80b30:	400e1000 	.word	0x400e1000
   80b34:	00083209 	.word	0x00083209
   80b38:	0008365d 	.word	0x0008365d
   80b3c:	e000e100 	.word	0xe000e100

00080b40 <thermals_init>:
{	
   80b40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80b44:	2007      	movs	r0, #7
	twi_package_t max_packet = {
   80b46:	2601      	movs	r6, #1
   80b48:	210a      	movs	r1, #10
   80b4a:	2200      	movs	r2, #0
   80b4c:	f04f 0818 	mov.w	r8, #24
{	
   80b50:	b089      	sub	sp, #36	; 0x24
	if (I2C_LOCK) {
   80b52:	4f3d      	ldr	r7, [pc, #244]	; (80c48 <thermals_init+0x108>)
	twi_package_t max_packet = {
   80b54:	f10d 030b 	add.w	r3, sp, #11
   80b58:	9305      	str	r3, [sp, #20]
	if (I2C_LOCK) {
   80b5a:	783b      	ldrb	r3, [r7, #0]
	twi_package_t max_packet = {
   80b5c:	9604      	str	r6, [sp, #16]
   80b5e:	f88d 000b 	strb.w	r0, [sp, #11]
   80b62:	f8ad 100c 	strh.w	r1, [sp, #12]
   80b66:	f88d 200e 	strb.w	r2, [sp, #14]
   80b6a:	9606      	str	r6, [sp, #24]
   80b6c:	f88d 801c 	strb.w	r8, [sp, #28]
	if (I2C_LOCK) {
   80b70:	2b00      	cmp	r3, #0
   80b72:	d166      	bne.n	80c42 <thermals_init+0x102>
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80b74:	4835      	ldr	r0, [pc, #212]	; (80c4c <thermals_init+0x10c>)
   80b76:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80c50 <thermals_init+0x110>
   80b7a:	a903      	add	r1, sp, #12
   80b7c:	f003 05ff 	and.w	r5, r3, #255	; 0xff
	I2C_LOCK = 1;
   80b80:	703e      	strb	r6, [r7, #0]
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80b82:	47c8      	blx	r9
	I2C_LOCK = 0;
   80b84:	703d      	strb	r5, [r7, #0]
	if (rtn != TWI_SUCCESS)
   80b86:	4604      	mov	r4, r0
   80b88:	b118      	cbz	r0, 80b92 <thermals_init+0x52>
}
   80b8a:	4620      	mov	r0, r4
   80b8c:	b009      	add	sp, #36	; 0x24
   80b8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	twi_package_t max_packet = {
   80b92:	f10d 030b 	add.w	r3, sp, #11
   80b96:	e9cd 6304 	strd	r6, r3, [sp, #16]
   80b9a:	f88d 801c 	strb.w	r8, [sp, #28]
   80b9e:	230d      	movs	r3, #13
   80ba0:	f04f 0850 	mov.w	r8, #80	; 0x50
	if (I2C_LOCK) {
   80ba4:	783a      	ldrb	r2, [r7, #0]
	twi_package_t max_packet = {
   80ba6:	f88d 000e 	strb.w	r0, [sp, #14]
   80baa:	9606      	str	r6, [sp, #24]
   80bac:	f8ad 300c 	strh.w	r3, [sp, #12]
   80bb0:	f88d 800b 	strb.w	r8, [sp, #11]
	if (I2C_LOCK) {
   80bb4:	f002 05ff 	and.w	r5, r2, #255	; 0xff
   80bb8:	2a00      	cmp	r2, #0
   80bba:	d142      	bne.n	80c42 <thermals_init+0x102>
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80bbc:	4823      	ldr	r0, [pc, #140]	; (80c4c <thermals_init+0x10c>)
   80bbe:	a903      	add	r1, sp, #12
	I2C_LOCK = 1;
   80bc0:	703e      	strb	r6, [r7, #0]
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80bc2:	47c8      	blx	r9
	I2C_LOCK = 0;
   80bc4:	703d      	strb	r5, [r7, #0]
	if (rtn != TWI_SUCCESS)
   80bc6:	4604      	mov	r4, r0
   80bc8:	2800      	cmp	r0, #0
   80bca:	d1de      	bne.n	80b8a <thermals_init+0x4a>
	gpio_configure_pin(PIN_TEMP_ALERT, PIN_TEMP_ALERT_FLAGS);
   80bcc:	4d21      	ldr	r5, [pc, #132]	; (80c54 <thermals_init+0x114>)
   80bce:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80bd2:	2017      	movs	r0, #23
   80bd4:	47a8      	blx	r5
	pio_handler_set(PIN_TEMP_ALERT_PORT, ID_PIOA, PIN_TEMP_ALERT_PIN, PIO_IT_FALL_EDGE, max1617_alert_handler);
   80bd6:	4a20      	ldr	r2, [pc, #128]	; (80c58 <thermals_init+0x118>)
   80bd8:	4643      	mov	r3, r8
   80bda:	9200      	str	r2, [sp, #0]
   80bdc:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80c5c <thermals_init+0x11c>
   80be0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80be4:	210b      	movs	r1, #11
   80be6:	481e      	ldr	r0, [pc, #120]	; (80c60 <thermals_init+0x120>)
   80be8:	47c0      	blx	r8
	pio_enable_interrupt(PIOA, PIN_TEMP_ALERT_PIN);
   80bea:	4f1e      	ldr	r7, [pc, #120]	; (80c64 <thermals_init+0x124>)
   80bec:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   80bf0:	481b      	ldr	r0, [pc, #108]	; (80c60 <thermals_init+0x120>)
   80bf2:	47b8      	blx	r7
	gpio_configure_pin(PIN_FPGA_POWER_RESET, PIN_FPGA_POWER_RESET_FLAGS);
   80bf4:	491c      	ldr	r1, [pc, #112]	; (80c68 <thermals_init+0x128>)
   80bf6:	2037      	movs	r0, #55	; 0x37
   80bf8:	47a8      	blx	r5
	pio_handler_set(PIN_FPGA_POWER_RESET_PORT, ID_PIOB, PIN_FPGA_POWER_RESET_PIN, 0, fpga_power_reset_handler);
   80bfa:	4b1c      	ldr	r3, [pc, #112]	; (80c6c <thermals_init+0x12c>)
   80bfc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80c00:	9300      	str	r3, [sp, #0]
   80c02:	210c      	movs	r1, #12
   80c04:	4623      	mov	r3, r4
   80c06:	481a      	ldr	r0, [pc, #104]	; (80c70 <thermals_init+0x130>)
   80c08:	47c0      	blx	r8
	pio_enable_interrupt(PIOB, PIN_FPGA_POWER_RESET_PIN);
   80c0a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   80c0e:	4818      	ldr	r0, [pc, #96]	; (80c70 <thermals_init+0x130>)
   80c10:	47b8      	blx	r7
   80c12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80c16:	f44f 6100 	mov.w	r1, #2048	; 0x800
	gpio_configure_pin(PIN_TEMP_ERR_LED, PIN_TEMP_ERR_LED_FLAGS);
   80c1a:	4620      	mov	r0, r4
	return 0x01;
   80c1c:	4634      	mov	r4, r6
   80c1e:	4b15      	ldr	r3, [pc, #84]	; (80c74 <thermals_init+0x134>)
   80c20:	6019      	str	r1, [r3, #0]
   80c22:	601a      	str	r2, [r3, #0]
	gpio_configure_pin(PIN_TEMP_ERR_LED, PIN_TEMP_ERR_LED_FLAGS);
   80c24:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80c28:	47a8      	blx	r5
	gpio_configure_pin(PIN_TEMP_OK_LED, PIN_TEMP_OK_LED_FLAGS);
   80c2a:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80c2e:	4630      	mov	r0, r6
   80c30:	47a8      	blx	r5
	gpio_configure_pin(PIN_FPGA_PWR_ENABLE, PIN_FPGA_PWR_ENABLE_FLAGS);
   80c32:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80c36:	203b      	movs	r0, #59	; 0x3b
   80c38:	47a8      	blx	r5
}
   80c3a:	4620      	mov	r0, r4
   80c3c:	b009      	add	sp, #36	; 0x24
   80c3e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -1;
   80c42:	f04f 34ff 	mov.w	r4, #4294967295
   80c46:	e7a0      	b.n	80b8a <thermals_init+0x4a>
   80c48:	20072133 	.word	0x20072133
   80c4c:	4008c000 	.word	0x4008c000
   80c50:	00083b05 	.word	0x00083b05
   80c54:	000836e1 	.word	0x000836e1
   80c58:	0008098d 	.word	0x0008098d
   80c5c:	00083209 	.word	0x00083209
   80c60:	400e0e00 	.word	0x400e0e00
   80c64:	0008365d 	.word	0x0008365d
   80c68:	2800000b 	.word	0x2800000b
   80c6c:	00080935 	.word	0x00080935
   80c70:	400e1000 	.word	0x400e1000
   80c74:	e000e100 	.word	0xe000e100

00080c78 <thermals_slow_tick>:
{
   80c78:	b5f0      	push	{r4, r5, r6, r7, lr}
	twi_package_t max_packet = {
   80c7a:	2218      	movs	r2, #24
   80c7c:	2501      	movs	r5, #1
	int8_t temp = 0;
   80c7e:	2400      	movs	r4, #0
{
   80c80:	b087      	sub	sp, #28
	if (I2C_LOCK) {
   80c82:	4e49      	ldr	r6, [pc, #292]	; (80da8 <thermals_slow_tick+0x130>)
	twi_package_t max_packet = {
   80c84:	f10d 0303 	add.w	r3, sp, #3
   80c88:	9303      	str	r3, [sp, #12]
	if (I2C_LOCK) {
   80c8a:	7833      	ldrb	r3, [r6, #0]
	twi_package_t max_packet = {
   80c8c:	f8ad 5004 	strh.w	r5, [sp, #4]
	int8_t temp = 0;
   80c90:	f88d 4003 	strb.w	r4, [sp, #3]
	twi_package_t max_packet = {
   80c94:	f88d 4006 	strb.w	r4, [sp, #6]
   80c98:	9502      	str	r5, [sp, #8]
   80c9a:	9504      	str	r5, [sp, #16]
   80c9c:	f88d 2014 	strb.w	r2, [sp, #20]
	if (I2C_LOCK) {
   80ca0:	2b00      	cmp	r3, #0
   80ca2:	d140      	bne.n	80d26 <thermals_slow_tick+0xae>
	I2C_LOCK = 1;
   80ca4:	f003 07ff 	and.w	r7, r3, #255	; 0xff
	int rtn = twi_master_read(MAX1617_I2C, &max_packet);
   80ca8:	4840      	ldr	r0, [pc, #256]	; (80dac <thermals_slow_tick+0x134>)
   80caa:	4b41      	ldr	r3, [pc, #260]	; (80db0 <thermals_slow_tick+0x138>)
   80cac:	a901      	add	r1, sp, #4
	I2C_LOCK = 1;
   80cae:	7035      	strb	r5, [r6, #0]
	int rtn = twi_master_read(MAX1617_I2C, &max_packet);
   80cb0:	4798      	blx	r3
	return temp;
   80cb2:	f99d 4003 	ldrsb.w	r4, [sp, #3]
	I2C_LOCK = 0;
   80cb6:	7037      	strb	r7, [r6, #0]
	if (fpga_temp == 0){
   80cb8:	2c00      	cmp	r4, #0
   80cba:	d034      	beq.n	80d26 <thermals_slow_tick+0xae>
	if (fpga_temp >= MAX1617_KILL_TEMP) {
   80cbc:	2c40      	cmp	r4, #64	; 0x40
   80cbe:	dc64      	bgt.n	80d8a <thermals_slow_tick+0x112>
	} else if (fpga_temp >= MAX1617_MAX_TEMP) {
   80cc0:	2c36      	cmp	r4, #54	; 0x36
   80cc2:	dd41      	ble.n	80d48 <thermals_slow_tick+0xd0>
		if (!power_killed) {
   80cc4:	4a3b      	ldr	r2, [pc, #236]	; (80db4 <thermals_slow_tick+0x13c>)
		gpio_set_pin_low(PIN_TEMP_OK_LED);
   80cc6:	4628      	mov	r0, r5
   80cc8:	4b3b      	ldr	r3, [pc, #236]	; (80db8 <thermals_slow_tick+0x140>)
		if (!power_killed) {
   80cca:	7812      	ldrb	r2, [r2, #0]
		gpio_set_pin_low(PIN_TEMP_OK_LED);
   80ccc:	4798      	blx	r3
		gpio_set_pin_high(PIN_TEMP_ERR_LED);
   80cce:	4638      	mov	r0, r7
   80cd0:	4b3a      	ldr	r3, [pc, #232]	; (80dbc <thermals_slow_tick+0x144>)
   80cd2:	4798      	blx	r3
	fpga_temp = min(MAX1617_FULL_FAN_TEMP, fpga_temp);
   80cd4:	2c32      	cmp	r4, #50	; 0x32
   80cd6:	bfa8      	it	ge
   80cd8:	2432      	movge	r4, #50	; 0x32
	fpga_temp = max(MAX1617_OFF_FAN_TEMP, fpga_temp);
   80cda:	2c23      	cmp	r4, #35	; 0x23
   80cdc:	bfb8      	it	lt
   80cde:	2423      	movlt	r4, #35	; 0x23
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80ce0:	2064      	movs	r0, #100	; 0x64
	unsigned int fan_pwm = fpga_temp - MAX1617_OFF_FAN_TEMP;
   80ce2:	3c23      	subs	r4, #35	; 0x23
   80ce4:	b264      	sxtb	r4, r4
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80ce6:	fb00 f404 	mul.w	r4, r0, r4
   80cea:	4935      	ldr	r1, [pc, #212]	; (80dc0 <thermals_slow_tick+0x148>)
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   80cec:	f44f 7224 	mov.w	r2, #656	; 0x290
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80cf0:	fba1 1404 	umull	r1, r4, r1, r4
   80cf4:	08e4      	lsrs	r4, r4, #3
	fan_pwm = min(99, fan_pwm);
   80cf6:	2c63      	cmp	r4, #99	; 0x63
   80cf8:	bf28      	it	cs
   80cfa:	2463      	movcs	r4, #99	; 0x63
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   80cfc:	1b04      	subs	r4, r0, r4
   80cfe:	fb02 f404 	mul.w	r4, r2, r4
   80d02:	4b30      	ldr	r3, [pc, #192]	; (80dc4 <thermals_slow_tick+0x14c>)
   80d04:	fba3 3404 	umull	r3, r4, r3, r4
   80d08:	0964      	lsrs	r4, r4, #5
	tc_write_rc(TC0, FAN_PWM_TIMER_CHANNEL, rc);
   80d0a:	2100      	movs	r1, #0
   80d0c:	f44f 7224 	mov.w	r2, #656	; 0x290
   80d10:	482d      	ldr	r0, [pc, #180]	; (80dc8 <thermals_slow_tick+0x150>)
   80d12:	4b2e      	ldr	r3, [pc, #184]	; (80dcc <thermals_slow_tick+0x154>)
   80d14:	4798      	blx	r3
	tc_write_ra(TC0, FAN_PWM_TIMER_CHANNEL, ra);
   80d16:	4622      	mov	r2, r4
   80d18:	2100      	movs	r1, #0
   80d1a:	482b      	ldr	r0, [pc, #172]	; (80dc8 <thermals_slow_tick+0x150>)
   80d1c:	4b2c      	ldr	r3, [pc, #176]	; (80dd0 <thermals_slow_tick+0x158>)
   80d1e:	4798      	blx	r3
}
   80d20:	2000      	movs	r0, #0
   80d22:	b007      	add	sp, #28
   80d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gpio_set_pin_high(PIN_TEMP_OK_LED);
   80d26:	4628      	mov	r0, r5
   80d28:	4b24      	ldr	r3, [pc, #144]	; (80dbc <thermals_slow_tick+0x144>)
   80d2a:	4798      	blx	r3
		gpio_set_pin_low(PIN_TEMP_ERR_LED);
   80d2c:	4620      	mov	r0, r4
   80d2e:	4b22      	ldr	r3, [pc, #136]	; (80db8 <thermals_slow_tick+0x140>)
   80d30:	4798      	blx	r3
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   80d32:	f44f 7224 	mov.w	r2, #656	; 0x290
   80d36:	f1c4 0464 	rsb	r4, r4, #100	; 0x64
   80d3a:	fb02 f404 	mul.w	r4, r2, r4
   80d3e:	4b21      	ldr	r3, [pc, #132]	; (80dc4 <thermals_slow_tick+0x14c>)
   80d40:	fba3 3404 	umull	r3, r4, r3, r4
   80d44:	0964      	lsrs	r4, r4, #5
   80d46:	e7e0      	b.n	80d0a <thermals_slow_tick+0x92>
	fpga_temp = max(MAX1617_OFF_FAN_TEMP, fpga_temp);
   80d48:	2c32      	cmp	r4, #50	; 0x32
   80d4a:	bfa8      	it	ge
   80d4c:	2432      	movge	r4, #50	; 0x32
   80d4e:	2c23      	cmp	r4, #35	; 0x23
   80d50:	bfb8      	it	lt
   80d52:	2423      	movlt	r4, #35	; 0x23
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80d54:	2164      	movs	r1, #100	; 0x64
		gpio_set_pin_high(PIN_TEMP_OK_LED);
   80d56:	4628      	mov	r0, r5
	unsigned int fan_pwm = fpga_temp - MAX1617_OFF_FAN_TEMP;
   80d58:	f1a4 0523 	sub.w	r5, r4, #35	; 0x23
   80d5c:	b26d      	sxtb	r5, r5
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80d5e:	fb01 f505 	mul.w	r5, r1, r5
   80d62:	4b17      	ldr	r3, [pc, #92]	; (80dc0 <thermals_slow_tick+0x148>)
		gpio_set_pin_high(PIN_TEMP_OK_LED);
   80d64:	4a15      	ldr	r2, [pc, #84]	; (80dbc <thermals_slow_tick+0x144>)
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80d66:	fba3 3405 	umull	r3, r4, r3, r5
		gpio_set_pin_high(PIN_TEMP_OK_LED);
   80d6a:	4790      	blx	r2
		gpio_set_pin_low(PIN_TEMP_ERR_LED);
   80d6c:	4b12      	ldr	r3, [pc, #72]	; (80db8 <thermals_slow_tick+0x140>)
   80d6e:	4638      	mov	r0, r7
   80d70:	4798      	blx	r3
	if (fan_pwm > 0){
   80d72:	f240 5381 	movw	r3, #1409	; 0x581
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80d76:	08e4      	lsrs	r4, r4, #3
	fan_pwm = min(99, fan_pwm);
   80d78:	2c63      	cmp	r4, #99	; 0x63
	if (fan_pwm > 0){
   80d7a:	f1a5 050f 	sub.w	r5, r5, #15
	fan_pwm = min(99, fan_pwm);
   80d7e:	bf28      	it	cs
   80d80:	2463      	movcs	r4, #99	; 0x63
	if (fan_pwm > 0){
   80d82:	429d      	cmp	r5, r3
   80d84:	d8d5      	bhi.n	80d32 <thermals_slow_tick+0xba>
   80d86:	2420      	movs	r4, #32
   80d88:	e7bf      	b.n	80d0a <thermals_slow_tick+0x92>
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   80d8a:	4e0b      	ldr	r6, [pc, #44]	; (80db8 <thermals_slow_tick+0x140>)
   80d8c:	203b      	movs	r0, #59	; 0x3b
   80d8e:	47b0      	blx	r6
	fpga_pins(false);
   80d90:	4638      	mov	r0, r7
   80d92:	4b10      	ldr	r3, [pc, #64]	; (80dd4 <thermals_slow_tick+0x15c>)
   80d94:	4798      	blx	r3
	power_killed = true;
   80d96:	4b07      	ldr	r3, [pc, #28]	; (80db4 <thermals_slow_tick+0x13c>)
		gpio_set_pin_low(PIN_TEMP_OK_LED);
   80d98:	4628      	mov	r0, r5
	power_killed = true;
   80d9a:	701d      	strb	r5, [r3, #0]
		power_killed = true;
   80d9c:	701d      	strb	r5, [r3, #0]
		gpio_set_pin_low(PIN_TEMP_OK_LED);
   80d9e:	47b0      	blx	r6
		gpio_set_pin_high(PIN_TEMP_ERR_LED);
   80da0:	4638      	mov	r0, r7
   80da2:	4b06      	ldr	r3, [pc, #24]	; (80dbc <thermals_slow_tick+0x144>)
   80da4:	4798      	blx	r3
   80da6:	e795      	b.n	80cd4 <thermals_slow_tick+0x5c>
   80da8:	20072133 	.word	0x20072133
   80dac:	4008c000 	.word	0x4008c000
   80db0:	00083a2d 	.word	0x00083a2d
   80db4:	200714fc 	.word	0x200714fc
   80db8:	000836a1 	.word	0x000836a1
   80dbc:	00083685 	.word	0x00083685
   80dc0:	88888889 	.word	0x88888889
   80dc4:	51eb851f 	.word	0x51eb851f
   80dc8:	40080000 	.word	0x40080000
   80dcc:	00085ce9 	.word	0x00085ce9
   80dd0:	00085ce1 	.word	0x00085ce1
   80dd4:	00080279 	.word	0x00080279

00080dd8 <thermals_fast_tick>:
{
   80dd8:	b508      	push	{r3, lr}
	if (power_killed) {
   80dda:	4b05      	ldr	r3, [pc, #20]	; (80df0 <thermals_fast_tick+0x18>)
   80ddc:	781b      	ldrb	r3, [r3, #0]
   80dde:	b90b      	cbnz	r3, 80de4 <thermals_fast_tick+0xc>
}
   80de0:	2000      	movs	r0, #0
   80de2:	bd08      	pop	{r3, pc}
		gpio_toggle_pin(PIN_TEMP_ERR_LED);
   80de4:	2000      	movs	r0, #0
   80de6:	4b03      	ldr	r3, [pc, #12]	; (80df4 <thermals_fast_tick+0x1c>)
   80de8:	4798      	blx	r3
}
   80dea:	2000      	movs	r0, #0
   80dec:	bd08      	pop	{r3, pc}
   80dee:	bf00      	nop
   80df0:	200714fc 	.word	0x200714fc
   80df4:	000836bd 	.word	0x000836bd

00080df8 <enable_fpga_power>:
{
   80df8:	b508      	push	{r3, lr}
	gpio_set_pin_high(PIN_FPGA_PWR_ENABLE);
   80dfa:	203b      	movs	r0, #59	; 0x3b
   80dfc:	4b04      	ldr	r3, [pc, #16]	; (80e10 <enable_fpga_power+0x18>)
   80dfe:	4798      	blx	r3
	fpga_pins(true);
   80e00:	4b04      	ldr	r3, [pc, #16]	; (80e14 <enable_fpga_power+0x1c>)
   80e02:	2001      	movs	r0, #1
   80e04:	4798      	blx	r3
	power_killed = false;
   80e06:	2200      	movs	r2, #0
   80e08:	4b03      	ldr	r3, [pc, #12]	; (80e18 <enable_fpga_power+0x20>)
   80e0a:	701a      	strb	r2, [r3, #0]
}
   80e0c:	bd08      	pop	{r3, pc}
   80e0e:	bf00      	nop
   80e10:	00083685 	.word	0x00083685
   80e14:	00080279 	.word	0x00080279
   80e18:	200714fc 	.word	0x200714fc

00080e1c <kill_fpga_power>:
{
   80e1c:	b508      	push	{r3, lr}
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   80e1e:	203b      	movs	r0, #59	; 0x3b
   80e20:	4b04      	ldr	r3, [pc, #16]	; (80e34 <kill_fpga_power+0x18>)
   80e22:	4798      	blx	r3
	fpga_pins(false);
   80e24:	4b04      	ldr	r3, [pc, #16]	; (80e38 <kill_fpga_power+0x1c>)
   80e26:	2000      	movs	r0, #0
   80e28:	4798      	blx	r3
	power_killed = true;
   80e2a:	2201      	movs	r2, #1
   80e2c:	4b03      	ldr	r3, [pc, #12]	; (80e3c <kill_fpga_power+0x20>)
   80e2e:	701a      	strb	r2, [r3, #0]
}
   80e30:	bd08      	pop	{r3, pc}
   80e32:	bf00      	nop
   80e34:	000836a1 	.word	0x000836a1
   80e38:	00080279 	.word	0x00080279
   80e3c:	200714fc 	.word	0x200714fc

00080e40 <fan_pwm_init>:
{
   80e40:	b510      	push	{r4, lr}
	tc_init(TC0, FAN_PWM_TIMER_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_WAVE | TC_CMR_ACPA_SET | TC_CMR_ACPC_CLEAR | TC_CMR_CPCTRG);
   80e42:	4c0e      	ldr	r4, [pc, #56]	; (80e7c <fan_pwm_init+0x3c>)
	pmc_enable_periph_clk(ID_TC0);
   80e44:	4b0e      	ldr	r3, [pc, #56]	; (80e80 <fan_pwm_init+0x40>)
   80e46:	201b      	movs	r0, #27
   80e48:	4798      	blx	r3
	tc_init(TC0, FAN_PWM_TIMER_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_WAVE | TC_CMR_ACPA_SET | TC_CMR_ACPC_CLEAR | TC_CMR_CPCTRG);
   80e4a:	4620      	mov	r0, r4
   80e4c:	f44f 221c 	mov.w	r2, #638976	; 0x9c000
   80e50:	2100      	movs	r1, #0
   80e52:	4b0c      	ldr	r3, [pc, #48]	; (80e84 <fan_pwm_init+0x44>)
   80e54:	4798      	blx	r3
	tc_write_rc(TC0, FAN_PWM_TIMER_CHANNEL, rc);
   80e56:	4620      	mov	r0, r4
   80e58:	f44f 7224 	mov.w	r2, #656	; 0x290
   80e5c:	2100      	movs	r1, #0
   80e5e:	4b0a      	ldr	r3, [pc, #40]	; (80e88 <fan_pwm_init+0x48>)
   80e60:	4798      	blx	r3
	tc_write_ra(TC0, FAN_PWM_TIMER_CHANNEL, ra);
   80e62:	f44f 72a4 	mov.w	r2, #328	; 0x148
   80e66:	4620      	mov	r0, r4
   80e68:	2100      	movs	r1, #0
   80e6a:	4b08      	ldr	r3, [pc, #32]	; (80e8c <fan_pwm_init+0x4c>)
   80e6c:	4798      	blx	r3
	tc_start(TC0, FAN_PWM_TIMER_CHANNEL);
   80e6e:	4620      	mov	r0, r4
   80e70:	2100      	movs	r1, #0
   80e72:	4b07      	ldr	r3, [pc, #28]	; (80e90 <fan_pwm_init+0x50>)
   80e74:	4798      	blx	r3
}
   80e76:	2000      	movs	r0, #0
   80e78:	bd10      	pop	{r4, pc}
   80e7a:	bf00      	nop
   80e7c:	40080000 	.word	0x40080000
   80e80:	000834d5 	.word	0x000834d5
   80e84:	00085cb9 	.word	0x00085cb9
   80e88:	00085ce9 	.word	0x00085ce9
   80e8c:	00085ce1 	.word	0x00085ce1
   80e90:	00085cd9 	.word	0x00085cd9

00080e94 <fan_pwm_set_duty_cycle>:
{
   80e94:	b570      	push	{r4, r5, r6, lr}
	tc_write_rc(TC0, FAN_PWM_TIMER_CHANNEL, rc);
   80e96:	4d0c      	ldr	r5, [pc, #48]	; (80ec8 <fan_pwm_set_duty_cycle+0x34>)
{
   80e98:	4604      	mov	r4, r0
	tc_write_rc(TC0, FAN_PWM_TIMER_CHANNEL, rc);
   80e9a:	f44f 7224 	mov.w	r2, #656	; 0x290
   80e9e:	4628      	mov	r0, r5
   80ea0:	2100      	movs	r1, #0
   80ea2:	4b0a      	ldr	r3, [pc, #40]	; (80ecc <fan_pwm_set_duty_cycle+0x38>)
   80ea4:	4798      	blx	r3
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   80ea6:	f44f 7c24 	mov.w	ip, #656	; 0x290
   80eaa:	f1c4 0264 	rsb	r2, r4, #100	; 0x64
   80eae:	fb0c f202 	mul.w	r2, ip, r2
   80eb2:	4e07      	ldr	r6, [pc, #28]	; (80ed0 <fan_pwm_set_duty_cycle+0x3c>)
	tc_write_ra(TC0, FAN_PWM_TIMER_CHANNEL, ra);
   80eb4:	4628      	mov	r0, r5
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   80eb6:	fba6 4202 	umull	r4, r2, r6, r2
	tc_write_ra(TC0, FAN_PWM_TIMER_CHANNEL, ra);
   80eba:	2100      	movs	r1, #0
   80ebc:	4b05      	ldr	r3, [pc, #20]	; (80ed4 <fan_pwm_set_duty_cycle+0x40>)
   80ebe:	0952      	lsrs	r2, r2, #5
   80ec0:	4798      	blx	r3
}
   80ec2:	2000      	movs	r0, #0
   80ec4:	bd70      	pop	{r4, r5, r6, pc}
   80ec6:	bf00      	nop
   80ec8:	40080000 	.word	0x40080000
   80ecc:	00085ce9 	.word	0x00085ce9
   80ed0:	51eb851f 	.word	0x51eb851f
   80ed4:	00085ce1 	.word	0x00085ce1

00080ed8 <pgood_tick>:
	power_toggles = 0;
   80ed8:	2000      	movs	r0, #0
   80eda:	4b01      	ldr	r3, [pc, #4]	; (80ee0 <pgood_tick+0x8>)
   80edc:	7018      	strb	r0, [r3, #0]
}
   80ede:	4770      	bx	lr
   80ee0:	200714fd 	.word	0x200714fd

00080ee4 <check_power_state>:
{
   80ee4:	b538      	push	{r3, r4, r5, lr}
	if (board_get_powerstate() != last_power_state){
   80ee6:	203a      	movs	r0, #58	; 0x3a
   80ee8:	4c0c      	ldr	r4, [pc, #48]	; (80f1c <check_power_state+0x38>)
   80eea:	47a0      	blx	r4
   80eec:	3800      	subs	r0, #0
   80eee:	bf18      	it	ne
   80ef0:	2001      	movne	r0, #1
   80ef2:	4d0b      	ldr	r5, [pc, #44]	; (80f20 <check_power_state+0x3c>)
   80ef4:	782b      	ldrb	r3, [r5, #0]
   80ef6:	4298      	cmp	r0, r3
   80ef8:	d100      	bne.n	80efc <check_power_state+0x18>
}
   80efa:	bd38      	pop	{r3, r4, r5, pc}
		if (board_get_powerstate()){
   80efc:	203a      	movs	r0, #58	; 0x3a
   80efe:	47a0      	blx	r4
   80f00:	b148      	cbz	r0, 80f16 <check_power_state+0x32>
			fpga_pins(true);
   80f02:	2001      	movs	r0, #1
   80f04:	4b07      	ldr	r3, [pc, #28]	; (80f24 <check_power_state+0x40>)
   80f06:	4798      	blx	r3
		last_power_state = board_get_powerstate();
   80f08:	203a      	movs	r0, #58	; 0x3a
   80f0a:	47a0      	blx	r4
   80f0c:	3800      	subs	r0, #0
   80f0e:	bf18      	it	ne
   80f10:	2001      	movne	r0, #1
   80f12:	7028      	strb	r0, [r5, #0]
}
   80f14:	bd38      	pop	{r3, r4, r5, pc}
			fpga_pins(false);
   80f16:	4b03      	ldr	r3, [pc, #12]	; (80f24 <check_power_state+0x40>)
   80f18:	4798      	blx	r3
   80f1a:	e7f5      	b.n	80f08 <check_power_state+0x24>
   80f1c:	00083669 	.word	0x00083669
   80f20:	20070208 	.word	0x20070208
   80f24:	00080279 	.word	0x00080279

00080f28 <periodic_timer_init>:
#include "timers.h"

#define PERIODIC_TIMER_CHANNEL 1

int periodic_timer_init(void)
{
   80f28:	b538      	push	{r3, r4, r5, lr}
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80f2a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
	pmc_enable_periph_clk(ID_TC1); //ahhhhh
	
	tc_init(TC0, PERIODIC_TIMER_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_CPCTRG | TC_CMR_WAVE);
   80f2e:	4c16      	ldr	r4, [pc, #88]	; (80f88 <periodic_timer_init+0x60>)
	pmc_enable_periph_clk(ID_TC1); //ahhhhh
   80f30:	4b16      	ldr	r3, [pc, #88]	; (80f8c <periodic_timer_init+0x64>)
   80f32:	201c      	movs	r0, #28
   80f34:	4798      	blx	r3
	tc_init(TC0, PERIODIC_TIMER_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_CPCTRG | TC_CMR_WAVE);
   80f36:	4620      	mov	r0, r4
   80f38:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   80f3c:	2101      	movs	r1, #1
   80f3e:	4b14      	ldr	r3, [pc, #80]	; (80f90 <periodic_timer_init+0x68>)
   80f40:	4798      	blx	r3
	tc_write_rc(TC0, PERIODIC_TIMER_CHANNEL, sysclk_get_peripheral_bus_hz(TC0) / 2 / 4); //4 Hz
   80f42:	4a14      	ldr	r2, [pc, #80]	; (80f94 <periodic_timer_init+0x6c>)
   80f44:	4620      	mov	r0, r4
   80f46:	2101      	movs	r1, #1
   80f48:	4b13      	ldr	r3, [pc, #76]	; (80f98 <periodic_timer_init+0x70>)
   80f4a:	4798      	blx	r3
	
	tc_start(TC0, PERIODIC_TIMER_CHANNEL);
   80f4c:	4620      	mov	r0, r4
   80f4e:	2101      	movs	r1, #1
   80f50:	4b12      	ldr	r3, [pc, #72]	; (80f9c <periodic_timer_init+0x74>)
   80f52:	4798      	blx	r3
	tc_get_status(TC0, PERIODIC_TIMER_CHANNEL);
   80f54:	2101      	movs	r1, #1
   80f56:	4620      	mov	r0, r4
   80f58:	4b11      	ldr	r3, [pc, #68]	; (80fa0 <periodic_timer_init+0x78>)
   80f5a:	4798      	blx	r3
   80f5c:	4b11      	ldr	r3, [pc, #68]	; (80fa4 <periodic_timer_init+0x7c>)
   80f5e:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   80f62:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   80f66:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   80f6a:	f04f 0c80 	mov.w	ip, #128	; 0x80
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80f6e:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
	
	NVIC_DisableIRQ(TC1_IRQn);
	NVIC_ClearPendingIRQ(TC1_IRQn);
	NVIC_SetPriority(TC1_IRQn, 8);
	NVIC_EnableIRQ(TC1_IRQn);
	tc_enable_interrupt(TC0, PERIODIC_TIMER_CHANNEL, TC_IER_CPCS);
   80f72:	4620      	mov	r0, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   80f74:	f883 c31c 	strb.w	ip, [r3, #796]	; 0x31c
   80f78:	2210      	movs	r2, #16
   80f7a:	2101      	movs	r1, #1
   80f7c:	4c0a      	ldr	r4, [pc, #40]	; (80fa8 <periodic_timer_init+0x80>)
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80f7e:	601d      	str	r5, [r3, #0]
   80f80:	47a0      	blx	r4
	return 0x00;
}
   80f82:	2000      	movs	r0, #0
   80f84:	bd38      	pop	{r3, r4, r5, pc}
   80f86:	bf00      	nop
   80f88:	40080000 	.word	0x40080000
   80f8c:	000834d5 	.word	0x000834d5
   80f90:	00085cb9 	.word	0x00085cb9
   80f94:	00a037a0 	.word	0x00a037a0
   80f98:	00085ce9 	.word	0x00085ce9
   80f9c:	00085cd9 	.word	0x00085cd9
   80fa0:	00085cf9 	.word	0x00085cf9
   80fa4:	e000e100 	.word	0xe000e100
   80fa8:	00085cf1 	.word	0x00085cf1

00080fac <TC1_Handler>:

volatile uint32_t periodic_tick_div = 0;
ISR(TC1_Handler)
{
	if (tc_get_status(TC0, PERIODIC_TIMER_CHANNEL) & (TC_IER_CPCS)) {
   80fac:	2101      	movs	r1, #1
{
   80fae:	b510      	push	{r4, lr}
	if (tc_get_status(TC0, PERIODIC_TIMER_CHANNEL) & (TC_IER_CPCS)) {
   80fb0:	480c      	ldr	r0, [pc, #48]	; (80fe4 <TC1_Handler+0x38>)
   80fb2:	4b0d      	ldr	r3, [pc, #52]	; (80fe8 <TC1_Handler+0x3c>)
   80fb4:	4798      	blx	r3
   80fb6:	06c1      	lsls	r1, r0, #27
   80fb8:	d400      	bmi.n	80fbc <TC1_Handler+0x10>
		
		if (!(periodic_tick_div % 16)) {
			pgood_tick();
		}
	}
}
   80fba:	bd10      	pop	{r4, pc}
		periodic_tick_div++;
   80fbc:	4c0b      	ldr	r4, [pc, #44]	; (80fec <TC1_Handler+0x40>)
		thermals_fast_tick();
   80fbe:	4b0c      	ldr	r3, [pc, #48]	; (80ff0 <TC1_Handler+0x44>)
   80fc0:	4798      	blx	r3
		periodic_tick_div++;
   80fc2:	6823      	ldr	r3, [r4, #0]
   80fc4:	3301      	adds	r3, #1
   80fc6:	6023      	str	r3, [r4, #0]
		if (!(periodic_tick_div % 8)) {
   80fc8:	6823      	ldr	r3, [r4, #0]
   80fca:	075a      	lsls	r2, r3, #29
   80fcc:	d006      	beq.n	80fdc <TC1_Handler+0x30>
		if (!(periodic_tick_div % 16)) {
   80fce:	6823      	ldr	r3, [r4, #0]
   80fd0:	071b      	lsls	r3, r3, #28
   80fd2:	d1f2      	bne.n	80fba <TC1_Handler+0xe>
}
   80fd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			pgood_tick();
   80fd8:	4b06      	ldr	r3, [pc, #24]	; (80ff4 <TC1_Handler+0x48>)
   80fda:	4718      	bx	r3
			thermals_slow_tick();
   80fdc:	4b06      	ldr	r3, [pc, #24]	; (80ff8 <TC1_Handler+0x4c>)
   80fde:	4798      	blx	r3
   80fe0:	e7f5      	b.n	80fce <TC1_Handler+0x22>
   80fe2:	bf00      	nop
   80fe4:	40080000 	.word	0x40080000
   80fe8:	00085cf9 	.word	0x00085cf9
   80fec:	20071500 	.word	0x20071500
   80ff0:	00080dd9 	.word	0x00080dd9
   80ff4:	00080ed9 	.word	0x00080ed9
   80ff8:	00080c79 	.word	0x00080c79

00080ffc <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   80ffc:	4a02      	ldr	r2, [pc, #8]	; (81008 <udc_valid_address+0xc>)
   80ffe:	4b03      	ldr	r3, [pc, #12]	; (8100c <udc_valid_address+0x10>)
   81000:	8850      	ldrh	r0, [r2, #2]
   81002:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   81006:	4718      	bx	r3
   81008:	20072288 	.word	0x20072288
   8100c:	0008422d 	.word	0x0008422d

00081010 <udc_update_iface_desc.part.0>:
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81010:	4b15      	ldr	r3, [pc, #84]	; (81068 <udc_update_iface_desc.part.0+0x58>)
   81012:	681b      	ldr	r3, [r3, #0]
   81014:	681b      	ldr	r3, [r3, #0]
   81016:	791a      	ldrb	r2, [r3, #4]
   81018:	4282      	cmp	r2, r0
   8101a:	d922      	bls.n	81062 <udc_update_iface_desc.part.0+0x52>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
   8101c:	b430      	push	{r4, r5}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   8101e:	4c13      	ldr	r4, [pc, #76]	; (8106c <udc_update_iface_desc.part.0+0x5c>)
   81020:	6023      	str	r3, [r4, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   81022:	f8b3 c002 	ldrh.w	ip, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   81026:	449c      	add	ip, r3
	while (ptr_end_desc >
   81028:	4563      	cmp	r3, ip
   8102a:	d217      	bcs.n	8105c <udc_update_iface_desc.part.0+0x4c>
   8102c:	2500      	movs	r5, #0
   8102e:	e004      	b.n	8103a <udc_update_iface_desc.part.0+0x2a>
				udc_ptr_iface->bLength);
   81030:	781a      	ldrb	r2, [r3, #0]
   81032:	2501      	movs	r5, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   81034:	4413      	add	r3, r2
	while (ptr_end_desc >
   81036:	459c      	cmp	ip, r3
   81038:	d90c      	bls.n	81054 <udc_update_iface_desc.part.0+0x44>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   8103a:	785a      	ldrb	r2, [r3, #1]
   8103c:	2a04      	cmp	r2, #4
   8103e:	d1f7      	bne.n	81030 <udc_update_iface_desc.part.0+0x20>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   81040:	789a      	ldrb	r2, [r3, #2]
   81042:	4282      	cmp	r2, r0
   81044:	d1f4      	bne.n	81030 <udc_update_iface_desc.part.0+0x20>
   81046:	78da      	ldrb	r2, [r3, #3]
   81048:	428a      	cmp	r2, r1
   8104a:	d1f1      	bne.n	81030 <udc_update_iface_desc.part.0+0x20>
   8104c:	b105      	cbz	r5, 81050 <udc_update_iface_desc.part.0+0x40>
   8104e:	6023      	str	r3, [r4, #0]
				return true; // Interface found
   81050:	2001      	movs	r0, #1
   81052:	e001      	b.n	81058 <udc_update_iface_desc.part.0+0x48>
	return false; // Interface not found
   81054:	2000      	movs	r0, #0
   81056:	6023      	str	r3, [r4, #0]
}
   81058:	bc30      	pop	{r4, r5}
   8105a:	4770      	bx	lr
		return false;
   8105c:	2000      	movs	r0, #0
}
   8105e:	bc30      	pop	{r4, r5}
   81060:	4770      	bx	lr
		return false;
   81062:	2000      	movs	r0, #0
}
   81064:	4770      	bx	lr
   81066:	bf00      	nop
   81068:	2007150c 	.word	0x2007150c
   8106c:	20071510 	.word	0x20071510

00081070 <udc_iface_disable>:
{
   81070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (0 == udc_num_configuration) {
   81074:	4c1c      	ldr	r4, [pc, #112]	; (810e8 <udc_iface_disable+0x78>)
   81076:	7823      	ldrb	r3, [r4, #0]
   81078:	b37b      	cbz	r3, 810da <udc_iface_disable+0x6a>
   8107a:	2100      	movs	r1, #0
   8107c:	4e1b      	ldr	r6, [pc, #108]	; (810ec <udc_iface_disable+0x7c>)
   8107e:	4605      	mov	r5, r0
   81080:	47b0      	blx	r6
	if (!udc_update_iface_desc(iface_num, 0)) {
   81082:	b350      	cbz	r0, 810da <udc_iface_disable+0x6a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81084:	f8df 8068 	ldr.w	r8, [pc, #104]	; 810f0 <udc_iface_disable+0x80>
   81088:	f8d8 3000 	ldr.w	r3, [r8]
   8108c:	685b      	ldr	r3, [r3, #4]
   8108e:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81092:	68fb      	ldr	r3, [r7, #12]
   81094:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   81096:	7823      	ldrb	r3, [r4, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81098:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
   8109a:	b1f3      	cbz	r3, 810da <udc_iface_disable+0x6a>
   8109c:	4628      	mov	r0, r5
   8109e:	47b0      	blx	r6
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   810a0:	4605      	mov	r5, r0
   810a2:	b1d0      	cbz	r0, 810da <udc_iface_disable+0x6a>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   810a4:	4b13      	ldr	r3, [pc, #76]	; (810f4 <udc_iface_disable+0x84>)
			udd_ep_free(ep_desc->bEndpointAddress);
   810a6:	4e14      	ldr	r6, [pc, #80]	; (810f8 <udc_iface_disable+0x88>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   810a8:	681c      	ldr	r4, [r3, #0]
			udc_ptr_conf->desc +
   810aa:	f8d8 2000 	ldr.w	r2, [r8]
			desc->bLength);
   810ae:	7823      	ldrb	r3, [r4, #0]
			udc_ptr_conf->desc +
   810b0:	6812      	ldr	r2, [r2, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   810b2:	441c      	add	r4, r3
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   810b4:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   810b6:	441a      	add	r2, r3
	while (ptr_eof_desc > desc) {
   810b8:	42a2      	cmp	r2, r4
   810ba:	d806      	bhi.n	810ca <udc_iface_disable+0x5a>
   810bc:	e008      	b.n	810d0 <udc_iface_disable+0x60>
		if (desc_id == desc->bDescriptorType) {
   810be:	2b05      	cmp	r3, #5
   810c0:	d00f      	beq.n	810e2 <udc_iface_disable+0x72>
				desc->bLength);
   810c2:	7823      	ldrb	r3, [r4, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   810c4:	441c      	add	r4, r3
	while (ptr_eof_desc > desc) {
   810c6:	42a2      	cmp	r2, r4
   810c8:	d902      	bls.n	810d0 <udc_iface_disable+0x60>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   810ca:	7863      	ldrb	r3, [r4, #1]
   810cc:	2b04      	cmp	r3, #4
   810ce:	d1f6      	bne.n	810be <udc_iface_disable+0x4e>
	udi_api->disable();
   810d0:	687b      	ldr	r3, [r7, #4]
   810d2:	4798      	blx	r3
}
   810d4:	4628      	mov	r0, r5
   810d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   810da:	2500      	movs	r5, #0
}
   810dc:	4628      	mov	r0, r5
   810de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ep_free(ep_desc->bEndpointAddress);
   810e2:	78a0      	ldrb	r0, [r4, #2]
   810e4:	47b0      	blx	r6
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   810e6:	e7e0      	b.n	810aa <udc_iface_disable+0x3a>
   810e8:	20071509 	.word	0x20071509
   810ec:	00081011 	.word	0x00081011
   810f0:	2007150c 	.word	0x2007150c
   810f4:	20071510 	.word	0x20071510
   810f8:	00084291 	.word	0x00084291

000810fc <udc_iface_enable>:
	if (0 == udc_num_configuration) {
   810fc:	4b18      	ldr	r3, [pc, #96]	; (81160 <udc_iface_enable+0x64>)
   810fe:	781b      	ldrb	r3, [r3, #0]
   81100:	b35b      	cbz	r3, 8115a <udc_iface_enable+0x5e>
{
   81102:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81106:	4b17      	ldr	r3, [pc, #92]	; (81164 <udc_iface_enable+0x68>)
   81108:	4605      	mov	r5, r0
   8110a:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   8110c:	b310      	cbz	r0, 81154 <udc_iface_enable+0x58>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8110e:	4b16      	ldr	r3, [pc, #88]	; (81168 <udc_iface_enable+0x6c>)
   81110:	4e16      	ldr	r6, [pc, #88]	; (8116c <udc_iface_enable+0x70>)
   81112:	681c      	ldr	r4, [r3, #0]
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   81114:	4f16      	ldr	r7, [pc, #88]	; (81170 <udc_iface_enable+0x74>)
			udc_ptr_conf->desc +
   81116:	6831      	ldr	r1, [r6, #0]
			desc->bLength);
   81118:	7823      	ldrb	r3, [r4, #0]
			udc_ptr_conf->desc +
   8111a:	680a      	ldr	r2, [r1, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8111c:	441c      	add	r4, r3
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   8111e:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   81120:	441a      	add	r2, r3
	while (ptr_eof_desc > desc) {
   81122:	42a2      	cmp	r2, r4
   81124:	d806      	bhi.n	81134 <udc_iface_enable+0x38>
   81126:	e008      	b.n	8113a <udc_iface_enable+0x3e>
		if (desc_id == desc->bDescriptorType) {
   81128:	2b05      	cmp	r3, #5
   8112a:	d00d      	beq.n	81148 <udc_iface_enable+0x4c>
				desc->bLength);
   8112c:	7823      	ldrb	r3, [r4, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   8112e:	441c      	add	r4, r3
	while (ptr_eof_desc > desc) {
   81130:	42a2      	cmp	r2, r4
   81132:	d902      	bls.n	8113a <udc_iface_enable+0x3e>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   81134:	7863      	ldrb	r3, [r4, #1]
   81136:	2b04      	cmp	r3, #4
   81138:	d1f6      	bne.n	81128 <udc_iface_enable+0x2c>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   8113a:	684b      	ldr	r3, [r1, #4]
   8113c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
}
   81140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   81144:	681b      	ldr	r3, [r3, #0]
   81146:	4718      	bx	r3
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   81148:	88a2      	ldrh	r2, [r4, #4]
   8114a:	78e1      	ldrb	r1, [r4, #3]
   8114c:	78a0      	ldrb	r0, [r4, #2]
   8114e:	47b8      	blx	r7
   81150:	2800      	cmp	r0, #0
   81152:	d1e0      	bne.n	81116 <udc_iface_enable+0x1a>
}
   81154:	2000      	movs	r0, #0
   81156:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8115a:	2000      	movs	r0, #0
   8115c:	4770      	bx	lr
   8115e:	bf00      	nop
   81160:	20071509 	.word	0x20071509
   81164:	00081011 	.word	0x00081011
   81168:	20071510 	.word	0x20071510
   8116c:	2007150c 	.word	0x2007150c
   81170:	000845dd 	.word	0x000845dd

00081174 <udc_get_interface_desc>:
	return udc_ptr_iface;
   81174:	4b01      	ldr	r3, [pc, #4]	; (8117c <udc_get_interface_desc+0x8>)
}
   81176:	6818      	ldr	r0, [r3, #0]
   81178:	4770      	bx	lr
   8117a:	bf00      	nop
   8117c:	20071510 	.word	0x20071510

00081180 <udc_start>:
	udd_enable();
   81180:	4b00      	ldr	r3, [pc, #0]	; (81184 <udc_start+0x4>)
   81182:	4718      	bx	r3
   81184:	00083f89 	.word	0x00083f89

00081188 <udc_reset>:
{
   81188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (udc_num_configuration) {
   8118a:	4f0c      	ldr	r7, [pc, #48]	; (811bc <udc_reset+0x34>)
   8118c:	783b      	ldrb	r3, [r7, #0]
   8118e:	b17b      	cbz	r3, 811b0 <udc_reset+0x28>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81190:	4d0b      	ldr	r5, [pc, #44]	; (811c0 <udc_reset+0x38>)
   81192:	682b      	ldr	r3, [r5, #0]
   81194:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   81196:	791b      	ldrb	r3, [r3, #4]
   81198:	b153      	cbz	r3, 811b0 <udc_reset+0x28>
   8119a:	2400      	movs	r4, #0
   8119c:	4620      	mov	r0, r4
   8119e:	4e09      	ldr	r6, [pc, #36]	; (811c4 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   811a0:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   811a2:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
   811a4:	3401      	adds	r4, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   811a6:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   811a8:	b2e0      	uxtb	r0, r4
   811aa:	791b      	ldrb	r3, [r3, #4]
   811ac:	4283      	cmp	r3, r0
   811ae:	d8f7      	bhi.n	811a0 <udc_reset+0x18>
	udc_num_configuration = 0;
   811b0:	2300      	movs	r3, #0
	udc_device_status =
   811b2:	4a05      	ldr	r2, [pc, #20]	; (811c8 <udc_reset+0x40>)
	udc_num_configuration = 0;
   811b4:	703b      	strb	r3, [r7, #0]
	udc_device_status =
   811b6:	8013      	strh	r3, [r2, #0]
}
   811b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   811ba:	bf00      	nop
   811bc:	20071509 	.word	0x20071509
   811c0:	2007150c 	.word	0x2007150c
   811c4:	00081071 	.word	0x00081071
   811c8:	20071504 	.word	0x20071504

000811cc <udc_sof_notify>:
{
   811cc:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   811ce:	4b0c      	ldr	r3, [pc, #48]	; (81200 <udc_sof_notify+0x34>)
   811d0:	781b      	ldrb	r3, [r3, #0]
   811d2:	b19b      	cbz	r3, 811fc <udc_sof_notify+0x30>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   811d4:	4d0b      	ldr	r5, [pc, #44]	; (81204 <udc_sof_notify+0x38>)
   811d6:	682b      	ldr	r3, [r5, #0]
   811d8:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   811da:	7912      	ldrb	r2, [r2, #4]
   811dc:	b172      	cbz	r2, 811fc <udc_sof_notify+0x30>
   811de:	2400      	movs	r4, #0
   811e0:	4622      	mov	r2, r4
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   811e2:	685b      	ldr	r3, [r3, #4]
		for (iface_num = 0;
   811e4:	3401      	adds	r4, #1
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   811e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   811ea:	691b      	ldr	r3, [r3, #16]
   811ec:	b103      	cbz	r3, 811f0 <udc_sof_notify+0x24>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   811ee:	4798      	blx	r3
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   811f0:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
   811f2:	b2e2      	uxtb	r2, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   811f4:	6819      	ldr	r1, [r3, #0]
		for (iface_num = 0;
   811f6:	7909      	ldrb	r1, [r1, #4]
   811f8:	4291      	cmp	r1, r2
   811fa:	d8f2      	bhi.n	811e2 <udc_sof_notify+0x16>
}
   811fc:	bd38      	pop	{r3, r4, r5, pc}
   811fe:	bf00      	nop
   81200:	20071509 	.word	0x20071509
   81204:	2007150c 	.word	0x2007150c

00081208 <udc_process_setup>:
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   81208:	2300      	movs	r3, #0
{
   8120a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	udd_g_ctrlreq.payload_size = 0;
   8120e:	4c8b      	ldr	r4, [pc, #556]	; (8143c <udc_process_setup+0x234>)
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   81210:	8822      	ldrh	r2, [r4, #0]
	udd_g_ctrlreq.over_under_run = NULL;
   81212:	e9c4 3304 	strd	r3, r3, [r4, #16]
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   81216:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
	udd_g_ctrlreq.payload_size = 0;
   8121a:	81a3      	strh	r3, [r4, #12]
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   8121c:	f000 80d0 	beq.w	813c0 <udc_process_setup+0x1b8>
#endif
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
		return true;
	}

	if (Udd_setup_is_in()) {
   81220:	f994 2000 	ldrsb.w	r2, [r4]
   81224:	7823      	ldrb	r3, [r4, #0]
   81226:	2a00      	cmp	r2, #0
   81228:	db0e      	blt.n	81248 <udc_process_setup+0x40>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8122a:	f013 0f60 	tst.w	r3, #96	; 0x60
   8122e:	d079      	beq.n	81324 <udc_process_setup+0x11c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   81230:	f013 0f1e 	tst.w	r3, #30
   81234:	d040      	beq.n	812b8 <udc_process_setup+0xb0>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   81236:	f003 031f 	and.w	r3, r3, #31
   8123a:	2b02      	cmp	r3, #2
   8123c:	f000 80b6 	beq.w	813ac <udc_process_setup+0x1a4>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   81240:	2500      	movs	r5, #0
#endif
}
   81242:	4628      	mov	r0, r5
   81244:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
   81248:	88e5      	ldrh	r5, [r4, #6]
   8124a:	2d00      	cmp	r5, #0
   8124c:	d0f8      	beq.n	81240 <udc_process_setup+0x38>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8124e:	f013 0f60 	tst.w	r3, #96	; 0x60
   81252:	d1ed      	bne.n	81230 <udc_process_setup+0x28>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   81254:	f013 021f 	ands.w	r2, r3, #31
   81258:	f000 8165 	beq.w	81526 <udc_process_setup+0x31e>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8125c:	2a01      	cmp	r2, #1
   8125e:	f040 80ba 	bne.w	813d6 <udc_process_setup+0x1ce>
			switch (udd_g_ctrlreq.req.bRequest) {
   81262:	7862      	ldrb	r2, [r4, #1]
   81264:	2a0a      	cmp	r2, #10
   81266:	d124      	bne.n	812b2 <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wLength != 1) {
   81268:	2d01      	cmp	r5, #1
   8126a:	d122      	bne.n	812b2 <udc_process_setup+0xaa>
	if (!udc_num_configuration) {
   8126c:	4a74      	ldr	r2, [pc, #464]	; (81440 <udc_process_setup+0x238>)
   8126e:	7812      	ldrb	r2, [r2, #0]
   81270:	b1fa      	cbz	r2, 812b2 <udc_process_setup+0xaa>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81272:	4a74      	ldr	r2, [pc, #464]	; (81444 <udc_process_setup+0x23c>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81274:	7926      	ldrb	r6, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81276:	6817      	ldr	r7, [r2, #0]
   81278:	683a      	ldr	r2, [r7, #0]
   8127a:	7912      	ldrb	r2, [r2, #4]
   8127c:	42b2      	cmp	r2, r6
   8127e:	d918      	bls.n	812b2 <udc_process_setup+0xaa>
	if (0 == udc_num_configuration) {
   81280:	2100      	movs	r1, #0
   81282:	4630      	mov	r0, r6
   81284:	4b70      	ldr	r3, [pc, #448]	; (81448 <udc_process_setup+0x240>)
   81286:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, 0)) {
   81288:	4605      	mov	r5, r0
   8128a:	2800      	cmp	r0, #0
   8128c:	f000 80c6 	beq.w	8141c <udc_process_setup+0x214>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81290:	687b      	ldr	r3, [r7, #4]
	udc_iface_setting = udi_api->getsetting();
   81292:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   81296:	68db      	ldr	r3, [r3, #12]
   81298:	4798      	blx	r3
   8129a:	4602      	mov	r2, r0
   8129c:	486b      	ldr	r0, [pc, #428]	; (8144c <udc_process_setup+0x244>)
	udd_set_setup_payload(&udc_iface_setting,1);
   8129e:	2101      	movs	r1, #1
   812a0:	4b6b      	ldr	r3, [pc, #428]	; (81450 <udc_process_setup+0x248>)
	udc_iface_setting = udi_api->getsetting();
   812a2:	7002      	strb	r2, [r0, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   812a4:	4798      	blx	r3
	return true;
   812a6:	e7cc      	b.n	81242 <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   812a8:	2a01      	cmp	r2, #1
   812aa:	f000 814d 	beq.w	81548 <udc_process_setup+0x340>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   812ae:	2a02      	cmp	r2, #2
   812b0:	d06c      	beq.n	8138c <udc_process_setup+0x184>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   812b2:	f013 0f1e 	tst.w	r3, #30
   812b6:	d1c3      	bne.n	81240 <udc_process_setup+0x38>
		if (udd_g_ctrlreq.req.wIndex == 2) {
   812b8:	88a3      	ldrh	r3, [r4, #4]
	if (0 == udc_num_configuration) {
   812ba:	4e61      	ldr	r6, [pc, #388]	; (81440 <udc_process_setup+0x238>)
		if (udd_g_ctrlreq.req.wIndex == 2) {
   812bc:	2b02      	cmp	r3, #2
			udd_g_ctrlreq.req.wIndex = 1;
   812be:	bf04      	itt	eq
   812c0:	2301      	moveq	r3, #1
   812c2:	80a3      	strheq	r3, [r4, #4]
	if (0 == udc_num_configuration) {
   812c4:	7833      	ldrb	r3, [r6, #0]
   812c6:	2b00      	cmp	r3, #0
   812c8:	d0ba      	beq.n	81240 <udc_process_setup+0x38>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   812ca:	4f5e      	ldr	r7, [pc, #376]	; (81444 <udc_process_setup+0x23c>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   812cc:	f894 8004 	ldrb.w	r8, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   812d0:	683d      	ldr	r5, [r7, #0]
   812d2:	682b      	ldr	r3, [r5, #0]
   812d4:	791b      	ldrb	r3, [r3, #4]
   812d6:	4598      	cmp	r8, r3
   812d8:	d340      	bcc.n	8135c <udc_process_setup+0x154>
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   812da:	7822      	ldrb	r2, [r4, #0]
   812dc:	f002 021f 	and.w	r2, r2, #31
   812e0:	2a02      	cmp	r2, #2
   812e2:	d1ad      	bne.n	81240 <udc_process_setup+0x38>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   812e4:	2b00      	cmp	r3, #0
   812e6:	d0ab      	beq.n	81240 <udc_process_setup+0x38>
   812e8:	2400      	movs	r4, #0
   812ea:	46a0      	mov	r8, r4
   812ec:	f8df 9158 	ldr.w	r9, [pc, #344]	; 81448 <udc_process_setup+0x240>
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   812f0:	686b      	ldr	r3, [r5, #4]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   812f2:	3401      	adds	r4, #1
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   812f4:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   812f8:	68eb      	ldr	r3, [r5, #12]
   812fa:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   812fc:	7833      	ldrb	r3, [r6, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   812fe:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
   81300:	2b00      	cmp	r3, #0
   81302:	d09d      	beq.n	81240 <udc_process_setup+0x38>
   81304:	4640      	mov	r0, r8
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81306:	fa5f f884 	uxtb.w	r8, r4
   8130a:	47c8      	blx	r9
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8130c:	2800      	cmp	r0, #0
   8130e:	d097      	beq.n	81240 <udc_process_setup+0x38>
		if (udi_api->setup()) {
   81310:	68ab      	ldr	r3, [r5, #8]
   81312:	4798      	blx	r3
   81314:	2800      	cmp	r0, #0
   81316:	d137      	bne.n	81388 <udc_process_setup+0x180>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81318:	683d      	ldr	r5, [r7, #0]
   8131a:	682b      	ldr	r3, [r5, #0]
   8131c:	791b      	ldrb	r3, [r3, #4]
   8131e:	4543      	cmp	r3, r8
   81320:	d8e6      	bhi.n	812f0 <udc_process_setup+0xe8>
   81322:	e78d      	b.n	81240 <udc_process_setup+0x38>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   81324:	f013 021f 	ands.w	r2, r3, #31
   81328:	d1be      	bne.n	812a8 <udc_process_setup+0xa0>
			switch (udd_g_ctrlreq.req.bRequest) {
   8132a:	7862      	ldrb	r2, [r4, #1]
   8132c:	3a01      	subs	r2, #1
   8132e:	2a08      	cmp	r2, #8
   81330:	d8bf      	bhi.n	812b2 <udc_process_setup+0xaa>
   81332:	a101      	add	r1, pc, #4	; (adr r1, 81338 <udc_process_setup+0x130>)
   81334:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   81338:	00081421 	.word	0x00081421
   8133c:	000812b3 	.word	0x000812b3
   81340:	000813fd 	.word	0x000813fd
   81344:	000812b3 	.word	0x000812b3
   81348:	00081517 	.word	0x00081517
   8134c:	000812b3 	.word	0x000812b3
   81350:	000812b3 	.word	0x000812b3
   81354:	000812b3 	.word	0x000812b3
   81358:	00081469 	.word	0x00081469
	if (0 == udc_num_configuration) {
   8135c:	2100      	movs	r1, #0
   8135e:	4640      	mov	r0, r8
   81360:	4f39      	ldr	r7, [pc, #228]	; (81448 <udc_process_setup+0x240>)
   81362:	47b8      	blx	r7
	if (!udc_update_iface_desc(iface_num, 0)) {
   81364:	2800      	cmp	r0, #0
   81366:	d034      	beq.n	813d2 <udc_process_setup+0x1ca>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81368:	686b      	ldr	r3, [r5, #4]
   8136a:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8136e:	68eb      	ldr	r3, [r5, #12]
   81370:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   81372:	7833      	ldrb	r3, [r6, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81374:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
   81376:	2b00      	cmp	r3, #0
   81378:	f43f af62 	beq.w	81240 <udc_process_setup+0x38>
   8137c:	4640      	mov	r0, r8
   8137e:	47b8      	blx	r7
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81380:	b338      	cbz	r0, 813d2 <udc_process_setup+0x1ca>
	return udi_api->setup();
   81382:	68ab      	ldr	r3, [r5, #8]
   81384:	4798      	blx	r3
		if (udc_req_iface()) {
   81386:	b320      	cbz	r0, 813d2 <udc_process_setup+0x1ca>
			return true;
   81388:	2501      	movs	r5, #1
   8138a:	e75a      	b.n	81242 <udc_process_setup+0x3a>
			switch (udd_g_ctrlreq.req.bRequest) {
   8138c:	7862      	ldrb	r2, [r4, #1]
   8138e:	2a01      	cmp	r2, #1
   81390:	f000 80f7 	beq.w	81582 <udc_process_setup+0x37a>
   81394:	2a03      	cmp	r2, #3
   81396:	d106      	bne.n	813a6 <udc_process_setup+0x19e>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   81398:	88e2      	ldrh	r2, [r4, #6]
   8139a:	8861      	ldrh	r1, [r4, #2]
   8139c:	430a      	orrs	r2, r1
   8139e:	b292      	uxth	r2, r2
   813a0:	2a00      	cmp	r2, #0
   813a2:	f000 81c1 	beq.w	81728 <udc_process_setup+0x520>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   813a6:	f013 0f1e 	tst.w	r3, #30
   813aa:	d085      	beq.n	812b8 <udc_process_setup+0xb0>
	if (0 == udc_num_configuration) {
   813ac:	4e24      	ldr	r6, [pc, #144]	; (81440 <udc_process_setup+0x238>)
   813ae:	7833      	ldrb	r3, [r6, #0]
   813b0:	2b00      	cmp	r3, #0
   813b2:	f43f af45 	beq.w	81240 <udc_process_setup+0x38>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   813b6:	4f23      	ldr	r7, [pc, #140]	; (81444 <udc_process_setup+0x23c>)
   813b8:	683d      	ldr	r5, [r7, #0]
   813ba:	682b      	ldr	r3, [r5, #0]
   813bc:	791b      	ldrb	r3, [r3, #4]
   813be:	e791      	b.n	812e4 <udc_process_setup+0xdc>
		return true;
   813c0:	2501      	movs	r5, #1
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
   813c2:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   813c6:	4823      	ldr	r0, [pc, #140]	; (81454 <udc_process_setup+0x24c>)
   813c8:	4b21      	ldr	r3, [pc, #132]	; (81450 <udc_process_setup+0x248>)
   813ca:	4798      	blx	r3
}
   813cc:	4628      	mov	r0, r5
   813ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   813d2:	7823      	ldrb	r3, [r4, #0]
   813d4:	e72f      	b.n	81236 <udc_process_setup+0x2e>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   813d6:	2a02      	cmp	r2, #2
   813d8:	f47f af6b 	bne.w	812b2 <udc_process_setup+0xaa>
			switch (udd_g_ctrlreq.req.bRequest) {
   813dc:	7862      	ldrb	r2, [r4, #1]
   813de:	2a00      	cmp	r2, #0
   813e0:	d1e1      	bne.n	813a6 <udc_process_setup+0x19e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   813e2:	2d02      	cmp	r5, #2
   813e4:	d1df      	bne.n	813a6 <udc_process_setup+0x19e>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   813e6:	7920      	ldrb	r0, [r4, #4]
   813e8:	4b1b      	ldr	r3, [pc, #108]	; (81458 <udc_process_setup+0x250>)
   813ea:	4798      	blx	r3
   813ec:	4602      	mov	r2, r0
   813ee:	481b      	ldr	r0, [pc, #108]	; (8145c <udc_process_setup+0x254>)
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   813f0:	4629      	mov	r1, r5
   813f2:	4b17      	ldr	r3, [pc, #92]	; (81450 <udc_process_setup+0x248>)
			return true;
   813f4:	2501      	movs	r5, #1
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   813f6:	8002      	strh	r2, [r0, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   813f8:	4798      	blx	r3
	return true;
   813fa:	e722      	b.n	81242 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
   813fc:	88e2      	ldrh	r2, [r4, #6]
   813fe:	2a00      	cmp	r2, #0
   81400:	f47f af57 	bne.w	812b2 <udc_process_setup+0xaa>
	switch (udd_g_ctrlreq.req.wValue) {
   81404:	8862      	ldrh	r2, [r4, #2]
   81406:	2a02      	cmp	r2, #2
   81408:	f47f af53 	bne.w	812b2 <udc_process_setup+0xaa>
		if (!udd_is_high_speed()) {
   8140c:	4b14      	ldr	r3, [pc, #80]	; (81460 <udc_process_setup+0x258>)
   8140e:	4798      	blx	r3
   81410:	4605      	mov	r5, r0
   81412:	b118      	cbz	r0, 8141c <udc_process_setup+0x214>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   81414:	7923      	ldrb	r3, [r4, #4]
   81416:	2b00      	cmp	r3, #0
   81418:	f000 81bb 	beq.w	81792 <udc_process_setup+0x58a>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   8141c:	7823      	ldrb	r3, [r4, #0]
   8141e:	e707      	b.n	81230 <udc_process_setup+0x28>
	if (udd_g_ctrlreq.req.wLength) {
   81420:	88e2      	ldrh	r2, [r4, #6]
   81422:	2a00      	cmp	r2, #0
   81424:	f47f af45 	bne.w	812b2 <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   81428:	8865      	ldrh	r5, [r4, #2]
   8142a:	2d01      	cmp	r5, #1
   8142c:	f47f af41 	bne.w	812b2 <udc_process_setup+0xaa>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   81430:	4a0c      	ldr	r2, [pc, #48]	; (81464 <udc_process_setup+0x25c>)
   81432:	8813      	ldrh	r3, [r2, #0]
   81434:	f023 0302 	bic.w	r3, r3, #2
   81438:	8013      	strh	r3, [r2, #0]
		return true;
   8143a:	e702      	b.n	81242 <udc_process_setup+0x3a>
   8143c:	20072288 	.word	0x20072288
   81440:	20071509 	.word	0x20071509
   81444:	2007150c 	.word	0x2007150c
   81448:	00081011 	.word	0x00081011
   8144c:	20071508 	.word	0x20071508
   81450:	00084285 	.word	0x00084285
   81454:	20070230 	.word	0x20070230
   81458:	000842e9 	.word	0x000842e9
   8145c:	20071506 	.word	0x20071506
   81460:	00084219 	.word	0x00084219
   81464:	20071504 	.word	0x20071504
	if (udd_g_ctrlreq.req.wLength) {
   81468:	88e2      	ldrh	r2, [r4, #6]
   8146a:	2a00      	cmp	r2, #0
   8146c:	f47f af21 	bne.w	812b2 <udc_process_setup+0xaa>
	if (!udd_getaddress()) {
   81470:	4b9c      	ldr	r3, [pc, #624]	; (816e4 <udc_process_setup+0x4dc>)
   81472:	4798      	blx	r3
   81474:	2800      	cmp	r0, #0
   81476:	d0d1      	beq.n	8141c <udc_process_setup+0x214>
	if (udd_is_high_speed()) {
   81478:	f8df 926c 	ldr.w	r9, [pc, #620]	; 816e8 <udc_process_setup+0x4e0>
   8147c:	47c8      	blx	r9
				udc_config.confdev_hs->bNumConfigurations) {
   8147e:	f8df a26c 	ldr.w	sl, [pc, #620]	; 816ec <udc_process_setup+0x4e4>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81482:	78a3      	ldrb	r3, [r4, #2]
	if (udd_is_high_speed()) {
   81484:	2800      	cmp	r0, #0
   81486:	f000 8125 	beq.w	816d4 <udc_process_setup+0x4cc>
				udc_config.confdev_hs->bNumConfigurations) {
   8148a:	f8da 2008 	ldr.w	r2, [sl, #8]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   8148e:	7c52      	ldrb	r2, [r2, #17]
   81490:	429a      	cmp	r2, r3
   81492:	d3c3      	bcc.n	8141c <udc_process_setup+0x214>
	if (udc_num_configuration) {
   81494:	4e96      	ldr	r6, [pc, #600]	; (816f0 <udc_process_setup+0x4e8>)
   81496:	7833      	ldrb	r3, [r6, #0]
   81498:	b183      	cbz	r3, 814bc <udc_process_setup+0x2b4>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8149a:	4f96      	ldr	r7, [pc, #600]	; (816f4 <udc_process_setup+0x4ec>)
   8149c:	683b      	ldr	r3, [r7, #0]
   8149e:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   814a0:	791b      	ldrb	r3, [r3, #4]
   814a2:	b15b      	cbz	r3, 814bc <udc_process_setup+0x2b4>
   814a4:	2500      	movs	r5, #0
   814a6:	4628      	mov	r0, r5
   814a8:	f8df 824c 	ldr.w	r8, [pc, #588]	; 816f8 <udc_process_setup+0x4f0>
			udc_iface_disable(iface_num);
   814ac:	47c0      	blx	r8
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   814ae:	683b      	ldr	r3, [r7, #0]
		for (iface_num = 0;
   814b0:	3501      	adds	r5, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   814b2:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   814b4:	b2e8      	uxtb	r0, r5
   814b6:	791b      	ldrb	r3, [r3, #4]
   814b8:	4283      	cmp	r3, r0
   814ba:	d8f7      	bhi.n	814ac <udc_process_setup+0x2a4>
	udc_device_status =
   814bc:	2200      	movs	r2, #0
   814be:	4b8f      	ldr	r3, [pc, #572]	; (816fc <udc_process_setup+0x4f4>)
   814c0:	801a      	strh	r2, [r3, #0]
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   814c2:	78a3      	ldrb	r3, [r4, #2]
   814c4:	7033      	strb	r3, [r6, #0]
	if (udc_num_configuration == 0) {
   814c6:	2b00      	cmp	r3, #0
   814c8:	f43f af5e 	beq.w	81388 <udc_process_setup+0x180>
	if (udd_is_high_speed()) {
   814cc:	47c8      	blx	r9
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   814ce:	7832      	ldrb	r2, [r6, #0]
	if (udd_is_high_speed()) {
   814d0:	2800      	cmp	r0, #0
   814d2:	f000 8133 	beq.w	8173c <udc_process_setup+0x534>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   814d6:	f8da 3010 	ldr.w	r3, [sl, #16]
   814da:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   814de:	3a01      	subs	r2, #1
   814e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   814e4:	681a      	ldr	r2, [r3, #0]
   814e6:	4f83      	ldr	r7, [pc, #524]	; (816f4 <udc_process_setup+0x4ec>)
   814e8:	7912      	ldrb	r2, [r2, #4]
   814ea:	603b      	str	r3, [r7, #0]
   814ec:	2a00      	cmp	r2, #0
   814ee:	f43f af4b 	beq.w	81388 <udc_process_setup+0x180>
   814f2:	2500      	movs	r5, #0
   814f4:	4e82      	ldr	r6, [pc, #520]	; (81700 <udc_process_setup+0x4f8>)
   814f6:	462b      	mov	r3, r5
   814f8:	e005      	b.n	81506 <udc_process_setup+0x2fe>
   814fa:	683a      	ldr	r2, [r7, #0]
   814fc:	6812      	ldr	r2, [r2, #0]
   814fe:	7912      	ldrb	r2, [r2, #4]
   81500:	429a      	cmp	r2, r3
   81502:	f67f af41 	bls.w	81388 <udc_process_setup+0x180>
		if (!udc_iface_enable(iface_num, 0)) {
   81506:	4618      	mov	r0, r3
   81508:	2100      	movs	r1, #0
   8150a:	47b0      	blx	r6
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8150c:	3501      	adds	r5, #1
   8150e:	b2eb      	uxtb	r3, r5
		if (!udc_iface_enable(iface_num, 0)) {
   81510:	2800      	cmp	r0, #0
   81512:	d1f2      	bne.n	814fa <udc_process_setup+0x2f2>
   81514:	e782      	b.n	8141c <udc_process_setup+0x214>
	if (udd_g_ctrlreq.req.wLength) {
   81516:	88e2      	ldrh	r2, [r4, #6]
   81518:	2a00      	cmp	r2, #0
   8151a:	f47f aeca 	bne.w	812b2 <udc_process_setup+0xaa>
	udd_g_ctrlreq.callback = udc_valid_address;
   8151e:	4b79      	ldr	r3, [pc, #484]	; (81704 <udc_process_setup+0x4fc>)
			return true;
   81520:	2501      	movs	r5, #1
	udd_g_ctrlreq.callback = udc_valid_address;
   81522:	6123      	str	r3, [r4, #16]
	return true;
   81524:	e68d      	b.n	81242 <udc_process_setup+0x3a>
			switch (udd_g_ctrlreq.req.bRequest) {
   81526:	7862      	ldrb	r2, [r4, #1]
   81528:	2a06      	cmp	r2, #6
   8152a:	d040      	beq.n	815ae <udc_process_setup+0x3a6>
   8152c:	2a08      	cmp	r2, #8
   8152e:	d036      	beq.n	8159e <udc_process_setup+0x396>
   81530:	2a00      	cmp	r2, #0
   81532:	f47f aebe 	bne.w	812b2 <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   81536:	2d02      	cmp	r5, #2
   81538:	f47f aebb 	bne.w	812b2 <udc_process_setup+0xaa>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   8153c:	4629      	mov	r1, r5
   8153e:	486f      	ldr	r0, [pc, #444]	; (816fc <udc_process_setup+0x4f4>)
   81540:	4b71      	ldr	r3, [pc, #452]	; (81708 <udc_process_setup+0x500>)
   81542:	4798      	blx	r3
			return true;
   81544:	2501      	movs	r5, #1
   81546:	e67c      	b.n	81242 <udc_process_setup+0x3a>
			switch (udd_g_ctrlreq.req.bRequest) {
   81548:	7862      	ldrb	r2, [r4, #1]
   8154a:	2a0b      	cmp	r2, #11
   8154c:	f47f aeb1 	bne.w	812b2 <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wLength) {
   81550:	88e2      	ldrh	r2, [r4, #6]
   81552:	2a00      	cmp	r2, #0
   81554:	f47f aead 	bne.w	812b2 <udc_process_setup+0xaa>
	if (!udc_num_configuration) {
   81558:	4a65      	ldr	r2, [pc, #404]	; (816f0 <udc_process_setup+0x4e8>)
   8155a:	7812      	ldrb	r2, [r2, #0]
   8155c:	2a00      	cmp	r2, #0
   8155e:	f43f aea8 	beq.w	812b2 <udc_process_setup+0xaa>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81562:	7925      	ldrb	r5, [r4, #4]
	if (!udc_iface_disable(iface_num)) {
   81564:	4b64      	ldr	r3, [pc, #400]	; (816f8 <udc_process_setup+0x4f0>)
   81566:	4628      	mov	r0, r5
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   81568:	8866      	ldrh	r6, [r4, #2]
	if (!udc_iface_disable(iface_num)) {
   8156a:	4798      	blx	r3
   8156c:	2800      	cmp	r0, #0
   8156e:	f43f af55 	beq.w	8141c <udc_process_setup+0x214>
	return udc_iface_enable(iface_num, setting_num);
   81572:	4628      	mov	r0, r5
   81574:	4b62      	ldr	r3, [pc, #392]	; (81700 <udc_process_setup+0x4f8>)
   81576:	b2f1      	uxtb	r1, r6
   81578:	4798      	blx	r3
		if (udc_reqstd()) {
   8157a:	2800      	cmp	r0, #0
   8157c:	f47f af04 	bne.w	81388 <udc_process_setup+0x180>
   81580:	e74c      	b.n	8141c <udc_process_setup+0x214>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   81582:	88e2      	ldrh	r2, [r4, #6]
   81584:	8861      	ldrh	r1, [r4, #2]
   81586:	430a      	orrs	r2, r1
   81588:	b292      	uxth	r2, r2
   8158a:	2a00      	cmp	r2, #0
   8158c:	f47f af0b 	bne.w	813a6 <udc_process_setup+0x19e>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   81590:	7920      	ldrb	r0, [r4, #4]
   81592:	4b5e      	ldr	r3, [pc, #376]	; (8170c <udc_process_setup+0x504>)
   81594:	4798      	blx	r3
		if (udc_reqstd()) {
   81596:	2800      	cmp	r0, #0
   81598:	f47f aef6 	bne.w	81388 <udc_process_setup+0x180>
   8159c:	e73e      	b.n	8141c <udc_process_setup+0x214>
	if (udd_g_ctrlreq.req.wLength != 1) {
   8159e:	2d01      	cmp	r5, #1
   815a0:	f47f ae87 	bne.w	812b2 <udc_process_setup+0xaa>
	udd_set_setup_payload(&udc_num_configuration,1);
   815a4:	4629      	mov	r1, r5
   815a6:	4852      	ldr	r0, [pc, #328]	; (816f0 <udc_process_setup+0x4e8>)
   815a8:	4b57      	ldr	r3, [pc, #348]	; (81708 <udc_process_setup+0x500>)
   815aa:	4798      	blx	r3
	return true;
   815ac:	e649      	b.n	81242 <udc_process_setup+0x3a>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   815ae:	8861      	ldrh	r1, [r4, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   815b0:	0a0a      	lsrs	r2, r1, #8
   815b2:	3a01      	subs	r2, #1
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   815b4:	b2cd      	uxtb	r5, r1
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   815b6:	2a0e      	cmp	r2, #14
   815b8:	f63f ae3a 	bhi.w	81230 <udc_process_setup+0x28>
   815bc:	a101      	add	r1, pc, #4	; (adr r1, 815c4 <udc_process_setup+0x3bc>)
   815be:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   815c2:	bf00      	nop
   815c4:	00081679 	.word	0x00081679
   815c8:	0008164f 	.word	0x0008164f
   815cc:	0008168d 	.word	0x0008168d
   815d0:	00081231 	.word	0x00081231
   815d4:	00081231 	.word	0x00081231
   815d8:	00081643 	.word	0x00081643
   815dc:	00081619 	.word	0x00081619
   815e0:	00081231 	.word	0x00081231
   815e4:	00081231 	.word	0x00081231
   815e8:	00081231 	.word	0x00081231
   815ec:	00081231 	.word	0x00081231
   815f0:	00081231 	.word	0x00081231
   815f4:	00081231 	.word	0x00081231
   815f8:	00081231 	.word	0x00081231
   815fc:	00081601 	.word	0x00081601
		udd_set_setup_payload( (uint8_t *) &MS_BOS_PACKET,
   81600:	2121      	movs	r1, #33	; 0x21
   81602:	4843      	ldr	r0, [pc, #268]	; (81710 <udc_process_setup+0x508>)
   81604:	4b40      	ldr	r3, [pc, #256]	; (81708 <udc_process_setup+0x500>)
   81606:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   81608:	88e3      	ldrh	r3, [r4, #6]
   8160a:	89a2      	ldrh	r2, [r4, #12]
   8160c:	429a      	cmp	r2, r3
   8160e:	f67f aebb 	bls.w	81388 <udc_process_setup+0x180>
			return true;
   81612:	2501      	movs	r5, #1
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   81614:	81a3      	strh	r3, [r4, #12]
   81616:	e614      	b.n	81242 <udc_process_setup+0x3a>
		if (!udd_is_high_speed()) {
   81618:	4b33      	ldr	r3, [pc, #204]	; (816e8 <udc_process_setup+0x4e0>)
   8161a:	4798      	blx	r3
			if (conf_num >= udc_config.confdev_hs->
   8161c:	4b33      	ldr	r3, [pc, #204]	; (816ec <udc_process_setup+0x4e4>)
		if (!udd_is_high_speed()) {
   8161e:	2800      	cmp	r0, #0
   81620:	f040 8094 	bne.w	8174c <udc_process_setup+0x544>
			if (conf_num >= udc_config.confdev_hs->
   81624:	689a      	ldr	r2, [r3, #8]
   81626:	7c52      	ldrb	r2, [r2, #17]
   81628:	42aa      	cmp	r2, r5
   8162a:	f67f aef7 	bls.w	8141c <udc_process_setup+0x214>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   8162e:	691a      	ldr	r2, [r3, #16]
			udd_set_setup_payload(
   81630:	4b35      	ldr	r3, [pc, #212]	; (81708 <udc_process_setup+0x500>)
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81632:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   81636:	8841      	ldrh	r1, [r0, #2]
   81638:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8163a:	2207      	movs	r2, #7
   8163c:	68a3      	ldr	r3, [r4, #8]
   8163e:	705a      	strb	r2, [r3, #1]
		break;
   81640:	e7e2      	b.n	81608 <udc_process_setup+0x400>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   81642:	4a2a      	ldr	r2, [pc, #168]	; (816ec <udc_process_setup+0x4e4>)
   81644:	4b30      	ldr	r3, [pc, #192]	; (81708 <udc_process_setup+0x500>)
   81646:	68d0      	ldr	r0, [r2, #12]
   81648:	7801      	ldrb	r1, [r0, #0]
   8164a:	4798      	blx	r3
		break;
   8164c:	e7dc      	b.n	81608 <udc_process_setup+0x400>
		if (udd_is_high_speed()) {
   8164e:	4b26      	ldr	r3, [pc, #152]	; (816e8 <udc_process_setup+0x4e0>)
   81650:	4798      	blx	r3
			if (conf_num >= udc_config.confdev_hs->
   81652:	4b26      	ldr	r3, [pc, #152]	; (816ec <udc_process_setup+0x4e4>)
		if (udd_is_high_speed()) {
   81654:	2800      	cmp	r0, #0
   81656:	f000 8090 	beq.w	8177a <udc_process_setup+0x572>
			if (conf_num >= udc_config.confdev_hs->
   8165a:	689a      	ldr	r2, [r3, #8]
   8165c:	7c52      	ldrb	r2, [r2, #17]
   8165e:	42aa      	cmp	r2, r5
   81660:	f67f aedc 	bls.w	8141c <udc_process_setup+0x214>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81664:	691a      	ldr	r2, [r3, #16]
			udd_set_setup_payload(
   81666:	4b28      	ldr	r3, [pc, #160]	; (81708 <udc_process_setup+0x500>)
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81668:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   8166c:	8841      	ldrh	r1, [r0, #2]
   8166e:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   81670:	2202      	movs	r2, #2
   81672:	68a3      	ldr	r3, [r4, #8]
   81674:	705a      	strb	r2, [r3, #1]
		break;
   81676:	e7c7      	b.n	81608 <udc_process_setup+0x400>
		if (!udd_is_high_speed()) {
   81678:	4b1b      	ldr	r3, [pc, #108]	; (816e8 <udc_process_setup+0x4e0>)
   8167a:	4798      	blx	r3
   8167c:	2800      	cmp	r0, #0
   8167e:	d171      	bne.n	81764 <udc_process_setup+0x55c>
				(uint8_t *) udc_config.confdev_hs,
   81680:	4a1a      	ldr	r2, [pc, #104]	; (816ec <udc_process_setup+0x4e4>)
			udd_set_setup_payload(
   81682:	4b21      	ldr	r3, [pc, #132]	; (81708 <udc_process_setup+0x500>)
				(uint8_t *) udc_config.confdev_hs,
   81684:	6890      	ldr	r0, [r2, #8]
			udd_set_setup_payload(
   81686:	7801      	ldrb	r1, [r0, #0]
   81688:	4798      	blx	r3
   8168a:	e7bd      	b.n	81608 <udc_process_setup+0x400>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   8168c:	2d03      	cmp	r5, #3
   8168e:	f63f adcf 	bhi.w	81230 <udc_process_setup+0x28>
   81692:	e8df f005 	tbb	[pc, r5]
   81696:	171a      	.short	0x171a
   81698:	0214      	.short	0x0214
   8169a:	2120      	movs	r1, #32
   8169c:	4b1d      	ldr	r3, [pc, #116]	; (81714 <udc_process_setup+0x50c>)
		for(i = 0; i < str_length; i++) {
   8169e:	4e1e      	ldr	r6, [pc, #120]	; (81718 <udc_process_setup+0x510>)
   816a0:	185d      	adds	r5, r3, r1
   816a2:	4632      	mov	r2, r6
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   816a4:	f813 0b01 	ldrb.w	r0, [r3], #1
		for(i = 0; i < str_length; i++) {
   816a8:	42ab      	cmp	r3, r5
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   816aa:	f822 0f02 	strh.w	r0, [r2, #2]!
		for(i = 0; i < str_length; i++) {
   816ae:	d1f9      	bne.n	816a4 <udc_process_setup+0x49c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   816b0:	0049      	lsls	r1, r1, #1
   816b2:	3102      	adds	r1, #2
		udd_set_setup_payload(
   816b4:	4818      	ldr	r0, [pc, #96]	; (81718 <udc_process_setup+0x510>)
   816b6:	4b14      	ldr	r3, [pc, #80]	; (81708 <udc_process_setup+0x500>)
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   816b8:	7031      	strb	r1, [r6, #0]
		udd_set_setup_payload(
   816ba:	4798      	blx	r3
   816bc:	e7a4      	b.n	81608 <udc_process_setup+0x400>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   816be:	2120      	movs	r1, #32
		str = udc_string_product_name;
   816c0:	4b16      	ldr	r3, [pc, #88]	; (8171c <udc_process_setup+0x514>)
   816c2:	e7ec      	b.n	8169e <udc_process_setup+0x496>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   816c4:	2115      	movs	r1, #21
		str = udc_string_manufacturer_name;
   816c6:	4b16      	ldr	r3, [pc, #88]	; (81720 <udc_process_setup+0x518>)
   816c8:	e7e9      	b.n	8169e <udc_process_setup+0x496>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   816ca:	2104      	movs	r1, #4
   816cc:	4815      	ldr	r0, [pc, #84]	; (81724 <udc_process_setup+0x51c>)
   816ce:	4b0e      	ldr	r3, [pc, #56]	; (81708 <udc_process_setup+0x500>)
   816d0:	4798      	blx	r3
	if (str_length) {
   816d2:	e799      	b.n	81608 <udc_process_setup+0x400>
				udc_config.confdev_lsfs->bNumConfigurations) {
   816d4:	f8da 2000 	ldr.w	r2, [sl]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   816d8:	7c52      	ldrb	r2, [r2, #17]
   816da:	429a      	cmp	r2, r3
   816dc:	f4bf aeda 	bcs.w	81494 <udc_process_setup+0x28c>
   816e0:	e69c      	b.n	8141c <udc_process_setup+0x214>
   816e2:	bf00      	nop
   816e4:	00084255 	.word	0x00084255
   816e8:	00084219 	.word	0x00084219
   816ec:	20070960 	.word	0x20070960
   816f0:	20071509 	.word	0x20071509
   816f4:	2007150c 	.word	0x2007150c
   816f8:	00081071 	.word	0x00081071
   816fc:	20071504 	.word	0x20071504
   81700:	000810fd 	.word	0x000810fd
   81704:	00080ffd 	.word	0x00080ffd
   81708:	00084285 	.word	0x00084285
   8170c:	000843e9 	.word	0x000843e9
   81710:	2007020c 	.word	0x2007020c
   81714:	200701d0 	.word	0x200701d0
   81718:	2007037c 	.word	0x2007037c
   8171c:	200703dc 	.word	0x200703dc
   81720:	200703c4 	.word	0x200703c4
   81724:	200703c0 	.word	0x200703c0
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   81728:	7920      	ldrb	r0, [r4, #4]
   8172a:	4b32      	ldr	r3, [pc, #200]	; (817f4 <udc_process_setup+0x5ec>)
   8172c:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   8172e:	7920      	ldrb	r0, [r4, #4]
   81730:	4b31      	ldr	r3, [pc, #196]	; (817f8 <udc_process_setup+0x5f0>)
   81732:	4798      	blx	r3
		if (udc_reqstd()) {
   81734:	2800      	cmp	r0, #0
   81736:	f47f ae27 	bne.w	81388 <udc_process_setup+0x180>
   8173a:	e66f      	b.n	8141c <udc_process_setup+0x214>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   8173c:	f8da 3004 	ldr.w	r3, [sl, #4]
   81740:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   81744:	3a01      	subs	r2, #1
   81746:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8174a:	e6cb      	b.n	814e4 <udc_process_setup+0x2dc>
			if (conf_num >= udc_config.confdev_lsfs->
   8174c:	681a      	ldr	r2, [r3, #0]
   8174e:	7c52      	ldrb	r2, [r2, #17]
   81750:	42aa      	cmp	r2, r5
   81752:	f67f ae63 	bls.w	8141c <udc_process_setup+0x214>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   81756:	685a      	ldr	r2, [r3, #4]
			udd_set_setup_payload(
   81758:	4b28      	ldr	r3, [pc, #160]	; (817fc <udc_process_setup+0x5f4>)
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   8175a:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   8175e:	8841      	ldrh	r1, [r0, #2]
   81760:	4798      	blx	r3
   81762:	e76a      	b.n	8163a <udc_process_setup+0x432>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   81764:	2010      	movs	r0, #16
   81766:	2102      	movs	r1, #2
   81768:	4b25      	ldr	r3, [pc, #148]	; (81800 <udc_process_setup+0x5f8>)
			udd_set_setup_payload(
   8176a:	4d24      	ldr	r5, [pc, #144]	; (817fc <udc_process_setup+0x5f4>)
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   8176c:	681a      	ldr	r2, [r3, #0]
   8176e:	7090      	strb	r0, [r2, #2]
   81770:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   81772:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   81774:	7801      	ldrb	r1, [r0, #0]
   81776:	47a8      	blx	r5
   81778:	e746      	b.n	81608 <udc_process_setup+0x400>
			if (conf_num >= udc_config.confdev_lsfs->
   8177a:	681a      	ldr	r2, [r3, #0]
   8177c:	7c52      	ldrb	r2, [r2, #17]
   8177e:	42aa      	cmp	r2, r5
   81780:	f67f ae4c 	bls.w	8141c <udc_process_setup+0x214>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   81784:	685a      	ldr	r2, [r3, #4]
			udd_set_setup_payload(
   81786:	4b1d      	ldr	r3, [pc, #116]	; (817fc <udc_process_setup+0x5f4>)
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   81788:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   8178c:	8841      	ldrh	r1, [r0, #2]
   8178e:	4798      	blx	r3
   81790:	e76e      	b.n	81670 <udc_process_setup+0x468>
	if (udc_num_configuration) {
   81792:	4e1c      	ldr	r6, [pc, #112]	; (81804 <udc_process_setup+0x5fc>)
   81794:	7832      	ldrb	r2, [r6, #0]
   81796:	b192      	cbz	r2, 817be <udc_process_setup+0x5b6>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81798:	4f1b      	ldr	r7, [pc, #108]	; (81808 <udc_process_setup+0x600>)
   8179a:	683a      	ldr	r2, [r7, #0]
   8179c:	6812      	ldr	r2, [r2, #0]
		for (iface_num = 0;
   8179e:	7912      	ldrb	r2, [r2, #4]
   817a0:	b16a      	cbz	r2, 817be <udc_process_setup+0x5b6>
   817a2:	4699      	mov	r9, r3
   817a4:	4618      	mov	r0, r3
   817a6:	f8df 8064 	ldr.w	r8, [pc, #100]	; 8180c <udc_process_setup+0x604>
			udc_iface_disable(iface_num);
   817aa:	47c0      	blx	r8
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   817ac:	683b      	ldr	r3, [r7, #0]
		for (iface_num = 0;
   817ae:	f109 0901 	add.w	r9, r9, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   817b2:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   817b4:	fa5f f089 	uxtb.w	r0, r9
   817b8:	791b      	ldrb	r3, [r3, #4]
   817ba:	4283      	cmp	r3, r0
   817bc:	d8f5      	bhi.n	817aa <udc_process_setup+0x5a2>
	udc_num_configuration = 0;
   817be:	2200      	movs	r2, #0
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   817c0:	88a3      	ldrh	r3, [r4, #4]
	udc_device_status =
   817c2:	4913      	ldr	r1, [pc, #76]	; (81810 <udc_process_setup+0x608>)
   817c4:	0a1b      	lsrs	r3, r3, #8
   817c6:	3b01      	subs	r3, #1
   817c8:	800a      	strh	r2, [r1, #0]
	udc_num_configuration = 0;
   817ca:	7032      	strb	r2, [r6, #0]
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   817cc:	2b03      	cmp	r3, #3
   817ce:	f63f ae25 	bhi.w	8141c <udc_process_setup+0x214>
   817d2:	e8df f003 	tbb	[pc, r3]
   817d6:	080b      	.short	0x080b
   817d8:	0205      	.short	0x0205
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   817da:	4b0e      	ldr	r3, [pc, #56]	; (81814 <udc_process_setup+0x60c>)
   817dc:	6123      	str	r3, [r4, #16]
			return true;
   817de:	e530      	b.n	81242 <udc_process_setup+0x3a>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   817e0:	4b0d      	ldr	r3, [pc, #52]	; (81818 <udc_process_setup+0x610>)
   817e2:	6123      	str	r3, [r4, #16]
			return true;
   817e4:	e52d      	b.n	81242 <udc_process_setup+0x3a>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   817e6:	4b0d      	ldr	r3, [pc, #52]	; (8181c <udc_process_setup+0x614>)
   817e8:	6123      	str	r3, [r4, #16]
			return true;
   817ea:	e52a      	b.n	81242 <udc_process_setup+0x3a>
			udd_g_ctrlreq.callback = udd_test_mode_j;
   817ec:	4b0c      	ldr	r3, [pc, #48]	; (81820 <udc_process_setup+0x618>)
   817ee:	6123      	str	r3, [r4, #16]
			return true;
   817f0:	e527      	b.n	81242 <udc_process_setup+0x3a>
   817f2:	bf00      	nop
   817f4:	000847d5 	.word	0x000847d5
   817f8:	000842fd 	.word	0x000842fd
   817fc:	00084285 	.word	0x00084285
   81800:	20070960 	.word	0x20070960
   81804:	20071509 	.word	0x20071509
   81808:	2007150c 	.word	0x2007150c
   8180c:	00081071 	.word	0x00081071
   81810:	20071504 	.word	0x20071504
   81814:	00085345 	.word	0x00085345
   81818:	00085331 	.word	0x00085331
   8181c:	00085315 	.word	0x00085315
   81820:	000852f9 	.word	0x000852f9

00081824 <naeusb_add_in_handler>:
    return main_b_vendor_enable;
}

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers < 16) {
   81824:	4907      	ldr	r1, [pc, #28]	; (81844 <naeusb_add_in_handler+0x20>)
   81826:	780a      	ldrb	r2, [r1, #0]
   81828:	2a0f      	cmp	r2, #15
   8182a:	d901      	bls.n	81830 <naeusb_add_in_handler+0xc>
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
        return true;
    }
    return false;
   8182c:	2000      	movs	r0, #0
    
}
   8182e:	4770      	bx	lr
   81830:	4603      	mov	r3, r0
{
   81832:	b410      	push	{r4}
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   81834:	1c50      	adds	r0, r2, #1
   81836:	4c04      	ldr	r4, [pc, #16]	; (81848 <naeusb_add_in_handler+0x24>)
   81838:	7008      	strb	r0, [r1, #0]
   8183a:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        return true;
   8183e:	2001      	movs	r0, #1
}
   81840:	bc10      	pop	{r4}
   81842:	4770      	bx	lr
   81844:	200719d4 	.word	0x200719d4
   81848:	20071994 	.word	0x20071994

0008184c <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers < 16) {
   8184c:	4907      	ldr	r1, [pc, #28]	; (8186c <naeusb_add_out_handler+0x20>)
   8184e:	780a      	ldrb	r2, [r1, #0]
   81850:	2a0f      	cmp	r2, #15
   81852:	d901      	bls.n	81858 <naeusb_add_out_handler+0xc>
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
        return true;
    }
    return false;
   81854:	2000      	movs	r0, #0
    
}
   81856:	4770      	bx	lr
   81858:	4603      	mov	r3, r0
{
   8185a:	b410      	push	{r4}
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   8185c:	1c50      	adds	r0, r2, #1
   8185e:	4c04      	ldr	r4, [pc, #16]	; (81870 <naeusb_add_out_handler+0x24>)
   81860:	7008      	strb	r0, [r1, #0]
   81862:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        return true;
   81866:	2001      	movs	r0, #1
}
   81868:	bc10      	pop	{r4}
   8186a:	4770      	bx	lr
   8186c:	200719d5 	.word	0x200719d5
   81870:	200719d8 	.word	0x200719d8

00081874 <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
	active = false;
	ui_powerdown();
   81874:	4b00      	ldr	r3, [pc, #0]	; (81878 <main_suspend_action+0x4>)
   81876:	4718      	bx	r3
   81878:	000808b1 	.word	0x000808b1

0008187c <main_resume_action>:
}

void main_resume_action(void)
{
    ui_wakeup();
   8187c:	4b00      	ldr	r3, [pc, #0]	; (81880 <main_resume_action+0x4>)
   8187e:	4718      	bx	r3
   81880:	000808b5 	.word	0x000808b5

00081884 <main_sof_action>:
}

void main_sof_action(void)
{
    if (!main_b_vendor_enable)
   81884:	4b05      	ldr	r3, [pc, #20]	; (8189c <main_sof_action+0x18>)
   81886:	781b      	ldrb	r3, [r3, #0]
   81888:	b903      	cbnz	r3, 8188c <main_sof_action+0x8>
   8188a:	4770      	bx	lr
{
   8188c:	b510      	push	{r4, lr}
        return;
    ui_process(udd_get_frame_number());
   8188e:	4b04      	ldr	r3, [pc, #16]	; (818a0 <main_sof_action+0x1c>)
   81890:	4798      	blx	r3
}
   81892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ui_process(udd_get_frame_number());
   81896:	4b03      	ldr	r3, [pc, #12]	; (818a4 <main_sof_action+0x20>)
   81898:	4718      	bx	r3
   8189a:	bf00      	nop
   8189c:	200703fd 	.word	0x200703fd
   818a0:	00084265 	.word	0x00084265
   818a4:	000808b9 	.word	0x000808b9

000818a8 <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   818a8:	b538      	push	{r3, r4, r5, lr}
    active = true;
    main_b_vendor_enable = true;
   818aa:	2401      	movs	r4, #1
   818ac:	4d04      	ldr	r5, [pc, #16]	; (818c0 <main_vendor_enable+0x18>)
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   818ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
   818b2:	4a04      	ldr	r2, [pc, #16]	; (818c4 <main_vendor_enable+0x1c>)
   818b4:	4b04      	ldr	r3, [pc, #16]	; (818c8 <main_vendor_enable+0x20>)
   818b6:	4805      	ldr	r0, [pc, #20]	; (818cc <main_vendor_enable+0x24>)
    main_b_vendor_enable = true;
   818b8:	702c      	strb	r4, [r5, #0]
    udi_vendor_bulk_out_run(
   818ba:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
   818bc:	4620      	mov	r0, r4
   818be:	bd38      	pop	{r3, r4, r5, pc}
   818c0:	200703fd 	.word	0x200703fd
   818c4:	000825cd 	.word	0x000825cd
   818c8:	000835b1 	.word	0x000835b1
   818cc:	20071594 	.word	0x20071594

000818d0 <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
   818d0:	2200      	movs	r2, #0
   818d2:	4b01      	ldr	r3, [pc, #4]	; (818d8 <main_vendor_disable+0x8>)
   818d4:	701a      	strb	r2, [r3, #0]
}
   818d6:	4770      	bx	lr
   818d8:	200703fd 	.word	0x200703fd

000818dc <main_setup_out_received>:

bool main_setup_out_received(void)
{
   818dc:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
   818de:	4b0f      	ldr	r3, [pc, #60]	; (8191c <main_setup_out_received+0x40>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   818e0:	4a0f      	ldr	r2, [pc, #60]	; (81920 <main_setup_out_received+0x44>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   818e2:	88d9      	ldrh	r1, [r3, #6]
    udd_g_ctrlreq.payload = ctrlbuffer;
   818e4:	480f      	ldr	r0, [pc, #60]	; (81924 <main_setup_out_received+0x48>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   818e6:	2980      	cmp	r1, #128	; 0x80
   818e8:	bf28      	it	cs
   818ea:	2180      	movcs	r1, #128	; 0x80
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   818ec:	7812      	ldrb	r2, [r2, #0]
    udd_g_ctrlreq.payload = ctrlbuffer;
   818ee:	6098      	str	r0, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   818f0:	8199      	strh	r1, [r3, #12]
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   818f2:	b18a      	cbz	r2, 81918 <main_setup_out_received+0x3c>
   818f4:	4c0c      	ldr	r4, [pc, #48]	; (81928 <main_setup_out_received+0x4c>)
   818f6:	1e55      	subs	r5, r2, #1
   818f8:	b2ed      	uxtb	r5, r5
   818fa:	1b53      	subs	r3, r2, r5
   818fc:	1f25      	subs	r5, r4, #4
   818fe:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81902:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   81906:	e001      	b.n	8190c <main_setup_out_received+0x30>
   81908:	42ac      	cmp	r4, r5
   8190a:	d005      	beq.n	81918 <main_setup_out_received+0x3c>
        handler_status = naeusb_out_request_handlers[i-1]();
   8190c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   81910:	4798      	blx	r3
        if (handler_status == true) {
   81912:	2800      	cmp	r0, #0
   81914:	d0f8      	beq.n	81908 <main_setup_out_received+0x2c>
        }
    }

    return false;

}
   81916:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   81918:	2000      	movs	r0, #0
}
   8191a:	bd38      	pop	{r3, r4, r5, pc}
   8191c:	20072288 	.word	0x20072288
   81920:	200719d5 	.word	0x200719d5
   81924:	20071514 	.word	0x20071514
   81928:	200719d8 	.word	0x200719d8

0008192c <main_setup_in_received>:

bool main_setup_in_received(void)
{
   8192c:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   8192e:	4b0b      	ldr	r3, [pc, #44]	; (8195c <main_setup_in_received+0x30>)
   81930:	781a      	ldrb	r2, [r3, #0]
   81932:	b18a      	cbz	r2, 81958 <main_setup_in_received+0x2c>
   81934:	4c0a      	ldr	r4, [pc, #40]	; (81960 <main_setup_in_received+0x34>)
   81936:	1e55      	subs	r5, r2, #1
   81938:	b2ed      	uxtb	r5, r5
   8193a:	1b53      	subs	r3, r2, r5
   8193c:	1f25      	subs	r5, r4, #4
   8193e:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81942:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   81946:	e001      	b.n	8194c <main_setup_in_received+0x20>
   81948:	42ac      	cmp	r4, r5
   8194a:	d005      	beq.n	81958 <main_setup_in_received+0x2c>
        handler_status = naeusb_in_request_handlers[i-1]();
   8194c:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   81950:	4798      	blx	r3
        if (handler_status == true) {
   81952:	2800      	cmp	r0, #0
   81954:	d0f8      	beq.n	81948 <main_setup_in_received+0x1c>
        }
    }

    return false;

   81956:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   81958:	2000      	movs	r0, #0
   8195a:	bd38      	pop	{r3, r4, r5, pc}
   8195c:	200719d4 	.word	0x200719d4
   81960:	20071994 	.word	0x20071994

00081964 <naeusb_setup_out_received>:
}


bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
   81964:	4b04      	ldr	r3, [pc, #16]	; (81978 <naeusb_setup_out_received+0x14>)
   81966:	785a      	ldrb	r2, [r3, #1]
   81968:	2a22      	cmp	r2, #34	; 0x22
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   8196a:	bf03      	ittte	eq
   8196c:	4a03      	ldreq	r2, [pc, #12]	; (8197c <naeusb_setup_out_received+0x18>)
            return true;
   8196e:	2001      	moveq	r0, #1
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   81970:	611a      	streq	r2, [r3, #16]
            break;
    }
    return false;
   81972:	2000      	movne	r0, #0
}
   81974:	4770      	bx	lr
   81976:	bf00      	nop
   81978:	20072288 	.word	0x20072288
   8197c:	00081981 	.word	0x00081981

00081980 <naeusb_sam_cfg_out>:
{
   81980:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   81982:	4b28      	ldr	r3, [pc, #160]	; (81a24 <naeusb_sam_cfg_out+0xa4>)
   81984:	885a      	ldrh	r2, [r3, #2]
   81986:	b2d3      	uxtb	r3, r2
   81988:	3b01      	subs	r3, #1
   8198a:	2b12      	cmp	r3, #18
   8198c:	d80e      	bhi.n	819ac <naeusb_sam_cfg_out+0x2c>
   8198e:	e8df f003 	tbb	[pc, r3]
   81992:	1b0e      	.short	0x1b0e
   81994:	0d0d0d20 	.word	0x0d0d0d20
   81998:	0d0d0d0d 	.word	0x0d0d0d0d
   8199c:	0d0d0d0d 	.word	0x0d0d0d0d
   819a0:	4541340d 	.word	0x4541340d
   819a4:	0a          	.byte	0x0a
   819a5:	00          	.byte	0x00
        CURRENT_ERRORS = 0;
   819a6:	2200      	movs	r2, #0
   819a8:	4b1f      	ldr	r3, [pc, #124]	; (81a28 <naeusb_sam_cfg_out+0xa8>)
   819aa:	801a      	strh	r2, [r3, #0]
}
   819ac:	bd10      	pop	{r4, pc}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   819ae:	213e      	movs	r1, #62	; 0x3e
   819b0:	2000      	movs	r0, #0
   819b2:	4b1e      	ldr	r3, [pc, #120]	; (81a2c <naeusb_sam_cfg_out+0xac>)
   819b4:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   819b6:	4c1e      	ldr	r4, [pc, #120]	; (81a30 <naeusb_sam_cfg_out+0xb0>)
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   819b8:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   819ba:	2800      	cmp	r0, #0
   819bc:	d0fc      	beq.n	819b8 <naeusb_sam_cfg_out+0x38>
   819be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   819c2:	2010      	movs	r0, #16
   819c4:	4b1b      	ldr	r3, [pc, #108]	; (81a34 <naeusb_sam_cfg_out+0xb4>)
   819c6:	4718      	bx	r3
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   819c8:	2010      	movs	r0, #16
}
   819ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   819ce:	4b1a      	ldr	r3, [pc, #104]	; (81a38 <naeusb_sam_cfg_out+0xb8>)
   819d0:	4718      	bx	r3
        board_power(0);
   819d2:	4b1a      	ldr	r3, [pc, #104]	; (81a3c <naeusb_sam_cfg_out+0xbc>)
   819d4:	4798      	blx	r3
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   819d6:	2201      	movs	r2, #1
   819d8:	210c      	movs	r1, #12
   819da:	4b19      	ldr	r3, [pc, #100]	; (81a40 <naeusb_sam_cfg_out+0xc0>)
   819dc:	4819      	ldr	r0, [pc, #100]	; (81a44 <naeusb_sam_cfg_out+0xc4>)
   819de:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   819e0:	4b19      	ldr	r3, [pc, #100]	; (81a48 <naeusb_sam_cfg_out+0xc8>)
   819e2:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   819e4:	4a19      	ldr	r2, [pc, #100]	; (81a4c <naeusb_sam_cfg_out+0xcc>)
   819e6:	6853      	ldr	r3, [r2, #4]
   819e8:	0399      	lsls	r1, r3, #14
   819ea:	d4fc      	bmi.n	819e6 <naeusb_sam_cfg_out+0x66>
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   819ec:	6813      	ldr	r3, [r2, #0]
   819ee:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   819f2:	f043 0305 	orr.w	r3, r3, #5
   819f6:	6013      	str	r3, [r2, #0]
        while(1);
   819f8:	e7fe      	b.n	819f8 <naeusb_sam_cfg_out+0x78>
   819fa:	4b13      	ldr	r3, [pc, #76]	; (81a48 <naeusb_sam_cfg_out+0xc8>)
   819fc:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   819fe:	4a13      	ldr	r2, [pc, #76]	; (81a4c <naeusb_sam_cfg_out+0xcc>)
   81a00:	6853      	ldr	r3, [r2, #4]
   81a02:	039b      	lsls	r3, r3, #14
   81a04:	d4fc      	bmi.n	81a00 <naeusb_sam_cfg_out+0x80>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   81a06:	6813      	ldr	r3, [r2, #0]
   81a08:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81a0c:	f043 0305 	orr.w	r3, r3, #5
   81a10:	6013      	str	r3, [r2, #0]
        while(1);
   81a12:	e7fe      	b.n	81a12 <naeusb_sam_cfg_out+0x92>
        FPGA_releaselock();
   81a14:	4b0e      	ldr	r3, [pc, #56]	; (81a50 <naeusb_sam_cfg_out+0xd0>)
}
   81a16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FPGA_releaselock();
   81a1a:	4718      	bx	r3
        LED_SETTING = (udd_g_ctrlreq.req.wValue >> 8) & 0xFF;
   81a1c:	4b0d      	ldr	r3, [pc, #52]	; (81a54 <naeusb_sam_cfg_out+0xd4>)
   81a1e:	0a12      	lsrs	r2, r2, #8
   81a20:	701a      	strb	r2, [r3, #0]
}
   81a22:	bd10      	pop	{r4, pc}
   81a24:	20072288 	.word	0x20072288
   81a28:	20071a98 	.word	0x20071a98
   81a2c:	00083441 	.word	0x00083441
   81a30:	00083491 	.word	0x00083491
   81a34:	00083389 	.word	0x00083389
   81a38:	000833e5 	.word	0x000833e5
   81a3c:	00080e1d 	.word	0x00080e1d
   81a40:	000835d1 	.word	0x000835d1
   81a44:	400e0a00 	.word	0x400e0a00
   81a48:	000841a9 	.word	0x000841a9
   81a4c:	400e1a00 	.word	0x400e1a00
   81a50:	00082b65 	.word	0x00082b65
   81a54:	20071a9a 	.word	0x20071a9a

00081a58 <naeusb_setup_in_received>:


bool naeusb_setup_in_received(void)
{
   81a58:	b538      	push	{r3, r4, r5, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
   81a5a:	4c1c      	ldr	r4, [pc, #112]	; (81acc <naeusb_setup_in_received+0x74>)
   81a5c:	7863      	ldrb	r3, [r4, #1]
   81a5e:	2b22      	cmp	r3, #34	; 0x22
   81a60:	d005      	beq.n	81a6e <naeusb_setup_in_received+0x16>
   81a62:	2b40      	cmp	r3, #64	; 0x40
   81a64:	d01a      	beq.n	81a9c <naeusb_setup_in_received+0x44>
   81a66:	2b17      	cmp	r3, #23
   81a68:	d00d      	beq.n	81a86 <naeusb_setup_in_received+0x2e>
   81a6a:	2000      	movs	r0, #0
        case REQ_SAM_STATUS:
            return naeusb_status_in();
            break;
    }
    return false;
}
   81a6c:	bd38      	pop	{r3, r4, r5, pc}
    udd_g_ctrlreq.payload_size = 3;
   81a6e:	2203      	movs	r2, #3
    respbuf[0] = CURRENT_ERRORS & 0xFF;
   81a70:	4817      	ldr	r0, [pc, #92]	; (81ad0 <naeusb_setup_in_received+0x78>)
    respbuf[2] = LED_SETTING;
   81a72:	4918      	ldr	r1, [pc, #96]	; (81ad4 <naeusb_setup_in_received+0x7c>)
    respbuf[0] = CURRENT_ERRORS & 0xFF;
   81a74:	4b18      	ldr	r3, [pc, #96]	; (81ad8 <naeusb_setup_in_received+0x80>)
   81a76:	8800      	ldrh	r0, [r0, #0]
    respbuf[2] = LED_SETTING;
   81a78:	7809      	ldrb	r1, [r1, #0]
    respbuf[0] = CURRENT_ERRORS & 0xFF;
   81a7a:	8018      	strh	r0, [r3, #0]
    respbuf[2] = LED_SETTING;
   81a7c:	7099      	strb	r1, [r3, #2]
    udd_g_ctrlreq.payload_size = 3;
   81a7e:	2001      	movs	r0, #1
    udd_g_ctrlreq.payload = respbuf;
   81a80:	60a3      	str	r3, [r4, #8]
    udd_g_ctrlreq.payload_size = 3;
   81a82:	81a2      	strh	r2, [r4, #12]
}
   81a84:	bd38      	pop	{r3, r4, r5, pc}
    respbuf[0] = FW_VER_MAJOR;
   81a86:	f240 2501 	movw	r5, #513	; 0x201
    respbuf[2] = FW_VER_DEBUG;
   81a8a:	2100      	movs	r1, #0
    udd_g_ctrlreq.payload_size = 3;
   81a8c:	2203      	movs	r2, #3
    respbuf[0] = FW_VER_MAJOR;
   81a8e:	4b12      	ldr	r3, [pc, #72]	; (81ad8 <naeusb_setup_in_received+0x80>)
            return naeusb_fw_version_in();
   81a90:	2001      	movs	r0, #1
    respbuf[0] = FW_VER_MAJOR;
   81a92:	801d      	strh	r5, [r3, #0]
    respbuf[2] = FW_VER_DEBUG;
   81a94:	7099      	strb	r1, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   81a96:	60a3      	str	r3, [r4, #8]
    udd_g_ctrlreq.payload_size = 3;
   81a98:	81a2      	strh	r2, [r4, #12]
}
   81a9a:	bd38      	pop	{r3, r4, r5, pc}
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   81a9c:	f04f 0c20 	mov.w	ip, #32
    strncpy(respbuf, BUILD_TIME, 64);
   81aa0:	4d0d      	ldr	r5, [pc, #52]	; (81ad8 <naeusb_setup_in_received+0x80>)
   81aa2:	4b0e      	ldr	r3, [pc, #56]	; (81adc <naeusb_setup_in_received+0x84>)
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   81aa4:	2237      	movs	r2, #55	; 0x37
    strncpy(respbuf, BUILD_TIME, 64);
   81aa6:	e893 0003 	ldmia.w	r3, {r0, r1}
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   81aaa:	f885 c008 	strb.w	ip, [r5, #8]
    strncpy(respbuf, BUILD_TIME, 64);
   81aae:	e885 0003 	stmia.w	r5, {r0, r1}
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   81ab2:	4b0b      	ldr	r3, [pc, #44]	; (81ae0 <naeusb_setup_in_received+0x88>)
   81ab4:	490b      	ldr	r1, [pc, #44]	; (81ae4 <naeusb_setup_in_received+0x8c>)
   81ab6:	f105 0009 	add.w	r0, r5, #9
   81aba:	4798      	blx	r3
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81abc:	4628      	mov	r0, r5
   81abe:	4b0a      	ldr	r3, [pc, #40]	; (81ae8 <naeusb_setup_in_received+0x90>)
    udd_g_ctrlreq.payload = respbuf;
   81ac0:	60a5      	str	r5, [r4, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81ac2:	4798      	blx	r3
   81ac4:	4603      	mov	r3, r0
            return naeusb_build_date_in();
   81ac6:	2001      	movs	r0, #1
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81ac8:	81a3      	strh	r3, [r4, #12]
}
   81aca:	bd38      	pop	{r3, r4, r5, pc}
   81acc:	20072288 	.word	0x20072288
   81ad0:	20071a98 	.word	0x20071a98
   81ad4:	20071a9a 	.word	0x20071a9a
   81ad8:	20071a18 	.word	0x20071a18
   81adc:	0008ca44 	.word	0x0008ca44
   81ae0:	00085f79 	.word	0x00085f79
   81ae4:	0008ca38 	.word	0x0008ca38
   81ae8:	00085f1d 	.word	0x00085f1d

00081aec <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   81aec:	b510      	push	{r4, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
   81aee:	4b04      	ldr	r3, [pc, #16]	; (81b00 <naeusb_register_handlers+0x14>)
   81af0:	4804      	ldr	r0, [pc, #16]	; (81b04 <naeusb_register_handlers+0x18>)
   81af2:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   81af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    naeusb_add_out_handler(naeusb_setup_out_received);
   81af8:	4803      	ldr	r0, [pc, #12]	; (81b08 <naeusb_register_handlers+0x1c>)
   81afa:	4b04      	ldr	r3, [pc, #16]	; (81b0c <naeusb_register_handlers+0x20>)
   81afc:	4718      	bx	r3
   81afe:	bf00      	nop
   81b00:	00081825 	.word	0x00081825
   81b04:	00081a59 	.word	0x00081a59
   81b08:	00081965 	.word	0x00081965
   81b0c:	0008184d 	.word	0x0008184d

00081b10 <usart_setup_out_received>:
    }
}

bool usart_setup_out_received(void)
{
    switch(udd_g_ctrlreq.req.bRequest) {
   81b10:	4a0a      	ldr	r2, [pc, #40]	; (81b3c <usart_setup_out_received+0x2c>)
   81b12:	7853      	ldrb	r3, [r2, #1]
   81b14:	2b1b      	cmp	r3, #27
   81b16:	d005      	beq.n	81b24 <usart_setup_out_received+0x14>
   81b18:	2b31      	cmp	r3, #49	; 0x31
   81b1a:	d00b      	beq.n	81b34 <usart_setup_out_received+0x24>
   81b1c:	2b1a      	cmp	r3, #26
   81b1e:	d005      	beq.n	81b2c <usart_setup_out_received+0x1c>
   81b20:	2000      	movs	r0, #0
   81b22:	4770      	bx	lr
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   81b24:	4b06      	ldr	r3, [pc, #24]	; (81b40 <usart_setup_out_received+0x30>)
        return true;
   81b26:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   81b28:	6113      	str	r3, [r2, #16]
        return true;
   81b2a:	4770      	bx	lr
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   81b2c:	4b05      	ldr	r3, [pc, #20]	; (81b44 <usart_setup_out_received+0x34>)
        return true;
   81b2e:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   81b30:	6113      	str	r3, [r2, #16]
        return true;
   81b32:	4770      	bx	lr
    case REQ_AVR_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_avr_program_void;
        return true;
#endif
    case REQ_CDC_SETTINGS_EN:
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   81b34:	4b04      	ldr	r3, [pc, #16]	; (81b48 <usart_setup_out_received+0x38>)
        return true;
   81b36:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   81b38:	6113      	str	r3, [r2, #16]
        break;
    }
    return false;
}
   81b3a:	4770      	bx	lr
   81b3c:	20072288 	.word	0x20072288
   81b40:	00081ef1 	.word	0x00081ef1
   81b44:	00081f55 	.word	0x00081f55
   81b48:	00081b4d 	.word	0x00081b4d

00081b4c <naeusb_cdc_settings_out>:
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81b4c:	2300      	movs	r3, #0
{
   81b4e:	b430      	push	{r4, r5}
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81b50:	4a11      	ldr	r2, [pc, #68]	; (81b98 <naeusb_cdc_settings_out+0x4c>)
		if (port == 0) break;
   81b52:	4d12      	ldr	r5, [pc, #72]	; (81b9c <naeusb_cdc_settings_out+0x50>)
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81b54:	f8b2 c002 	ldrh.w	ip, [r2, #2]
		if (port == 0) break;
   81b58:	4c11      	ldr	r4, [pc, #68]	; (81ba0 <naeusb_cdc_settings_out+0x54>)
   81b5a:	b133      	cbz	r3, 81b6a <naeusb_cdc_settings_out+0x1e>
   81b5c:	2b01      	cmp	r3, #1
   81b5e:	d018      	beq.n	81b92 <naeusb_cdc_settings_out+0x46>
    for (uint8_t i = 0; i < 4; i++) {
   81b60:	3301      	adds	r3, #1
   81b62:	2b04      	cmp	r3, #4
   81b64:	d1f9      	bne.n	81b5a <naeusb_cdc_settings_out+0xe>
}
   81b66:	bc30      	pop	{r4, r5}
   81b68:	4770      	bx	lr
		if (port == 0) break;
   81b6a:	4629      	mov	r1, r5
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81b6c:	fa4c f203 	asr.w	r2, ip, r3
   81b70:	f012 0201 	ands.w	r2, r2, #1
   81b74:	d006      	beq.n	81b84 <naeusb_cdc_settings_out+0x38>
                driver->cdc_settings_change = 1;
   81b76:	f891 229c 	ldrb.w	r2, [r1, #668]	; 0x29c
   81b7a:	f042 0208 	orr.w	r2, r2, #8
   81b7e:	f881 229c 	strb.w	r2, [r1, #668]	; 0x29c
   81b82:	e7ed      	b.n	81b60 <naeusb_cdc_settings_out+0x14>
                driver->cdc_settings_change = 0;
   81b84:	f891 029c 	ldrb.w	r0, [r1, #668]	; 0x29c
   81b88:	f362 00c3 	bfi	r0, r2, #3, #1
   81b8c:	f881 029c 	strb.w	r0, [r1, #668]	; 0x29c
   81b90:	e7e6      	b.n	81b60 <naeusb_cdc_settings_out+0x14>
		if (port == 0) break;
   81b92:	4621      	mov	r1, r4
   81b94:	e7ea      	b.n	81b6c <naeusb_cdc_settings_out+0x20>
   81b96:	bf00      	nop
   81b98:	20072288 	.word	0x20072288
   81b9c:	20070400 	.word	0x20070400
   81ba0:	200706a0 	.word	0x200706a0

00081ba4 <usart_enableIO>:
{
   81ba4:	b510      	push	{r4, lr}
    if (driver->usart_id == 0) {
   81ba6:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
   81baa:	b113      	cbz	r3, 81bb2 <usart_enableIO+0xe>
    } else if (driver->usart_id == 1) {
   81bac:	2b01      	cmp	r3, #1
   81bae:	d016      	beq.n	81bde <usart_enableIO+0x3a>
}
   81bb0:	bd10      	pop	{r4, pc}
   81bb2:	4b16      	ldr	r3, [pc, #88]	; (81c0c <usart_enableIO+0x68>)
   81bb4:	2011      	movs	r0, #17
   81bb6:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   81bb8:	4c15      	ldr	r4, [pc, #84]	; (81c10 <usart_enableIO+0x6c>)
   81bba:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bbe:	200a      	movs	r0, #10
   81bc0:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   81bc2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bc6:	200b      	movs	r0, #11
   81bc8:	47a0      	blx	r4
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81bca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81bce:	2130      	movs	r1, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81bd0:	4b10      	ldr	r3, [pc, #64]	; (81c14 <usart_enableIO+0x70>)
   81bd2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81bd6:	f883 1311 	strb.w	r1, [r3, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81bda:	601a      	str	r2, [r3, #0]
}
   81bdc:	bd10      	pop	{r4, pc}
   81bde:	4b0b      	ldr	r3, [pc, #44]	; (81c0c <usart_enableIO+0x68>)
   81be0:	2012      	movs	r0, #18
   81be2:	4798      	blx	r3
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
   81be4:	4c0a      	ldr	r4, [pc, #40]	; (81c10 <usart_enableIO+0x6c>)
   81be6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bea:	200c      	movs	r0, #12
   81bec:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
   81bee:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bf2:	200d      	movs	r0, #13
   81bf4:	47a0      	blx	r4
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81bf6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81bfa:	2130      	movs	r1, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81bfc:	4b05      	ldr	r3, [pc, #20]	; (81c14 <usart_enableIO+0x70>)
   81bfe:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81c02:	f883 1312 	strb.w	r1, [r3, #786]	; 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81c06:	601a      	str	r2, [r3, #0]
}
   81c08:	bd10      	pop	{r4, pc}
   81c0a:	bf00      	nop
   81c0c:	000834d5 	.word	0x000834d5
   81c10:	000836e1 	.word	0x000836e1
   81c14:	e000e100 	.word	0xe000e100

00081c18 <generic_isr>:
{
   81c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	status = usart_get_status(driver->usart);
   81c1c:	4b1e      	ldr	r3, [pc, #120]	; (81c98 <generic_isr+0x80>)
{
   81c1e:	4604      	mov	r4, r0
	status = usart_get_status(driver->usart);
   81c20:	6800      	ldr	r0, [r0, #0]
   81c22:	4798      	blx	r3
	if (status & US_CSR_RXRDY){
   81c24:	07c1      	lsls	r1, r0, #31
	status = usart_get_status(driver->usart);
   81c26:	4605      	mov	r5, r0
	if (status & US_CSR_RXRDY){
   81c28:	d403      	bmi.n	81c32 <generic_isr+0x1a>
	if (status & US_CSR_TXRDY){
   81c2a:	07ab      	lsls	r3, r5, #30
   81c2c:	d418      	bmi.n	81c60 <generic_isr+0x48>
}
   81c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
   81c32:	4620      	mov	r0, r4
   81c34:	f850 3b1c 	ldr.w	r3, [r0], #28
		add_to_circ_buf(&driver->rxbuf, temp, false);
   81c38:	2200      	movs	r2, #0
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
   81c3a:	699e      	ldr	r6, [r3, #24]
		add_to_circ_buf(&driver->rxbuf, temp, false);
   81c3c:	4f17      	ldr	r7, [pc, #92]	; (81c9c <generic_isr+0x84>)
   81c3e:	b2f6      	uxtb	r6, r6
   81c40:	4631      	mov	r1, r6
   81c42:	47b8      	blx	r7
        if (driver->cdc_enabled)
   81c44:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   81c48:	075a      	lsls	r2, r3, #29
   81c4a:	d41f      	bmi.n	81c8c <generic_isr+0x74>
        if (driver->rxbuf.dropped > 0) {
   81c4c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81c4e:	2b00      	cmp	r3, #0
   81c50:	d0eb      	beq.n	81c2a <generic_isr+0x12>
            CURRENT_ERRORS |= CW_ERR_USART_RX_OVERFLOW;
   81c52:	4a13      	ldr	r2, [pc, #76]	; (81ca0 <generic_isr+0x88>)
   81c54:	8813      	ldrh	r3, [r2, #0]
   81c56:	f043 0301 	orr.w	r3, r3, #1
   81c5a:	8013      	strh	r3, [r2, #0]
	if (status & US_CSR_TXRDY){
   81c5c:	07ab      	lsls	r3, r5, #30
   81c5e:	d5e6      	bpl.n	81c2e <generic_isr+0x16>
		if (circ_buf_has_char(&driver->txbuf)){
   81c60:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
   81c64:	4628      	mov	r0, r5
   81c66:	4b0f      	ldr	r3, [pc, #60]	; (81ca4 <generic_isr+0x8c>)
   81c68:	4798      	blx	r3
   81c6a:	b148      	cbz	r0, 81c80 <generic_isr+0x68>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
   81c6c:	4628      	mov	r0, r5
   81c6e:	4b0e      	ldr	r3, [pc, #56]	; (81ca8 <generic_isr+0x90>)
   81c70:	6824      	ldr	r4, [r4, #0]
   81c72:	4798      	blx	r3
   81c74:	4b0d      	ldr	r3, [pc, #52]	; (81cac <generic_isr+0x94>)
   81c76:	4601      	mov	r1, r0
   81c78:	4620      	mov	r0, r4
}
   81c7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
   81c7e:	4718      	bx	r3
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
   81c80:	6820      	ldr	r0, [r4, #0]
   81c82:	2102      	movs	r1, #2
}
   81c84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
   81c88:	4b09      	ldr	r3, [pc, #36]	; (81cb0 <generic_isr+0x98>)
   81c8a:	4718      	bx	r3
            add_to_circ_buf(&driver->rx_cdc_buf, temp, false);
   81c8c:	2200      	movs	r2, #0
   81c8e:	4631      	mov	r1, r6
   81c90:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   81c94:	47b8      	blx	r7
   81c96:	e7d9      	b.n	81c4c <generic_isr+0x34>
   81c98:	00083081 	.word	0x00083081
   81c9c:	00080141 	.word	0x00080141
   81ca0:	20071a98 	.word	0x20071a98
   81ca4:	0008018d 	.word	0x0008018d
   81ca8:	0008016d 	.word	0x0008016d
   81cac:	00083085 	.word	0x00083085
   81cb0:	00083079 	.word	0x00083079

00081cb4 <USART0_Handler>:
	generic_isr(&usart0_driver);
   81cb4:	4801      	ldr	r0, [pc, #4]	; (81cbc <USART0_Handler+0x8>)
   81cb6:	4b02      	ldr	r3, [pc, #8]	; (81cc0 <USART0_Handler+0xc>)
   81cb8:	4718      	bx	r3
   81cba:	bf00      	nop
   81cbc:	20070400 	.word	0x20070400
   81cc0:	00081c19 	.word	0x00081c19

00081cc4 <USART1_Handler>:
	generic_isr(&usart1_driver);
   81cc4:	4801      	ldr	r0, [pc, #4]	; (81ccc <USART1_Handler+0x8>)
   81cc6:	4b02      	ldr	r3, [pc, #8]	; (81cd0 <USART1_Handler+0xc>)
   81cc8:	4718      	bx	r3
   81cca:	bf00      	nop
   81ccc:	200706a0 	.word	0x200706a0
   81cd0:	00081c19 	.word	0x00081c19

00081cd4 <ctrl_usart_in>:
{
   81cd4:	b570      	push	{r4, r5, r6, lr}
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81cd6:	4b21      	ldr	r3, [pc, #132]	; (81d5c <ctrl_usart_in+0x88>)
   81cd8:	8858      	ldrh	r0, [r3, #2]
		if (port == 0) break;
   81cda:	0a02      	lsrs	r2, r0, #8
   81cdc:	d003      	beq.n	81ce6 <ctrl_usart_in+0x12>
   81cde:	2a01      	cmp	r2, #1
   81ce0:	d03a      	beq.n	81d58 <ctrl_usart_in+0x84>
        return false;
   81ce2:	2000      	movs	r0, #0
}
   81ce4:	bd70      	pop	{r4, r5, r6, pc}
		if (port == 0) break;
   81ce6:	4c1e      	ldr	r4, [pc, #120]	; (81d60 <ctrl_usart_in+0x8c>)
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   81ce8:	b2c0      	uxtb	r0, r0
   81cea:	2814      	cmp	r0, #20
   81cec:	d007      	beq.n	81cfe <ctrl_usart_in+0x2a>
   81cee:	2818      	cmp	r0, #24
   81cf0:	d01b      	beq.n	81d2a <ctrl_usart_in+0x56>
   81cf2:	f1a0 0010 	sub.w	r0, r0, #16
   81cf6:	fab0 f080 	clz	r0, r0
   81cfa:	0940      	lsrs	r0, r0, #5
}
   81cfc:	bd70      	pop	{r4, r5, r6, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
   81cfe:	88da      	ldrh	r2, [r3, #6]
   81d00:	2a03      	cmp	r2, #3
   81d02:	d9ee      	bls.n	81ce2 <ctrl_usart_in+0xe>
        udd_g_ctrlreq.payload_size = 4;
   81d04:	2104      	movs	r1, #4
        udd_g_ctrlreq.payload = respbuf;
   81d06:	4d17      	ldr	r5, [pc, #92]	; (81d64 <ctrl_usart_in+0x90>)
        cnt = circ_buf_count(&driver->rxbuf);
   81d08:	4a17      	ldr	r2, [pc, #92]	; (81d68 <ctrl_usart_in+0x94>)
   81d0a:	f104 001c 	add.w	r0, r4, #28
        udd_g_ctrlreq.payload = respbuf;
   81d0e:	609d      	str	r5, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   81d10:	8199      	strh	r1, [r3, #12]
        cnt = circ_buf_count(&driver->rxbuf);
   81d12:	4790      	blx	r2
        driver->rxbuf.dropped = 0; //clear dropped characters
   81d14:	2100      	movs	r1, #0
        cnt = circ_buf_count(&driver->rxbuf);
   81d16:	4606      	mov	r6, r0
        CURRENT_ERRORS &= ~CW_ERR_USART_RX_OVERFLOW;
   81d18:	4a14      	ldr	r2, [pc, #80]	; (81d6c <ctrl_usart_in+0x98>)
        driver->rxbuf.dropped = 0; //clear dropped characters
   81d1a:	6261      	str	r1, [r4, #36]	; 0x24
        CURRENT_ERRORS &= ~CW_ERR_USART_RX_OVERFLOW;
   81d1c:	8813      	ldrh	r3, [r2, #0]
        return true;
   81d1e:	2001      	movs	r0, #1
        CURRENT_ERRORS &= ~CW_ERR_USART_RX_OVERFLOW;
   81d20:	f023 0301 	bic.w	r3, r3, #1
   81d24:	8013      	strh	r3, [r2, #0]
        word2buf(respbuf, cnt);
   81d26:	602e      	str	r6, [r5, #0]
}
   81d28:	bd70      	pop	{r4, r5, r6, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
   81d2a:	88da      	ldrh	r2, [r3, #6]
   81d2c:	2a03      	cmp	r2, #3
   81d2e:	d9d8      	bls.n	81ce2 <ctrl_usart_in+0xe>
        udd_g_ctrlreq.payload_size = 4;
   81d30:	2104      	movs	r1, #4
        udd_g_ctrlreq.payload = respbuf;
   81d32:	4d0c      	ldr	r5, [pc, #48]	; (81d64 <ctrl_usart_in+0x90>)
        cnt = circ_buf_count(&driver->txbuf);
   81d34:	4a0c      	ldr	r2, [pc, #48]	; (81d68 <ctrl_usart_in+0x94>)
   81d36:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
        udd_g_ctrlreq.payload = respbuf;
   81d3a:	609d      	str	r5, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   81d3c:	8199      	strh	r1, [r3, #12]
        cnt = circ_buf_count(&driver->txbuf);
   81d3e:	4790      	blx	r2
        driver->txbuf.dropped = 0; //clear dropped characters
   81d40:	2100      	movs	r1, #0
        cnt = circ_buf_count(&driver->txbuf);
   81d42:	4606      	mov	r6, r0
        CURRENT_ERRORS &= ~CW_ERR_USART_TX_OVERFLOW;
   81d44:	4a09      	ldr	r2, [pc, #36]	; (81d6c <ctrl_usart_in+0x98>)
        driver->txbuf.dropped = 0; //clear dropped characters
   81d46:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        CURRENT_ERRORS &= ~CW_ERR_USART_TX_OVERFLOW;
   81d4a:	8813      	ldrh	r3, [r2, #0]
        return true;
   81d4c:	2001      	movs	r0, #1
        CURRENT_ERRORS &= ~CW_ERR_USART_TX_OVERFLOW;
   81d4e:	f023 0302 	bic.w	r3, r3, #2
   81d52:	8013      	strh	r3, [r2, #0]
        word2buf(respbuf, cnt);
   81d54:	602e      	str	r6, [r5, #0]
}
   81d56:	bd70      	pop	{r4, r5, r6, pc}
		if (port == 0) break;
   81d58:	4c05      	ldr	r4, [pc, #20]	; (81d70 <ctrl_usart_in+0x9c>)
   81d5a:	e7c5      	b.n	81ce8 <ctrl_usart_in+0x14>
   81d5c:	20072288 	.word	0x20072288
   81d60:	20070400 	.word	0x20070400
   81d64:	20071a18 	.word	0x20071a18
   81d68:	00080199 	.word	0x00080199
   81d6c:	20071a98 	.word	0x20071a98
   81d70:	200706a0 	.word	0x200706a0

00081d74 <configure_usart>:
{
   81d74:	b538      	push	{r3, r4, r5, lr}
    switch(stop_bits)
   81d76:	2a01      	cmp	r2, #1
{
   81d78:	4604      	mov	r4, r0
   81d7a:	f89d 5010 	ldrb.w	r5, [sp, #16]
    driver->usartopts.baudrate = baud;
   81d7e:	6041      	str	r1, [r0, #4]
    switch(stop_bits)
   81d80:	d00e      	beq.n	81da0 <configure_usart+0x2c>
   81d82:	2a02      	cmp	r2, #2
   81d84:	d008      	beq.n	81d98 <configure_usart+0x24>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   81d86:	2200      	movs	r2, #0
   81d88:	6102      	str	r2, [r0, #16]
    switch(parity)
   81d8a:	3b01      	subs	r3, #1
   81d8c:	2b03      	cmp	r3, #3
   81d8e:	d848      	bhi.n	81e22 <configure_usart+0xae>
   81d90:	e8df f003 	tbb	[pc, r3]
   81d94:	0a3d3a32 	.word	0x0a3d3a32
            driver->usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   81d98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81d9c:	6102      	str	r2, [r0, #16]
            break;
   81d9e:	e7f4      	b.n	81d8a <configure_usart+0x16>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   81da0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81da4:	6102      	str	r2, [r0, #16]
            break;
   81da6:	e7f0      	b.n	81d8a <configure_usart+0x16>
            driver->usartopts.parity_type = US_MR_PAR_SPACE;
   81da8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81dac:	60e3      	str	r3, [r4, #12]
    switch(dbits)
   81dae:	2d06      	cmp	r5, #6
   81db0:	d027      	beq.n	81e02 <configure_usart+0x8e>
   81db2:	2d07      	cmp	r5, #7
   81db4:	d032      	beq.n	81e1c <configure_usart+0xa8>
   81db6:	2d05      	cmp	r5, #5
   81db8:	d02d      	beq.n	81e16 <configure_usart+0xa2>
            driver->usartopts.char_length = US_MR_CHRL_8_BIT;
   81dba:	23c0      	movs	r3, #192	; 0xc0
   81dbc:	60a3      	str	r3, [r4, #8]
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   81dbe:	2200      	movs	r2, #0
    usart_enableIO(driver);
   81dc0:	4620      	mov	r0, r4
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   81dc2:	6162      	str	r2, [r4, #20]
    usart_enableIO(driver);
   81dc4:	4b19      	ldr	r3, [pc, #100]	; (81e2c <configure_usart+0xb8>)
   81dc6:	4798      	blx	r3
    driver->enabled = 1;
   81dc8:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
   81dcc:	4d18      	ldr	r5, [pc, #96]	; (81e30 <configure_usart+0xbc>)
    driver->enabled = 1;
   81dce:	f043 0302 	orr.w	r3, r3, #2
   81dd2:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
   81dd6:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   81dda:	47a8      	blx	r5
    init_circ_buf(&driver->rxbuf);
   81ddc:	f104 001c 	add.w	r0, r4, #28
   81de0:	47a8      	blx	r5
    init_circ_buf(&driver->rx_cdc_buf);
   81de2:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   81de6:	47a8      	blx	r5
    usart_init_rs232(driver->usart, &driver->usartopts, sysclk_get_cpu_hz());
   81de8:	4621      	mov	r1, r4
   81dea:	4a12      	ldr	r2, [pc, #72]	; (81e34 <configure_usart+0xc0>)
   81dec:	4b12      	ldr	r3, [pc, #72]	; (81e38 <configure_usart+0xc4>)
   81dee:	f851 0b04 	ldr.w	r0, [r1], #4
   81df2:	4798      	blx	r3
}
   81df4:	2001      	movs	r0, #1
   81df6:	bd38      	pop	{r3, r4, r5, pc}
            driver->usartopts.parity_type = US_MR_PAR_ODD;
   81df8:	f44f 7300 	mov.w	r3, #512	; 0x200
    switch(dbits)
   81dfc:	2d06      	cmp	r5, #6
            driver->usartopts.parity_type = US_MR_PAR_ODD;
   81dfe:	60e3      	str	r3, [r4, #12]
    switch(dbits)
   81e00:	d1d7      	bne.n	81db2 <configure_usart+0x3e>
            driver->usartopts.char_length = US_MR_CHRL_6_BIT;
   81e02:	2340      	movs	r3, #64	; 0x40
   81e04:	60a3      	str	r3, [r4, #8]
            break;
   81e06:	e7da      	b.n	81dbe <configure_usart+0x4a>
            driver->usartopts.parity_type = US_MR_PAR_EVEN;
   81e08:	2300      	movs	r3, #0
   81e0a:	60e3      	str	r3, [r4, #12]
            break;
   81e0c:	e7cf      	b.n	81dae <configure_usart+0x3a>
            driver->usartopts.parity_type = US_MR_PAR_MARK;
   81e0e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81e12:	60e3      	str	r3, [r4, #12]
            break;
   81e14:	e7cb      	b.n	81dae <configure_usart+0x3a>
            driver->usartopts.char_length = US_MR_CHRL_5_BIT;
   81e16:	2300      	movs	r3, #0
   81e18:	60a3      	str	r3, [r4, #8]
            break;
   81e1a:	e7d0      	b.n	81dbe <configure_usart+0x4a>
            driver->usartopts.char_length = US_MR_CHRL_7_BIT;
   81e1c:	2380      	movs	r3, #128	; 0x80
   81e1e:	60a3      	str	r3, [r4, #8]
            break;
   81e20:	e7cd      	b.n	81dbe <configure_usart+0x4a>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   81e22:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81e26:	60e3      	str	r3, [r4, #12]
            break;
   81e28:	e7c1      	b.n	81dae <configure_usart+0x3a>
   81e2a:	bf00      	nop
   81e2c:	00081ba5 	.word	0x00081ba5
   81e30:	00080135 	.word	0x00080135
   81e34:	0501bd00 	.word	0x0501bd00
   81e38:	00082fe5 	.word	0x00082fe5

00081e3c <ctrl_usart_out>:
{
   81e3c:	b570      	push	{r4, r5, r6, lr}
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81e3e:	4c21      	ldr	r4, [pc, #132]	; (81ec4 <ctrl_usart_out+0x88>)
{
   81e40:	b082      	sub	sp, #8
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81e42:	8863      	ldrh	r3, [r4, #2]
		if (port == 0) break;
   81e44:	0a1a      	lsrs	r2, r3, #8
   81e46:	d003      	beq.n	81e50 <ctrl_usart_out+0x14>
   81e48:	2a01      	cmp	r2, #1
   81e4a:	d038      	beq.n	81ebe <ctrl_usart_out+0x82>
}
   81e4c:	b002      	add	sp, #8
   81e4e:	bd70      	pop	{r4, r5, r6, pc}
		if (port == 0) break;
   81e50:	4d1d      	ldr	r5, [pc, #116]	; (81ec8 <ctrl_usart_out+0x8c>)
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   81e52:	b2db      	uxtb	r3, r3
   81e54:	2b11      	cmp	r3, #17
   81e56:	d015      	beq.n	81e84 <ctrl_usart_out+0x48>
   81e58:	2b12      	cmp	r3, #18
   81e5a:	d023      	beq.n	81ea4 <ctrl_usart_out+0x68>
   81e5c:	2b10      	cmp	r3, #16
   81e5e:	d1f5      	bne.n	81e4c <ctrl_usart_out+0x10>
        if (udd_g_ctrlreq.req.wLength != 7) return;
   81e60:	88e3      	ldrh	r3, [r4, #6]
   81e62:	2b07      	cmp	r3, #7
   81e64:	d1f2      	bne.n	81e4c <ctrl_usart_out+0x10>
        buf2word(baud, udd_g_ctrlreq.payload);
   81e66:	68a2      	ldr	r2, [r4, #8]
		usart_enableIO(driver);
   81e68:	4628      	mov	r0, r5
   81e6a:	4b18      	ldr	r3, [pc, #96]	; (81ecc <ctrl_usart_out+0x90>)
        buf2word(baud, udd_g_ctrlreq.payload);
   81e6c:	6816      	ldr	r6, [r2, #0]
		usart_enableIO(driver);
   81e6e:	4798      	blx	r3
        configure_usart(driver, baud, udd_g_ctrlreq.payload[4], 
   81e70:	68a0      	ldr	r0, [r4, #8]
   81e72:	4631      	mov	r1, r6
   81e74:	7943      	ldrb	r3, [r0, #5]
   81e76:	7902      	ldrb	r2, [r0, #4]
   81e78:	7980      	ldrb	r0, [r0, #6]
   81e7a:	4c15      	ldr	r4, [pc, #84]	; (81ed0 <ctrl_usart_out+0x94>)
   81e7c:	9000      	str	r0, [sp, #0]
   81e7e:	4628      	mov	r0, r5
   81e80:	47a0      	blx	r4
        return ;
   81e82:	e7e3      	b.n	81e4c <ctrl_usart_out+0x10>
		usart_enableIO(driver);
   81e84:	4628      	mov	r0, r5
   81e86:	4b11      	ldr	r3, [pc, #68]	; (81ecc <ctrl_usart_out+0x90>)
   81e88:	4798      	blx	r3
        usart_enable_rx(driver->usart);
   81e8a:	6828      	ldr	r0, [r5, #0]
   81e8c:	4b11      	ldr	r3, [pc, #68]	; (81ed4 <ctrl_usart_out+0x98>)
   81e8e:	4798      	blx	r3
        usart_enable_tx(driver->usart);
   81e90:	6828      	ldr	r0, [r5, #0]
   81e92:	4b11      	ldr	r3, [pc, #68]	; (81ed8 <ctrl_usart_out+0x9c>)
   81e94:	4798      	blx	r3
        usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   81e96:	2101      	movs	r1, #1
   81e98:	6828      	ldr	r0, [r5, #0]
   81e9a:	4b10      	ldr	r3, [pc, #64]	; (81edc <ctrl_usart_out+0xa0>)
}
   81e9c:	b002      	add	sp, #8
   81e9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   81ea2:	4718      	bx	r3
        usart_disable_rx(driver->usart);
   81ea4:	6828      	ldr	r0, [r5, #0]
   81ea6:	4b0e      	ldr	r3, [pc, #56]	; (81ee0 <ctrl_usart_out+0xa4>)
   81ea8:	4798      	blx	r3
        usart_disable_tx(driver->usart);
   81eaa:	6828      	ldr	r0, [r5, #0]
   81eac:	4b0d      	ldr	r3, [pc, #52]	; (81ee4 <ctrl_usart_out+0xa8>)
   81eae:	4798      	blx	r3
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   81eb0:	2103      	movs	r1, #3
   81eb2:	6828      	ldr	r0, [r5, #0]
   81eb4:	4b0c      	ldr	r3, [pc, #48]	; (81ee8 <ctrl_usart_out+0xac>)
}
   81eb6:	b002      	add	sp, #8
   81eb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   81ebc:	4718      	bx	r3
		if (port == 0) break;
   81ebe:	4d0b      	ldr	r5, [pc, #44]	; (81eec <ctrl_usart_out+0xb0>)
   81ec0:	e7c7      	b.n	81e52 <ctrl_usart_out+0x16>
   81ec2:	bf00      	nop
   81ec4:	20072288 	.word	0x20072288
   81ec8:	20070400 	.word	0x20070400
   81ecc:	00081ba5 	.word	0x00081ba5
   81ed0:	00081d75 	.word	0x00081d75
   81ed4:	00083065 	.word	0x00083065
   81ed8:	00083055 	.word	0x00083055
   81edc:	00083075 	.word	0x00083075
   81ee0:	0008306d 	.word	0x0008306d
   81ee4:	0008305d 	.word	0x0008305d
   81ee8:	00083079 	.word	0x00083079
   81eec:	200706a0 	.word	0x200706a0

00081ef0 <ctrl_usart_cb>:
	ctrl_usart_out();
   81ef0:	4b00      	ldr	r3, [pc, #0]	; (81ef4 <ctrl_usart_cb+0x4>)
   81ef2:	4718      	bx	r3
   81ef4:	00081e3d 	.word	0x00081e3d

00081ef8 <usart_driver_putchar>:
{
   81ef8:	b570      	push	{r4, r5, r6, lr}
   81efa:	4604      	mov	r4, r0
    add_to_circ_buf(&driver->txbuf, data, false);
   81efc:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
   81f00:	2200      	movs	r2, #0
   81f02:	4628      	mov	r0, r5
   81f04:	4b0d      	ldr	r3, [pc, #52]	; (81f3c <usart_driver_putchar+0x44>)
   81f06:	4798      	blx	r3
	if ((usart_get_interrupt_mask(driver->usart) & US_CSR_TXRDY) == 0) {
   81f08:	6820      	ldr	r0, [r4, #0]
   81f0a:	4b0d      	ldr	r3, [pc, #52]	; (81f40 <usart_driver_putchar+0x48>)
   81f0c:	4798      	blx	r3
   81f0e:	0782      	lsls	r2, r0, #30
   81f10:	d500      	bpl.n	81f14 <usart_driver_putchar+0x1c>
}
   81f12:	bd70      	pop	{r4, r5, r6, pc}
		if ((usart_get_status(driver->usart) & US_CSR_TXRDY))
   81f14:	4b0b      	ldr	r3, [pc, #44]	; (81f44 <usart_driver_putchar+0x4c>)
   81f16:	6820      	ldr	r0, [r4, #0]
   81f18:	4798      	blx	r3
   81f1a:	0783      	lsls	r3, r0, #30
   81f1c:	d405      	bmi.n	81f2a <usart_driver_putchar+0x32>
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
   81f1e:	6820      	ldr	r0, [r4, #0]
   81f20:	2102      	movs	r1, #2
}
   81f22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
   81f26:	4b08      	ldr	r3, [pc, #32]	; (81f48 <usart_driver_putchar+0x50>)
   81f28:	4718      	bx	r3
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));
   81f2a:	4628      	mov	r0, r5
   81f2c:	4b07      	ldr	r3, [pc, #28]	; (81f4c <usart_driver_putchar+0x54>)
   81f2e:	6825      	ldr	r5, [r4, #0]
   81f30:	4798      	blx	r3
   81f32:	4b07      	ldr	r3, [pc, #28]	; (81f50 <usart_driver_putchar+0x58>)
   81f34:	4601      	mov	r1, r0
   81f36:	4628      	mov	r0, r5
   81f38:	4798      	blx	r3
   81f3a:	e7f0      	b.n	81f1e <usart_driver_putchar+0x26>
   81f3c:	00080141 	.word	0x00080141
   81f40:	0008307d 	.word	0x0008307d
   81f44:	00083081 	.word	0x00083081
   81f48:	00083075 	.word	0x00083075
   81f4c:	0008016d 	.word	0x0008016d
   81f50:	00083085 	.word	0x00083085

00081f54 <ctrl_usart_cb_data>:
{		
   81f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81f56:	4d11      	ldr	r5, [pc, #68]	; (81f9c <ctrl_usart_cb_data+0x48>)
   81f58:	886b      	ldrh	r3, [r5, #2]
		if (port == 0) break;
   81f5a:	0a1b      	lsrs	r3, r3, #8
   81f5c:	d01c      	beq.n	81f98 <ctrl_usart_cb_data+0x44>
   81f5e:	2b01      	cmp	r3, #1
   81f60:	d000      	beq.n	81f64 <ctrl_usart_cb_data+0x10>
}
   81f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (port == 0) break;
   81f64:	4e0e      	ldr	r6, [pc, #56]	; (81fa0 <ctrl_usart_cb_data+0x4c>)
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   81f66:	88eb      	ldrh	r3, [r5, #6]
   81f68:	89aa      	ldrh	r2, [r5, #12]
   81f6a:	429a      	cmp	r2, r3
   81f6c:	d3f9      	bcc.n	81f62 <ctrl_usart_cb_data+0xe>
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81f6e:	b14b      	cbz	r3, 81f84 <ctrl_usart_cb_data+0x30>
   81f70:	2400      	movs	r4, #0
   81f72:	4f0c      	ldr	r7, [pc, #48]	; (81fa4 <ctrl_usart_cb_data+0x50>)
		usart_driver_putchar(driver, udd_g_ctrlreq.payload[i]);
   81f74:	68ab      	ldr	r3, [r5, #8]
   81f76:	4630      	mov	r0, r6
   81f78:	5d19      	ldrb	r1, [r3, r4]
   81f7a:	47b8      	blx	r7
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81f7c:	88eb      	ldrh	r3, [r5, #6]
   81f7e:	3401      	adds	r4, #1
   81f80:	42a3      	cmp	r3, r4
   81f82:	dcf7      	bgt.n	81f74 <ctrl_usart_cb_data+0x20>
    if (driver->txbuf.dropped > 0) {
   81f84:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   81f88:	2b00      	cmp	r3, #0
   81f8a:	d0ea      	beq.n	81f62 <ctrl_usart_cb_data+0xe>
        CURRENT_ERRORS |= CW_ERR_USART_TX_OVERFLOW;
   81f8c:	4a06      	ldr	r2, [pc, #24]	; (81fa8 <ctrl_usart_cb_data+0x54>)
   81f8e:	8813      	ldrh	r3, [r2, #0]
   81f90:	f043 0302 	orr.w	r3, r3, #2
   81f94:	8013      	strh	r3, [r2, #0]
}
   81f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (port == 0) break;
   81f98:	4e04      	ldr	r6, [pc, #16]	; (81fac <ctrl_usart_cb_data+0x58>)
   81f9a:	e7e4      	b.n	81f66 <ctrl_usart_cb_data+0x12>
   81f9c:	20072288 	.word	0x20072288
   81fa0:	200706a0 	.word	0x200706a0
   81fa4:	00081ef9 	.word	0x00081ef9
   81fa8:	20071a98 	.word	0x20071a98
   81fac:	20070400 	.word	0x20070400

00081fb0 <naeusart_register_handlers>:
{
   81fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81fb4:	2400      	movs	r4, #0
   81fb6:	4f20      	ldr	r7, [pc, #128]	; (82038 <naeusart_register_handlers+0x88>)
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
   81fb8:	4e20      	ldr	r6, [pc, #128]	; (8203c <naeusart_register_handlers+0x8c>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81fba:	4d21      	ldr	r5, [pc, #132]	; (82040 <naeusart_register_handlers+0x90>)
		if (port == 0) break;
   81fbc:	b2e3      	uxtb	r3, r4
   81fbe:	b164      	cbz	r4, 81fda <naeusart_register_handlers+0x2a>
   81fc0:	2b01      	cmp	r3, #1
   81fc2:	d036      	beq.n	82032 <naeusart_register_handlers+0x82>
	for (uint8_t i = 0; i < 4; i++) {
   81fc4:	3401      	adds	r4, #1
   81fc6:	2c04      	cmp	r4, #4
   81fc8:	d1f8      	bne.n	81fbc <naeusart_register_handlers+0xc>
    naeusb_add_in_handler(usart_setup_in_received);
   81fca:	4b1e      	ldr	r3, [pc, #120]	; (82044 <naeusart_register_handlers+0x94>)
   81fcc:	481e      	ldr	r0, [pc, #120]	; (82048 <naeusart_register_handlers+0x98>)
   81fce:	4798      	blx	r3
}
   81fd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    naeusb_add_out_handler(usart_setup_out_received);
   81fd4:	481d      	ldr	r0, [pc, #116]	; (8204c <naeusart_register_handlers+0x9c>)
   81fd6:	4b1e      	ldr	r3, [pc, #120]	; (82050 <naeusart_register_handlers+0xa0>)
   81fd8:	4718      	bx	r3
		if (port == 0) break;
   81fda:	4b1e      	ldr	r3, [pc, #120]	; (82054 <naeusart_register_handlers+0xa4>)
    if (driver->usart_id == 0) {
   81fdc:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
   81fe0:	b1a3      	cbz	r3, 8200c <naeusart_register_handlers+0x5c>
    } else if (driver->usart_id == 1) {
   81fe2:	2b01      	cmp	r3, #1
   81fe4:	d1ee      	bne.n	81fc4 <naeusart_register_handlers+0x14>
   81fe6:	2012      	movs	r0, #18
   81fe8:	47b8      	blx	r7
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
   81fea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81fee:	200c      	movs	r0, #12
   81ff0:	47b0      	blx	r6
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
   81ff2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81ff6:	200d      	movs	r0, #13
   81ff8:	47b0      	blx	r6
   81ffa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81ffe:	2230      	movs	r2, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   82000:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   82004:	f885 2312 	strb.w	r2, [r5, #786]	; 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   82008:	602b      	str	r3, [r5, #0]
   8200a:	e7db      	b.n	81fc4 <naeusart_register_handlers+0x14>
   8200c:	2011      	movs	r0, #17
   8200e:	47b8      	blx	r7
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   82010:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82014:	200a      	movs	r0, #10
   82016:	47b0      	blx	r6
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   82018:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8201c:	200b      	movs	r0, #11
   8201e:	47b0      	blx	r6
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   82020:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   82024:	2230      	movs	r2, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   82026:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   8202a:	f885 2311 	strb.w	r2, [r5, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8202e:	602b      	str	r3, [r5, #0]
   82030:	e7c8      	b.n	81fc4 <naeusart_register_handlers+0x14>
		if (port == 0) break;
   82032:	4b09      	ldr	r3, [pc, #36]	; (82058 <naeusart_register_handlers+0xa8>)
   82034:	e7d2      	b.n	81fdc <naeusart_register_handlers+0x2c>
   82036:	bf00      	nop
   82038:	000834d5 	.word	0x000834d5
   8203c:	000836e1 	.word	0x000836e1
   82040:	e000e100 	.word	0xe000e100
   82044:	00081825 	.word	0x00081825
   82048:	000820a9 	.word	0x000820a9
   8204c:	00081b11 	.word	0x00081b11
   82050:	0008184d 	.word	0x0008184d
   82054:	20070400 	.word	0x20070400
   82058:	200706a0 	.word	0x200706a0

0008205c <naeusb_cdc_settings_in>:
{
   8205c:	b500      	push	{lr}
    udd_g_ctrlreq.payload = respbuf;
   8205e:	4a0e      	ldr	r2, [pc, #56]	; (82098 <naeusb_cdc_settings_in+0x3c>)
		respbuf[i] = 0;
   82060:	f04f 0e00 	mov.w	lr, #0
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   82064:	88d1      	ldrh	r1, [r2, #6]
            respbuf[i] = driver->cdc_settings_change;
   82066:	480d      	ldr	r0, [pc, #52]	; (8209c <naeusb_cdc_settings_in+0x40>)
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   82068:	2904      	cmp	r1, #4
   8206a:	bf28      	it	cs
   8206c:	2104      	movcs	r1, #4
            respbuf[i] = driver->cdc_settings_change;
   8206e:	4b0c      	ldr	r3, [pc, #48]	; (820a0 <naeusb_cdc_settings_in+0x44>)
   82070:	f890 c29c 	ldrb.w	ip, [r0, #668]	; 0x29c
   82074:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
   82078:	4b0a      	ldr	r3, [pc, #40]	; (820a4 <naeusb_cdc_settings_in+0x48>)
   8207a:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
   8207e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   82082:	7058      	strb	r0, [r3, #1]
   82084:	f883 c000 	strb.w	ip, [r3]
    udd_g_ctrlreq.payload = respbuf;
   82088:	6093      	str	r3, [r2, #8]
		respbuf[i] = 0;
   8208a:	f8a3 e002 	strh.w	lr, [r3, #2]
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   8208e:	8191      	strh	r1, [r2, #12]
}
   82090:	2001      	movs	r0, #1
   82092:	f85d fb04 	ldr.w	pc, [sp], #4
   82096:	bf00      	nop
   82098:	20072288 	.word	0x20072288
   8209c:	20070400 	.word	0x20070400
   820a0:	200706a0 	.word	0x200706a0
   820a4:	20071a18 	.word	0x20071a18

000820a8 <usart_setup_in_received>:

bool usart_setup_in_received(void)
{
   820a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    switch(udd_g_ctrlreq.req.bRequest) {
   820ac:	4d1d      	ldr	r5, [pc, #116]	; (82124 <usart_setup_in_received+0x7c>)
   820ae:	786b      	ldrb	r3, [r5, #1]
   820b0:	2b1b      	cmp	r3, #27
   820b2:	d006      	beq.n	820c2 <usart_setup_in_received+0x1a>
   820b4:	2b31      	cmp	r3, #49	; 0x31
   820b6:	d02a      	beq.n	8210e <usart_setup_in_received+0x66>
   820b8:	2b1a      	cmp	r3, #26
   820ba:	d006      	beq.n	820ca <usart_setup_in_received+0x22>
        
    case REQ_USART0_DATA:						
        0;
        unsigned int cnt;
		usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
		if (!driver) return false;
   820bc:	2000      	movs	r0, #0
	case REQ_CDC_SETTINGS_EN:
        return naeusb_cdc_settings_in();
        break;
    }
    return false;
}
   820be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return ctrl_usart_in();
   820c2:	4b19      	ldr	r3, [pc, #100]	; (82128 <usart_setup_in_received+0x80>)
}
   820c4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return ctrl_usart_in();
   820c8:	4718      	bx	r3
		usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   820ca:	886b      	ldrh	r3, [r5, #2]
		if (port == 0) break;
   820cc:	0a1b      	lsrs	r3, r3, #8
   820ce:	d026      	beq.n	8211e <usart_setup_in_received+0x76>
   820d0:	2b01      	cmp	r3, #1
   820d2:	d1f3      	bne.n	820bc <usart_setup_in_received+0x14>
   820d4:	4e15      	ldr	r6, [pc, #84]	; (8212c <usart_setup_in_received+0x84>)
        unsigned int data = (udd_g_ctrlreq.req.wLength > 128) ? 128 : udd_g_ctrlreq.req.wLength;
   820d6:	88eb      	ldrh	r3, [r5, #6]
   820d8:	2b80      	cmp	r3, #128	; 0x80
   820da:	4699      	mov	r9, r3
   820dc:	bf28      	it	cs
   820de:	f04f 0980 	movcs.w	r9, #128	; 0x80
        for(cnt = 0; cnt < data; cnt++){
   820e2:	b1c3      	cbz	r3, 82116 <usart_setup_in_received+0x6e>
   820e4:	f8df 8048 	ldr.w	r8, [pc, #72]	; 82130 <usart_setup_in_received+0x88>
   820e8:	f8df a048 	ldr.w	sl, [pc, #72]	; 82134 <usart_setup_in_received+0x8c>
   820ec:	4644      	mov	r4, r8
    return get_from_circ_buf(&driver->rxbuf);
   820ee:	361c      	adds	r6, #28
   820f0:	eb08 0709 	add.w	r7, r8, r9
   820f4:	4630      	mov	r0, r6
   820f6:	47d0      	blx	sl
            respbuf[cnt] = usart_driver_getchar(driver);
   820f8:	f804 0b01 	strb.w	r0, [r4], #1
        for(cnt = 0; cnt < data; cnt++){
   820fc:	42a7      	cmp	r7, r4
   820fe:	d1f9      	bne.n	820f4 <usart_setup_in_received+0x4c>
        return true;
   82100:	2001      	movs	r0, #1
        udd_g_ctrlreq.payload = respbuf;
   82102:	f8c5 8008 	str.w	r8, [r5, #8]
        udd_g_ctrlreq.payload_size = cnt;
   82106:	f8a5 900c 	strh.w	r9, [r5, #12]
}
   8210a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return naeusb_cdc_settings_in();
   8210e:	4b0a      	ldr	r3, [pc, #40]	; (82138 <usart_setup_in_received+0x90>)
}
   82110:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return naeusb_cdc_settings_in();
   82114:	4718      	bx	r3
        for(cnt = 0; cnt < data; cnt++){
   82116:	4699      	mov	r9, r3
   82118:	f8df 8014 	ldr.w	r8, [pc, #20]	; 82130 <usart_setup_in_received+0x88>
   8211c:	e7f0      	b.n	82100 <usart_setup_in_received+0x58>
		if (port == 0) break;
   8211e:	4e07      	ldr	r6, [pc, #28]	; (8213c <usart_setup_in_received+0x94>)
   82120:	e7d9      	b.n	820d6 <usart_setup_in_received+0x2e>
   82122:	bf00      	nop
   82124:	20072288 	.word	0x20072288
   82128:	00081cd5 	.word	0x00081cd5
   8212c:	200706a0 	.word	0x200706a0
   82130:	20071a18 	.word	0x20071a18
   82134:	0008016d 	.word	0x0008016d
   82138:	0008205d 	.word	0x0008205d
   8213c:	20070400 	.word	0x20070400

00082140 <cdc_enable>:
   82140:	b150      	cbz	r0, 82158 <cdc_enable+0x18>
   82142:	2801      	cmp	r0, #1
   82144:	d10a      	bne.n	8215c <cdc_enable+0x1c>
   82146:	4b09      	ldr	r3, [pc, #36]	; (8216c <cdc_enable+0x2c>)
    driver->cdc_enabled = 1;
   82148:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
}
   8214c:	2001      	movs	r0, #1
    driver->cdc_enabled = 1;
   8214e:	f042 0204 	orr.w	r2, r2, #4
   82152:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
   82156:	4770      	bx	lr
		if (port == 0) break;
   82158:	4b05      	ldr	r3, [pc, #20]	; (82170 <cdc_enable+0x30>)
   8215a:	e7f5      	b.n	82148 <cdc_enable+0x8>
    driver->cdc_enabled = 1;
   8215c:	2200      	movs	r2, #0
   8215e:	f892 329c 	ldrb.w	r3, [r2, #668]	; 0x29c
   82162:	f362 0382 	bfi	r3, r2, #2, #1
   82166:	f882 329c 	strb.w	r3, [r2, #668]	; 0x29c
   8216a:	deff      	udf	#255	; 0xff
   8216c:	200706a0 	.word	0x200706a0
   82170:	20070400 	.word	0x20070400

00082174 <cdc_disable>:
		if (port == 0) break;
   82174:	b160      	cbz	r0, 82190 <cdc_disable+0x1c>
   82176:	2801      	cmp	r0, #1
   82178:	d10c      	bne.n	82194 <cdc_disable+0x20>
   8217a:	4b0a      	ldr	r3, [pc, #40]	; (821a4 <cdc_disable+0x30>)
    NAEUSB_CDC_IS_RUNNING = false;
   8217c:	2000      	movs	r0, #0
    driver->cdc_enabled = 0;
   8217e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
    NAEUSB_CDC_IS_RUNNING = false;
   82182:	4909      	ldr	r1, [pc, #36]	; (821a8 <cdc_disable+0x34>)
    driver->cdc_enabled = 0;
   82184:	f36f 0282 	bfc	r2, #2, #1
   82188:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    NAEUSB_CDC_IS_RUNNING = false;
   8218c:	7008      	strb	r0, [r1, #0]
}
   8218e:	4770      	bx	lr
		if (port == 0) break;
   82190:	4b06      	ldr	r3, [pc, #24]	; (821ac <cdc_disable+0x38>)
   82192:	e7f3      	b.n	8217c <cdc_disable+0x8>
    driver->cdc_enabled = 0;
   82194:	2200      	movs	r2, #0
   82196:	f892 329c 	ldrb.w	r3, [r2, #668]	; 0x29c
   8219a:	f362 0382 	bfi	r3, r2, #2, #1
   8219e:	f882 329c 	strb.w	r3, [r2, #668]	; 0x29c
   821a2:	deff      	udf	#255	; 0xff
   821a4:	200706a0 	.word	0x200706a0
   821a8:	20071a9b 	.word	0x20071a9b
   821ac:	20070400 	.word	0x20070400

000821b0 <my_callback_rx_notify>:
{
   821b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (port == 0) break;
   821b4:	4681      	mov	r9, r0
   821b6:	b388      	cbz	r0, 8221c <my_callback_rx_notify+0x6c>
   821b8:	2801      	cmp	r0, #1
   821ba:	d131      	bne.n	82220 <my_callback_rx_notify+0x70>
   821bc:	4f1c      	ldr	r7, [pc, #112]	; (82230 <my_callback_rx_notify+0x80>)
    NAEUSB_CDC_IS_RUNNING = true;
   821be:	2101      	movs	r1, #1
    if (driver->cdc_enabled && driver->enabled) {
   821c0:	f897 329c 	ldrb.w	r3, [r7, #668]	; 0x29c
    NAEUSB_CDC_IS_RUNNING = true;
   821c4:	4a1b      	ldr	r2, [pc, #108]	; (82234 <my_callback_rx_notify+0x84>)
    if (driver->cdc_enabled && driver->enabled) {
   821c6:	f003 0306 	and.w	r3, r3, #6
   821ca:	2b06      	cmp	r3, #6
    NAEUSB_CDC_IS_RUNNING = true;
   821cc:	7011      	strb	r1, [r2, #0]
    if (driver->cdc_enabled && driver->enabled) {
   821ce:	d001      	beq.n	821d4 <my_callback_rx_notify+0x24>
}
   821d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   821d4:	4648      	mov	r0, r9
   821d6:	f8df a060 	ldr.w	sl, [pc, #96]	; 82238 <my_callback_rx_notify+0x88>
   821da:	47d0      	blx	sl
        while (num_char > 0) {
   821dc:	4605      	mov	r5, r0
   821de:	2800      	cmp	r0, #0
   821e0:	d0f6      	beq.n	821d0 <my_callback_rx_notify+0x20>
   821e2:	f8df b058 	ldr.w	fp, [pc, #88]	; 8223c <my_callback_rx_notify+0x8c>
   821e6:	4e16      	ldr	r6, [pc, #88]	; (82240 <my_callback_rx_notify+0x90>)
   821e8:	f8df 8058 	ldr.w	r8, [pc, #88]	; 82244 <my_callback_rx_notify+0x94>
            num_char = (num_char > 512) ? 512 : num_char;
   821ec:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   821f0:	bf28      	it	cs
   821f2:	f44f 7500 	movcs.w	r5, #512	; 0x200
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   821f6:	4631      	mov	r1, r6
   821f8:	4648      	mov	r0, r9
   821fa:	462a      	mov	r2, r5
            for (uint16_t i = 0; i < num_char; i++) {
   821fc:	2400      	movs	r4, #0
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   821fe:	47d8      	blx	fp
                usart_driver_putchar(driver, uart_buf[i]);
   82200:	5d31      	ldrb	r1, [r6, r4]
            for (uint16_t i = 0; i < num_char; i++) {
   82202:	3401      	adds	r4, #1
                usart_driver_putchar(driver, uart_buf[i]);
   82204:	4638      	mov	r0, r7
            for (uint16_t i = 0; i < num_char; i++) {
   82206:	b2a4      	uxth	r4, r4
                usart_driver_putchar(driver, uart_buf[i]);
   82208:	47c0      	blx	r8
            for (uint16_t i = 0; i < num_char; i++) {
   8220a:	42ac      	cmp	r4, r5
   8220c:	d3f8      	bcc.n	82200 <my_callback_rx_notify+0x50>
            num_char = udi_cdc_multi_get_nb_received_data(port);
   8220e:	4648      	mov	r0, r9
   82210:	47d0      	blx	sl
        while (num_char > 0) {
   82212:	4605      	mov	r5, r0
   82214:	2800      	cmp	r0, #0
   82216:	d1e9      	bne.n	821ec <my_callback_rx_notify+0x3c>
}
   82218:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (port == 0) break;
   8221c:	4f0a      	ldr	r7, [pc, #40]	; (82248 <my_callback_rx_notify+0x98>)
   8221e:	e7ce      	b.n	821be <my_callback_rx_notify+0xe>
    NAEUSB_CDC_IS_RUNNING = true;
   82220:	2101      	movs	r1, #1
    if (driver->cdc_enabled && driver->enabled) {
   82222:	2300      	movs	r3, #0
    NAEUSB_CDC_IS_RUNNING = true;
   82224:	4a03      	ldr	r2, [pc, #12]	; (82234 <my_callback_rx_notify+0x84>)
   82226:	7011      	strb	r1, [r2, #0]
    if (driver->cdc_enabled && driver->enabled) {
   82228:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
   8222c:	deff      	udf	#255	; 0xff
   8222e:	bf00      	nop
   82230:	200706a0 	.word	0x200706a0
   82234:	20071a9b 	.word	0x20071a9b
   82238:	000859e1 	.word	0x000859e1
   8223c:	00085a31 	.word	0x00085a31
   82240:	20071a9c 	.word	0x20071a9c
   82244:	00081ef9 	.word	0x00081ef9
   82248:	20070400 	.word	0x20070400

0008224c <my_callback_config>:
{
   8224c:	b530      	push	{r4, r5, lr}
   8224e:	b083      	sub	sp, #12
		if (port == 0) break;
   82250:	b340      	cbz	r0, 822a4 <my_callback_config+0x58>
   82252:	2801      	cmp	r0, #1
   82254:	d128      	bne.n	822a8 <my_callback_config+0x5c>
   82256:	4c16      	ldr	r4, [pc, #88]	; (822b0 <my_callback_config+0x64>)
    if (driver->cdc_enabled) {
   82258:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   8225c:	075a      	lsls	r2, r3, #29
   8225e:	d502      	bpl.n	82266 <my_callback_config+0x1a>
        switch(cfg->bParityType) {
   82260:	794b      	ldrb	r3, [r1, #5]
   82262:	2b04      	cmp	r3, #4
   82264:	d901      	bls.n	8226a <my_callback_config+0x1e>
}
   82266:	b003      	add	sp, #12
   82268:	bd30      	pop	{r4, r5, pc}
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   8226a:	2300      	movs	r3, #0
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
   8226c:	798a      	ldrb	r2, [r1, #6]
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   8226e:	4620      	mov	r0, r4
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
   82270:	3a05      	subs	r2, #5
   82272:	0192      	lsls	r2, r2, #6
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   82274:	b2d2      	uxtb	r2, r2
   82276:	6809      	ldr	r1, [r1, #0]
   82278:	4d0e      	ldr	r5, [pc, #56]	; (822b4 <my_callback_config+0x68>)
   8227a:	9200      	str	r2, [sp, #0]
   8227c:	461a      	mov	r2, r3
   8227e:	47a8      	blx	r5
		if (!(usart_get_interrupt_mask(driver->usart) & UART_IER_RXRDY)) {
   82280:	4b0d      	ldr	r3, [pc, #52]	; (822b8 <my_callback_config+0x6c>)
   82282:	6820      	ldr	r0, [r4, #0]
   82284:	4798      	blx	r3
   82286:	07c3      	lsls	r3, r0, #31
   82288:	d4ed      	bmi.n	82266 <my_callback_config+0x1a>
			usart_enable_rx(driver->usart);
   8228a:	6820      	ldr	r0, [r4, #0]
   8228c:	4b0b      	ldr	r3, [pc, #44]	; (822bc <my_callback_config+0x70>)
   8228e:	4798      	blx	r3
			usart_enable_tx(driver->usart);
   82290:	6820      	ldr	r0, [r4, #0]
   82292:	4b0b      	ldr	r3, [pc, #44]	; (822c0 <my_callback_config+0x74>)
   82294:	4798      	blx	r3
			usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   82296:	2101      	movs	r1, #1
   82298:	6820      	ldr	r0, [r4, #0]
   8229a:	4b0a      	ldr	r3, [pc, #40]	; (822c4 <my_callback_config+0x78>)
}
   8229c:	b003      	add	sp, #12
   8229e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   822a2:	4718      	bx	r3
		if (port == 0) break;
   822a4:	4c08      	ldr	r4, [pc, #32]	; (822c8 <my_callback_config+0x7c>)
   822a6:	e7d7      	b.n	82258 <my_callback_config+0xc>
    if (driver->cdc_enabled) {
   822a8:	2300      	movs	r3, #0
   822aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
   822ae:	deff      	udf	#255	; 0xff
   822b0:	200706a0 	.word	0x200706a0
   822b4:	00081d75 	.word	0x00081d75
   822b8:	0008307d 	.word	0x0008307d
   822bc:	00083065 	.word	0x00083065
   822c0:	00083055 	.word	0x00083055
   822c4:	00083075 	.word	0x00083075
   822c8:	20070400 	.word	0x20070400

000822cc <cdc_send_to_pc>:

void cdc_send_to_pc(void)
{
   822cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   822d0:	2500      	movs	r5, #0
   822d2:	2401      	movs	r4, #1
    // if (!NAEUSB_CDC_IS_RUNNING) return; //fixes Pro streaming requiring connection to CDC
	for (uint8_t i = 0; i < 4; i++) {
		usart_driver *driver = get_nth_available_driver(i);
		if (!driver) continue;
		if (driver->cdc_enabled && driver->enabled && udi_cdc_multi_is_tx_ready(i)) {
   822d4:	f8df a060 	ldr.w	sl, [pc, #96]	; 82338 <cdc_send_to_pc+0x6c>
   822d8:	4f18      	ldr	r7, [pc, #96]	; (8233c <cdc_send_to_pc+0x70>)
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   822da:	f8df 9064 	ldr.w	r9, [pc, #100]	; 82340 <cdc_send_to_pc+0x74>
   822de:	f8df 8064 	ldr.w	r8, [pc, #100]	; 82344 <cdc_send_to_pc+0x78>
   822e2:	b2ee      	uxtb	r6, r5
		if (port == 0) break;
   822e4:	b14d      	cbz	r5, 822fa <cdc_send_to_pc+0x2e>
   822e6:	2e01      	cmp	r6, #1
   822e8:	d023      	beq.n	82332 <cdc_send_to_pc+0x66>
	for (uint8_t i = 0; i < 4; i++) {
   822ea:	2c04      	cmp	r4, #4
   822ec:	d01f      	beq.n	8232e <cdc_send_to_pc+0x62>
   822ee:	3401      	adds	r4, #1
   822f0:	3501      	adds	r5, #1
   822f2:	b2e4      	uxtb	r4, r4
   822f4:	b2ee      	uxtb	r6, r5
		if (port == 0) break;
   822f6:	2d00      	cmp	r5, #0
   822f8:	d1f5      	bne.n	822e6 <cdc_send_to_pc+0x1a>
   822fa:	f8df b04c 	ldr.w	fp, [pc, #76]	; 82348 <cdc_send_to_pc+0x7c>
		if (driver->cdc_enabled && driver->enabled && udi_cdc_multi_is_tx_ready(i)) {
   822fe:	f89b 329c 	ldrb.w	r3, [fp, #668]	; 0x29c
   82302:	f003 0306 	and.w	r3, r3, #6
   82306:	2b06      	cmp	r3, #6
   82308:	d1f1      	bne.n	822ee <cdc_send_to_pc+0x22>
   8230a:	4630      	mov	r0, r6
   8230c:	47d0      	blx	sl
   8230e:	2800      	cmp	r0, #0
   82310:	d0eb      	beq.n	822ea <cdc_send_to_pc+0x1e>
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   82312:	f50b 7be2 	add.w	fp, fp, #452	; 0x1c4
   82316:	e004      	b.n	82322 <cdc_send_to_pc+0x56>
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   82318:	4658      	mov	r0, fp
   8231a:	47c8      	blx	r9
   8231c:	4601      	mov	r1, r0
   8231e:	4630      	mov	r0, r6
   82320:	47c0      	blx	r8
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   82322:	4658      	mov	r0, fp
   82324:	47b8      	blx	r7
   82326:	2800      	cmp	r0, #0
   82328:	d1f6      	bne.n	82318 <cdc_send_to_pc+0x4c>
	for (uint8_t i = 0; i < 4; i++) {
   8232a:	2c04      	cmp	r4, #4
   8232c:	d1df      	bne.n	822ee <cdc_send_to_pc+0x22>
			}
		}

	}
	
}
   8232e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (port == 0) break;
   82332:	f8df b018 	ldr.w	fp, [pc, #24]	; 8234c <cdc_send_to_pc+0x80>
   82336:	e7e2      	b.n	822fe <cdc_send_to_pc+0x32>
   82338:	00085af9 	.word	0x00085af9
   8233c:	0008018d 	.word	0x0008018d
   82340:	0008016d 	.word	0x0008016d
   82344:	00085b6d 	.word	0x00085b6d
   82348:	20070400 	.word	0x20070400
   8234c:	200706a0 	.word	0x200706a0

00082350 <fpga_target_setup_out_received>:
	}
}

bool fpga_target_setup_out_received(void)
{
    blockendpoint_usage = bep_emem;
   82350:	2000      	movs	r0, #0
    switch(udd_g_ctrlreq.req.bRequest){
   82352:	4a29      	ldr	r2, [pc, #164]	; (823f8 <fpga_target_setup_out_received+0xa8>)
    blockendpoint_usage = bep_emem;
   82354:	4929      	ldr	r1, [pc, #164]	; (823fc <fpga_target_setup_out_received+0xac>)
    switch(udd_g_ctrlreq.req.bRequest){
   82356:	7853      	ldrb	r3, [r2, #1]
    blockendpoint_usage = bep_emem;
   82358:	7008      	strb	r0, [r1, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   8235a:	3b10      	subs	r3, #16
   8235c:	2b25      	cmp	r3, #37	; 0x25
   8235e:	d818      	bhi.n	82392 <fpga_target_setup_out_received+0x42>
   82360:	e8df f003 	tbb	[pc, r3]
   82364:	2925211d 	.word	0x2925211d
   82368:	17312d17 	.word	0x17312d17
   8236c:	17171717 	.word	0x17171717
   82370:	17171717 	.word	0x17171717
   82374:	17131717 	.word	0x17131717
   82378:	17171717 	.word	0x17171717
   8237c:	17171717 	.word	0x17171717
   82380:	17171717 	.word	0x17171717
   82384:	3d173935 	.word	0x3d173935
   82388:	1941      	.short	0x1941
		case REQ_SAM_CFG:
			0;
			uint16_t wVal = udd_g_ctrlreq.req.wValue & 0xFF;
   8238a:	7893      	ldrb	r3, [r2, #2]
			if ((wVal > 0x03) && (wVal < 0x10)) {
   8238c:	3b04      	subs	r3, #4
   8238e:	2b0b      	cmp	r3, #11
   82390:	d92d      	bls.n	823ee <fpga_target_setup_out_received+0x9e>
				udd_g_ctrlreq.callback = fpga_target_sam_cfg_out;
				return true;
			} else {
				return false;
   82392:	2000      	movs	r0, #0
            return true;

        default:
            return false;
    }					
}
   82394:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_spi1util;
   82396:	4b1a      	ldr	r3, [pc, #104]	; (82400 <fpga_target_setup_out_received+0xb0>)
            return true;
   82398:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_spi1util;
   8239a:	6113      	str	r3, [r2, #16]
            return true;
   8239c:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   8239e:	4b19      	ldr	r3, [pc, #100]	; (82404 <fpga_target_setup_out_received+0xb4>)
            return true;
   823a0:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   823a2:	6113      	str	r3, [r2, #16]
            return true;
   823a4:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   823a6:	4b18      	ldr	r3, [pc, #96]	; (82408 <fpga_target_setup_out_received+0xb8>)
            return true;
   823a8:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   823aa:	6113      	str	r3, [r2, #16]
            return true;
   823ac:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   823ae:	4b17      	ldr	r3, [pc, #92]	; (8240c <fpga_target_setup_out_received+0xbc>)
            return true;	
   823b0:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   823b2:	6113      	str	r3, [r2, #16]
            return true;	
   823b4:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   823b6:	4b16      	ldr	r3, [pc, #88]	; (82410 <fpga_target_setup_out_received+0xc0>)
            return true;		
   823b8:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   823ba:	6113      	str	r3, [r2, #16]
            return true;		
   823bc:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl_sam3u;
   823be:	4b15      	ldr	r3, [pc, #84]	; (82414 <fpga_target_setup_out_received+0xc4>)
            return true;		
   823c0:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl_sam3u;
   823c2:	6113      	str	r3, [r2, #16]
            return true;		
   823c4:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   823c6:	4b14      	ldr	r3, [pc, #80]	; (82418 <fpga_target_setup_out_received+0xc8>)
            return true;
   823c8:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   823ca:	6113      	str	r3, [r2, #16]
            return true;
   823cc:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_cdce906_cb;
   823ce:	4b13      	ldr	r3, [pc, #76]	; (8241c <fpga_target_setup_out_received+0xcc>)
            return true;
   823d0:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_cdce906_cb;
   823d2:	6113      	str	r3, [r2, #16]
            return true;
   823d4:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_vccint_cb;
   823d6:	4b12      	ldr	r3, [pc, #72]	; (82420 <fpga_target_setup_out_received+0xd0>)
            return true;
   823d8:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_vccint_cb;
   823da:	6113      	str	r3, [r2, #16]
            return true;
   823dc:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_progfpgaspi;
   823de:	4b11      	ldr	r3, [pc, #68]	; (82424 <fpga_target_setup_out_received+0xd4>)
			return true;
   823e0:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_progfpgaspi;
   823e2:	6113      	str	r3, [r2, #16]
			return true;
   823e4:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_fpgaioutil;
   823e6:	4b10      	ldr	r3, [pc, #64]	; (82428 <fpga_target_setup_out_received+0xd8>)
            return true;
   823e8:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_fpgaioutil;
   823ea:	6113      	str	r3, [r2, #16]
            return true;
   823ec:	4770      	bx	lr
				udd_g_ctrlreq.callback = fpga_target_sam_cfg_out;
   823ee:	4b0f      	ldr	r3, [pc, #60]	; (8242c <fpga_target_setup_out_received+0xdc>)
				return true;
   823f0:	2001      	movs	r0, #1
				udd_g_ctrlreq.callback = fpga_target_sam_cfg_out;
   823f2:	6113      	str	r3, [r2, #16]
				return true;
   823f4:	4770      	bx	lr
   823f6:	bf00      	nop
   823f8:	20072288 	.word	0x20072288
   823fc:	20071c9d 	.word	0x20071c9d
   82400:	000829b5 	.word	0x000829b5
   82404:	000824c5 	.word	0x000824c5
   82408:	000824a5 	.word	0x000824a5
   8240c:	00082431 	.word	0x00082431
   82410:	0008245d 	.word	0x0008245d
   82414:	000824f5 	.word	0x000824f5
   82418:	00082805 	.word	0x00082805
   8241c:	00082ab5 	.word	0x00082ab5
   82420:	00082775 	.word	0x00082775
   82424:	00082a35 	.word	0x00082a35
   82428:	000828a9 	.word	0x000828a9
   8242c:	00082855 	.word	0x00082855

00082430 <ctrl_readmem_ctrl>:
void ctrl_readmem_ctrl(void){
   82430:	b538      	push	{r3, r4, r5, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82432:	4b06      	ldr	r3, [pc, #24]	; (8244c <ctrl_readmem_ctrl+0x1c>)
    FPGA_setlock(fpga_ctrlmem);
   82434:	4a06      	ldr	r2, [pc, #24]	; (82450 <ctrl_readmem_ctrl+0x20>)
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82436:	685c      	ldr	r4, [r3, #4]
    FPGA_setlock(fpga_ctrlmem);
   82438:	2005      	movs	r0, #5
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8243a:	681d      	ldr	r5, [r3, #0]
    FPGA_setlock(fpga_ctrlmem);
   8243c:	4790      	blx	r2
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS + address;
   8243e:	4a05      	ldr	r2, [pc, #20]	; (82454 <ctrl_readmem_ctrl+0x24>)
    ctrlmemread_size = buflen;
   82440:	4b05      	ldr	r3, [pc, #20]	; (82458 <ctrl_readmem_ctrl+0x28>)
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS + address;
   82442:	f104 44c0 	add.w	r4, r4, #1610612736	; 0x60000000
   82446:	6014      	str	r4, [r2, #0]
    ctrlmemread_size = buflen;
   82448:	601d      	str	r5, [r3, #0]
}
   8244a:	bd38      	pop	{r3, r4, r5, pc}
   8244c:	20071514 	.word	0x20071514
   82450:	00082b35 	.word	0x00082b35
   82454:	20071ca8 	.word	0x20071ca8
   82458:	20071cac 	.word	0x20071cac

0008245c <ctrl_writemem_ctrl>:
void ctrl_writemem_ctrl(void){
   8245c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82460:	4f0d      	ldr	r7, [pc, #52]	; (82498 <ctrl_writemem_ctrl+0x3c>)
    FPGA_setlock(fpga_generic);
   82462:	2001      	movs	r0, #1
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82464:	683c      	ldr	r4, [r7, #0]
    FPGA_setlock(fpga_generic);
   82466:	4e0d      	ldr	r6, [pc, #52]	; (8249c <ctrl_writemem_ctrl+0x40>)
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   82468:	687d      	ldr	r5, [r7, #4]
    FPGA_setlock(fpga_generic);
   8246a:	47b0      	blx	r6
    for(unsigned int i = 0; i < buflen; i++){
   8246c:	b174      	cbz	r4, 8248c <ctrl_writemem_ctrl+0x30>
   8246e:	eb07 0c04 	add.w	ip, r7, r4
   82472:	1fec      	subs	r4, r5, #7
   82474:	4d0a      	ldr	r5, [pc, #40]	; (824a0 <ctrl_writemem_ctrl+0x44>)
   82476:	1dfb      	adds	r3, r7, #7
        xram[i+address] = ctrlbuf_payload[i];
   82478:	1be4      	subs	r4, r4, r7
   8247a:	f10c 0c07 	add.w	ip, ip, #7
   8247e:	18e2      	adds	r2, r4, r3
   82480:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   82484:	6829      	ldr	r1, [r5, #0]
    for(unsigned int i = 0; i < buflen; i++){
   82486:	4563      	cmp	r3, ip
        xram[i+address] = ctrlbuf_payload[i];
   82488:	5488      	strb	r0, [r1, r2]
    for(unsigned int i = 0; i < buflen; i++){
   8248a:	d1f8      	bne.n	8247e <ctrl_writemem_ctrl+0x22>
    FPGA_setlock(fpga_unlocked);
   8248c:	4633      	mov	r3, r6
}
   8248e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    FPGA_setlock(fpga_unlocked);
   82492:	2000      	movs	r0, #0
   82494:	4718      	bx	r3
   82496:	bf00      	nop
   82498:	20071514 	.word	0x20071514
   8249c:	00082b35 	.word	0x00082b35
   824a0:	20070944 	.word	0x20070944

000824a4 <ctrl_writemem_bulk>:
void ctrl_writemem_bulk(void){
   824a4:	b508      	push	{r3, lr}
    FPGA_setlock(fpga_blockout);
   824a6:	2004      	movs	r0, #4
   824a8:	4b03      	ldr	r3, [pc, #12]	; (824b8 <ctrl_writemem_bulk+0x14>)
   824aa:	4798      	blx	r3
    bulk_fpga_write_addr = *(CTRLBUFFER_WORDPTR + 1);
   824ac:	4a03      	ldr	r2, [pc, #12]	; (824bc <ctrl_writemem_bulk+0x18>)
   824ae:	4b04      	ldr	r3, [pc, #16]	; (824c0 <ctrl_writemem_bulk+0x1c>)
   824b0:	6852      	ldr	r2, [r2, #4]
   824b2:	601a      	str	r2, [r3, #0]
}
   824b4:	bd08      	pop	{r3, pc}
   824b6:	bf00      	nop
   824b8:	00082b35 	.word	0x00082b35
   824bc:	20071514 	.word	0x20071514
   824c0:	20071ca0 	.word	0x20071ca0

000824c4 <ctrl_readmem_bulk>:
void ctrl_readmem_bulk(void){
   824c4:	b570      	push	{r4, r5, r6, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);	
   824c6:	4b07      	ldr	r3, [pc, #28]	; (824e4 <ctrl_readmem_bulk+0x20>)
    FPGA_setlock(fpga_blockin);
   824c8:	2002      	movs	r0, #2
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   824ca:	e9d3 5400 	ldrd	r5, r4, [r3]
    FPGA_setlock(fpga_blockin);
   824ce:	4b06      	ldr	r3, [pc, #24]	; (824e8 <ctrl_readmem_bulk+0x24>)
   824d0:	4798      	blx	r3
    udi_vendor_bulk_in_run(
   824d2:	4629      	mov	r1, r5
   824d4:	f104 40c0 	add.w	r0, r4, #1610612736	; 0x60000000
   824d8:	4a04      	ldr	r2, [pc, #16]	; (824ec <ctrl_readmem_bulk+0x28>)
   824da:	4b05      	ldr	r3, [pc, #20]	; (824f0 <ctrl_readmem_bulk+0x2c>)
}
   824dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    udi_vendor_bulk_in_run(
   824e0:	4718      	bx	r3
   824e2:	bf00      	nop
   824e4:	20071514 	.word	0x20071514
   824e8:	00082b35 	.word	0x00082b35
   824ec:	000827e1 	.word	0x000827e1
   824f0:	00083591 	.word	0x00083591

000824f4 <ctrl_writemem_ctrl_sam3u>:
void ctrl_writemem_ctrl_sam3u(void){
   824f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR) - 4; // remove the first 4 bytes of the payload who contain the flags
   824f8:	492c      	ldr	r1, [pc, #176]	; (825ac <ctrl_writemem_ctrl_sam3u+0xb8>)
void ctrl_writemem_ctrl_sam3u(void){
   824fa:	b083      	sub	sp, #12
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   824fc:	e9d1 2300 	ldrd	r2, r3, [r1]
    for(unsigned int i = 0; i < buflen; i++){
   82500:	3a04      	subs	r2, #4
    uint32_t flags = *(CTRLBUFFER_WORDPTR + 2);
   82502:	688e      	ldr	r6, [r1, #8]
    for(unsigned int i = 0; i < buflen; i++){
   82504:	d004      	beq.n	82510 <ctrl_writemem_ctrl_sam3u+0x1c>
        sam3u_mem_b[i+address] = ctrlbuf_payload[i];
   82506:	482a      	ldr	r0, [pc, #168]	; (825b0 <ctrl_writemem_ctrl_sam3u+0xbc>)
   82508:	310c      	adds	r1, #12
   8250a:	4418      	add	r0, r3
   8250c:	4b29      	ldr	r3, [pc, #164]	; (825b4 <ctrl_writemem_ctrl_sam3u+0xc0>)
   8250e:	4798      	blx	r3
    if ( flags & 0x1 ){ // encryptions have been requested
   82510:	07f3      	lsls	r3, r6, #31
   82512:	d522      	bpl.n	8255a <ctrl_writemem_ctrl_sam3u+0x66>
        uint32_t seed = sam3u_mem[0]; // load the seed at addr 0
   82514:	4b26      	ldr	r3, [pc, #152]	; (825b0 <ctrl_writemem_ctrl_sam3u+0xbc>)
        for(unsigned int b = 0; b < (flags >> 16); b++){
   82516:	0c37      	lsrs	r7, r6, #16
        uint32_t seed = sam3u_mem[0]; // load the seed at addr 0
   82518:	f8d3 8000 	ldr.w	r8, [r3]
        for(unsigned int b = 0; b < (flags >> 16); b++){
   8251c:	d01d      	beq.n	8255a <ctrl_writemem_ctrl_sam3u+0x66>
   8251e:	2400      	movs	r4, #0
            if ((flags >> 1) & 0x1){ // write the key
   82520:	f3c6 0340 	ubfx	r3, r6, #1, #1
   82524:	4d24      	ldr	r5, [pc, #144]	; (825b8 <ctrl_writemem_ctrl_sam3u+0xc4>)
   82526:	f8df a094 	ldr.w	sl, [pc, #148]	; 825bc <ctrl_writemem_ctrl_sam3u+0xc8>
   8252a:	f8df 9094 	ldr.w	r9, [pc, #148]	; 825c0 <ctrl_writemem_ctrl_sam3u+0xcc>
   8252e:	f8df b094 	ldr.w	fp, [pc, #148]	; 825c4 <ctrl_writemem_ctrl_sam3u+0xd0>
   82532:	9301      	str	r3, [sp, #4]
            if ((flags >> 2) & 0x1){ // write the pts
   82534:	f3c6 0680 	ubfx	r6, r6, #2, #1
            FPGA_setlock(fpga_generic);
   82538:	2001      	movs	r0, #1
   8253a:	47a8      	blx	r5
            if ((flags >> 1) & 0x1){ // write the key
   8253c:	9b01      	ldr	r3, [sp, #4]
   8253e:	b97b      	cbnz	r3, 82560 <ctrl_writemem_ctrl_sam3u+0x6c>
            if ((flags >> 2) & 0x1){ // write the pts
   82540:	bb0e      	cbnz	r6, 82586 <ctrl_writemem_ctrl_sam3u+0x92>
            FPGA_setlock(fpga_unlocked);
   82542:	2000      	movs	r0, #0
   82544:	47a8      	blx	r5
            gpio_set_pin_high(FPGA_TRIGGER_GPIO);
   82546:	2057      	movs	r0, #87	; 0x57
   82548:	47d0      	blx	sl
            delay_cycles(50);
   8254a:	2032      	movs	r0, #50	; 0x32
   8254c:	47c8      	blx	r9
        for(unsigned int b = 0; b < (flags >> 16); b++){
   8254e:	3401      	adds	r4, #1
            gpio_set_pin_low(FPGA_TRIGGER_GPIO);
   82550:	2057      	movs	r0, #87	; 0x57
   82552:	4b1d      	ldr	r3, [pc, #116]	; (825c8 <ctrl_writemem_ctrl_sam3u+0xd4>)
   82554:	4798      	blx	r3
        for(unsigned int b = 0; b < (flags >> 16); b++){
   82556:	42bc      	cmp	r4, r7
   82558:	d1ee      	bne.n	82538 <ctrl_writemem_ctrl_sam3u+0x44>
}
   8255a:	b003      	add	sp, #12
   8255c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82560:	f44f 62a0 	mov.w	r2, #1280	; 0x500
                    xram[j+0x400+0x100] = seed >> 24;
   82564:	f8db 0000 	ldr.w	r0, [fp]
   82568:	ea4f 6c18 	mov.w	ip, r8, lsr #24
   8256c:	f800 c002 	strb.w	ip, [r0, r2]
                    seed += (seed*seed) | 0x5;
   82570:	fb08 f008 	mul.w	r0, r8, r8
                for(unsigned int j = 0; j < 16; j++){
   82574:	3201      	adds	r2, #1
                    seed += (seed*seed) | 0x5;
   82576:	f040 0005 	orr.w	r0, r0, #5
                for(unsigned int j = 0; j < 16; j++){
   8257a:	f5b2 6fa2 	cmp.w	r2, #1296	; 0x510
                    seed += (seed*seed) | 0x5;
   8257e:	4480      	add	r8, r0
                for(unsigned int j = 0; j < 16; j++){
   82580:	d1f0      	bne.n	82564 <ctrl_writemem_ctrl_sam3u+0x70>
            if ((flags >> 2) & 0x1){ // write the pts
   82582:	2e00      	cmp	r6, #0
   82584:	d0dd      	beq.n	82542 <ctrl_writemem_ctrl_sam3u+0x4e>
   82586:	f44f 62c0 	mov.w	r2, #1536	; 0x600
                    xram[j+0x400+0x200] = seed >> 24;
   8258a:	f8db 0000 	ldr.w	r0, [fp]
   8258e:	ea4f 6c18 	mov.w	ip, r8, lsr #24
   82592:	f800 c002 	strb.w	ip, [r0, r2]
                    seed += (seed*seed) | 0x5;
   82596:	fb08 f008 	mul.w	r0, r8, r8
                for(unsigned int j = 0; j < 16; j++){
   8259a:	3201      	adds	r2, #1
                    seed += (seed*seed) | 0x5;
   8259c:	f040 0005 	orr.w	r0, r0, #5
                for(unsigned int j = 0; j < 16; j++){
   825a0:	f5b2 6fc2 	cmp.w	r2, #1552	; 0x610
                    seed += (seed*seed) | 0x5;
   825a4:	4480      	add	r8, r0
                for(unsigned int j = 0; j < 16; j++){
   825a6:	d1f0      	bne.n	8258a <ctrl_writemem_ctrl_sam3u+0x96>
   825a8:	e7cb      	b.n	82542 <ctrl_writemem_ctrl_sam3u+0x4e>
   825aa:	bf00      	nop
   825ac:	20071514 	.word	0x20071514
   825b0:	20071cf0 	.word	0x20071cf0
   825b4:	00085d49 	.word	0x00085d49
   825b8:	00082b35 	.word	0x00082b35
   825bc:	00083685 	.word	0x00083685
   825c0:	200701b5 	.word	0x200701b5
   825c4:	20070944 	.word	0x20070944
   825c8:	000836a1 	.word	0x000836a1

000825cc <main_vendor_bulk_out_received>:
{
   825cc:	b570      	push	{r4, r5, r6, lr}
    if (UDD_EP_TRANSFER_OK != status) {
   825ce:	b9a8      	cbnz	r0, 825fc <main_vendor_bulk_out_received+0x30>
    if (blockendpoint_usage == bep_emem){
   825d0:	4b18      	ldr	r3, [pc, #96]	; (82634 <main_vendor_bulk_out_received+0x68>)
   825d2:	781b      	ldrb	r3, [r3, #0]
   825d4:	b9d3      	cbnz	r3, 8260c <main_vendor_bulk_out_received+0x40>
        for(unsigned int i = 0; i < nb_transfered; i++){
   825d6:	b169      	cbz	r1, 825f4 <main_vendor_bulk_out_received+0x28>
   825d8:	4b17      	ldr	r3, [pc, #92]	; (82638 <main_vendor_bulk_out_received+0x6c>)
   825da:	4e18      	ldr	r6, [pc, #96]	; (8263c <main_vendor_bulk_out_received+0x70>)
   825dc:	4818      	ldr	r0, [pc, #96]	; (82640 <main_vendor_bulk_out_received+0x74>)
   825de:	4419      	add	r1, r3
            xram[bulk_fpga_write_addr++] = main_buf_loopback[i];
   825e0:	6802      	ldr	r2, [r0, #0]
   825e2:	f813 cb01 	ldrb.w	ip, [r3], #1
   825e6:	6834      	ldr	r4, [r6, #0]
   825e8:	1c55      	adds	r5, r2, #1
        for(unsigned int i = 0; i < nb_transfered; i++){
   825ea:	4299      	cmp	r1, r3
            xram[bulk_fpga_write_addr++] = main_buf_loopback[i];
   825ec:	6005      	str	r5, [r0, #0]
   825ee:	f804 c002 	strb.w	ip, [r4, r2]
        for(unsigned int i = 0; i < nb_transfered; i++){
   825f2:	d1f5      	bne.n	825e0 <main_vendor_bulk_out_received+0x14>
        if (FPGA_lockstatus() == fpga_blockout){
   825f4:	4b13      	ldr	r3, [pc, #76]	; (82644 <main_vendor_bulk_out_received+0x78>)
   825f6:	4798      	blx	r3
   825f8:	2804      	cmp	r0, #4
   825fa:	d016      	beq.n	8262a <main_vendor_bulk_out_received+0x5e>
}
   825fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        udi_vendor_bulk_out_run(
   82600:	f44f 6180 	mov.w	r1, #1024	; 0x400
   82604:	4a10      	ldr	r2, [pc, #64]	; (82648 <main_vendor_bulk_out_received+0x7c>)
   82606:	480c      	ldr	r0, [pc, #48]	; (82638 <main_vendor_bulk_out_received+0x6c>)
   82608:	4b10      	ldr	r3, [pc, #64]	; (8264c <main_vendor_bulk_out_received+0x80>)
   8260a:	4718      	bx	r3
    } else if (blockendpoint_usage == bep_fpgabitstream){
   8260c:	2b0a      	cmp	r3, #10
   8260e:	d1f5      	bne.n	825fc <main_vendor_bulk_out_received+0x30>
        for(unsigned int i = 0; i < nb_transfered; i++){
   82610:	b139      	cbz	r1, 82622 <main_vendor_bulk_out_received+0x56>
   82612:	4d09      	ldr	r5, [pc, #36]	; (82638 <main_vendor_bulk_out_received+0x6c>)
   82614:	4e0e      	ldr	r6, [pc, #56]	; (82650 <main_vendor_bulk_out_received+0x84>)
   82616:	194c      	adds	r4, r1, r5
            fpga_program_sendbyte(main_buf_loopback[i]);
   82618:	f815 0b01 	ldrb.w	r0, [r5], #1
   8261c:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   8261e:	42a5      	cmp	r5, r4
   82620:	d1fa      	bne.n	82618 <main_vendor_bulk_out_received+0x4c>
        FPGA_CCLK_LOW();
   82622:	2038      	movs	r0, #56	; 0x38
   82624:	4b0b      	ldr	r3, [pc, #44]	; (82654 <main_vendor_bulk_out_received+0x88>)
   82626:	4798      	blx	r3
   82628:	e7e8      	b.n	825fc <main_vendor_bulk_out_received+0x30>
            FPGA_setlock(fpga_unlocked);
   8262a:	4b0b      	ldr	r3, [pc, #44]	; (82658 <main_vendor_bulk_out_received+0x8c>)
   8262c:	2000      	movs	r0, #0
   8262e:	4798      	blx	r3
   82630:	e7e4      	b.n	825fc <main_vendor_bulk_out_received+0x30>
   82632:	bf00      	nop
   82634:	20071c9d 	.word	0x20071c9d
   82638:	20071594 	.word	0x20071594
   8263c:	20070944 	.word	0x20070944
   82640:	20071ca0 	.word	0x20071ca0
   82644:	00082b71 	.word	0x00082b71
   82648:	000825cd 	.word	0x000825cd
   8264c:	000835b1 	.word	0x000835b1
   82650:	00082bb1 	.word	0x00082bb1
   82654:	000836a1 	.word	0x000836a1
   82658:	00082b35 	.word	0x00082b35

0008265c <fpga_target_setup_in_received>:
{
   8265c:	b570      	push	{r4, r5, r6, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   8265e:	4c3a      	ldr	r4, [pc, #232]	; (82748 <fpga_target_setup_in_received+0xec>)
   82660:	7863      	ldrb	r3, [r4, #1]
   82662:	3b12      	subs	r3, #18
   82664:	2b23      	cmp	r3, #35	; 0x23
   82666:	d813      	bhi.n	82690 <fpga_target_setup_in_received+0x34>
   82668:	e8df f003 	tbb	[pc, r3]
   8266c:	2612121c 	.word	0x2612121c
   82670:	12121212 	.word	0x12121212
   82674:	12121212 	.word	0x12121212
   82678:	12121212 	.word	0x12121212
   8267c:	12121212 	.word	0x12121212
   82680:	12121212 	.word	0x12121212
   82684:	12121212 	.word	0x12121212
   82688:	4a3e1212 	.word	0x4a3e1212
   8268c:	14605812 	.word	0x14605812
                return false;
   82690:	2000      	movs	r0, #0
}
   82692:	bd70      	pop	{r4, r5, r6, pc}
 			if (udd_g_ctrlreq.req.wLength > sizeof(spi1util_data_buffer))
   82694:	88e3      	ldrh	r3, [r4, #6]
   82696:	2b40      	cmp	r3, #64	; 0x40
   82698:	d8fa      	bhi.n	82690 <fpga_target_setup_in_received+0x34>
			udd_g_ctrlreq.payload = spi1util_data_buffer;
   8269a:	4a2c      	ldr	r2, [pc, #176]	; (8274c <fpga_target_setup_in_received+0xf0>)
			return true;
   8269c:	2001      	movs	r0, #1
			udd_g_ctrlreq.payload = spi1util_data_buffer;
   8269e:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   826a0:	81a3      	strh	r3, [r4, #12]
}
   826a2:	bd70      	pop	{r4, r5, r6, pc}
            ctrlmemread_size = 0;
   826a4:	2200      	movs	r2, #0
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   826a6:	4b2a      	ldr	r3, [pc, #168]	; (82750 <fpga_target_setup_in_received+0xf4>)
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   826a8:	492a      	ldr	r1, [pc, #168]	; (82754 <fpga_target_setup_in_received+0xf8>)
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   826aa:	6818      	ldr	r0, [r3, #0]
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   826ac:	6809      	ldr	r1, [r1, #0]
            ctrlmemread_size = 0;
   826ae:	601a      	str	r2, [r3, #0]
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   826b0:	81a0      	strh	r0, [r4, #12]
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   826b2:	60a1      	str	r1, [r4, #8]
            return true;
   826b4:	2001      	movs	r0, #1
}
   826b6:	bd70      	pop	{r4, r5, r6, pc}
            respbuf[0] = FPGA_ISDONE();
   826b8:	4e27      	ldr	r6, [pc, #156]	; (82758 <fpga_target_setup_in_received+0xfc>)
   826ba:	2031      	movs	r0, #49	; 0x31
   826bc:	47b0      	blx	r6
   826be:	4603      	mov	r3, r0
   826c0:	3b00      	subs	r3, #0
   826c2:	bf18      	it	ne
   826c4:	2301      	movne	r3, #1
   826c6:	4d25      	ldr	r5, [pc, #148]	; (8275c <fpga_target_setup_in_received+0x100>)
            respbuf[1] = FPGA_INITB_STATUS();
   826c8:	2032      	movs	r0, #50	; 0x32
            respbuf[0] = FPGA_ISDONE();
   826ca:	702b      	strb	r3, [r5, #0]
            respbuf[1] = FPGA_INITB_STATUS();
   826cc:	47b0      	blx	r6
            respbuf[2] = 0;
   826ce:	2100      	movs	r1, #0
            respbuf[1] = FPGA_INITB_STATUS();
   826d0:	4603      	mov	r3, r0
   826d2:	1a5b      	subs	r3, r3, r1
            udd_g_ctrlreq.payload_size = 4;
   826d4:	f04f 0204 	mov.w	r2, #4
            respbuf[1] = FPGA_INITB_STATUS();
   826d8:	bf18      	it	ne
   826da:	2301      	movne	r3, #1
            return true;
   826dc:	2001      	movs	r0, #1
            udd_g_ctrlreq.payload = respbuf;
   826de:	60a5      	str	r5, [r4, #8]
            respbuf[2] = 0;
   826e0:	8069      	strh	r1, [r5, #2]
            udd_g_ctrlreq.payload_size = 4;
   826e2:	81a2      	strh	r2, [r4, #12]
            respbuf[1] = FPGA_INITB_STATUS();
   826e4:	706b      	strb	r3, [r5, #1]
}
   826e6:	bd70      	pop	{r4, r5, r6, pc}
            udd_g_ctrlreq.payload_size = 2;
   826e8:	2202      	movs	r2, #2
            respbuf[0] = cdce906_status;
   826ea:	481d      	ldr	r0, [pc, #116]	; (82760 <fpga_target_setup_in_received+0x104>)
            respbuf[1] = cdce906_data;
   826ec:	491d      	ldr	r1, [pc, #116]	; (82764 <fpga_target_setup_in_received+0x108>)
            respbuf[0] = cdce906_status;
   826ee:	4b1b      	ldr	r3, [pc, #108]	; (8275c <fpga_target_setup_in_received+0x100>)
   826f0:	7800      	ldrb	r0, [r0, #0]
            respbuf[1] = cdce906_data;
   826f2:	7809      	ldrb	r1, [r1, #0]
            respbuf[0] = cdce906_status;
   826f4:	7018      	strb	r0, [r3, #0]
            respbuf[1] = cdce906_data;
   826f6:	7059      	strb	r1, [r3, #1]
            return true;
   826f8:	2001      	movs	r0, #1
            udd_g_ctrlreq.payload = respbuf;
   826fa:	60a3      	str	r3, [r4, #8]
            udd_g_ctrlreq.payload_size = 2;
   826fc:	81a2      	strh	r2, [r4, #12]
}
   826fe:	bd70      	pop	{r4, r5, r6, pc}
            udd_g_ctrlreq.payload_size = 3;
   82700:	2103      	movs	r1, #3
            respbuf[1] = (uint8_t)vccint_setting;
   82702:	4b19      	ldr	r3, [pc, #100]	; (82768 <fpga_target_setup_in_received+0x10c>)
            respbuf[0] = vccint_status;
   82704:	4819      	ldr	r0, [pc, #100]	; (8276c <fpga_target_setup_in_received+0x110>)
            respbuf[1] = (uint8_t)vccint_setting;
   82706:	881a      	ldrh	r2, [r3, #0]
            respbuf[0] = vccint_status;
   82708:	4b14      	ldr	r3, [pc, #80]	; (8275c <fpga_target_setup_in_received+0x100>)
   8270a:	7800      	ldrb	r0, [r0, #0]
            respbuf[1] = (uint8_t)vccint_setting;
   8270c:	705a      	strb	r2, [r3, #1]
            respbuf[2] = (uint8_t)(vccint_setting >> 8);
   8270e:	0a12      	lsrs	r2, r2, #8
            respbuf[0] = vccint_status;
   82710:	7018      	strb	r0, [r3, #0]
            respbuf[2] = (uint8_t)(vccint_setting >> 8);
   82712:	709a      	strb	r2, [r3, #2]
            return true;
   82714:	2001      	movs	r0, #1
            udd_g_ctrlreq.payload = respbuf;
   82716:	60a3      	str	r3, [r4, #8]
            udd_g_ctrlreq.payload_size = 3;
   82718:	81a1      	strh	r1, [r4, #12]
}
   8271a:	bd70      	pop	{r4, r5, r6, pc}
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer))
   8271c:	88e3      	ldrh	r3, [r4, #6]
   8271e:	2b40      	cmp	r3, #64	; 0x40
   82720:	d8b6      	bhi.n	82690 <fpga_target_setup_in_received+0x34>
			udd_g_ctrlreq.payload = fpgaspi_data_buffer;
   82722:	4a13      	ldr	r2, [pc, #76]	; (82770 <fpga_target_setup_in_received+0x114>)
			return true;
   82724:	2001      	movs	r0, #1
			udd_g_ctrlreq.payload = fpgaspi_data_buffer;
   82726:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   82728:	81a3      	strh	r3, [r4, #12]
}
   8272a:	bd70      	pop	{r4, r5, r6, pc}
			respbuf[0] = gpio_pin_is_high(pin);
   8272c:	78a0      	ldrb	r0, [r4, #2]
   8272e:	4b0a      	ldr	r3, [pc, #40]	; (82758 <fpga_target_setup_in_received+0xfc>)
   82730:	4798      	blx	r3
   82732:	1e03      	subs	r3, r0, #0
   82734:	bf18      	it	ne
   82736:	2301      	movne	r3, #1
			udd_g_ctrlreq.payload_size = 1;
   82738:	2101      	movs	r1, #1
			respbuf[0] = gpio_pin_is_high(pin);
   8273a:	4a08      	ldr	r2, [pc, #32]	; (8275c <fpga_target_setup_in_received+0x100>)
			return true;
   8273c:	4608      	mov	r0, r1
			respbuf[0] = gpio_pin_is_high(pin);
   8273e:	7013      	strb	r3, [r2, #0]
			udd_g_ctrlreq.payload = respbuf;
   82740:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = 1;
   82742:	81a1      	strh	r1, [r4, #12]
}
   82744:	bd70      	pop	{r4, r5, r6, pc}
   82746:	bf00      	nop
   82748:	20072288 	.word	0x20072288
   8274c:	200720f0 	.word	0x200720f0
   82750:	20071cac 	.word	0x20071cac
   82754:	20071ca8 	.word	0x20071ca8
   82758:	00083669 	.word	0x00083669
   8275c:	20071a18 	.word	0x20071a18
   82760:	20071ca5 	.word	0x20071ca5
   82764:	20071ca4 	.word	0x20071ca4
   82768:	20070940 	.word	0x20070940
   8276c:	20072130 	.word	0x20072130
   82770:	20071cb0 	.word	0x20071cb0

00082774 <ctrl_vccint_cb>:
{
   82774:	b538      	push	{r3, r4, r5, lr}
    if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82776:	4b16      	ldr	r3, [pc, #88]	; (827d0 <ctrl_vccint_cb+0x5c>)
   82778:	88d9      	ldrh	r1, [r3, #6]
   8277a:	899a      	ldrh	r2, [r3, #12]
   8277c:	428a      	cmp	r2, r1
   8277e:	d315      	bcc.n	827ac <ctrl_vccint_cb+0x38>
    if ((udd_g_ctrlreq.payload[0] ^ udd_g_ctrlreq.payload[1] ^ 0xAE) != (udd_g_ctrlreq.payload[2])){
   82780:	689a      	ldr	r2, [r3, #8]
   82782:	7813      	ldrb	r3, [r2, #0]
   82784:	f892 c001 	ldrb.w	ip, [r2, #1]
   82788:	7890      	ldrb	r0, [r2, #2]
   8278a:	ea83 030c 	eor.w	r3, r3, ip
   8278e:	f083 03ae 	eor.w	r3, r3, #174	; 0xae
   82792:	4298      	cmp	r0, r3
   82794:	d107      	bne.n	827a6 <ctrl_vccint_cb+0x32>
    if (udd_g_ctrlreq.req.wLength < 3){
   82796:	2902      	cmp	r1, #2
   82798:	d916      	bls.n	827c8 <ctrl_vccint_cb+0x54>
   8279a:	8814      	ldrh	r4, [r2, #0]
    if ((vcctemp < 600) || (vcctemp > 1200)){
   8279c:	f5a4 7316 	sub.w	r3, r4, #600	; 0x258
   827a0:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   827a4:	d903      	bls.n	827ae <ctrl_vccint_cb+0x3a>
        vccint_status = USB_STATUS_PARAMWRONG;
   827a6:	2201      	movs	r2, #1
   827a8:	4b0a      	ldr	r3, [pc, #40]	; (827d4 <ctrl_vccint_cb+0x60>)
   827aa:	701a      	strb	r2, [r3, #0]
}
   827ac:	bd38      	pop	{r3, r4, r5, pc}
    vccint_status = USB_STATUS_COMMERR;
   827ae:	2203      	movs	r2, #3
   827b0:	4d08      	ldr	r5, [pc, #32]	; (827d4 <ctrl_vccint_cb+0x60>)
    if (tps56520_set(vcctemp)){
   827b2:	4620      	mov	r0, r4
   827b4:	4b08      	ldr	r3, [pc, #32]	; (827d8 <ctrl_vccint_cb+0x64>)
    vccint_status = USB_STATUS_COMMERR;
   827b6:	702a      	strb	r2, [r5, #0]
    if (tps56520_set(vcctemp)){
   827b8:	4798      	blx	r3
   827ba:	2800      	cmp	r0, #0
   827bc:	d0f6      	beq.n	827ac <ctrl_vccint_cb+0x38>
        vccint_status = USB_STATUS_OK;
   827be:	2302      	movs	r3, #2
        vccint_setting = vcctemp;
   827c0:	4a06      	ldr	r2, [pc, #24]	; (827dc <ctrl_vccint_cb+0x68>)
        vccint_status = USB_STATUS_OK;
   827c2:	702b      	strb	r3, [r5, #0]
        vccint_setting = vcctemp;
   827c4:	8014      	strh	r4, [r2, #0]
}
   827c6:	bd38      	pop	{r3, r4, r5, pc}
        vccint_status = USB_STATUS_CSFAIL;
   827c8:	2204      	movs	r2, #4
   827ca:	4b02      	ldr	r3, [pc, #8]	; (827d4 <ctrl_vccint_cb+0x60>)
   827cc:	701a      	strb	r2, [r3, #0]
}
   827ce:	bd38      	pop	{r3, r4, r5, pc}
   827d0:	20072288 	.word	0x20072288
   827d4:	20072130 	.word	0x20072130
   827d8:	00082dad 	.word	0x00082dad
   827dc:	20070940 	.word	0x20070940

000827e0 <main_vendor_bulk_in_received>:
    if (UDD_EP_TRANSFER_OK != status) {
   827e0:	b100      	cbz	r0, 827e4 <main_vendor_bulk_in_received+0x4>
   827e2:	4770      	bx	lr
{
   827e4:	b510      	push	{r4, lr}
    if (FPGA_lockstatus() == fpga_blockin){		
   827e6:	4b05      	ldr	r3, [pc, #20]	; (827fc <main_vendor_bulk_in_received+0x1c>)
   827e8:	4604      	mov	r4, r0
   827ea:	4798      	blx	r3
   827ec:	2802      	cmp	r0, #2
   827ee:	d000      	beq.n	827f2 <main_vendor_bulk_in_received+0x12>
}
   827f0:	bd10      	pop	{r4, pc}
        FPGA_setlock(fpga_unlocked);
   827f2:	4620      	mov	r0, r4
}
   827f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FPGA_setlock(fpga_unlocked);
   827f8:	4b01      	ldr	r3, [pc, #4]	; (82800 <main_vendor_bulk_in_received+0x20>)
   827fa:	4718      	bx	r3
   827fc:	00082b71 	.word	0x00082b71
   82800:	00082b35 	.word	0x00082b35

00082804 <ctrl_progfpga_bulk>:
    switch(udd_g_ctrlreq.req.wValue){
   82804:	4a0d      	ldr	r2, [pc, #52]	; (8283c <ctrl_progfpga_bulk+0x38>)
   82806:	8853      	ldrh	r3, [r2, #2]
   82808:	2ba1      	cmp	r3, #161	; 0xa1
   8280a:	d004      	beq.n	82816 <ctrl_progfpga_bulk+0x12>
   8280c:	2ba2      	cmp	r3, #162	; 0xa2
   8280e:	d011      	beq.n	82834 <ctrl_progfpga_bulk+0x30>
   82810:	2ba0      	cmp	r3, #160	; 0xa0
   82812:	d007      	beq.n	82824 <ctrl_progfpga_bulk+0x20>
   82814:	4770      	bx	lr
            fpga_program_setup2();
   82816:	4b0a      	ldr	r3, [pc, #40]	; (82840 <ctrl_progfpga_bulk+0x3c>)
void ctrl_progfpga_bulk(void){
   82818:	b510      	push	{r4, lr}
            fpga_program_setup2();
   8281a:	4798      	blx	r3
            blockendpoint_usage = bep_fpgabitstream;
   8281c:	220a      	movs	r2, #10
   8281e:	4b09      	ldr	r3, [pc, #36]	; (82844 <ctrl_progfpga_bulk+0x40>)
   82820:	701a      	strb	r2, [r3, #0]
}
   82822:	bd10      	pop	{r4, pc}
            if (udd_g_ctrlreq.req.wLength == 4) {
   82824:	88d3      	ldrh	r3, [r2, #6]
   82826:	2b04      	cmp	r3, #4
                prog_freq = *(CTRLBUFFER_WORDPTR);
   82828:	bf0a      	itet	eq
   8282a:	4b07      	ldreq	r3, [pc, #28]	; (82848 <ctrl_progfpga_bulk+0x44>)
    uint32_t prog_freq = 20E6;
   8282c:	4807      	ldrne	r0, [pc, #28]	; (8284c <ctrl_progfpga_bulk+0x48>)
                prog_freq = *(CTRLBUFFER_WORDPTR);
   8282e:	6818      	ldreq	r0, [r3, #0]
            fpga_program_setup1(prog_freq);			
   82830:	4b07      	ldr	r3, [pc, #28]	; (82850 <ctrl_progfpga_bulk+0x4c>)
   82832:	4718      	bx	r3
            blockendpoint_usage = bep_emem;
   82834:	2200      	movs	r2, #0
   82836:	4b03      	ldr	r3, [pc, #12]	; (82844 <ctrl_progfpga_bulk+0x40>)
   82838:	701a      	strb	r2, [r3, #0]
}
   8283a:	4770      	bx	lr
   8283c:	20072288 	.word	0x20072288
   82840:	00082ba5 	.word	0x00082ba5
   82844:	20071c9d 	.word	0x20071c9d
   82848:	20071514 	.word	0x20071514
   8284c:	01312d00 	.word	0x01312d00
   82850:	00082b7d 	.word	0x00082b7d

00082854 <fpga_target_sam_cfg_out>:
	switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   82854:	4b0f      	ldr	r3, [pc, #60]	; (82894 <fpga_target_sam_cfg_out+0x40>)
   82856:	789b      	ldrb	r3, [r3, #2]
   82858:	2b05      	cmp	r3, #5
   8285a:	d004      	beq.n	82866 <fpga_target_sam_cfg_out+0x12>
   8285c:	2b06      	cmp	r3, #6
   8285e:	d00c      	beq.n	8287a <fpga_target_sam_cfg_out+0x26>
   82860:	2b04      	cmp	r3, #4
   82862:	d005      	beq.n	82870 <fpga_target_sam_cfg_out+0x1c>
   82864:	4770      	bx	lr
	    gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   82866:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8286a:	2036      	movs	r0, #54	; 0x36
   8286c:	4b0a      	ldr	r3, [pc, #40]	; (82898 <fpga_target_sam_cfg_out+0x44>)
   8286e:	4718      	bx	r3
	    gpio_configure_pin(PIN_PCK0, PIO_OUTPUT_0);
   82870:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82874:	2036      	movs	r0, #54	; 0x36
   82876:	4b08      	ldr	r3, [pc, #32]	; (82898 <fpga_target_sam_cfg_out+0x44>)
   82878:	4718      	bx	r3
{
   8287a:	b510      	push	{r4, lr}
	    gpio_set_pin_high(FPGA_TRIGGER_GPIO);
   8287c:	2057      	movs	r0, #87	; 0x57
   8287e:	4b07      	ldr	r3, [pc, #28]	; (8289c <fpga_target_sam_cfg_out+0x48>)
   82880:	4798      	blx	r3
	    delay_cycles(250);
   82882:	20fa      	movs	r0, #250	; 0xfa
   82884:	4b06      	ldr	r3, [pc, #24]	; (828a0 <fpga_target_sam_cfg_out+0x4c>)
   82886:	4798      	blx	r3
}
   82888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    gpio_set_pin_low(FPGA_TRIGGER_GPIO);
   8288c:	2057      	movs	r0, #87	; 0x57
   8288e:	4b05      	ldr	r3, [pc, #20]	; (828a4 <fpga_target_sam_cfg_out+0x50>)
   82890:	4718      	bx	r3
   82892:	bf00      	nop
   82894:	20072288 	.word	0x20072288
   82898:	000836e1 	.word	0x000836e1
   8289c:	00083685 	.word	0x00083685
   828a0:	200701b5 	.word	0x200701b5
   828a4:	000836a1 	.word	0x000836a1

000828a8 <ctrl_fpgaioutil>:
    if (udd_g_ctrlreq.req.wLength != 2){
   828a8:	4b3a      	ldr	r3, [pc, #232]	; (82994 <ctrl_fpgaioutil+0xec>)
   828aa:	88da      	ldrh	r2, [r3, #6]
   828ac:	2a02      	cmp	r2, #2
   828ae:	d000      	beq.n	828b2 <ctrl_fpgaioutil+0xa>
   828b0:	4770      	bx	lr
static void ctrl_fpgaioutil(void){
   828b2:	b570      	push	{r4, r5, r6, lr}
    int pin = udd_g_ctrlreq.payload[0];
   828b4:	689a      	ldr	r2, [r3, #8]
   828b6:	7814      	ldrb	r4, [r2, #0]
	if ((pin < 0) || (pin > 95)){
   828b8:	2c5f      	cmp	r4, #95	; 0x5f
   828ba:	d807      	bhi.n	828cc <ctrl_fpgaioutil+0x24>
	switch(udd_g_ctrlreq.req.wValue){
   828bc:	885b      	ldrh	r3, [r3, #2]
    int config = udd_g_ctrlreq.payload[1];
   828be:	7852      	ldrb	r2, [r2, #1]
	switch(udd_g_ctrlreq.req.wValue){
   828c0:	2ba1      	cmp	r3, #161	; 0xa1
   828c2:	d013      	beq.n	828ec <ctrl_fpgaioutil+0x44>
   828c4:	2ba2      	cmp	r3, #162	; 0xa2
   828c6:	d017      	beq.n	828f8 <ctrl_fpgaioutil+0x50>
   828c8:	2ba0      	cmp	r3, #160	; 0xa0
   828ca:	d000      	beq.n	828ce <ctrl_fpgaioutil+0x26>
}
   828cc:	bd70      	pop	{r4, r5, r6, pc}
            switch(config)
   828ce:	3a01      	subs	r2, #1
   828d0:	2a12      	cmp	r2, #18
   828d2:	d80b      	bhi.n	828ec <ctrl_fpgaioutil+0x44>
   828d4:	e8df f002 	tbb	[pc, r2]
   828d8:	0a0a3a49 	.word	0x0a0a3a49
   828dc:	0a0a0a0a 	.word	0x0a0a0a0a
   828e0:	0a0a0a0a 	.word	0x0a0a0a0a
   828e4:	410a0a0a 	.word	0x410a0a0a
   828e8:	242f      	.short	0x242f
   828ea:	19          	.byte	0x19
   828eb:	00          	.byte	0x00
            gpio_configure_pin(pin, PIO_DEFAULT);
   828ec:	4620      	mov	r0, r4
}
   828ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            gpio_configure_pin(pin, PIO_DEFAULT);
   828f2:	2100      	movs	r1, #0
   828f4:	4b28      	ldr	r3, [pc, #160]	; (82998 <ctrl_fpgaioutil+0xf0>)
   828f6:	4718      	bx	r3
            if (config == 0){
   828f8:	2a00      	cmp	r2, #0
   828fa:	d03d      	beq.n	82978 <ctrl_fpgaioutil+0xd0>
            if (config == 1){
   828fc:	2a01      	cmp	r2, #1
   828fe:	d1e5      	bne.n	828cc <ctrl_fpgaioutil+0x24>
                gpio_set_pin_high(pin);
   82900:	4620      	mov	r0, r4
}
   82902:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                gpio_set_pin_high(pin);
   82906:	4b25      	ldr	r3, [pc, #148]	; (8299c <ctrl_fpgaioutil+0xf4>)
   82908:	4718      	bx	r3
                    if(pin_spi1_cs > -1){
   8290a:	4e25      	ldr	r6, [pc, #148]	; (829a0 <ctrl_fpgaioutil+0xf8>)
   8290c:	6830      	ldr	r0, [r6, #0]
   8290e:	2800      	cmp	r0, #0
   82910:	da3b      	bge.n	8298a <ctrl_fpgaioutil+0xe2>
   82912:	4d21      	ldr	r5, [pc, #132]	; (82998 <ctrl_fpgaioutil+0xf0>)
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   82914:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82918:	4620      	mov	r0, r4
   8291a:	47a8      	blx	r5
                    pin_spi1_cs = pin;                    
   8291c:	6034      	str	r4, [r6, #0]
}
   8291e:	bd70      	pop	{r4, r5, r6, pc}
                    if(pin_spi1_sck > -1){
   82920:	4e20      	ldr	r6, [pc, #128]	; (829a4 <ctrl_fpgaioutil+0xfc>)
   82922:	6830      	ldr	r0, [r6, #0]
   82924:	2800      	cmp	r0, #0
   82926:	da1c      	bge.n	82962 <ctrl_fpgaioutil+0xba>
   82928:	4d1b      	ldr	r5, [pc, #108]	; (82998 <ctrl_fpgaioutil+0xf0>)
                    gpio_configure_pin(pin, PIO_OUTPUT_0);
   8292a:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8292e:	4620      	mov	r0, r4
   82930:	47a8      	blx	r5
                    pin_spi1_sck = pin;
   82932:	6034      	str	r4, [r6, #0]
}
   82934:	bd70      	pop	{r4, r5, r6, pc}
                    if(pin_spi1_miso > -1){
   82936:	4e1c      	ldr	r6, [pc, #112]	; (829a8 <ctrl_fpgaioutil+0x100>)
   82938:	6830      	ldr	r0, [r6, #0]
   8293a:	2800      	cmp	r0, #0
   8293c:	da21      	bge.n	82982 <ctrl_fpgaioutil+0xda>
   8293e:	4d16      	ldr	r5, [pc, #88]	; (82998 <ctrl_fpgaioutil+0xf0>)
                    gpio_configure_pin(pin, PIO_INPUT);
   82940:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82944:	4620      	mov	r0, r4
   82946:	47a8      	blx	r5
                    pin_spi1_miso = pin;
   82948:	6034      	str	r4, [r6, #0]
}
   8294a:	bd70      	pop	{r4, r5, r6, pc}
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   8294c:	4620      	mov	r0, r4
}
   8294e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   82952:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82956:	4b10      	ldr	r3, [pc, #64]	; (82998 <ctrl_fpgaioutil+0xf0>)
   82958:	4718      	bx	r3
                    if(pin_spi1_mosi > -1){
   8295a:	4e14      	ldr	r6, [pc, #80]	; (829ac <ctrl_fpgaioutil+0x104>)
   8295c:	6830      	ldr	r0, [r6, #0]
   8295e:	2800      	cmp	r0, #0
   82960:	dbe2      	blt.n	82928 <ctrl_fpgaioutil+0x80>
                        gpio_configure_pin(pin_spi1_sck, PIO_DEFAULT);
   82962:	2100      	movs	r1, #0
   82964:	4d0c      	ldr	r5, [pc, #48]	; (82998 <ctrl_fpgaioutil+0xf0>)
   82966:	47a8      	blx	r5
   82968:	e7df      	b.n	8292a <ctrl_fpgaioutil+0x82>
                    gpio_configure_pin(pin, PIO_INPUT);
   8296a:	4620      	mov	r0, r4
}
   8296c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    gpio_configure_pin(pin, PIO_INPUT);
   82970:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82974:	4b08      	ldr	r3, [pc, #32]	; (82998 <ctrl_fpgaioutil+0xf0>)
   82976:	4718      	bx	r3
                gpio_set_pin_low(pin);
   82978:	4620      	mov	r0, r4
}
   8297a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                gpio_set_pin_low(pin);
   8297e:	4b0c      	ldr	r3, [pc, #48]	; (829b0 <ctrl_fpgaioutil+0x108>)
   82980:	4718      	bx	r3
                        gpio_configure_pin(pin_spi1_miso, PIO_DEFAULT);
   82982:	2100      	movs	r1, #0
   82984:	4d04      	ldr	r5, [pc, #16]	; (82998 <ctrl_fpgaioutil+0xf0>)
   82986:	47a8      	blx	r5
   82988:	e7da      	b.n	82940 <ctrl_fpgaioutil+0x98>
                        gpio_configure_pin(pin_spi1_cs, PIO_DEFAULT);
   8298a:	2100      	movs	r1, #0
   8298c:	4d02      	ldr	r5, [pc, #8]	; (82998 <ctrl_fpgaioutil+0xf0>)
   8298e:	47a8      	blx	r5
   82990:	e7c0      	b.n	82914 <ctrl_fpgaioutil+0x6c>
   82992:	bf00      	nop
   82994:	20072288 	.word	0x20072288
   82998:	000836e1 	.word	0x000836e1
   8299c:	00083685 	.word	0x00083685
   829a0:	200701c0 	.word	0x200701c0
   829a4:	200701cc 	.word	0x200701cc
   829a8:	200701c4 	.word	0x200701c4
   829ac:	200701c8 	.word	0x200701c8
   829b0:	000836a1 	.word	0x000836a1

000829b4 <ctrl_spi1util>:
static void ctrl_spi1util(void){
   829b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(udd_g_ctrlreq.req.wValue){
   829b8:	4c17      	ldr	r4, [pc, #92]	; (82a18 <ctrl_spi1util+0x64>)
   829ba:	8863      	ldrh	r3, [r4, #2]
   829bc:	3ba0      	subs	r3, #160	; 0xa0
   829be:	2b04      	cmp	r3, #4
   829c0:	d817      	bhi.n	829f2 <ctrl_spi1util+0x3e>
   829c2:	e8df f003 	tbb	[pc, r3]
   829c6:	1c18      	.short	0x1c18
   829c8:	2420      	.short	0x2420
   829ca:	03          	.byte	0x03
   829cb:	00          	.byte	0x00
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   829cc:	88e3      	ldrh	r3, [r4, #6]
   829ce:	89a2      	ldrh	r2, [r4, #12]
   829d0:	429a      	cmp	r2, r3
   829d2:	d30e      	bcc.n	829f2 <ctrl_spi1util+0x3e>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer)){
   829d4:	3b01      	subs	r3, #1
   829d6:	2b3f      	cmp	r3, #63	; 0x3f
   829d8:	d80b      	bhi.n	829f2 <ctrl_spi1util+0x3e>
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   829da:	2500      	movs	r5, #0
   829dc:	4e0f      	ldr	r6, [pc, #60]	; (82a1c <ctrl_spi1util+0x68>)
   829de:	4f10      	ldr	r7, [pc, #64]	; (82a20 <ctrl_spi1util+0x6c>)
				spi1util_data_buffer[i] = spi1util_xferbyte(udd_g_ctrlreq.payload[i]);
   829e0:	68a3      	ldr	r3, [r4, #8]
   829e2:	5d58      	ldrb	r0, [r3, r5]
   829e4:	47b8      	blx	r7
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   829e6:	88e3      	ldrh	r3, [r4, #6]
   829e8:	3501      	adds	r5, #1
   829ea:	429d      	cmp	r5, r3
				spi1util_data_buffer[i] = spi1util_xferbyte(udd_g_ctrlreq.payload[i]);
   829ec:	f806 0b01 	strb.w	r0, [r6], #1
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   829f0:	dbf6      	blt.n	829e0 <ctrl_spi1util+0x2c>
}
   829f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			spi1util_init();			
   829f6:	4b0b      	ldr	r3, [pc, #44]	; (82a24 <ctrl_spi1util+0x70>)
}
   829f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_init();			
   829fc:	4718      	bx	r3
			spi1util_deinit();
   829fe:	4b0a      	ldr	r3, [pc, #40]	; (82a28 <ctrl_spi1util+0x74>)
}
   82a00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_deinit();
   82a04:	4718      	bx	r3
			spi1util_cs_low();
   82a06:	4b09      	ldr	r3, [pc, #36]	; (82a2c <ctrl_spi1util+0x78>)
}
   82a08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_cs_low();
   82a0c:	4718      	bx	r3
			spi1util_cs_high();
   82a0e:	4b08      	ldr	r3, [pc, #32]	; (82a30 <ctrl_spi1util+0x7c>)
}
   82a10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_cs_high();
   82a14:	4718      	bx	r3
   82a16:	bf00      	nop
   82a18:	20072288 	.word	0x20072288
   82a1c:	200720f0 	.word	0x200720f0
   82a20:	000801ed 	.word	0x000801ed
   82a24:	000801a5 	.word	0x000801a5
   82a28:	00080275 	.word	0x00080275
   82a2c:	000801cd 	.word	0x000801cd
   82a30:	000801dd 	.word	0x000801dd

00082a34 <ctrl_progfpgaspi>:
static void ctrl_progfpgaspi(void){
   82a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(udd_g_ctrlreq.req.wValue){
   82a38:	4c17      	ldr	r4, [pc, #92]	; (82a98 <ctrl_progfpgaspi+0x64>)
   82a3a:	8863      	ldrh	r3, [r4, #2]
   82a3c:	3ba0      	subs	r3, #160	; 0xa0
   82a3e:	2b04      	cmp	r3, #4
   82a40:	d817      	bhi.n	82a72 <ctrl_progfpgaspi+0x3e>
   82a42:	e8df f003 	tbb	[pc, r3]
   82a46:	1c18      	.short	0x1c18
   82a48:	2420      	.short	0x2420
   82a4a:	03          	.byte	0x03
   82a4b:	00          	.byte	0x00
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82a4c:	88e3      	ldrh	r3, [r4, #6]
   82a4e:	89a2      	ldrh	r2, [r4, #12]
   82a50:	429a      	cmp	r2, r3
   82a52:	d30e      	bcc.n	82a72 <ctrl_progfpgaspi+0x3e>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer)){
   82a54:	3b01      	subs	r3, #1
   82a56:	2b3f      	cmp	r3, #63	; 0x3f
   82a58:	d80b      	bhi.n	82a72 <ctrl_progfpgaspi+0x3e>
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82a5a:	2500      	movs	r5, #0
   82a5c:	4e0f      	ldr	r6, [pc, #60]	; (82a9c <ctrl_progfpgaspi+0x68>)
   82a5e:	4f10      	ldr	r7, [pc, #64]	; (82aa0 <ctrl_progfpgaspi+0x6c>)
				fpgaspi_data_buffer[i] = fpgaspi_xferbyte(udd_g_ctrlreq.payload[i]);
   82a60:	68a3      	ldr	r3, [r4, #8]
   82a62:	5d58      	ldrb	r0, [r3, r5]
   82a64:	47b8      	blx	r7
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82a66:	88e3      	ldrh	r3, [r4, #6]
   82a68:	3501      	adds	r5, #1
   82a6a:	429d      	cmp	r5, r3
				fpgaspi_data_buffer[i] = fpgaspi_xferbyte(udd_g_ctrlreq.payload[i]);
   82a6c:	f806 0b01 	strb.w	r0, [r6], #1
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82a70:	dbf6      	blt.n	82a60 <ctrl_progfpgaspi+0x2c>
}
   82a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fpgaspi_program_init();			
   82a76:	4b0b      	ldr	r3, [pc, #44]	; (82aa4 <ctrl_progfpgaspi+0x70>)
}
   82a78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_program_init();			
   82a7c:	4718      	bx	r3
			fpgaspi_program_deinit();
   82a7e:	4b0a      	ldr	r3, [pc, #40]	; (82aa8 <ctrl_progfpgaspi+0x74>)
}
   82a80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_program_deinit();
   82a84:	4718      	bx	r3
			fpgaspi_cs_low();
   82a86:	4b09      	ldr	r3, [pc, #36]	; (82aac <ctrl_progfpgaspi+0x78>)
}
   82a88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_cs_low();
   82a8c:	4718      	bx	r3
			fpgaspi_cs_high();
   82a8e:	4b08      	ldr	r3, [pc, #32]	; (82ab0 <ctrl_progfpgaspi+0x7c>)
}
   82a90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_cs_high();
   82a94:	4718      	bx	r3
   82a96:	bf00      	nop
   82a98:	20072288 	.word	0x20072288
   82a9c:	20071cb0 	.word	0x20071cb0
   82aa0:	00082c49 	.word	0x00082c49
   82aa4:	00082bf1 	.word	0x00082bf1
   82aa8:	00082cb5 	.word	0x00082cb5
   82aac:	00082c31 	.word	0x00082c31
   82ab0:	00082c3d 	.word	0x00082c3d

00082ab4 <ctrl_cdce906_cb>:
    if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82ab4:	4b11      	ldr	r3, [pc, #68]	; (82afc <ctrl_cdce906_cb+0x48>)
   82ab6:	88da      	ldrh	r2, [r3, #6]
   82ab8:	8999      	ldrh	r1, [r3, #12]
   82aba:	4291      	cmp	r1, r2
   82abc:	d316      	bcc.n	82aec <ctrl_cdce906_cb+0x38>
    if (udd_g_ctrlreq.req.wLength < 3){
   82abe:	2a02      	cmp	r2, #2
{
   82ac0:	b510      	push	{r4, lr}
    if (udd_g_ctrlreq.req.wLength < 3){
   82ac2:	d90f      	bls.n	82ae4 <ctrl_cdce906_cb+0x30>
    cdce906_status = USB_STATUS_COMMERR;
   82ac4:	2103      	movs	r1, #3
    if (udd_g_ctrlreq.payload[0] == 0x00){
   82ac6:	689b      	ldr	r3, [r3, #8]
    cdce906_status = USB_STATUS_COMMERR;
   82ac8:	4c0d      	ldr	r4, [pc, #52]	; (82b00 <ctrl_cdce906_cb+0x4c>)
    if (udd_g_ctrlreq.payload[0] == 0x00){
   82aca:	781a      	ldrb	r2, [r3, #0]
    cdce906_status = USB_STATUS_COMMERR;
   82acc:	7021      	strb	r1, [r4, #0]
    if (udd_g_ctrlreq.payload[0] == 0x00){
   82ace:	b172      	cbz	r2, 82aee <ctrl_cdce906_cb+0x3a>
    } else if (udd_g_ctrlreq.payload[0] == 0x01){
   82ad0:	2a01      	cmp	r2, #1
   82ad2:	d108      	bne.n	82ae6 <ctrl_cdce906_cb+0x32>
        if (cdce906_write(udd_g_ctrlreq.payload[1], udd_g_ctrlreq.payload[2])){
   82ad4:	7899      	ldrb	r1, [r3, #2]
   82ad6:	7858      	ldrb	r0, [r3, #1]
   82ad8:	4b0a      	ldr	r3, [pc, #40]	; (82b04 <ctrl_cdce906_cb+0x50>)
   82ada:	4798      	blx	r3
   82adc:	b108      	cbz	r0, 82ae2 <ctrl_cdce906_cb+0x2e>
            cdce906_status = USB_STATUS_OK;
   82ade:	2302      	movs	r3, #2
   82ae0:	7023      	strb	r3, [r4, #0]
}
   82ae2:	bd10      	pop	{r4, pc}
   82ae4:	4c06      	ldr	r4, [pc, #24]	; (82b00 <ctrl_cdce906_cb+0x4c>)
        cdce906_status = USB_STATUS_PARAMWRONG;
   82ae6:	2301      	movs	r3, #1
   82ae8:	7023      	strb	r3, [r4, #0]
}
   82aea:	bd10      	pop	{r4, pc}
   82aec:	4770      	bx	lr
        if (cdce906_read(udd_g_ctrlreq.payload[1], &cdce906_data)){
   82aee:	7858      	ldrb	r0, [r3, #1]
   82af0:	4905      	ldr	r1, [pc, #20]	; (82b08 <ctrl_cdce906_cb+0x54>)
   82af2:	4b06      	ldr	r3, [pc, #24]	; (82b0c <ctrl_cdce906_cb+0x58>)
   82af4:	4798      	blx	r3
   82af6:	2800      	cmp	r0, #0
   82af8:	d0f3      	beq.n	82ae2 <ctrl_cdce906_cb+0x2e>
   82afa:	e7f0      	b.n	82ade <ctrl_cdce906_cb+0x2a>
   82afc:	20072288 	.word	0x20072288
   82b00:	20071ca5 	.word	0x20071ca5
   82b04:	00082e85 	.word	0x00082e85
   82b08:	20071ca4 	.word	0x20071ca4
   82b0c:	00082ee5 	.word	0x00082ee5

00082b10 <fpga_target_register_handlers>:

void fpga_target_register_handlers(void)
{
   82b10:	b510      	push	{r4, lr}
    naeusb_add_in_handler(fpga_target_setup_in_received);
   82b12:	4b04      	ldr	r3, [pc, #16]	; (82b24 <fpga_target_register_handlers+0x14>)
   82b14:	4804      	ldr	r0, [pc, #16]	; (82b28 <fpga_target_register_handlers+0x18>)
   82b16:	4798      	blx	r3
    naeusb_add_out_handler(fpga_target_setup_out_received);
   82b18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    naeusb_add_out_handler(fpga_target_setup_out_received);
   82b1c:	4803      	ldr	r0, [pc, #12]	; (82b2c <fpga_target_register_handlers+0x1c>)
   82b1e:	4b04      	ldr	r3, [pc, #16]	; (82b30 <fpga_target_register_handlers+0x20>)
   82b20:	4718      	bx	r3
   82b22:	bf00      	nop
   82b24:	00081825 	.word	0x00081825
   82b28:	0008265d 	.word	0x0008265d
   82b2c:	00082351 	.word	0x00082351
   82b30:	0008184d 	.word	0x0008184d

00082b34 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   82b34:	b538      	push	{r3, r4, r5, lr}
  int ret = 0;
  cpu_irq_enter_critical();
   82b36:	4b08      	ldr	r3, [pc, #32]	; (82b58 <FPGA_setlock+0x24>)
{
   82b38:	4604      	mov	r4, r0
  cpu_irq_enter_critical();
   82b3a:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   82b3c:	4b07      	ldr	r3, [pc, #28]	; (82b5c <FPGA_setlock+0x28>)
   82b3e:	781a      	ldrb	r2, [r3, #0]
   82b40:	b92a      	cbnz	r2, 82b4e <FPGA_setlock+0x1a>
  {
    ret = 1;
   82b42:	2501      	movs	r5, #1
    _fpga_locked = lockstatus;
   82b44:	701c      	strb	r4, [r3, #0]
  }
  cpu_irq_leave_critical();
   82b46:	4b06      	ldr	r3, [pc, #24]	; (82b60 <FPGA_setlock+0x2c>)
   82b48:	4798      	blx	r3
  return ret;
}
   82b4a:	4628      	mov	r0, r5
   82b4c:	bd38      	pop	{r3, r4, r5, pc}
  int ret = 0;
   82b4e:	2500      	movs	r5, #0
  cpu_irq_leave_critical();
   82b50:	4b03      	ldr	r3, [pc, #12]	; (82b60 <FPGA_setlock+0x2c>)
   82b52:	4798      	blx	r3
}
   82b54:	4628      	mov	r0, r5
   82b56:	bd38      	pop	{r3, r4, r5, pc}
   82b58:	000853ed 	.word	0x000853ed
   82b5c:	20072131 	.word	0x20072131
   82b60:	0008542d 	.word	0x0008542d

00082b64 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
  _fpga_locked = fpga_unlocked;
   82b64:	2200      	movs	r2, #0
   82b66:	4b01      	ldr	r3, [pc, #4]	; (82b6c <FPGA_releaselock+0x8>)
   82b68:	701a      	strb	r2, [r3, #0]
}
   82b6a:	4770      	bx	lr
   82b6c:	20072131 	.word	0x20072131

00082b70 <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
  return _fpga_locked;
   82b70:	4b01      	ldr	r3, [pc, #4]	; (82b78 <FPGA_lockstatus+0x8>)
   82b72:	7818      	ldrb	r0, [r3, #0]
}
   82b74:	4770      	bx	lr
   82b76:	bf00      	nop
   82b78:	20072131 	.word	0x20072131

00082b7c <fpga_program_setup1>:
    FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(uint32_t prog_freq)
{
   82b7c:	b510      	push	{r4, lr}
	/* Init - set program low to erase FPGA */
	FPGA_NPROG_LOW();
   82b7e:	4b07      	ldr	r3, [pc, #28]	; (82b9c <fpga_program_setup1+0x20>)
    FPGA_CCLK_SETUP();

    usart_enable_tx(FPGA_PROG_USART);
#else
	#if FPGA_USE_BITBANG
	FPGA_CCLK_SETUP();
   82b80:	4c07      	ldr	r4, [pc, #28]	; (82ba0 <fpga_program_setup1+0x24>)
	FPGA_NPROG_LOW();
   82b82:	2033      	movs	r0, #51	; 0x33
   82b84:	4798      	blx	r3
	FPGA_CCLK_SETUP();
   82b86:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82b8a:	2038      	movs	r0, #56	; 0x38
   82b8c:	47a0      	blx	r4
	FPGA_DO_SETUP();
   82b8e:	4623      	mov	r3, r4

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
	#endif
#endif
}
   82b90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	FPGA_DO_SETUP();
   82b94:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82b98:	2043      	movs	r0, #67	; 0x43
   82b9a:	4718      	bx	r3
   82b9c:	000836a1 	.word	0x000836a1
   82ba0:	000836e1 	.word	0x000836e1

00082ba4 <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
    FPGA_NPROG_HIGH();
   82ba4:	2033      	movs	r0, #51	; 0x33
   82ba6:	4b01      	ldr	r3, [pc, #4]	; (82bac <fpga_program_setup2+0x8>)
   82ba8:	4718      	bx	r3
   82baa:	bf00      	nop
   82bac:	00083685 	.word	0x00083685

00082bb0 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   82bb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   82bb2:	2508      	movs	r5, #8
   82bb4:	4604      	mov	r4, r0
	#else
		//For debug only
		//fpga_total_bs_len++;
		
		#if FPGA_USE_BITBANG
		for(unsigned int i=0; i < 8; i++){
   82bb6:	4f0c      	ldr	r7, [pc, #48]	; (82be8 <fpga_program_sendbyte+0x38>)
   82bb8:	4e0c      	ldr	r6, [pc, #48]	; (82bec <fpga_program_sendbyte+0x3c>)
   82bba:	e006      	b.n	82bca <fpga_program_sendbyte+0x1a>
			FPGA_CCLK_LOW();
			
			if (databyte & 0x01){
				FPGA_DO_HIGH();
   82bbc:	47b0      	blx	r6
				} else {
				FPGA_DO_LOW();
			}
			
			FPGA_CCLK_HIGH();
   82bbe:	2038      	movs	r0, #56	; 0x38
   82bc0:	47b0      	blx	r6
		for(unsigned int i=0; i < 8; i++){
   82bc2:	3d01      	subs	r5, #1
			databyte = databyte >> 1;
   82bc4:	ea4f 0454 	mov.w	r4, r4, lsr #1
		for(unsigned int i=0; i < 8; i++){
   82bc8:	d00c      	beq.n	82be4 <fpga_program_sendbyte+0x34>
			FPGA_CCLK_LOW();
   82bca:	2038      	movs	r0, #56	; 0x38
   82bcc:	47b8      	blx	r7
			if (databyte & 0x01){
   82bce:	07e3      	lsls	r3, r4, #31
				FPGA_DO_HIGH();
   82bd0:	f04f 0043 	mov.w	r0, #67	; 0x43
			if (databyte & 0x01){
   82bd4:	d4f2      	bmi.n	82bbc <fpga_program_sendbyte+0xc>
				FPGA_DO_LOW();
   82bd6:	47b8      	blx	r7
			FPGA_CCLK_HIGH();
   82bd8:	2038      	movs	r0, #56	; 0x38
   82bda:	47b0      	blx	r6
		for(unsigned int i=0; i < 8; i++){
   82bdc:	3d01      	subs	r5, #1
			databyte = databyte >> 1;
   82bde:	ea4f 0454 	mov.w	r4, r4, lsr #1
		for(unsigned int i=0; i < 8; i++){
   82be2:	d1f2      	bne.n	82bca <fpga_program_sendbyte+0x1a>
		usart_putchar(FPGA_PROG_USART, databyte);
		#else
		spi_write(SPI, databyte, 0, 0);
		#endif
	#endif
}
   82be4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   82be6:	bf00      	nop
   82be8:	000836a1 	.word	0x000836a1
   82bec:	00083685 	.word	0x00083685

00082bf0 <fpgaspi_program_init>:
#include "fpgaspi_program.h"
#include "spi.h"

/* FPGA Programming: Init pins - assumes FPGA already programmed to use these */
void fpgaspi_program_init(void)
{
   82bf0:	b510      	push	{r4, lr}
	FPGASPI_CCLK_SETUP();
   82bf2:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82bf6:	4c0b      	ldr	r4, [pc, #44]	; (82c24 <fpgaspi_program_init+0x34>)
   82bf8:	2038      	movs	r0, #56	; 0x38
   82bfa:	47a0      	blx	r4
	FPGASPI_DO_SETUP();
   82bfc:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82c00:	2055      	movs	r0, #85	; 0x55
   82c02:	47a0      	blx	r4
	FPGASPI_DI_SETUP();
   82c04:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82c08:	2043      	movs	r0, #67	; 0x43
   82c0a:	47a0      	blx	r4
	FPGASPI_CS_SETUP();
   82c0c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82c10:	2056      	movs	r0, #86	; 0x56
   82c12:	47a0      	blx	r4
	FPGASPI_CS_HIGH();
   82c14:	2056      	movs	r0, #86	; 0x56
   82c16:	4b04      	ldr	r3, [pc, #16]	; (82c28 <fpgaspi_program_init+0x38>)
   82c18:	4798      	blx	r3
	FPGASPI_CCLK_LOW();
}
   82c1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	FPGASPI_CCLK_LOW();
   82c1e:	2038      	movs	r0, #56	; 0x38
   82c20:	4b02      	ldr	r3, [pc, #8]	; (82c2c <fpgaspi_program_init+0x3c>)
   82c22:	4718      	bx	r3
   82c24:	000836e1 	.word	0x000836e1
   82c28:	00083685 	.word	0x00083685
   82c2c:	000836a1 	.word	0x000836a1

00082c30 <fpgaspi_cs_low>:


/* SPI CS Pin Low */
void fpgaspi_cs_low(void)
{
	FPGASPI_CS_LOW();
   82c30:	2056      	movs	r0, #86	; 0x56
   82c32:	4b01      	ldr	r3, [pc, #4]	; (82c38 <fpgaspi_cs_low+0x8>)
   82c34:	4718      	bx	r3
   82c36:	bf00      	nop
   82c38:	000836a1 	.word	0x000836a1

00082c3c <fpgaspi_cs_high>:
}

/* SPI CS Pin High */
void fpgaspi_cs_high(void)
{
	FPGASPI_CS_HIGH();
   82c3c:	2056      	movs	r0, #86	; 0x56
   82c3e:	4b01      	ldr	r3, [pc, #4]	; (82c44 <fpgaspi_cs_high+0x8>)
   82c40:	4718      	bx	r3
   82c42:	bf00      	nop
   82c44:	00083685 	.word	0x00083685

00082c48 <fpgaspi_xferbyte>:
}


/* SPI data byte transfer */
uint8_t fpgaspi_xferbyte(uint8_t databyte)
{
   82c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82c4c:	2608      	movs	r6, #8
	uint8_t result = 0;
   82c4e:	2400      	movs	r4, #0
{
   82c50:	4605      	mov	r5, r0

	for(unsigned int i=0; i < 8; i++){	
   82c52:	f8df 9054 	ldr.w	r9, [pc, #84]	; 82ca8 <fpgaspi_xferbyte+0x60>
   82c56:	4f15      	ldr	r7, [pc, #84]	; (82cac <fpgaspi_xferbyte+0x64>)
   82c58:	f8df 8054 	ldr.w	r8, [pc, #84]	; 82cb0 <fpgaspi_xferbyte+0x68>
   82c5c:	e008      	b.n	82c70 <fpgaspi_xferbyte+0x28>
		FPGASPI_CCLK_LOW();

		if (databyte & 0x80){
			FPGASPI_DO_HIGH();
			} else {
			FPGASPI_DO_LOW();
   82c5e:	47b8      	blx	r7
		}
		
		FPGASPI_CCLK_HIGH();
   82c60:	2038      	movs	r0, #56	; 0x38
   82c62:	47c0      	blx	r8
		databyte = databyte << 1;
   82c64:	006d      	lsls	r5, r5, #1
		result = result << 1;
   82c66:	0064      	lsls	r4, r4, #1
	for(unsigned int i=0; i < 8; i++){	
   82c68:	3e01      	subs	r6, #1
		databyte = databyte << 1;
   82c6a:	b2ed      	uxtb	r5, r5
		result = result << 1;
   82c6c:	b2e4      	uxtb	r4, r4
	for(unsigned int i=0; i < 8; i++){	
   82c6e:	d00e      	beq.n	82c8e <fpgaspi_xferbyte+0x46>
		result |= FPGASPI_DI_STATUS() ? (1) : 0;
   82c70:	2043      	movs	r0, #67	; 0x43
   82c72:	47c8      	blx	r9
   82c74:	4603      	mov	r3, r0
		FPGASPI_CCLK_LOW();
   82c76:	2038      	movs	r0, #56	; 0x38
		result |= FPGASPI_DI_STATUS() ? (1) : 0;
   82c78:	2b00      	cmp	r3, #0
   82c7a:	bf18      	it	ne
   82c7c:	f044 0401 	orrne.w	r4, r4, #1
		FPGASPI_CCLK_LOW();
   82c80:	47b8      	blx	r7
		if (databyte & 0x80){
   82c82:	062b      	lsls	r3, r5, #24
			FPGASPI_DO_HIGH();
   82c84:	f04f 0055 	mov.w	r0, #85	; 0x55
		if (databyte & 0x80){
   82c88:	d5e9      	bpl.n	82c5e <fpgaspi_xferbyte+0x16>
			FPGASPI_DO_HIGH();
   82c8a:	47c0      	blx	r8
   82c8c:	e7e8      	b.n	82c60 <fpgaspi_xferbyte+0x18>
	}

	result |= FPGASPI_DI_STATUS() ? (1) : 0;
   82c8e:	2043      	movs	r0, #67	; 0x43
   82c90:	47c8      	blx	r9
   82c92:	4603      	mov	r3, r0
   82c94:	2b00      	cmp	r3, #0
   82c96:	bf18      	it	ne
   82c98:	f044 0401 	orrne.w	r4, r4, #1

	FPGASPI_CCLK_LOW();
   82c9c:	2038      	movs	r0, #56	; 0x38
	result |= FPGASPI_DI_STATUS() ? (1) : 0;
   82c9e:	b264      	sxtb	r4, r4
	FPGASPI_CCLK_LOW();
   82ca0:	47b8      	blx	r7

	return result;
}
   82ca2:	b2e0      	uxtb	r0, r4
   82ca4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82ca8:	00083669 	.word	0x00083669
   82cac:	000836a1 	.word	0x000836a1
   82cb0:	00083685 	.word	0x00083685

00082cb4 <fpgaspi_program_deinit>:


void fpgaspi_program_deinit(void)
{
   82cb4:	b510      	push	{r4, lr}
	FPGASPI_CCLK_RELEASE();
   82cb6:	2100      	movs	r1, #0
   82cb8:	4c05      	ldr	r4, [pc, #20]	; (82cd0 <fpgaspi_program_deinit+0x1c>)
   82cba:	2038      	movs	r0, #56	; 0x38
   82cbc:	47a0      	blx	r4
	FPGASPI_DO_RELEASE();
   82cbe:	2100      	movs	r1, #0
   82cc0:	2055      	movs	r0, #85	; 0x55
   82cc2:	47a0      	blx	r4
	FPGASPI_CS_RELEASE();
   82cc4:	4623      	mov	r3, r4
   82cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	FPGASPI_CS_RELEASE();
   82cca:	2100      	movs	r1, #0
   82ccc:	2056      	movs	r0, #86	; 0x56
   82cce:	4718      	bx	r3
   82cd0:	000836e1 	.word	0x000836e1

00082cd4 <tps56520_set.part.0>:
{
	return twi_probe(TWI0, TPS56520_ADDR);
}

/* Set voltage in mV for FPGA VCC_INT Voltage */
bool tps56520_set(uint16_t mv_output)
   82cd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t setting = (mv_output - 600) / 10;
	
	if (!checkoddparity(setting)){
		setting |= 1<<7;
	}
	twi_package_t packet_write = {
   82cd8:	2401      	movs	r4, #1
   82cda:	2734      	movs	r7, #52	; 0x34
	uint8_t setting = (mv_output - 600) / 10;
   82cdc:	4b2d      	ldr	r3, [pc, #180]	; (82d94 <tps56520_set.part.0+0xc0>)
   82cde:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
   82ce2:	fba3 3000 	umull	r3, r0, r3, r0
   82ce6:	08c2      	lsrs	r2, r0, #3
	p = p ^ (p >> 4 | p << 4);
   82ce8:	f3c0 13c3 	ubfx	r3, r0, #7, #4
   82cec:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   82cf0:	4053      	eors	r3, r2
   82cf2:	b2da      	uxtb	r2, r3
	p = p ^ (p >> 2);
   82cf4:	f3c3 0385 	ubfx	r3, r3, #2, #6
   82cf8:	4053      	eors	r3, r2
	twi_package_t packet_write = {
   82cfa:	4a27      	ldr	r2, [pc, #156]	; (82d98 <tps56520_set.part.0+0xc4>)
	p = p ^ (p >> 1);
   82cfc:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
bool tps56520_set(uint16_t mv_output)
   82d00:	b08c      	sub	sp, #48	; 0x30
	twi_package_t packet_write = {
   82d02:	6816      	ldr	r6, [r2, #0]
	uint8_t setting = (mv_output - 600) / 10;
   82d04:	f3c0 00c7 	ubfx	r0, r0, #3, #8
	if (!checkoddparity(setting)){
   82d08:	07db      	lsls	r3, r3, #31
		setting |= 1<<7;
   82d0a:	bf58      	it	pl
   82d0c:	f060 007f 	ornpl	r0, r0, #127	; 0x7f
	twi_package_t packet_write = {
   82d10:	f10d 0306 	add.w	r3, sp, #6
		setting |= 1<<7;
   82d14:	f88d 0006 	strb.w	r0, [sp, #6]
	twi_package_t packet_write = {
   82d18:	9304      	str	r3, [sp, #16]
		.chip         = TPS56520_ADDR,      // TWI slave bus address
		.buffer       = &setting, // transfer data source buffer
		.length       = 1  // transfer data size (bytes)
	};
	
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   82d1a:	4820      	ldr	r0, [pc, #128]	; (82d9c <tps56520_set.part.0+0xc8>)
   82d1c:	4b20      	ldr	r3, [pc, #128]	; (82da0 <tps56520_set.part.0+0xcc>)
	twi_package_t packet_write = {
   82d1e:	ea4f 4816 	mov.w	r8, r6, lsr #16
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   82d22:	a902      	add	r1, sp, #8
	twi_package_t packet_write = {
   82d24:	f8ad 6008 	strh.w	r6, [sp, #8]
   82d28:	f88d 800a 	strb.w	r8, [sp, #10]
   82d2c:	9403      	str	r4, [sp, #12]
   82d2e:	9405      	str	r4, [sp, #20]
   82d30:	f88d 7018 	strb.w	r7, [sp, #24]
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   82d34:	4798      	blx	r3
   82d36:	4605      	mov	r5, r0
   82d38:	b130      	cbz	r0, 82d48 <tps56520_set.part.0+0x74>
		I2C_LOCK = 0;
   82d3a:	2300      	movs	r3, #0
		return false;
   82d3c:	4618      	mov	r0, r3
		I2C_LOCK = 0;
   82d3e:	4a19      	ldr	r2, [pc, #100]	; (82da4 <tps56520_set.part.0+0xd0>)
   82d40:	7013      	strb	r3, [r2, #0]
		I2C_LOCK = 0;
		return true;
	}
	I2C_LOCK = 0;
	return false;
   82d42:	b00c      	add	sp, #48	; 0x30
   82d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	twi_package_t packet_read = {
   82d48:	f10d 0307 	add.w	r3, sp, #7
   82d4c:	9309      	str	r3, [sp, #36]	; 0x24
	if(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS){
   82d4e:	4813      	ldr	r0, [pc, #76]	; (82d9c <tps56520_set.part.0+0xc8>)
   82d50:	4b15      	ldr	r3, [pc, #84]	; (82da8 <tps56520_set.part.0+0xd4>)
   82d52:	a907      	add	r1, sp, #28
	twi_package_t packet_read = {
   82d54:	f8ad 601c 	strh.w	r6, [sp, #28]
   82d58:	f88d 801e 	strb.w	r8, [sp, #30]
   82d5c:	9408      	str	r4, [sp, #32]
   82d5e:	940a      	str	r4, [sp, #40]	; 0x28
   82d60:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
	if(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS){
   82d64:	4798      	blx	r3
   82d66:	4603      	mov	r3, r0
   82d68:	b968      	cbnz	r0, 82d86 <tps56520_set.part.0+0xb2>
	if (volt_read == setting){
   82d6a:	f89d 2006 	ldrb.w	r2, [sp, #6]
   82d6e:	f89d 1007 	ldrb.w	r1, [sp, #7]
   82d72:	4291      	cmp	r1, r2
		return true;
   82d74:	bf0b      	itete	eq
   82d76:	4620      	moveq	r0, r4
	return false;
   82d78:	4618      	movne	r0, r3
		I2C_LOCK = 0;
   82d7a:	4a0a      	ldreq	r2, [pc, #40]	; (82da4 <tps56520_set.part.0+0xd0>)
	I2C_LOCK = 0;
   82d7c:	4a09      	ldrne	r2, [pc, #36]	; (82da4 <tps56520_set.part.0+0xd0>)
   82d7e:	7013      	strb	r3, [r2, #0]
   82d80:	b00c      	add	sp, #48	; 0x30
   82d82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   82d86:	4628      	mov	r0, r5
		I2C_LOCK = 0;
   82d88:	4b06      	ldr	r3, [pc, #24]	; (82da4 <tps56520_set.part.0+0xd0>)
   82d8a:	701d      	strb	r5, [r3, #0]
   82d8c:	b00c      	add	sp, #48	; 0x30
   82d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82d92:	bf00      	nop
   82d94:	cccccccd 	.word	0xcccccccd
   82d98:	0008ca50 	.word	0x0008ca50
   82d9c:	4008c000 	.word	0x4008c000
   82da0:	00083b05 	.word	0x00083b05
   82da4:	20072133 	.word	0x20072133
   82da8:	00083a2d 	.word	0x00083a2d

00082dac <tps56520_set>:
	if (I2C_LOCK) return false;
   82dac:	4a0e      	ldr	r2, [pc, #56]	; (82de8 <tps56520_set+0x3c>)
   82dae:	7811      	ldrb	r1, [r2, #0]
   82db0:	b9b9      	cbnz	r1, 82de2 <tps56520_set+0x36>
{
   82db2:	b500      	push	{lr}
	I2C_LOCK = 1;
   82db4:	f04f 0e01 	mov.w	lr, #1
   82db8:	f001 0cff 	and.w	ip, r1, #255	; 0xff
	if ((mv_output < 600) || (mv_output > 1800)){
   82dbc:	f5a0 7116 	sub.w	r1, r0, #600	; 0x258
   82dc0:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
	I2C_LOCK = 1;
   82dc4:	f882 e000 	strb.w	lr, [r2]
	if ((mv_output < 600) || (mv_output > 1800)){
   82dc8:	d806      	bhi.n	82dd8 <tps56520_set+0x2c>
	if (mv_output > 1200){
   82dca:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   82dce:	d803      	bhi.n	82dd8 <tps56520_set+0x2c>
   82dd0:	4b06      	ldr	r3, [pc, #24]	; (82dec <tps56520_set+0x40>)
   82dd2:	f85d eb04 	ldr.w	lr, [sp], #4
   82dd6:	4718      	bx	r3
		I2C_LOCK = 0;
   82dd8:	f882 c000 	strb.w	ip, [r2]
   82ddc:	2000      	movs	r0, #0
   82dde:	f85d fb04 	ldr.w	pc, [sp], #4
   82de2:	2000      	movs	r0, #0
   82de4:	4770      	bx	lr
   82de6:	bf00      	nop
   82de8:	20072133 	.word	0x20072133
   82dec:	00082cd5 	.word	0x00082cd5

00082df0 <cdce906_init>:

volatile uint8_t I2C_LOCK = 0;

/* Init the CDCE906 chip, set offline */
bool cdce906_init(void)
{
   82df0:	b570      	push	{r4, r5, r6, lr}
	//gpio_configure_pin(PIN_CDCE_SDA, PIN_CDCE_SDA_FLAGS);
	//gpio_configure_pin(PIN_CDCE_SCL, PIN_CDCE_SCL_FLAGS);
	
	twi_master_options_t opt = {
   82df2:	f24c 3250 	movw	r2, #50000	; 0xc350
   82df6:	2569      	movs	r5, #105	; 0x69
{
   82df8:	b08a      	sub	sp, #40	; 0x28
	p_opt->master_clk = sysclk_get_peripheral_hz();
   82dfa:	491c      	ldr	r1, [pc, #112]	; (82e6c <cdce906_init+0x7c>)
	twi_master_options_t opt = {
   82dfc:	e9cd 2503 	strd	r2, r5, [sp, #12]
   82e00:	4b1b      	ldr	r3, [pc, #108]	; (82e70 <cdce906_init+0x80>)
   82e02:	2016      	movs	r0, #22
   82e04:	9102      	str	r1, [sp, #8]
   82e06:	4798      	blx	r3
	return (twi_master_init(p_twi, p_opt));
   82e08:	4b1a      	ldr	r3, [pc, #104]	; (82e74 <cdce906_init+0x84>)
   82e0a:	481b      	ldr	r0, [pc, #108]	; (82e78 <cdce906_init+0x88>)
   82e0c:	a902      	add	r1, sp, #8
   82e0e:	4798      	blx	r3
		.chip  = CDCE906_ADDR
	};
	
	twi_master_setup(TWI0, &opt);
	
	uint8_t data = 0;
   82e10:	2000      	movs	r0, #0
	}
}

bool cdce906_read(uint8_t addr, uint8_t * data)
{
	if (I2C_LOCK) {
   82e12:	4c1a      	ldr	r4, [pc, #104]	; (82e7c <cdce906_init+0x8c>)
	uint8_t data = 0;
   82e14:	f88d 0007 	strb.w	r0, [sp, #7]
	if (I2C_LOCK) {
   82e18:	7823      	ldrb	r3, [r4, #0]
   82e1a:	b10b      	cbz	r3, 82e20 <cdce906_init+0x30>
}
   82e1c:	b00a      	add	sp, #40	; 0x28
   82e1e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
	}
	I2C_LOCK = 1;
   82e20:	f003 06ff 	and.w	r6, r3, #255	; 0xff
	twi_package_t packet_read = {
   82e24:	2280      	movs	r2, #128	; 0x80
	I2C_LOCK = 1;
   82e26:	2301      	movs	r3, #1
	twi_package_t packet_read = {
   82e28:	9605      	str	r6, [sp, #20]
	I2C_LOCK = 1;
   82e2a:	7023      	strb	r3, [r4, #0]
	twi_package_t packet_read = {
   82e2c:	f88d 2014 	strb.w	r2, [sp, #20]
   82e30:	9306      	str	r3, [sp, #24]
   82e32:	9308      	str	r3, [sp, #32]
   82e34:	f10d 0207 	add.w	r2, sp, #7
		.chip         = CDCE906_ADDR,      // TWI slave bus address
		.buffer       = data,        // transfer data destination buffer
		.length       = 1,                    // transfer data size (bytes)
	};
	
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   82e38:	4b11      	ldr	r3, [pc, #68]	; (82e80 <cdce906_init+0x90>)
   82e3a:	480f      	ldr	r0, [pc, #60]	; (82e78 <cdce906_init+0x88>)
   82e3c:	a905      	add	r1, sp, #20
	twi_package_t packet_read = {
   82e3e:	9609      	str	r6, [sp, #36]	; 0x24
   82e40:	9207      	str	r2, [sp, #28]
   82e42:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   82e46:	4798      	blx	r3
   82e48:	4603      	mov	r3, r0
   82e4a:	b118      	cbz	r0, 82e54 <cdce906_init+0x64>
		return false;
   82e4c:	4630      	mov	r0, r6
		I2C_LOCK = 0;
		return 1;
	} else {
		I2C_LOCK = 0;
   82e4e:	7026      	strb	r6, [r4, #0]
}
   82e50:	b00a      	add	sp, #40	; 0x28
   82e52:	bd70      	pop	{r4, r5, r6, pc}
	if ((data & 0x0F) == 0x01){
   82e54:	f89d 0007 	ldrb.w	r0, [sp, #7]
		I2C_LOCK = 0;
   82e58:	7023      	strb	r3, [r4, #0]
	if ((data & 0x0F) == 0x01){
   82e5a:	f000 000f 	and.w	r0, r0, #15
   82e5e:	f1a0 0001 	sub.w	r0, r0, #1
   82e62:	fab0 f080 	clz	r0, r0
   82e66:	0940      	lsrs	r0, r0, #5
}
   82e68:	b00a      	add	sp, #40	; 0x28
   82e6a:	bd70      	pop	{r4, r5, r6, pc}
   82e6c:	0501bd00 	.word	0x0501bd00
   82e70:	000834d5 	.word	0x000834d5
   82e74:	000839d5 	.word	0x000839d5
   82e78:	4008c000 	.word	0x4008c000
   82e7c:	20072133 	.word	0x20072133
   82e80:	00083a2d 	.word	0x00083a2d

00082e84 <cdce906_write>:
{
   82e84:	b570      	push	{r4, r5, r6, lr}
	if (I2C_LOCK) {
   82e86:	4d14      	ldr	r5, [pc, #80]	; (82ed8 <cdce906_write+0x54>)
{
   82e88:	b088      	sub	sp, #32
	if (I2C_LOCK) {
   82e8a:	782b      	ldrb	r3, [r5, #0]
{
   82e8c:	f88d 1007 	strb.w	r1, [sp, #7]
	if (I2C_LOCK) {
   82e90:	b113      	cbz	r3, 82e98 <cdce906_write+0x14>
		return false;
   82e92:	2000      	movs	r0, #0
}
   82e94:	b008      	add	sp, #32
   82e96:	bd70      	pop	{r4, r5, r6, pc}
	I2C_LOCK = 1;
   82e98:	2401      	movs	r4, #1
	twi_package_t packet_write = {
   82e9a:	2269      	movs	r2, #105	; 0x69
   82e9c:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   82ea0:	f060 007f 	orn	r0, r0, #127	; 0x7f
   82ea4:	f10d 0307 	add.w	r3, sp, #7
   82ea8:	9603      	str	r6, [sp, #12]
   82eaa:	9305      	str	r3, [sp, #20]
   82eac:	f88d 000c 	strb.w	r0, [sp, #12]
	if (twi_master_write(TWI0, &packet_write) == TWI_SUCCESS){
   82eb0:	4b0a      	ldr	r3, [pc, #40]	; (82edc <cdce906_write+0x58>)
   82eb2:	480b      	ldr	r0, [pc, #44]	; (82ee0 <cdce906_write+0x5c>)
   82eb4:	a903      	add	r1, sp, #12
	twi_package_t packet_write = {
   82eb6:	9607      	str	r6, [sp, #28]
	I2C_LOCK = 1;
   82eb8:	702c      	strb	r4, [r5, #0]
	twi_package_t packet_write = {
   82eba:	9404      	str	r4, [sp, #16]
   82ebc:	9406      	str	r4, [sp, #24]
   82ebe:	f88d 201c 	strb.w	r2, [sp, #28]
	if (twi_master_write(TWI0, &packet_write) == TWI_SUCCESS){
   82ec2:	4798      	blx	r3
   82ec4:	4603      	mov	r3, r0
   82ec6:	b918      	cbnz	r0, 82ed0 <cdce906_write+0x4c>
		return true;
   82ec8:	4620      	mov	r0, r4
		I2C_LOCK = 0;
   82eca:	702b      	strb	r3, [r5, #0]
}
   82ecc:	b008      	add	sp, #32
   82ece:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   82ed0:	4630      	mov	r0, r6
		I2C_LOCK = 0;
   82ed2:	702e      	strb	r6, [r5, #0]
}
   82ed4:	b008      	add	sp, #32
   82ed6:	bd70      	pop	{r4, r5, r6, pc}
   82ed8:	20072133 	.word	0x20072133
   82edc:	00083b05 	.word	0x00083b05
   82ee0:	4008c000 	.word	0x4008c000

00082ee4 <cdce906_read>:
{
   82ee4:	b570      	push	{r4, r5, r6, lr}
	if (I2C_LOCK) {
   82ee6:	4d12      	ldr	r5, [pc, #72]	; (82f30 <cdce906_read+0x4c>)
{
   82ee8:	b086      	sub	sp, #24
	if (I2C_LOCK) {
   82eea:	782b      	ldrb	r3, [r5, #0]
   82eec:	b113      	cbz	r3, 82ef4 <cdce906_read+0x10>
		return false;
   82eee:	2000      	movs	r0, #0
		return 0;
	}	
   82ef0:	b006      	add	sp, #24
   82ef2:	bd70      	pop	{r4, r5, r6, pc}
	I2C_LOCK = 1;
   82ef4:	2401      	movs	r4, #1
	twi_package_t packet_read = {
   82ef6:	2269      	movs	r2, #105	; 0x69
   82ef8:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   82efc:	f060 007f 	orn	r0, r0, #127	; 0x7f
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   82f00:	4b0c      	ldr	r3, [pc, #48]	; (82f34 <cdce906_read+0x50>)
	twi_package_t packet_read = {
   82f02:	9103      	str	r1, [sp, #12]
   82f04:	9601      	str	r6, [sp, #4]
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   82f06:	a901      	add	r1, sp, #4
	twi_package_t packet_read = {
   82f08:	f88d 0004 	strb.w	r0, [sp, #4]
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   82f0c:	480a      	ldr	r0, [pc, #40]	; (82f38 <cdce906_read+0x54>)
	twi_package_t packet_read = {
   82f0e:	9605      	str	r6, [sp, #20]
	I2C_LOCK = 1;
   82f10:	702c      	strb	r4, [r5, #0]
	twi_package_t packet_read = {
   82f12:	9402      	str	r4, [sp, #8]
   82f14:	9404      	str	r4, [sp, #16]
   82f16:	f88d 2014 	strb.w	r2, [sp, #20]
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   82f1a:	4798      	blx	r3
   82f1c:	4603      	mov	r3, r0
   82f1e:	b918      	cbnz	r0, 82f28 <cdce906_read+0x44>
		return 1;
   82f20:	4620      	mov	r0, r4
		I2C_LOCK = 0;
   82f22:	702b      	strb	r3, [r5, #0]
   82f24:	b006      	add	sp, #24
   82f26:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   82f28:	4630      	mov	r0, r6
		I2C_LOCK = 0;
   82f2a:	702e      	strb	r6, [r5, #0]
   82f2c:	b006      	add	sp, #24
   82f2e:	bd70      	pop	{r4, r5, r6, pc}
   82f30:	20072133 	.word	0x20072133
   82f34:	00083a2d 	.word	0x00083a2d
   82f38:	4008c000 	.word	0x4008c000

00082f3c <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   82f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   82f3e:	2604      	movs	r6, #4
{
   82f40:	b087      	sub	sp, #28
   82f42:	4604      	mov	r4, r0
   82f44:	460d      	mov	r5, r1
	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   82f46:	220f      	movs	r2, #15
   82f48:	210e      	movs	r1, #14
   82f4a:	480c      	ldr	r0, [pc, #48]	; (82f7c <flash_read_unique_id+0x40>)
   82f4c:	4f0c      	ldr	r7, [pc, #48]	; (82f80 <flash_read_unique_id+0x44>)
   82f4e:	ab02      	add	r3, sp, #8
   82f50:	9600      	str	r6, [sp, #0]
   82f52:	47b8      	blx	r7
   82f54:	b970      	cbnz	r0, 82f74 <flash_read_unique_id+0x38>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
	}

	if (ul_size > 4) {
   82f56:	2d04      	cmp	r5, #4
   82f58:	4626      	mov	r6, r4
   82f5a:	462a      	mov	r2, r5
   82f5c:	4604      	mov	r4, r0
   82f5e:	bf28      	it	cs
   82f60:	2204      	movcs	r2, #4
		/* Only 4 dword to store unique ID */
		ul_size = 4;
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82f62:	b125      	cbz	r5, 82f6e <flash_read_unique_id+0x32>
		pul_data[ul_idx] = uid_buf[ul_idx];
   82f64:	4630      	mov	r0, r6
   82f66:	4b07      	ldr	r3, [pc, #28]	; (82f84 <flash_read_unique_id+0x48>)
   82f68:	a902      	add	r1, sp, #8
   82f6a:	0092      	lsls	r2, r2, #2
   82f6c:	4798      	blx	r3
	}

	return FLASH_RC_OK;
}
   82f6e:	4620      	mov	r0, r4
   82f70:	b007      	add	sp, #28
   82f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return FLASH_RC_ERROR;
   82f74:	2410      	movs	r4, #16
}
   82f76:	4620      	mov	r0, r4
   82f78:	b007      	add	sp, #28
   82f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82f7c:	400e0a00 	.word	0x400e0a00
   82f80:	20070111 	.word	0x20070111
   82f84:	00085d49 	.word	0x00085d49

00082f88 <usart_set_async_baudrate>:
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   82f88:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
{
   82f8c:	4684      	mov	ip, r0
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   82f8e:	ea4f 1001 	mov.w	r0, r1, lsl #4
   82f92:	d312      	bcc.n	82fba <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   82f94:	0843      	lsrs	r3, r0, #1
   82f96:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   82f9a:	fbb2 f2f0 	udiv	r2, r2, r0
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82f9e:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	cd = cd_fp >> 3;
   82fa2:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82fa4:	1e58      	subs	r0, r3, #1
   82fa6:	4288      	cmp	r0, r1
   82fa8:	d813      	bhi.n	82fd2 <usart_set_async_baudrate+0x4a>
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   82faa:	0412      	lsls	r2, r2, #16
   82fac:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   82fb0:	431a      	orrs	r2, r3

	return 0;
   82fb2:	2000      	movs	r0, #0
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   82fb4:	f8cc 2020 	str.w	r2, [ip, #32]
	return 0;
   82fb8:	4770      	bx	lr
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   82fba:	00c9      	lsls	r1, r1, #3
   82fbc:	084b      	lsrs	r3, r1, #1
   82fbe:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   82fc2:	fbb2 f2f1 	udiv	r2, r2, r1
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82fc6:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	cd = cd_fp >> 3;
   82fca:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82fcc:	1e58      	subs	r0, r3, #1
   82fce:	4288      	cmp	r0, r1
   82fd0:	d901      	bls.n	82fd6 <usart_set_async_baudrate+0x4e>
		return 1;
   82fd2:	2001      	movs	r0, #1
}
   82fd4:	4770      	bx	lr
		p_usart->US_MR |= US_MR_OVER;
   82fd6:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82fda:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   82fde:	f8cc 1004 	str.w	r1, [ip, #4]
   82fe2:	e7e2      	b.n	82faa <usart_set_async_baudrate+0x22>

00082fe4 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   82fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   82fe8:	f44f 7c80 	mov.w	ip, #256	; 0x100
	p_usart->US_MR = 0;
   82fec:	2300      	movs	r3, #0
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   82fee:	f04f 0888 	mov.w	r8, #136	; 0x88
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   82ff2:	f04f 0e24 	mov.w	lr, #36	; 0x24
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   82ff6:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   82ffa:	f8df 904c 	ldr.w	r9, [pc, #76]	; 83048 <usart_init_rs232+0x64>
	ul_reg_val = 0;
   82ffe:	4e13      	ldr	r6, [pc, #76]	; (8304c <usart_init_rs232+0x68>)
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   83000:	f8c0 90e4 	str.w	r9, [r0, #228]	; 0xe4
	ul_reg_val = 0;
   83004:	6033      	str	r3, [r6, #0]
	p_usart->US_MR = 0;
   83006:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   83008:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   8300a:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   8300c:	f8c0 8000 	str.w	r8, [r0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   83010:	f8c0 e000 	str.w	lr, [r0]
	p_usart->US_CR = US_CR_RSTSTA;
   83014:	f8c0 c000 	str.w	ip, [r0]
	p_usart->US_CR = US_CR_RTSDIS;
   83018:	6007      	str	r7, [r0, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   8301a:	b191      	cbz	r1, 83042 <usart_init_rs232+0x5e>
   8301c:	460d      	mov	r5, r1
   8301e:	4b0c      	ldr	r3, [pc, #48]	; (83050 <usart_init_rs232+0x6c>)
   83020:	6809      	ldr	r1, [r1, #0]
   83022:	4604      	mov	r4, r0
   83024:	4798      	blx	r3
   83026:	b960      	cbnz	r0, 83042 <usart_init_rs232+0x5e>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   83028:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   8302c:	4313      	orrs	r3, r2
   8302e:	692a      	ldr	r2, [r5, #16]
   83030:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   83032:	68ea      	ldr	r2, [r5, #12]
   83034:	4313      	orrs	r3, r2
	p_usart->US_MR |= ul_reg_val;
   83036:	6862      	ldr	r2, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   83038:	6033      	str	r3, [r6, #0]
	p_usart->US_MR |= ul_reg_val;
   8303a:	4313      	orrs	r3, r2
   8303c:	6063      	str	r3, [r4, #4]
}
   8303e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   83042:	2001      	movs	r0, #1
}
   83044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83048:	55534100 	.word	0x55534100
   8304c:	20072134 	.word	0x20072134
   83050:	00082f89 	.word	0x00082f89

00083054 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   83054:	2340      	movs	r3, #64	; 0x40
   83056:	6003      	str	r3, [r0, #0]
}
   83058:	4770      	bx	lr
   8305a:	bf00      	nop

0008305c <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   8305c:	2380      	movs	r3, #128	; 0x80
   8305e:	6003      	str	r3, [r0, #0]
}
   83060:	4770      	bx	lr
   83062:	bf00      	nop

00083064 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   83064:	2310      	movs	r3, #16
   83066:	6003      	str	r3, [r0, #0]
}
   83068:	4770      	bx	lr
   8306a:	bf00      	nop

0008306c <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   8306c:	2320      	movs	r3, #32
   8306e:	6003      	str	r3, [r0, #0]
}
   83070:	4770      	bx	lr
   83072:	bf00      	nop

00083074 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   83074:	6081      	str	r1, [r0, #8]
}
   83076:	4770      	bx	lr

00083078 <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   83078:	60c1      	str	r1, [r0, #12]
}
   8307a:	4770      	bx	lr

0008307c <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   8307c:	6900      	ldr	r0, [r0, #16]
}
   8307e:	4770      	bx	lr

00083080 <usart_get_status>:
	return p_usart->US_CSR;
   83080:	6940      	ldr	r0, [r0, #20]
}
   83082:	4770      	bx	lr

00083084 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   83084:	6943      	ldr	r3, [r0, #20]
   83086:	079b      	lsls	r3, r3, #30
   83088:	d5fc      	bpl.n	83084 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   8308a:	f3c1 0108 	ubfx	r1, r1, #0, #9
   8308e:	61c1      	str	r1, [r0, #28]
}
   83090:	2000      	movs	r0, #0
   83092:	4770      	bx	lr

00083094 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83094:	4a31      	ldr	r2, [pc, #196]	; (8315c <SystemCoreClockUpdate+0xc8>)
   83096:	6b13      	ldr	r3, [r2, #48]	; 0x30
   83098:	f003 0303 	and.w	r3, r3, #3
   8309c:	2b01      	cmp	r3, #1
   8309e:	d02c      	beq.n	830fa <SystemCoreClockUpdate+0x66>
   830a0:	3b02      	subs	r3, #2
   830a2:	2b01      	cmp	r3, #1
   830a4:	d81e      	bhi.n	830e4 <SystemCoreClockUpdate+0x50>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   830a6:	6a13      	ldr	r3, [r2, #32]
   830a8:	01d9      	lsls	r1, r3, #7
   830aa:	d538      	bpl.n	8311e <SystemCoreClockUpdate+0x8a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   830ac:	482c      	ldr	r0, [pc, #176]	; (83160 <SystemCoreClockUpdate+0xcc>)
   830ae:	4b2d      	ldr	r3, [pc, #180]	; (83164 <SystemCoreClockUpdate+0xd0>)
   830b0:	6003      	str	r3, [r0, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   830b2:	4a2a      	ldr	r2, [pc, #168]	; (8315c <SystemCoreClockUpdate+0xc8>)
   830b4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   830b6:	f003 0303 	and.w	r3, r3, #3
   830ba:	2b02      	cmp	r3, #2
   830bc:	d03c      	beq.n	83138 <SystemCoreClockUpdate+0xa4>
   830be:	4b2a      	ldr	r3, [pc, #168]	; (83168 <SystemCoreClockUpdate+0xd4>)
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   830c0:	4926      	ldr	r1, [pc, #152]	; (8315c <SystemCoreClockUpdate+0xc8>)
   830c2:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   830c4:	f002 0270 	and.w	r2, r2, #112	; 0x70
   830c8:	2a70      	cmp	r2, #112	; 0x70
   830ca:	d005      	beq.n	830d8 <SystemCoreClockUpdate+0x44>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   830cc:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   830ce:	f3c2 1202 	ubfx	r2, r2, #4, #3
   830d2:	40d3      	lsrs	r3, r2
   830d4:	6003      	str	r3, [r0, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   830d6:	4770      	bx	lr
		SystemCoreClock /= 3U;
   830d8:	4a24      	ldr	r2, [pc, #144]	; (8316c <SystemCoreClockUpdate+0xd8>)
   830da:	fba2 2303 	umull	r2, r3, r2, r3
   830de:	085b      	lsrs	r3, r3, #1
   830e0:	6003      	str	r3, [r0, #0]
}
   830e2:	4770      	bx	lr
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   830e4:	4b22      	ldr	r3, [pc, #136]	; (83170 <SystemCoreClockUpdate+0xdc>)
   830e6:	481e      	ldr	r0, [pc, #120]	; (83160 <SystemCoreClockUpdate+0xcc>)
   830e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   830ea:	f013 0f80 	tst.w	r3, #128	; 0x80
   830ee:	bf14      	ite	ne
   830f0:	f44f 4300 	movne.w	r3, #32768	; 0x8000
   830f4:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
   830f8:	e7e2      	b.n	830c0 <SystemCoreClockUpdate+0x2c>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   830fa:	6a13      	ldr	r3, [r2, #32]
   830fc:	01db      	lsls	r3, r3, #7
   830fe:	d40b      	bmi.n	83118 <SystemCoreClockUpdate+0x84>
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83100:	6a12      	ldr	r2, [r2, #32]
   83102:	f002 0270 	and.w	r2, r2, #112	; 0x70
   83106:	2a10      	cmp	r2, #16
   83108:	d021      	beq.n	8314e <SystemCoreClockUpdate+0xba>
   8310a:	4b16      	ldr	r3, [pc, #88]	; (83164 <SystemCoreClockUpdate+0xd0>)
   8310c:	4919      	ldr	r1, [pc, #100]	; (83174 <SystemCoreClockUpdate+0xe0>)
   8310e:	4814      	ldr	r0, [pc, #80]	; (83160 <SystemCoreClockUpdate+0xcc>)
   83110:	2a20      	cmp	r2, #32
   83112:	bf18      	it	ne
   83114:	460b      	movne	r3, r1
   83116:	e7d3      	b.n	830c0 <SystemCoreClockUpdate+0x2c>
   83118:	4b12      	ldr	r3, [pc, #72]	; (83164 <SystemCoreClockUpdate+0xd0>)
   8311a:	4811      	ldr	r0, [pc, #68]	; (83160 <SystemCoreClockUpdate+0xcc>)
   8311c:	e7d0      	b.n	830c0 <SystemCoreClockUpdate+0x2c>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8311e:	4b15      	ldr	r3, [pc, #84]	; (83174 <SystemCoreClockUpdate+0xe0>)
   83120:	480f      	ldr	r0, [pc, #60]	; (83160 <SystemCoreClockUpdate+0xcc>)
   83122:	6003      	str	r3, [r0, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   83124:	6a13      	ldr	r3, [r2, #32]
   83126:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8312a:	2b10      	cmp	r3, #16
   8312c:	d012      	beq.n	83154 <SystemCoreClockUpdate+0xc0>
   8312e:	2b20      	cmp	r3, #32
   83130:	d1bf      	bne.n	830b2 <SystemCoreClockUpdate+0x1e>
				SystemCoreClock *= 3U;
   83132:	4b0c      	ldr	r3, [pc, #48]	; (83164 <SystemCoreClockUpdate+0xd0>)
   83134:	6003      	str	r3, [r0, #0]
				break;
   83136:	e7bc      	b.n	830b2 <SystemCoreClockUpdate+0x1e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   83138:	6a91      	ldr	r1, [r2, #40]	; 0x28
   8313a:	6803      	ldr	r3, [r0, #0]
   8313c:	f3c1 410a 	ubfx	r1, r1, #16, #11
   83140:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83144:	6a92      	ldr	r2, [r2, #40]	; 0x28
   83146:	b2d2      	uxtb	r2, r2
   83148:	fbb3 f3f2 	udiv	r3, r3, r2
   8314c:	e7b8      	b.n	830c0 <SystemCoreClockUpdate+0x2c>
   8314e:	4b0a      	ldr	r3, [pc, #40]	; (83178 <SystemCoreClockUpdate+0xe4>)
   83150:	4803      	ldr	r0, [pc, #12]	; (83160 <SystemCoreClockUpdate+0xcc>)
   83152:	e7b5      	b.n	830c0 <SystemCoreClockUpdate+0x2c>
				SystemCoreClock *= 2U;
   83154:	4b08      	ldr	r3, [pc, #32]	; (83178 <SystemCoreClockUpdate+0xe4>)
   83156:	6003      	str	r3, [r0, #0]
				break;
   83158:	e7ab      	b.n	830b2 <SystemCoreClockUpdate+0x1e>
   8315a:	bf00      	nop
   8315c:	400e0600 	.word	0x400e0600
   83160:	20070948 	.word	0x20070948
   83164:	00b71b00 	.word	0x00b71b00
   83168:	0e4e1c00 	.word	0x0e4e1c00
   8316c:	aaaaaaab 	.word	0xaaaaaaab
   83170:	400e1a00 	.word	0x400e1a00
   83174:	003d0900 	.word	0x003d0900
   83178:	007a1200 	.word	0x007a1200

0008317c <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   8317c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83180:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83184:	670a      	str	r2, [r1, #112]	; 0x70
}
   83186:	4770      	bx	lr

00083188 <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   83188:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8318c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83190:	674a      	str	r2, [r1, #116]	; 0x74
}
   83192:	4770      	bx	lr

00083194 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   83194:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83198:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   8319c:	678a      	str	r2, [r1, #120]	; 0x78
}
   8319e:	4770      	bx	lr

000831a0 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   831a0:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   831a4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   831a8:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
}
   831ac:	4770      	bx	lr
   831ae:	bf00      	nop

000831b0 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   831b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   831b2:	4b12      	ldr	r3, [pc, #72]	; (831fc <pio_handler_process+0x4c>)
{
   831b4:	4604      	mov	r4, r0
   831b6:	460e      	mov	r6, r1
	status = pio_get_interrupt_status(p_pio);
   831b8:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
   831ba:	4b11      	ldr	r3, [pc, #68]	; (83200 <pio_handler_process+0x50>)
	status = pio_get_interrupt_status(p_pio);
   831bc:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   831be:	4620      	mov	r0, r4
   831c0:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   831c2:	4005      	ands	r5, r0
   831c4:	d019      	beq.n	831fa <pio_handler_process+0x4a>
   831c6:	4c0f      	ldr	r4, [pc, #60]	; (83204 <pio_handler_process+0x54>)
   831c8:	f104 0760 	add.w	r7, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   831cc:	6823      	ldr	r3, [r4, #0]
   831ce:	42b3      	cmp	r3, r6
   831d0:	d005      	beq.n	831de <pio_handler_process+0x2e>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   831d2:	42bc      	cmp	r4, r7
   831d4:	d011      	beq.n	831fa <pio_handler_process+0x4a>
			if (gs_interrupt_sources[i].id == ul_id) {
   831d6:	6923      	ldr	r3, [r4, #16]
		while (status != 0) {
   831d8:	3410      	adds	r4, #16
			if (gs_interrupt_sources[i].id == ul_id) {
   831da:	42b3      	cmp	r3, r6
   831dc:	d1f9      	bne.n	831d2 <pio_handler_process+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   831de:	6861      	ldr	r1, [r4, #4]
   831e0:	4229      	tst	r1, r5
   831e2:	d0f6      	beq.n	831d2 <pio_handler_process+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   831e4:	68e3      	ldr	r3, [r4, #12]
   831e6:	4630      	mov	r0, r6
   831e8:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   831ea:	6863      	ldr	r3, [r4, #4]
			if (i >= MAX_INTERRUPT_SOURCES) {
   831ec:	42bc      	cmp	r4, r7
					status &= ~(gs_interrupt_sources[i].mask);
   831ee:	ea25 0503 	bic.w	r5, r5, r3
			if (i >= MAX_INTERRUPT_SOURCES) {
   831f2:	d002      	beq.n	831fa <pio_handler_process+0x4a>
		while (status != 0) {
   831f4:	3410      	adds	r4, #16
   831f6:	2d00      	cmp	r5, #0
   831f8:	d1e8      	bne.n	831cc <pio_handler_process+0x1c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   831fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   831fc:	00083661 	.word	0x00083661
   83200:	00083665 	.word	0x00083665
   83204:	20072138 	.word	0x20072138

00083208 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   83208:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   8320c:	4f1d      	ldr	r7, [pc, #116]	; (83284 <pio_handler_set+0x7c>)
   8320e:	683e      	ldr	r6, [r7, #0]
   83210:	2e06      	cmp	r6, #6
   83212:	d828      	bhi.n	83266 <pio_handler_set+0x5e>
   83214:	460d      	mov	r5, r1
   83216:	4611      	mov	r1, r2
   83218:	461a      	mov	r2, r3
   8321a:	4b1b      	ldr	r3, [pc, #108]	; (83288 <pio_handler_set+0x80>)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   8321c:	f04f 0e00 	mov.w	lr, #0
   83220:	469c      	mov	ip, r3
   83222:	f106 0801 	add.w	r8, r6, #1
   83226:	e004      	b.n	83232 <pio_handler_set+0x2a>
   83228:	4576      	cmp	r6, lr
   8322a:	f10c 0c10 	add.w	ip, ip, #16
   8322e:	d01d      	beq.n	8326c <pio_handler_set+0x64>
   83230:	46a6      	mov	lr, r4
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   83232:	f8dc 9000 	ldr.w	r9, [ip]
   83236:	f10e 0401 	add.w	r4, lr, #1
   8323a:	45a9      	cmp	r9, r5
   8323c:	d1f4      	bne.n	83228 <pio_handler_set+0x20>
   8323e:	f8dc 9004 	ldr.w	r9, [ip, #4]
   83242:	4589      	cmp	r9, r1
   83244:	d1f0      	bne.n	83228 <pio_handler_set+0x20>

	/* Define new source */
	pSource->id = ul_id;
	pSource->mask = ul_mask;
	pSource->attr = ul_attr;
	pSource->handler = p_handler;
   83246:	9e08      	ldr	r6, [sp, #32]
	pSource->id = ul_id;
   83248:	eb03 140e 	add.w	r4, r3, lr, lsl #4
	pSource->attr = ul_attr;
   8324c:	e9c4 1201 	strd	r1, r2, [r4, #4]
	pSource->handler = p_handler;
   83250:	60e6      	str	r6, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   83252:	45f0      	cmp	r8, lr
	pSource->id = ul_id;
   83254:	ea4f 140e 	mov.w	r4, lr, lsl #4
   83258:	511d      	str	r5, [r3, r4]
	if (i == gs_ul_nb_sources + 1) {
   8325a:	d00f      	beq.n	8327c <pio_handler_set+0x74>
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   8325c:	4b0b      	ldr	r3, [pc, #44]	; (8328c <pio_handler_set+0x84>)
   8325e:	4798      	blx	r3

	return 0;
   83260:	2000      	movs	r0, #0
}
   83262:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   83266:	2001      	movs	r0, #1
}
   83268:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	pSource->id = ul_id;
   8326c:	eb03 1406 	add.w	r4, r3, r6, lsl #4
   83270:	0136      	lsls	r6, r6, #4
   83272:	519d      	str	r5, [r3, r6]
	pSource->attr = ul_attr;
   83274:	e9c4 1201 	strd	r1, r2, [r4, #4]
	pSource->handler = p_handler;
   83278:	9b08      	ldr	r3, [sp, #32]
   8327a:	60e3      	str	r3, [r4, #12]
		gs_ul_nb_sources++;
   8327c:	f8c7 8000 	str.w	r8, [r7]
   83280:	e7ec      	b.n	8325c <pio_handler_set+0x54>
   83282:	bf00      	nop
   83284:	200721a8 	.word	0x200721a8
   83288:	20072138 	.word	0x20072138
   8328c:	00083635 	.word	0x00083635

00083290 <PIOA_Handler>:
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
	pio_handler_process(PIOA, ID_PIOA);
   83290:	210b      	movs	r1, #11
   83292:	4801      	ldr	r0, [pc, #4]	; (83298 <PIOA_Handler+0x8>)
   83294:	4b01      	ldr	r3, [pc, #4]	; (8329c <PIOA_Handler+0xc>)
   83296:	4718      	bx	r3
   83298:	400e0e00 	.word	0x400e0e00
   8329c:	000831b1 	.word	0x000831b1

000832a0 <PIOB_Handler>:
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
    pio_handler_process(PIOB, ID_PIOB);
   832a0:	210c      	movs	r1, #12
   832a2:	4801      	ldr	r0, [pc, #4]	; (832a8 <PIOB_Handler+0x8>)
   832a4:	4b01      	ldr	r3, [pc, #4]	; (832ac <PIOB_Handler+0xc>)
   832a6:	4718      	bx	r3
   832a8:	400e1000 	.word	0x400e1000
   832ac:	000831b1 	.word	0x000831b1

000832b0 <PIOC_Handler>:
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
	pio_handler_process(PIOC, ID_PIOC);
   832b0:	210d      	movs	r1, #13
   832b2:	4801      	ldr	r0, [pc, #4]	; (832b8 <PIOC_Handler+0x8>)
   832b4:	4b01      	ldr	r3, [pc, #4]	; (832bc <PIOC_Handler+0xc>)
   832b6:	4718      	bx	r3
   832b8:	400e1200 	.word	0x400e1200
   832bc:	000831b1 	.word	0x000831b1

000832c0 <PIOD_Handler>:
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
	pio_handler_process(PIOD, ID_PIOD);
   832c0:	210e      	movs	r1, #14
   832c2:	4801      	ldr	r0, [pc, #4]	; (832c8 <PIOD_Handler+0x8>)
   832c4:	4b01      	ldr	r3, [pc, #4]	; (832cc <PIOD_Handler+0xc>)
   832c6:	4718      	bx	r3
   832c8:	400e1400 	.word	0x400e1400
   832cc:	000831b1 	.word	0x000831b1

000832d0 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   832d0:	3801      	subs	r0, #1
   832d2:	2802      	cmp	r0, #2
   832d4:	d81a      	bhi.n	8330c <_write+0x3c>
		return -1;
	}

	for (; len != 0; --len) {
   832d6:	b1da      	cbz	r2, 83310 <_write+0x40>
{
   832d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   832dc:	460d      	mov	r5, r1
	for (; len != 0; --len) {
   832de:	4614      	mov	r4, r2
   832e0:	4f0c      	ldr	r7, [pc, #48]	; (83314 <_write+0x44>)
   832e2:	f8df 8034 	ldr.w	r8, [pc, #52]	; 83318 <_write+0x48>
   832e6:	1c56      	adds	r6, r2, #1
   832e8:	e001      	b.n	832ee <_write+0x1e>
   832ea:	3c01      	subs	r4, #1
   832ec:	d00b      	beq.n	83306 <_write+0x36>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   832ee:	6838      	ldr	r0, [r7, #0]
   832f0:	f8d8 3000 	ldr.w	r3, [r8]
   832f4:	f815 1b01 	ldrb.w	r1, [r5], #1
   832f8:	4798      	blx	r3
   832fa:	2800      	cmp	r0, #0
   832fc:	eba6 0204 	sub.w	r2, r6, r4
   83300:	daf3      	bge.n	832ea <_write+0x1a>
		return -1;
   83302:	f04f 32ff 	mov.w	r2, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   83306:	4610      	mov	r0, r2
   83308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   8330c:	f04f 32ff 	mov.w	r2, #4294967295
}
   83310:	4610      	mov	r0, r2
   83312:	4770      	bx	lr
   83314:	200721b0 	.word	0x200721b0
   83318:	200721ac 	.word	0x200721ac

0008331c <sysclk_enable_usb>:
		pmc_enable_upll_clock();
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
		pmc_enable_udpck();
		return;
	}
}
   8331c:	4770      	bx	lr
   8331e:	bf00      	nop

00083320 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   83320:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   83322:	480f      	ldr	r0, [pc, #60]	; (83360 <sysclk_init+0x40>)
   83324:	4d0f      	ldr	r5, [pc, #60]	; (83364 <sysclk_init+0x44>)
   83326:	47a8      	blx	r5
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   83328:	213e      	movs	r1, #62	; 0x3e
   8332a:	2000      	movs	r0, #0
   8332c:	4b0e      	ldr	r3, [pc, #56]	; (83368 <sysclk_init+0x48>)
   8332e:	4798      	blx	r3
		break;
   83330:	4c0e      	ldr	r4, [pc, #56]	; (8336c <sysclk_init+0x4c>)
		return pmc_osc_is_ready_mainck();
   83332:	47a0      	blx	r4
   83334:	2800      	cmp	r0, #0
   83336:	d0fc      	beq.n	83332 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   83338:	4b0d      	ldr	r3, [pc, #52]	; (83370 <sysclk_init+0x50>)
   8333a:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   8333c:	4b0d      	ldr	r3, [pc, #52]	; (83374 <sysclk_init+0x54>)
   8333e:	4a0e      	ldr	r2, [pc, #56]	; (83378 <sysclk_init+0x58>)
   83340:	4c0e      	ldr	r4, [pc, #56]	; (8337c <sysclk_init+0x5c>)
   83342:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   83344:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   83346:	2800      	cmp	r0, #0
   83348:	d0fc      	beq.n	83344 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8334a:	4b0d      	ldr	r3, [pc, #52]	; (83380 <sysclk_init+0x60>)
   8334c:	2010      	movs	r0, #16
   8334e:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83350:	4b0c      	ldr	r3, [pc, #48]	; (83384 <sysclk_init+0x64>)
   83352:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83354:	462b      	mov	r3, r5

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   83356:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
   8335a:	4801      	ldr	r0, [pc, #4]	; (83360 <sysclk_init+0x40>)
   8335c:	4718      	bx	r3
   8335e:	bf00      	nop
   83360:	0501bd00 	.word	0x0501bd00
   83364:	2007008d 	.word	0x2007008d
   83368:	00083441 	.word	0x00083441
   8336c:	00083491 	.word	0x00083491
   83370:	000834a1 	.word	0x000834a1
   83374:	400e0600 	.word	0x400e0600
   83378:	200d3f01 	.word	0x200d3f01
   8337c:	000834b1 	.word	0x000834b1
   83380:	000833e5 	.word	0x000833e5
   83384:	00083095 	.word	0x00083095

00083388 <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83388:	4915      	ldr	r1, [pc, #84]	; (833e0 <pmc_switch_mck_to_mainck+0x58>)
   8338a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8338c:	f023 0303 	bic.w	r3, r3, #3
   83390:	f043 0301 	orr.w	r3, r3, #1
   83394:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83396:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   83398:	071b      	lsls	r3, r3, #28
   8339a:	bf58      	it	pl
   8339c:	f44f 6300 	movpl.w	r3, #2048	; 0x800
   833a0:	d502      	bpl.n	833a8 <pmc_switch_mck_to_mainck+0x20>
   833a2:	e004      	b.n	833ae <pmc_switch_mck_to_mainck+0x26>
			--ul_timeout) {
		if (ul_timeout == 0) {
   833a4:	3b01      	subs	r3, #1
   833a6:	d016      	beq.n	833d6 <pmc_switch_mck_to_mainck+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   833a8:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   833aa:	0712      	lsls	r2, r2, #28
   833ac:	d5fa      	bpl.n	833a4 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   833ae:	490c      	ldr	r1, [pc, #48]	; (833e0 <pmc_switch_mck_to_mainck+0x58>)
   833b0:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   833b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   833b6:	4303      	orrs	r3, r0
   833b8:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   833ba:	6e88      	ldr	r0, [r1, #104]	; 0x68
   833bc:	f010 0008 	ands.w	r0, r0, #8
   833c0:	bf08      	it	eq
   833c2:	f44f 6300 	moveq.w	r3, #2048	; 0x800
   833c6:	d002      	beq.n	833ce <pmc_switch_mck_to_mainck+0x46>
   833c8:	e007      	b.n	833da <pmc_switch_mck_to_mainck+0x52>
			--ul_timeout) {
		if (ul_timeout == 0) {
   833ca:	3b01      	subs	r3, #1
   833cc:	d003      	beq.n	833d6 <pmc_switch_mck_to_mainck+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   833ce:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   833d0:	0712      	lsls	r2, r2, #28
   833d2:	d5fa      	bpl.n	833ca <pmc_switch_mck_to_mainck+0x42>
			return 1;
		}
	}

	return 0;
}
   833d4:	4770      	bx	lr
			return 1;
   833d6:	2001      	movs	r0, #1
   833d8:	4770      	bx	lr
	return 0;
   833da:	2000      	movs	r0, #0
   833dc:	4770      	bx	lr
   833de:	bf00      	nop
   833e0:	400e0600 	.word	0x400e0600

000833e4 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   833e4:	4915      	ldr	r1, [pc, #84]	; (8343c <pmc_switch_mck_to_pllack+0x58>)
   833e6:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   833e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   833ec:	4303      	orrs	r3, r0
   833ee:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   833f0:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   833f2:	071b      	lsls	r3, r3, #28
   833f4:	bf58      	it	pl
   833f6:	f44f 6300 	movpl.w	r3, #2048	; 0x800
   833fa:	d502      	bpl.n	83402 <pmc_switch_mck_to_pllack+0x1e>
   833fc:	e004      	b.n	83408 <pmc_switch_mck_to_pllack+0x24>
			--ul_timeout) {
		if (ul_timeout == 0) {
   833fe:	3b01      	subs	r3, #1
   83400:	d017      	beq.n	83432 <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83402:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83404:	0710      	lsls	r0, r2, #28
   83406:	d5fa      	bpl.n	833fe <pmc_switch_mck_to_pllack+0x1a>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   83408:	490c      	ldr	r1, [pc, #48]	; (8343c <pmc_switch_mck_to_pllack+0x58>)
   8340a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   8340c:	f023 0303 	bic.w	r3, r3, #3
   83410:	f043 0302 	orr.w	r3, r3, #2
   83414:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83416:	6e88      	ldr	r0, [r1, #104]	; 0x68
   83418:	f010 0008 	ands.w	r0, r0, #8
   8341c:	bf08      	it	eq
   8341e:	f44f 6300 	moveq.w	r3, #2048	; 0x800
   83422:	d002      	beq.n	8342a <pmc_switch_mck_to_pllack+0x46>
   83424:	e007      	b.n	83436 <pmc_switch_mck_to_pllack+0x52>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83426:	3b01      	subs	r3, #1
   83428:	d003      	beq.n	83432 <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8342a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8342c:	0712      	lsls	r2, r2, #28
   8342e:	d5fa      	bpl.n	83426 <pmc_switch_mck_to_pllack+0x42>
			return 1;
		}
	}

	return 0;
}
   83430:	4770      	bx	lr
			return 1;
   83432:	2001      	movs	r0, #1
   83434:	4770      	bx	lr
	return 0;
   83436:	2000      	movs	r0, #0
   83438:	4770      	bx	lr
   8343a:	bf00      	nop
   8343c:	400e0600 	.word	0x400e0600

00083440 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   83440:	b138      	cbz	r0, 83452 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83442:	4910      	ldr	r1, [pc, #64]	; (83484 <pmc_switch_mainck_to_xtal+0x44>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   83444:	4a10      	ldr	r2, [pc, #64]	; (83488 <pmc_switch_mainck_to_xtal+0x48>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83446:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   83448:	4b10      	ldr	r3, [pc, #64]	; (8348c <pmc_switch_mainck_to_xtal+0x4c>)
   8344a:	4002      	ands	r2, r0
   8344c:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8344e:	620b      	str	r3, [r1, #32]
   83450:	4770      	bx	lr
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83452:	4a0c      	ldr	r2, [pc, #48]	; (83484 <pmc_switch_mainck_to_xtal+0x44>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83454:	0209      	lsls	r1, r1, #8
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83456:	6a10      	ldr	r0, [r2, #32]
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83458:	b28b      	uxth	r3, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8345a:	f420 115c 	bic.w	r1, r0, #3604480	; 0x370000
   8345e:	f021 0103 	bic.w	r1, r1, #3
   83462:	430b      	orrs	r3, r1
   83464:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   83468:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8346c:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8346e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83470:	07db      	lsls	r3, r3, #31
   83472:	d5fc      	bpl.n	8346e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   83474:	6a13      	ldr	r3, [r2, #32]
   83476:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8347a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   8347e:	6213      	str	r3, [r2, #32]
	}
}
   83480:	4770      	bx	lr
   83482:	bf00      	nop
   83484:	400e0600 	.word	0x400e0600
   83488:	fec8fffc 	.word	0xfec8fffc
   8348c:	01370002 	.word	0x01370002

00083490 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83490:	4b02      	ldr	r3, [pc, #8]	; (8349c <pmc_osc_is_ready_mainck+0xc>)
   83492:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83494:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   83498:	4770      	bx	lr
   8349a:	bf00      	nop
   8349c:	400e0600 	.word	0x400e0600

000834a0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   834a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   834a4:	4b01      	ldr	r3, [pc, #4]	; (834ac <pmc_disable_pllack+0xc>)
   834a6:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   834a8:	4770      	bx	lr
   834aa:	bf00      	nop
   834ac:	400e0600 	.word	0x400e0600

000834b0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   834b0:	4b02      	ldr	r3, [pc, #8]	; (834bc <pmc_is_locked_pllack+0xc>)
   834b2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   834b4:	f000 0002 	and.w	r0, r0, #2
   834b8:	4770      	bx	lr
   834ba:	bf00      	nop
   834bc:	400e0600 	.word	0x400e0600

000834c0 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   834c0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
   834c4:	4a02      	ldr	r2, [pc, #8]	; (834d0 <pmc_enable_upll_clock+0x10>)
   834c6:	61d3      	str	r3, [r2, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   834c8:	6e93      	ldr	r3, [r2, #104]	; 0x68
   834ca:	065b      	lsls	r3, r3, #25
   834cc:	d5fc      	bpl.n	834c8 <pmc_enable_upll_clock+0x8>
}
   834ce:	4770      	bx	lr
   834d0:	400e0600 	.word	0x400e0600

000834d4 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   834d4:	4602      	mov	r2, r0
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   834d6:	4b06      	ldr	r3, [pc, #24]	; (834f0 <pmc_enable_periph_clk+0x1c>)
   834d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   834dc:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   834e0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   834e4:	2000      	movs	r0, #0
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   834e6:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   834ea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   834ee:	4770      	bx	lr
   834f0:	400e0600 	.word	0x400e0600

000834f4 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   834f4:	f44f 7380 	mov.w	r3, #256	; 0x100
   834f8:	4a01      	ldr	r2, [pc, #4]	; (83500 <pmc_enable_pck+0xc>)
   834fa:	4083      	lsls	r3, r0
   834fc:	6013      	str	r3, [r2, #0]
}
   834fe:	4770      	bx	lr
   83500:	400e0600 	.word	0x400e0600

00083504 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   83504:	4b03      	ldr	r3, [pc, #12]	; (83514 <pmc_set_fast_startup_input+0x10>)
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   83506:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   8350a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   8350c:	4310      	orrs	r0, r2
   8350e:	6718      	str	r0, [r3, #112]	; 0x70
}
   83510:	4770      	bx	lr
   83512:	bf00      	nop
   83514:	400e0600 	.word	0x400e0600

00083518 <udi_vendor_getsetting>:
	return false; // Not supported request
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
   83518:	4b01      	ldr	r3, [pc, #4]	; (83520 <udi_vendor_getsetting+0x8>)
}
   8351a:	7818      	ldrb	r0, [r3, #0]
   8351c:	4770      	bx	lr
   8351e:	bf00      	nop
   83520:	200721b4 	.word	0x200721b4

00083524 <udi_vendor_disable>:
	if (0 == udi_vendor_alternate_setting) {
   83524:	4b02      	ldr	r3, [pc, #8]	; (83530 <udi_vendor_disable+0xc>)
   83526:	781b      	ldrb	r3, [r3, #0]
   83528:	b103      	cbz	r3, 8352c <udi_vendor_disable+0x8>
}
   8352a:	4770      	bx	lr
		UDI_VENDOR_DISABLE_EXT();
   8352c:	4b01      	ldr	r3, [pc, #4]	; (83534 <udi_vendor_disable+0x10>)
   8352e:	4718      	bx	r3
   83530:	200721b4 	.word	0x200721b4
   83534:	000818d1 	.word	0x000818d1

00083538 <udi_vendor_setup>:
	if (Udd_setup_is_in()) {
   83538:	4b08      	ldr	r3, [pc, #32]	; (8355c <udi_vendor_setup+0x24>)
   8353a:	f993 2000 	ldrsb.w	r2, [r3]
   8353e:	781b      	ldrb	r3, [r3, #0]
   83540:	2a00      	cmp	r2, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83542:	f003 0360 	and.w	r3, r3, #96	; 0x60
	if (Udd_setup_is_in()) {
   83546:	db03      	blt.n	83550 <udi_vendor_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83548:	2b40      	cmp	r3, #64	; 0x40
   8354a:	d005      	beq.n	83558 <udi_vendor_setup+0x20>
}
   8354c:	2000      	movs	r0, #0
   8354e:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83550:	2b40      	cmp	r3, #64	; 0x40
   83552:	d1fb      	bne.n	8354c <udi_vendor_setup+0x14>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   83554:	4b02      	ldr	r3, [pc, #8]	; (83560 <udi_vendor_setup+0x28>)
   83556:	4718      	bx	r3
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   83558:	4b02      	ldr	r3, [pc, #8]	; (83564 <udi_vendor_setup+0x2c>)
   8355a:	4718      	bx	r3
   8355c:	20072288 	.word	0x20072288
   83560:	0008192d 	.word	0x0008192d
   83564:	000818dd 	.word	0x000818dd

00083568 <udi_vendor_enable>:
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   83568:	4b06      	ldr	r3, [pc, #24]	; (83584 <udi_vendor_enable+0x1c>)
{
   8356a:	b510      	push	{r4, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   8356c:	4798      	blx	r3
   8356e:	4a06      	ldr	r2, [pc, #24]	; (83588 <udi_vendor_enable+0x20>)
   83570:	78c3      	ldrb	r3, [r0, #3]
   83572:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   83574:	b10b      	cbz	r3, 8357a <udi_vendor_enable+0x12>
}
   83576:	2001      	movs	r0, #1
   83578:	bd10      	pop	{r4, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   8357a:	4b04      	ldr	r3, [pc, #16]	; (8358c <udi_vendor_enable+0x24>)
}
   8357c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   83580:	4718      	bx	r3
   83582:	bf00      	nop
   83584:	00081175 	.word	0x00081175
   83588:	200721b4 	.word	0x200721b4
   8358c:	000818a9 	.word	0x000818a9

00083590 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   83590:	b530      	push	{r4, r5, lr}
   83592:	4684      	mov	ip, r0
   83594:	4615      	mov	r5, r2
   83596:	b083      	sub	sp, #12
   83598:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   8359a:	4662      	mov	r2, ip
   8359c:	2100      	movs	r1, #0
   8359e:	4c03      	ldr	r4, [pc, #12]	; (835ac <udi_vendor_bulk_in_run+0x1c>)
   835a0:	9500      	str	r5, [sp, #0]
   835a2:	2081      	movs	r0, #129	; 0x81
   835a4:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   835a6:	b003      	add	sp, #12
   835a8:	bd30      	pop	{r4, r5, pc}
   835aa:	bf00      	nop
   835ac:	000844a9 	.word	0x000844a9

000835b0 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   835b0:	b530      	push	{r4, r5, lr}
   835b2:	4684      	mov	ip, r0
   835b4:	4615      	mov	r5, r2
   835b6:	b083      	sub	sp, #12
   835b8:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   835ba:	4662      	mov	r2, ip
   835bc:	2100      	movs	r1, #0
   835be:	4c03      	ldr	r4, [pc, #12]	; (835cc <udi_vendor_bulk_out_run+0x1c>)
   835c0:	9500      	str	r5, [sp, #0]
   835c2:	2002      	movs	r0, #2
   835c4:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   835c6:	b003      	add	sp, #12
   835c8:	bd30      	pop	{r4, r5, pc}
   835ca:	bf00      	nop
   835cc:	000844a9 	.word	0x000844a9

000835d0 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   835d0:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   835d2:	f1a1 030e 	sub.w	r3, r1, #14
   835d6:	2b01      	cmp	r3, #1
   835d8:	d917      	bls.n	8360a <efc_perform_command+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   835da:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   835de:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   835e0:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   835e4:	2300      	movs	r3, #0
   835e6:	4c0a      	ldr	r4, [pc, #40]	; (83610 <efc_perform_command+0x40>)

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
   835e8:	b2c9      	uxtb	r1, r1
   835ea:	7023      	strb	r3, [r4, #0]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   835ec:	4b09      	ldr	r3, [pc, #36]	; (83614 <efc_perform_command+0x44>)
   835ee:	ea03 2202 	and.w	r2, r3, r2, lsl #8
   835f2:	4311      	orrs	r1, r2
	result = efc_perform_fcr(p_efc,
   835f4:	4b08      	ldr	r3, [pc, #32]	; (83618 <efc_perform_command+0x48>)
   835f6:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
   835fa:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   835fc:	b925      	cbnz	r5, 83608 <efc_perform_command+0x38>
		cpu_irq_enable();
   835fe:	2301      	movs	r3, #1
   83600:	7023      	strb	r3, [r4, #0]
   83602:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83606:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   83608:	bd38      	pop	{r3, r4, r5, pc}
		return EFC_RC_NOT_SUPPORT;
   8360a:	f04f 30ff 	mov.w	r0, #4294967295
}
   8360e:	bd38      	pop	{r3, r4, r5, pc}
   83610:	20070b04 	.word	0x20070b04
   83614:	00ffff00 	.word	0x00ffff00
   83618:	2007019d 	.word	0x2007019d

0008361c <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   8361c:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   83620:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   83624:	bf0c      	ite	eq
   83626:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   83628:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   8362a:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   8362c:	bf14      	ite	ne
   8362e:	2001      	movne	r0, #1
   83630:	2000      	moveq	r0, #0
   83632:	4770      	bx	lr

00083634 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   83634:	06d3      	lsls	r3, r2, #27
   83636:	d50e      	bpl.n	83656 <pio_configure_interrupt+0x22>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   83638:	0693      	lsls	r3, r2, #26
		p_pio->PIO_AIMER = ul_mask;
   8363a:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   8363e:	bf4c      	ite	mi
   83640:	f8c0 10d4 	strmi.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   83644:	f8c0 10d0 	strpl.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   83648:	0653      	lsls	r3, r2, #25
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   8364a:	bf4c      	ite	mi
   8364c:	f8c0 10c0 	strmi.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   83650:	f8c0 10c4 	strpl.w	r1, [r0, #196]	; 0xc4
   83654:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   83656:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
	}
}
   8365a:	4770      	bx	lr

0008365c <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
   8365c:	6401      	str	r1, [r0, #64]	; 0x40
}
   8365e:	4770      	bx	lr

00083660 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   83660:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   83662:	4770      	bx	lr

00083664 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   83664:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   83666:	4770      	bx	lr

00083668 <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83668:	0943      	lsrs	r3, r0, #5
   8366a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8366e:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83672:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   83674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   83676:	f000 001f 	and.w	r0, r0, #31
   8367a:	fa23 f000 	lsr.w	r0, r3, r0
}
   8367e:	f000 0001 	and.w	r0, r0, #1
   83682:	4770      	bx	lr

00083684 <pio_set_pin_high>:
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   83684:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83686:	0943      	lsrs	r3, r0, #5
   83688:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8368c:	f203 7307 	addw	r3, r3, #1799	; 0x707
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   83690:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83694:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   83696:	fa02 f000 	lsl.w	r0, r2, r0
   8369a:	6318      	str	r0, [r3, #48]	; 0x30
}
   8369c:	4770      	bx	lr
   8369e:	bf00      	nop

000836a0 <pio_set_pin_low>:
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   836a0:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   836a2:	0943      	lsrs	r3, r0, #5
   836a4:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   836a8:	f203 7307 	addw	r3, r3, #1799	; 0x707
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   836ac:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   836b0:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   836b2:	fa02 f000 	lsl.w	r0, r2, r0
   836b6:	6358      	str	r0, [r3, #52]	; 0x34
}
   836b8:	4770      	bx	lr
   836ba:	bf00      	nop

000836bc <pio_toggle_pin>:
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   836bc:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   836be:	0943      	lsrs	r3, r0, #5
   836c0:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   836c4:	f203 7307 	addw	r3, r3, #1799	; 0x707
   836c8:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   836ca:	6b99      	ldr	r1, [r3, #56]	; 0x38
   836cc:	f000 001f 	and.w	r0, r0, #31
   836d0:	fa02 f000 	lsl.w	r0, r2, r0
   836d4:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   836d6:	bf14      	ite	ne
   836d8:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   836da:	6318      	streq	r0, [r3, #48]	; 0x30
}
   836dc:	4770      	bx	lr
   836de:	bf00      	nop

000836e0 <pio_configure_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   836e0:	0943      	lsrs	r3, r0, #5
   836e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
	switch (ul_flags & PIO_TYPE_Msk) {
   836e6:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   836ea:	f203 7307 	addw	r3, r3, #1799	; 0x707
	switch (ul_flags & PIO_TYPE_Msk) {
   836ee:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   836f2:	ea4f 2343 	mov.w	r3, r3, lsl #9
	switch (ul_flags & PIO_TYPE_Msk) {
   836f6:	d035      	beq.n	83764 <pio_configure_pin+0x84>
{
   836f8:	b410      	push	{r4}
	switch (ul_flags & PIO_TYPE_Msk) {
   836fa:	d816      	bhi.n	8372a <pio_configure_pin+0x4a>
   836fc:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
   83700:	d01b      	beq.n	8373a <pio_configure_pin+0x5a>
   83702:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
   83706:	d115      	bne.n	83734 <pio_configure_pin+0x54>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   83708:	f04f 0c01 	mov.w	ip, #1
   8370c:	f000 001f 	and.w	r0, r0, #31
   83710:	fa0c f200 	lsl.w	r2, ip, r0
	p_pio->PIO_IDR = ul_mask;
   83714:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   83716:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   83718:	4310      	orrs	r0, r2
   8371a:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   8371c:	ea11 000c 	ands.w	r0, r1, ip
	p_pio->PIO_PDR = ul_mask;
   83720:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
   83722:	d01b      	beq.n	8375c <pio_configure_pin+0x7c>
		p_pio->PIO_PUER = ul_mask;
   83724:	665a      	str	r2, [r3, #100]	; 0x64
}
   83726:	bc10      	pop	{r4}
   83728:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
   8372a:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   8372e:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
   83732:	d02f      	beq.n	83794 <pio_configure_pin+0xb4>
   83734:	2000      	movs	r0, #0
}
   83736:	bc10      	pop	{r4}
   83738:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8373a:	f04f 0c01 	mov.w	ip, #1
   8373e:	f000 001f 	and.w	r0, r0, #31
   83742:	fa0c f200 	lsl.w	r2, ip, r0
	p_pio->PIO_IDR = ul_mask;
   83746:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   83748:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8374a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   8374c:	4020      	ands	r0, r4
   8374e:	ea20 0002 	bic.w	r0, r0, r2
   83752:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   83754:	ea11 000c 	ands.w	r0, r1, ip
	p_pio->PIO_PDR = ul_mask;
   83758:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
   8375a:	d1e3      	bne.n	83724 <pio_configure_pin+0x44>
		p_pio->PIO_PUDR = ul_mask;
   8375c:	661a      	str	r2, [r3, #96]	; 0x60
	return 1;
   8375e:	4660      	mov	r0, ip
}
   83760:	bc10      	pop	{r4}
   83762:	4770      	bx	lr
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   83764:	2201      	movs	r2, #1
   83766:	f000 001f 	and.w	r0, r0, #31
   8376a:	4082      	lsls	r2, r0
	if (ul_pull_up_enable) {
   8376c:	07c8      	lsls	r0, r1, #31
	p_pio->PIO_IDR = ul_mask;
   8376e:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   83770:	bf4c      	ite	mi
   83772:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83774:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   83776:	f011 0f0a 	tst.w	r1, #10
		p_pio->PIO_IFER = ul_mask;
   8377a:	bf14      	ite	ne
   8377c:	621a      	strne	r2, [r3, #32]
		p_pio->PIO_IFDR = ul_mask;
   8377e:	625a      	streq	r2, [r3, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   83780:	0788      	lsls	r0, r1, #30
   83782:	d422      	bmi.n	837ca <pio_configure_pin+0xea>
		if (ul_attribute & PIO_DEBOUNCE) {
   83784:	0708      	lsls	r0, r1, #28
			p_pio->PIO_DIFSR = ul_mask;
   83786:	bf48      	it	mi
   83788:	f8c3 2084 	strmi.w	r2, [r3, #132]	; 0x84
	return 1;
   8378c:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   8378e:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   83790:	601a      	str	r2, [r3, #0]
}
   83792:	4770      	bx	lr
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83794:	2201      	movs	r2, #1
   83796:	f000 001f 	and.w	r0, r0, #31
   8379a:	4082      	lsls	r2, r0
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8379c:	f001 5c60 	and.w	ip, r1, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   837a0:	f3c1 0480 	ubfx	r4, r1, #2, #1
	if (ul_pull_up_enable) {
   837a4:	07c9      	lsls	r1, r1, #31
	p_pio->PIO_IDR = ul_mask;
   837a6:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   837a8:	bf4c      	ite	mi
   837aa:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   837ac:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_multidrive_enable) {
   837ae:	b954      	cbnz	r4, 837c6 <pio_configure_pin+0xe6>
		p_pio->PIO_MDDR = ul_mask;
   837b0:	655a      	str	r2, [r3, #84]	; 0x54
	if (ul_default_level) {
   837b2:	f1bc 5f60 	cmp.w	ip, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
   837b6:	bf0c      	ite	eq
   837b8:	631a      	streq	r2, [r3, #48]	; 0x30
		p_pio->PIO_CODR = ul_mask;
   837ba:	635a      	strne	r2, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   837bc:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   837be:	601a      	str	r2, [r3, #0]
	return 1;
   837c0:	2001      	movs	r0, #1
}
   837c2:	bc10      	pop	{r4}
   837c4:	4770      	bx	lr
		p_pio->PIO_MDER = ul_mask;
   837c6:	651a      	str	r2, [r3, #80]	; 0x50
   837c8:	e7f3      	b.n	837b2 <pio_configure_pin+0xd2>
		p_pio->PIO_SCIFSR = ul_mask;
   837ca:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	return 1;
   837ce:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   837d0:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   837d2:	601a      	str	r2, [r3, #0]
}
   837d4:	4770      	bx	lr
   837d6:	bf00      	nop

000837d8 <pio_configure_pin_group>:
{
   837d8:	4603      	mov	r3, r0
	switch (ul_flags & PIO_TYPE_Msk) {
   837da:	f002 40f0 	and.w	r0, r2, #2013265920	; 0x78000000
   837de:	f1b0 5f20 	cmp.w	r0, #671088640	; 0x28000000
   837e2:	d029      	beq.n	83838 <pio_configure_pin_group+0x60>
{
   837e4:	b410      	push	{r4}
	switch (ul_flags & PIO_TYPE_Msk) {
   837e6:	d810      	bhi.n	8380a <pio_configure_pin_group+0x32>
   837e8:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
   837ec:	d015      	beq.n	8381a <pio_configure_pin_group+0x42>
   837ee:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   837f2:	d10f      	bne.n	83814 <pio_configure_pin_group+0x3c>
	p_pio->PIO_IDR = ul_mask;
   837f4:	6459      	str	r1, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   837f6:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   837f8:	4308      	orrs	r0, r1
   837fa:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   837fc:	f012 0001 	ands.w	r0, r2, #1
	p_pio->PIO_PDR = ul_mask;
   83800:	6059      	str	r1, [r3, #4]
	if (ul_pull_up_enable) {
   83802:	d015      	beq.n	83830 <pio_configure_pin_group+0x58>
		p_pio->PIO_PUER = ul_mask;
   83804:	6659      	str	r1, [r3, #100]	; 0x64
}
   83806:	bc10      	pop	{r4}
   83808:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
   8380a:	f002 40e0 	and.w	r0, r2, #1879048192	; 0x70000000
   8380e:	f1b0 5f40 	cmp.w	r0, #805306368	; 0x30000000
   83812:	d025      	beq.n	83860 <pio_configure_pin_group+0x88>
   83814:	2000      	movs	r0, #0
}
   83816:	bc10      	pop	{r4}
   83818:	4770      	bx	lr
	p_pio->PIO_IDR = ul_mask;
   8381a:	6459      	str	r1, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   8381c:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8381e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   83820:	4020      	ands	r0, r4
   83822:	ea20 0001 	bic.w	r0, r0, r1
   83826:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   83828:	f012 0001 	ands.w	r0, r2, #1
	p_pio->PIO_PDR = ul_mask;
   8382c:	6059      	str	r1, [r3, #4]
	if (ul_pull_up_enable) {
   8382e:	d1e9      	bne.n	83804 <pio_configure_pin_group+0x2c>
		p_pio->PIO_PUDR = ul_mask;
   83830:	6619      	str	r1, [r3, #96]	; 0x60
	return 1;
   83832:	2001      	movs	r0, #1
}
   83834:	bc10      	pop	{r4}
   83836:	4770      	bx	lr
	if (ul_pull_up_enable) {
   83838:	07d0      	lsls	r0, r2, #31
	p_pio->PIO_IDR = ul_mask;
   8383a:	6459      	str	r1, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   8383c:	bf4c      	ite	mi
   8383e:	6659      	strmi	r1, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83840:	6619      	strpl	r1, [r3, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   83842:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   83846:	bf14      	ite	ne
   83848:	6219      	strne	r1, [r3, #32]
		p_pio->PIO_IFDR = ul_mask;
   8384a:	6259      	streq	r1, [r3, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   8384c:	0790      	lsls	r0, r2, #30
   8384e:	d41e      	bmi.n	8388e <pio_configure_pin_group+0xb6>
		if (ul_attribute & PIO_DEBOUNCE) {
   83850:	0710      	lsls	r0, r2, #28
			p_pio->PIO_DIFSR = ul_mask;
   83852:	bf48      	it	mi
   83854:	f8c3 1084 	strmi.w	r1, [r3, #132]	; 0x84
	return 1;
   83858:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   8385a:	6159      	str	r1, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   8385c:	6019      	str	r1, [r3, #0]
}
   8385e:	4770      	bx	lr
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83860:	f002 5060 	and.w	r0, r2, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   83864:	f3c2 0480 	ubfx	r4, r2, #2, #1
	if (ul_pull_up_enable) {
   83868:	07d2      	lsls	r2, r2, #31
	p_pio->PIO_IDR = ul_mask;
   8386a:	6459      	str	r1, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   8386c:	bf4c      	ite	mi
   8386e:	6659      	strmi	r1, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83870:	6619      	strpl	r1, [r3, #96]	; 0x60
	if (ul_multidrive_enable) {
   83872:	b954      	cbnz	r4, 8388a <pio_configure_pin_group+0xb2>
		p_pio->PIO_MDDR = ul_mask;
   83874:	6559      	str	r1, [r3, #84]	; 0x54
	if (ul_default_level) {
   83876:	f1b0 5f60 	cmp.w	r0, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
   8387a:	bf0c      	ite	eq
   8387c:	6319      	streq	r1, [r3, #48]	; 0x30
		p_pio->PIO_CODR = ul_mask;
   8387e:	6359      	strne	r1, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   83880:	6119      	str	r1, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   83882:	6019      	str	r1, [r3, #0]
	return 1;
   83884:	2001      	movs	r0, #1
}
   83886:	bc10      	pop	{r4}
   83888:	4770      	bx	lr
		p_pio->PIO_MDER = ul_mask;
   8388a:	6519      	str	r1, [r3, #80]	; 0x50
   8388c:	e7f3      	b.n	83876 <pio_configure_pin_group+0x9e>
		p_pio->PIO_SCIFSR = ul_mask;
   8388e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	return 1;
   83892:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   83894:	6159      	str	r1, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   83896:	6019      	str	r1, [r3, #0]
}
   83898:	4770      	bx	lr
   8389a:	bf00      	nop

0008389c <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
   8389c:	e7fe      	b.n	8389c <Dummy_Handler>
   8389e:	bf00      	nop

000838a0 <Reset_Handler>:

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   838a0:	4917      	ldr	r1, [pc, #92]	; (83900 <Reset_Handler+0x60>)
   838a2:	4818      	ldr	r0, [pc, #96]	; (83904 <Reset_Handler+0x64>)
{
   838a4:	b508      	push	{r3, lr}
	if (pSrc != pDest) {
   838a6:	4281      	cmp	r1, r0
   838a8:	d009      	beq.n	838be <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   838aa:	4a17      	ldr	r2, [pc, #92]	; (83908 <Reset_Handler+0x68>)
   838ac:	4290      	cmp	r0, r2
   838ae:	d206      	bcs.n	838be <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   838b0:	3a01      	subs	r2, #1
   838b2:	1a12      	subs	r2, r2, r0
   838b4:	f022 0203 	bic.w	r2, r2, #3
   838b8:	4b14      	ldr	r3, [pc, #80]	; (8390c <Reset_Handler+0x6c>)
   838ba:	3204      	adds	r2, #4
   838bc:	4798      	blx	r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   838be:	4814      	ldr	r0, [pc, #80]	; (83910 <Reset_Handler+0x70>)
   838c0:	4a14      	ldr	r2, [pc, #80]	; (83914 <Reset_Handler+0x74>)
   838c2:	4290      	cmp	r0, r2
   838c4:	d207      	bcs.n	838d6 <Reset_Handler+0x36>
		*pDest++ = 0;
   838c6:	3a01      	subs	r2, #1
   838c8:	1a12      	subs	r2, r2, r0
   838ca:	f022 0203 	bic.w	r2, r2, #3
   838ce:	2100      	movs	r1, #0
   838d0:	4b11      	ldr	r3, [pc, #68]	; (83918 <Reset_Handler+0x78>)
   838d2:	3204      	adds	r2, #4
   838d4:	4798      	blx	r3
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   838d6:	4b11      	ldr	r3, [pc, #68]	; (8391c <Reset_Handler+0x7c>)
   838d8:	4911      	ldr	r1, [pc, #68]	; (83920 <Reset_Handler+0x80>)
   838da:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   838de:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   838e2:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   838e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   838ea:	608a      	str	r2, [r1, #8]
	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   838ec:	d203      	bcs.n	838f6 <Reset_Handler+0x56>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   838ee:	688b      	ldr	r3, [r1, #8]
   838f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   838f4:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   838f6:	4b0b      	ldr	r3, [pc, #44]	; (83924 <Reset_Handler+0x84>)
   838f8:	4798      	blx	r3

	/* Branch to main function */
	main();
   838fa:	4b0b      	ldr	r3, [pc, #44]	; (83928 <Reset_Handler+0x88>)
   838fc:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   838fe:	e7fe      	b.n	838fe <Reset_Handler+0x5e>
   83900:	0008cebc 	.word	0x0008cebc
   83904:	20070000 	.word	0x20070000
   83908:	200714e0 	.word	0x200714e0
   8390c:	00085d49 	.word	0x00085d49
   83910:	200714e0 	.word	0x200714e0
   83914:	20073354 	.word	0x20073354
   83918:	00085e35 	.word	0x00085e35
   8391c:	00080000 	.word	0x00080000
   83920:	e000ed00 	.word	0xe000ed00
   83924:	00085d01 	.word	0x00085d01
   83928:	000805a9 	.word	0x000805a9

0008392c <twi_set_speed.part.0>:
	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   8392c:	4b26      	ldr	r3, [pc, #152]	; (839c8 <twi_set_speed.part.0+0x9c>)
   8392e:	4299      	cmp	r1, r3
   83930:	d92b      	bls.n	8398a <twi_set_speed.part.0+0x5e>
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
   83932:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   83934:	4c25      	ldr	r4, [pc, #148]	; (839cc <twi_set_speed.part.0+0xa0>)
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   83936:	4b26      	ldr	r3, [pc, #152]	; (839d0 <twi_set_speed.part.0+0xa4>)
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   83938:	440c      	add	r4, r1
   8393a:	00a1      	lsls	r1, r4, #2
   8393c:	fbb2 f1f1 	udiv	r1, r2, r1
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   83940:	fba3 2302 	umull	r2, r3, r3, r2
   83944:	0b9b      	lsrs	r3, r3, #14
   83946:	3b04      	subs	r3, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83948:	2bff      	cmp	r3, #255	; 0xff
	uint32_t ckdiv = 0;
   8394a:	f04f 0200 	mov.w	r2, #0
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8394e:	f1a1 0104 	sub.w	r1, r1, #4
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83952:	d935      	bls.n	839c0 <twi_set_speed.part.0+0x94>
			/* Increase clock divider */
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   83954:	085b      	lsrs	r3, r3, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83956:	2bff      	cmp	r3, #255	; 0xff
			ckdiv++;
   83958:	f102 0201 	add.w	r2, r2, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8395c:	d910      	bls.n	83980 <twi_set_speed.part.0+0x54>
   8395e:	2a07      	cmp	r2, #7
   83960:	d1f8      	bne.n	83954 <twi_set_speed.part.0+0x28>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83962:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   83966:	0209      	lsls	r1, r1, #8
   83968:	b2db      	uxtb	r3, r3
   8396a:	b289      	uxth	r1, r1
   8396c:	4313      	orrs	r3, r2
   8396e:	430b      	orrs	r3, r1
		p_twi->TWI_CWGR =
   83970:	6103      	str	r3, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
   83972:	bc10      	pop	{r4}
   83974:	2000      	movs	r0, #0
   83976:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83978:	2a07      	cmp	r2, #7
   8397a:	d0f2      	beq.n	83962 <twi_set_speed.part.0+0x36>
			chdiv /= TWI_CLK_DIVIDER;
   8397c:	0849      	lsrs	r1, r1, #1
			ckdiv++;
   8397e:	3201      	adds	r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83980:	29ff      	cmp	r1, #255	; 0xff
				TWI_CWGR_CKDIV(ckdiv);		
   83982:	bf98      	it	ls
   83984:	0412      	lslls	r2, r2, #16
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83986:	d8f7      	bhi.n	83978 <twi_set_speed.part.0+0x4c>
   83988:	e7ed      	b.n	83966 <twi_set_speed.part.0+0x3a>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   8398a:	004b      	lsls	r3, r1, #1
   8398c:	fbb2 f3f3 	udiv	r3, r2, r3
   83990:	3b04      	subs	r3, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83992:	2bff      	cmp	r3, #255	; 0xff
	uint32_t ckdiv = 0;
   83994:	f04f 0200 	mov.w	r2, #0
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83998:	d908      	bls.n	839ac <twi_set_speed.part.0+0x80>
			c_lh_div /= TWI_CLK_DIVIDER;
   8399a:	085b      	lsrs	r3, r3, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   8399c:	2bff      	cmp	r3, #255	; 0xff
			ckdiv++;
   8399e:	f102 0201 	add.w	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   839a2:	d90b      	bls.n	839bc <twi_set_speed.part.0+0x90>
   839a4:	2a07      	cmp	r2, #7
   839a6:	d1f8      	bne.n	8399a <twi_set_speed.part.0+0x6e>
   839a8:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   839ac:	b2d9      	uxtb	r1, r3
   839ae:	021b      	lsls	r3, r3, #8
   839b0:	430a      	orrs	r2, r1
   839b2:	b29b      	uxth	r3, r3
   839b4:	4313      	orrs	r3, r2
		p_twi->TWI_CWGR =
   839b6:	6103      	str	r3, [r0, #16]
}
   839b8:	2000      	movs	r0, #0
   839ba:	4770      	bx	lr
				TWI_CWGR_CKDIV(ckdiv);
   839bc:	0412      	lsls	r2, r2, #16
   839be:	e7f5      	b.n	839ac <twi_set_speed.part.0+0x80>
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   839c0:	29ff      	cmp	r1, #255	; 0xff
   839c2:	d8db      	bhi.n	8397c <twi_set_speed.part.0+0x50>
   839c4:	e7cf      	b.n	83966 <twi_set_speed.part.0+0x3a>
   839c6:	bf00      	nop
   839c8:	0005dc00 	.word	0x0005dc00
   839cc:	7ffd1200 	.word	0x7ffd1200
   839d0:	057619f1 	.word	0x057619f1

000839d4 <twi_master_init>:
{
   839d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	p_twi->TWI_IDR = ~0UL;
   839d6:	f04f 3eff 	mov.w	lr, #4294967295
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   839da:	f04f 0c80 	mov.w	ip, #128	; 0x80
	p_twi->TWI_CR = TWI_CR_MSDIS;
   839de:	2708      	movs	r7, #8
	p_twi->TWI_CR = TWI_CR_SVDIS;
   839e0:	2620      	movs	r6, #32
	p_twi->TWI_CR = TWI_CR_MSEN;
   839e2:	2204      	movs	r2, #4
{
   839e4:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
   839e6:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
	p_twi->TWI_SR;
   839ea:	6a01      	ldr	r1, [r0, #32]
	p_twi->TWI_CR = TWI_CR_SWRST;
   839ec:	f8c0 c000 	str.w	ip, [r0]
	p_twi->TWI_RHR;
   839f0:	6b01      	ldr	r1, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
   839f2:	6007      	str	r7, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   839f4:	6006      	str	r6, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
   839f6:	6002      	str	r2, [r0, #0]
	if (ul_speed > I2C_FAST_MODE_SPEED) {
   839f8:	4b0a      	ldr	r3, [pc, #40]	; (83a24 <twi_master_init+0x50>)
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   839fa:	6869      	ldr	r1, [r5, #4]
{
   839fc:	4604      	mov	r4, r0
	if (ul_speed > I2C_FAST_MODE_SPEED) {
   839fe:	4299      	cmp	r1, r3
   83a00:	d80d      	bhi.n	83a1e <twi_master_init+0x4a>
   83a02:	682a      	ldr	r2, [r5, #0]
   83a04:	4b08      	ldr	r3, [pc, #32]	; (83a28 <twi_master_init+0x54>)
   83a06:	4798      	blx	r3
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   83a08:	f1a0 0001 	sub.w	r0, r0, #1
   83a0c:	fab0 f080 	clz	r0, r0
   83a10:	0940      	lsrs	r0, r0, #5
	if (p_opt->smbus == 1) {
   83a12:	7a6b      	ldrb	r3, [r5, #9]
   83a14:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   83a16:	bf04      	itt	eq
   83a18:	2340      	moveq	r3, #64	; 0x40
   83a1a:	6023      	streq	r3, [r4, #0]
}
   83a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		status = TWI_INVALID_ARGUMENT;
   83a1e:	2001      	movs	r0, #1
   83a20:	e7f7      	b.n	83a12 <twi_master_init+0x3e>
   83a22:	bf00      	nop
   83a24:	00061a80 	.word	0x00061a80
   83a28:	0008392d 	.word	0x0008392d

00083a2c <twi_master_read>:
{
   83a2c:	4684      	mov	ip, r0
	uint32_t cnt = p_packet->length;
   83a2e:	68c8      	ldr	r0, [r1, #12]
	if (cnt == 0) {
   83a30:	2800      	cmp	r0, #0
   83a32:	d061      	beq.n	83af8 <twi_master_read+0xcc>
{
   83a34:	b470      	push	{r4, r5, r6}
	p_twi->TWI_MMR = 0;
   83a36:	2500      	movs	r5, #0
	uint8_t *buffer = p_packet->buffer;
   83a38:	688c      	ldr	r4, [r1, #8]
	p_twi->TWI_MMR = 0;
   83a3a:	f8cc 5004 	str.w	r5, [ip, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   83a3e:	7c0b      	ldrb	r3, [r1, #16]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   83a40:	684a      	ldr	r2, [r1, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   83a42:	041b      	lsls	r3, r3, #16
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   83a44:	0212      	lsls	r2, r2, #8
   83a46:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   83a4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   83a4e:	4313      	orrs	r3, r2
   83a50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   83a54:	f8cc 3004 	str.w	r3, [ip, #4]
	p_twi->TWI_IADR = 0;
   83a58:	f8cc 500c 	str.w	r5, [ip, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   83a5c:	684a      	ldr	r2, [r1, #4]
	if (len == 0)
   83a5e:	2a00      	cmp	r2, #0
   83a60:	d03a      	beq.n	83ad8 <twi_master_read+0xac>
	if (len > 1) {
   83a62:	2a01      	cmp	r2, #1
	val = addr[0];
   83a64:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
   83a66:	dd02      	ble.n	83a6e <twi_master_read+0x42>
		val |= addr[1];
   83a68:	880b      	ldrh	r3, [r1, #0]
   83a6a:	ba5b      	rev16	r3, r3
   83a6c:	b29b      	uxth	r3, r3
	if (len > 2) {
   83a6e:	2a02      	cmp	r2, #2
   83a70:	dd02      	ble.n	83a78 <twi_master_read+0x4c>
		val |= addr[2];
   83a72:	788a      	ldrb	r2, [r1, #2]
   83a74:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	if (cnt == 1) {
   83a78:	2801      	cmp	r0, #1
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   83a7a:	f8cc 300c 	str.w	r3, [ip, #12]
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   83a7e:	bf0b      	itete	eq
   83a80:	2303      	moveq	r3, #3
		p_twi->TWI_CR = TWI_CR_START;
   83a82:	2301      	movne	r3, #1
		stop_sent = 1;
   83a84:	4605      	moveq	r5, r0
		stop_sent = 0;
   83a86:	2500      	movne	r5, #0
   83a88:	f241 3288 	movw	r2, #5000	; 0x1388
			p_twi->TWI_CR = TWI_CR_STOP;
   83a8c:	2602      	movs	r6, #2
		p_twi->TWI_CR = TWI_CR_START;
   83a8e:	f8cc 3000 	str.w	r3, [ip]
		status = p_twi->TWI_SR;
   83a92:	f8dc 3020 	ldr.w	r3, [ip, #32]
		if (status & TWI_SR_NACK) {
   83a96:	05d9      	lsls	r1, r3, #23
   83a98:	d413      	bmi.n	83ac2 <twi_master_read+0x96>
		if (!timeout--) {
   83a9a:	1e51      	subs	r1, r2, #1
   83a9c:	b372      	cbz	r2, 83afc <twi_master_read+0xd0>
		if (cnt == 1  && !stop_sent) {
   83a9e:	2801      	cmp	r0, #1
   83aa0:	d01c      	beq.n	83adc <twi_master_read+0xb0>
		if (!(status & TWI_SR_RXRDY)) {
   83aa2:	079b      	lsls	r3, r3, #30
   83aa4:	d521      	bpl.n	83aea <twi_master_read+0xbe>
		*buffer++ = p_twi->TWI_RHR;
   83aa6:	4623      	mov	r3, r4
   83aa8:	f8dc 2030 	ldr.w	r2, [ip, #48]	; 0x30
	while (cnt > 0) {
   83aac:	3801      	subs	r0, #1
		*buffer++ = p_twi->TWI_RHR;
   83aae:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt > 0) {
   83ab2:	d009      	beq.n	83ac8 <twi_master_read+0x9c>
		timeout = TWI_TIMEOUT;
   83ab4:	f241 3288 	movw	r2, #5000	; 0x1388
   83ab8:	461c      	mov	r4, r3
		status = p_twi->TWI_SR;
   83aba:	f8dc 3020 	ldr.w	r3, [ip, #32]
		if (status & TWI_SR_NACK) {
   83abe:	05d9      	lsls	r1, r3, #23
   83ac0:	d5eb      	bpl.n	83a9a <twi_master_read+0x6e>
			return TWI_RECEIVE_NACK;
   83ac2:	2005      	movs	r0, #5
}
   83ac4:	bc70      	pop	{r4, r5, r6}
   83ac6:	4770      	bx	lr
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   83ac8:	f8dc 3020 	ldr.w	r3, [ip, #32]
   83acc:	07da      	lsls	r2, r3, #31
   83ace:	d5fb      	bpl.n	83ac8 <twi_master_read+0x9c>
}
   83ad0:	bc70      	pop	{r4, r5, r6}
	p_twi->TWI_SR;
   83ad2:	f8dc 3020 	ldr.w	r3, [ip, #32]
}
   83ad6:	4770      	bx	lr
		return 0;
   83ad8:	4613      	mov	r3, r2
   83ada:	e7cd      	b.n	83a78 <twi_master_read+0x4c>
		if (cnt == 1  && !stop_sent) {
   83adc:	b90d      	cbnz	r5, 83ae2 <twi_master_read+0xb6>
			p_twi->TWI_CR = TWI_CR_STOP;
   83ade:	f8cc 6000 	str.w	r6, [ip]
		if (!(status & TWI_SR_RXRDY)) {
   83ae2:	079b      	lsls	r3, r3, #30
   83ae4:	d505      	bpl.n	83af2 <twi_master_read+0xc6>
   83ae6:	2501      	movs	r5, #1
   83ae8:	e7dd      	b.n	83aa6 <twi_master_read+0x7a>
   83aea:	4623      	mov	r3, r4
   83aec:	460a      	mov	r2, r1
		timeout = TWI_TIMEOUT;
   83aee:	461c      	mov	r4, r3
   83af0:	e7e3      	b.n	83aba <twi_master_read+0x8e>
		if (!(status & TWI_SR_RXRDY)) {
   83af2:	460a      	mov	r2, r1
   83af4:	2501      	movs	r5, #1
   83af6:	e7cc      	b.n	83a92 <twi_master_read+0x66>
		return TWI_INVALID_ARGUMENT;
   83af8:	2001      	movs	r0, #1
}
   83afa:	4770      	bx	lr
			return TWI_ERROR_TIMEOUT;
   83afc:	2009      	movs	r0, #9
}
   83afe:	bc70      	pop	{r4, r5, r6}
   83b00:	4770      	bx	lr
   83b02:	bf00      	nop

00083b04 <twi_master_write>:
	uint32_t cnt = p_packet->length;
   83b04:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
   83b06:	2a00      	cmp	r2, #0
   83b08:	d03c      	beq.n	83b84 <twi_master_write+0x80>
{
   83b0a:	b430      	push	{r4, r5}
   83b0c:	4603      	mov	r3, r0
	p_twi->TWI_MMR = 0;
   83b0e:	2500      	movs	r5, #0
	uint8_t *buffer = p_packet->buffer;
   83b10:	6888      	ldr	r0, [r1, #8]
	p_twi->TWI_MMR = 0;
   83b12:	605d      	str	r5, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   83b14:	7c0c      	ldrb	r4, [r1, #16]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   83b16:	f8d1 c004 	ldr.w	ip, [r1, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   83b1a:	0424      	lsls	r4, r4, #16
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   83b1c:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   83b20:	f404 04fe 	and.w	r4, r4, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   83b24:	f40c 7c40 	and.w	ip, ip, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   83b28:	ea44 040c 	orr.w	r4, r4, ip
   83b2c:	605c      	str	r4, [r3, #4]
	p_twi->TWI_IADR = 0;
   83b2e:	60dd      	str	r5, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   83b30:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
   83b32:	b32d      	cbz	r5, 83b80 <twi_master_write+0x7c>
	if (len > 1) {
   83b34:	2d01      	cmp	r5, #1
	val = addr[0];
   83b36:	780c      	ldrb	r4, [r1, #0]
	if (len > 1) {
   83b38:	dd02      	ble.n	83b40 <twi_master_write+0x3c>
		val |= addr[1];
   83b3a:	880c      	ldrh	r4, [r1, #0]
   83b3c:	ba64      	rev16	r4, r4
   83b3e:	b2a4      	uxth	r4, r4
	if (len > 2) {
   83b40:	2d02      	cmp	r5, #2
   83b42:	dd02      	ble.n	83b4a <twi_master_write+0x46>
		val |= addr[2];
   83b44:	7889      	ldrb	r1, [r1, #2]
   83b46:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   83b4a:	60dc      	str	r4, [r3, #12]
	while (cnt > 0) {
   83b4c:	1881      	adds	r1, r0, r2
   83b4e:	e007      	b.n	83b60 <twi_master_write+0x5c>
		status = p_twi->TWI_SR;
   83b50:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   83b52:	05d4      	lsls	r4, r2, #23
   83b54:	d411      	bmi.n	83b7a <twi_master_write+0x76>
		if (!(status & TWI_SR_TXRDY)) {
   83b56:	0755      	lsls	r5, r2, #29
		p_twi->TWI_THR = *buffer++;
   83b58:	bf44      	itt	mi
   83b5a:	f810 2b01 	ldrbmi.w	r2, [r0], #1
   83b5e:	635a      	strmi	r2, [r3, #52]	; 0x34
	while (cnt > 0) {
   83b60:	4288      	cmp	r0, r1
   83b62:	d1f5      	bne.n	83b50 <twi_master_write+0x4c>
   83b64:	f241 3189 	movw	r1, #5001	; 0x1389
   83b68:	e003      	b.n	83b72 <twi_master_write+0x6e>
		if (status & TWI_SR_TXRDY) {
   83b6a:	0754      	lsls	r4, r2, #29
   83b6c:	d40c      	bmi.n	83b88 <twi_master_write+0x84>
		if (timeout++ > TWI_TIMEOUT)
   83b6e:	3901      	subs	r1, #1
   83b70:	d011      	beq.n	83b96 <twi_master_write+0x92>
		status = p_twi->TWI_SR;
   83b72:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   83b74:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   83b78:	d0f7      	beq.n	83b6a <twi_master_write+0x66>
			return TWI_RECEIVE_NACK;
   83b7a:	2005      	movs	r0, #5
}
   83b7c:	bc30      	pop	{r4, r5}
   83b7e:	4770      	bx	lr
		return 0;
   83b80:	462c      	mov	r4, r5
   83b82:	e7e2      	b.n	83b4a <twi_master_write+0x46>
		return TWI_INVALID_ARGUMENT;
   83b84:	2001      	movs	r0, #1
}
   83b86:	4770      	bx	lr
	p_twi->TWI_CR = TWI_CR_STOP;
   83b88:	2202      	movs	r2, #2
   83b8a:	601a      	str	r2, [r3, #0]
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   83b8c:	6a1a      	ldr	r2, [r3, #32]
   83b8e:	07d2      	lsls	r2, r2, #31
   83b90:	d5fc      	bpl.n	83b8c <twi_master_write+0x88>
}
   83b92:	bc30      	pop	{r4, r5}
   83b94:	4770      	bx	lr
			return TWI_ERROR_TIMEOUT;
   83b96:	2009      	movs	r0, #9
   83b98:	e7f0      	b.n	83b7c <twi_master_write+0x78>
   83b9a:	bf00      	nop

00083b9c <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   83b9c:	4b02      	ldr	r3, [pc, #8]	; (83ba8 <pmc_is_wakeup_clocks_restored+0xc>)
   83b9e:	7818      	ldrb	r0, [r3, #0]
}
   83ba0:	f080 0001 	eor.w	r0, r0, #1
   83ba4:	4770      	bx	lr
   83ba6:	bf00      	nop
   83ba8:	200721b5 	.word	0x200721b5

00083bac <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   83bac:	4a0c      	ldr	r2, [pc, #48]	; (83be0 <_sbrk+0x34>)
{
   83bae:	4603      	mov	r3, r0
	if (heap == NULL) {
   83bb0:	6810      	ldr	r0, [r2, #0]
	int ramend = (int)&__ram_end__;
   83bb2:	490c      	ldr	r1, [pc, #48]	; (83be4 <_sbrk+0x38>)
	if (heap == NULL) {
   83bb4:	b130      	cbz	r0, 83bc4 <_sbrk+0x18>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
   83bb6:	4403      	add	r3, r0
   83bb8:	428b      	cmp	r3, r1
		return (caddr_t) -1;	
   83bba:	bfcc      	ite	gt
   83bbc:	f04f 30ff 	movgt.w	r0, #4294967295
	}

	heap += incr;
   83bc0:	6013      	strle	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   83bc2:	4770      	bx	lr
{
   83bc4:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
   83bc6:	4c08      	ldr	r4, [pc, #32]	; (83be8 <_sbrk+0x3c>)
	if (((int)prev_heap + incr) > ramend) {
   83bc8:	4423      	add	r3, r4
   83bca:	428b      	cmp	r3, r1
		heap = (unsigned char *)&_end;
   83bcc:	6014      	str	r4, [r2, #0]
	heap += incr;
   83bce:	bfd8      	it	le
   83bd0:	6013      	strle	r3, [r2, #0]
		heap = (unsigned char *)&_end;
   83bd2:	4620      	mov	r0, r4
		return (caddr_t) -1;	
   83bd4:	bfc8      	it	gt
   83bd6:	f04f 30ff 	movgt.w	r0, #4294967295
}
   83bda:	bc10      	pop	{r4}
   83bdc:	4770      	bx	lr
   83bde:	bf00      	nop
   83be0:	200721b8 	.word	0x200721b8
   83be4:	20087ffc 	.word	0x20087ffc
   83be8:	20074858 	.word	0x20074858

00083bec <_close>:
}

extern int _close(int file)
{
	return -1;
}
   83bec:	f04f 30ff 	mov.w	r0, #4294967295
   83bf0:	4770      	bx	lr
   83bf2:	bf00      	nop

00083bf4 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   83bf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
   83bf8:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   83bfa:	604b      	str	r3, [r1, #4]
}
   83bfc:	4770      	bx	lr
   83bfe:	bf00      	nop

00083c00 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   83c00:	2001      	movs	r0, #1
   83c02:	4770      	bx	lr

00083c04 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   83c04:	2000      	movs	r0, #0
   83c06:	4770      	bx	lr

00083c08 <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
   83c08:	be00      	bkpt	0x0000
	for (;;);
   83c0a:	e7fe      	b.n	83c0a <_exit+0x2>

00083c0c <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
   83c0c:	4770      	bx	lr
   83c0e:	bf00      	nop

00083c10 <_getpid>:

extern int _getpid(void)
{
	return -1;
}
   83c10:	f04f 30ff 	mov.w	r0, #4294967295
   83c14:	4770      	bx	lr
   83c16:	bf00      	nop

00083c18 <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
   83c18:	f890 c014 	ldrb.w	ip, [r0, #20]
{
   83c1c:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
   83c1e:	f01c 0f01 	tst.w	ip, #1
   83c22:	d014      	beq.n	83c4e <udd_ep_finish_job+0x36>
{
   83c24:	b410      	push	{r4}
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
	if (NULL == ptr_job->call_trans) {
   83c26:	6804      	ldr	r4, [r0, #0]
	ptr_job->busy = false;
   83c28:	f36f 0c00 	bfc	ip, #0, #1
   83c2c:	f880 c014 	strb.w	ip, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   83c30:	b15c      	cbz	r4, 83c4a <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
		ep_num |= USB_EP_DIR_IN;
   83c32:	4608      	mov	r0, r1
	if (Is_udd_endpoint_in(ep_num)) {
   83c34:	4906      	ldr	r1, [pc, #24]	; (83c50 <udd_ep_finish_job+0x38>)
   83c36:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   83c3a:	05c9      	lsls	r1, r1, #23
		ep_num |= USB_EP_DIR_IN;
   83c3c:	bf48      	it	mi
   83c3e:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   83c42:	6899      	ldr	r1, [r3, #8]
   83c44:	4623      	mov	r3, r4
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   83c46:	bc10      	pop	{r4}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   83c48:	4718      	bx	r3
}
   83c4a:	bc10      	pop	{r4}
   83c4c:	4770      	bx	lr
   83c4e:	4770      	bx	lr
   83c50:	400ac100 	.word	0x400ac100

00083c54 <udd_ep_trans_done>:

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   83c54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if (!ptr_job->busy) {
   83c58:	4d5e      	ldr	r5, [pc, #376]	; (83dd4 <udd_ep_trans_done+0x180>)
	ptr_job = &udd_ep_job[ep - 1];
   83c5a:	f100 3eff 	add.w	lr, r0, #4294967295
	if (!ptr_job->busy) {
   83c5e:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   83c62:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   83c66:	7d19      	ldrb	r1, [r3, #20]
   83c68:	07ca      	lsls	r2, r1, #31
   83c6a:	d57c      	bpl.n	83d66 <udd_ep_trans_done+0x112>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   83c6c:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
   83c70:	42a1      	cmp	r1, r4
   83c72:	4602      	mov	r2, r0
   83c74:	ea4f 004e 	mov.w	r0, lr, lsl #1
   83c78:	d04c      	beq.n	83d14 <udd_ep_trans_done+0xc0>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   83c7a:	1a64      	subs	r4, r4, r1

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   83c7c:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   83c80:	d818      	bhi.n	83cb4 <udd_ep_trans_done+0x60>
			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
		}
		if (Is_udd_endpoint_in(ep)) {
   83c82:	4f55      	ldr	r7, [pc, #340]	; (83dd8 <udd_ep_trans_done+0x184>)
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   83c84:	0426      	lsls	r6, r4, #16
		if (Is_udd_endpoint_in(ep)) {
   83c86:	f857 c022 	ldr.w	ip, [r7, r2, lsl #2]
   83c8a:	f41c 7f80 	tst.w	ip, #256	; 0x100
   83c8e:	d06c      	beq.n	83d6a <udd_ep_trans_done+0x116>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   83c90:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   83c94:	f3c7 1c02 	ubfx	ip, r7, #4, #3
   83c98:	2708      	movs	r7, #8
   83c9a:	fa07 f70c 	lsl.w	r7, r7, ip
   83c9e:	3f01      	subs	r7, #1
   83ca0:	4227      	tst	r7, r4
   83ca2:	f000 8093 	beq.w	83dcc <udd_ep_trans_done+0x178>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   83ca6:	7d1f      	ldrb	r7, [r3, #20]
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   83ca8:	f046 0629 	orr.w	r6, r6, #41	; 0x29
				ptr_job->b_shortpacket = false;
   83cac:	f36f 0741 	bfc	r7, #1, #1
   83cb0:	751f      	strb	r7, [r3, #20]
   83cb2:	e009      	b.n	83cc8 <udd_ep_trans_done+0x74>
		if (Is_udd_endpoint_in(ep)) {
   83cb4:	4b48      	ldr	r3, [pc, #288]	; (83dd8 <udd_ep_trans_done+0x184>)
   83cb6:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
   83cba:	05e4      	lsls	r4, r4, #23
   83cbc:	d55e      	bpl.n	83d7c <udd_ep_trans_done+0x128>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   83cbe:	2621      	movs	r6, #33	; 0x21
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   83cc0:	f44f 3480 	mov.w	r4, #65536	; 0x10000
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   83cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   83cc8:	eb00 0c0e 	add.w	ip, r0, lr
   83ccc:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
   83cd0:	f8dc 3004 	ldr.w	r3, [ip, #4]
   83cd4:	4419      	add	r1, r3
   83cd6:	4b41      	ldr	r3, [pc, #260]	; (83ddc <udd_ep_trans_done+0x188>)
   83cd8:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   83cdc:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83cde:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83ce2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83ce4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83ce8:	f04f 0800 	mov.w	r8, #0
   83cec:	493c      	ldr	r1, [pc, #240]	; (83de0 <udd_ep_trans_done+0x18c>)
   83cee:	f881 8000 	strb.w	r8, [r1]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   83cf2:	f8d3 800c 	ldr.w	r8, [r3, #12]
   83cf6:	f018 0f10 	tst.w	r8, #16
   83cfa:	d049      	beq.n	83d90 <udd_ep_trans_done+0x13c>
	if (cpu_irq_is_enabled_flags(flags))
   83cfc:	b927      	cbnz	r7, 83d08 <udd_ep_trans_done+0xb4>
		cpu_irq_enable();
   83cfe:	2301      	movs	r3, #1
   83d00:	700b      	strb	r3, [r1, #0]
   83d02:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83d06:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   83d08:	eb00 030e 	add.w	r3, r0, lr
   83d0c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   83d10:	68d9      	ldr	r1, [r3, #12]
   83d12:	6099      	str	r1, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   83d14:	4b30      	ldr	r3, [pc, #192]	; (83dd8 <udd_ep_trans_done+0x184>)
   83d16:	0091      	lsls	r1, r2, #2
   83d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   83d1c:	05df      	lsls	r7, r3, #23
   83d1e:	d506      	bpl.n	83d2e <udd_ep_trans_done+0xda>
		if (ptr_job->b_shortpacket) {
   83d20:	eb00 030e 	add.w	r3, r0, lr
   83d24:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   83d28:	7d1b      	ldrb	r3, [r3, #20]
   83d2a:	079e      	lsls	r6, r3, #30
   83d2c:	d407      	bmi.n	83d3e <udd_ep_trans_done+0xea>
	ptr_job = &udd_ep_job[ep - 1];
   83d2e:	4470      	add	r0, lr
			return;
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   83d30:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   83d34:	2100      	movs	r1, #0
}
   83d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	udd_ep_finish_job(ptr_job, false, ep);
   83d3a:	4b2a      	ldr	r3, [pc, #168]	; (83de4 <udd_ep_trans_done+0x190>)
   83d3c:	4718      	bx	r3
			udd_ack_in_send(ep);
   83d3e:	2301      	movs	r3, #1
   83d40:	4c29      	ldr	r4, [pc, #164]	; (83de8 <udd_ep_trans_done+0x194>)
			if (Is_udd_write_enabled(ep)) {
   83d42:	482a      	ldr	r0, [pc, #168]	; (83dec <udd_ep_trans_done+0x198>)
			udd_ack_in_send(ep);
   83d44:	510b      	str	r3, [r1, r4]
			if (Is_udd_write_enabled(ep)) {
   83d46:	5808      	ldr	r0, [r1, r0]
			udd_enable_in_send_interrupt(ep);
   83d48:	4c29      	ldr	r4, [pc, #164]	; (83df0 <udd_ep_trans_done+0x19c>)
			if (Is_udd_write_enabled(ep)) {
   83d4a:	03c5      	lsls	r5, r0, #15
				udd_raise_in_send(ep);
   83d4c:	bf48      	it	mi
   83d4e:	4829      	ldrmi	r0, [pc, #164]	; (83df4 <udd_ep_trans_done+0x1a0>)
			udd_enable_in_send_interrupt(ep);
   83d50:	f04f 0501 	mov.w	r5, #1
				udd_raise_in_send(ep);
   83d54:	bf48      	it	mi
   83d56:	500b      	strmi	r3, [r1, r0]
			udd_enable_endpoint_interrupt(ep);
   83d58:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   83d5c:	4826      	ldr	r0, [pc, #152]	; (83df8 <udd_ep_trans_done+0x1a4>)
   83d5e:	fa03 f202 	lsl.w	r2, r3, r2
			udd_enable_in_send_interrupt(ep);
   83d62:	510d      	str	r5, [r1, r4]
			udd_enable_endpoint_interrupt(ep);
   83d64:	6182      	str	r2, [r0, #24]
}
   83d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   83d6a:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   83d6e:	f3c3 23c1 	ubfx	r3, r3, #11, #2
   83d72:	2b01      	cmp	r3, #1
   83d74:	d022      	beq.n	83dbc <udd_ep_trans_done+0x168>
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   83d76:	f046 0635 	orr.w	r6, r6, #53	; 0x35
   83d7a:	e7a5      	b.n	83cc8 <udd_ep_trans_done+0x74>
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   83d7c:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
   83d80:	f3c4 24c1 	ubfx	r4, r4, #11, #2
   83d84:	2c01      	cmp	r4, #1
   83d86:	d09a      	beq.n	83cbe <udd_ep_trans_done+0x6a>
   83d88:	2635      	movs	r6, #53	; 0x35
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   83d8a:	f44f 3480 	mov.w	r4, #65536	; 0x10000
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   83d8e:	e79b      	b.n	83cc8 <udd_ep_trans_done+0x74>
			udd_enable_endpoint_dma_interrupt(ep);
   83d90:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   83d94:	609e      	str	r6, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   83d96:	f8dc 300c 	ldr.w	r3, [ip, #12]
			ptr_job->buf_load = next_trans;
   83d9a:	f8cc 4010 	str.w	r4, [ip, #16]
			ptr_job->buf_cnt += next_trans;
   83d9e:	441c      	add	r4, r3
			udd_enable_endpoint_dma_interrupt(ep);
   83da0:	4b15      	ldr	r3, [pc, #84]	; (83df8 <udd_ep_trans_done+0x1a4>)
   83da2:	fa00 f00e 	lsl.w	r0, r0, lr
			ptr_job->buf_cnt += next_trans;
   83da6:	f8cc 400c 	str.w	r4, [ip, #12]
			udd_enable_endpoint_dma_interrupt(ep);
   83daa:	6198      	str	r0, [r3, #24]
	if (cpu_irq_is_enabled_flags(flags))
   83dac:	2f00      	cmp	r7, #0
   83dae:	d1da      	bne.n	83d66 <udd_ep_trans_done+0x112>
		cpu_irq_enable();
   83db0:	2301      	movs	r3, #1
   83db2:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   83db4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83db8:	b662      	cpsie	i
}
   83dba:	e7d4      	b.n	83d66 <udd_ep_trans_done+0x112>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   83dbc:	2308      	movs	r3, #8
   83dbe:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   83dc2:	f3c7 1702 	ubfx	r7, r7, #4, #3
   83dc6:	40bb      	lsls	r3, r7
   83dc8:	42a3      	cmp	r3, r4
   83dca:	d2d4      	bcs.n	83d76 <udd_ep_trans_done+0x122>
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   83dcc:	f046 0621 	orr.w	r6, r6, #33	; 0x21
   83dd0:	e77a      	b.n	83cc8 <udd_ep_trans_done+0x74>
   83dd2:	bf00      	nop
   83dd4:	200721c8 	.word	0x200721c8
   83dd8:	400ac100 	.word	0x400ac100
   83ddc:	400ac300 	.word	0x400ac300
   83de0:	20070b04 	.word	0x20070b04
   83de4:	00083c19 	.word	0x00083c19
   83de8:	400ac160 	.word	0x400ac160
   83dec:	400ac130 	.word	0x400ac130
   83df0:	400ac1f0 	.word	0x400ac1f0
   83df4:	400ac190 	.word	0x400ac190
   83df8:	400ac000 	.word	0x400ac000

00083dfc <udd_ctrl_in_sent>:
{
   83dfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83e00:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83e04:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83e06:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83e0a:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   83e0c:	2301      	movs	r3, #1
   83e0e:	4d56      	ldr	r5, [pc, #344]	; (83f68 <udd_ctrl_in_sent+0x16c>)
   83e10:	4956      	ldr	r1, [pc, #344]	; (83f6c <udd_ctrl_in_sent+0x170>)
   83e12:	7028      	strb	r0, [r5, #0]
   83e14:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   83e18:	b91a      	cbnz	r2, 83e22 <udd_ctrl_in_sent+0x26>
		cpu_irq_enable();
   83e1a:	702b      	strb	r3, [r5, #0]
   83e1c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83e20:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   83e22:	f8df 814c 	ldr.w	r8, [pc, #332]	; 83f70 <udd_ctrl_in_sent+0x174>
   83e26:	f898 3000 	ldrb.w	r3, [r8]
   83e2a:	2b03      	cmp	r3, #3
   83e2c:	d05c      	beq.n	83ee8 <udd_ctrl_in_sent+0xec>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   83e2e:	4f51      	ldr	r7, [pc, #324]	; (83f74 <udd_ctrl_in_sent+0x178>)
   83e30:	4e51      	ldr	r6, [pc, #324]	; (83f78 <udd_ctrl_in_sent+0x17c>)
   83e32:	883a      	ldrh	r2, [r7, #0]
   83e34:	89b4      	ldrh	r4, [r6, #12]
   83e36:	1aa4      	subs	r4, r4, r2
   83e38:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   83e3a:	2c00      	cmp	r4, #0
   83e3c:	d032      	beq.n	83ea4 <udd_ctrl_in_sent+0xa8>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83e3e:	4613      	mov	r3, r2
   83e40:	f8df 9138 	ldr.w	r9, [pc, #312]	; 83f7c <udd_ctrl_in_sent+0x180>
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   83e44:	2c3f      	cmp	r4, #63	; 0x3f
		b_shortpacket = false;
   83e46:	bf86      	itte	hi
   83e48:	2200      	movhi	r2, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   83e4a:	2440      	movhi	r4, #64	; 0x40
		b_shortpacket = true;
   83e4c:	2201      	movls	r2, #1
   83e4e:	f889 2000 	strb.w	r2, [r9]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83e52:	68b2      	ldr	r2, [r6, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83e54:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83e58:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83e5a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83e5e:	2100      	movs	r1, #0
   83e60:	7029      	strb	r1, [r5, #0]
	if (Is_udd_out_received(0)) {
   83e62:	4942      	ldr	r1, [pc, #264]	; (83f6c <udd_ctrl_in_sent+0x170>)
   83e64:	f8d1 1130 	ldr.w	r1, [r1, #304]	; 0x130
   83e68:	0789      	lsls	r1, r1, #30
   83e6a:	d432      	bmi.n	83ed2 <udd_ctrl_in_sent+0xd6>
	for (i = 0; i < nb_remain; i++) {
   83e6c:	b154      	cbz	r4, 83e84 <udd_ctrl_in_sent+0x88>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83e6e:	441a      	add	r2, r3
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   83e70:	4b43      	ldr	r3, [pc, #268]	; (83f80 <udd_ctrl_in_sent+0x184>)
		*ptr_dest++ = *ptr_src++;
   83e72:	4618      	mov	r0, r3
   83e74:	3301      	adds	r3, #1
   83e76:	f812 cb01 	ldrb.w	ip, [r2], #1
	for (i = 0; i < nb_remain; i++) {
   83e7a:	b2d9      	uxtb	r1, r3
   83e7c:	42a1      	cmp	r1, r4
		*ptr_dest++ = *ptr_src++;
   83e7e:	f880 c000 	strb.w	ip, [r0]
	for (i = 0; i < nb_remain; i++) {
   83e82:	d3f6      	bcc.n	83e72 <udd_ctrl_in_sent+0x76>
	udd_ctrl_payload_buf_cnt += nb_remain;
   83e84:	883b      	ldrh	r3, [r7, #0]
	udd_ack_in_send(0);
   83e86:	4a39      	ldr	r2, [pc, #228]	; (83f6c <udd_ctrl_in_sent+0x170>)
	udd_ctrl_payload_buf_cnt += nb_remain;
   83e88:	441c      	add	r4, r3
	udd_ack_in_send(0);
   83e8a:	2301      	movs	r3, #1
	udd_ctrl_payload_buf_cnt += nb_remain;
   83e8c:	803c      	strh	r4, [r7, #0]
	udd_ack_in_send(0);
   83e8e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	udd_enable_in_send_interrupt(0);
   83e92:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   83e96:	b91e      	cbnz	r6, 83ea0 <udd_ctrl_in_sent+0xa4>
		cpu_irq_enable();
   83e98:	702b      	strb	r3, [r5, #0]
   83e9a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83e9e:	b662      	cpsie	i
}
   83ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83ea4:	4937      	ldr	r1, [pc, #220]	; (83f84 <udd_ctrl_in_sent+0x188>)
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   83ea6:	88f0      	ldrh	r0, [r6, #6]
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83ea8:	880b      	ldrh	r3, [r1, #0]
   83eaa:	4413      	add	r3, r2
   83eac:	b29b      	uxth	r3, r3
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   83eae:	4298      	cmp	r0, r3
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83eb0:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   83eb2:	d03c      	beq.n	83f2e <udd_ctrl_in_sent+0x132>
					|| b_shortpacket) {
   83eb4:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 83f7c <udd_ctrl_in_sent+0x180>
   83eb8:	f899 a000 	ldrb.w	sl, [r9]
   83ebc:	f1ba 0f00 	cmp.w	sl, #0
   83ec0:	d135      	bne.n	83f2e <udd_ctrl_in_sent+0x132>
		if ((!udd_g_ctrlreq.over_under_run)
   83ec2:	6973      	ldr	r3, [r6, #20]
   83ec4:	b383      	cbz	r3, 83f28 <udd_ctrl_in_sent+0x12c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   83ec6:	4798      	blx	r3
   83ec8:	2800      	cmp	r0, #0
   83eca:	d148      	bne.n	83f5e <udd_ctrl_in_sent+0x162>
		b_shortpacket = true;
   83ecc:	2201      	movs	r2, #1
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83ece:	883b      	ldrh	r3, [r7, #0]
   83ed0:	e7bd      	b.n	83e4e <udd_ctrl_in_sent+0x52>
	if (cpu_irq_is_enabled_flags(flags))
   83ed2:	b926      	cbnz	r6, 83ede <udd_ctrl_in_sent+0xe2>
		cpu_irq_enable();
   83ed4:	2301      	movs	r3, #1
   83ed6:	702b      	strb	r3, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   83ed8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83edc:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83ede:	2304      	movs	r3, #4
   83ee0:	f888 3000 	strb.w	r3, [r8]
}
   83ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (udd_g_ctrlreq.callback) {
   83ee8:	4e23      	ldr	r6, [pc, #140]	; (83f78 <udd_ctrl_in_sent+0x17c>)
   83eea:	6933      	ldr	r3, [r6, #16]
   83eec:	b103      	cbz	r3, 83ef0 <udd_ctrl_in_sent+0xf4>
		udd_g_ctrlreq.callback();
   83eee:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83ef0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83ef4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83ef6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83efa:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   83efc:	2301      	movs	r3, #1
   83efe:	491b      	ldr	r1, [pc, #108]	; (83f6c <udd_ctrl_in_sent+0x170>)
   83f00:	7028      	strb	r0, [r5, #0]
   83f02:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   83f06:	b91a      	cbnz	r2, 83f10 <udd_ctrl_in_sent+0x114>
		cpu_irq_enable();
   83f08:	702b      	strb	r3, [r5, #0]
   83f0a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83f0e:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   83f10:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   83f12:	2102      	movs	r1, #2
   83f14:	4a15      	ldr	r2, [pc, #84]	; (83f6c <udd_ctrl_in_sent+0x170>)
   83f16:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
	udd_g_ctrlreq.over_under_run = NULL;
   83f1a:	e9c6 3304 	strd	r3, r3, [r6, #16]
	udd_g_ctrlreq.payload_size = 0;
   83f1e:	81b3      	strh	r3, [r6, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   83f20:	f888 3000 	strb.w	r3, [r8]
}
   83f24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83f28:	4613      	mov	r3, r2
		b_shortpacket = true;
   83f2a:	2201      	movs	r2, #1
   83f2c:	e78f      	b.n	83e4e <udd_ctrl_in_sent+0x52>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83f2e:	2304      	movs	r3, #4
   83f30:	f888 3000 	strb.w	r3, [r8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83f34:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83f38:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83f3a:	f3bf 8f5f 	dmb	sy
	udd_ack_nak_in(0);
   83f3e:	2210      	movs	r2, #16
	cpu_irq_disable();
   83f40:	2000      	movs	r0, #0
   83f42:	4b0a      	ldr	r3, [pc, #40]	; (83f6c <udd_ctrl_in_sent+0x170>)
   83f44:	7028      	strb	r0, [r5, #0]
   83f46:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	udd_enable_nak_in_interrupt(0);
   83f4a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   83f4e:	2900      	cmp	r1, #0
   83f50:	d1a6      	bne.n	83ea0 <udd_ctrl_in_sent+0xa4>
		cpu_irq_enable();
   83f52:	2301      	movs	r3, #1
   83f54:	702b      	strb	r3, [r5, #0]
   83f56:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83f5a:	b662      	cpsie	i
}
   83f5c:	e7a0      	b.n	83ea0 <udd_ctrl_in_sent+0xa4>
			udd_ctrl_payload_buf_cnt = 0;
   83f5e:	803c      	strh	r4, [r7, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   83f60:	4653      	mov	r3, sl
   83f62:	89b4      	ldrh	r4, [r6, #12]
   83f64:	e76e      	b.n	83e44 <udd_ctrl_in_sent+0x48>
   83f66:	bf00      	nop
   83f68:	20070b04 	.word	0x20070b04
   83f6c:	400ac000 	.word	0x400ac000
   83f70:	200721c4 	.word	0x200721c4
   83f74:	200721c0 	.word	0x200721c0
   83f78:	20072288 	.word	0x20072288
   83f7c:	200721bc 	.word	0x200721bc
   83f80:	20180000 	.word	0x20180000
   83f84:	200721c2 	.word	0x200721c2

00083f88 <udd_enable>:
{
   83f88:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83f8a:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83f8e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83f90:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83f94:	2200      	movs	r2, #0
   83f96:	4c50      	ldr	r4, [pc, #320]	; (840d8 <udd_enable+0x150>)
	pmc_enable_periph_clk(ID_UOTGHS);
   83f98:	4b50      	ldr	r3, [pc, #320]	; (840dc <udd_enable+0x154>)
   83f9a:	2028      	movs	r0, #40	; 0x28
   83f9c:	7022      	strb	r2, [r4, #0]
   83f9e:	4798      	blx	r3
	sysclk_enable_usb();
   83fa0:	4b4f      	ldr	r3, [pc, #316]	; (840e0 <udd_enable+0x158>)
   83fa2:	4798      	blx	r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   83fa4:	f04f 0c50 	mov.w	ip, #80	; 0x50
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   83fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   83fac:	4b4d      	ldr	r3, [pc, #308]	; (840e4 <udd_enable+0x15c>)
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   83fae:	4a4e      	ldr	r2, [pc, #312]	; (840e8 <udd_enable+0x160>)
   83fb0:	f883 c328 	strb.w	ip, [r3, #808]	; 0x328
   83fb4:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   83fb8:	6059      	str	r1, [r3, #4]
   83fba:	4790      	blx	r2
	otg_disable_id_pin();
   83fbc:	4b4b      	ldr	r3, [pc, #300]	; (840ec <udd_enable+0x164>)
   83fbe:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   83fc2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   83fc6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_force_device_mode();
   83fca:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   83fce:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   83fd2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   83fd6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   83fda:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   83fde:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable_pad();
   83fe2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   83fe6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   83fea:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable();
   83fee:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   83ff2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   83ff6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_low_speed_disable();
   83ffa:	681a      	ldr	r2, [r3, #0]
   83ffc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   84000:	601a      	str	r2, [r3, #0]
	udd_high_speed_enable();
   84002:	681a      	ldr	r2, [r3, #0]
   84004:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
   84008:	601a      	str	r2, [r3, #0]
	otg_unfreeze_clock();
   8400a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8400e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   84012:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   84016:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   8401a:	0450      	lsls	r0, r2, #17
   8401c:	d5fb      	bpl.n	84016 <udd_enable+0x8e>
   8401e:	2300      	movs	r3, #0
   84020:	4833      	ldr	r0, [pc, #204]	; (840f0 <udd_enable+0x168>)
		udd_ep_job[i].stall_requested = false;
   84022:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   84026:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
		udd_ep_job[i].busy = false;
   8402a:	7d11      	ldrb	r1, [r2, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   8402c:	3301      	adds	r3, #1
		udd_ep_job[i].busy = false;
   8402e:	f021 0105 	bic.w	r1, r1, #5
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84032:	2b08      	cmp	r3, #8
		udd_ep_job[i].busy = false;
   84034:	7511      	strb	r1, [r2, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84036:	d1f4      	bne.n	84022 <udd_enable+0x9a>
	otg_ack_vbus_transition();
   84038:	2202      	movs	r2, #2
   8403a:	4b2c      	ldr	r3, [pc, #176]	; (840ec <udd_enable+0x164>)
   8403c:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
	if (Is_otg_vbus_high()) {
   84040:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   84044:	0509      	lsls	r1, r1, #20
		otg_raise_vbus_transition();
   84046:	bf48      	it	mi
   84048:	f8c3 280c 	strmi.w	r2, [r3, #2060]	; 0x80c
	otg_enable_vbus_interrupt();
   8404c:	4b27      	ldr	r3, [pc, #156]	; (840ec <udd_enable+0x164>)
	if (!udd_b_sleep_initialized) {
   8404e:	4929      	ldr	r1, [pc, #164]	; (840f4 <udd_enable+0x16c>)
	otg_enable_vbus_interrupt();
   84050:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84054:	f042 0202 	orr.w	r2, r2, #2
   84058:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_freeze_clock();
   8405c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84060:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   84064:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (!udd_b_sleep_initialized) {
   84068:	780b      	ldrb	r3, [r1, #0]
   8406a:	b9ab      	cbnz	r3, 84098 <udd_enable+0x110>
		udd_b_sleep_initialized = true;
   8406c:	2001      	movs	r0, #1
		udd_b_idle = false;
   8406e:	4a22      	ldr	r2, [pc, #136]	; (840f8 <udd_enable+0x170>)
		udd_b_sleep_initialized = true;
   84070:	7008      	strb	r0, [r1, #0]
		udd_b_idle = false;
   84072:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84074:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84078:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8407a:	f3bf 8f5f 	dmb	sy
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   8407e:	4a1f      	ldr	r2, [pc, #124]	; (840fc <udd_enable+0x174>)
   84080:	7023      	strb	r3, [r4, #0]
   84082:	78d3      	ldrb	r3, [r2, #3]
   84084:	4403      	add	r3, r0
   84086:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   84088:	b161      	cbz	r1, 840a4 <udd_enable+0x11c>
   8408a:	b925      	cbnz	r5, 84096 <udd_enable+0x10e>
		cpu_irq_enable();
   8408c:	2301      	movs	r3, #1
   8408e:	7023      	strb	r3, [r4, #0]
   84090:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84094:	b662      	cpsie	i
}
   84096:	bd38      	pop	{r3, r4, r5, pc}
	if (!b_idle && udd_b_idle) {
   84098:	4b17      	ldr	r3, [pc, #92]	; (840f8 <udd_enable+0x170>)
   8409a:	781a      	ldrb	r2, [r3, #0]
   8409c:	b93a      	cbnz	r2, 840ae <udd_enable+0x126>
	udd_b_idle = b_idle;
   8409e:	2200      	movs	r2, #0
   840a0:	701a      	strb	r2, [r3, #0]
}
   840a2:	e7f2      	b.n	8408a <udd_enable+0x102>
   840a4:	7020      	strb	r0, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   840a6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   840aa:	b662      	cpsie	i
}
   840ac:	e7ed      	b.n	8408a <udd_enable+0x102>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   840ae:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   840b2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   840b4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   840b8:	f04f 0c00 	mov.w	ip, #0
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   840bc:	490f      	ldr	r1, [pc, #60]	; (840fc <udd_enable+0x174>)
   840be:	788a      	ldrb	r2, [r1, #2]
   840c0:	3a01      	subs	r2, #1
   840c2:	708a      	strb	r2, [r1, #2]
   840c4:	f884 c000 	strb.w	ip, [r4]
	if (cpu_irq_is_enabled_flags(flags))
   840c8:	2800      	cmp	r0, #0
   840ca:	d1e8      	bne.n	8409e <udd_enable+0x116>
		cpu_irq_enable();
   840cc:	2201      	movs	r2, #1
   840ce:	7022      	strb	r2, [r4, #0]
   840d0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   840d4:	b662      	cpsie	i
}
   840d6:	e7e2      	b.n	8409e <udd_enable+0x116>
   840d8:	20070b04 	.word	0x20070b04
   840dc:	000834d5 	.word	0x000834d5
   840e0:	0008331d 	.word	0x0008331d
   840e4:	e000e100 	.word	0xe000e100
   840e8:	00083505 	.word	0x00083505
   840ec:	400ac000 	.word	0x400ac000
   840f0:	200721c8 	.word	0x200721c8
   840f4:	200721be 	.word	0x200721be
   840f8:	200721bd 	.word	0x200721bd
   840fc:	20073304 	.word	0x20073304

00084100 <udd_attach>:
{
   84100:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84102:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84106:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84108:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8410c:	2100      	movs	r1, #0
	if (b_idle && !udd_b_idle) {
   8410e:	4a22      	ldr	r2, [pc, #136]	; (84198 <udd_attach+0x98>)
   84110:	4d22      	ldr	r5, [pc, #136]	; (8419c <udd_attach+0x9c>)
   84112:	7813      	ldrb	r3, [r2, #0]
   84114:	7029      	strb	r1, [r5, #0]
   84116:	b363      	cbz	r3, 84172 <udd_attach+0x72>
	udd_b_idle = b_idle;
   84118:	2101      	movs	r1, #1
	otg_unfreeze_clock();
   8411a:	4b21      	ldr	r3, [pc, #132]	; (841a0 <udd_attach+0xa0>)
	udd_b_idle = b_idle;
   8411c:	7011      	strb	r1, [r2, #0]
	otg_unfreeze_clock();
   8411e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84122:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   84126:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   8412a:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   8412e:	0452      	lsls	r2, r2, #17
   84130:	d5fb      	bpl.n	8412a <udd_attach+0x2a>
	udd_attach_device();
   84132:	681a      	ldr	r2, [r3, #0]
	udd_enable_reset_interrupt();
   84134:	2708      	movs	r7, #8
	udd_attach_device();
   84136:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   8413a:	601a      	str	r2, [r3, #0]
	udd_enable_suspend_interrupt();
   8413c:	2101      	movs	r1, #1
	udd_enable_wake_up_interrupt();
   8413e:	2210      	movs	r2, #16
	udd_enable_sof_interrupt();
   84140:	2404      	movs	r4, #4
	udd_enable_msof_interrupt();
   84142:	2002      	movs	r0, #2
	udd_enable_reset_interrupt();
   84144:	619f      	str	r7, [r3, #24]
	udd_enable_suspend_interrupt();
   84146:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   84148:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   8414a:	619c      	str	r4, [r3, #24]
	udd_enable_msof_interrupt();
   8414c:	6198      	str	r0, [r3, #24]
	udd_ack_reset();
   8414e:	609f      	str	r7, [r3, #8]
	udd_ack_sof();
   84150:	609c      	str	r4, [r3, #8]
	udd_ack_msof();
   84152:	6098      	str	r0, [r3, #8]
	udd_raise_suspend();
   84154:	60d9      	str	r1, [r3, #12]
	udd_ack_wake_up();
   84156:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   84158:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8415c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   84160:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (cpu_irq_is_enabled_flags(flags))
   84164:	b91e      	cbnz	r6, 8416e <udd_attach+0x6e>
		cpu_irq_enable();
   84166:	7029      	strb	r1, [r5, #0]
   84168:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8416c:	b662      	cpsie	i
}
   8416e:	bcf0      	pop	{r4, r5, r6, r7}
   84170:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84172:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84176:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84178:	f3bf 8f5f 	dmb	sy
	++sleepmgr_locks[mode];
   8417c:	4909      	ldr	r1, [pc, #36]	; (841a4 <udd_attach+0xa4>)
	cpu_irq_disable();
   8417e:	702b      	strb	r3, [r5, #0]
   84180:	788b      	ldrb	r3, [r1, #2]
   84182:	3301      	adds	r3, #1
   84184:	708b      	strb	r3, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   84186:	2800      	cmp	r0, #0
   84188:	d1c6      	bne.n	84118 <udd_attach+0x18>
		cpu_irq_enable();
   8418a:	2301      	movs	r3, #1
   8418c:	702b      	strb	r3, [r5, #0]
   8418e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84192:	b662      	cpsie	i
}
   84194:	e7c0      	b.n	84118 <udd_attach+0x18>
   84196:	bf00      	nop
   84198:	200721bd 	.word	0x200721bd
   8419c:	20070b04 	.word	0x20070b04
   841a0:	400ac000 	.word	0x400ac000
   841a4:	20073304 	.word	0x20073304

000841a8 <udd_detach>:
	otg_unfreeze_clock();
   841a8:	4b17      	ldr	r3, [pc, #92]	; (84208 <udd_detach+0x60>)
	if (!b_idle && udd_b_idle) {
   841aa:	4918      	ldr	r1, [pc, #96]	; (8420c <udd_detach+0x64>)
	otg_unfreeze_clock();
   841ac:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   841b0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   841b4:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_detach_device();
   841b8:	681a      	ldr	r2, [r3, #0]
   841ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   841be:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   841c0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   841c4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   841c8:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (!b_idle && udd_b_idle) {
   841cc:	780b      	ldrb	r3, [r1, #0]
   841ce:	b913      	cbnz	r3, 841d6 <udd_detach+0x2e>
	udd_b_idle = b_idle;
   841d0:	2300      	movs	r3, #0
   841d2:	700b      	strb	r3, [r1, #0]
   841d4:	4770      	bx	lr
{
   841d6:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   841d8:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   841dc:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   841de:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   841e2:	f04f 0c00 	mov.w	ip, #0
	--sleepmgr_locks[mode];
   841e6:	4a0a      	ldr	r2, [pc, #40]	; (84210 <udd_detach+0x68>)
   841e8:	480a      	ldr	r0, [pc, #40]	; (84214 <udd_detach+0x6c>)
   841ea:	7893      	ldrb	r3, [r2, #2]
   841ec:	3b01      	subs	r3, #1
   841ee:	7093      	strb	r3, [r2, #2]
   841f0:	f880 c000 	strb.w	ip, [r0]
	if (cpu_irq_is_enabled_flags(flags))
   841f4:	b924      	cbnz	r4, 84200 <udd_detach+0x58>
		cpu_irq_enable();
   841f6:	2301      	movs	r3, #1
   841f8:	7003      	strb	r3, [r0, #0]
   841fa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   841fe:	b662      	cpsie	i
	udd_b_idle = b_idle;
   84200:	2300      	movs	r3, #0
   84202:	700b      	strb	r3, [r1, #0]
}
   84204:	bc10      	pop	{r4}
   84206:	4770      	bx	lr
   84208:	400ac000 	.word	0x400ac000
   8420c:	200721bd 	.word	0x200721bd
   84210:	20073304 	.word	0x20073304
   84214:	20070b04 	.word	0x20070b04

00084218 <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   84218:	4b03      	ldr	r3, [pc, #12]	; (84228 <udd_is_high_speed+0x10>)
   8421a:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
}
   8421e:	f410 5040 	ands.w	r0, r0, #12288	; 0x3000
   84222:	bf18      	it	ne
   84224:	2001      	movne	r0, #1
   84226:	4770      	bx	lr
   84228:	400ac000 	.word	0x400ac000

0008422c <udd_set_address>:
	udd_disable_address();
   8422c:	4b08      	ldr	r3, [pc, #32]	; (84250 <udd_set_address+0x24>)
	udd_configure_address(address);
   8422e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	udd_disable_address();
   84232:	681a      	ldr	r2, [r3, #0]
   84234:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   84238:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   8423a:	681a      	ldr	r2, [r3, #0]
   8423c:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84240:	4302      	orrs	r2, r0
   84242:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   84244:	681a      	ldr	r2, [r3, #0]
   84246:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8424a:	601a      	str	r2, [r3, #0]
}
   8424c:	4770      	bx	lr
   8424e:	bf00      	nop
   84250:	400ac000 	.word	0x400ac000

00084254 <udd_getaddress>:
	return udd_get_configured_address();
   84254:	4b02      	ldr	r3, [pc, #8]	; (84260 <udd_getaddress+0xc>)
   84256:	6818      	ldr	r0, [r3, #0]
}
   84258:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   8425c:	4770      	bx	lr
   8425e:	bf00      	nop
   84260:	400ac000 	.word	0x400ac000

00084264 <udd_get_frame_number>:
	return udd_frame_number();
   84264:	4b02      	ldr	r3, [pc, #8]	; (84270 <udd_get_frame_number+0xc>)
   84266:	6a18      	ldr	r0, [r3, #32]
}
   84268:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   8426c:	4770      	bx	lr
   8426e:	bf00      	nop
   84270:	400ac000 	.word	0x400ac000

00084274 <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   84274:	4b02      	ldr	r3, [pc, #8]	; (84280 <udd_get_micro_frame_number+0xc>)
   84276:	6a18      	ldr	r0, [r3, #32]
}
   84278:	f3c0 000d 	ubfx	r0, r0, #0, #14
   8427c:	4770      	bx	lr
   8427e:	bf00      	nop
   84280:	400ac000 	.word	0x400ac000

00084284 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   84284:	4b01      	ldr	r3, [pc, #4]	; (8428c <udd_set_setup_payload+0x8>)
   84286:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   84288:	8199      	strh	r1, [r3, #12]
}
   8428a:	4770      	bx	lr
   8428c:	20072288 	.word	0x20072288

00084290 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84290:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   84294:	2a08      	cmp	r2, #8
   84296:	d900      	bls.n	8429a <udd_ep_free+0xa>
   84298:	4770      	bx	lr
	udd_disable_endpoint(ep_index);
   8429a:	2101      	movs	r1, #1
{
   8429c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_disable_endpoint(ep_index);
   8429e:	4f0e      	ldr	r7, [pc, #56]	; (842d8 <udd_ep_free+0x48>)
   842a0:	fa01 fc02 	lsl.w	ip, r1, r2
   842a4:	69fb      	ldr	r3, [r7, #28]
	udd_unallocate_memory(ep_index);
   842a6:	4d0d      	ldr	r5, [pc, #52]	; (842dc <udd_ep_free+0x4c>)
	udd_disable_endpoint(ep_index);
   842a8:	ea23 030c 	bic.w	r3, r3, ip
   842ac:	61fb      	str	r3, [r7, #28]
	udd_unallocate_memory(ep_index);
   842ae:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   842b2:	1e50      	subs	r0, r2, #1
   842b4:	4c0a      	ldr	r4, [pc, #40]	; (842e0 <udd_ep_free+0x50>)
   842b6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   842ba:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
	udd_unallocate_memory(ep_index);
   842be:	f023 0302 	bic.w	r3, r3, #2
   842c2:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   842c6:	4620      	mov	r0, r4
   842c8:	4e06      	ldr	r6, [pc, #24]	; (842e4 <udd_ep_free+0x54>)
   842ca:	47b0      	blx	r6
	udd_ep_job[ep_index - 1].stall_requested = false;
   842cc:	7d23      	ldrb	r3, [r4, #20]
   842ce:	f36f 0382 	bfc	r3, #2, #1
   842d2:	7523      	strb	r3, [r4, #20]
}
   842d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   842d6:	bf00      	nop
   842d8:	400ac000 	.word	0x400ac000
   842dc:	400ac100 	.word	0x400ac100
   842e0:	200721c8 	.word	0x200721c8
   842e4:	00083c19 	.word	0x00083c19

000842e8 <udd_ep_is_halted>:
	return Is_udd_endpoint_stall_requested(ep_index);
   842e8:	4b03      	ldr	r3, [pc, #12]	; (842f8 <udd_ep_is_halted+0x10>)
   842ea:	f000 000f 	and.w	r0, r0, #15
   842ee:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   842f2:	f3c0 40c0 	ubfx	r0, r0, #19, #1
   842f6:	4770      	bx	lr
   842f8:	400ac1c0 	.word	0x400ac1c0

000842fc <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   842fc:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   84300:	2b08      	cmp	r3, #8
   84302:	d834      	bhi.n	8436e <udd_ep_set_halt+0x72>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   84304:	4a2f      	ldr	r2, [pc, #188]	; (843c4 <udd_ep_set_halt+0xc8>)
   84306:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8430a:	0311      	lsls	r1, r2, #12
   8430c:	d431      	bmi.n	84372 <udd_ep_set_halt+0x76>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   8430e:	492e      	ldr	r1, [pc, #184]	; (843c8 <udd_ep_set_halt+0xcc>)
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   84310:	1e5a      	subs	r2, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   84312:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   84316:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
   8431a:	f89c 1014 	ldrb.w	r1, [ip, #20]
   8431e:	f011 0204 	ands.w	r2, r1, #4
   84322:	d126      	bne.n	84372 <udd_ep_set_halt+0x76>
	if (ptr_job->busy == true) {
   84324:	f011 0101 	ands.w	r1, r1, #1
   84328:	d121      	bne.n	8436e <udd_ep_set_halt+0x72>
{
   8432a:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8432c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84330:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84332:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84336:	4c25      	ldr	r4, [pc, #148]	; (843cc <udd_ep_set_halt+0xd0>)
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   84338:	0602      	lsls	r2, r0, #24
   8433a:	7021      	strb	r1, [r4, #0]
   8433c:	d41b      	bmi.n	84376 <udd_ep_set_halt+0x7a>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   8433e:	4924      	ldr	r1, [pc, #144]	; (843d0 <udd_ep_set_halt+0xd4>)
	udd_ack_stall(ep_index);
   84340:	2040      	movs	r0, #64	; 0x40
	udd_disable_endpoint_bank_autoswitch(ep_index);
   84342:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   84346:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   8434a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   8434e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
	udd_ack_stall(ep_index);
   84352:	4a20      	ldr	r2, [pc, #128]	; (843d4 <udd_ep_set_halt+0xd8>)
   84354:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   84358:	3290      	adds	r2, #144	; 0x90
   8435a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (cpu_irq_is_enabled_flags(flags))
   8435e:	bb6d      	cbnz	r5, 843bc <udd_ep_set_halt+0xc0>
		cpu_irq_enable();
   84360:	2001      	movs	r0, #1
   84362:	7020      	strb	r0, [r4, #0]
   84364:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84368:	b662      	cpsie	i
}
   8436a:	bcf0      	pop	{r4, r5, r6, r7}
   8436c:	4770      	bx	lr
		return false;
   8436e:	2000      	movs	r0, #0
   84370:	4770      	bx	lr
		return true; // Already STALL
   84372:	2001      	movs	r0, #1
}
   84374:	4770      	bx	lr
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   84376:	4a18      	ldr	r2, [pc, #96]	; (843d8 <udd_ep_set_halt+0xdc>)
   84378:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   8437c:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   84380:	d0dd      	beq.n	8433e <udd_ep_set_halt+0x42>
		udd_disable_in_send_interrupt(ep_index);
   84382:	2001      	movs	r0, #1
		ptr_job->stall_requested = true;
   84384:	f89c 2014 	ldrb.w	r2, [ip, #20]
		udd_disable_in_send_interrupt(ep_index);
   84388:	4914      	ldr	r1, [pc, #80]	; (843dc <udd_ep_set_halt+0xe0>)
		ptr_job->stall_requested = true;
   8438a:	f042 0204 	orr.w	r2, r2, #4
   8438e:	f88c 2014 	strb.w	r2, [ip, #20]
		udd_enable_bank_interrupt(ep_index);
   84392:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		udd_enable_endpoint_bank_autoswitch(ep_index);
   84396:	4e0e      	ldr	r6, [pc, #56]	; (843d0 <udd_ep_set_halt+0xd4>)
		udd_disable_in_send_interrupt(ep_index);
   84398:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   8439c:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
		udd_enable_bank_interrupt(ep_index);
   843a0:	f8df c03c 	ldr.w	ip, [pc, #60]	; 843e0 <udd_ep_set_halt+0xe4>
		udd_enable_endpoint_interrupt(ep_index);
   843a4:	4f0f      	ldr	r7, [pc, #60]	; (843e4 <udd_ep_set_halt+0xe8>)
		udd_enable_endpoint_bank_autoswitch(ep_index);
   843a6:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   843aa:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
		udd_enable_bank_interrupt(ep_index);
   843ae:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   843b2:	fa02 f303 	lsl.w	r3, r2, r3
   843b6:	61bb      	str	r3, [r7, #24]
	if (cpu_irq_is_enabled_flags(flags))
   843b8:	2d00      	cmp	r5, #0
   843ba:	d0d2      	beq.n	84362 <udd_ep_set_halt+0x66>
}
   843bc:	bcf0      	pop	{r4, r5, r6, r7}
		return true; // Already STALL
   843be:	2001      	movs	r0, #1
}
   843c0:	4770      	bx	lr
   843c2:	bf00      	nop
   843c4:	400ac1c0 	.word	0x400ac1c0
   843c8:	200721c8 	.word	0x200721c8
   843cc:	20070b04 	.word	0x20070b04
   843d0:	400ac100 	.word	0x400ac100
   843d4:	400ac160 	.word	0x400ac160
   843d8:	400ac130 	.word	0x400ac130
   843dc:	400ac220 	.word	0x400ac220
   843e0:	400ac1f0 	.word	0x400ac1f0
   843e4:	400ac000 	.word	0x400ac000

000843e8 <udd_ep_clear_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   843e8:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index)
   843ec:	2808      	cmp	r0, #8
   843ee:	d84b      	bhi.n	84488 <udd_ep_clear_halt+0xa0>
{
   843f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   843f2:	1e41      	subs	r1, r0, #1
	if (ptr_job->stall_requested) {
   843f4:	4c25      	ldr	r4, [pc, #148]	; (8448c <udd_ep_clear_halt+0xa4>)
   843f6:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   843fa:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   843fe:	7d15      	ldrb	r5, [r2, #20]
   84400:	004b      	lsls	r3, r1, #1
   84402:	076d      	lsls	r5, r5, #29
   84404:	d524      	bpl.n	84450 <udd_ep_clear_halt+0x68>
		udd_disable_bank_interrupt(ep_index);
   84406:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		ptr_job->stall_requested = false;
   8440a:	7d16      	ldrb	r6, [r2, #20]
		udd_disable_bank_interrupt(ep_index);
   8440c:	4f20      	ldr	r7, [pc, #128]	; (84490 <udd_ep_clear_halt+0xa8>)
		ptr_job->stall_requested = false;
   8440e:	f36f 0682 	bfc	r6, #2, #1
		udd_disable_endpoint_interrupt(ep_index);
   84412:	f8df e080 	ldr.w	lr, [pc, #128]	; 84494 <udd_ep_clear_halt+0xac>
		ptr_job->stall_requested = false;
   84416:	7516      	strb	r6, [r2, #20]
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   84418:	f8df c07c 	ldr.w	ip, [pc, #124]	; 84498 <udd_ep_clear_halt+0xb0>
		udd_disable_bank_interrupt(ep_index);
   8441c:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   84420:	4085      	lsls	r5, r0
   84422:	f8ce 5014 	str.w	r5, [lr, #20]
		udd_disable_bank_interrupt(ep_index);
   84426:	eb07 0680 	add.w	r6, r7, r0, lsl #2
   8442a:	0082      	lsls	r2, r0, #2
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   8442c:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
   84430:	0307      	lsls	r7, r0, #12
   84432:	d415      	bmi.n	84460 <udd_ep_clear_halt+0x78>
		if (ptr_job->busy == true) {
   84434:	440b      	add	r3, r1
   84436:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   8443a:	7d11      	ldrb	r1, [r2, #20]
   8443c:	00db      	lsls	r3, r3, #3
   8443e:	07c8      	lsls	r0, r1, #31
   84440:	d504      	bpl.n	8444c <udd_ep_clear_halt+0x64>
			ptr_job->busy = false;
   84442:	f36f 0100 	bfc	r1, #0, #1
			ptr_job->call_nohalt();
   84446:	58e3      	ldr	r3, [r4, r3]
			ptr_job->busy = false;
   84448:	7511      	strb	r1, [r2, #20]
			ptr_job->call_nohalt();
   8444a:	4798      	blx	r3
	return true;
   8444c:	2001      	movs	r0, #1
}
   8444e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   84450:	4d11      	ldr	r5, [pc, #68]	; (84498 <udd_ep_clear_halt+0xb0>)
   84452:	0082      	lsls	r2, r0, #2
   84454:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   84458:	0300      	lsls	r0, r0, #12
   8445a:	d5f7      	bpl.n	8444c <udd_ep_clear_halt+0x64>
		udd_disable_bank_interrupt(ep_index);
   8445c:	4e0c      	ldr	r6, [pc, #48]	; (84490 <udd_ep_clear_halt+0xa8>)
   8445e:	4416      	add	r6, r2
		if (Is_udd_stall(ep_index)) {
   84460:	480e      	ldr	r0, [pc, #56]	; (8449c <udd_ep_clear_halt+0xb4>)
   84462:	5810      	ldr	r0, [r2, r0]
   84464:	0645      	lsls	r5, r0, #25
   84466:	d506      	bpl.n	84476 <udd_ep_clear_halt+0x8e>
			udd_ack_stall(ep_index);
   84468:	2740      	movs	r7, #64	; 0x40
			udd_reset_data_toggle(ep_index);
   8446a:	f44f 2580 	mov.w	r5, #262144	; 0x40000
			udd_ack_stall(ep_index);
   8446e:	480c      	ldr	r0, [pc, #48]	; (844a0 <udd_ep_clear_halt+0xb8>)
   84470:	5017      	str	r7, [r2, r0]
			udd_reset_data_toggle(ep_index);
   84472:	3090      	adds	r0, #144	; 0x90
   84474:	5015      	str	r5, [r2, r0]
		udd_disable_stall_handshake(ep_index);
   84476:	f44f 2000 	mov.w	r0, #524288	; 0x80000
		udd_enable_endpoint_bank_autoswitch(ep_index);
   8447a:	4d0a      	ldr	r5, [pc, #40]	; (844a4 <udd_ep_clear_halt+0xbc>)
		udd_disable_stall_handshake(ep_index);
   8447c:	6030      	str	r0, [r6, #0]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   8447e:	5950      	ldr	r0, [r2, r5]
   84480:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   84484:	5150      	str	r0, [r2, r5]
	if (b_stall_cleared) {
   84486:	e7d5      	b.n	84434 <udd_ep_clear_halt+0x4c>
		return false;
   84488:	2000      	movs	r0, #0
}
   8448a:	4770      	bx	lr
   8448c:	200721c8 	.word	0x200721c8
   84490:	400ac220 	.word	0x400ac220
   84494:	400ac000 	.word	0x400ac000
   84498:	400ac1c0 	.word	0x400ac1c0
   8449c:	400ac130 	.word	0x400ac130
   844a0:	400ac160 	.word	0x400ac160
   844a4:	400ac100 	.word	0x400ac100

000844a8 <udd_ep_run>:
{
   844a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   844ac:	f000 000f 	and.w	r0, r0, #15
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
   844b0:	4d43      	ldr	r5, [pc, #268]	; (845c0 <udd_ep_run+0x118>)
	if (USB_DEVICE_MAX_EP < ep) {
   844b2:	2808      	cmp	r0, #8
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
   844b4:	f855 8020 	ldr.w	r8, [r5, r0, lsl #2]
	if (USB_DEVICE_MAX_EP < ep) {
   844b8:	d874      	bhi.n	845a4 <udd_ep_run+0xfc>
	if ((!Is_udd_endpoint_enabled(ep))
   844ba:	2601      	movs	r6, #1
   844bc:	4c41      	ldr	r4, [pc, #260]	; (845c4 <udd_ep_run+0x11c>)
   844be:	fa06 f700 	lsl.w	r7, r6, r0
   844c2:	69e4      	ldr	r4, [r4, #28]
   844c4:	4227      	tst	r7, r4
   844c6:	d06d      	beq.n	845a4 <udd_ep_run+0xfc>
			|| Is_udd_endpoint_stall_requested(ep)
   844c8:	4c3f      	ldr	r4, [pc, #252]	; (845c8 <udd_ep_run+0x120>)
   844ca:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   844ce:	0324      	lsls	r4, r4, #12
   844d0:	d468      	bmi.n	845a4 <udd_ep_run+0xfc>
	ptr_job = &udd_ep_job[ep - 1];
   844d2:	f100 3cff 	add.w	ip, r0, #4294967295
			|| ptr_job->stall_requested) {
   844d6:	4f3d      	ldr	r7, [pc, #244]	; (845cc <udd_ep_run+0x124>)
   844d8:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
   844dc:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
   844e0:	f89e 4014 	ldrb.w	r4, [lr, #20]
   844e4:	fa0c fa06 	lsl.w	sl, ip, r6
   844e8:	f014 0b04 	ands.w	fp, r4, #4
   844ec:	d15a      	bne.n	845a4 <udd_ep_run+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   844ee:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   844f2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   844f4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   844f8:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 845d0 <udd_ep_run+0x128>
   844fc:	f889 b000 	strb.w	fp, [r9]
	if (ptr_job->busy == true) {
   84500:	f89e b014 	ldrb.w	fp, [lr, #20]
   84504:	f01b 0f01 	tst.w	fp, #1
   84508:	d14b      	bne.n	845a2 <udd_ep_run+0xfa>
	ptr_job->busy = true;
   8450a:	f89e b014 	ldrb.w	fp, [lr, #20]
   8450e:	f04b 0b01 	orr.w	fp, fp, #1
   84512:	f88e b014 	strb.w	fp, [lr, #20]
	if (cpu_irq_is_enabled_flags(flags))
   84516:	b924      	cbnz	r4, 84522 <udd_ep_run+0x7a>
		cpu_irq_enable();
   84518:	f889 6000 	strb.w	r6, [r9]
   8451c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84520:	b662      	cpsie	i
	ptr_job->buf_cnt = 0;
   84522:	2600      	movs	r6, #0
	ptr_job->call_trans = callback;
   84524:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
	ptr_job->buf = buf;
   84528:	eb0a 040c 	add.w	r4, sl, ip
	ptr_job->call_trans = callback;
   8452c:	f847 e034 	str.w	lr, [r7, r4, lsl #3]
	ptr_job->buf = buf;
   84530:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
	ptr_job->buf_size = buf_size;
   84534:	e9c4 2301 	strd	r2, r3, [r4, #4]
	ptr_job->buf_load = 0;
   84538:	e9c4 6603 	strd	r6, r6, [r4, #12]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8453c:	b911      	cbnz	r1, 84544 <udd_ep_run+0x9c>
   8453e:	fab3 f183 	clz	r1, r3
   84542:	0949      	lsrs	r1, r1, #5
   84544:	44e2      	add	sl, ip
   84546:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
   8454a:	7d3b      	ldrb	r3, [r7, #20]
	if (!Is_udd_endpoint_dma_supported(ep)) {
   8454c:	fa5f fc8c 	uxtb.w	ip, ip
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   84550:	f361 0341 	bfi	r3, r1, #1, #1
	if (!Is_udd_endpoint_dma_supported(ep)) {
   84554:	f1bc 0f05 	cmp.w	ip, #5
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   84558:	753b      	strb	r3, [r7, #20]
	if (!Is_udd_endpoint_dma_supported(ep)) {
   8455a:	d926      	bls.n	845aa <udd_ep_run+0x102>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8455c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84560:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84562:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84566:	2100      	movs	r1, #0
		udd_enable_endpoint_interrupt(ep);
   84568:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   8456c:	f889 1000 	strb.w	r1, [r9]
   84570:	4914      	ldr	r1, [pc, #80]	; (845c4 <udd_ep_run+0x11c>)
   84572:	4083      	lsls	r3, r0
		if (b_dir_in) {
   84574:	f418 7f80 	tst.w	r8, #256	; 0x100
		udd_enable_endpoint_interrupt(ep);
   84578:	618b      	str	r3, [r1, #24]
			udd_enable_in_send_interrupt(ep);
   8457a:	bf14      	ite	ne
   8457c:	2101      	movne	r1, #1
			udd_enable_out_received_interrupt(ep);
   8457e:	2102      	moveq	r1, #2
			udd_disable_endpoint_bank_autoswitch(ep);
   84580:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
   84584:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   84588:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
			udd_enable_out_received_interrupt(ep);
   8458c:	4b11      	ldr	r3, [pc, #68]	; (845d4 <udd_ep_run+0x12c>)
   8458e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
		cpu_irq_enable();
   84592:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
   84594:	b93a      	cbnz	r2, 845a6 <udd_ep_run+0xfe>
		cpu_irq_enable();
   84596:	f889 0000 	strb.w	r0, [r9]
   8459a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8459e:	b662      	cpsie	i
}
   845a0:	e001      	b.n	845a6 <udd_ep_run+0xfe>
	if (cpu_irq_is_enabled_flags(flags))
   845a2:	b134      	cbz	r4, 845b2 <udd_ep_run+0x10a>
		return false;
   845a4:	2000      	movs	r0, #0
}
   845a6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	udd_ep_trans_done(ep);
   845aa:	4b0b      	ldr	r3, [pc, #44]	; (845d8 <udd_ep_run+0x130>)
   845ac:	4798      	blx	r3
	return true;
   845ae:	2001      	movs	r0, #1
   845b0:	e7f9      	b.n	845a6 <udd_ep_run+0xfe>
		cpu_irq_enable();
   845b2:	f889 6000 	strb.w	r6, [r9]
  __ASM volatile ("dmb 0xF":::"memory");
   845b6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   845ba:	b662      	cpsie	i
		return false; // Job already on going
   845bc:	4620      	mov	r0, r4
}
   845be:	e7f2      	b.n	845a6 <udd_ep_run+0xfe>
   845c0:	400ac100 	.word	0x400ac100
   845c4:	400ac000 	.word	0x400ac000
   845c8:	400ac1c0 	.word	0x400ac1c0
   845cc:	200721c8 	.word	0x200721c8
   845d0:	20070b04 	.word	0x20070b04
   845d4:	400ac1f0 	.word	0x400ac1f0
   845d8:	00083c55 	.word	0x00083c55

000845dc <udd_ep_alloc>:
	ep = ep & USB_EP_ADDR_MASK;
   845dc:	f000 030f 	and.w	r3, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   845e0:	2b08      	cmp	r3, #8
   845e2:	f200 80da 	bhi.w	8479a <udd_ep_alloc+0x1be>
{
   845e6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (Is_udd_endpoint_enabled(ep)) {
   845ea:	4c74      	ldr	r4, [pc, #464]	; (847bc <udd_ep_alloc+0x1e0>)
{
   845ec:	b085      	sub	sp, #20
	if (Is_udd_endpoint_enabled(ep)) {
   845ee:	69e5      	ldr	r5, [r4, #28]
   845f0:	2401      	movs	r4, #1
   845f2:	409c      	lsls	r4, r3
   845f4:	4025      	ands	r5, r4
   845f6:	f040 80cc 	bne.w	84792 <udd_ep_alloc+0x1b6>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   845fa:	f001 0403 	and.w	r4, r1, #3
   845fe:	3c01      	subs	r4, #1
   84600:	b2e4      	uxtb	r4, r4
   84602:	2c02      	cmp	r4, #2
   84604:	f200 80c5 	bhi.w	84792 <udd_ep_alloc+0x1b6>
   84608:	4e6d      	ldr	r6, [pc, #436]	; (847c0 <udd_ep_alloc+0x1e4>)
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8460a:	4f6e      	ldr	r7, [pc, #440]	; (847c4 <udd_ep_alloc+0x1e8>)
   8460c:	5d34      	ldrb	r4, [r6, r4]
	if (ep > 2) nb_bank = 1;
   8460e:	2b02      	cmp	r3, #2
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   84610:	ea4f 21c1 	mov.w	r1, r1, lsl #11
	switch (nb_bank) {
   84614:	bf98      	it	ls
   84616:	f104 36ff 	addls.w	r6, r4, #4294967295
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8461a:	f401 5cc0 	and.w	ip, r1, #6144	; 0x1800
   8461e:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   84622:	bf96      	itet	ls
   84624:	b2f6      	uxtbls	r6, r6
   84626:	462e      	movhi	r6, r5
   84628:	00b6      	lslls	r6, r6, #2
   8462a:	f421 51cb 	bic.w	r1, r1, #6496	; 0x1960
   8462e:	f010 0f80 	tst.w	r0, #128	; 0x80
   84632:	bf18      	it	ne
   84634:	f44f 7580 	movne.w	r5, #256	; 0x100
   84638:	f021 011c 	bic.w	r1, r1, #28
   8463c:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   84640:	461c      	mov	r4, r3
   84642:	ea41 010c 	orr.w	r1, r1, ip
   84646:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
   8464a:	f0c0 80a8 	bcc.w	8479e <udd_ep_alloc+0x1c2>
   8464e:	2270      	movs	r2, #112	; 0x70
	ep_allocated = 1 << ep;
   84650:	f04f 0801 	mov.w	r8, #1
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   84654:	4331      	orrs	r1, r6
   84656:	430d      	orrs	r5, r1
   84658:	432a      	orrs	r2, r5
   8465a:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8465e:	0701      	lsls	r1, r0, #28
	ep_allocated = 1 << ep;
   84660:	fa08 f703 	lsl.w	r7, r8, r3
   84664:	b2be      	uxth	r6, r7
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   84666:	d41b      	bmi.n	846a0 <udd_ep_alloc+0xc4>
   84668:	2208      	movs	r2, #8
		if (Is_udd_endpoint_enabled(i)) {
   8466a:	469c      	mov	ip, r3
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8466c:	4956      	ldr	r1, [pc, #344]	; (847c8 <udd_ep_alloc+0x1ec>)
		if (Is_udd_endpoint_enabled(i)) {
   8466e:	4f53      	ldr	r7, [pc, #332]	; (847bc <udd_ep_alloc+0x1e0>)
   84670:	69fb      	ldr	r3, [r7, #28]
   84672:	fa08 f002 	lsl.w	r0, r8, r2
   84676:	4203      	tst	r3, r0
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   84678:	f102 32ff 	add.w	r2, r2, #4294967295
   8467c:	b2d5      	uxtb	r5, r2
		if (Is_udd_endpoint_enabled(i)) {
   8467e:	d009      	beq.n	84694 <udd_ep_alloc+0xb8>
			udd_disable_endpoint(i);
   84680:	69fb      	ldr	r3, [r7, #28]
			ep_allocated |= 1 << i;
   84682:	4306      	orrs	r6, r0
			udd_disable_endpoint(i);
   84684:	ea23 0000 	bic.w	r0, r3, r0
   84688:	61f8      	str	r0, [r7, #28]
			udd_unallocate_memory(i);
   8468a:	6808      	ldr	r0, [r1, #0]
			ep_allocated |= 1 << i;
   8468c:	b2b6      	uxth	r6, r6
			udd_unallocate_memory(i);
   8468e:	f020 0002 	bic.w	r0, r0, #2
   84692:	6008      	str	r0, [r1, #0]
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   84694:	4565      	cmp	r5, ip
   84696:	f1a1 0104 	sub.w	r1, r1, #4
   8469a:	d8e9      	bhi.n	84670 <udd_ep_alloc+0x94>
		if (ep_allocated & (1 << i)) {
   8469c:	4663      	mov	r3, ip
   8469e:	4637      	mov	r7, r6
   846a0:	f8df 9128 	ldr.w	r9, [pc, #296]	; 847cc <udd_ep_alloc+0x1f0>
   846a4:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   846a8:	4675      	mov	r5, lr
			udd_enable_endpoint(i);
   846aa:	f8df 8110 	ldr.w	r8, [pc, #272]	; 847bc <udd_ep_alloc+0x1e0>
   846ae:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
   846b2:	b2db      	uxtb	r3, r3
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   846b4:	9703      	str	r7, [sp, #12]
   846b6:	e029      	b.n	8470c <udd_ep_alloc+0x130>
					&& !Is_udd_endpoint_in(i)) {
   846b8:	682a      	ldr	r2, [r5, #0]
   846ba:	05d2      	lsls	r2, r2, #23
   846bc:	d456      	bmi.n	8476c <udd_ep_alloc+0x190>
					ptr_job->buf_cnt -= ptr_job->buf_load;
   846be:	e956 7203 	ldrd	r7, r2, [r6, #-12]
   846c2:	1aba      	subs	r2, r7, r2
   846c4:	f846 2c0c 	str.w	r2, [r6, #-12]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   846c8:	f8d5 c000 	ldr.w	ip, [r5]
   846cc:	f856 7c14 	ldr.w	r7, [r6, #-20]
   846d0:	f41c 7f80 	tst.w	ip, #256	; 0x100
   846d4:	bf18      	it	ne
   846d6:	f043 0080 	orrne.w	r0, r3, #128	; 0x80
						ptr_job->b_shortpacket,
   846da:	4471      	add	r1, lr
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   846dc:	f856 3c10 	ldr.w	r3, [r6, #-16]
						ptr_job->b_shortpacket,
   846e0:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
   846e4:	7d09      	ldrb	r1, [r1, #20]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   846e6:	1a9b      	subs	r3, r3, r2
   846e8:	443a      	add	r2, r7
   846ea:	f856 7c18 	ldr.w	r7, [r6, #-24]
   846ee:	f3c1 0140 	ubfx	r1, r1, #1, #1
   846f2:	9700      	str	r7, [sp, #0]
   846f4:	4f36      	ldr	r7, [pc, #216]	; (847d0 <udd_ep_alloc+0x1f4>)
   846f6:	47b8      	blx	r7
				if (!b_restart) {
   846f8:	2800      	cmp	r0, #0
   846fa:	d04a      	beq.n	84792 <udd_ep_alloc+0x1b6>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   846fc:	3401      	adds	r4, #1
   846fe:	b2e3      	uxtb	r3, r4
   84700:	2b09      	cmp	r3, #9
   84702:	f105 0504 	add.w	r5, r5, #4
   84706:	f106 0618 	add.w	r6, r6, #24
   8470a:	d053      	beq.n	847b4 <udd_ep_alloc+0x1d8>
		if (ep_allocated & (1 << i)) {
   8470c:	9a03      	ldr	r2, [sp, #12]
   8470e:	4618      	mov	r0, r3
   84710:	4122      	asrs	r2, r4
   84712:	07d2      	lsls	r2, r2, #31
   84714:	d5f2      	bpl.n	846fc <udd_ep_alloc+0x120>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   84716:	1e61      	subs	r1, r4, #1
			bool b_restart = ptr_job->busy;
   84718:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
   8471c:	eb09 0ccc 	add.w	ip, r9, ip, lsl #3
   84720:	f89c a014 	ldrb.w	sl, [ip, #20]
			udd_enable_endpoint(i);
   84724:	2201      	movs	r2, #1
			ptr_job->busy = false;
   84726:	46d3      	mov	fp, sl
   84728:	f36f 0b00 	bfc	fp, #0, #1
   8472c:	f88c b014 	strb.w	fp, [ip, #20]
			udd_allocate_memory(i);
   84730:	f8d5 b000 	ldr.w	fp, [r5]
			udd_enable_endpoint(i);
   84734:	40a2      	lsls	r2, r4
			udd_allocate_memory(i);
   84736:	f04b 0b02 	orr.w	fp, fp, #2
   8473a:	f8c5 b000 	str.w	fp, [r5]
			udd_enable_endpoint(i);
   8473e:	f8d8 b01c 	ldr.w	fp, [r8, #28]
			bool b_restart = ptr_job->busy;
   84742:	f00a 0a01 	and.w	sl, sl, #1
			udd_enable_endpoint(i);
   84746:	ea42 020b 	orr.w	r2, r2, fp
   8474a:	f8c8 201c 	str.w	r2, [r8, #28]
			if ((!Is_udd_endpoint_configured(i)) && (1)) { //this is dumb
   8474e:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			bool b_restart = ptr_job->busy;
   84750:	ea4f 0e41 	mov.w	lr, r1, lsl #1
			if ((!Is_udd_endpoint_configured(i)) && (1)) { //this is dumb
   84754:	0357      	lsls	r7, r2, #13
   84756:	d50c      	bpl.n	84772 <udd_ep_alloc+0x196>
			udd_enable_endpoint_bank_autoswitch(i);
   84758:	682a      	ldr	r2, [r5, #0]
   8475a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   8475e:	602a      	str	r2, [r5, #0]
			if (b_restart) {
   84760:	f1ba 0f00 	cmp.w	sl, #0
   84764:	d0ca      	beq.n	846fc <udd_ep_alloc+0x120>
				if (!Is_udd_endpoint_dma_supported(i)
   84766:	1e5a      	subs	r2, r3, #1
   84768:	2a05      	cmp	r2, #5
   8476a:	d8a5      	bhi.n	846b8 <udd_ep_alloc+0xdc>
						&ptr_job->buf[ptr_job->buf_cnt],
   8476c:	f856 2c0c 	ldr.w	r2, [r6, #-12]
   84770:	e7aa      	b.n	846c8 <udd_ep_alloc+0xec>
				if (NULL == ptr_job->call_trans) {
   84772:	f8dc 3000 	ldr.w	r3, [ip]
   84776:	b163      	cbz	r3, 84792 <udd_ep_alloc+0x1b6>
				if (Is_udd_endpoint_in(i)) {
   84778:	682a      	ldr	r2, [r5, #0]
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   8477a:	4471      	add	r1, lr
				if (Is_udd_endpoint_in(i)) {
   8477c:	05d4      	lsls	r4, r2, #23
					i |= USB_EP_DIR_IN;
   8477e:	bf48      	it	mi
   84780:	f040 0080 	orrmi.w	r0, r0, #128	; 0x80
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   84784:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
   84788:	4602      	mov	r2, r0
   8478a:	f8d9 100c 	ldr.w	r1, [r9, #12]
   8478e:	2001      	movs	r0, #1
   84790:	4798      	blx	r3
				return false;
   84792:	2000      	movs	r0, #0
}
   84794:	b005      	add	sp, #20
   84796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   8479a:	2000      	movs	r0, #0
}
   8479c:	4770      	bx	lr
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   8479e:	2a08      	cmp	r2, #8
   847a0:	bf38      	it	cc
   847a2:	2208      	movcc	r2, #8
   847a4:	0052      	lsls	r2, r2, #1
   847a6:	3a01      	subs	r2, #1
   847a8:	fab2 f282 	clz	r2, r2
   847ac:	f1c2 021c 	rsb	r2, r2, #28
   847b0:	0112      	lsls	r2, r2, #4
   847b2:	e74d      	b.n	84650 <udd_ep_alloc+0x74>
	return true;
   847b4:	2001      	movs	r0, #1
}
   847b6:	b005      	add	sp, #20
   847b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   847bc:	400ac000 	.word	0x400ac000
   847c0:	0008ca8c 	.word	0x0008ca8c
   847c4:	400ac100 	.word	0x400ac100
   847c8:	400ac120 	.word	0x400ac120
   847cc:	200721c8 	.word	0x200721c8
   847d0:	000844a9 	.word	0x000844a9

000847d4 <udd_ep_abort>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   847d4:	f000 020f 	and.w	r2, r0, #15
	if (!Is_udd_endpoint_dma_supported(ep_index)) {
   847d8:	f102 3cff 	add.w	ip, r2, #4294967295
   847dc:	fa5f f38c 	uxtb.w	r3, ip
   847e0:	2b05      	cmp	r3, #5
{
   847e2:	b570      	push	{r4, r5, r6, lr}
	if (!Is_udd_endpoint_dma_supported(ep_index)) {
   847e4:	d919      	bls.n	8481a <udd_ep_abort+0x46>
		udd_disable_endpoint_interrupt(ep_index);
   847e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		udd_disable_out_received_interrupt(ep_index);
   847ea:	2502      	movs	r5, #2
		udd_disable_in_send_interrupt(ep_index);
   847ec:	2401      	movs	r4, #1
		udd_disable_out_received_interrupt(ep_index);
   847ee:	4920      	ldr	r1, [pc, #128]	; (84870 <udd_ep_abort+0x9c>)
		udd_disable_endpoint_interrupt(ep_index);
   847f0:	4e20      	ldr	r6, [pc, #128]	; (84874 <udd_ep_abort+0xa0>)
   847f2:	4093      	lsls	r3, r2
   847f4:	6173      	str	r3, [r6, #20]
		udd_disable_out_received_interrupt(ep_index);
   847f6:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
		udd_disable_in_send_interrupt(ep_index);
   847fa:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
	udd_disable_endpoint_interrupt(ep_index);
   847fe:	491d      	ldr	r1, [pc, #116]	; (84874 <udd_ep_abort+0xa0>)
   84800:	614b      	str	r3, [r1, #20]
	if (ep & USB_EP_DIR_IN) {
   84802:	0601      	lsls	r1, r0, #24
   84804:	d41b      	bmi.n	8483e <udd_ep_abort+0x6a>
}
   84806:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8480a:	481b      	ldr	r0, [pc, #108]	; (84878 <udd_ep_abort+0xa4>)
   8480c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   84810:	2101      	movs	r1, #1
   84812:	4b1a      	ldr	r3, [pc, #104]	; (8487c <udd_ep_abort+0xa8>)
   84814:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
   84818:	4718      	bx	r3
		udd_disable_endpoint_dma_interrupt(ep_index);
   8481a:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
		udd_endpoint_dma_set_control(ep_index, 0);
   8481e:	2500      	movs	r5, #0
		udd_disable_endpoint_interrupt(ep_index);
   84820:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		udd_endpoint_dma_set_control(ep_index, 0);
   84824:	4916      	ldr	r1, [pc, #88]	; (84880 <udd_ep_abort+0xac>)
		udd_disable_endpoint_dma_interrupt(ep_index);
   84826:	4e13      	ldr	r6, [pc, #76]	; (84874 <udd_ep_abort+0xa0>)
		udd_endpoint_dma_set_control(ep_index, 0);
   84828:	eb01 1102 	add.w	r1, r1, r2, lsl #4
		udd_disable_endpoint_dma_interrupt(ep_index);
   8482c:	fa04 f40c 	lsl.w	r4, r4, ip
   84830:	6174      	str	r4, [r6, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   84832:	608d      	str	r5, [r1, #8]
	udd_disable_endpoint_interrupt(ep_index);
   84834:	490f      	ldr	r1, [pc, #60]	; (84874 <udd_ep_abort+0xa0>)
		udd_disable_endpoint_interrupt(ep_index);
   84836:	4093      	lsls	r3, r2
	udd_disable_endpoint_interrupt(ep_index);
   84838:	614b      	str	r3, [r1, #20]
	if (ep & USB_EP_DIR_IN) {
   8483a:	0601      	lsls	r1, r0, #24
   8483c:	d5e3      	bpl.n	84806 <udd_ep_abort+0x32>
		while(udd_nb_busy_bank(ep_index)) {
   8483e:	4b11      	ldr	r3, [pc, #68]	; (84884 <udd_ep_abort+0xb0>)
   84840:	0095      	lsls	r5, r2, #2
   84842:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
   84846:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8484a:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   8484e:	d0da      	beq.n	84806 <udd_ep_abort+0x32>
			udd_kill_last_in_bank(ep_index);
   84850:	f44f 5400 	mov.w	r4, #8192	; 0x2000
   84854:	480c      	ldr	r0, [pc, #48]	; (84888 <udd_ep_abort+0xb4>)
			while(Is_udd_kill_last(ep_index));
   84856:	490d      	ldr	r1, [pc, #52]	; (8488c <udd_ep_abort+0xb8>)
			udd_kill_last_in_bank(ep_index);
   84858:	4428      	add	r0, r5
			while(Is_udd_kill_last(ep_index));
   8485a:	4429      	add	r1, r5
			udd_kill_last_in_bank(ep_index);
   8485c:	6004      	str	r4, [r0, #0]
			while(Is_udd_kill_last(ep_index));
   8485e:	680b      	ldr	r3, [r1, #0]
   84860:	049b      	lsls	r3, r3, #18
   84862:	d4fc      	bmi.n	8485e <udd_ep_abort+0x8a>
		while(udd_nb_busy_bank(ep_index)) {
   84864:	f8de 3000 	ldr.w	r3, [lr]
   84868:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   8486c:	d1f6      	bne.n	8485c <udd_ep_abort+0x88>
   8486e:	e7ca      	b.n	84806 <udd_ep_abort+0x32>
   84870:	400ac220 	.word	0x400ac220
   84874:	400ac000 	.word	0x400ac000
   84878:	200721c8 	.word	0x200721c8
   8487c:	00083c19 	.word	0x00083c19
   84880:	400ac300 	.word	0x400ac300
   84884:	400ac130 	.word	0x400ac130
   84888:	400ac1f0 	.word	0x400ac1f0
   8488c:	400ac1c0 	.word	0x400ac1c0

00084890 <UOTGHS_Handler>:
{
   84890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   84894:	4bb1      	ldr	r3, [pc, #708]	; (84b5c <UOTGHS_Handler+0x2cc>)
{
   84896:	b083      	sub	sp, #12
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   84898:	4798      	blx	r3
   8489a:	b928      	cbnz	r0, 848a8 <UOTGHS_Handler+0x18>
   8489c:	4bb0      	ldr	r3, [pc, #704]	; (84b60 <UOTGHS_Handler+0x2d0>)
   8489e:	685b      	ldr	r3, [r3, #4]
   848a0:	f013 0301 	ands.w	r3, r3, #1
   848a4:	f000 80b8 	beq.w	84a18 <UOTGHS_Handler+0x188>
	if (Is_udd_sof()) {
   848a8:	4aad      	ldr	r2, [pc, #692]	; (84b60 <UOTGHS_Handler+0x2d0>)
   848aa:	6853      	ldr	r3, [r2, #4]
   848ac:	075f      	lsls	r7, r3, #29
   848ae:	f100 80a0 	bmi.w	849f2 <UOTGHS_Handler+0x162>
	if (Is_udd_msof()) {
   848b2:	6853      	ldr	r3, [r2, #4]
   848b4:	f013 0302 	ands.w	r3, r3, #2
   848b8:	f040 80a7 	bne.w	84a0a <UOTGHS_Handler+0x17a>
	if (!Is_udd_endpoint_interrupt(0)) {
   848bc:	6851      	ldr	r1, [r2, #4]
   848be:	04ce      	lsls	r6, r1, #19
   848c0:	d523      	bpl.n	8490a <UOTGHS_Handler+0x7a>
	udd_disable_nak_out_interrupt(0);
   848c2:	2108      	movs	r1, #8
	udd_disable_nak_in_interrupt(0);
   848c4:	2010      	movs	r0, #16
   848c6:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	udd_disable_nak_out_interrupt(0);
   848ca:	f8c2 1220 	str.w	r1, [r2, #544]	; 0x220
	if (Is_udd_setup_received(0)) {
   848ce:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   848d2:	074d      	lsls	r5, r1, #29
   848d4:	f100 8181 	bmi.w	84bda <UOTGHS_Handler+0x34a>
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   848d8:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   848dc:	07cc      	lsls	r4, r1, #31
   848de:	d504      	bpl.n	848ea <UOTGHS_Handler+0x5a>
   848e0:	f8d2 21c0 	ldr.w	r2, [r2, #448]	; 0x1c0
   848e4:	07d0      	lsls	r0, r2, #31
   848e6:	f100 832c 	bmi.w	84f42 <UOTGHS_Handler+0x6b2>
	if (Is_udd_out_received(0)) {
   848ea:	4a9d      	ldr	r2, [pc, #628]	; (84b60 <UOTGHS_Handler+0x2d0>)
   848ec:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   848f0:	0789      	lsls	r1, r1, #30
   848f2:	f100 8221 	bmi.w	84d38 <UOTGHS_Handler+0x4a8>
	if (Is_udd_nak_out(0)) {
   848f6:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   848fa:	070f      	lsls	r7, r1, #28
   848fc:	f100 8249 	bmi.w	84d92 <UOTGHS_Handler+0x502>
	if (Is_udd_nak_in(0)) {
   84900:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   84904:	06cd      	lsls	r5, r1, #27
   84906:	f100 819b 	bmi.w	84c40 <UOTGHS_Handler+0x3b0>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   8490a:	4e96      	ldr	r6, [pc, #600]	; (84b64 <UOTGHS_Handler+0x2d4>)
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8490c:	2101      	movs	r1, #1
   8490e:	4635      	mov	r5, r6
   84910:	4634      	mov	r4, r6
   84912:	f04f 0e04 	mov.w	lr, #4
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   84916:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
		}
#endif
#ifdef UDD_EP_FIFO_SUPPORTED
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_dma_supported(ep)
				&& Is_udd_endpoint_interrupt_enabled(ep)) {
   8491a:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8491e:	4f92      	ldr	r7, [pc, #584]	; (84b68 <UOTGHS_Handler+0x2d8>)
   84920:	4a92      	ldr	r2, [pc, #584]	; (84b6c <UOTGHS_Handler+0x2dc>)
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   84922:	f8df 823c 	ldr.w	r8, [pc, #572]	; 84b60 <UOTGHS_Handler+0x2d0>
   84926:	e029      	b.n	8497c <UOTGHS_Handler+0xec>
				&& Is_udd_endpoint_interrupt_enabled(ep)) {
   84928:	fa0a fc01 	lsl.w	ip, sl, r1
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   8492c:	f8d8 b010 	ldr.w	fp, [r8, #16]
   84930:	ea1b 0f0c 	tst.w	fp, ip
   84934:	d014      	beq.n	84960 <UOTGHS_Handler+0xd0>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   84936:	f8d7 b000 	ldr.w	fp, [r7]
   8493a:	f01b 0f01 	tst.w	fp, #1
   8493e:	d005      	beq.n	8494c <UOTGHS_Handler+0xbc>
					&& Is_udd_in_send(ep)) {
   84940:	f8d2 b000 	ldr.w	fp, [r2]
   84944:	f01b 0f01 	tst.w	fp, #1
   84948:	f040 83a8 	bne.w	8509c <UOTGHS_Handler+0x80c>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   8494c:	6838      	ldr	r0, [r7, #0]
   8494e:	04c0      	lsls	r0, r0, #19
   84950:	d506      	bpl.n	84960 <UOTGHS_Handler+0xd0>
					&& (0 == udd_nb_busy_bank(ep))) {
   84952:	6810      	ldr	r0, [r2, #0]
   84954:	f410 5f40 	tst.w	r0, #12288	; 0x3000
   84958:	f3c0 3b01 	ubfx	fp, r0, #12, #2
   8495c:	f000 83af 	beq.w	850be <UOTGHS_Handler+0x82e>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   84960:	3301      	adds	r3, #1
   84962:	2b08      	cmp	r3, #8
   84964:	f10e 0e04 	add.w	lr, lr, #4
   84968:	f102 0204 	add.w	r2, r2, #4
   8496c:	f107 0704 	add.w	r7, r7, #4
   84970:	f104 0418 	add.w	r4, r4, #24
   84974:	f101 0101 	add.w	r1, r1, #1
   84978:	f000 80a5 	beq.w	84ac6 <UOTGHS_Handler+0x236>
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   8497c:	f8d8 b010 	ldr.w	fp, [r8, #16]
   84980:	fa09 fc03 	lsl.w	ip, r9, r3
   84984:	ea1b 0f0c 	tst.w	fp, ip
   84988:	b2c8      	uxtb	r0, r1
   8498a:	d005      	beq.n	84998 <UOTGHS_Handler+0x108>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   8498c:	f8d8 b004 	ldr.w	fp, [r8, #4]
   84990:	ea1c 0f0b 	tst.w	ip, fp
   84994:	f040 8316 	bne.w	84fc4 <UOTGHS_Handler+0x734>
		if (!Is_udd_endpoint_dma_supported(ep)
   84998:	2b05      	cmp	r3, #5
   8499a:	d9c5      	bls.n	84928 <UOTGHS_Handler+0x98>
				&& Is_udd_endpoint_interrupt_enabled(ep)) {
   8499c:	f8d8 b010 	ldr.w	fp, [r8, #16]
   849a0:	fa0a fc01 	lsl.w	ip, sl, r1
   849a4:	ea1b 0f0c 	tst.w	fp, ip
   849a8:	d0c0      	beq.n	8492c <UOTGHS_Handler+0x9c>
			if (Is_udd_out_received(ep)
   849aa:	f8d2 b000 	ldr.w	fp, [r2]
   849ae:	f01b 0f02 	tst.w	fp, #2
   849b2:	d005      	beq.n	849c0 <UOTGHS_Handler+0x130>
				&& Is_udd_out_received_interrupt_enabled(ep)) {
   849b4:	f8d7 b000 	ldr.w	fp, [r7]
   849b8:	f01b 0f02 	tst.w	fp, #2
   849bc:	f040 8156 	bne.w	84c6c <UOTGHS_Handler+0x3dc>
			if (Is_udd_in_send(ep)
   849c0:	f8d2 b000 	ldr.w	fp, [r2]
   849c4:	f01b 0f01 	tst.w	fp, #1
   849c8:	d12e      	bne.n	84a28 <UOTGHS_Handler+0x198>
			if (Is_udd_overflow(ep)
   849ca:	f8d2 b000 	ldr.w	fp, [r2]
   849ce:	f01b 0f20 	tst.w	fp, #32
   849d2:	d109      	bne.n	849e8 <UOTGHS_Handler+0x158>
					|| Is_udd_underflow(ep)
   849d4:	f8d2 b000 	ldr.w	fp, [r2]
   849d8:	f01b 0f04 	tst.w	fp, #4
   849dc:	d104      	bne.n	849e8 <UOTGHS_Handler+0x158>
					|| Is_udd_crc_error(ep)) {
   849de:	f8d2 b000 	ldr.w	fp, [r2]
   849e2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   849e6:	d0a1      	beq.n	8492c <UOTGHS_Handler+0x9c>
				udd_ep_abort(ep);
   849e8:	4b61      	ldr	r3, [pc, #388]	; (84b70 <UOTGHS_Handler+0x2e0>)
}
   849ea:	b003      	add	sp, #12
   849ec:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				udd_ep_abort(ep);
   849f0:	4718      	bx	r3
		udd_ack_sof();
   849f2:	2304      	movs	r3, #4
   849f4:	6093      	str	r3, [r2, #8]
		if (Is_udd_full_speed_mode()) {
   849f6:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   849fa:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   849fe:	d05f      	beq.n	84ac0 <UOTGHS_Handler+0x230>
		UDC_SOF_EVENT();
   84a00:	4b5c      	ldr	r3, [pc, #368]	; (84b74 <UOTGHS_Handler+0x2e4>)
}
   84a02:	b003      	add	sp, #12
   84a04:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udc_sof_notify();
   84a08:	4718      	bx	r3
		udd_ack_msof();
   84a0a:	2102      	movs	r1, #2
		udc_sof_notify();
   84a0c:	4b5a      	ldr	r3, [pc, #360]	; (84b78 <UOTGHS_Handler+0x2e8>)
		udd_ack_msof();
   84a0e:	6091      	str	r1, [r2, #8]
}
   84a10:	b003      	add	sp, #12
   84a12:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udc_sof_notify();
   84a16:	4718      	bx	r3
  __ASM volatile ("cpsid i" : : : "memory");
   84a18:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84a1a:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   84a1e:	4a57      	ldr	r2, [pc, #348]	; (84b7c <UOTGHS_Handler+0x2ec>)
   84a20:	7013      	strb	r3, [r2, #0]
}
   84a22:	b003      	add	sp, #12
   84a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					&& Is_udd_in_send_interrupt_enabled(ep)) {
   84a28:	f8d7 b000 	ldr.w	fp, [r7]
   84a2c:	f01b 0f01 	tst.w	fp, #1
   84a30:	d0cb      	beq.n	849ca <UOTGHS_Handler+0x13a>
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84a32:	2708      	movs	r7, #8
   84a34:	4a52      	ldr	r2, [pc, #328]	; (84b80 <UOTGHS_Handler+0x2f0>)
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   84a36:	eb03 0843 	add.w	r8, r3, r3, lsl #1
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84a3a:	f85e 2002 	ldr.w	r2, [lr, r2]
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   84a3e:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84a42:	f3c2 1202 	ubfx	r2, r2, #4, #3
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
   84a46:	f8d8 900c 	ldr.w	r9, [r8, #12]
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84a4a:	4097      	lsls	r7, r2
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
   84a4c:	f8d8 2008 	ldr.w	r2, [r8, #8]
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   84a50:	005e      	lsls	r6, r3, #1
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
   84a52:	4591      	cmp	r9, r2
   84a54:	d305      	bcc.n	84a62 <UOTGHS_Handler+0x1d2>
   84a56:	f898 2014 	ldrb.w	r2, [r8, #20]
   84a5a:	f012 0202 	ands.w	r2, r2, #2
   84a5e:	f000 83fe 	beq.w	8525e <UOTGHS_Handler+0x9ce>
		udd_ack_in_send(ep);
   84a62:	2401      	movs	r4, #1
   84a64:	4a47      	ldr	r2, [pc, #284]	; (84b84 <UOTGHS_Handler+0x2f4>)
		ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   84a66:	18f0      	adds	r0, r6, r3
   84a68:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
		udd_ack_in_send(ep);
   84a6c:	f84e 4002 	str.w	r4, [lr, r2]
		nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   84a70:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
   84a74:	1b12      	subs	r2, r2, r4
		nb_data = min(nb_remain, pkt_size);
   84a76:	42ba      	cmp	r2, r7
   84a78:	bf28      	it	cs
   84a7a:	463a      	movcs	r2, r7
   84a7c:	4616      	mov	r6, r2
		ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   84a7e:	6842      	ldr	r2, [r0, #4]
   84a80:	4422      	add	r2, r4
		ptr_job->buf_cnt += nb_data;
   84a82:	4434      	add	r4, r6
		ptr_job->buf_load = nb_data;
   84a84:	e9c0 4603 	strd	r4, r6, [r0, #12]
		for (i = 0; i < nb_data; i++) {
   84a88:	2e00      	cmp	r6, #0
   84a8a:	f000 8407 	beq.w	8529c <UOTGHS_Handler+0xa0c>
   84a8e:	483e      	ldr	r0, [pc, #248]	; (84b88 <UOTGHS_Handler+0x2f8>)
	uint8_t *ptr_dst = (uint8_t *) & udd_get_endpoint_fifo_access(ep, 8);
   84a90:	03c9      	lsls	r1, r1, #15
   84a92:	4408      	add	r0, r1
   84a94:	1994      	adds	r4, r2, r6
			*ptr_dst++ = *ptr_src++;
   84a96:	f812 1b01 	ldrb.w	r1, [r2], #1
		for (i = 0; i < nb_data; i++) {
   84a9a:	42a2      	cmp	r2, r4
			*ptr_dst++ = *ptr_src++;
   84a9c:	f800 1f01 	strb.w	r1, [r0, #1]!
		for (i = 0; i < nb_data; i++) {
   84aa0:	d1f9      	bne.n	84a96 <UOTGHS_Handler+0x206>
		udd_ack_fifocon(ep);
   84aa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   84aa6:	4a39      	ldr	r2, [pc, #228]	; (84b8c <UOTGHS_Handler+0x2fc>)
		if (nb_data < pkt_size) {
   84aa8:	42b7      	cmp	r7, r6
		udd_ack_fifocon(ep);
   84aaa:	f84e 1002 	str.w	r1, [lr, r2]
		if (nb_data < pkt_size) {
   84aae:	d9b8      	bls.n	84a22 <UOTGHS_Handler+0x192>
			ptr_job->b_shortpacket = false;
   84ab0:	2218      	movs	r2, #24
   84ab2:	fb02 5303 	mla	r3, r2, r3, r5
   84ab6:	7d1a      	ldrb	r2, [r3, #20]
   84ab8:	f36f 0241 	bfc	r2, #1, #1
   84abc:	751a      	strb	r2, [r3, #20]
   84abe:	e7b0      	b.n	84a22 <UOTGHS_Handler+0x192>
			udc_sof_notify();
   84ac0:	4b2d      	ldr	r3, [pc, #180]	; (84b78 <UOTGHS_Handler+0x2e8>)
   84ac2:	4798      	blx	r3
   84ac4:	e79c      	b.n	84a00 <UOTGHS_Handler+0x170>
	if (Is_udd_reset()) {
   84ac6:	4926      	ldr	r1, [pc, #152]	; (84b60 <UOTGHS_Handler+0x2d0>)
   84ac8:	684a      	ldr	r2, [r1, #4]
   84aca:	f012 0208 	ands.w	r2, r2, #8
   84ace:	f040 81c5 	bne.w	84e5c <UOTGHS_Handler+0x5cc>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   84ad2:	690b      	ldr	r3, [r1, #16]
   84ad4:	07df      	lsls	r7, r3, #31
   84ad6:	d51e      	bpl.n	84b16 <UOTGHS_Handler+0x286>
   84ad8:	684b      	ldr	r3, [r1, #4]
   84ada:	07de      	lsls	r6, r3, #31
   84adc:	d51b      	bpl.n	84b16 <UOTGHS_Handler+0x286>
		udd_enable_wake_up_interrupt();
   84ade:	2010      	movs	r0, #16
		udd_disable_suspend_interrupt();
   84ae0:	2401      	movs	r4, #1
		otg_unfreeze_clock();
   84ae2:	f8d1 3800 	ldr.w	r3, [r1, #2048]	; 0x800
   84ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   84aea:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		udd_disable_suspend_interrupt();
   84aee:	614c      	str	r4, [r1, #20]
		udd_enable_wake_up_interrupt();
   84af0:	6188      	str	r0, [r1, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   84af2:	f8d1 0800 	ldr.w	r0, [r1, #2048]	; 0x800
	if (!b_idle && udd_b_idle) {
   84af6:	4b26      	ldr	r3, [pc, #152]	; (84b90 <UOTGHS_Handler+0x300>)
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   84af8:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
   84afc:	f8c1 0800 	str.w	r0, [r1, #2048]	; 0x800
	if (!b_idle && udd_b_idle) {
   84b00:	7819      	ldrb	r1, [r3, #0]
   84b02:	2900      	cmp	r1, #0
   84b04:	f040 8342 	bne.w	8518c <UOTGHS_Handler+0x8fc>
	udd_b_idle = b_idle;
   84b08:	2100      	movs	r1, #0
		UDC_SUSPEND_EVENT();
   84b0a:	4a22      	ldr	r2, [pc, #136]	; (84b94 <UOTGHS_Handler+0x304>)
	udd_b_idle = b_idle;
   84b0c:	7019      	strb	r1, [r3, #0]
}
   84b0e:	b003      	add	sp, #12
   84b10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		UDC_RESUME_EVENT();
   84b14:	4710      	bx	r2
	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   84b16:	4b12      	ldr	r3, [pc, #72]	; (84b60 <UOTGHS_Handler+0x2d0>)
   84b18:	691a      	ldr	r2, [r3, #16]
   84b1a:	06d5      	lsls	r5, r2, #27
   84b1c:	d53e      	bpl.n	84b9c <UOTGHS_Handler+0x30c>
   84b1e:	685a      	ldr	r2, [r3, #4]
   84b20:	06d4      	lsls	r4, r2, #27
   84b22:	d53b      	bpl.n	84b9c <UOTGHS_Handler+0x30c>
		otg_unfreeze_clock();
   84b24:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84b28:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   84b2c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		while (!Is_otg_clock_usable()) {
   84b30:	e002      	b.n	84b38 <UOTGHS_Handler+0x2a8>
			if (Is_udd_suspend()) {
   84b32:	685a      	ldr	r2, [r3, #4]
   84b34:	07d0      	lsls	r0, r2, #31
   84b36:	d403      	bmi.n	84b40 <UOTGHS_Handler+0x2b0>
		while (!Is_otg_clock_usable()) {
   84b38:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   84b3c:	0451      	lsls	r1, r2, #17
   84b3e:	d5f8      	bpl.n	84b32 <UOTGHS_Handler+0x2a2>
		udd_disable_wake_up_interrupt();
   84b40:	2010      	movs	r0, #16
		udd_enable_suspend_interrupt();
   84b42:	2101      	movs	r1, #1
		udd_disable_wake_up_interrupt();
   84b44:	4a06      	ldr	r2, [pc, #24]	; (84b60 <UOTGHS_Handler+0x2d0>)
	if (b_idle && !udd_b_idle) {
   84b46:	4b12      	ldr	r3, [pc, #72]	; (84b90 <UOTGHS_Handler+0x300>)
		udd_disable_wake_up_interrupt();
   84b48:	6150      	str	r0, [r2, #20]
		udd_enable_suspend_interrupt();
   84b4a:	6191      	str	r1, [r2, #24]
	if (b_idle && !udd_b_idle) {
   84b4c:	781a      	ldrb	r2, [r3, #0]
   84b4e:	2a00      	cmp	r2, #0
   84b50:	f000 82d7 	beq.w	85102 <UOTGHS_Handler+0x872>
	udd_b_idle = b_idle;
   84b54:	2101      	movs	r1, #1
		UDC_RESUME_EVENT();
   84b56:	4a10      	ldr	r2, [pc, #64]	; (84b98 <UOTGHS_Handler+0x308>)
   84b58:	e7d8      	b.n	84b0c <UOTGHS_Handler+0x27c>
   84b5a:	bf00      	nop
   84b5c:	00083b9d 	.word	0x00083b9d
   84b60:	400ac000 	.word	0x400ac000
   84b64:	200721c8 	.word	0x200721c8
   84b68:	400ac1c4 	.word	0x400ac1c4
   84b6c:	400ac134 	.word	0x400ac134
   84b70:	000847d5 	.word	0x000847d5
   84b74:	00081885 	.word	0x00081885
   84b78:	000811cd 	.word	0x000811cd
   84b7c:	20070b04 	.word	0x20070b04
   84b80:	400ac100 	.word	0x400ac100
   84b84:	400ac160 	.word	0x400ac160
   84b88:	2017ffff 	.word	0x2017ffff
   84b8c:	400ac220 	.word	0x400ac220
   84b90:	200721bd 	.word	0x200721bd
   84b94:	00081875 	.word	0x00081875
   84b98:	0008187d 	.word	0x0008187d
	if (Is_otg_vbus_transition()) {
   84b9c:	4ba0      	ldr	r3, [pc, #640]	; (84e20 <UOTGHS_Handler+0x590>)
   84b9e:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   84ba2:	0792      	lsls	r2, r2, #30
   84ba4:	f57f af3d 	bpl.w	84a22 <UOTGHS_Handler+0x192>
		otg_ack_vbus_transition();
   84ba8:	2102      	movs	r1, #2
		otg_unfreeze_clock();
   84baa:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84bae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   84bb2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   84bb6:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
		otg_freeze_clock();
   84bba:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84bbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   84bc2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		if (Is_otg_vbus_high()) {
   84bc6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   84bca:	051b      	lsls	r3, r3, #20
   84bcc:	f140 81f5 	bpl.w	84fba <UOTGHS_Handler+0x72a>
			udd_attach();
   84bd0:	4b94      	ldr	r3, [pc, #592]	; (84e24 <UOTGHS_Handler+0x594>)
}
   84bd2:	b003      	add	sp, #12
   84bd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			udd_attach();
   84bd8:	4718      	bx	r3
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   84bda:	4d93      	ldr	r5, [pc, #588]	; (84e28 <UOTGHS_Handler+0x598>)
   84bdc:	782b      	ldrb	r3, [r5, #0]
   84bde:	b1eb      	cbz	r3, 84c1c <UOTGHS_Handler+0x38c>
	if (udd_g_ctrlreq.callback) {
   84be0:	4c92      	ldr	r4, [pc, #584]	; (84e2c <UOTGHS_Handler+0x59c>)
   84be2:	6923      	ldr	r3, [r4, #16]
   84be4:	b103      	cbz	r3, 84be8 <UOTGHS_Handler+0x358>
		udd_g_ctrlreq.callback();
   84be6:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84be8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84bec:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84bee:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84bf2:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   84bf4:	2201      	movs	r2, #1
   84bf6:	4b8e      	ldr	r3, [pc, #568]	; (84e30 <UOTGHS_Handler+0x5a0>)
   84bf8:	7018      	strb	r0, [r3, #0]
   84bfa:	4889      	ldr	r0, [pc, #548]	; (84e20 <UOTGHS_Handler+0x590>)
   84bfc:	f8c0 2220 	str.w	r2, [r0, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   84c00:	b919      	cbnz	r1, 84c0a <UOTGHS_Handler+0x37a>
		cpu_irq_enable();
   84c02:	701a      	strb	r2, [r3, #0]
   84c04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84c08:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   84c0a:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   84c0c:	2102      	movs	r1, #2
   84c0e:	4a84      	ldr	r2, [pc, #528]	; (84e20 <UOTGHS_Handler+0x590>)
   84c10:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
	udd_g_ctrlreq.over_under_run = NULL;
   84c14:	e9c4 3304 	strd	r3, r3, [r4, #16]
	udd_g_ctrlreq.payload_size = 0;
   84c18:	81a3      	strh	r3, [r4, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84c1a:	702b      	strb	r3, [r5, #0]
	if (8 != udd_byte_count(0)) {
   84c1c:	4a80      	ldr	r2, [pc, #512]	; (84e20 <UOTGHS_Handler+0x590>)
   84c1e:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   84c22:	f3c3 530a 	ubfx	r3, r3, #20, #11
   84c26:	2b08      	cmp	r3, #8
   84c28:	f000 80c1 	beq.w	84dae <UOTGHS_Handler+0x51e>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84c2c:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   84c2e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
		udd_ack_setup_received(0);
   84c32:	2304      	movs	r3, #4
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84c34:	7028      	strb	r0, [r5, #0]
	udd_enable_stall_handshake(0);
   84c36:	f8c2 11f0 	str.w	r1, [r2, #496]	; 0x1f0
		udd_ack_setup_received(0);
   84c3a:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
		return; // Error data number doesn't correspond to SETUP packet
   84c3e:	e6f0      	b.n	84a22 <UOTGHS_Handler+0x192>
		udd_ack_nak_in(0);
   84c40:	2310      	movs	r3, #16
   84c42:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	if (Is_udd_out_received(0))
   84c46:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   84c4a:	f013 0302 	ands.w	r3, r3, #2
   84c4e:	f47f aee8 	bne.w	84a22 <UOTGHS_Handler+0x192>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   84c52:	4875      	ldr	r0, [pc, #468]	; (84e28 <UOTGHS_Handler+0x598>)
   84c54:	7801      	ldrb	r1, [r0, #0]
   84c56:	2901      	cmp	r1, #1
   84c58:	f000 82ab 	beq.w	851b2 <UOTGHS_Handler+0x922>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   84c5c:	2904      	cmp	r1, #4
   84c5e:	f47f aee0 	bne.w	84a22 <UOTGHS_Handler+0x192>
		udd_enable_stall_handshake(0);
   84c62:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   84c66:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
   84c6a:	e6da      	b.n	84a22 <UOTGHS_Handler+0x192>
	udd_ack_out_received(ep);
   84c6c:	f04f 0b02 	mov.w	fp, #2
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84c70:	f04f 0808 	mov.w	r8, #8
   84c74:	4e6f      	ldr	r6, [pc, #444]	; (84e34 <UOTGHS_Handler+0x5a4>)
	udd_ack_out_received(ep);
   84c76:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 84e38 <UOTGHS_Handler+0x5a8>
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84c7a:	f85e 6006 	ldr.w	r6, [lr, r6]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   84c7e:	eb03 0743 	add.w	r7, r3, r3, lsl #1
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84c82:	f3c6 1602 	ubfx	r6, r6, #4, #3
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   84c86:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84c8a:	fa08 f806 	lsl.w	r8, r8, r6
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   84c8e:	e9d7 6902 	ldrd	r6, r9, [r7, #8]
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
   84c92:	687f      	ldr	r7, [r7, #4]
	udd_ack_out_received(ep);
   84c94:	f84e b00a 	str.w	fp, [lr, sl]
	nb_data = udd_byte_count(ep);
   84c98:	6812      	ldr	r2, [r2, #0]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   84c9a:	eba6 0b09 	sub.w	fp, r6, r9
	nb_data = udd_byte_count(ep);
   84c9e:	f3c2 5a0a 	ubfx	sl, r2, #20, #11
	if (nb_data < pkt_size) {
   84ca2:	45d0      	cmp	r8, sl
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   84ca4:	ea4f 0643 	mov.w	r6, r3, lsl #1
	if (nb_data < pkt_size) {
   84ca8:	f200 82bb 	bhi.w	85222 <UOTGHS_Handler+0x992>
		if (nb_data >= nb_remain) {
   84cac:	45d3      	cmp	fp, sl
   84cae:	f200 82fb 	bhi.w	852a8 <UOTGHS_Handler+0xa18>
	bool b_full = false, b_short = false;
   84cb2:	f04f 0800 	mov.w	r8, #0
		ptr_job->buf_cnt += nb_data;
   84cb6:	f04f 0a18 	mov.w	sl, #24
   84cba:	fb0a 5a03 	mla	sl, sl, r3, r5
   84cbe:	f8da 200c 	ldr.w	r2, [sl, #12]
		ptr_job->buf_load = nb_data;
   84cc2:	f8ca b010 	str.w	fp, [sl, #16]
		ptr_job->buf_cnt += nb_data;
   84cc6:	445a      	add	r2, fp
   84cc8:	f8ca 200c 	str.w	r2, [sl, #12]
		for (i = 0; i < nb_data; i++) {
   84ccc:	f1bb 0f00 	cmp.w	fp, #0
   84cd0:	f000 82be 	beq.w	85250 <UOTGHS_Handler+0x9c0>
   84cd4:	2201      	movs	r2, #1
   84cd6:	46da      	mov	sl, fp
   84cd8:	9201      	str	r2, [sp, #4]
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(ep, 8);
   84cda:	03c9      	lsls	r1, r1, #15
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
   84cdc:	444f      	add	r7, r9
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(ep, 8);
   84cde:	f101 5900 	add.w	r9, r1, #536870912	; 0x20000000
   84ce2:	f509 19c0 	add.w	r9, r9, #1572864	; 0x180000
   84ce6:	1e79      	subs	r1, r7, #1
			*ptr_dst++ = *ptr_src++;
   84ce8:	460a      	mov	r2, r1
		for (i = 0; i < nb_data; i++) {
   84cea:	3202      	adds	r2, #2
			*ptr_dst++ = *ptr_src++;
   84cec:	f819 bb01 	ldrb.w	fp, [r9], #1
		for (i = 0; i < nb_data; i++) {
   84cf0:	1bd2      	subs	r2, r2, r7
   84cf2:	4552      	cmp	r2, sl
			*ptr_dst++ = *ptr_src++;
   84cf4:	f801 bf01 	strb.w	fp, [r1, #1]!
		for (i = 0; i < nb_data; i++) {
   84cf8:	d3f6      	bcc.n	84ce8 <UOTGHS_Handler+0x458>
	udd_ack_fifocon(ep);
   84cfa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   84cfe:	4a4f      	ldr	r2, [pc, #316]	; (84e3c <UOTGHS_Handler+0x5ac>)
   84d00:	f84e 1002 	str.w	r1, [lr, r2]
   84d04:	4496      	add	lr, r2
	if (b_full || b_short) {
   84d06:	9a01      	ldr	r2, [sp, #4]
   84d08:	b91a      	cbnz	r2, 84d12 <UOTGHS_Handler+0x482>
   84d0a:	f1b8 0f00 	cmp.w	r8, #0
   84d0e:	f43f ae88 	beq.w	84a22 <UOTGHS_Handler+0x192>
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   84d12:	4433      	add	r3, r6
   84d14:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		udd_disable_out_received_interrupt(ep);
   84d18:	2302      	movs	r3, #2
		udd_ep_finish_job(ptr_job, false, ep);
   84d1a:	4602      	mov	r2, r0
   84d1c:	2100      	movs	r1, #0
   84d1e:	4620      	mov	r0, r4
		udd_disable_out_received_interrupt(ep);
   84d20:	f8ce 3000 	str.w	r3, [lr]
		udd_disable_endpoint_interrupt(ep);
   84d24:	4b3e      	ldr	r3, [pc, #248]	; (84e20 <UOTGHS_Handler+0x590>)
   84d26:	f8c3 c014 	str.w	ip, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   84d2a:	68eb      	ldr	r3, [r5, #12]
   84d2c:	60ab      	str	r3, [r5, #8]
		udd_ep_finish_job(ptr_job, false, ep);
   84d2e:	4b44      	ldr	r3, [pc, #272]	; (84e40 <UOTGHS_Handler+0x5b0>)
}
   84d30:	b003      	add	sp, #12
   84d32:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udd_ep_finish_job(ptr_job, false, ep);
   84d36:	4718      	bx	r3
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   84d38:	4d3b      	ldr	r5, [pc, #236]	; (84e28 <UOTGHS_Handler+0x598>)
   84d3a:	782b      	ldrb	r3, [r5, #0]
   84d3c:	2b01      	cmp	r3, #1
   84d3e:	f000 8105 	beq.w	84f4c <UOTGHS_Handler+0x6bc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   84d42:	2b02      	cmp	r3, #2
   84d44:	f000 8154 	beq.w	84ff0 <UOTGHS_Handler+0x760>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   84d48:	2b04      	cmp	r3, #4
   84d4a:	f000 8151 	beq.w	84ff0 <UOTGHS_Handler+0x760>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84d4e:	2105      	movs	r1, #5
	udd_enable_stall_handshake(0);
   84d50:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   84d54:	4c35      	ldr	r4, [pc, #212]	; (84e2c <UOTGHS_Handler+0x59c>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84d56:	7029      	strb	r1, [r5, #0]
	udd_enable_stall_handshake(0);
   84d58:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84d5c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84d60:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84d62:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84d66:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   84d68:	2201      	movs	r2, #1
   84d6a:	4b31      	ldr	r3, [pc, #196]	; (84e30 <UOTGHS_Handler+0x5a0>)
   84d6c:	7018      	strb	r0, [r3, #0]
   84d6e:	482c      	ldr	r0, [pc, #176]	; (84e20 <UOTGHS_Handler+0x590>)
   84d70:	f8c0 2220 	str.w	r2, [r0, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   84d74:	b919      	cbnz	r1, 84d7e <UOTGHS_Handler+0x4ee>
		cpu_irq_enable();
   84d76:	701a      	strb	r2, [r3, #0]
   84d78:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84d7c:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   84d7e:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   84d80:	2102      	movs	r1, #2
   84d82:	4a27      	ldr	r2, [pc, #156]	; (84e20 <UOTGHS_Handler+0x590>)
   84d84:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
	udd_g_ctrlreq.over_under_run = NULL;
   84d88:	e9c4 3304 	strd	r3, r3, [r4, #16]
	udd_g_ctrlreq.payload_size = 0;
   84d8c:	81a3      	strh	r3, [r4, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84d8e:	702b      	strb	r3, [r5, #0]
   84d90:	e647      	b.n	84a22 <UOTGHS_Handler+0x192>
		udd_ack_nak_out(0);
   84d92:	2308      	movs	r3, #8
   84d94:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	if (Is_udd_in_send(0))
   84d98:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   84d9c:	07de      	lsls	r6, r3, #31
   84d9e:	f53f ae40 	bmi.w	84a22 <UOTGHS_Handler+0x192>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   84da2:	4b21      	ldr	r3, [pc, #132]	; (84e28 <UOTGHS_Handler+0x598>)
   84da4:	781b      	ldrb	r3, [r3, #0]
   84da6:	2b03      	cmp	r3, #3
   84da8:	f47f ae3b 	bne.w	84a22 <UOTGHS_Handler+0x192>
   84dac:	e759      	b.n	84c62 <UOTGHS_Handler+0x3d2>
   84dae:	4a25      	ldr	r2, [pc, #148]	; (84e44 <UOTGHS_Handler+0x5b4>)
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
   84db0:	4b25      	ldr	r3, [pc, #148]	; (84e48 <UOTGHS_Handler+0x5b8>)
	for (i = 0; i < 8; i++) {
   84db2:	4826      	ldr	r0, [pc, #152]	; (84e4c <UOTGHS_Handler+0x5bc>)
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   84db4:	4619      	mov	r1, r3
   84db6:	3301      	adds	r3, #1
   84db8:	7809      	ldrb	r1, [r1, #0]
	for (i = 0; i < 8; i++) {
   84dba:	4283      	cmp	r3, r0
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   84dbc:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   84dc0:	d1f8      	bne.n	84db4 <UOTGHS_Handler+0x524>
	if (udc_process_setup() == false) {
   84dc2:	4b23      	ldr	r3, [pc, #140]	; (84e50 <UOTGHS_Handler+0x5c0>)
   84dc4:	4798      	blx	r3
   84dc6:	2800      	cmp	r0, #0
   84dc8:	f000 8119 	beq.w	84ffe <UOTGHS_Handler+0x76e>
	udd_ack_setup_received(0);
   84dcc:	2104      	movs	r1, #4
   84dce:	4b14      	ldr	r3, [pc, #80]	; (84e20 <UOTGHS_Handler+0x590>)
	if (Udd_setup_is_in()) {
   84dd0:	4a16      	ldr	r2, [pc, #88]	; (84e2c <UOTGHS_Handler+0x59c>)
	udd_ack_setup_received(0);
   84dd2:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	if (Udd_setup_is_in()) {
   84dd6:	f992 1000 	ldrsb.w	r1, [r2]
   84dda:	2900      	cmp	r1, #0
   84ddc:	f2c0 81a4 	blt.w	85128 <UOTGHS_Handler+0x898>
		if (0 == udd_g_ctrlreq.req.wLength) {
   84de0:	88d2      	ldrh	r2, [r2, #6]
   84de2:	2a00      	cmp	r2, #0
   84de4:	f000 81ff 	beq.w	851e6 <UOTGHS_Handler+0x956>
		udd_ctrl_prev_payload_buf_cnt = 0;
   84de8:	2200      	movs	r2, #0
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   84dea:	2401      	movs	r4, #1
		udd_ack_nak_in(0);
   84dec:	2110      	movs	r1, #16
		udd_ctrl_prev_payload_buf_cnt = 0;
   84dee:	4819      	ldr	r0, [pc, #100]	; (84e54 <UOTGHS_Handler+0x5c4>)
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   84df0:	702c      	strb	r4, [r5, #0]
		udd_ctrl_prev_payload_buf_cnt = 0;
   84df2:	8002      	strh	r2, [r0, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84df4:	4818      	ldr	r0, [pc, #96]	; (84e58 <UOTGHS_Handler+0x5c8>)
   84df6:	8002      	strh	r2, [r0, #0]
		udd_ack_nak_in(0);
   84df8:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84dfc:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84e00:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84e02:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84e06:	480a      	ldr	r0, [pc, #40]	; (84e30 <UOTGHS_Handler+0x5a0>)
   84e08:	7002      	strb	r2, [r0, #0]
		udd_enable_nak_in_interrupt(0);
   84e0a:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   84e0e:	2d00      	cmp	r5, #0
   84e10:	f47f ae07 	bne.w	84a22 <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   84e14:	7004      	strb	r4, [r0, #0]
   84e16:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84e1a:	b662      	cpsie	i
   84e1c:	e601      	b.n	84a22 <UOTGHS_Handler+0x192>
   84e1e:	bf00      	nop
   84e20:	400ac000 	.word	0x400ac000
   84e24:	00084101 	.word	0x00084101
   84e28:	200721c4 	.word	0x200721c4
   84e2c:	20072288 	.word	0x20072288
   84e30:	20070b04 	.word	0x20070b04
   84e34:	400ac100 	.word	0x400ac100
   84e38:	400ac160 	.word	0x400ac160
   84e3c:	400ac220 	.word	0x400ac220
   84e40:	00083c19 	.word	0x00083c19
   84e44:	20072287 	.word	0x20072287
   84e48:	20180000 	.word	0x20180000
   84e4c:	20180008 	.word	0x20180008
   84e50:	00081209 	.word	0x00081209
   84e54:	200721c2 	.word	0x200721c2
   84e58:	200721c0 	.word	0x200721c0
		udd_ack_reset();
   84e5c:	2401      	movs	r4, #1
   84e5e:	4fb8      	ldr	r7, [pc, #736]	; (85140 <UOTGHS_Handler+0x8b0>)
   84e60:	608b      	str	r3, [r1, #8]
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   84e62:	1e63      	subs	r3, r4, #1
	if (ptr_job->busy == false) {
   84e64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   84e68:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   84e6c:	7d19      	ldrb	r1, [r3, #20]
   84e6e:	b2e2      	uxtb	r2, r4
   84e70:	07c8      	lsls	r0, r1, #31
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84e72:	f104 0401 	add.w	r4, r4, #1
	if (ptr_job->busy == false) {
   84e76:	d50c      	bpl.n	84e92 <UOTGHS_Handler+0x602>
	ptr_job->busy = false;
   84e78:	f36f 0100 	bfc	r1, #0, #1
   84e7c:	7519      	strb	r1, [r3, #20]
	if (NULL == ptr_job->call_trans) {
   84e7e:	6833      	ldr	r3, [r6, #0]
   84e80:	b13b      	cbz	r3, 84e92 <UOTGHS_Handler+0x602>
	if (Is_udd_endpoint_in(ep_num)) {
   84e82:	6839      	ldr	r1, [r7, #0]
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   84e84:	2001      	movs	r0, #1
	if (Is_udd_endpoint_in(ep_num)) {
   84e86:	05c9      	lsls	r1, r1, #23
		ep_num |= USB_EP_DIR_IN;
   84e88:	bf48      	it	mi
   84e8a:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   84e8e:	68b1      	ldr	r1, [r6, #8]
   84e90:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84e92:	2c09      	cmp	r4, #9
   84e94:	f106 0618 	add.w	r6, r6, #24
   84e98:	f107 0704 	add.w	r7, r7, #4
   84e9c:	d1e1      	bne.n	84e62 <UOTGHS_Handler+0x5d2>
		udc_reset();
   84e9e:	4ba9      	ldr	r3, [pc, #676]	; (85144 <UOTGHS_Handler+0x8b4>)
   84ea0:	4798      	blx	r3
	udd_configure_address(0);
   84ea2:	4ba9      	ldr	r3, [pc, #676]	; (85148 <UOTGHS_Handler+0x8b8>)
   84ea4:	681a      	ldr	r2, [r3, #0]
   84ea6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84eaa:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   84eac:	681a      	ldr	r2, [r3, #0]
   84eae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84eb2:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   84eb4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   84eb8:	f422 52cb 	bic.w	r2, r2, #6496	; 0x1960
   84ebc:	f022 021c 	bic.w	r2, r2, #28
   84ec0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   84ec4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_allocate_memory(0);
   84ec8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   84ecc:	f042 0202 	orr.w	r2, r2, #2
   84ed0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   84ed4:	69da      	ldr	r2, [r3, #28]
   84ed6:	f042 0201 	orr.w	r2, r2, #1
   84eda:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84edc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84ee0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84ee2:	f3bf 8f5f 	dmb	sy
	udd_enable_setup_received_interrupt(0);
   84ee6:	2004      	movs	r0, #4
	cpu_irq_disable();
   84ee8:	2500      	movs	r5, #0
   84eea:	4a98      	ldr	r2, [pc, #608]	; (8514c <UOTGHS_Handler+0x8bc>)
	udd_enable_out_received_interrupt(0);
   84eec:	2402      	movs	r4, #2
   84eee:	7015      	strb	r5, [r2, #0]
	udd_enable_setup_received_interrupt(0);
   84ef0:	f8c3 01f0 	str.w	r0, [r3, #496]	; 0x1f0
	udd_enable_endpoint_interrupt(0);
   84ef4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	udd_enable_out_received_interrupt(0);
   84ef8:	f8c3 41f0 	str.w	r4, [r3, #496]	; 0x1f0
	udd_enable_endpoint_interrupt(0);
   84efc:	6198      	str	r0, [r3, #24]
	if (cpu_irq_is_enabled_flags(flags))
   84efe:	b921      	cbnz	r1, 84f0a <UOTGHS_Handler+0x67a>
		cpu_irq_enable();
   84f00:	2301      	movs	r3, #1
   84f02:	7013      	strb	r3, [r2, #0]
   84f04:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84f08:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84f0a:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84f0e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84f10:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84f14:	2400      	movs	r4, #0
	udd_disable_in_send_interrupt(0);
   84f16:	2301      	movs	r3, #1
   84f18:	488b      	ldr	r0, [pc, #556]	; (85148 <UOTGHS_Handler+0x8b8>)
   84f1a:	7014      	strb	r4, [r2, #0]
   84f1c:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   84f20:	b919      	cbnz	r1, 84f2a <UOTGHS_Handler+0x69a>
		cpu_irq_enable();
   84f22:	7013      	strb	r3, [r2, #0]
   84f24:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84f28:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   84f2a:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   84f2c:	2402      	movs	r4, #2
	udd_g_ctrlreq.callback = NULL;
   84f2e:	4a88      	ldr	r2, [pc, #544]	; (85150 <UOTGHS_Handler+0x8c0>)
	udd_ack_out_received(0);
   84f30:	4885      	ldr	r0, [pc, #532]	; (85148 <UOTGHS_Handler+0x8b8>)
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84f32:	4988      	ldr	r1, [pc, #544]	; (85154 <UOTGHS_Handler+0x8c4>)
	udd_g_ctrlreq.callback = NULL;
   84f34:	6113      	str	r3, [r2, #16]
	udd_ack_out_received(0);
   84f36:	f8c0 4160 	str.w	r4, [r0, #352]	; 0x160
	udd_g_ctrlreq.over_under_run = NULL;
   84f3a:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   84f3c:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84f3e:	700b      	strb	r3, [r1, #0]
		goto udd_interrupt_end;
   84f40:	e56f      	b.n	84a22 <UOTGHS_Handler+0x192>
		udd_ctrl_in_sent();
   84f42:	4b85      	ldr	r3, [pc, #532]	; (85158 <UOTGHS_Handler+0x8c8>)
}
   84f44:	b003      	add	sp, #12
   84f46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udd_ctrl_in_sent();
   84f4a:	4718      	bx	r3
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   84f4c:	4f83      	ldr	r7, [pc, #524]	; (8515c <UOTGHS_Handler+0x8cc>)
	nb_data = udd_byte_count(0);
   84f4e:	f8d2 6130 	ldr.w	r6, [r2, #304]	; 0x130
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   84f52:	4c7f      	ldr	r4, [pc, #508]	; (85150 <UOTGHS_Handler+0x8c0>)
   84f54:	883b      	ldrh	r3, [r7, #0]
   84f56:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
	nb_data = udd_byte_count(0);
   84f5a:	f3c6 560a 	ubfx	r6, r6, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   84f5e:	199a      	adds	r2, r3, r6
   84f60:	4594      	cmp	ip, r2
	udd_ctrl_payload_buf_cnt += nb_data;
   84f62:	bfac      	ite	ge
   84f64:	fa1f fc82 	uxthge.w	ip, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   84f68:	ebac 0603 	sublt.w	r6, ip, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84f6c:	68a2      	ldr	r2, [r4, #8]
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   84f6e:	bfb8      	it	lt
   84f70:	b2b6      	uxthlt	r6, r6
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   84f72:	441a      	add	r2, r3
	for (i = 0; i < nb_data; i++) {
   84f74:	2e00      	cmp	r6, #0
   84f76:	f000 8151 	beq.w	8521c <UOTGHS_Handler+0x98c>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   84f7a:	4b79      	ldr	r3, [pc, #484]	; (85160 <UOTGHS_Handler+0x8d0>)
		*ptr_dest++ = *ptr_src++;
   84f7c:	4618      	mov	r0, r3
   84f7e:	3301      	adds	r3, #1
   84f80:	7800      	ldrb	r0, [r0, #0]
	for (i = 0; i < nb_data; i++) {
   84f82:	b2d9      	uxtb	r1, r3
   84f84:	42b1      	cmp	r1, r6
		*ptr_dest++ = *ptr_src++;
   84f86:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < nb_data; i++) {
   84f8a:	d3f7      	bcc.n	84f7c <UOTGHS_Handler+0x6ec>
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   84f8c:	2e40      	cmp	r6, #64	; 0x40
	udd_ctrl_payload_buf_cnt += nb_data;
   84f8e:	f8a7 c000 	strh.w	ip, [r7]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   84f92:	d05f      	beq.n	85054 <UOTGHS_Handler+0x7c4>
		if (NULL != udd_g_ctrlreq.over_under_run) {
   84f94:	6963      	ldr	r3, [r4, #20]
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   84f96:	f8a4 c00c 	strh.w	ip, [r4, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   84f9a:	2b00      	cmp	r3, #0
   84f9c:	d03a      	beq.n	85014 <UOTGHS_Handler+0x784>
			if (!udd_g_ctrlreq.over_under_run()) {
   84f9e:	4798      	blx	r3
   84fa0:	2800      	cmp	r0, #0
   84fa2:	d137      	bne.n	85014 <UOTGHS_Handler+0x784>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84fa4:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   84fa6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
			udd_ack_out_received(0);
   84faa:	2202      	movs	r2, #2
	udd_enable_stall_handshake(0);
   84fac:	4b66      	ldr	r3, [pc, #408]	; (85148 <UOTGHS_Handler+0x8b8>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84fae:	7028      	strb	r0, [r5, #0]
	udd_enable_stall_handshake(0);
   84fb0:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
			udd_ack_out_received(0);
   84fb4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
			return;
   84fb8:	e533      	b.n	84a22 <UOTGHS_Handler+0x192>
			udd_detach();
   84fba:	4b6a      	ldr	r3, [pc, #424]	; (85164 <UOTGHS_Handler+0x8d4>)
}
   84fbc:	b003      	add	sp, #12
   84fbe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			udd_detach();
   84fc2:	4718      	bx	r3
			if (udd_endpoint_dma_get_status(ep)
   84fc4:	4a68      	ldr	r2, [pc, #416]	; (85168 <UOTGHS_Handler+0x8d8>)
   84fc6:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   84fca:	68ca      	ldr	r2, [r1, #12]
   84fcc:	07d4      	lsls	r4, r2, #31
   84fce:	f53f ad28 	bmi.w	84a22 <UOTGHS_Handler+0x192>
			udd_disable_endpoint_dma_interrupt(ep);
   84fd2:	f8c8 c014 	str.w	ip, [r8, #20]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   84fd6:	68ca      	ldr	r2, [r1, #12]
			if (nb_remaining) {
   84fd8:	0c12      	lsrs	r2, r2, #16
   84fda:	d007      	beq.n	84fec <UOTGHS_Handler+0x75c>
				ptr_job->buf_cnt -= nb_remaining;
   84fdc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   84fe0:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   84fe4:	68eb      	ldr	r3, [r5, #12]
   84fe6:	1a9a      	subs	r2, r3, r2
				ptr_job->buf_size = ptr_job->buf_cnt;
   84fe8:	e9c5 2202 	strd	r2, r2, [r5, #8]
			udd_ep_trans_done(ep);
   84fec:	4b5f      	ldr	r3, [pc, #380]	; (8516c <UOTGHS_Handler+0x8dc>)
   84fee:	e4fc      	b.n	849ea <UOTGHS_Handler+0x15a>
	if (udd_g_ctrlreq.callback) {
   84ff0:	4c57      	ldr	r4, [pc, #348]	; (85150 <UOTGHS_Handler+0x8c0>)
   84ff2:	6923      	ldr	r3, [r4, #16]
   84ff4:	2b00      	cmp	r3, #0
   84ff6:	f43f aeb1 	beq.w	84d5c <UOTGHS_Handler+0x4cc>
		udd_g_ctrlreq.callback();
   84ffa:	4798      	blx	r3
   84ffc:	e6ae      	b.n	84d5c <UOTGHS_Handler+0x4cc>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84ffe:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   85000:	f44f 2100 	mov.w	r1, #524288	; 0x80000
		udd_ack_setup_received(0);
   85004:	2204      	movs	r2, #4
	udd_enable_stall_handshake(0);
   85006:	4b50      	ldr	r3, [pc, #320]	; (85148 <UOTGHS_Handler+0x8b8>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   85008:	7028      	strb	r0, [r5, #0]
	udd_enable_stall_handshake(0);
   8500a:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
		udd_ack_setup_received(0);
   8500e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
		return;
   85012:	e506      	b.n	84a22 <UOTGHS_Handler+0x192>
		udd_ack_out_received(0);
   85014:	2102      	movs	r1, #2
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   85016:	2203      	movs	r2, #3
		udd_ack_out_received(0);
   85018:	4b4b      	ldr	r3, [pc, #300]	; (85148 <UOTGHS_Handler+0x8b8>)
   8501a:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   8501e:	702a      	strb	r2, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85020:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85024:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85026:	f3bf 8f5f 	dmb	sy
	udd_ack_in_send(0);
   8502a:	2201      	movs	r2, #1
	udd_ack_nak_out(0);
   8502c:	2108      	movs	r1, #8
	cpu_irq_disable();
   8502e:	2500      	movs	r5, #0
   85030:	4846      	ldr	r0, [pc, #280]	; (8514c <UOTGHS_Handler+0x8bc>)
   85032:	7005      	strb	r5, [r0, #0]
	udd_ack_in_send(0);
   85034:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	udd_enable_in_send_interrupt(0);
   85038:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	udd_ack_nak_out(0);
   8503c:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	udd_enable_nak_out_interrupt(0);
   85040:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   85044:	2c00      	cmp	r4, #0
   85046:	f47f acec 	bne.w	84a22 <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   8504a:	7002      	strb	r2, [r0, #0]
   8504c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85050:	b662      	cpsie	i
   85052:	e4e6      	b.n	84a22 <UOTGHS_Handler+0x192>
					(udd_ctrl_prev_payload_buf_cnt +
   85054:	4e46      	ldr	r6, [pc, #280]	; (85170 <UOTGHS_Handler+0x8e0>)
			|| (udd_g_ctrlreq.req.wLength <=
   85056:	88e2      	ldrh	r2, [r4, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   85058:	8833      	ldrh	r3, [r6, #0]
   8505a:	4463      	add	r3, ip
			|| (udd_g_ctrlreq.req.wLength <=
   8505c:	429a      	cmp	r2, r3
   8505e:	dd99      	ble.n	84f94 <UOTGHS_Handler+0x704>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   85060:	89a3      	ldrh	r3, [r4, #12]
   85062:	4563      	cmp	r3, ip
   85064:	f000 80e5 	beq.w	85232 <UOTGHS_Handler+0x9a2>
	udd_ack_out_received(0);
   85068:	2102      	movs	r1, #2
	udd_ack_nak_in(0);
   8506a:	2210      	movs	r2, #16
	udd_ack_out_received(0);
   8506c:	4b36      	ldr	r3, [pc, #216]	; (85148 <UOTGHS_Handler+0x8b8>)
   8506e:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	udd_ack_nak_in(0);
   85072:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85076:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   8507a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8507c:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85080:	2400      	movs	r4, #0
   85082:	4932      	ldr	r1, [pc, #200]	; (8514c <UOTGHS_Handler+0x8bc>)
   85084:	700c      	strb	r4, [r1, #0]
	udd_enable_nak_in_interrupt(0);
   85086:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   8508a:	2800      	cmp	r0, #0
   8508c:	f47f acc9 	bne.w	84a22 <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   85090:	2301      	movs	r3, #1
   85092:	700b      	strb	r3, [r1, #0]
   85094:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85098:	b662      	cpsie	i
   8509a:	e4c2      	b.n	84a22 <UOTGHS_Handler+0x192>
				udd_disable_in_send_interrupt(ep);
   8509c:	2501      	movs	r5, #1
				udd_ack_fifocon(ep);
   8509e:	f44f 4680 	mov.w	r6, #16384	; 0x4000
				udd_disable_in_send_interrupt(ep);
   850a2:	4b34      	ldr	r3, [pc, #208]	; (85174 <UOTGHS_Handler+0x8e4>)
				udd_ep_finish_job(ptr_job, false, ep);
   850a4:	4602      	mov	r2, r0
				udd_ack_in_send(ep);
   850a6:	4f34      	ldr	r7, [pc, #208]	; (85178 <UOTGHS_Handler+0x8e8>)
				udd_ep_finish_job(ptr_job, false, ep);
   850a8:	4620      	mov	r0, r4
   850aa:	4c34      	ldr	r4, [pc, #208]	; (8517c <UOTGHS_Handler+0x8ec>)
				udd_disable_in_send_interrupt(ep);
   850ac:	f84e 5003 	str.w	r5, [lr, r3]
				udd_ep_finish_job(ptr_job, false, ep);
   850b0:	2100      	movs	r1, #0
				udd_ack_in_send(ep);
   850b2:	f84e 5007 	str.w	r5, [lr, r7]
				udd_ack_fifocon(ep);
   850b6:	f84e 6003 	str.w	r6, [lr, r3]
		udd_ep_finish_job(ptr_job, false, ep);
   850ba:	4623      	mov	r3, r4
   850bc:	e638      	b.n	84d30 <UOTGHS_Handler+0x4a0>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   850be:	f44f 5280 	mov.w	r2, #4096	; 0x1000

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
				udd_disable_endpoint_bank_autoswitch(ep);
				udd_enable_stall_handshake(ep);
   850c2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
				udd_reset_data_toggle(ep);
   850c6:	f44f 2180 	mov.w	r1, #262144	; 0x40000
				ptr_job->stall_requested = false;
   850ca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   850ce:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
				udd_disable_bank_interrupt(ep);
   850d2:	4b28      	ldr	r3, [pc, #160]	; (85174 <UOTGHS_Handler+0x8e4>)
   850d4:	f84e 2003 	str.w	r2, [lr, r3]
				udd_disable_endpoint_interrupt(ep);
   850d8:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
   850dc:	f8c3 c014 	str.w	ip, [r3, #20]
				ptr_job->stall_requested = false;
   850e0:	7d2b      	ldrb	r3, [r5, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   850e2:	4a27      	ldr	r2, [pc, #156]	; (85180 <UOTGHS_Handler+0x8f0>)
				ptr_job->stall_requested = false;
   850e4:	f36b 0382 	bfi	r3, fp, #2, #1
   850e8:	752b      	strb	r3, [r5, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   850ea:	f85e 3002 	ldr.w	r3, [lr, r2]
   850ee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   850f2:	f84e 3002 	str.w	r3, [lr, r2]
				udd_enable_stall_handshake(ep);
   850f6:	4b23      	ldr	r3, [pc, #140]	; (85184 <UOTGHS_Handler+0x8f4>)
   850f8:	f84e 0003 	str.w	r0, [lr, r3]
				udd_reset_data_toggle(ep);
   850fc:	f84e 1003 	str.w	r1, [lr, r3]
				return true;
   85100:	e48f      	b.n	84a22 <UOTGHS_Handler+0x192>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85102:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85106:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85108:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8510c:	4c0f      	ldr	r4, [pc, #60]	; (8514c <UOTGHS_Handler+0x8bc>)
	++sleepmgr_locks[mode];
   8510e:	481e      	ldr	r0, [pc, #120]	; (85188 <UOTGHS_Handler+0x8f8>)
   85110:	7022      	strb	r2, [r4, #0]
   85112:	7882      	ldrb	r2, [r0, #2]
   85114:	440a      	add	r2, r1
   85116:	7082      	strb	r2, [r0, #2]
	if (cpu_irq_is_enabled_flags(flags))
   85118:	2d00      	cmp	r5, #0
   8511a:	f47f ad1b 	bne.w	84b54 <UOTGHS_Handler+0x2c4>
		cpu_irq_enable();
   8511e:	7021      	strb	r1, [r4, #0]
   85120:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85124:	b662      	cpsie	i
}
   85126:	e515      	b.n	84b54 <UOTGHS_Handler+0x2c4>
		udd_ctrl_prev_payload_buf_cnt = 0;
   85128:	2300      	movs	r3, #0
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   8512a:	2102      	movs	r1, #2
		udd_ctrl_prev_payload_buf_cnt = 0;
   8512c:	4c10      	ldr	r4, [pc, #64]	; (85170 <UOTGHS_Handler+0x8e0>)
		udd_ctrl_payload_buf_cnt = 0;
   8512e:	480b      	ldr	r0, [pc, #44]	; (8515c <UOTGHS_Handler+0x8cc>)
		udd_ctrl_in_sent(); // Send first data transfer
   85130:	4a09      	ldr	r2, [pc, #36]	; (85158 <UOTGHS_Handler+0x8c8>)
		udd_ctrl_prev_payload_buf_cnt = 0;
   85132:	8023      	strh	r3, [r4, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85134:	8003      	strh	r3, [r0, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   85136:	7029      	strb	r1, [r5, #0]
}
   85138:	b003      	add	sp, #12
   8513a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udd_ctrl_in_sent(); // Send first data transfer
   8513e:	4710      	bx	r2
   85140:	400ac104 	.word	0x400ac104
   85144:	00081189 	.word	0x00081189
   85148:	400ac000 	.word	0x400ac000
   8514c:	20070b04 	.word	0x20070b04
   85150:	20072288 	.word	0x20072288
   85154:	200721c4 	.word	0x200721c4
   85158:	00083dfd 	.word	0x00083dfd
   8515c:	200721c0 	.word	0x200721c0
   85160:	20180000 	.word	0x20180000
   85164:	000841a9 	.word	0x000841a9
   85168:	400ac300 	.word	0x400ac300
   8516c:	00083c55 	.word	0x00083c55
   85170:	200721c2 	.word	0x200721c2
   85174:	400ac220 	.word	0x400ac220
   85178:	400ac160 	.word	0x400ac160
   8517c:	00083c19 	.word	0x00083c19
   85180:	400ac100 	.word	0x400ac100
   85184:	400ac1f0 	.word	0x400ac1f0
   85188:	20073304 	.word	0x20073304
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8518c:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85190:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85192:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85196:	4854      	ldr	r0, [pc, #336]	; (852e8 <UOTGHS_Handler+0xa58>)
	--sleepmgr_locks[mode];
   85198:	4954      	ldr	r1, [pc, #336]	; (852ec <UOTGHS_Handler+0xa5c>)
   8519a:	7002      	strb	r2, [r0, #0]
   8519c:	788a      	ldrb	r2, [r1, #2]
   8519e:	3a01      	subs	r2, #1
   851a0:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   851a2:	2d00      	cmp	r5, #0
   851a4:	f47f acb0 	bne.w	84b08 <UOTGHS_Handler+0x278>
		cpu_irq_enable();
   851a8:	7004      	strb	r4, [r0, #0]
   851aa:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   851ae:	b662      	cpsie	i
}
   851b0:	e4aa      	b.n	84b08 <UOTGHS_Handler+0x278>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   851b2:	2403      	movs	r4, #3
   851b4:	7004      	strb	r4, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   851b6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   851ba:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   851bc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   851c0:	4849      	ldr	r0, [pc, #292]	; (852e8 <UOTGHS_Handler+0xa58>)
   851c2:	7003      	strb	r3, [r0, #0]
	udd_ack_nak_out(0);
   851c4:	2308      	movs	r3, #8
	udd_ack_in_send(0);
   851c6:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
	udd_enable_in_send_interrupt(0);
   851ca:	f8c2 11f0 	str.w	r1, [r2, #496]	; 0x1f0
	udd_ack_nak_out(0);
   851ce:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	udd_enable_nak_out_interrupt(0);
   851d2:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   851d6:	2c00      	cmp	r4, #0
   851d8:	f47f ac23 	bne.w	84a22 <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   851dc:	7001      	strb	r1, [r0, #0]
   851de:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   851e2:	b662      	cpsie	i
   851e4:	e41d      	b.n	84a22 <UOTGHS_Handler+0x192>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   851e6:	2103      	movs	r1, #3
   851e8:	7029      	strb	r1, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   851ea:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   851ee:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   851f0:	f3bf 8f5f 	dmb	sy
	udd_ack_in_send(0);
   851f4:	2101      	movs	r1, #1
	udd_ack_nak_out(0);
   851f6:	2008      	movs	r0, #8
	cpu_irq_disable();
   851f8:	4c3b      	ldr	r4, [pc, #236]	; (852e8 <UOTGHS_Handler+0xa58>)
   851fa:	7022      	strb	r2, [r4, #0]
	udd_ack_in_send(0);
   851fc:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	udd_enable_in_send_interrupt(0);
   85200:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
	udd_ack_nak_out(0);
   85204:	f8c3 0160 	str.w	r0, [r3, #352]	; 0x160
	udd_enable_nak_out_interrupt(0);
   85208:	f8c3 01f0 	str.w	r0, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   8520c:	2d00      	cmp	r5, #0
   8520e:	f47f ac08 	bne.w	84a22 <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   85212:	7021      	strb	r1, [r4, #0]
   85214:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85218:	b662      	cpsie	i
   8521a:	e402      	b.n	84a22 <UOTGHS_Handler+0x192>
	udd_ctrl_payload_buf_cnt += nb_data;
   8521c:	f8a7 c000 	strh.w	ip, [r7]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   85220:	e6b8      	b.n	84f94 <UOTGHS_Handler+0x704>
	if (nb_data > 0) {
   85222:	f1ba 0f00 	cmp.w	sl, #0
   85226:	d013      	beq.n	85250 <UOTGHS_Handler+0x9c0>
		if (nb_data >= nb_remain) {
   85228:	45d3      	cmp	fp, sl
   8522a:	d84d      	bhi.n	852c8 <UOTGHS_Handler+0xa38>
		b_short = true;
   8522c:	f04f 0801 	mov.w	r8, #1
   85230:	e541      	b.n	84cb6 <UOTGHS_Handler+0x426>
		if (!udd_g_ctrlreq.over_under_run) {
   85232:	6963      	ldr	r3, [r4, #20]
   85234:	2b00      	cmp	r3, #0
   85236:	f43f aeb5 	beq.w	84fa4 <UOTGHS_Handler+0x714>
		if (!udd_g_ctrlreq.over_under_run()) {
   8523a:	4798      	blx	r3
   8523c:	2800      	cmp	r0, #0
   8523e:	f43f aeb1 	beq.w	84fa4 <UOTGHS_Handler+0x714>
		udd_ctrl_payload_buf_cnt = 0;
   85242:	2200      	movs	r2, #0
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85244:	8833      	ldrh	r3, [r6, #0]
   85246:	8839      	ldrh	r1, [r7, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85248:	803a      	strh	r2, [r7, #0]
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8524a:	440b      	add	r3, r1
   8524c:	8033      	strh	r3, [r6, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8524e:	e70b      	b.n	85068 <UOTGHS_Handler+0x7d8>
	udd_ack_fifocon(ep);
   85250:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   85254:	4a26      	ldr	r2, [pc, #152]	; (852f0 <UOTGHS_Handler+0xa60>)
   85256:	f84e 1002 	str.w	r1, [lr, r2]
   8525a:	4496      	add	lr, r2
   8525c:	e559      	b.n	84d12 <UOTGHS_Handler+0x482>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8525e:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85262:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85264:	f3bf 8f5f 	dmb	sy
		udd_disable_in_send_interrupt(ep);
   85268:	2601      	movs	r6, #1
	cpu_irq_disable();
   8526a:	491f      	ldr	r1, [pc, #124]	; (852e8 <UOTGHS_Handler+0xa58>)
   8526c:	700a      	strb	r2, [r1, #0]
   8526e:	4a20      	ldr	r2, [pc, #128]	; (852f0 <UOTGHS_Handler+0xa60>)
   85270:	f84e 6002 	str.w	r6, [lr, r2]
		udd_disable_endpoint_interrupt(ep);
   85274:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
   85278:	f8c2 c014 	str.w	ip, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
   8527c:	b91f      	cbnz	r7, 85286 <UOTGHS_Handler+0x9f6>
		cpu_irq_enable();
   8527e:	700e      	strb	r6, [r1, #0]
   85280:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85284:	b662      	cpsie	i
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   85286:	2618      	movs	r6, #24
   85288:	fb06 5303 	mla	r3, r6, r3, r5
		udd_ep_finish_job(ptr_job, false, ep);
   8528c:	4602      	mov	r2, r0
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   8528e:	68dd      	ldr	r5, [r3, #12]
		udd_ep_finish_job(ptr_job, false, ep);
   85290:	4620      	mov	r0, r4
   85292:	4c18      	ldr	r4, [pc, #96]	; (852f4 <UOTGHS_Handler+0xa64>)
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   85294:	609d      	str	r5, [r3, #8]
		udd_ep_finish_job(ptr_job, false, ep);
   85296:	2100      	movs	r1, #0
   85298:	4623      	mov	r3, r4
   8529a:	e549      	b.n	84d30 <UOTGHS_Handler+0x4a0>
		udd_ack_fifocon(ep);
   8529c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   852a0:	4a13      	ldr	r2, [pc, #76]	; (852f0 <UOTGHS_Handler+0xa60>)
   852a2:	f84e 1002 	str.w	r1, [lr, r2]
		if (nb_data < pkt_size) {
   852a6:	e403      	b.n	84ab0 <UOTGHS_Handler+0x220>
		ptr_job->buf_cnt += nb_data;
   852a8:	f04f 0b18 	mov.w	fp, #24
	bool b_full = false, b_short = false;
   852ac:	f04f 0800 	mov.w	r8, #0
		ptr_job->buf_cnt += nb_data;
   852b0:	fb0b 5b03 	mla	fp, fp, r3, r5
   852b4:	f8db 200c 	ldr.w	r2, [fp, #12]
		ptr_job->buf_load = nb_data;
   852b8:	f8cb a010 	str.w	sl, [fp, #16]
		ptr_job->buf_cnt += nb_data;
   852bc:	4452      	add	r2, sl
   852be:	f8cb 200c 	str.w	r2, [fp, #12]
	bool b_full = false, b_short = false;
   852c2:	f8cd 8004 	str.w	r8, [sp, #4]
   852c6:	e508      	b.n	84cda <UOTGHS_Handler+0x44a>
		ptr_job->buf_cnt += nb_data;
   852c8:	f04f 0b18 	mov.w	fp, #24
	bool b_full = false, b_short = false;
   852cc:	2200      	movs	r2, #0
		ptr_job->buf_cnt += nb_data;
   852ce:	fb0b 5b03 	mla	fp, fp, r3, r5
	bool b_full = false, b_short = false;
   852d2:	9201      	str	r2, [sp, #4]
		ptr_job->buf_cnt += nb_data;
   852d4:	f8db 200c 	ldr.w	r2, [fp, #12]
		b_short = true;
   852d8:	f04f 0801 	mov.w	r8, #1
		ptr_job->buf_cnt += nb_data;
   852dc:	4452      	add	r2, sl
		ptr_job->buf_load = nb_data;
   852de:	f8cb a010 	str.w	sl, [fp, #16]
		ptr_job->buf_cnt += nb_data;
   852e2:	f8cb 200c 	str.w	r2, [fp, #12]
		for (i = 0; i < nb_data; i++) {
   852e6:	e4f8      	b.n	84cda <UOTGHS_Handler+0x44a>
   852e8:	20070b04 	.word	0x20070b04
   852ec:	20073304 	.word	0x20073304
   852f0:	400ac220 	.word	0x400ac220
   852f4:	00083c19 	.word	0x00083c19

000852f8 <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   852f8:	4a05      	ldr	r2, [pc, #20]	; (85310 <udd_test_mode_j+0x18>)
   852fa:	6813      	ldr	r3, [r2, #0]
   852fc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   85300:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85304:	6013      	str	r3, [r2, #0]
	udd_enable_hs_test_mode_j();
   85306:	6813      	ldr	r3, [r2, #0]
   85308:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8530c:	6013      	str	r3, [r2, #0]
}
   8530e:	4770      	bx	lr
   85310:	400ac000 	.word	0x400ac000

00085314 <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   85314:	4a05      	ldr	r2, [pc, #20]	; (8532c <udd_test_mode_k+0x18>)
   85316:	6813      	ldr	r3, [r2, #0]
   85318:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   8531c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85320:	6013      	str	r3, [r2, #0]
	udd_enable_hs_test_mode_k();
   85322:	6813      	ldr	r3, [r2, #0]
   85324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   85328:	6013      	str	r3, [r2, #0]
}
   8532a:	4770      	bx	lr
   8532c:	400ac000 	.word	0x400ac000

00085330 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   85330:	4a03      	ldr	r2, [pc, #12]	; (85340 <udd_test_mode_se0_nak+0x10>)
   85332:	6813      	ldr	r3, [r2, #0]
   85334:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   85338:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8533c:	6013      	str	r3, [r2, #0]
}
   8533e:	4770      	bx	lr
   85340:	400ac000 	.word	0x400ac000

00085344 <udd_test_mode_packet>:
{
   85344:	b410      	push	{r4}
   85346:	b08f      	sub	sp, #60	; 0x3c
	const uint8_t test_packet[] = {
   85348:	46ec      	mov	ip, sp
   8534a:	4c25      	ldr	r4, [pc, #148]	; (853e0 <udd_test_mode_packet+0x9c>)
   8534c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   8534e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   85352:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   85354:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   85358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   8535a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   8535e:	e894 0003 	ldmia.w	r4, {r0, r1}
	ptr_src = test_packet;
   85362:	466b      	mov	r3, sp
	udd_disable_endpoint(0);
   85364:	4a1f      	ldr	r2, [pc, #124]	; (853e4 <udd_test_mode_packet+0xa0>)
	const uint8_t test_packet[] = {
   85366:	f84c 0b04 	str.w	r0, [ip], #4
   8536a:	f88c 1000 	strb.w	r1, [ip]
	udd_disable_endpoint(0);
   8536e:	69d1      	ldr	r1, [r2, #28]
   85370:	f1c3 5000 	rsb	r0, r3, #536870912	; 0x20000000
   85374:	f021 0101 	bic.w	r1, r1, #1
   85378:	61d1      	str	r1, [r2, #28]
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
   8537a:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   8537e:	f10d 0c35 	add.w	ip, sp, #53	; 0x35
   85382:	f421 51cb 	bic.w	r1, r1, #6496	; 0x1960
   85386:	f021 011c 	bic.w	r1, r1, #28
   8538a:	f441 5189 	orr.w	r1, r1, #4384	; 0x1120
   8538e:	f041 0110 	orr.w	r1, r1, #16
   85392:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	udd_allocate_memory(0);
   85396:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   8539a:	f500 10c0 	add.w	r0, r0, #1572864	; 0x180000
   8539e:	f041 0102 	orr.w	r1, r1, #2
   853a2:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	udd_enable_endpoint(0);
   853a6:	69d1      	ldr	r1, [r2, #28]
   853a8:	f041 0101 	orr.w	r1, r1, #1
   853ac:	61d1      	str	r1, [r2, #28]
	udd_enable_hs_test_mode();
   853ae:	6811      	ldr	r1, [r2, #0]
   853b0:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
   853b4:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   853b8:	6011      	str	r1, [r2, #0]
	udd_enable_hs_test_mode_packet();
   853ba:	6811      	ldr	r1, [r2, #0]
   853bc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   853c0:	6011      	str	r1, [r2, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   853c2:	181a      	adds	r2, r3, r0
		*ptr_dest++ = *ptr_src++;
   853c4:	f813 1b01 	ldrb.w	r1, [r3], #1
	for (i = 0; i < sizeof(test_packet); i++) {
   853c8:	4563      	cmp	r3, ip
		*ptr_dest++ = *ptr_src++;
   853ca:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   853cc:	d1f9      	bne.n	853c2 <udd_test_mode_packet+0x7e>
	udd_ack_fifocon(0);
   853ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   853d2:	4b04      	ldr	r3, [pc, #16]	; (853e4 <udd_test_mode_packet+0xa0>)
   853d4:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
}
   853d8:	b00f      	add	sp, #60	; 0x3c
   853da:	bc10      	pop	{r4}
   853dc:	4770      	bx	lr
   853de:	bf00      	nop
   853e0:	0008ca54 	.word	0x0008ca54
   853e4:	400ac000 	.word	0x400ac000

000853e8 <board_init>:
#include "ioport.h"

void board_init(void)
{

}
   853e8:	4770      	bx	lr
   853ea:	bf00      	nop

000853ec <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   853ec:	4b0c      	ldr	r3, [pc, #48]	; (85420 <cpu_irq_enter_critical+0x34>)
   853ee:	681a      	ldr	r2, [r3, #0]
   853f0:	b922      	cbnz	r2, 853fc <cpu_irq_enter_critical+0x10>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   853f2:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
   853f6:	b129      	cbz	r1, 85404 <cpu_irq_enter_critical+0x18>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   853f8:	490a      	ldr	r1, [pc, #40]	; (85424 <cpu_irq_enter_critical+0x38>)
   853fa:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   853fc:	681a      	ldr	r2, [r3, #0]
   853fe:	3201      	adds	r2, #1
   85400:	601a      	str	r2, [r3, #0]
   85402:	4770      	bx	lr
{
   85404:	b410      	push	{r4}
  __ASM volatile ("cpsid i" : : : "memory");
   85406:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85408:	f3bf 8f5f 	dmb	sy
			cpu_irq_prev_interrupt_state = true;
   8540c:	2001      	movs	r0, #1
			cpu_irq_disable();
   8540e:	4c06      	ldr	r4, [pc, #24]	; (85428 <cpu_irq_enter_critical+0x3c>)
			cpu_irq_prev_interrupt_state = true;
   85410:	4a04      	ldr	r2, [pc, #16]	; (85424 <cpu_irq_enter_critical+0x38>)
			cpu_irq_disable();
   85412:	7021      	strb	r1, [r4, #0]
			cpu_irq_prev_interrupt_state = true;
   85414:	7010      	strb	r0, [r2, #0]
	cpu_irq_critical_section_counter++;
   85416:	681a      	ldr	r2, [r3, #0]
   85418:	3201      	adds	r2, #1
   8541a:	601a      	str	r2, [r3, #0]
}
   8541c:	bc10      	pop	{r4}
   8541e:	4770      	bx	lr
   85420:	200722a0 	.word	0x200722a0
   85424:	200722a4 	.word	0x200722a4
   85428:	20070b04 	.word	0x20070b04

0008542c <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   8542c:	4b07      	ldr	r3, [pc, #28]	; (8544c <cpu_irq_leave_critical+0x20>)
   8542e:	681a      	ldr	r2, [r3, #0]
   85430:	3a01      	subs	r2, #1
   85432:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   85434:	681b      	ldr	r3, [r3, #0]
   85436:	b943      	cbnz	r3, 8544a <cpu_irq_leave_critical+0x1e>
   85438:	4b05      	ldr	r3, [pc, #20]	; (85450 <cpu_irq_leave_critical+0x24>)
   8543a:	781b      	ldrb	r3, [r3, #0]
   8543c:	b12b      	cbz	r3, 8544a <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   8543e:	2201      	movs	r2, #1
   85440:	4b04      	ldr	r3, [pc, #16]	; (85454 <cpu_irq_leave_critical+0x28>)
   85442:	701a      	strb	r2, [r3, #0]
   85444:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85448:	b662      	cpsie	i
	}
}
   8544a:	4770      	bx	lr
   8544c:	200722a0 	.word	0x200722a0
   85450:	200722a4 	.word	0x200722a4
   85454:	20070b04 	.word	0x20070b04

00085458 <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   85458:	4a02      	ldr	r2, [pc, #8]	; (85464 <udi_cdc_comm_disable+0xc>)
   8545a:	7813      	ldrb	r3, [r2, #0]
   8545c:	3b01      	subs	r3, #1
   8545e:	b2db      	uxtb	r3, r3
   85460:	7013      	strb	r3, [r2, #0]
}
   85462:	4770      	bx	lr
   85464:	200722ba 	.word	0x200722ba

00085468 <udi_cdc_comm_setup>:

static uint8_t udi_cdc_setup_to_port(void)
{
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   85468:	4b20      	ldr	r3, [pc, #128]	; (854ec <udi_cdc_comm_setup+0x84>)
   8546a:	791a      	ldrb	r2, [r3, #4]
	if (Udd_setup_is_in()) {
   8546c:	f993 0000 	ldrsb.w	r0, [r3]
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   85470:	f1a2 0103 	sub.w	r1, r2, #3
   85474:	fab1 f181 	clz	r1, r1
	if (Udd_setup_is_in()) {
   85478:	781a      	ldrb	r2, [r3, #0]
   8547a:	2800      	cmp	r0, #0
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   8547c:	ea4f 1151 	mov.w	r1, r1, lsr #5
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   85480:	f002 0260 	and.w	r2, r2, #96	; 0x60
	if (Udd_setup_is_in()) {
   85484:	db03      	blt.n	8548e <udi_cdc_comm_setup+0x26>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   85486:	2a20      	cmp	r2, #32
   85488:	d014      	beq.n	854b4 <udi_cdc_comm_setup+0x4c>
	return false;  // request Not supported
   8548a:	2000      	movs	r0, #0
}
   8548c:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8548e:	2a20      	cmp	r2, #32
   85490:	d1fb      	bne.n	8548a <udi_cdc_comm_setup+0x22>
			switch (udd_g_ctrlreq.req.bRequest) {
   85492:	785a      	ldrb	r2, [r3, #1]
   85494:	2a21      	cmp	r2, #33	; 0x21
   85496:	d1f8      	bne.n	8548a <udi_cdc_comm_setup+0x22>
				if (sizeof(usb_cdc_line_coding_t) !=
   85498:	f8b3 c006 	ldrh.w	ip, [r3, #6]
   8549c:	f1bc 0f07 	cmp.w	ip, #7
   854a0:	d1f3      	bne.n	8548a <udi_cdc_comm_setup+0x22>
						(uint8_t *) &
   854a2:	4813      	ldr	r0, [pc, #76]	; (854f0 <udi_cdc_comm_setup+0x88>)
   854a4:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
   854a8:	4402      	add	r2, r0
				udd_g_ctrlreq.payload =
   854aa:	609a      	str	r2, [r3, #8]
				return true;
   854ac:	2001      	movs	r0, #1
				udd_g_ctrlreq.payload_size =
   854ae:	f8a3 c00c 	strh.w	ip, [r3, #12]
				return true;
   854b2:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   854b4:	7858      	ldrb	r0, [r3, #1]
   854b6:	2820      	cmp	r0, #32
   854b8:	d005      	beq.n	854c6 <udi_cdc_comm_setup+0x5e>
   854ba:	f1a0 0022 	sub.w	r0, r0, #34	; 0x22
   854be:	fab0 f080 	clz	r0, r0
   854c2:	0940      	lsrs	r0, r0, #5
   854c4:	4770      	bx	lr
				if (sizeof(usb_cdc_line_coding_t) !=
   854c6:	f8b3 c006 	ldrh.w	ip, [r3, #6]
   854ca:	f1bc 0f07 	cmp.w	ip, #7
   854ce:	d1dc      	bne.n	8548a <udi_cdc_comm_setup+0x22>
						(uint8_t *) &
   854d0:	4807      	ldr	r0, [pc, #28]	; (854f0 <udi_cdc_comm_setup+0x88>)
{
   854d2:	b410      	push	{r4}
						(uint8_t *) &
   854d4:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
				udd_g_ctrlreq.callback =
   854d8:	4c06      	ldr	r4, [pc, #24]	; (854f4 <udi_cdc_comm_setup+0x8c>)
						(uint8_t *) &
   854da:	4402      	add	r2, r0
				udd_g_ctrlreq.callback =
   854dc:	611c      	str	r4, [r3, #16]
				udd_g_ctrlreq.payload =
   854de:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   854e0:	f8a3 c00c 	strh.w	ip, [r3, #12]
				return true;
   854e4:	2001      	movs	r0, #1
}
   854e6:	bc10      	pop	{r4}
   854e8:	4770      	bx	lr
   854ea:	bf00      	nop
   854ec:	20072288 	.word	0x20072288
   854f0:	200722ac 	.word	0x200722ac
   854f4:	00085501 	.word	0x00085501

000854f8 <udi_cdc_data_setup>:
}
   854f8:	2000      	movs	r0, #0
   854fa:	4770      	bx	lr

000854fc <udi_cdc_getsetting>:
}
   854fc:	2000      	movs	r0, #0
   854fe:	4770      	bx	lr

00085500 <udi_cdc_line_coding_received>:
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   85500:	4b06      	ldr	r3, [pc, #24]	; (8551c <udi_cdc_line_coding_received+0x1c>)
static void udi_cdc_line_coding_received(void)
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   85502:	4907      	ldr	r1, [pc, #28]	; (85520 <udi_cdc_line_coding_received+0x20>)
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   85504:	7918      	ldrb	r0, [r3, #4]
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   85506:	4b07      	ldr	r3, [pc, #28]	; (85524 <udi_cdc_line_coding_received+0x24>)
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   85508:	f1a0 0003 	sub.w	r0, r0, #3
   8550c:	fab0 f080 	clz	r0, r0
   85510:	0940      	lsrs	r0, r0, #5
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   85512:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   85516:	4411      	add	r1, r2
   85518:	4718      	bx	r3
   8551a:	bf00      	nop
   8551c:	20072288 	.word	0x20072288
   85520:	200722ac 	.word	0x200722ac
   85524:	0008224d 	.word	0x0008224d

00085528 <udi_cdc_comm_enable>:
{
   85528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (udi_cdc_nb_comm_enabled > UDI_CDC_PORT_NB) {
   8552a:	4d1e      	ldr	r5, [pc, #120]	; (855a4 <udi_cdc_comm_enable+0x7c>)
	udi_cdc_state[port] = CPU_TO_LE16(0);
   8552c:	2200      	movs	r2, #0
	if (udi_cdc_nb_comm_enabled > UDI_CDC_PORT_NB) {
   8552e:	782b      	ldrb	r3, [r5, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
   85530:	f242 06a1 	movw	r6, #8353	; 0x20a1
	if (udi_cdc_nb_comm_enabled > UDI_CDC_PORT_NB) {
   85534:	2b02      	cmp	r3, #2
		udi_cdc_nb_comm_enabled = 0;
   85536:	bf84      	itt	hi
   85538:	2300      	movhi	r3, #0
   8553a:	702b      	strbhi	r3, [r5, #0]
	port = udi_cdc_nb_comm_enabled;
   8553c:	782c      	ldrb	r4, [r5, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   8553e:	481a      	ldr	r0, [pc, #104]	; (855a8 <udi_cdc_comm_enable+0x80>)
	port = udi_cdc_nb_comm_enabled;
   85540:	b2e4      	uxtb	r4, r4
	switch (port) {
   85542:	2c01      	cmp	r4, #1
	udi_cdc_state[port] = CPU_TO_LE16(0);
   85544:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
	uid_cdc_state_msg[port].header.bmRequestType =
   85548:	4b18      	ldr	r3, [pc, #96]	; (855ac <udi_cdc_comm_enable+0x84>)
	switch (port) {
   8554a:	bf14      	ite	ne
   8554c:	2001      	movne	r0, #1
   8554e:	2003      	moveq	r0, #3
	uid_cdc_state_msg[port].header.bmRequestType =
   85550:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   85554:	f823 6011 	strh.w	r6, [r3, r1, lsl #1]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   85558:	f04f 0c02 	mov.w	ip, #2
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   8555c:	f04f 0e08 	mov.w	lr, #8
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   85560:	f06f 073d 	mvn.w	r7, #61	; 0x3d
   85564:	2601      	movs	r6, #1
	uid_cdc_state_msg[port].header.bmRequestType =
   85566:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   8556a:	4911      	ldr	r1, [pc, #68]	; (855b0 <udi_cdc_comm_enable+0x88>)
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   8556c:	8098      	strh	r0, [r3, #4]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   8556e:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   85572:	540a      	strb	r2, [r1, r0]
   85574:	4401      	add	r1, r0
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   85576:	805a      	strh	r2, [r3, #2]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   85578:	4620      	mov	r0, r4
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   8557a:	811a      	strh	r2, [r3, #8]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   8557c:	f8a3 c006 	strh.w	ip, [r3, #6]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   85580:	70ca      	strb	r2, [r1, #3]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   85582:	4b0c      	ldr	r3, [pc, #48]	; (855b4 <udi_cdc_comm_enable+0x8c>)
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   85584:	710a      	strb	r2, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   85586:	714a      	strb	r2, [r1, #5]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   85588:	704f      	strb	r7, [r1, #1]
   8558a:	708e      	strb	r6, [r1, #2]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   8558c:	f881 e006 	strb.w	lr, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   85590:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   85592:	4620      	mov	r0, r4
   85594:	4b08      	ldr	r3, [pc, #32]	; (855b8 <udi_cdc_comm_enable+0x90>)
   85596:	4798      	blx	r3
   85598:	b118      	cbz	r0, 855a2 <udi_cdc_comm_enable+0x7a>
	udi_cdc_nb_comm_enabled++;
   8559a:	782b      	ldrb	r3, [r5, #0]
   8559c:	4433      	add	r3, r6
   8559e:	b2db      	uxtb	r3, r3
   855a0:	702b      	strb	r3, [r5, #0]
}
   855a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   855a4:	200722ba 	.word	0x200722ba
   855a8:	20072ad0 	.word	0x20072ad0
   855ac:	200732ec 	.word	0x200732ec
   855b0:	200722ac 	.word	0x200722ac
   855b4:	0008224d 	.word	0x0008224d
   855b8:	00082141 	.word	0x00082141

000855bc <udi_cdc_data_disable>:
{
   855bc:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   855be:	4a06      	ldr	r2, [pc, #24]	; (855d8 <udi_cdc_data_disable+0x1c>)
	UDI_CDC_DISABLE_EXT(port);
   855c0:	4906      	ldr	r1, [pc, #24]	; (855dc <udi_cdc_data_disable+0x20>)
	udi_cdc_nb_data_enabled--;
   855c2:	7813      	ldrb	r3, [r2, #0]
   855c4:	3b01      	subs	r3, #1
   855c6:	b2db      	uxtb	r3, r3
   855c8:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   855ca:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   855cc:	4788      	blx	r1
	udi_cdc_data_running = false;
   855ce:	2200      	movs	r2, #0
   855d0:	4b03      	ldr	r3, [pc, #12]	; (855e0 <udi_cdc_data_disable+0x24>)
   855d2:	701a      	strb	r2, [r3, #0]
}
   855d4:	bd08      	pop	{r3, pc}
   855d6:	bf00      	nop
   855d8:	200722bb 	.word	0x200722bb
   855dc:	00082175 	.word	0x00082175
   855e0:	200722a8 	.word	0x200722a8

000855e4 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
   855e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   855e8:	4e4b      	ldr	r6, [pc, #300]	; (85718 <udi_cdc_tx_send+0x134>)
{
   855ea:	b085      	sub	sp, #20
	if (udi_cdc_tx_trans_ongoing[port]) {
   855ec:	5c33      	ldrb	r3, [r6, r0]
   855ee:	b113      	cbz	r3, 855f6 <udi_cdc_tx_send+0x12>
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   855f0:	b005      	add	sp, #20
   855f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (udd_is_high_speed()) {
   855f6:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8571c <udi_cdc_tx_send+0x138>
   855fa:	4604      	mov	r4, r0
   855fc:	47c8      	blx	r9
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   855fe:	f8df a120 	ldr.w	sl, [pc, #288]	; 85720 <udi_cdc_tx_send+0x13c>
   85602:	f83a 5014 	ldrh.w	r5, [sl, r4, lsl #1]
	if (udd_is_high_speed()) {
   85606:	2800      	cmp	r0, #0
   85608:	d04f      	beq.n	856aa <udi_cdc_tx_send+0xc6>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   8560a:	4b46      	ldr	r3, [pc, #280]	; (85724 <udi_cdc_tx_send+0x140>)
   8560c:	4798      	blx	r3
   8560e:	4285      	cmp	r5, r0
   85610:	d0ee      	beq.n	855f0 <udi_cdc_tx_send+0xc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85612:	f3ef 8310 	mrs	r3, PRIMASK
   85616:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
   85618:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8561a:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8561e:	2300      	movs	r3, #0
   85620:	4a41      	ldr	r2, [pc, #260]	; (85728 <udi_cdc_tx_send+0x144>)
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   85622:	4942      	ldr	r1, [pc, #264]	; (8572c <udi_cdc_tx_send+0x148>)
   85624:	7013      	strb	r3, [r2, #0]
   85626:	5d0d      	ldrb	r5, [r1, r4]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   85628:	f8df b104 	ldr.w	fp, [pc, #260]	; 85730 <udi_cdc_tx_send+0x14c>
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   8562c:	b2ed      	uxtb	r5, r5
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   8562e:	eb05 0344 	add.w	r3, r5, r4, lsl #1
   85632:	f83b 3013 	ldrh.w	r3, [fp, r3, lsl #1]
   85636:	46a8      	mov	r8, r5
   85638:	0067      	lsls	r7, r4, #1
   8563a:	2b00      	cmp	r3, #0
   8563c:	d043      	beq.n	856c6 <udi_cdc_tx_send+0xe2>
   8563e:	4b3d      	ldr	r3, [pc, #244]	; (85734 <udi_cdc_tx_send+0x150>)
	sof_zlp_counter = 0;
   85640:	2000      	movs	r0, #0
   85642:	8018      	strh	r0, [r3, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
   85644:	4b3c      	ldr	r3, [pc, #240]	; (85738 <udi_cdc_tx_send+0x154>)
   85646:	5d1b      	ldrb	r3, [r3, r4]
   85648:	2b00      	cmp	r3, #0
   8564a:	d033      	beq.n	856b4 <udi_cdc_tx_send+0xd0>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   8564c:	fab5 f885 	clz	r8, r5
   85650:	ea4f 1858 	mov.w	r8, r8, lsr #5
	udi_cdc_tx_trans_ongoing[port] = true;
   85654:	2301      	movs	r3, #1
	if (cpu_irq_is_enabled_flags(flags))
   85656:	9902      	ldr	r1, [sp, #8]
   85658:	5533      	strb	r3, [r6, r4]
   8565a:	b919      	cbnz	r1, 85664 <udi_cdc_tx_send+0x80>
		cpu_irq_enable();
   8565c:	7013      	strb	r3, [r2, #0]
   8565e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85662:	b662      	cpsie	i
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   85664:	eb07 0508 	add.w	r5, r7, r8
   85668:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
   8566c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85670:	bf14      	ite	ne
   85672:	2601      	movne	r6, #1
   85674:	2600      	moveq	r6, #0
	if (b_short_packet) {
   85676:	d022      	beq.n	856be <udi_cdc_tx_send+0xda>
		if (udd_is_high_speed()) {
   85678:	47c8      	blx	r9
   8567a:	2800      	cmp	r0, #0
   8567c:	d044      	beq.n	85708 <udi_cdc_tx_send+0x124>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   8567e:	4b29      	ldr	r3, [pc, #164]	; (85724 <udi_cdc_tx_send+0x140>)
   85680:	4798      	blx	r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   85682:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   85686:	f82a 0014 	strh.w	r0, [sl, r4, lsl #1]
	udd_ep_run( ep,
   8568a:	482c      	ldr	r0, [pc, #176]	; (8573c <udi_cdc_tx_send+0x158>)
			udi_cdc_tx_buf[port][buf_sel_trans],
   8568c:	4a2c      	ldr	r2, [pc, #176]	; (85740 <udi_cdc_tx_send+0x15c>)
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
   8568e:	2c01      	cmp	r4, #1
			udi_cdc_tx_buf[port][buf_sel_trans],
   85690:	4447      	add	r7, r8
	udd_ep_run( ep,
   85692:	9000      	str	r0, [sp, #0]
   85694:	4631      	mov	r1, r6
   85696:	bf14      	ite	ne
   85698:	2083      	movne	r0, #131	; 0x83
   8569a:	2085      	moveq	r0, #133	; 0x85
   8569c:	4c29      	ldr	r4, [pc, #164]	; (85744 <udi_cdc_tx_send+0x160>)
   8569e:	eb02 2247 	add.w	r2, r2, r7, lsl #9
   856a2:	47a0      	blx	r4
}
   856a4:	b005      	add	sp, #20
   856a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   856aa:	4b27      	ldr	r3, [pc, #156]	; (85748 <udi_cdc_tx_send+0x164>)
   856ac:	4798      	blx	r3
   856ae:	4285      	cmp	r5, r0
   856b0:	d1af      	bne.n	85612 <udi_cdc_tx_send+0x2e>
   856b2:	e79d      	b.n	855f0 <udi_cdc_tx_send+0xc>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   856b4:	fab5 f585 	clz	r5, r5
   856b8:	096d      	lsrs	r5, r5, #5
   856ba:	550d      	strb	r5, [r1, r4]
   856bc:	e7ca      	b.n	85654 <udi_cdc_tx_send+0x70>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   856be:	2200      	movs	r2, #0
   856c0:	f82a 2014 	strh.w	r2, [sl, r4, lsl #1]
   856c4:	e7e1      	b.n	8568a <udi_cdc_tx_send+0xa6>
		sof_zlp_counter++;
   856c6:	4b1b      	ldr	r3, [pc, #108]	; (85734 <udi_cdc_tx_send+0x150>)
   856c8:	8818      	ldrh	r0, [r3, #0]
   856ca:	9303      	str	r3, [sp, #12]
   856cc:	3001      	adds	r0, #1
   856ce:	8018      	strh	r0, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   856d0:	47c8      	blx	r9
   856d2:	9b03      	ldr	r3, [sp, #12]
   856d4:	4a14      	ldr	r2, [pc, #80]	; (85728 <udi_cdc_tx_send+0x144>)
   856d6:	b910      	cbnz	r0, 856de <udi_cdc_tx_send+0xfa>
   856d8:	8818      	ldrh	r0, [r3, #0]
   856da:	2863      	cmp	r0, #99	; 0x63
   856dc:	d90a      	bls.n	856f4 <udi_cdc_tx_send+0x110>
   856de:	9303      	str	r3, [sp, #12]
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   856e0:	47c8      	blx	r9
   856e2:	4a11      	ldr	r2, [pc, #68]	; (85728 <udi_cdc_tx_send+0x144>)
   856e4:	4911      	ldr	r1, [pc, #68]	; (8572c <udi_cdc_tx_send+0x148>)
   856e6:	9b03      	ldr	r3, [sp, #12]
   856e8:	2800      	cmp	r0, #0
   856ea:	d0a9      	beq.n	85640 <udi_cdc_tx_send+0x5c>
   856ec:	8818      	ldrh	r0, [r3, #0]
   856ee:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   856f2:	d2a5      	bcs.n	85640 <udi_cdc_tx_send+0x5c>
	if (cpu_irq_is_enabled_flags(flags))
   856f4:	9b02      	ldr	r3, [sp, #8]
   856f6:	2b00      	cmp	r3, #0
   856f8:	f47f af7a 	bne.w	855f0 <udi_cdc_tx_send+0xc>
		cpu_irq_enable();
   856fc:	2301      	movs	r3, #1
   856fe:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   85700:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85704:	b662      	cpsie	i
}
   85706:	e773      	b.n	855f0 <udi_cdc_tx_send+0xc>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   85708:	4b0f      	ldr	r3, [pc, #60]	; (85748 <udi_cdc_tx_send+0x164>)
   8570a:	4798      	blx	r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   8570c:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   85710:	f82a 0014 	strh.w	r0, [sl, r4, lsl #1]
   85714:	e7b9      	b.n	8568a <udi_cdc_tx_send+0xa6>
   85716:	bf00      	nop
   85718:	200732e8 	.word	0x200732e8
   8571c:	00084219 	.word	0x00084219
   85720:	200732e4 	.word	0x200732e4
   85724:	00084275 	.word	0x00084275
   85728:	20070b04 	.word	0x20070b04
   8572c:	200732e0 	.word	0x200732e0
   85730:	200732d8 	.word	0x200732d8
   85734:	200722a6 	.word	0x200722a6
   85738:	20072ad4 	.word	0x20072ad4
   8573c:	0008574d 	.word	0x0008574d
   85740:	20072ad8 	.word	0x20072ad8
   85744:	000844a9 	.word	0x000844a9
   85748:	00084265 	.word	0x00084265

0008574c <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   8574c:	b100      	cbz	r0, 85750 <udi_cdc_data_sent+0x4>
   8574e:	4770      	bx	lr
   85750:	4603      	mov	r3, r0
	switch (ep) {
   85752:	f1a2 0085 	sub.w	r0, r2, #133	; 0x85
   85756:	fab0 f080 	clz	r0, r0
{
   8575a:	b470      	push	{r4, r5, r6}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   8575c:	4a09      	ldr	r2, [pc, #36]	; (85784 <udi_cdc_data_sent+0x38>)
	switch (ep) {
   8575e:	0940      	lsrs	r0, r0, #5
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   85760:	f812 c000 	ldrb.w	ip, [r2, r0]
   85764:	0042      	lsls	r2, r0, #1
   85766:	f1bc 0f00 	cmp.w	ip, #0
   8576a:	bf08      	it	eq
   8576c:	3201      	addeq	r2, #1
   8576e:	4c06      	ldr	r4, [pc, #24]	; (85788 <udi_cdc_data_sent+0x3c>)
	udi_cdc_tx_both_buf_to_send[port] = false;
   85770:	4e06      	ldr	r6, [pc, #24]	; (8578c <udi_cdc_data_sent+0x40>)
	udi_cdc_tx_trans_ongoing[port] = false;
   85772:	4d07      	ldr	r5, [pc, #28]	; (85790 <udi_cdc_data_sent+0x44>)
	udi_cdc_tx_both_buf_to_send[port] = false;
   85774:	5433      	strb	r3, [r6, r0]
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   85776:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
	udi_cdc_tx_trans_ongoing[port] = false;
   8577a:	542b      	strb	r3, [r5, r0]
	udi_cdc_tx_send(port);
   8577c:	4905      	ldr	r1, [pc, #20]	; (85794 <udi_cdc_data_sent+0x48>)
}
   8577e:	bc70      	pop	{r4, r5, r6}
	udi_cdc_tx_send(port);
   85780:	4708      	bx	r1
   85782:	bf00      	nop
   85784:	200732e0 	.word	0x200732e0
   85788:	200732d8 	.word	0x200732d8
   8578c:	20072ad4 	.word	0x20072ad4
   85790:	200732e8 	.word	0x200732e8
   85794:	000855e5 	.word	0x000855e5

00085798 <udi_cdc_data_sof_notify>:
{
   85798:	b510      	push	{r4, lr}
	udi_cdc_tx_send(port_notify);
   8579a:	4c06      	ldr	r4, [pc, #24]	; (857b4 <udi_cdc_data_sof_notify+0x1c>)
   8579c:	4b06      	ldr	r3, [pc, #24]	; (857b8 <udi_cdc_data_sof_notify+0x20>)
   8579e:	7820      	ldrb	r0, [r4, #0]
   857a0:	4798      	blx	r3
	port_notify++;
   857a2:	7823      	ldrb	r3, [r4, #0]
   857a4:	3301      	adds	r3, #1
   857a6:	b2db      	uxtb	r3, r3
	if (port_notify >= UDI_CDC_PORT_NB) {
   857a8:	2b01      	cmp	r3, #1
		port_notify = 0;
   857aa:	bf88      	it	hi
   857ac:	2300      	movhi	r3, #0
   857ae:	7023      	strb	r3, [r4, #0]
}
   857b0:	bd10      	pop	{r4, pc}
   857b2:	bf00      	nop
   857b4:	200722a5 	.word	0x200722a5
   857b8:	000855e5 	.word	0x000855e5

000857bc <udi_cdc_rx_start>:
{
   857bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   857c0:	4604      	mov	r4, r0
   857c2:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   857c4:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   857c8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   857ca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   857ce:	2200      	movs	r2, #0
   857d0:	4b34      	ldr	r3, [pc, #208]	; (858a4 <udi_cdc_rx_start+0xe8>)
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   857d2:	4935      	ldr	r1, [pc, #212]	; (858a8 <udi_cdc_rx_start+0xec>)
	if (udi_cdc_rx_trans_ongoing[port] ||
   857d4:	4e35      	ldr	r6, [pc, #212]	; (858ac <udi_cdc_rx_start+0xf0>)
   857d6:	701a      	strb	r2, [r3, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   857d8:	5d0d      	ldrb	r5, [r1, r4]
	if (udi_cdc_rx_trans_ongoing[port] ||
   857da:	5d32      	ldrb	r2, [r6, r4]
   857dc:	2a00      	cmp	r2, #0
   857de:	d14f      	bne.n	85880 <udi_cdc_rx_start+0xc4>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   857e0:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 858b0 <udi_cdc_rx_start+0xf4>
   857e4:	b2ed      	uxtb	r5, r5
   857e6:	f002 08ff 	and.w	r8, r2, #255	; 0xff
   857ea:	4a32      	ldr	r2, [pc, #200]	; (858b4 <udi_cdc_rx_start+0xf8>)
   857ec:	eb05 0744 	add.w	r7, r5, r4, lsl #1
   857f0:	f832 e014 	ldrh.w	lr, [r2, r4, lsl #1]
   857f4:	f839 c017 	ldrh.w	ip, [r9, r7, lsl #1]
   857f8:	fa1f fe8e 	uxth.w	lr, lr
   857fc:	fa1f fc8c 	uxth.w	ip, ip
	if (udi_cdc_rx_trans_ongoing[port] ||
   85800:	45e6      	cmp	lr, ip
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   85802:	ea4f 0744 	mov.w	r7, r4, lsl #1
	if (udi_cdc_rx_trans_ongoing[port] ||
   85806:	d33b      	bcc.n	85880 <udi_cdc_rx_start+0xc4>
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   85808:	fab5 fc85 	clz	ip, r5
	udi_cdc_rx_trans_ongoing[port] = true;
   8580c:	f04f 0e01 	mov.w	lr, #1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   85810:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
	udi_cdc_rx_pos[port] = 0;
   85814:	f822 8014 	strh.w	r8, [r2, r4, lsl #1]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   85818:	f801 c004 	strb.w	ip, [r1, r4]
	udi_cdc_rx_trans_ongoing[port] = true;
   8581c:	f806 e004 	strb.w	lr, [r6, r4]
	if (cpu_irq_is_enabled_flags(flags))
   85820:	b920      	cbnz	r0, 8582c <udi_cdc_rx_start+0x70>
		cpu_irq_enable();
   85822:	f883 e000 	strb.w	lr, [r3]
   85826:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8582a:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8582c:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85830:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85832:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85836:	2000      	movs	r0, #0
   85838:	7018      	strb	r0, [r3, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   8583a:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   8583e:	5d08      	ldrb	r0, [r1, r4]
	pos = udi_cdc_rx_pos[port];
   85840:	b291      	uxth	r1, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   85842:	183a      	adds	r2, r7, r0
   85844:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
   85848:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   8584a:	b926      	cbnz	r6, 85856 <udi_cdc_rx_start+0x9a>
		cpu_irq_enable();
   8584c:	2001      	movs	r0, #1
   8584e:	7018      	strb	r0, [r3, #0]
   85850:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85854:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   85856:	4291      	cmp	r1, r2
   85858:	d11f      	bne.n	8589a <udi_cdc_rx_start+0xde>
	return udd_ep_run(ep,
   8585a:	4817      	ldr	r0, [pc, #92]	; (858b8 <udi_cdc_rx_start+0xfc>)
			udi_cdc_rx_buf[port][buf_sel_trans],
   8585c:	4a17      	ldr	r2, [pc, #92]	; (858bc <udi_cdc_rx_start+0x100>)
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
   8585e:	2c01      	cmp	r4, #1
			udi_cdc_rx_buf[port][buf_sel_trans],
   85860:	443d      	add	r5, r7
	return udd_ep_run(ep,
   85862:	9000      	str	r0, [sp, #0]
   85864:	f44f 7300 	mov.w	r3, #512	; 0x200
   85868:	f04f 0101 	mov.w	r1, #1
   8586c:	bf14      	ite	ne
   8586e:	2004      	movne	r0, #4
   85870:	2006      	moveq	r0, #6
   85872:	4c13      	ldr	r4, [pc, #76]	; (858c0 <udi_cdc_rx_start+0x104>)
   85874:	eb02 2245 	add.w	r2, r2, r5, lsl #9
   85878:	47a0      	blx	r4
}
   8587a:	b003      	add	sp, #12
   8587c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cpu_irq_is_enabled_flags(flags))
   85880:	b938      	cbnz	r0, 85892 <udi_cdc_rx_start+0xd6>
		cpu_irq_enable();
   85882:	2201      	movs	r2, #1
   85884:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   85886:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8588a:	b662      	cpsie	i
   8588c:	b003      	add	sp, #12
   8588e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return false;
   85892:	2000      	movs	r0, #0
}
   85894:	b003      	add	sp, #12
   85896:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		UDI_CDC_RX_NOTIFY(port);
   8589a:	4620      	mov	r0, r4
   8589c:	4b09      	ldr	r3, [pc, #36]	; (858c4 <udi_cdc_rx_start+0x108>)
   8589e:	4798      	blx	r3
   858a0:	e7db      	b.n	8585a <udi_cdc_rx_start+0x9e>
   858a2:	bf00      	nop
   858a4:	20070b04 	.word	0x20070b04
   858a8:	20072ac4 	.word	0x20072ac4
   858ac:	20072acc 	.word	0x20072acc
   858b0:	20072abc 	.word	0x20072abc
   858b4:	20072ac8 	.word	0x20072ac8
   858b8:	00085969 	.word	0x00085969
   858bc:	200722bc 	.word	0x200722bc
   858c0:	000844a9 	.word	0x000844a9
   858c4:	000821b1 	.word	0x000821b1

000858c8 <udi_cdc_data_enable>:
{
   858c8:	b570      	push	{r4, r5, r6, lr}
	if (udi_cdc_nb_data_enabled > UDI_CDC_PORT_NB) {
   858ca:	4e1a      	ldr	r6, [pc, #104]	; (85934 <udi_cdc_data_enable+0x6c>)
	udi_cdc_tx_trans_ongoing[port] = false;
   858cc:	2500      	movs	r5, #0
	if (udi_cdc_nb_data_enabled > UDI_CDC_PORT_NB) {
   858ce:	7833      	ldrb	r3, [r6, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   858d0:	4919      	ldr	r1, [pc, #100]	; (85938 <udi_cdc_data_enable+0x70>)
	if (udi_cdc_nb_data_enabled > UDI_CDC_PORT_NB) {
   858d2:	2b02      	cmp	r3, #2
		udi_cdc_nb_data_enabled = 0;
   858d4:	bf84      	itt	hi
   858d6:	2300      	movhi	r3, #0
   858d8:	7033      	strbhi	r3, [r6, #0]
	port = udi_cdc_nb_data_enabled;
   858da:	7834      	ldrb	r4, [r6, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   858dc:	4b17      	ldr	r3, [pc, #92]	; (8593c <udi_cdc_data_enable+0x74>)
	udi_cdc_tx_buf_nb[port][0] = 0;
   858de:	4818      	ldr	r0, [pc, #96]	; (85940 <udi_cdc_data_enable+0x78>)
	port = udi_cdc_nb_data_enabled;
   858e0:	b2e4      	uxtb	r4, r4
	udi_cdc_tx_buf_nb[port][0] = 0;
   858e2:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
	udi_cdc_tx_buf_sel[port] = 0;
   858e6:	4a17      	ldr	r2, [pc, #92]	; (85944 <udi_cdc_data_enable+0x7c>)
	udi_cdc_tx_trans_ongoing[port] = false;
   858e8:	550d      	strb	r5, [r1, r4]
	udi_cdc_tx_both_buf_to_send[port] = false;
   858ea:	551d      	strb	r5, [r3, r4]
	udi_cdc_tx_sof_num[port] = 0;
   858ec:	4b16      	ldr	r3, [pc, #88]	; (85948 <udi_cdc_data_enable+0x80>)
	udi_cdc_tx_send(port);
   858ee:	4620      	mov	r0, r4
	udi_cdc_tx_buf_sel[port] = 0;
   858f0:	5515      	strb	r5, [r2, r4]
	udi_cdc_tx_sof_num[port] = 0;
   858f2:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
	udi_cdc_tx_send(port);
   858f6:	4b15      	ldr	r3, [pc, #84]	; (8594c <udi_cdc_data_enable+0x84>)
   858f8:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   858fa:	4a15      	ldr	r2, [pc, #84]	; (85950 <udi_cdc_data_enable+0x88>)
	udi_cdc_rx_buf_nb[port][0] = 0;
   858fc:	4b15      	ldr	r3, [pc, #84]	; (85954 <udi_cdc_data_enable+0x8c>)
	udi_cdc_rx_trans_ongoing[port] = false;
   858fe:	5515      	strb	r5, [r2, r4]
	udi_cdc_rx_buf_sel[port] = 0;
   85900:	4a15      	ldr	r2, [pc, #84]	; (85958 <udi_cdc_data_enable+0x90>)
	if (!udi_cdc_rx_start(port)) {
   85902:	4620      	mov	r0, r4
	udi_cdc_rx_buf_sel[port] = 0;
   85904:	5515      	strb	r5, [r2, r4]
	udi_cdc_rx_buf_nb[port][0] = 0;
   85906:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
	udi_cdc_rx_buf_nb[port][1] = 0;
   8590a:	eb03 0284 	add.w	r2, r3, r4, lsl #2
	udi_cdc_rx_pos[port] = 0;
   8590e:	4b13      	ldr	r3, [pc, #76]	; (8595c <udi_cdc_data_enable+0x94>)
	udi_cdc_rx_buf_nb[port][1] = 0;
   85910:	8055      	strh	r5, [r2, #2]
	udi_cdc_rx_pos[port] = 0;
   85912:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
	if (!udi_cdc_rx_start(port)) {
   85916:	4b12      	ldr	r3, [pc, #72]	; (85960 <udi_cdc_data_enable+0x98>)
   85918:	4798      	blx	r3
   8591a:	b130      	cbz	r0, 8592a <udi_cdc_data_enable+0x62>
	udi_cdc_nb_data_enabled++;
   8591c:	7833      	ldrb	r3, [r6, #0]
   8591e:	3301      	adds	r3, #1
   85920:	b2db      	uxtb	r3, r3
   85922:	7033      	strb	r3, [r6, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   85924:	7833      	ldrb	r3, [r6, #0]
   85926:	2b02      	cmp	r3, #2
   85928:	d000      	beq.n	8592c <udi_cdc_data_enable+0x64>
}
   8592a:	bd70      	pop	{r4, r5, r6, pc}
		udi_cdc_data_running = true;
   8592c:	2201      	movs	r2, #1
   8592e:	4b0d      	ldr	r3, [pc, #52]	; (85964 <udi_cdc_data_enable+0x9c>)
   85930:	701a      	strb	r2, [r3, #0]
}
   85932:	bd70      	pop	{r4, r5, r6, pc}
   85934:	200722bb 	.word	0x200722bb
   85938:	200732e8 	.word	0x200732e8
   8593c:	20072ad4 	.word	0x20072ad4
   85940:	200732d8 	.word	0x200732d8
   85944:	200732e0 	.word	0x200732e0
   85948:	200732e4 	.word	0x200732e4
   8594c:	000855e5 	.word	0x000855e5
   85950:	20072acc 	.word	0x20072acc
   85954:	20072abc 	.word	0x20072abc
   85958:	20072ac4 	.word	0x20072ac4
   8595c:	20072ac8 	.word	0x20072ac8
   85960:	000857bd 	.word	0x000857bd
   85964:	200722a8 	.word	0x200722a8

00085968 <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   85968:	bb50      	cbnz	r0, 859c0 <udi_cdc_data_received+0x58>
{
   8596a:	b510      	push	{r4, lr}
   8596c:	4686      	mov	lr, r0
	switch (ep) {
   8596e:	f1a2 0006 	sub.w	r0, r2, #6
   85972:	fab0 f080 	clz	r0, r0
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   85976:	4b13      	ldr	r3, [pc, #76]	; (859c4 <udi_cdc_data_received+0x5c>)
	switch (ep) {
   85978:	0940      	lsrs	r0, r0, #5
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   8597a:	5c1b      	ldrb	r3, [r3, r0]
{
   8597c:	b082      	sub	sp, #8
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   8597e:	fab3 f383 	clz	r3, r3
   85982:	095b      	lsrs	r3, r3, #5
	if (!n) {
   85984:	b169      	cbz	r1, 859a2 <udi_cdc_data_received+0x3a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   85986:	4a10      	ldr	r2, [pc, #64]	; (859c8 <udi_cdc_data_received+0x60>)
   85988:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   8598c:	b289      	uxth	r1, r1
   8598e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   85992:	4a0e      	ldr	r2, [pc, #56]	; (859cc <udi_cdc_data_received+0x64>)
	udi_cdc_rx_start(port);
   85994:	4b0e      	ldr	r3, [pc, #56]	; (859d0 <udi_cdc_data_received+0x68>)
	udi_cdc_rx_trans_ongoing[port] = false;
   85996:	f802 e000 	strb.w	lr, [r2, r0]
}
   8599a:	b002      	add	sp, #8
   8599c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	udi_cdc_rx_start(port);
   859a0:	4718      	bx	r3
				udi_cdc_rx_buf[port][buf_sel_trans],
   859a2:	4c0c      	ldr	r4, [pc, #48]	; (859d4 <udi_cdc_data_received+0x6c>)
		udd_ep_run( ep,
   859a4:	490c      	ldr	r1, [pc, #48]	; (859d8 <udi_cdc_data_received+0x70>)
				udi_cdc_rx_buf[port][buf_sel_trans],
   859a6:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
		udd_ep_run( ep,
   859aa:	9100      	str	r1, [sp, #0]
   859ac:	4610      	mov	r0, r2
   859ae:	f44f 7300 	mov.w	r3, #512	; 0x200
   859b2:	eb04 224c 	add.w	r2, r4, ip, lsl #9
   859b6:	2101      	movs	r1, #1
   859b8:	4c08      	ldr	r4, [pc, #32]	; (859dc <udi_cdc_data_received+0x74>)
   859ba:	47a0      	blx	r4
}
   859bc:	b002      	add	sp, #8
   859be:	bd10      	pop	{r4, pc}
   859c0:	4770      	bx	lr
   859c2:	bf00      	nop
   859c4:	20072ac4 	.word	0x20072ac4
   859c8:	20072abc 	.word	0x20072abc
   859cc:	20072acc 	.word	0x20072acc
   859d0:	000857bd 	.word	0x000857bd
   859d4:	200722bc 	.word	0x200722bc
   859d8:	00085969 	.word	0x00085969
   859dc:	000844a9 	.word	0x000844a9

000859e0 <udi_cdc_multi_get_nb_received_data>:
{
   859e0:	b430      	push	{r4, r5}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   859e2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   859e6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   859e8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   859ec:	f04f 0c00 	mov.w	ip, #0
   859f0:	490b      	ldr	r1, [pc, #44]	; (85a20 <udi_cdc_multi_get_nb_received_data+0x40>)
	pos = udi_cdc_rx_pos[port];
   859f2:	4b0c      	ldr	r3, [pc, #48]	; (85a24 <udi_cdc_multi_get_nb_received_data+0x44>)
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   859f4:	4a0c      	ldr	r2, [pc, #48]	; (85a28 <udi_cdc_multi_get_nb_received_data+0x48>)
   859f6:	f881 c000 	strb.w	ip, [r1]
	pos = udi_cdc_rx_pos[port];
   859fa:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   859fe:	5c12      	ldrb	r2, [r2, r0]
   85a00:	4d0a      	ldr	r5, [pc, #40]	; (85a2c <udi_cdc_multi_get_nb_received_data+0x4c>)
   85a02:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   85a06:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
	pos = udi_cdc_rx_pos[port];
   85a0a:	b29b      	uxth	r3, r3
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   85a0c:	b280      	uxth	r0, r0
   85a0e:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
   85a10:	b924      	cbnz	r4, 85a1c <udi_cdc_multi_get_nb_received_data+0x3c>
		cpu_irq_enable();
   85a12:	2301      	movs	r3, #1
   85a14:	700b      	strb	r3, [r1, #0]
   85a16:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85a1a:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   85a1c:	bc30      	pop	{r4, r5}
   85a1e:	4770      	bx	lr
   85a20:	20070b04 	.word	0x20070b04
   85a24:	20072ac8 	.word	0x20072ac8
   85a28:	20072ac4 	.word	0x20072ac4
   85a2c:	20072abc 	.word	0x20072abc

00085a30 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   85a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85a34:	ea4f 0840 	mov.w	r8, r0, lsl #1
   85a38:	46c2      	mov	sl, r8
   85a3a:	4617      	mov	r7, r2
   85a3c:	460b      	mov	r3, r1
   85a3e:	4680      	mov	r8, r0
   85a40:	4e25      	ldr	r6, [pc, #148]	; (85ad8 <udi_cdc_multi_read_buf+0xa8>)
   85a42:	4d26      	ldr	r5, [pc, #152]	; (85adc <udi_cdc_multi_read_buf+0xac>)
   85a44:	f8df b098 	ldr.w	fp, [pc, #152]	; 85ae0 <udi_cdc_multi_read_buf+0xb0>
   85a48:	f8df 9098 	ldr.w	r9, [pc, #152]	; 85ae4 <udi_cdc_multi_read_buf+0xb4>
   85a4c:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85a4e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85a52:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85a54:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85a58:	2200      	movs	r2, #0
   85a5a:	7032      	strb	r2, [r6, #0]
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   85a5c:	f835 0018 	ldrh.w	r0, [r5, r8, lsl #1]
	buf_sel = udi_cdc_rx_buf_sel[port];
   85a60:	f81b 1008 	ldrb.w	r1, [fp, r8]
	pos = udi_cdc_rx_pos[port];
   85a64:	b280      	uxth	r0, r0
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   85a66:	eb0a 0201 	add.w	r2, sl, r1
   85a6a:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
	buf_sel = udi_cdc_rx_buf_sel[port];
   85a6e:	b2c9      	uxtb	r1, r1
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   85a70:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   85a72:	b924      	cbnz	r4, 85a7e <udi_cdc_multi_read_buf+0x4e>
		cpu_irq_enable();
   85a74:	2401      	movs	r4, #1
   85a76:	7034      	strb	r4, [r6, #0]
   85a78:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85a7c:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (again) {
   85a7e:	4282      	cmp	r2, r0
		if (!udi_cdc_data_running) {
   85a80:	4c19      	ldr	r4, [pc, #100]	; (85ae8 <udi_cdc_multi_read_buf+0xb8>)
	while (again) {
   85a82:	d806      	bhi.n	85a92 <udi_cdc_multi_read_buf+0x62>
		if (!udi_cdc_data_running) {
   85a84:	7822      	ldrb	r2, [r4, #0]
   85a86:	2a00      	cmp	r2, #0
   85a88:	d1e1      	bne.n	85a4e <udi_cdc_multi_read_buf+0x1e>

	if (size) {
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   85a8a:	4638      	mov	r0, r7
   85a8c:	b003      	add	sp, #12
   85a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   85a92:	4451      	add	r1, sl
   85a94:	f839 4011 	ldrh.w	r4, [r9, r1, lsl #1]
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85a98:	4a14      	ldr	r2, [pc, #80]	; (85aec <udi_cdc_multi_read_buf+0xbc>)
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   85a9a:	b2a4      	uxth	r4, r4
   85a9c:	1a24      	subs	r4, r4, r0
	if (copy_nb>size) {
   85a9e:	42bc      	cmp	r4, r7
   85aa0:	bf28      	it	cs
   85aa2:	463c      	movcs	r4, r7
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85aa4:	eb00 2141 	add.w	r1, r0, r1, lsl #9
   85aa8:	4618      	mov	r0, r3
	ptr_buf += copy_nb;
   85aaa:	4423      	add	r3, r4
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85aac:	4411      	add	r1, r2
	ptr_buf += copy_nb;
   85aae:	9301      	str	r3, [sp, #4]
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85ab0:	4622      	mov	r2, r4
   85ab2:	4b0f      	ldr	r3, [pc, #60]	; (85af0 <udi_cdc_multi_read_buf+0xc0>)
   85ab4:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   85ab6:	f835 2018 	ldrh.w	r2, [r5, r8, lsl #1]
	size -= copy_nb;
   85aba:	1b3f      	subs	r7, r7, r4
	udi_cdc_rx_pos[port] += copy_nb;
   85abc:	4414      	add	r4, r2
   85abe:	b2a4      	uxth	r4, r4
	udi_cdc_rx_start(port);
   85ac0:	4b0c      	ldr	r3, [pc, #48]	; (85af4 <udi_cdc_multi_read_buf+0xc4>)
   85ac2:	4640      	mov	r0, r8
	udi_cdc_rx_pos[port] += copy_nb;
   85ac4:	f825 4018 	strh.w	r4, [r5, r8, lsl #1]
	udi_cdc_rx_start(port);
   85ac8:	4798      	blx	r3
	if (size) {
   85aca:	9b01      	ldr	r3, [sp, #4]
   85acc:	2f00      	cmp	r7, #0
   85ace:	d1be      	bne.n	85a4e <udi_cdc_multi_read_buf+0x1e>
}
   85ad0:	4638      	mov	r0, r7
   85ad2:	b003      	add	sp, #12
   85ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85ad8:	20070b04 	.word	0x20070b04
   85adc:	20072ac8 	.word	0x20072ac8
   85ae0:	20072ac4 	.word	0x20072ac4
   85ae4:	20072abc 	.word	0x20072abc
   85ae8:	200722a8 	.word	0x200722a8
   85aec:	200722bc 	.word	0x200722bc
   85af0:	00085d49 	.word	0x00085d49
   85af4:	000857bd 	.word	0x000857bd

00085af8 <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   85af8:	4603      	mov	r3, r0
   85afa:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85afc:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85b00:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85b02:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85b06:	2100      	movs	r1, #0
   85b08:	4d13      	ldr	r5, [pc, #76]	; (85b58 <udi_cdc_multi_is_tx_ready+0x60>)
	buf_sel = udi_cdc_tx_buf_sel[port];
   85b0a:	4e14      	ldr	r6, [pc, #80]	; (85b5c <udi_cdc_multi_is_tx_ready+0x64>)
   85b0c:	7029      	strb	r1, [r5, #0]
   85b0e:	5cf2      	ldrb	r2, [r6, r3]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   85b10:	4813      	ldr	r0, [pc, #76]	; (85b60 <udi_cdc_multi_is_tx_ready+0x68>)
   85b12:	eb02 0c43 	add.w	ip, r2, r3, lsl #1
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   85b16:	f830 001c 	ldrh.w	r0, [r0, ip, lsl #1]
   85b1a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   85b1e:	d008      	beq.n	85b32 <udi_cdc_multi_is_tx_ready+0x3a>
   85b20:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
   85b22:	b924      	cbnz	r4, 85b2e <udi_cdc_multi_is_tx_ready+0x36>
		cpu_irq_enable();
   85b24:	2301      	movs	r3, #1
   85b26:	702b      	strb	r3, [r5, #0]
   85b28:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85b2c:	b662      	cpsie	i
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
}
   85b2e:	bcf0      	pop	{r4, r5, r6, r7}
   85b30:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
   85b32:	480c      	ldr	r0, [pc, #48]	; (85b64 <udi_cdc_multi_is_tx_ready+0x6c>)
   85b34:	5cc7      	ldrb	r7, [r0, r3]
   85b36:	f007 00ff 	and.w	r0, r7, #255	; 0xff
   85b3a:	b95f      	cbnz	r7, 85b54 <udi_cdc_multi_is_tx_ready+0x5c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   85b3c:	490a      	ldr	r1, [pc, #40]	; (85b68 <udi_cdc_multi_is_tx_ready+0x70>)
   85b3e:	5ccf      	ldrb	r7, [r1, r3]
   85b40:	2f00      	cmp	r7, #0
   85b42:	d1ee      	bne.n	85b22 <udi_cdc_multi_is_tx_ready+0x2a>
			udi_cdc_tx_both_buf_to_send[port] = true;
   85b44:	b2d2      	uxtb	r2, r2
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85b46:	fab2 f282 	clz	r2, r2
			udi_cdc_tx_both_buf_to_send[port] = true;
   85b4a:	2001      	movs	r0, #1
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85b4c:	0952      	lsrs	r2, r2, #5
			udi_cdc_tx_both_buf_to_send[port] = true;
   85b4e:	54c8      	strb	r0, [r1, r3]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85b50:	54f2      	strb	r2, [r6, r3]
			buf_sel_nb = 0;
   85b52:	e7e6      	b.n	85b22 <udi_cdc_multi_is_tx_ready+0x2a>
   85b54:	4608      	mov	r0, r1
   85b56:	e7e4      	b.n	85b22 <udi_cdc_multi_is_tx_ready+0x2a>
   85b58:	20070b04 	.word	0x20070b04
   85b5c:	200732e0 	.word	0x200732e0
   85b60:	200732d8 	.word	0x200732d8
   85b64:	200732e8 	.word	0x200732e8
   85b68:	20072ad4 	.word	0x20072ad4

00085b6c <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   85b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   85b70:	4b39      	ldr	r3, [pc, #228]	; (85c58 <udi_cdc_multi_putc+0xec>)
   85b72:	ebc0 06c0 	rsb	r6, r0, r0, lsl #3
   85b76:	4433      	add	r3, r6
   85b78:	799b      	ldrb	r3, [r3, #6]
   85b7a:	f04f 0801 	mov.w	r8, #1
   85b7e:	f1a3 0309 	sub.w	r3, r3, #9
   85b82:	fab3 f383 	clz	r3, r3
	cpu_irq_disable();
   85b86:	f04f 0e00 	mov.w	lr, #0
   85b8a:	4a34      	ldr	r2, [pc, #208]	; (85c5c <udi_cdc_multi_putc+0xf0>)
   85b8c:	4d34      	ldr	r5, [pc, #208]	; (85c60 <udi_cdc_multi_putc+0xf4>)
   85b8e:	4c35      	ldr	r4, [pc, #212]	; (85c64 <udi_cdc_multi_putc+0xf8>)
		if ((!udi_cdc_tx_trans_ongoing[port])
   85b90:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 85c68 <udi_cdc_multi_putc+0xfc>
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   85b94:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 85c6c <udi_cdc_multi_putc+0x100>
{
   85b98:	b083      	sub	sp, #12
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   85b9a:	095b      	lsrs	r3, r3, #5
   85b9c:	fa00 fc08 	lsl.w	ip, r0, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85ba0:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85ba4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85ba6:	f3bf 8f5f 	dmb	sy
   85baa:	f882 e000 	strb.w	lr, [r2]
	buf_sel = udi_cdc_tx_buf_sel[port];
   85bae:	5c2e      	ldrb	r6, [r5, r0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   85bb0:	eb0c 0a06 	add.w	sl, ip, r6
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   85bb4:	f834 a01a 	ldrh.w	sl, [r4, sl, lsl #1]
	buf_sel = udi_cdc_tx_buf_sel[port];
   85bb8:	b2f6      	uxtb	r6, r6
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   85bba:	f5ba 7f00 	cmp.w	sl, #512	; 0x200
   85bbe:	d024      	beq.n	85c0a <udi_cdc_multi_putc+0x9e>
	if (cpu_irq_is_enabled_flags(flags))
   85bc0:	b927      	cbnz	r7, 85bcc <udi_cdc_multi_putc+0x60>
		cpu_irq_enable();
   85bc2:	f882 8000 	strb.w	r8, [r2]
   85bc6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85bca:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85bcc:	f3ef 8610 	mrs	r6, PRIMASK
   85bd0:	9601      	str	r6, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   85bd2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85bd4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85bd8:	f882 e000 	strb.w	lr, [r2]
	buf_sel = udi_cdc_tx_buf_sel[port];
   85bdc:	5c2e      	ldrb	r6, [r5, r0]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   85bde:	4466      	add	r6, ip
   85be0:	f834 7016 	ldrh.w	r7, [r4, r6, lsl #1]
   85be4:	eb0b 2a46 	add.w	sl, fp, r6, lsl #9
   85be8:	f80a 1007 	strb.w	r1, [sl, r7]
   85bec:	3701      	adds	r7, #1
   85bee:	f824 7016 	strh.w	r7, [r4, r6, lsl #1]
	if (cpu_irq_is_enabled_flags(flags))
   85bf2:	9e01      	ldr	r6, [sp, #4]
   85bf4:	b11e      	cbz	r6, 85bfe <udi_cdc_multi_putc+0x92>
	cpu_irq_restore(flags);

	if (b_databit_9) {
   85bf6:	b363      	cbz	r3, 85c52 <udi_cdc_multi_putc+0xe6>
		// Send MSB
		b_databit_9 = false;
   85bf8:	2300      	movs	r3, #0
		value = value >> 8;
   85bfa:	1209      	asrs	r1, r1, #8
		goto udi_cdc_putc_process_one_byte;
   85bfc:	e7d0      	b.n	85ba0 <udi_cdc_multi_putc+0x34>
		cpu_irq_enable();
   85bfe:	f882 8000 	strb.w	r8, [r2]
   85c02:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85c06:	b662      	cpsie	i
}
   85c08:	e7f5      	b.n	85bf6 <udi_cdc_multi_putc+0x8a>
		if ((!udi_cdc_tx_trans_ongoing[port])
   85c0a:	f819 a000 	ldrb.w	sl, [r9, r0]
   85c0e:	f1ba 0f00 	cmp.w	sl, #0
   85c12:	d106      	bne.n	85c22 <udi_cdc_multi_putc+0xb6>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   85c14:	f8df a058 	ldr.w	sl, [pc, #88]	; 85c70 <udi_cdc_multi_putc+0x104>
   85c18:	f81a a000 	ldrb.w	sl, [sl, r0]
   85c1c:	f1ba 0f00 	cmp.w	sl, #0
   85c20:	d006      	beq.n	85c30 <udi_cdc_multi_putc+0xc4>
	if (cpu_irq_is_enabled_flags(flags))
   85c22:	b187      	cbz	r7, 85c46 <udi_cdc_multi_putc+0xda>
			return false;
   85c24:	2000      	movs	r0, #0
		if (!udi_cdc_data_running) {
   85c26:	4b13      	ldr	r3, [pc, #76]	; (85c74 <udi_cdc_multi_putc+0x108>)
   85c28:	781b      	ldrb	r3, [r3, #0]
	}
	return true;
}
   85c2a:	b003      	add	sp, #12
   85c2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85c30:	fab6 f686 	clz	r6, r6
			udi_cdc_tx_both_buf_to_send[port] = true;
   85c34:	f8df a038 	ldr.w	sl, [pc, #56]	; 85c70 <udi_cdc_multi_putc+0x104>
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85c38:	0976      	lsrs	r6, r6, #5
			udi_cdc_tx_both_buf_to_send[port] = true;
   85c3a:	f80a 8000 	strb.w	r8, [sl, r0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85c3e:	542e      	strb	r6, [r5, r0]
   85c40:	2f00      	cmp	r7, #0
   85c42:	d0be      	beq.n	85bc2 <udi_cdc_multi_putc+0x56>
   85c44:	e7c2      	b.n	85bcc <udi_cdc_multi_putc+0x60>
		cpu_irq_enable();
   85c46:	2301      	movs	r3, #1
   85c48:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   85c4a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85c4e:	b662      	cpsie	i
	return retval;
   85c50:	e7e8      	b.n	85c24 <udi_cdc_multi_putc+0xb8>
	return true;
   85c52:	2001      	movs	r0, #1
   85c54:	e7e9      	b.n	85c2a <udi_cdc_multi_putc+0xbe>
   85c56:	bf00      	nop
   85c58:	200722ac 	.word	0x200722ac
   85c5c:	20070b04 	.word	0x20070b04
   85c60:	200732e0 	.word	0x200732e0
   85c64:	200732d8 	.word	0x200732d8
   85c68:	200732e8 	.word	0x200732e8
   85c6c:	20072ad8 	.word	0x20072ad8
   85c70:	20072ad4 	.word	0x20072ad4
   85c74:	200722a8 	.word	0x200722a8

00085c78 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   85c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   85c7c:	b9a0      	cbnz	r0, 85ca8 <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
   85c7e:	2a00      	cmp	r2, #0
   85c80:	4690      	mov	r8, r2
   85c82:	dd0d      	ble.n	85ca0 <_read+0x28>
   85c84:	460c      	mov	r4, r1
   85c86:	4f0a      	ldr	r7, [pc, #40]	; (85cb0 <_read+0x38>)
   85c88:	4e0a      	ldr	r6, [pc, #40]	; (85cb4 <_read+0x3c>)
   85c8a:	188d      	adds	r5, r1, r2
		ptr_get(stdio_base, ptr);
   85c8c:	4621      	mov	r1, r4
   85c8e:	6838      	ldr	r0, [r7, #0]
   85c90:	6833      	ldr	r3, [r6, #0]
		ptr++;
   85c92:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
   85c94:	4798      	blx	r3
	for (; len > 0; --len) {
   85c96:	42ac      	cmp	r4, r5
   85c98:	d1f8      	bne.n	85c8c <_read+0x14>
		nChars++;
	}
	return nChars;
}
   85c9a:	4640      	mov	r0, r8
   85c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int nChars = 0;
   85ca0:	4680      	mov	r8, r0
}
   85ca2:	4640      	mov	r0, r8
   85ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   85ca8:	f04f 38ff 	mov.w	r8, #4294967295
   85cac:	e7f5      	b.n	85c9a <_read+0x22>
   85cae:	bf00      	nop
   85cb0:	200721b0 	.word	0x200721b0
   85cb4:	20073300 	.word	0x20073300

00085cb8 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   85cb8:	b410      	push	{r4}

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   85cba:	f04f 33ff 	mov.w	r3, #4294967295
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   85cbe:	2402      	movs	r4, #2
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   85cc0:	ea4f 1c81 	mov.w	ip, r1, lsl #6
   85cc4:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   85cc8:	f840 400c 	str.w	r4, [r0, ip]
	tc_channel->TC_IDR = 0xFFFFFFFF;
   85ccc:	628b      	str	r3, [r1, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   85cce:	6a0b      	ldr	r3, [r1, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   85cd0:	604a      	str	r2, [r1, #4]
}
   85cd2:	bc10      	pop	{r4}
   85cd4:	4770      	bx	lr
   85cd6:	bf00      	nop

00085cd8 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   85cd8:	2305      	movs	r3, #5
   85cda:	0189      	lsls	r1, r1, #6
   85cdc:	5043      	str	r3, [r0, r1]
}
   85cde:	4770      	bx	lr

00085ce0 <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
   85ce0:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   85ce4:	6142      	str	r2, [r0, #20]
}
   85ce6:	4770      	bx	lr

00085ce8 <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   85ce8:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   85cec:	61c2      	str	r2, [r0, #28]
}
   85cee:	4770      	bx	lr

00085cf0 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   85cf0:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   85cf4:	6242      	str	r2, [r0, #36]	; 0x24
}
   85cf6:	4770      	bx	lr

00085cf8 <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   85cf8:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	return tc_channel->TC_SR;
   85cfc:	6a00      	ldr	r0, [r0, #32]
}
   85cfe:	4770      	bx	lr

00085d00 <__libc_init_array>:
   85d00:	b570      	push	{r4, r5, r6, lr}
   85d02:	4e0d      	ldr	r6, [pc, #52]	; (85d38 <__libc_init_array+0x38>)
   85d04:	4d0d      	ldr	r5, [pc, #52]	; (85d3c <__libc_init_array+0x3c>)
   85d06:	1b76      	subs	r6, r6, r5
   85d08:	10b6      	asrs	r6, r6, #2
   85d0a:	d006      	beq.n	85d1a <__libc_init_array+0x1a>
   85d0c:	2400      	movs	r4, #0
   85d0e:	f855 3b04 	ldr.w	r3, [r5], #4
   85d12:	3401      	adds	r4, #1
   85d14:	4798      	blx	r3
   85d16:	42a6      	cmp	r6, r4
   85d18:	d1f9      	bne.n	85d0e <__libc_init_array+0xe>
   85d1a:	4e09      	ldr	r6, [pc, #36]	; (85d40 <__libc_init_array+0x40>)
   85d1c:	4d09      	ldr	r5, [pc, #36]	; (85d44 <__libc_init_array+0x44>)
   85d1e:	f007 f8b7 	bl	8ce90 <_init>
   85d22:	1b76      	subs	r6, r6, r5
   85d24:	10b6      	asrs	r6, r6, #2
   85d26:	d006      	beq.n	85d36 <__libc_init_array+0x36>
   85d28:	2400      	movs	r4, #0
   85d2a:	f855 3b04 	ldr.w	r3, [r5], #4
   85d2e:	3401      	adds	r4, #1
   85d30:	4798      	blx	r3
   85d32:	42a6      	cmp	r6, r4
   85d34:	d1f9      	bne.n	85d2a <__libc_init_array+0x2a>
   85d36:	bd70      	pop	{r4, r5, r6, pc}
   85d38:	0008ce9c 	.word	0x0008ce9c
   85d3c:	0008ce9c 	.word	0x0008ce9c
   85d40:	0008cea4 	.word	0x0008cea4
   85d44:	0008ce9c 	.word	0x0008ce9c

00085d48 <memcpy>:
   85d48:	4684      	mov	ip, r0
   85d4a:	ea41 0300 	orr.w	r3, r1, r0
   85d4e:	f013 0303 	ands.w	r3, r3, #3
   85d52:	d149      	bne.n	85de8 <memcpy+0xa0>
   85d54:	3a40      	subs	r2, #64	; 0x40
   85d56:	d323      	bcc.n	85da0 <memcpy+0x58>
   85d58:	680b      	ldr	r3, [r1, #0]
   85d5a:	6003      	str	r3, [r0, #0]
   85d5c:	684b      	ldr	r3, [r1, #4]
   85d5e:	6043      	str	r3, [r0, #4]
   85d60:	688b      	ldr	r3, [r1, #8]
   85d62:	6083      	str	r3, [r0, #8]
   85d64:	68cb      	ldr	r3, [r1, #12]
   85d66:	60c3      	str	r3, [r0, #12]
   85d68:	690b      	ldr	r3, [r1, #16]
   85d6a:	6103      	str	r3, [r0, #16]
   85d6c:	694b      	ldr	r3, [r1, #20]
   85d6e:	6143      	str	r3, [r0, #20]
   85d70:	698b      	ldr	r3, [r1, #24]
   85d72:	6183      	str	r3, [r0, #24]
   85d74:	69cb      	ldr	r3, [r1, #28]
   85d76:	61c3      	str	r3, [r0, #28]
   85d78:	6a0b      	ldr	r3, [r1, #32]
   85d7a:	6203      	str	r3, [r0, #32]
   85d7c:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85d7e:	6243      	str	r3, [r0, #36]	; 0x24
   85d80:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   85d82:	6283      	str	r3, [r0, #40]	; 0x28
   85d84:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85d86:	62c3      	str	r3, [r0, #44]	; 0x2c
   85d88:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85d8a:	6303      	str	r3, [r0, #48]	; 0x30
   85d8c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85d8e:	6343      	str	r3, [r0, #52]	; 0x34
   85d90:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85d92:	6383      	str	r3, [r0, #56]	; 0x38
   85d94:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85d96:	63c3      	str	r3, [r0, #60]	; 0x3c
   85d98:	3040      	adds	r0, #64	; 0x40
   85d9a:	3140      	adds	r1, #64	; 0x40
   85d9c:	3a40      	subs	r2, #64	; 0x40
   85d9e:	d2db      	bcs.n	85d58 <memcpy+0x10>
   85da0:	3230      	adds	r2, #48	; 0x30
   85da2:	d30b      	bcc.n	85dbc <memcpy+0x74>
   85da4:	680b      	ldr	r3, [r1, #0]
   85da6:	6003      	str	r3, [r0, #0]
   85da8:	684b      	ldr	r3, [r1, #4]
   85daa:	6043      	str	r3, [r0, #4]
   85dac:	688b      	ldr	r3, [r1, #8]
   85dae:	6083      	str	r3, [r0, #8]
   85db0:	68cb      	ldr	r3, [r1, #12]
   85db2:	60c3      	str	r3, [r0, #12]
   85db4:	3010      	adds	r0, #16
   85db6:	3110      	adds	r1, #16
   85db8:	3a10      	subs	r2, #16
   85dba:	d2f3      	bcs.n	85da4 <memcpy+0x5c>
   85dbc:	320c      	adds	r2, #12
   85dbe:	d305      	bcc.n	85dcc <memcpy+0x84>
   85dc0:	f851 3b04 	ldr.w	r3, [r1], #4
   85dc4:	f840 3b04 	str.w	r3, [r0], #4
   85dc8:	3a04      	subs	r2, #4
   85dca:	d2f9      	bcs.n	85dc0 <memcpy+0x78>
   85dcc:	3204      	adds	r2, #4
   85dce:	d008      	beq.n	85de2 <memcpy+0x9a>
   85dd0:	07d2      	lsls	r2, r2, #31
   85dd2:	bf1c      	itt	ne
   85dd4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85dd8:	f800 3b01 	strbne.w	r3, [r0], #1
   85ddc:	d301      	bcc.n	85de2 <memcpy+0x9a>
   85dde:	880b      	ldrh	r3, [r1, #0]
   85de0:	8003      	strh	r3, [r0, #0]
   85de2:	4660      	mov	r0, ip
   85de4:	4770      	bx	lr
   85de6:	bf00      	nop
   85de8:	2a08      	cmp	r2, #8
   85dea:	d313      	bcc.n	85e14 <memcpy+0xcc>
   85dec:	078b      	lsls	r3, r1, #30
   85dee:	d0b1      	beq.n	85d54 <memcpy+0xc>
   85df0:	f010 0303 	ands.w	r3, r0, #3
   85df4:	d0ae      	beq.n	85d54 <memcpy+0xc>
   85df6:	f1c3 0304 	rsb	r3, r3, #4
   85dfa:	1ad2      	subs	r2, r2, r3
   85dfc:	07db      	lsls	r3, r3, #31
   85dfe:	bf1c      	itt	ne
   85e00:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85e04:	f800 3b01 	strbne.w	r3, [r0], #1
   85e08:	d3a4      	bcc.n	85d54 <memcpy+0xc>
   85e0a:	f831 3b02 	ldrh.w	r3, [r1], #2
   85e0e:	f820 3b02 	strh.w	r3, [r0], #2
   85e12:	e79f      	b.n	85d54 <memcpy+0xc>
   85e14:	3a04      	subs	r2, #4
   85e16:	d3d9      	bcc.n	85dcc <memcpy+0x84>
   85e18:	3a01      	subs	r2, #1
   85e1a:	f811 3b01 	ldrb.w	r3, [r1], #1
   85e1e:	f800 3b01 	strb.w	r3, [r0], #1
   85e22:	d2f9      	bcs.n	85e18 <memcpy+0xd0>
   85e24:	780b      	ldrb	r3, [r1, #0]
   85e26:	7003      	strb	r3, [r0, #0]
   85e28:	784b      	ldrb	r3, [r1, #1]
   85e2a:	7043      	strb	r3, [r0, #1]
   85e2c:	788b      	ldrb	r3, [r1, #2]
   85e2e:	7083      	strb	r3, [r0, #2]
   85e30:	4660      	mov	r0, ip
   85e32:	4770      	bx	lr

00085e34 <memset>:
   85e34:	0783      	lsls	r3, r0, #30
   85e36:	b530      	push	{r4, r5, lr}
   85e38:	d048      	beq.n	85ecc <memset+0x98>
   85e3a:	1e54      	subs	r4, r2, #1
   85e3c:	2a00      	cmp	r2, #0
   85e3e:	d03f      	beq.n	85ec0 <memset+0x8c>
   85e40:	4603      	mov	r3, r0
   85e42:	b2ca      	uxtb	r2, r1
   85e44:	e001      	b.n	85e4a <memset+0x16>
   85e46:	3c01      	subs	r4, #1
   85e48:	d33a      	bcc.n	85ec0 <memset+0x8c>
   85e4a:	f803 2b01 	strb.w	r2, [r3], #1
   85e4e:	079d      	lsls	r5, r3, #30
   85e50:	d1f9      	bne.n	85e46 <memset+0x12>
   85e52:	2c03      	cmp	r4, #3
   85e54:	d92d      	bls.n	85eb2 <memset+0x7e>
   85e56:	b2cd      	uxtb	r5, r1
   85e58:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   85e5c:	2c0f      	cmp	r4, #15
   85e5e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   85e62:	d936      	bls.n	85ed2 <memset+0x9e>
   85e64:	f1a4 0210 	sub.w	r2, r4, #16
   85e68:	f022 0c0f 	bic.w	ip, r2, #15
   85e6c:	f103 0e20 	add.w	lr, r3, #32
   85e70:	44e6      	add	lr, ip
   85e72:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   85e76:	f103 0210 	add.w	r2, r3, #16
   85e7a:	e942 5504 	strd	r5, r5, [r2, #-16]
   85e7e:	e942 5502 	strd	r5, r5, [r2, #-8]
   85e82:	3210      	adds	r2, #16
   85e84:	4572      	cmp	r2, lr
   85e86:	d1f8      	bne.n	85e7a <memset+0x46>
   85e88:	f10c 0201 	add.w	r2, ip, #1
   85e8c:	f014 0f0c 	tst.w	r4, #12
   85e90:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   85e94:	f004 0c0f 	and.w	ip, r4, #15
   85e98:	d013      	beq.n	85ec2 <memset+0x8e>
   85e9a:	f1ac 0304 	sub.w	r3, ip, #4
   85e9e:	f023 0303 	bic.w	r3, r3, #3
   85ea2:	3304      	adds	r3, #4
   85ea4:	4413      	add	r3, r2
   85ea6:	f842 5b04 	str.w	r5, [r2], #4
   85eaa:	4293      	cmp	r3, r2
   85eac:	d1fb      	bne.n	85ea6 <memset+0x72>
   85eae:	f00c 0403 	and.w	r4, ip, #3
   85eb2:	b12c      	cbz	r4, 85ec0 <memset+0x8c>
   85eb4:	b2ca      	uxtb	r2, r1
   85eb6:	441c      	add	r4, r3
   85eb8:	f803 2b01 	strb.w	r2, [r3], #1
   85ebc:	429c      	cmp	r4, r3
   85ebe:	d1fb      	bne.n	85eb8 <memset+0x84>
   85ec0:	bd30      	pop	{r4, r5, pc}
   85ec2:	4664      	mov	r4, ip
   85ec4:	4613      	mov	r3, r2
   85ec6:	2c00      	cmp	r4, #0
   85ec8:	d1f4      	bne.n	85eb4 <memset+0x80>
   85eca:	e7f9      	b.n	85ec0 <memset+0x8c>
   85ecc:	4603      	mov	r3, r0
   85ece:	4614      	mov	r4, r2
   85ed0:	e7bf      	b.n	85e52 <memset+0x1e>
   85ed2:	461a      	mov	r2, r3
   85ed4:	46a4      	mov	ip, r4
   85ed6:	e7e0      	b.n	85e9a <memset+0x66>

00085ed8 <sprintf>:
   85ed8:	b40e      	push	{r1, r2, r3}
   85eda:	b530      	push	{r4, r5, lr}
   85edc:	4604      	mov	r4, r0
   85ede:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   85ee2:	b09c      	sub	sp, #112	; 0x70
   85ee4:	4a0b      	ldr	r2, [pc, #44]	; (85f14 <sprintf+0x3c>)
   85ee6:	ab1f      	add	r3, sp, #124	; 0x7c
   85ee8:	490b      	ldr	r1, [pc, #44]	; (85f18 <sprintf+0x40>)
   85eea:	9205      	str	r2, [sp, #20]
   85eec:	f853 2b04 	ldr.w	r2, [r3], #4
   85ef0:	6808      	ldr	r0, [r1, #0]
   85ef2:	a902      	add	r1, sp, #8
   85ef4:	e9cd 3401 	strd	r3, r4, [sp, #4]
   85ef8:	9507      	str	r5, [sp, #28]
   85efa:	9504      	str	r5, [sp, #16]
   85efc:	9406      	str	r4, [sp, #24]
   85efe:	f000 f86f 	bl	85fe0 <_svfprintf_r>
   85f02:	2200      	movs	r2, #0
   85f04:	9b02      	ldr	r3, [sp, #8]
   85f06:	701a      	strb	r2, [r3, #0]
   85f08:	b01c      	add	sp, #112	; 0x70
   85f0a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   85f0e:	b003      	add	sp, #12
   85f10:	4770      	bx	lr
   85f12:	bf00      	nop
   85f14:	ffff0208 	.word	0xffff0208
   85f18:	20070b30 	.word	0x20070b30

00085f1c <strlen>:
   85f1c:	f020 0103 	bic.w	r1, r0, #3
   85f20:	f010 0003 	ands.w	r0, r0, #3
   85f24:	f1c0 0000 	rsb	r0, r0, #0
   85f28:	f851 3b04 	ldr.w	r3, [r1], #4
   85f2c:	f100 0c04 	add.w	ip, r0, #4
   85f30:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   85f34:	f06f 0200 	mvn.w	r2, #0
   85f38:	bf1c      	itt	ne
   85f3a:	fa22 f20c 	lsrne.w	r2, r2, ip
   85f3e:	4313      	orrne	r3, r2
   85f40:	f04f 0c01 	mov.w	ip, #1
   85f44:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   85f48:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   85f4c:	eba3 020c 	sub.w	r2, r3, ip
   85f50:	ea22 0203 	bic.w	r2, r2, r3
   85f54:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   85f58:	bf04      	itt	eq
   85f5a:	f851 3b04 	ldreq.w	r3, [r1], #4
   85f5e:	3004      	addeq	r0, #4
   85f60:	d0f4      	beq.n	85f4c <strlen+0x30>
   85f62:	f1c2 0100 	rsb	r1, r2, #0
   85f66:	ea02 0201 	and.w	r2, r2, r1
   85f6a:	fab2 f282 	clz	r2, r2
   85f6e:	f1c2 021f 	rsb	r2, r2, #31
   85f72:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   85f76:	4770      	bx	lr

00085f78 <strncpy>:
   85f78:	b530      	push	{r4, r5, lr}
   85f7a:	ea40 0401 	orr.w	r4, r0, r1
   85f7e:	07a3      	lsls	r3, r4, #30
   85f80:	d122      	bne.n	85fc8 <strncpy+0x50>
   85f82:	2a03      	cmp	r2, #3
   85f84:	d920      	bls.n	85fc8 <strncpy+0x50>
   85f86:	460b      	mov	r3, r1
   85f88:	4684      	mov	ip, r0
   85f8a:	4619      	mov	r1, r3
   85f8c:	f853 5b04 	ldr.w	r5, [r3], #4
   85f90:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   85f94:	ea24 0405 	bic.w	r4, r4, r5
   85f98:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   85f9c:	d115      	bne.n	85fca <strncpy+0x52>
   85f9e:	3a04      	subs	r2, #4
   85fa0:	2a03      	cmp	r2, #3
   85fa2:	4619      	mov	r1, r3
   85fa4:	f84c 5b04 	str.w	r5, [ip], #4
   85fa8:	d8ef      	bhi.n	85f8a <strncpy+0x12>
   85faa:	f101 3eff 	add.w	lr, r1, #4294967295
   85fae:	b152      	cbz	r2, 85fc6 <strncpy+0x4e>
   85fb0:	4663      	mov	r3, ip
   85fb2:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   85fb6:	1e54      	subs	r4, r2, #1
   85fb8:	f803 1b01 	strb.w	r1, [r3], #1
   85fbc:	b141      	cbz	r1, 85fd0 <strncpy+0x58>
   85fbe:	4622      	mov	r2, r4
   85fc0:	469c      	mov	ip, r3
   85fc2:	2a00      	cmp	r2, #0
   85fc4:	d1f4      	bne.n	85fb0 <strncpy+0x38>
   85fc6:	bd30      	pop	{r4, r5, pc}
   85fc8:	4684      	mov	ip, r0
   85fca:	f101 3eff 	add.w	lr, r1, #4294967295
   85fce:	e7ee      	b.n	85fae <strncpy+0x36>
   85fd0:	4462      	add	r2, ip
   85fd2:	2c00      	cmp	r4, #0
   85fd4:	d0f7      	beq.n	85fc6 <strncpy+0x4e>
   85fd6:	f803 1b01 	strb.w	r1, [r3], #1
   85fda:	4293      	cmp	r3, r2
   85fdc:	d1fb      	bne.n	85fd6 <strncpy+0x5e>
   85fde:	bd30      	pop	{r4, r5, pc}

00085fe0 <_svfprintf_r>:
   85fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85fe4:	b0d5      	sub	sp, #340	; 0x154
   85fe6:	460c      	mov	r4, r1
   85fe8:	910c      	str	r1, [sp, #48]	; 0x30
   85fea:	4691      	mov	r9, r2
   85fec:	930e      	str	r3, [sp, #56]	; 0x38
   85fee:	900a      	str	r0, [sp, #40]	; 0x28
   85ff0:	f002 feba 	bl	88d68 <_localeconv_r>
   85ff4:	6803      	ldr	r3, [r0, #0]
   85ff6:	4618      	mov	r0, r3
   85ff8:	9317      	str	r3, [sp, #92]	; 0x5c
   85ffa:	f7ff ff8f 	bl	85f1c <strlen>
   85ffe:	89a3      	ldrh	r3, [r4, #12]
   86000:	9016      	str	r0, [sp, #88]	; 0x58
   86002:	0619      	lsls	r1, r3, #24
   86004:	d503      	bpl.n	8600e <_svfprintf_r+0x2e>
   86006:	6923      	ldr	r3, [r4, #16]
   86008:	2b00      	cmp	r3, #0
   8600a:	f000 878f 	beq.w	86f2c <_svfprintf_r+0xf4c>
   8600e:	2400      	movs	r4, #0
   86010:	ab2b      	add	r3, sp, #172	; 0xac
   86012:	4622      	mov	r2, r4
   86014:	4698      	mov	r8, r3
   86016:	464d      	mov	r5, r9
   86018:	e9cd 4429 	strd	r4, r4, [sp, #164]	; 0xa4
   8601c:	9328      	str	r3, [sp, #160]	; 0xa0
   8601e:	9412      	str	r4, [sp, #72]	; 0x48
   86020:	2300      	movs	r3, #0
   86022:	2400      	movs	r4, #0
   86024:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   86028:	782b      	ldrb	r3, [r5, #0]
   8602a:	e9cd 2219 	strd	r2, r2, [sp, #100]	; 0x64
   8602e:	e9cd 221b 	strd	r2, r2, [sp, #108]	; 0x6c
   86032:	9218      	str	r2, [sp, #96]	; 0x60
   86034:	9208      	str	r2, [sp, #32]
   86036:	2b00      	cmp	r3, #0
   86038:	f000 81ce 	beq.w	863d8 <_svfprintf_r+0x3f8>
   8603c:	46aa      	mov	sl, r5
   8603e:	e004      	b.n	8604a <_svfprintf_r+0x6a>
   86040:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
   86044:	2b00      	cmp	r3, #0
   86046:	f000 8109 	beq.w	8625c <_svfprintf_r+0x27c>
   8604a:	2b25      	cmp	r3, #37	; 0x25
   8604c:	d1f8      	bne.n	86040 <_svfprintf_r+0x60>
   8604e:	ebba 0605 	subs.w	r6, sl, r5
   86052:	f040 8107 	bne.w	86264 <_svfprintf_r+0x284>
   86056:	f89a 3000 	ldrb.w	r3, [sl]
   8605a:	2b00      	cmp	r3, #0
   8605c:	f000 81bc 	beq.w	863d8 <_svfprintf_r+0x3f8>
   86060:	2300      	movs	r3, #0
   86062:	f04f 32ff 	mov.w	r2, #4294967295
   86066:	f04f 092b 	mov.w	r9, #43	; 0x2b
   8606a:	2420      	movs	r4, #32
   8606c:	461f      	mov	r7, r3
   8606e:	f89a 6001 	ldrb.w	r6, [sl, #1]
   86072:	9207      	str	r2, [sp, #28]
   86074:	f10a 0a01 	add.w	sl, sl, #1
   86078:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   8607c:	9309      	str	r3, [sp, #36]	; 0x24
   8607e:	f10a 0a01 	add.w	sl, sl, #1
   86082:	f1a6 0320 	sub.w	r3, r6, #32
   86086:	2b5a      	cmp	r3, #90	; 0x5a
   86088:	f200 8120 	bhi.w	862cc <_svfprintf_r+0x2ec>
   8608c:	e8df f013 	tbh	[pc, r3, lsl #1]
   86090:	011e02ca 	.word	0x011e02ca
   86094:	02c5011e 	.word	0x02c5011e
   86098:	011e011e 	.word	0x011e011e
   8609c:	02a3011e 	.word	0x02a3011e
   860a0:	011e011e 	.word	0x011e011e
   860a4:	02f3006a 	.word	0x02f3006a
   860a8:	0247011e 	.word	0x0247011e
   860ac:	011e02d9 	.word	0x011e02d9
   860b0:	005b02d4 	.word	0x005b02d4
   860b4:	005b005b 	.word	0x005b005b
   860b8:	005b005b 	.word	0x005b005b
   860bc:	005b005b 	.word	0x005b005b
   860c0:	005b005b 	.word	0x005b005b
   860c4:	011e011e 	.word	0x011e011e
   860c8:	011e011e 	.word	0x011e011e
   860cc:	011e011e 	.word	0x011e011e
   860d0:	01b0011e 	.word	0x01b0011e
   860d4:	020b011e 	.word	0x020b011e
   860d8:	01b0007a 	.word	0x01b0007a
   860dc:	01b001b0 	.word	0x01b001b0
   860e0:	011e011e 	.word	0x011e011e
   860e4:	011e011e 	.word	0x011e011e
   860e8:	011e029e 	.word	0x011e029e
   860ec:	00b6011e 	.word	0x00b6011e
   860f0:	011e011e 	.word	0x011e011e
   860f4:	0219011e 	.word	0x0219011e
   860f8:	024c011e 	.word	0x024c011e
   860fc:	011e011e 	.word	0x011e011e
   86100:	011e073f 	.word	0x011e073f
   86104:	011e011e 	.word	0x011e011e
   86108:	011e011e 	.word	0x011e011e
   8610c:	011e011e 	.word	0x011e011e
   86110:	01b0011e 	.word	0x01b0011e
   86114:	020b011e 	.word	0x020b011e
   86118:	01b0007c 	.word	0x01b0007c
   8611c:	01b001b0 	.word	0x01b001b0
   86120:	007c0291 	.word	0x007c0291
   86124:	011e0075 	.word	0x011e0075
   86128:	011e0284 	.word	0x011e0284
   8612c:	00b80270 	.word	0x00b80270
   86130:	0075025e 	.word	0x0075025e
   86134:	0219011e 	.word	0x0219011e
   86138:	071c0072 	.word	0x071c0072
   8613c:	011e011e 	.word	0x011e011e
   86140:	011e071f 	.word	0x011e071f
   86144:	0072      	.short	0x0072
   86146:	2200      	movs	r2, #0
   86148:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8614c:	f81a 6b01 	ldrb.w	r6, [sl], #1
   86150:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86154:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   86158:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8615c:	2b09      	cmp	r3, #9
   8615e:	d9f5      	bls.n	8614c <_svfprintf_r+0x16c>
   86160:	9209      	str	r2, [sp, #36]	; 0x24
   86162:	e78e      	b.n	86082 <_svfprintf_r+0xa2>
   86164:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86166:	f853 2b04 	ldr.w	r2, [r3], #4
   8616a:	2a00      	cmp	r2, #0
   8616c:	9209      	str	r2, [sp, #36]	; 0x24
   8616e:	930e      	str	r3, [sp, #56]	; 0x38
   86170:	f2c0 81d2 	blt.w	86518 <_svfprintf_r+0x538>
   86174:	f89a 6000 	ldrb.w	r6, [sl]
   86178:	e781      	b.n	8607e <_svfprintf_r+0x9e>
   8617a:	f89a 6000 	ldrb.w	r6, [sl]
   8617e:	f047 0720 	orr.w	r7, r7, #32
   86182:	e77c      	b.n	8607e <_svfprintf_r+0x9e>
   86184:	f047 0710 	orr.w	r7, r7, #16
   86188:	06ba      	lsls	r2, r7, #26
   8618a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8618c:	f140 817d 	bpl.w	8648a <_svfprintf_r+0x4aa>
   86190:	3307      	adds	r3, #7
   86192:	f023 0307 	bic.w	r3, r3, #7
   86196:	461a      	mov	r2, r3
   86198:	685b      	ldr	r3, [r3, #4]
   8619a:	f852 4b08 	ldr.w	r4, [r2], #8
   8619e:	4699      	mov	r9, r3
   861a0:	920e      	str	r2, [sp, #56]	; 0x38
   861a2:	2b00      	cmp	r3, #0
   861a4:	f2c0 857f 	blt.w	86ca6 <_svfprintf_r+0xcc6>
   861a8:	9b07      	ldr	r3, [sp, #28]
   861aa:	3301      	adds	r3, #1
   861ac:	f001 8039 	beq.w	87222 <_svfprintf_r+0x1242>
   861b0:	ea54 0309 	orrs.w	r3, r4, r9
   861b4:	f027 0b80 	bic.w	fp, r7, #128	; 0x80
   861b8:	f000 8505 	beq.w	86bc6 <_svfprintf_r+0xbe6>
   861bc:	2c0a      	cmp	r4, #10
   861be:	f179 0300 	sbcs.w	r3, r9, #0
   861c2:	f080 8793 	bcs.w	870ec <_svfprintf_r+0x110c>
   861c6:	2301      	movs	r3, #1
   861c8:	465f      	mov	r7, fp
   861ca:	3430      	adds	r4, #48	; 0x30
   861cc:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
   861d0:	930b      	str	r3, [sp, #44]	; 0x2c
   861d2:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   861d6:	9a07      	ldr	r2, [sp, #28]
   861d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   861da:	2300      	movs	r3, #0
   861dc:	428a      	cmp	r2, r1
   861de:	bfb8      	it	lt
   861e0:	460a      	movlt	r2, r1
   861e2:	9206      	str	r2, [sp, #24]
   861e4:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   861e8:	930d      	str	r3, [sp, #52]	; 0x34
   861ea:	930f      	str	r3, [sp, #60]	; 0x3c
   861ec:	9313      	str	r3, [sp, #76]	; 0x4c
   861ee:	9310      	str	r3, [sp, #64]	; 0x40
   861f0:	2a00      	cmp	r2, #0
   861f2:	d07c      	beq.n	862ee <_svfprintf_r+0x30e>
   861f4:	9b06      	ldr	r3, [sp, #24]
   861f6:	3301      	adds	r3, #1
   861f8:	9306      	str	r3, [sp, #24]
   861fa:	e078      	b.n	862ee <_svfprintf_r+0x30e>
   861fc:	f047 0710 	orr.w	r7, r7, #16
   86200:	f017 0920 	ands.w	r9, r7, #32
   86204:	f000 8132 	beq.w	8646c <_svfprintf_r+0x48c>
   86208:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8620a:	3307      	adds	r3, #7
   8620c:	f023 0307 	bic.w	r3, r3, #7
   86210:	f8d3 9004 	ldr.w	r9, [r3, #4]
   86214:	f853 4b08 	ldr.w	r4, [r3], #8
   86218:	930e      	str	r3, [sp, #56]	; 0x38
   8621a:	2300      	movs	r3, #0
   8621c:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   86220:	2200      	movs	r2, #0
   86222:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   86226:	9a07      	ldr	r2, [sp, #28]
   86228:	1c51      	adds	r1, r2, #1
   8622a:	f000 822a 	beq.w	86682 <_svfprintf_r+0x6a2>
   8622e:	ea54 0109 	orrs.w	r1, r4, r9
   86232:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
   86236:	f040 8223 	bne.w	86680 <_svfprintf_r+0x6a0>
   8623a:	2a00      	cmp	r2, #0
   8623c:	f041 802b 	bne.w	87296 <_svfprintf_r+0x12b6>
   86240:	2b00      	cmp	r3, #0
   86242:	f040 84c5 	bne.w	86bd0 <_svfprintf_r+0xbf0>
   86246:	f01b 0301 	ands.w	r3, fp, #1
   8624a:	930b      	str	r3, [sp, #44]	; 0x2c
   8624c:	f000 8554 	beq.w	86cf8 <_svfprintf_r+0xd18>
   86250:	2330      	movs	r3, #48	; 0x30
   86252:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   86256:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
   8625a:	e7bc      	b.n	861d6 <_svfprintf_r+0x1f6>
   8625c:	ebba 0605 	subs.w	r6, sl, r5
   86260:	f000 80ba 	beq.w	863d8 <_svfprintf_r+0x3f8>
   86264:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   86266:	e9c8 5600 	strd	r5, r6, [r8]
   8626a:	4433      	add	r3, r6
   8626c:	932a      	str	r3, [sp, #168]	; 0xa8
   8626e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86270:	3301      	adds	r3, #1
   86272:	2b07      	cmp	r3, #7
   86274:	9329      	str	r3, [sp, #164]	; 0xa4
   86276:	dc05      	bgt.n	86284 <_svfprintf_r+0x2a4>
   86278:	f108 0808 	add.w	r8, r8, #8
   8627c:	9b08      	ldr	r3, [sp, #32]
   8627e:	4433      	add	r3, r6
   86280:	9308      	str	r3, [sp, #32]
   86282:	e6e8      	b.n	86056 <_svfprintf_r+0x76>
   86284:	990c      	ldr	r1, [sp, #48]	; 0x30
   86286:	980a      	ldr	r0, [sp, #40]	; 0x28
   86288:	aa28      	add	r2, sp, #160	; 0xa0
   8628a:	f003 fc67 	bl	89b5c <__ssprint_r>
   8628e:	b980      	cbnz	r0, 862b2 <_svfprintf_r+0x2d2>
   86290:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86294:	e7f2      	b.n	8627c <_svfprintf_r+0x29c>
   86296:	990c      	ldr	r1, [sp, #48]	; 0x30
   86298:	980a      	ldr	r0, [sp, #40]	; 0x28
   8629a:	aa28      	add	r2, sp, #160	; 0xa0
   8629c:	f003 fc5e 	bl	89b5c <__ssprint_r>
   862a0:	2800      	cmp	r0, #0
   862a2:	f000 808a 	beq.w	863ba <_svfprintf_r+0x3da>
   862a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   862a8:	b11b      	cbz	r3, 862b2 <_svfprintf_r+0x2d2>
   862aa:	990d      	ldr	r1, [sp, #52]	; 0x34
   862ac:	980a      	ldr	r0, [sp, #40]	; 0x28
   862ae:	f002 fc5b 	bl	88b68 <_free_r>
   862b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   862b4:	899b      	ldrh	r3, [r3, #12]
   862b6:	f013 0f40 	tst.w	r3, #64	; 0x40
   862ba:	9b08      	ldr	r3, [sp, #32]
   862bc:	bf18      	it	ne
   862be:	f04f 33ff 	movne.w	r3, #4294967295
   862c2:	9308      	str	r3, [sp, #32]
   862c4:	9808      	ldr	r0, [sp, #32]
   862c6:	b055      	add	sp, #340	; 0x154
   862c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   862cc:	2e00      	cmp	r6, #0
   862ce:	f000 8083 	beq.w	863d8 <_svfprintf_r+0x3f8>
   862d2:	2301      	movs	r3, #1
   862d4:	2200      	movs	r2, #0
   862d6:	f88d 60ec 	strb.w	r6, [sp, #236]	; 0xec
   862da:	9306      	str	r3, [sp, #24]
   862dc:	ad3b      	add	r5, sp, #236	; 0xec
   862de:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   862e2:	930b      	str	r3, [sp, #44]	; 0x2c
   862e4:	920d      	str	r2, [sp, #52]	; 0x34
   862e6:	9207      	str	r2, [sp, #28]
   862e8:	920f      	str	r2, [sp, #60]	; 0x3c
   862ea:	9213      	str	r2, [sp, #76]	; 0x4c
   862ec:	9210      	str	r2, [sp, #64]	; 0x40
   862ee:	f017 0302 	ands.w	r3, r7, #2
   862f2:	d002      	beq.n	862fa <_svfprintf_r+0x31a>
   862f4:	9906      	ldr	r1, [sp, #24]
   862f6:	3102      	adds	r1, #2
   862f8:	9106      	str	r1, [sp, #24]
   862fa:	f017 0b84 	ands.w	fp, r7, #132	; 0x84
   862fe:	d107      	bne.n	86310 <_svfprintf_r+0x330>
   86300:	9909      	ldr	r1, [sp, #36]	; 0x24
   86302:	9806      	ldr	r0, [sp, #24]
   86304:	eba1 0900 	sub.w	r9, r1, r0
   86308:	f1b9 0f00 	cmp.w	r9, #0
   8630c:	f300 8336 	bgt.w	8697c <_svfprintf_r+0x99c>
   86310:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86312:	b182      	cbz	r2, 86336 <_svfprintf_r+0x356>
   86314:	2201      	movs	r2, #1
   86316:	f8c8 2004 	str.w	r2, [r8, #4]
   8631a:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   8631c:	3401      	adds	r4, #1
   8631e:	3201      	adds	r2, #1
   86320:	f10d 0183 	add.w	r1, sp, #131	; 0x83
   86324:	2a07      	cmp	r2, #7
   86326:	942a      	str	r4, [sp, #168]	; 0xa8
   86328:	9229      	str	r2, [sp, #164]	; 0xa4
   8632a:	f8c8 1000 	str.w	r1, [r8]
   8632e:	f300 8369 	bgt.w	86a04 <_svfprintf_r+0xa24>
   86332:	f108 0808 	add.w	r8, r8, #8
   86336:	b17b      	cbz	r3, 86358 <_svfprintf_r+0x378>
   86338:	2302      	movs	r3, #2
   8633a:	f8c8 3004 	str.w	r3, [r8, #4]
   8633e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86340:	3402      	adds	r4, #2
   86342:	3301      	adds	r3, #1
   86344:	aa21      	add	r2, sp, #132	; 0x84
   86346:	2b07      	cmp	r3, #7
   86348:	942a      	str	r4, [sp, #168]	; 0xa8
   8634a:	9329      	str	r3, [sp, #164]	; 0xa4
   8634c:	f8c8 2000 	str.w	r2, [r8]
   86350:	f300 836c 	bgt.w	86a2c <_svfprintf_r+0xa4c>
   86354:	f108 0808 	add.w	r8, r8, #8
   86358:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
   8635c:	f000 822e 	beq.w	867bc <_svfprintf_r+0x7dc>
   86360:	9b07      	ldr	r3, [sp, #28]
   86362:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86364:	eba3 0b02 	sub.w	fp, r3, r2
   86368:	f1bb 0f00 	cmp.w	fp, #0
   8636c:	f300 8271 	bgt.w	86852 <_svfprintf_r+0x872>
   86370:	05fb      	lsls	r3, r7, #23
   86372:	f100 81c5 	bmi.w	86700 <_svfprintf_r+0x720>
   86376:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86378:	f8c8 5000 	str.w	r5, [r8]
   8637c:	441c      	add	r4, r3
   8637e:	f8c8 3004 	str.w	r3, [r8, #4]
   86382:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86384:	942a      	str	r4, [sp, #168]	; 0xa8
   86386:	3301      	adds	r3, #1
   86388:	2b07      	cmp	r3, #7
   8638a:	9329      	str	r3, [sp, #164]	; 0xa4
   8638c:	f300 82ea 	bgt.w	86964 <_svfprintf_r+0x984>
   86390:	f108 0808 	add.w	r8, r8, #8
   86394:	077b      	lsls	r3, r7, #29
   86396:	d505      	bpl.n	863a4 <_svfprintf_r+0x3c4>
   86398:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8639a:	9a06      	ldr	r2, [sp, #24]
   8639c:	1a9d      	subs	r5, r3, r2
   8639e:	2d00      	cmp	r5, #0
   863a0:	f300 8350 	bgt.w	86a44 <_svfprintf_r+0xa64>
   863a4:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   863a8:	9906      	ldr	r1, [sp, #24]
   863aa:	428a      	cmp	r2, r1
   863ac:	bfac      	ite	ge
   863ae:	189b      	addge	r3, r3, r2
   863b0:	185b      	addlt	r3, r3, r1
   863b2:	9308      	str	r3, [sp, #32]
   863b4:	2c00      	cmp	r4, #0
   863b6:	f47f af6e 	bne.w	86296 <_svfprintf_r+0x2b6>
   863ba:	2300      	movs	r3, #0
   863bc:	9329      	str	r3, [sp, #164]	; 0xa4
   863be:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   863c0:	b11b      	cbz	r3, 863ca <_svfprintf_r+0x3ea>
   863c2:	990d      	ldr	r1, [sp, #52]	; 0x34
   863c4:	980a      	ldr	r0, [sp, #40]	; 0x28
   863c6:	f002 fbcf 	bl	88b68 <_free_r>
   863ca:	4655      	mov	r5, sl
   863cc:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   863d0:	782b      	ldrb	r3, [r5, #0]
   863d2:	2b00      	cmp	r3, #0
   863d4:	f47f ae32 	bne.w	8603c <_svfprintf_r+0x5c>
   863d8:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   863da:	2b00      	cmp	r3, #0
   863dc:	f43f af69 	beq.w	862b2 <_svfprintf_r+0x2d2>
   863e0:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   863e2:	980a      	ldr	r0, [sp, #40]	; 0x28
   863e4:	4621      	mov	r1, r4
   863e6:	aa28      	add	r2, sp, #160	; 0xa0
   863e8:	f003 fbb8 	bl	89b5c <__ssprint_r>
   863ec:	89a3      	ldrh	r3, [r4, #12]
   863ee:	e762      	b.n	862b6 <_svfprintf_r+0x2d6>
   863f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   863f2:	3307      	adds	r3, #7
   863f4:	f023 0207 	bic.w	r2, r3, #7
   863f8:	e8f2 3402 	ldrd	r3, r4, [r2], #8
   863fc:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   86400:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   86404:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   86408:	4699      	mov	r9, r3
   8640a:	4618      	mov	r0, r3
   8640c:	920e      	str	r2, [sp, #56]	; 0x38
   8640e:	4621      	mov	r1, r4
   86410:	f04f 32ff 	mov.w	r2, #4294967295
   86414:	4bb6      	ldr	r3, [pc, #728]	; (866f0 <_svfprintf_r+0x710>)
   86416:	f006 f949 	bl	8c6ac <__aeabi_dcmpun>
   8641a:	2800      	cmp	r0, #0
   8641c:	f040 8496 	bne.w	86d4c <_svfprintf_r+0xd6c>
   86420:	4648      	mov	r0, r9
   86422:	4621      	mov	r1, r4
   86424:	f04f 32ff 	mov.w	r2, #4294967295
   86428:	4bb1      	ldr	r3, [pc, #708]	; (866f0 <_svfprintf_r+0x710>)
   8642a:	f006 f921 	bl	8c670 <__aeabi_dcmple>
   8642e:	2800      	cmp	r0, #0
   86430:	f040 848c 	bne.w	86d4c <_svfprintf_r+0xd6c>
   86434:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86438:	2200      	movs	r2, #0
   8643a:	2300      	movs	r3, #0
   8643c:	f006 f90e 	bl	8c65c <__aeabi_dcmplt>
   86440:	2800      	cmp	r0, #0
   86442:	f040 87a6 	bne.w	87392 <_svfprintf_r+0x13b2>
   86446:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   8644a:	2100      	movs	r1, #0
   8644c:	2003      	movs	r0, #3
   8644e:	4da9      	ldr	r5, [pc, #676]	; (866f4 <_svfprintf_r+0x714>)
   86450:	4ba9      	ldr	r3, [pc, #676]	; (866f8 <_svfprintf_r+0x718>)
   86452:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   86456:	910d      	str	r1, [sp, #52]	; 0x34
   86458:	9006      	str	r0, [sp, #24]
   8645a:	2e47      	cmp	r6, #71	; 0x47
   8645c:	bfc8      	it	gt
   8645e:	461d      	movgt	r5, r3
   86460:	9107      	str	r1, [sp, #28]
   86462:	900b      	str	r0, [sp, #44]	; 0x2c
   86464:	910f      	str	r1, [sp, #60]	; 0x3c
   86466:	9113      	str	r1, [sp, #76]	; 0x4c
   86468:	9110      	str	r1, [sp, #64]	; 0x40
   8646a:	e6c1      	b.n	861f0 <_svfprintf_r+0x210>
   8646c:	f017 0310 	ands.w	r3, r7, #16
   86470:	f040 8462 	bne.w	86d38 <_svfprintf_r+0xd58>
   86474:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   86478:	f000 877b 	beq.w	87372 <_svfprintf_r+0x1392>
   8647c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   8647e:	4699      	mov	r9, r3
   86480:	f852 4b04 	ldr.w	r4, [r2], #4
   86484:	920e      	str	r2, [sp, #56]	; 0x38
   86486:	b2a4      	uxth	r4, r4
   86488:	e6c7      	b.n	8621a <_svfprintf_r+0x23a>
   8648a:	f853 4b04 	ldr.w	r4, [r3], #4
   8648e:	930e      	str	r3, [sp, #56]	; 0x38
   86490:	06fb      	lsls	r3, r7, #27
   86492:	f100 8441 	bmi.w	86d18 <_svfprintf_r+0xd38>
   86496:	067d      	lsls	r5, r7, #25
   86498:	f140 843b 	bpl.w	86d12 <_svfprintf_r+0xd32>
   8649c:	f344 39c0 	sbfx	r9, r4, #15, #1
   864a0:	464b      	mov	r3, r9
   864a2:	b224      	sxth	r4, r4
   864a4:	e67d      	b.n	861a2 <_svfprintf_r+0x1c2>
   864a6:	2001      	movs	r0, #1
   864a8:	2200      	movs	r2, #0
   864aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   864ac:	9006      	str	r0, [sp, #24]
   864ae:	f853 1b04 	ldr.w	r1, [r3], #4
   864b2:	ad3b      	add	r5, sp, #236	; 0xec
   864b4:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   864b8:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
   864bc:	930e      	str	r3, [sp, #56]	; 0x38
   864be:	900b      	str	r0, [sp, #44]	; 0x2c
   864c0:	e710      	b.n	862e4 <_svfprintf_r+0x304>
   864c2:	f04f 0900 	mov.w	r9, #0
   864c6:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   864c8:	9b07      	ldr	r3, [sp, #28]
   864ca:	f854 5b04 	ldr.w	r5, [r4], #4
   864ce:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   864d2:	2d00      	cmp	r5, #0
   864d4:	f000 86ee 	beq.w	872b4 <_svfprintf_r+0x12d4>
   864d8:	1c5a      	adds	r2, r3, #1
   864da:	f000 8560 	beq.w	86f9e <_svfprintf_r+0xfbe>
   864de:	461a      	mov	r2, r3
   864e0:	4649      	mov	r1, r9
   864e2:	4628      	mov	r0, r5
   864e4:	f002 fef8 	bl	892d8 <memchr>
   864e8:	900d      	str	r0, [sp, #52]	; 0x34
   864ea:	2800      	cmp	r0, #0
   864ec:	f001 809e 	beq.w	8762c <_svfprintf_r+0x164c>
   864f0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   864f2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   864f6:	1b5b      	subs	r3, r3, r5
   864f8:	930b      	str	r3, [sp, #44]	; 0x2c
   864fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   864fe:	f8cd 901c 	str.w	r9, [sp, #28]
   86502:	940e      	str	r4, [sp, #56]	; 0x38
   86504:	9306      	str	r3, [sp, #24]
   86506:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   8650a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   8650e:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   86512:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   86516:	e66b      	b.n	861f0 <_svfprintf_r+0x210>
   86518:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8651a:	425b      	negs	r3, r3
   8651c:	9309      	str	r3, [sp, #36]	; 0x24
   8651e:	f89a 6000 	ldrb.w	r6, [sl]
   86522:	f047 0704 	orr.w	r7, r7, #4
   86526:	e5aa      	b.n	8607e <_svfprintf_r+0x9e>
   86528:	f047 0b10 	orr.w	fp, r7, #16
   8652c:	f01b 0920 	ands.w	r9, fp, #32
   86530:	f000 83aa 	beq.w	86c88 <_svfprintf_r+0xca8>
   86534:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86536:	3307      	adds	r3, #7
   86538:	f023 0307 	bic.w	r3, r3, #7
   8653c:	461a      	mov	r2, r3
   8653e:	f852 4b08 	ldr.w	r4, [r2], #8
   86542:	f8d3 9004 	ldr.w	r9, [r3, #4]
   86546:	920e      	str	r2, [sp, #56]	; 0x38
   86548:	2301      	movs	r3, #1
   8654a:	e669      	b.n	86220 <_svfprintf_r+0x240>
   8654c:	2230      	movs	r2, #48	; 0x30
   8654e:	2678      	movs	r6, #120	; 0x78
   86550:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86552:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   86556:	f853 4b04 	ldr.w	r4, [r3], #4
   8655a:	4a68      	ldr	r2, [pc, #416]	; (866fc <_svfprintf_r+0x71c>)
   8655c:	930e      	str	r3, [sp, #56]	; 0x38
   8655e:	f04f 0900 	mov.w	r9, #0
   86562:	2302      	movs	r3, #2
   86564:	f047 0b02 	orr.w	fp, r7, #2
   86568:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   8656c:	9218      	str	r2, [sp, #96]	; 0x60
   8656e:	e657      	b.n	86220 <_svfprintf_r+0x240>
   86570:	06bd      	lsls	r5, r7, #26
   86572:	f100 83d6 	bmi.w	86d22 <_svfprintf_r+0xd42>
   86576:	06fc      	lsls	r4, r7, #27
   86578:	f100 8693 	bmi.w	872a2 <_svfprintf_r+0x12c2>
   8657c:	0678      	lsls	r0, r7, #25
   8657e:	f100 875d 	bmi.w	8743c <_svfprintf_r+0x145c>
   86582:	05b9      	lsls	r1, r7, #22
   86584:	f140 868d 	bpl.w	872a2 <_svfprintf_r+0x12c2>
   86588:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8658a:	9908      	ldr	r1, [sp, #32]
   8658c:	f853 2b04 	ldr.w	r2, [r3], #4
   86590:	4655      	mov	r5, sl
   86592:	7011      	strb	r1, [r2, #0]
   86594:	930e      	str	r3, [sp, #56]	; 0x38
   86596:	e71b      	b.n	863d0 <_svfprintf_r+0x3f0>
   86598:	f89a 6000 	ldrb.w	r6, [sl]
   8659c:	2e6c      	cmp	r6, #108	; 0x6c
   8659e:	bf03      	ittte	eq
   865a0:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   865a4:	f047 0720 	orreq.w	r7, r7, #32
   865a8:	f10a 0a01 	addeq.w	sl, sl, #1
   865ac:	f047 0710 	orrne.w	r7, r7, #16
   865b0:	e565      	b.n	8607e <_svfprintf_r+0x9e>
   865b2:	f89a 6000 	ldrb.w	r6, [sl]
   865b6:	2e68      	cmp	r6, #104	; 0x68
   865b8:	bf03      	ittte	eq
   865ba:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   865be:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   865c2:	f10a 0a01 	addeq.w	sl, sl, #1
   865c6:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   865ca:	e558      	b.n	8607e <_svfprintf_r+0x9e>
   865cc:	f89a 6000 	ldrb.w	r6, [sl]
   865d0:	f047 0708 	orr.w	r7, r7, #8
   865d4:	e553      	b.n	8607e <_svfprintf_r+0x9e>
   865d6:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   865d8:	4630      	mov	r0, r6
   865da:	f002 fbc5 	bl	88d68 <_localeconv_r>
   865de:	6843      	ldr	r3, [r0, #4]
   865e0:	4618      	mov	r0, r3
   865e2:	931b      	str	r3, [sp, #108]	; 0x6c
   865e4:	f7ff fc9a 	bl	85f1c <strlen>
   865e8:	4603      	mov	r3, r0
   865ea:	4630      	mov	r0, r6
   865ec:	931c      	str	r3, [sp, #112]	; 0x70
   865ee:	461e      	mov	r6, r3
   865f0:	f002 fbba 	bl	88d68 <_localeconv_r>
   865f4:	6883      	ldr	r3, [r0, #8]
   865f6:	9319      	str	r3, [sp, #100]	; 0x64
   865f8:	2e00      	cmp	r6, #0
   865fa:	f43f adbb 	beq.w	86174 <_svfprintf_r+0x194>
   865fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
   86600:	2b00      	cmp	r3, #0
   86602:	f43f adb7 	beq.w	86174 <_svfprintf_r+0x194>
   86606:	9b19      	ldr	r3, [sp, #100]	; 0x64
   86608:	781b      	ldrb	r3, [r3, #0]
   8660a:	2b00      	cmp	r3, #0
   8660c:	f43f adb2 	beq.w	86174 <_svfprintf_r+0x194>
   86610:	f89a 6000 	ldrb.w	r6, [sl]
   86614:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   86618:	e531      	b.n	8607e <_svfprintf_r+0x9e>
   8661a:	f89a 6000 	ldrb.w	r6, [sl]
   8661e:	f047 0701 	orr.w	r7, r7, #1
   86622:	e52c      	b.n	8607e <_svfprintf_r+0x9e>
   86624:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
   86628:	2b00      	cmp	r3, #0
   8662a:	f47f ada3 	bne.w	86174 <_svfprintf_r+0x194>
   8662e:	f89a 6000 	ldrb.w	r6, [sl]
   86632:	f88d 4083 	strb.w	r4, [sp, #131]	; 0x83
   86636:	e522      	b.n	8607e <_svfprintf_r+0x9e>
   86638:	f89a 6000 	ldrb.w	r6, [sl]
   8663c:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   86640:	e51d      	b.n	8607e <_svfprintf_r+0x9e>
   86642:	4652      	mov	r2, sl
   86644:	f812 6b01 	ldrb.w	r6, [r2], #1
   86648:	2e2a      	cmp	r6, #42	; 0x2a
   8664a:	f001 81eb 	beq.w	87a24 <_svfprintf_r+0x1a44>
   8664e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86652:	2b09      	cmp	r3, #9
   86654:	4692      	mov	sl, r2
   86656:	bf98      	it	ls
   86658:	2200      	movls	r2, #0
   8665a:	f201 8003 	bhi.w	87664 <_svfprintf_r+0x1684>
   8665e:	f81a 6b01 	ldrb.w	r6, [sl], #1
   86662:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86666:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   8666a:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   8666e:	2b09      	cmp	r3, #9
   86670:	d9f5      	bls.n	8665e <_svfprintf_r+0x67e>
   86672:	9207      	str	r2, [sp, #28]
   86674:	e505      	b.n	86082 <_svfprintf_r+0xa2>
   86676:	f89a 6000 	ldrb.w	r6, [sl]
   8667a:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   8667e:	e4fe      	b.n	8607e <_svfprintf_r+0x9e>
   86680:	46bb      	mov	fp, r7
   86682:	2b01      	cmp	r3, #1
   86684:	f43f ad9a 	beq.w	861bc <_svfprintf_r+0x1dc>
   86688:	2b02      	cmp	r3, #2
   8668a:	ad54      	add	r5, sp, #336	; 0x150
   8668c:	d112      	bne.n	866b4 <_svfprintf_r+0x6d4>
   8668e:	9a18      	ldr	r2, [sp, #96]	; 0x60
   86690:	f004 030f 	and.w	r3, r4, #15
   86694:	5cd3      	ldrb	r3, [r2, r3]
   86696:	0924      	lsrs	r4, r4, #4
   86698:	ea44 7409 	orr.w	r4, r4, r9, lsl #28
   8669c:	ea4f 1919 	mov.w	r9, r9, lsr #4
   866a0:	f805 3d01 	strb.w	r3, [r5, #-1]!
   866a4:	ea54 0309 	orrs.w	r3, r4, r9
   866a8:	d1f2      	bne.n	86690 <_svfprintf_r+0x6b0>
   866aa:	ab54      	add	r3, sp, #336	; 0x150
   866ac:	1b5b      	subs	r3, r3, r5
   866ae:	465f      	mov	r7, fp
   866b0:	930b      	str	r3, [sp, #44]	; 0x2c
   866b2:	e590      	b.n	861d6 <_svfprintf_r+0x1f6>
   866b4:	f004 0307 	and.w	r3, r4, #7
   866b8:	08e4      	lsrs	r4, r4, #3
   866ba:	ea44 7449 	orr.w	r4, r4, r9, lsl #29
   866be:	ea4f 09d9 	mov.w	r9, r9, lsr #3
   866c2:	3330      	adds	r3, #48	; 0x30
   866c4:	ea54 0109 	orrs.w	r1, r4, r9
   866c8:	462a      	mov	r2, r5
   866ca:	f805 3d01 	strb.w	r3, [r5, #-1]!
   866ce:	d1f1      	bne.n	866b4 <_svfprintf_r+0x6d4>
   866d0:	f01b 0f01 	tst.w	fp, #1
   866d4:	d0e9      	beq.n	866aa <_svfprintf_r+0x6ca>
   866d6:	2b30      	cmp	r3, #48	; 0x30
   866d8:	d0e7      	beq.n	866aa <_svfprintf_r+0x6ca>
   866da:	2330      	movs	r3, #48	; 0x30
   866dc:	3a02      	subs	r2, #2
   866de:	f805 3c01 	strb.w	r3, [r5, #-1]
   866e2:	ab54      	add	r3, sp, #336	; 0x150
   866e4:	1a9b      	subs	r3, r3, r2
   866e6:	465f      	mov	r7, fp
   866e8:	4615      	mov	r5, r2
   866ea:	930b      	str	r3, [sp, #44]	; 0x2c
   866ec:	e573      	b.n	861d6 <_svfprintf_r+0x1f6>
   866ee:	bf00      	nop
   866f0:	7fefffff 	.word	0x7fefffff
   866f4:	0008ca94 	.word	0x0008ca94
   866f8:	0008ca98 	.word	0x0008ca98
   866fc:	0008caa4 	.word	0x0008caa4
   86700:	2e65      	cmp	r6, #101	; 0x65
   86702:	f340 80e9 	ble.w	868d8 <_svfprintf_r+0x8f8>
   86706:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8670a:	2200      	movs	r2, #0
   8670c:	2300      	movs	r3, #0
   8670e:	f005 ff9b 	bl	8c648 <__aeabi_dcmpeq>
   86712:	2800      	cmp	r0, #0
   86714:	f000 81d2 	beq.w	86abc <_svfprintf_r+0xadc>
   86718:	2301      	movs	r3, #1
   8671a:	f8c8 3004 	str.w	r3, [r8, #4]
   8671e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86720:	4abf      	ldr	r2, [pc, #764]	; (86a20 <_svfprintf_r+0xa40>)
   86722:	3301      	adds	r3, #1
   86724:	3401      	adds	r4, #1
   86726:	2b07      	cmp	r3, #7
   86728:	942a      	str	r4, [sp, #168]	; 0xa8
   8672a:	9329      	str	r3, [sp, #164]	; 0xa4
   8672c:	f8c8 2000 	str.w	r2, [r8]
   86730:	f300 857a 	bgt.w	87228 <_svfprintf_r+0x1248>
   86734:	f108 0808 	add.w	r8, r8, #8
   86738:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8673a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8673c:	4293      	cmp	r3, r2
   8673e:	f280 82d7 	bge.w	86cf0 <_svfprintf_r+0xd10>
   86742:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86744:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86746:	441c      	add	r4, r3
   86748:	e9c8 2300 	strd	r2, r3, [r8]
   8674c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8674e:	942a      	str	r4, [sp, #168]	; 0xa8
   86750:	3301      	adds	r3, #1
   86752:	2b07      	cmp	r3, #7
   86754:	9329      	str	r3, [sp, #164]	; 0xa4
   86756:	f300 83dd 	bgt.w	86f14 <_svfprintf_r+0xf34>
   8675a:	f108 0808 	add.w	r8, r8, #8
   8675e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86760:	1e5d      	subs	r5, r3, #1
   86762:	2d00      	cmp	r5, #0
   86764:	f77f ae16 	ble.w	86394 <_svfprintf_r+0x3b4>
   86768:	2d10      	cmp	r5, #16
   8676a:	f341 8141 	ble.w	879f0 <_svfprintf_r+0x1a10>
   8676e:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 86a24 <_svfprintf_r+0xa44>
   86772:	4622      	mov	r2, r4
   86774:	4649      	mov	r1, r9
   86776:	2610      	movs	r6, #16
   86778:	46b9      	mov	r9, r7
   8677a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8677c:	460f      	mov	r7, r1
   8677e:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   86782:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86784:	e005      	b.n	86792 <_svfprintf_r+0x7b2>
   86786:	f108 0808 	add.w	r8, r8, #8
   8678a:	3d10      	subs	r5, #16
   8678c:	2d10      	cmp	r5, #16
   8678e:	f340 8558 	ble.w	87242 <_svfprintf_r+0x1262>
   86792:	3301      	adds	r3, #1
   86794:	3210      	adds	r2, #16
   86796:	2b07      	cmp	r3, #7
   86798:	e9c8 7600 	strd	r7, r6, [r8]
   8679c:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   867a0:	ddf1      	ble.n	86786 <_svfprintf_r+0x7a6>
   867a2:	4621      	mov	r1, r4
   867a4:	4658      	mov	r0, fp
   867a6:	aa28      	add	r2, sp, #160	; 0xa0
   867a8:	f003 f9d8 	bl	89b5c <__ssprint_r>
   867ac:	2800      	cmp	r0, #0
   867ae:	f47f ad7a 	bne.w	862a6 <_svfprintf_r+0x2c6>
   867b2:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   867b6:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   867ba:	e7e6      	b.n	8678a <_svfprintf_r+0x7aa>
   867bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   867be:	9a06      	ldr	r2, [sp, #24]
   867c0:	eba3 0b02 	sub.w	fp, r3, r2
   867c4:	f1bb 0f00 	cmp.w	fp, #0
   867c8:	f77f adca 	ble.w	86360 <_svfprintf_r+0x380>
   867cc:	f1bb 0f10 	cmp.w	fp, #16
   867d0:	f341 8005 	ble.w	877de <_svfprintf_r+0x17fe>
   867d4:	f8df 924c 	ldr.w	r9, [pc, #588]	; 86a24 <_svfprintf_r+0xa44>
   867d8:	4641      	mov	r1, r8
   867da:	4620      	mov	r0, r4
   867dc:	46a8      	mov	r8, r5
   867de:	464c      	mov	r4, r9
   867e0:	2310      	movs	r3, #16
   867e2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   867e4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   867e6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   867ea:	e006      	b.n	867fa <_svfprintf_r+0x81a>
   867ec:	f1ab 0b10 	sub.w	fp, fp, #16
   867f0:	f1bb 0f10 	cmp.w	fp, #16
   867f4:	f101 0108 	add.w	r1, r1, #8
   867f8:	dd19      	ble.n	8682e <_svfprintf_r+0x84e>
   867fa:	3201      	adds	r2, #1
   867fc:	3010      	adds	r0, #16
   867fe:	2a07      	cmp	r2, #7
   86800:	e9c1 4300 	strd	r4, r3, [r1]
   86804:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   86808:	ddf0      	ble.n	867ec <_svfprintf_r+0x80c>
   8680a:	4629      	mov	r1, r5
   8680c:	4648      	mov	r0, r9
   8680e:	aa28      	add	r2, sp, #160	; 0xa0
   86810:	f003 f9a4 	bl	89b5c <__ssprint_r>
   86814:	2800      	cmp	r0, #0
   86816:	f47f ad46 	bne.w	862a6 <_svfprintf_r+0x2c6>
   8681a:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   8681e:	f1ab 0b10 	sub.w	fp, fp, #16
   86822:	f1bb 0f10 	cmp.w	fp, #16
   86826:	f04f 0310 	mov.w	r3, #16
   8682a:	a92b      	add	r1, sp, #172	; 0xac
   8682c:	dce5      	bgt.n	867fa <_svfprintf_r+0x81a>
   8682e:	4645      	mov	r5, r8
   86830:	46a1      	mov	r9, r4
   86832:	4688      	mov	r8, r1
   86834:	4604      	mov	r4, r0
   86836:	3201      	adds	r2, #1
   86838:	445c      	add	r4, fp
   8683a:	2a07      	cmp	r2, #7
   8683c:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   86840:	f8c8 9000 	str.w	r9, [r8]
   86844:	f8c8 b004 	str.w	fp, [r8, #4]
   86848:	f300 8518 	bgt.w	8727c <_svfprintf_r+0x129c>
   8684c:	f108 0808 	add.w	r8, r8, #8
   86850:	e586      	b.n	86360 <_svfprintf_r+0x380>
   86852:	f1bb 0f10 	cmp.w	fp, #16
   86856:	f340 8597 	ble.w	87388 <_svfprintf_r+0x13a8>
   8685a:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 86a24 <_svfprintf_r+0xa44>
   8685e:	4641      	mov	r1, r8
   86860:	4620      	mov	r0, r4
   86862:	46a8      	mov	r8, r5
   86864:	464c      	mov	r4, r9
   86866:	2310      	movs	r3, #16
   86868:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   8686a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   8686c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   86870:	e006      	b.n	86880 <_svfprintf_r+0x8a0>
   86872:	f1ab 0b10 	sub.w	fp, fp, #16
   86876:	f1bb 0f10 	cmp.w	fp, #16
   8687a:	f101 0108 	add.w	r1, r1, #8
   8687e:	dd19      	ble.n	868b4 <_svfprintf_r+0x8d4>
   86880:	3201      	adds	r2, #1
   86882:	3010      	adds	r0, #16
   86884:	2a07      	cmp	r2, #7
   86886:	e9c1 4300 	strd	r4, r3, [r1]
   8688a:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   8688e:	ddf0      	ble.n	86872 <_svfprintf_r+0x892>
   86890:	4629      	mov	r1, r5
   86892:	4648      	mov	r0, r9
   86894:	aa28      	add	r2, sp, #160	; 0xa0
   86896:	f003 f961 	bl	89b5c <__ssprint_r>
   8689a:	2800      	cmp	r0, #0
   8689c:	f47f ad03 	bne.w	862a6 <_svfprintf_r+0x2c6>
   868a0:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   868a4:	f1ab 0b10 	sub.w	fp, fp, #16
   868a8:	f1bb 0f10 	cmp.w	fp, #16
   868ac:	f04f 0310 	mov.w	r3, #16
   868b0:	a92b      	add	r1, sp, #172	; 0xac
   868b2:	dce5      	bgt.n	86880 <_svfprintf_r+0x8a0>
   868b4:	4645      	mov	r5, r8
   868b6:	46a1      	mov	r9, r4
   868b8:	4688      	mov	r8, r1
   868ba:	4604      	mov	r4, r0
   868bc:	3201      	adds	r2, #1
   868be:	445c      	add	r4, fp
   868c0:	2a07      	cmp	r2, #7
   868c2:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   868c6:	f8c8 9000 	str.w	r9, [r8]
   868ca:	f8c8 b004 	str.w	fp, [r8, #4]
   868ce:	f300 81ce 	bgt.w	86c6e <_svfprintf_r+0xc8e>
   868d2:	f108 0808 	add.w	r8, r8, #8
   868d6:	e54b      	b.n	86370 <_svfprintf_r+0x390>
   868d8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   868da:	2b01      	cmp	r3, #1
   868dc:	f340 817e 	ble.w	86bdc <_svfprintf_r+0xbfc>
   868e0:	2301      	movs	r3, #1
   868e2:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   868e4:	3401      	adds	r4, #1
   868e6:	441e      	add	r6, r3
   868e8:	2e07      	cmp	r6, #7
   868ea:	f8c8 5000 	str.w	r5, [r8]
   868ee:	942a      	str	r4, [sp, #168]	; 0xa8
   868f0:	f8c8 3004 	str.w	r3, [r8, #4]
   868f4:	9629      	str	r6, [sp, #164]	; 0xa4
   868f6:	f300 81e1 	bgt.w	86cbc <_svfprintf_r+0xcdc>
   868fa:	f108 0808 	add.w	r8, r8, #8
   868fe:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86900:	3601      	adds	r6, #1
   86902:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   86904:	441c      	add	r4, r3
   86906:	2e07      	cmp	r6, #7
   86908:	e9c8 2300 	strd	r2, r3, [r8]
   8690c:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   86910:	f300 81e1 	bgt.w	86cd6 <_svfprintf_r+0xcf6>
   86914:	f108 0808 	add.w	r8, r8, #8
   86918:	2200      	movs	r2, #0
   8691a:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   8691e:	2300      	movs	r3, #0
   86920:	f005 fe92 	bl	8c648 <__aeabi_dcmpeq>
   86924:	2800      	cmp	r0, #0
   86926:	f040 8176 	bne.w	86c16 <_svfprintf_r+0xc36>
   8692a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8692c:	3601      	adds	r6, #1
   8692e:	3b01      	subs	r3, #1
   86930:	3501      	adds	r5, #1
   86932:	441c      	add	r4, r3
   86934:	2e07      	cmp	r6, #7
   86936:	f8c8 5000 	str.w	r5, [r8]
   8693a:	9629      	str	r6, [sp, #164]	; 0xa4
   8693c:	f8c8 3004 	str.w	r3, [r8, #4]
   86940:	942a      	str	r4, [sp, #168]	; 0xa8
   86942:	f300 815b 	bgt.w	86bfc <_svfprintf_r+0xc1c>
   86946:	f108 0808 	add.w	r8, r8, #8
   8694a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   8694c:	3601      	adds	r6, #1
   8694e:	441c      	add	r4, r3
   86950:	f8c8 3004 	str.w	r3, [r8, #4]
   86954:	2e07      	cmp	r6, #7
   86956:	ab24      	add	r3, sp, #144	; 0x90
   86958:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   8695c:	f8c8 3000 	str.w	r3, [r8]
   86960:	f77f ad16 	ble.w	86390 <_svfprintf_r+0x3b0>
   86964:	990c      	ldr	r1, [sp, #48]	; 0x30
   86966:	980a      	ldr	r0, [sp, #40]	; 0x28
   86968:	aa28      	add	r2, sp, #160	; 0xa0
   8696a:	f003 f8f7 	bl	89b5c <__ssprint_r>
   8696e:	2800      	cmp	r0, #0
   86970:	f47f ac99 	bne.w	862a6 <_svfprintf_r+0x2c6>
   86974:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86976:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8697a:	e50b      	b.n	86394 <_svfprintf_r+0x3b4>
   8697c:	f1b9 0f10 	cmp.w	r9, #16
   86980:	f340 8650 	ble.w	87624 <_svfprintf_r+0x1644>
   86984:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   86988:	4640      	mov	r0, r8
   8698a:	e9cd 361d 	strd	r3, r6, [sp, #116]	; 0x74
   8698e:	46b8      	mov	r8, r7
   86990:	2410      	movs	r4, #16
   86992:	464f      	mov	r7, r9
   86994:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   86996:	46a9      	mov	r9, r5
   86998:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8699a:	e004      	b.n	869a6 <_svfprintf_r+0x9c6>
   8699c:	3f10      	subs	r7, #16
   8699e:	2f10      	cmp	r7, #16
   869a0:	f100 0008 	add.w	r0, r0, #8
   869a4:	dd16      	ble.n	869d4 <_svfprintf_r+0x9f4>
   869a6:	3201      	adds	r2, #1
   869a8:	4b1f      	ldr	r3, [pc, #124]	; (86a28 <_svfprintf_r+0xa48>)
   869aa:	3110      	adds	r1, #16
   869ac:	2a07      	cmp	r2, #7
   869ae:	e9c0 3400 	strd	r3, r4, [r0]
   869b2:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   869b6:	ddf1      	ble.n	8699c <_svfprintf_r+0x9bc>
   869b8:	4631      	mov	r1, r6
   869ba:	4628      	mov	r0, r5
   869bc:	aa28      	add	r2, sp, #160	; 0xa0
   869be:	f003 f8cd 	bl	89b5c <__ssprint_r>
   869c2:	2800      	cmp	r0, #0
   869c4:	f47f ac6f 	bne.w	862a6 <_svfprintf_r+0x2c6>
   869c8:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   869cc:	3f10      	subs	r7, #16
   869ce:	2f10      	cmp	r7, #16
   869d0:	a82b      	add	r0, sp, #172	; 0xac
   869d2:	dce8      	bgt.n	869a6 <_svfprintf_r+0x9c6>
   869d4:	464d      	mov	r5, r9
   869d6:	e9dd 361d 	ldrd	r3, r6, [sp, #116]	; 0x74
   869da:	46b9      	mov	r9, r7
   869dc:	4647      	mov	r7, r8
   869de:	4680      	mov	r8, r0
   869e0:	eb09 0401 	add.w	r4, r9, r1
   869e4:	3201      	adds	r2, #1
   869e6:	4910      	ldr	r1, [pc, #64]	; (86a28 <_svfprintf_r+0xa48>)
   869e8:	2a07      	cmp	r2, #7
   869ea:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   869ee:	f8c8 9004 	str.w	r9, [r8, #4]
   869f2:	f8c8 1000 	str.w	r1, [r8]
   869f6:	f300 83c3 	bgt.w	87180 <_svfprintf_r+0x11a0>
   869fa:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   869fe:	f108 0808 	add.w	r8, r8, #8
   86a02:	e486      	b.n	86312 <_svfprintf_r+0x332>
   86a04:	990c      	ldr	r1, [sp, #48]	; 0x30
   86a06:	980a      	ldr	r0, [sp, #40]	; 0x28
   86a08:	aa28      	add	r2, sp, #160	; 0xa0
   86a0a:	931d      	str	r3, [sp, #116]	; 0x74
   86a0c:	f003 f8a6 	bl	89b5c <__ssprint_r>
   86a10:	2800      	cmp	r0, #0
   86a12:	f47f ac48 	bne.w	862a6 <_svfprintf_r+0x2c6>
   86a16:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86a18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   86a1a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86a1e:	e48a      	b.n	86336 <_svfprintf_r+0x356>
   86a20:	0008cad4 	.word	0x0008cad4
   86a24:	0008cae8 	.word	0x0008cae8
   86a28:	0008cad8 	.word	0x0008cad8
   86a2c:	990c      	ldr	r1, [sp, #48]	; 0x30
   86a2e:	980a      	ldr	r0, [sp, #40]	; 0x28
   86a30:	aa28      	add	r2, sp, #160	; 0xa0
   86a32:	f003 f893 	bl	89b5c <__ssprint_r>
   86a36:	2800      	cmp	r0, #0
   86a38:	f47f ac35 	bne.w	862a6 <_svfprintf_r+0x2c6>
   86a3c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86a3e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86a42:	e489      	b.n	86358 <_svfprintf_r+0x378>
   86a44:	2d10      	cmp	r5, #16
   86a46:	f340 86c4 	ble.w	877d2 <_svfprintf_r+0x17f2>
   86a4a:	2610      	movs	r6, #16
   86a4c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86a4e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   86a50:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   86a54:	e004      	b.n	86a60 <_svfprintf_r+0xa80>
   86a56:	3d10      	subs	r5, #16
   86a58:	2d10      	cmp	r5, #16
   86a5a:	f108 0808 	add.w	r8, r8, #8
   86a5e:	dd17      	ble.n	86a90 <_svfprintf_r+0xab0>
   86a60:	3301      	adds	r3, #1
   86a62:	4ab8      	ldr	r2, [pc, #736]	; (86d44 <_svfprintf_r+0xd64>)
   86a64:	3410      	adds	r4, #16
   86a66:	2b07      	cmp	r3, #7
   86a68:	e9c8 2600 	strd	r2, r6, [r8]
   86a6c:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   86a70:	ddf1      	ble.n	86a56 <_svfprintf_r+0xa76>
   86a72:	4649      	mov	r1, r9
   86a74:	4638      	mov	r0, r7
   86a76:	aa28      	add	r2, sp, #160	; 0xa0
   86a78:	f003 f870 	bl	89b5c <__ssprint_r>
   86a7c:	2800      	cmp	r0, #0
   86a7e:	f47f ac12 	bne.w	862a6 <_svfprintf_r+0x2c6>
   86a82:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
   86a86:	3d10      	subs	r5, #16
   86a88:	2d10      	cmp	r5, #16
   86a8a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86a8e:	dce7      	bgt.n	86a60 <_svfprintf_r+0xa80>
   86a90:	3301      	adds	r3, #1
   86a92:	4aac      	ldr	r2, [pc, #688]	; (86d44 <_svfprintf_r+0xd64>)
   86a94:	442c      	add	r4, r5
   86a96:	2b07      	cmp	r3, #7
   86a98:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   86a9c:	f8c8 5004 	str.w	r5, [r8, #4]
   86aa0:	f8c8 2000 	str.w	r2, [r8]
   86aa4:	f77f ac7e 	ble.w	863a4 <_svfprintf_r+0x3c4>
   86aa8:	990c      	ldr	r1, [sp, #48]	; 0x30
   86aaa:	980a      	ldr	r0, [sp, #40]	; 0x28
   86aac:	aa28      	add	r2, sp, #160	; 0xa0
   86aae:	f003 f855 	bl	89b5c <__ssprint_r>
   86ab2:	2800      	cmp	r0, #0
   86ab4:	f47f abf7 	bne.w	862a6 <_svfprintf_r+0x2c6>
   86ab8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86aba:	e473      	b.n	863a4 <_svfprintf_r+0x3c4>
   86abc:	9922      	ldr	r1, [sp, #136]	; 0x88
   86abe:	2900      	cmp	r1, #0
   86ac0:	f340 836f 	ble.w	871a2 <_svfprintf_r+0x11c2>
   86ac4:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   86ac8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86aca:	4599      	cmp	r9, r3
   86acc:	bfa8      	it	ge
   86ace:	4699      	movge	r9, r3
   86ad0:	f1b9 0f00 	cmp.w	r9, #0
   86ad4:	dd0b      	ble.n	86aee <_svfprintf_r+0xb0e>
   86ad6:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86ad8:	444c      	add	r4, r9
   86ada:	3301      	adds	r3, #1
   86adc:	2b07      	cmp	r3, #7
   86ade:	e9c8 5900 	strd	r5, r9, [r8]
   86ae2:	942a      	str	r4, [sp, #168]	; 0xa8
   86ae4:	9329      	str	r3, [sp, #164]	; 0xa4
   86ae6:	f300 851d 	bgt.w	87524 <_svfprintf_r+0x1544>
   86aea:	f108 0808 	add.w	r8, r8, #8
   86aee:	9e10      	ldr	r6, [sp, #64]	; 0x40
   86af0:	f1b9 0f00 	cmp.w	r9, #0
   86af4:	bfa8      	it	ge
   86af6:	eba6 0609 	subge.w	r6, r6, r9
   86afa:	2e00      	cmp	r6, #0
   86afc:	f300 8225 	bgt.w	86f4a <_svfprintf_r+0xf6a>
   86b00:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
   86b04:	0578      	lsls	r0, r7, #21
   86b06:	44ab      	add	fp, r5
   86b08:	f100 825f 	bmi.w	86fca <_svfprintf_r+0xfea>
   86b0c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86b0e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86b10:	4293      	cmp	r3, r2
   86b12:	db02      	blt.n	86b1a <_svfprintf_r+0xb3a>
   86b14:	07f9      	lsls	r1, r7, #31
   86b16:	f140 8476 	bpl.w	87406 <_svfprintf_r+0x1426>
   86b1a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86b1c:	9917      	ldr	r1, [sp, #92]	; 0x5c
   86b1e:	4414      	add	r4, r2
   86b20:	e9c8 1200 	strd	r1, r2, [r8]
   86b24:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   86b26:	942a      	str	r4, [sp, #168]	; 0xa8
   86b28:	3201      	adds	r2, #1
   86b2a:	2a07      	cmp	r2, #7
   86b2c:	9229      	str	r2, [sp, #164]	; 0xa4
   86b2e:	f300 8513 	bgt.w	87558 <_svfprintf_r+0x1578>
   86b32:	f108 0808 	add.w	r8, r8, #8
   86b36:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86b38:	18ae      	adds	r6, r5, r2
   86b3a:	eba6 060b 	sub.w	r6, r6, fp
   86b3e:	1ad5      	subs	r5, r2, r3
   86b40:	42ae      	cmp	r6, r5
   86b42:	bfa8      	it	ge
   86b44:	462e      	movge	r6, r5
   86b46:	2e00      	cmp	r6, #0
   86b48:	dd0d      	ble.n	86b66 <_svfprintf_r+0xb86>
   86b4a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86b4c:	4434      	add	r4, r6
   86b4e:	3301      	adds	r3, #1
   86b50:	2b07      	cmp	r3, #7
   86b52:	f8c8 b000 	str.w	fp, [r8]
   86b56:	f8c8 6004 	str.w	r6, [r8, #4]
   86b5a:	942a      	str	r4, [sp, #168]	; 0xa8
   86b5c:	9329      	str	r3, [sp, #164]	; 0xa4
   86b5e:	f300 8571 	bgt.w	87644 <_svfprintf_r+0x1664>
   86b62:	f108 0808 	add.w	r8, r8, #8
   86b66:	2e00      	cmp	r6, #0
   86b68:	bfa8      	it	ge
   86b6a:	1bad      	subge	r5, r5, r6
   86b6c:	2d00      	cmp	r5, #0
   86b6e:	f77f ac11 	ble.w	86394 <_svfprintf_r+0x3b4>
   86b72:	2d10      	cmp	r5, #16
   86b74:	f340 873c 	ble.w	879f0 <_svfprintf_r+0x1a10>
   86b78:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 86d48 <_svfprintf_r+0xd68>
   86b7c:	4622      	mov	r2, r4
   86b7e:	4649      	mov	r1, r9
   86b80:	2610      	movs	r6, #16
   86b82:	46b9      	mov	r9, r7
   86b84:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86b86:	460f      	mov	r7, r1
   86b88:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   86b8c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86b8e:	e005      	b.n	86b9c <_svfprintf_r+0xbbc>
   86b90:	f108 0808 	add.w	r8, r8, #8
   86b94:	3d10      	subs	r5, #16
   86b96:	2d10      	cmp	r5, #16
   86b98:	f340 8353 	ble.w	87242 <_svfprintf_r+0x1262>
   86b9c:	3301      	adds	r3, #1
   86b9e:	3210      	adds	r2, #16
   86ba0:	2b07      	cmp	r3, #7
   86ba2:	e9c8 7600 	strd	r7, r6, [r8]
   86ba6:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   86baa:	ddf1      	ble.n	86b90 <_svfprintf_r+0xbb0>
   86bac:	4621      	mov	r1, r4
   86bae:	4658      	mov	r0, fp
   86bb0:	aa28      	add	r2, sp, #160	; 0xa0
   86bb2:	f002 ffd3 	bl	89b5c <__ssprint_r>
   86bb6:	2800      	cmp	r0, #0
   86bb8:	f47f ab75 	bne.w	862a6 <_svfprintf_r+0x2c6>
   86bbc:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   86bc0:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86bc4:	e7e6      	b.n	86b94 <_svfprintf_r+0xbb4>
   86bc6:	9b07      	ldr	r3, [sp, #28]
   86bc8:	2b00      	cmp	r3, #0
   86bca:	f47f aafc 	bne.w	861c6 <_svfprintf_r+0x1e6>
   86bce:	465f      	mov	r7, fp
   86bd0:	2300      	movs	r3, #0
   86bd2:	ad54      	add	r5, sp, #336	; 0x150
   86bd4:	9307      	str	r3, [sp, #28]
   86bd6:	930b      	str	r3, [sp, #44]	; 0x2c
   86bd8:	f7ff bafd 	b.w	861d6 <_svfprintf_r+0x1f6>
   86bdc:	07fa      	lsls	r2, r7, #31
   86bde:	f53f ae7f 	bmi.w	868e0 <_svfprintf_r+0x900>
   86be2:	2301      	movs	r3, #1
   86be4:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   86be6:	3401      	adds	r4, #1
   86be8:	441e      	add	r6, r3
   86bea:	2e07      	cmp	r6, #7
   86bec:	f8c8 5000 	str.w	r5, [r8]
   86bf0:	942a      	str	r4, [sp, #168]	; 0xa8
   86bf2:	f8c8 3004 	str.w	r3, [r8, #4]
   86bf6:	9629      	str	r6, [sp, #164]	; 0xa4
   86bf8:	f77f aea5 	ble.w	86946 <_svfprintf_r+0x966>
   86bfc:	990c      	ldr	r1, [sp, #48]	; 0x30
   86bfe:	980a      	ldr	r0, [sp, #40]	; 0x28
   86c00:	aa28      	add	r2, sp, #160	; 0xa0
   86c02:	f002 ffab 	bl	89b5c <__ssprint_r>
   86c06:	2800      	cmp	r0, #0
   86c08:	f47f ab4d 	bne.w	862a6 <_svfprintf_r+0x2c6>
   86c0c:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   86c10:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86c14:	e699      	b.n	8694a <_svfprintf_r+0x96a>
   86c16:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86c18:	1e5d      	subs	r5, r3, #1
   86c1a:	2d00      	cmp	r5, #0
   86c1c:	f77f ae95 	ble.w	8694a <_svfprintf_r+0x96a>
   86c20:	2d10      	cmp	r5, #16
   86c22:	f340 86df 	ble.w	879e4 <_svfprintf_r+0x1a04>
   86c26:	4622      	mov	r2, r4
   86c28:	9707      	str	r7, [sp, #28]
   86c2a:	f04f 0b10 	mov.w	fp, #16
   86c2e:	f8df 9118 	ldr.w	r9, [pc, #280]	; 86d48 <_svfprintf_r+0xd68>
   86c32:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86c34:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   86c36:	e005      	b.n	86c44 <_svfprintf_r+0xc64>
   86c38:	f108 0808 	add.w	r8, r8, #8
   86c3c:	3d10      	subs	r5, #16
   86c3e:	2d10      	cmp	r5, #16
   86c40:	f340 837f 	ble.w	87342 <_svfprintf_r+0x1362>
   86c44:	3601      	adds	r6, #1
   86c46:	3210      	adds	r2, #16
   86c48:	2e07      	cmp	r6, #7
   86c4a:	e9c8 9b00 	strd	r9, fp, [r8]
   86c4e:	e9cd 6229 	strd	r6, r2, [sp, #164]	; 0xa4
   86c52:	ddf1      	ble.n	86c38 <_svfprintf_r+0xc58>
   86c54:	4639      	mov	r1, r7
   86c56:	4620      	mov	r0, r4
   86c58:	aa28      	add	r2, sp, #160	; 0xa0
   86c5a:	f002 ff7f 	bl	89b5c <__ssprint_r>
   86c5e:	2800      	cmp	r0, #0
   86c60:	f47f ab21 	bne.w	862a6 <_svfprintf_r+0x2c6>
   86c64:	e9dd 6229 	ldrd	r6, r2, [sp, #164]	; 0xa4
   86c68:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86c6c:	e7e6      	b.n	86c3c <_svfprintf_r+0xc5c>
   86c6e:	990c      	ldr	r1, [sp, #48]	; 0x30
   86c70:	980a      	ldr	r0, [sp, #40]	; 0x28
   86c72:	aa28      	add	r2, sp, #160	; 0xa0
   86c74:	f002 ff72 	bl	89b5c <__ssprint_r>
   86c78:	2800      	cmp	r0, #0
   86c7a:	f47f ab14 	bne.w	862a6 <_svfprintf_r+0x2c6>
   86c7e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86c80:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86c84:	f7ff bb74 	b.w	86370 <_svfprintf_r+0x390>
   86c88:	f01b 0310 	ands.w	r3, fp, #16
   86c8c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86c8e:	d13a      	bne.n	86d06 <_svfprintf_r+0xd26>
   86c90:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
   86c94:	d033      	beq.n	86cfe <_svfprintf_r+0xd1e>
   86c96:	f852 4b04 	ldr.w	r4, [r2], #4
   86c9a:	4699      	mov	r9, r3
   86c9c:	920e      	str	r2, [sp, #56]	; 0x38
   86c9e:	2301      	movs	r3, #1
   86ca0:	b2a4      	uxth	r4, r4
   86ca2:	f7ff babd 	b.w	86220 <_svfprintf_r+0x240>
   86ca6:	232d      	movs	r3, #45	; 0x2d
   86ca8:	4264      	negs	r4, r4
   86caa:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   86cae:	46bb      	mov	fp, r7
   86cb0:	f04f 0301 	mov.w	r3, #1
   86cb4:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
   86cb8:	f7ff bab5 	b.w	86226 <_svfprintf_r+0x246>
   86cbc:	990c      	ldr	r1, [sp, #48]	; 0x30
   86cbe:	980a      	ldr	r0, [sp, #40]	; 0x28
   86cc0:	aa28      	add	r2, sp, #160	; 0xa0
   86cc2:	f002 ff4b 	bl	89b5c <__ssprint_r>
   86cc6:	2800      	cmp	r0, #0
   86cc8:	f47f aaed 	bne.w	862a6 <_svfprintf_r+0x2c6>
   86ccc:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   86cd0:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86cd4:	e613      	b.n	868fe <_svfprintf_r+0x91e>
   86cd6:	990c      	ldr	r1, [sp, #48]	; 0x30
   86cd8:	980a      	ldr	r0, [sp, #40]	; 0x28
   86cda:	aa28      	add	r2, sp, #160	; 0xa0
   86cdc:	f002 ff3e 	bl	89b5c <__ssprint_r>
   86ce0:	2800      	cmp	r0, #0
   86ce2:	f47f aae0 	bne.w	862a6 <_svfprintf_r+0x2c6>
   86ce6:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   86cea:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86cee:	e613      	b.n	86918 <_svfprintf_r+0x938>
   86cf0:	07fd      	lsls	r5, r7, #31
   86cf2:	f57f ab4f 	bpl.w	86394 <_svfprintf_r+0x3b4>
   86cf6:	e524      	b.n	86742 <_svfprintf_r+0x762>
   86cf8:	ad54      	add	r5, sp, #336	; 0x150
   86cfa:	f7ff ba6c 	b.w	861d6 <_svfprintf_r+0x1f6>
   86cfe:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
   86d02:	f040 838a 	bne.w	8741a <_svfprintf_r+0x143a>
   86d06:	f852 4b04 	ldr.w	r4, [r2], #4
   86d0a:	2301      	movs	r3, #1
   86d0c:	920e      	str	r2, [sp, #56]	; 0x38
   86d0e:	f7ff ba87 	b.w	86220 <_svfprintf_r+0x240>
   86d12:	05b8      	lsls	r0, r7, #22
   86d14:	f100 839b 	bmi.w	8744e <_svfprintf_r+0x146e>
   86d18:	ea4f 79e4 	mov.w	r9, r4, asr #31
   86d1c:	464b      	mov	r3, r9
   86d1e:	f7ff ba40 	b.w	861a2 <_svfprintf_r+0x1c2>
   86d22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86d24:	9808      	ldr	r0, [sp, #32]
   86d26:	f853 1b04 	ldr.w	r1, [r3], #4
   86d2a:	17c2      	asrs	r2, r0, #31
   86d2c:	4655      	mov	r5, sl
   86d2e:	e9c1 0200 	strd	r0, r2, [r1]
   86d32:	930e      	str	r3, [sp, #56]	; 0x38
   86d34:	f7ff bb4c 	b.w	863d0 <_svfprintf_r+0x3f0>
   86d38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86d3a:	f853 4b04 	ldr.w	r4, [r3], #4
   86d3e:	930e      	str	r3, [sp, #56]	; 0x38
   86d40:	f7ff ba6b 	b.w	8621a <_svfprintf_r+0x23a>
   86d44:	0008cad8 	.word	0x0008cad8
   86d48:	0008cae8 	.word	0x0008cae8
   86d4c:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86d50:	4602      	mov	r2, r0
   86d52:	460b      	mov	r3, r1
   86d54:	f005 fcaa 	bl	8c6ac <__aeabi_dcmpun>
   86d58:	2800      	cmp	r0, #0
   86d5a:	f040 85e9 	bne.w	87930 <_svfprintf_r+0x1950>
   86d5e:	2e61      	cmp	r6, #97	; 0x61
   86d60:	f000 857d 	beq.w	8785e <_svfprintf_r+0x187e>
   86d64:	2e41      	cmp	r6, #65	; 0x41
   86d66:	f000 848b 	beq.w	87680 <_svfprintf_r+0x16a0>
   86d6a:	9b07      	ldr	r3, [sp, #28]
   86d6c:	3301      	adds	r3, #1
   86d6e:	f000 838f 	beq.w	87490 <_svfprintf_r+0x14b0>
   86d72:	f026 0320 	bic.w	r3, r6, #32
   86d76:	2b47      	cmp	r3, #71	; 0x47
   86d78:	9306      	str	r3, [sp, #24]
   86d7a:	f000 858f 	beq.w	8789c <_svfprintf_r+0x18bc>
   86d7e:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   86d82:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   86d86:	930f      	str	r3, [sp, #60]	; 0x3c
   86d88:	4613      	mov	r3, r2
   86d8a:	2b00      	cmp	r3, #0
   86d8c:	f2c0 85b0 	blt.w	878f0 <_svfprintf_r+0x1910>
   86d90:	930b      	str	r3, [sp, #44]	; 0x2c
   86d92:	2300      	movs	r3, #0
   86d94:	468b      	mov	fp, r1
   86d96:	931d      	str	r3, [sp, #116]	; 0x74
   86d98:	930d      	str	r3, [sp, #52]	; 0x34
   86d9a:	9b06      	ldr	r3, [sp, #24]
   86d9c:	2b46      	cmp	r3, #70	; 0x46
   86d9e:	f000 83e9 	beq.w	87574 <_svfprintf_r+0x1594>
   86da2:	2b45      	cmp	r3, #69	; 0x45
   86da4:	f000 8546 	beq.w	87834 <_svfprintf_r+0x1854>
   86da8:	9907      	ldr	r1, [sp, #28]
   86daa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86dac:	9101      	str	r1, [sp, #4]
   86dae:	2102      	movs	r1, #2
   86db0:	9100      	str	r1, [sp, #0]
   86db2:	a926      	add	r1, sp, #152	; 0x98
   86db4:	9104      	str	r1, [sp, #16]
   86db6:	a923      	add	r1, sp, #140	; 0x8c
   86db8:	9103      	str	r1, [sp, #12]
   86dba:	a922      	add	r1, sp, #136	; 0x88
   86dbc:	465a      	mov	r2, fp
   86dbe:	980a      	ldr	r0, [sp, #40]	; 0x28
   86dc0:	9102      	str	r1, [sp, #8]
   86dc2:	f000 ff05 	bl	87bd0 <_dtoa_r>
   86dc6:	9b06      	ldr	r3, [sp, #24]
   86dc8:	4605      	mov	r5, r0
   86dca:	2b47      	cmp	r3, #71	; 0x47
   86dcc:	f040 863a 	bne.w	87a44 <_svfprintf_r+0x1a64>
   86dd0:	f017 0f01 	tst.w	r7, #1
   86dd4:	46b9      	mov	r9, r7
   86dd6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   86dd8:	f040 84fe 	bne.w	877d8 <_svfprintf_r+0x17f8>
   86ddc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86dde:	1b5b      	subs	r3, r3, r5
   86de0:	9312      	str	r3, [sp, #72]	; 0x48
   86de2:	9b06      	ldr	r3, [sp, #24]
   86de4:	2b47      	cmp	r3, #71	; 0x47
   86de6:	f000 836e 	beq.w	874c6 <_svfprintf_r+0x14e6>
   86dea:	9b06      	ldr	r3, [sp, #24]
   86dec:	2b46      	cmp	r3, #70	; 0x46
   86dee:	f000 83f0 	beq.w	875d2 <_svfprintf_r+0x15f2>
   86df2:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86df4:	9310      	str	r3, [sp, #64]	; 0x40
   86df6:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86df8:	9a06      	ldr	r2, [sp, #24]
   86dfa:	3b01      	subs	r3, #1
   86dfc:	2a41      	cmp	r2, #65	; 0x41
   86dfe:	9322      	str	r3, [sp, #136]	; 0x88
   86e00:	f000 85bb 	beq.w	8797a <_svfprintf_r+0x199a>
   86e04:	2100      	movs	r1, #0
   86e06:	b2f2      	uxtb	r2, r6
   86e08:	2b00      	cmp	r3, #0
   86e0a:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
   86e0e:	bfb6      	itet	lt
   86e10:	222d      	movlt	r2, #45	; 0x2d
   86e12:	222b      	movge	r2, #43	; 0x2b
   86e14:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   86e16:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
   86e1a:	bfb8      	it	lt
   86e1c:	f1c3 0301 	rsblt	r3, r3, #1
   86e20:	2b09      	cmp	r3, #9
   86e22:	f340 859b 	ble.w	8795c <_svfprintf_r+0x197c>
   86e26:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
   86e2a:	4662      	mov	r2, ip
   86e2c:	4fb6      	ldr	r7, [pc, #728]	; (87108 <_svfprintf_r+0x1128>)
   86e2e:	461c      	mov	r4, r3
   86e30:	4610      	mov	r0, r2
   86e32:	fb87 1203 	smull	r1, r2, r7, r3
   86e36:	17d9      	asrs	r1, r3, #31
   86e38:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   86e3c:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   86e40:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   86e44:	3230      	adds	r2, #48	; 0x30
   86e46:	2c63      	cmp	r4, #99	; 0x63
   86e48:	f800 2c01 	strb.w	r2, [r0, #-1]
   86e4c:	460b      	mov	r3, r1
   86e4e:	f100 32ff 	add.w	r2, r0, #4294967295
   86e52:	dcec      	bgt.n	86e2e <_svfprintf_r+0xe4e>
   86e54:	3330      	adds	r3, #48	; 0x30
   86e56:	1e81      	subs	r1, r0, #2
   86e58:	b2db      	uxtb	r3, r3
   86e5a:	458c      	cmp	ip, r1
   86e5c:	f802 3c01 	strb.w	r3, [r2, #-1]
   86e60:	f240 85f9 	bls.w	87a56 <_svfprintf_r+0x1a76>
   86e64:	f10d 0192 	add.w	r1, sp, #146	; 0x92
   86e68:	e001      	b.n	86e6e <_svfprintf_r+0xe8e>
   86e6a:	f812 3b01 	ldrb.w	r3, [r2], #1
   86e6e:	4594      	cmp	ip, r2
   86e70:	f801 3b01 	strb.w	r3, [r1], #1
   86e74:	d1f9      	bne.n	86e6a <_svfprintf_r+0xe8a>
   86e76:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
   86e7a:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   86e7e:	1a1b      	subs	r3, r3, r0
   86e80:	4413      	add	r3, r2
   86e82:	aa24      	add	r2, sp, #144	; 0x90
   86e84:	1a9b      	subs	r3, r3, r2
   86e86:	931a      	str	r3, [sp, #104]	; 0x68
   86e88:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86e8a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   86e8c:	2b01      	cmp	r3, #1
   86e8e:	441a      	add	r2, r3
   86e90:	920b      	str	r2, [sp, #44]	; 0x2c
   86e92:	f340 8581 	ble.w	87998 <_svfprintf_r+0x19b8>
   86e96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86e98:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86e9a:	4413      	add	r3, r2
   86e9c:	930b      	str	r3, [sp, #44]	; 0x2c
   86e9e:	2300      	movs	r3, #0
   86ea0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86ea2:	f429 6780 	bic.w	r7, r9, #1024	; 0x400
   86ea6:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   86eaa:	f447 7780 	orr.w	r7, r7, #256	; 0x100
   86eae:	930f      	str	r3, [sp, #60]	; 0x3c
   86eb0:	9206      	str	r2, [sp, #24]
   86eb2:	9313      	str	r3, [sp, #76]	; 0x4c
   86eb4:	9310      	str	r3, [sp, #64]	; 0x40
   86eb6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   86eb8:	2b00      	cmp	r3, #0
   86eba:	f040 832c 	bne.w	87516 <_svfprintf_r+0x1536>
   86ebe:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86ec2:	9307      	str	r3, [sp, #28]
   86ec4:	f7ff b994 	b.w	861f0 <_svfprintf_r+0x210>
   86ec8:	46bb      	mov	fp, r7
   86eca:	f7ff bb2f 	b.w	8652c <_svfprintf_r+0x54c>
   86ece:	4b8f      	ldr	r3, [pc, #572]	; (8710c <_svfprintf_r+0x112c>)
   86ed0:	9318      	str	r3, [sp, #96]	; 0x60
   86ed2:	f017 0920 	ands.w	r9, r7, #32
   86ed6:	f000 80f5 	beq.w	870c4 <_svfprintf_r+0x10e4>
   86eda:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86edc:	3307      	adds	r3, #7
   86ede:	f023 0307 	bic.w	r3, r3, #7
   86ee2:	f8d3 9004 	ldr.w	r9, [r3, #4]
   86ee6:	f853 4b08 	ldr.w	r4, [r3], #8
   86eea:	930e      	str	r3, [sp, #56]	; 0x38
   86eec:	07f8      	lsls	r0, r7, #31
   86eee:	d509      	bpl.n	86f04 <_svfprintf_r+0xf24>
   86ef0:	ea54 0309 	orrs.w	r3, r4, r9
   86ef4:	d006      	beq.n	86f04 <_svfprintf_r+0xf24>
   86ef6:	2330      	movs	r3, #48	; 0x30
   86ef8:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   86efc:	f047 0702 	orr.w	r7, r7, #2
   86f00:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   86f04:	2302      	movs	r3, #2
   86f06:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   86f0a:	f7ff b989 	b.w	86220 <_svfprintf_r+0x240>
   86f0e:	4b80      	ldr	r3, [pc, #512]	; (87110 <_svfprintf_r+0x1130>)
   86f10:	9318      	str	r3, [sp, #96]	; 0x60
   86f12:	e7de      	b.n	86ed2 <_svfprintf_r+0xef2>
   86f14:	990c      	ldr	r1, [sp, #48]	; 0x30
   86f16:	980a      	ldr	r0, [sp, #40]	; 0x28
   86f18:	aa28      	add	r2, sp, #160	; 0xa0
   86f1a:	f002 fe1f 	bl	89b5c <__ssprint_r>
   86f1e:	2800      	cmp	r0, #0
   86f20:	f47f a9c1 	bne.w	862a6 <_svfprintf_r+0x2c6>
   86f24:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86f26:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86f2a:	e418      	b.n	8675e <_svfprintf_r+0x77e>
   86f2c:	2140      	movs	r1, #64	; 0x40
   86f2e:	980a      	ldr	r0, [sp, #40]	; 0x28
   86f30:	f001 ff26 	bl	88d80 <_malloc_r>
   86f34:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86f36:	6018      	str	r0, [r3, #0]
   86f38:	6118      	str	r0, [r3, #16]
   86f3a:	2800      	cmp	r0, #0
   86f3c:	f000 8597 	beq.w	87a6e <_svfprintf_r+0x1a8e>
   86f40:	2340      	movs	r3, #64	; 0x40
   86f42:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   86f44:	6153      	str	r3, [r2, #20]
   86f46:	f7ff b862 	b.w	8600e <_svfprintf_r+0x2e>
   86f4a:	2e10      	cmp	r6, #16
   86f4c:	f340 8576 	ble.w	87a3c <_svfprintf_r+0x1a5c>
   86f50:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 87114 <_svfprintf_r+0x1134>
   86f54:	4642      	mov	r2, r8
   86f56:	4648      	mov	r0, r9
   86f58:	4621      	mov	r1, r4
   86f5a:	46a8      	mov	r8, r5
   86f5c:	46b9      	mov	r9, r7
   86f5e:	f04f 0b10 	mov.w	fp, #16
   86f62:	4607      	mov	r7, r0
   86f64:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86f66:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86f68:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   86f6a:	e004      	b.n	86f76 <_svfprintf_r+0xf96>
   86f6c:	3208      	adds	r2, #8
   86f6e:	3e10      	subs	r6, #16
   86f70:	2e10      	cmp	r6, #16
   86f72:	f340 8213 	ble.w	8739c <_svfprintf_r+0x13bc>
   86f76:	3301      	adds	r3, #1
   86f78:	3110      	adds	r1, #16
   86f7a:	2b07      	cmp	r3, #7
   86f7c:	e9c2 7b00 	strd	r7, fp, [r2]
   86f80:	e9cd 3129 	strd	r3, r1, [sp, #164]	; 0xa4
   86f84:	ddf2      	ble.n	86f6c <_svfprintf_r+0xf8c>
   86f86:	4629      	mov	r1, r5
   86f88:	4620      	mov	r0, r4
   86f8a:	aa28      	add	r2, sp, #160	; 0xa0
   86f8c:	f002 fde6 	bl	89b5c <__ssprint_r>
   86f90:	2800      	cmp	r0, #0
   86f92:	f47f a988 	bne.w	862a6 <_svfprintf_r+0x2c6>
   86f96:	e9dd 3129 	ldrd	r3, r1, [sp, #164]	; 0xa4
   86f9a:	aa2b      	add	r2, sp, #172	; 0xac
   86f9c:	e7e7      	b.n	86f6e <_svfprintf_r+0xf8e>
   86f9e:	4628      	mov	r0, r5
   86fa0:	f8cd 901c 	str.w	r9, [sp, #28]
   86fa4:	940e      	str	r4, [sp, #56]	; 0x38
   86fa6:	f7fe ffb9 	bl	85f1c <strlen>
   86faa:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   86fae:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86fb2:	900b      	str	r0, [sp, #44]	; 0x2c
   86fb4:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   86fb8:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   86fbc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   86fc0:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   86fc4:	9306      	str	r3, [sp, #24]
   86fc6:	f7ff b913 	b.w	861f0 <_svfprintf_r+0x210>
   86fca:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86fcc:	4642      	mov	r2, r8
   86fce:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   86fd2:	18eb      	adds	r3, r5, r3
   86fd4:	465e      	mov	r6, fp
   86fd6:	9307      	str	r3, [sp, #28]
   86fd8:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   86fdc:	9710      	str	r7, [sp, #64]	; 0x40
   86fde:	4621      	mov	r1, r4
   86fe0:	9f19      	ldr	r7, [sp, #100]	; 0x64
   86fe2:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
   86fe6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   86fea:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   86fee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   86ff0:	9513      	str	r5, [sp, #76]	; 0x4c
   86ff2:	f1b8 0f00 	cmp.w	r8, #0
   86ff6:	d02e      	beq.n	87056 <_svfprintf_r+0x1076>
   86ff8:	bb83      	cbnz	r3, 8705c <_svfprintf_r+0x107c>
   86ffa:	3f01      	subs	r7, #1
   86ffc:	f108 38ff 	add.w	r8, r8, #4294967295
   87000:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   87002:	4449      	add	r1, r9
   87004:	e9c2 3900 	strd	r3, r9, [r2]
   87008:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8700a:	912a      	str	r1, [sp, #168]	; 0xa8
   8700c:	3301      	adds	r3, #1
   8700e:	2b07      	cmp	r3, #7
   87010:	9329      	str	r3, [sp, #164]	; 0xa4
   87012:	dc60      	bgt.n	870d6 <_svfprintf_r+0x10f6>
   87014:	3208      	adds	r2, #8
   87016:	9b07      	ldr	r3, [sp, #28]
   87018:	7838      	ldrb	r0, [r7, #0]
   8701a:	1b9b      	subs	r3, r3, r6
   8701c:	4283      	cmp	r3, r0
   8701e:	bfa8      	it	ge
   87020:	4603      	movge	r3, r0
   87022:	2b00      	cmp	r3, #0
   87024:	461c      	mov	r4, r3
   87026:	dd0b      	ble.n	87040 <_svfprintf_r+0x1060>
   87028:	9829      	ldr	r0, [sp, #164]	; 0xa4
   8702a:	4419      	add	r1, r3
   8702c:	3001      	adds	r0, #1
   8702e:	2807      	cmp	r0, #7
   87030:	e9c2 6300 	strd	r6, r3, [r2]
   87034:	912a      	str	r1, [sp, #168]	; 0xa8
   87036:	9029      	str	r0, [sp, #164]	; 0xa4
   87038:	f300 8114 	bgt.w	87264 <_svfprintf_r+0x1284>
   8703c:	7838      	ldrb	r0, [r7, #0]
   8703e:	3208      	adds	r2, #8
   87040:	2c00      	cmp	r4, #0
   87042:	bfb4      	ite	lt
   87044:	4605      	movlt	r5, r0
   87046:	1b05      	subge	r5, r0, r4
   87048:	2d00      	cmp	r5, #0
   8704a:	dc0b      	bgt.n	87064 <_svfprintf_r+0x1084>
   8704c:	4406      	add	r6, r0
   8704e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87050:	f1b8 0f00 	cmp.w	r8, #0
   87054:	d1d0      	bne.n	86ff8 <_svfprintf_r+0x1018>
   87056:	2b00      	cmp	r3, #0
   87058:	f000 8226 	beq.w	874a8 <_svfprintf_r+0x14c8>
   8705c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   8705e:	3b01      	subs	r3, #1
   87060:	930f      	str	r3, [sp, #60]	; 0x3c
   87062:	e7cd      	b.n	87000 <_svfprintf_r+0x1020>
   87064:	2d10      	cmp	r5, #16
   87066:	f340 849d 	ble.w	879a4 <_svfprintf_r+0x19c4>
   8706a:	2410      	movs	r4, #16
   8706c:	9829      	ldr	r0, [sp, #164]	; 0xa4
   8706e:	e004      	b.n	8707a <_svfprintf_r+0x109a>
   87070:	3d10      	subs	r5, #16
   87072:	2d10      	cmp	r5, #16
   87074:	f102 0208 	add.w	r2, r2, #8
   87078:	dd16      	ble.n	870a8 <_svfprintf_r+0x10c8>
   8707a:	3001      	adds	r0, #1
   8707c:	4b25      	ldr	r3, [pc, #148]	; (87114 <_svfprintf_r+0x1134>)
   8707e:	3110      	adds	r1, #16
   87080:	2807      	cmp	r0, #7
   87082:	e9c2 3400 	strd	r3, r4, [r2]
   87086:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   8708a:	ddf1      	ble.n	87070 <_svfprintf_r+0x1090>
   8708c:	4659      	mov	r1, fp
   8708e:	4650      	mov	r0, sl
   87090:	aa28      	add	r2, sp, #160	; 0xa0
   87092:	f002 fd63 	bl	89b5c <__ssprint_r>
   87096:	2800      	cmp	r0, #0
   87098:	f47f a905 	bne.w	862a6 <_svfprintf_r+0x2c6>
   8709c:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
   870a0:	3d10      	subs	r5, #16
   870a2:	2d10      	cmp	r5, #16
   870a4:	aa2b      	add	r2, sp, #172	; 0xac
   870a6:	dce8      	bgt.n	8707a <_svfprintf_r+0x109a>
   870a8:	3001      	adds	r0, #1
   870aa:	4b1a      	ldr	r3, [pc, #104]	; (87114 <_svfprintf_r+0x1134>)
   870ac:	4429      	add	r1, r5
   870ae:	2807      	cmp	r0, #7
   870b0:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   870b4:	6055      	str	r5, [r2, #4]
   870b6:	6013      	str	r3, [r2, #0]
   870b8:	f300 8241 	bgt.w	8753e <_svfprintf_r+0x155e>
   870bc:	7838      	ldrb	r0, [r7, #0]
   870be:	3208      	adds	r2, #8
   870c0:	4406      	add	r6, r0
   870c2:	e7c4      	b.n	8704e <_svfprintf_r+0x106e>
   870c4:	f017 0310 	ands.w	r3, r7, #16
   870c8:	f000 80a0 	beq.w	8720c <_svfprintf_r+0x122c>
   870cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   870ce:	f853 4b04 	ldr.w	r4, [r3], #4
   870d2:	930e      	str	r3, [sp, #56]	; 0x38
   870d4:	e70a      	b.n	86eec <_svfprintf_r+0xf0c>
   870d6:	4659      	mov	r1, fp
   870d8:	4650      	mov	r0, sl
   870da:	aa28      	add	r2, sp, #160	; 0xa0
   870dc:	f002 fd3e 	bl	89b5c <__ssprint_r>
   870e0:	2800      	cmp	r0, #0
   870e2:	f47f a8e0 	bne.w	862a6 <_svfprintf_r+0x2c6>
   870e6:	992a      	ldr	r1, [sp, #168]	; 0xa8
   870e8:	aa2b      	add	r2, sp, #172	; 0xac
   870ea:	e794      	b.n	87016 <_svfprintf_r+0x1036>
   870ec:	2300      	movs	r3, #0
   870ee:	f40b 6280 	and.w	r2, fp, #1024	; 0x400
   870f2:	9606      	str	r6, [sp, #24]
   870f4:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   870f8:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   870fc:	4692      	mov	sl, r2
   870fe:	461e      	mov	r6, r3
   87100:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
   87104:	af54      	add	r7, sp, #336	; 0x150
   87106:	e014      	b.n	87132 <_svfprintf_r+0x1152>
   87108:	66666667 	.word	0x66666667
   8710c:	0008caa4 	.word	0x0008caa4
   87110:	0008cab8 	.word	0x0008cab8
   87114:	0008cae8 	.word	0x0008cae8
   87118:	2300      	movs	r3, #0
   8711a:	4620      	mov	r0, r4
   8711c:	4649      	mov	r1, r9
   8711e:	220a      	movs	r2, #10
   87120:	f005 fb02 	bl	8c728 <__aeabi_uldivmod>
   87124:	2c0a      	cmp	r4, #10
   87126:	f179 0300 	sbcs.w	r3, r9, #0
   8712a:	d31b      	bcc.n	87164 <_svfprintf_r+0x1184>
   8712c:	4604      	mov	r4, r0
   8712e:	4689      	mov	r9, r1
   87130:	462f      	mov	r7, r5
   87132:	4620      	mov	r0, r4
   87134:	220a      	movs	r2, #10
   87136:	2300      	movs	r3, #0
   87138:	4649      	mov	r1, r9
   8713a:	f005 faf5 	bl	8c728 <__aeabi_uldivmod>
   8713e:	3230      	adds	r2, #48	; 0x30
   87140:	1e7d      	subs	r5, r7, #1
   87142:	3601      	adds	r6, #1
   87144:	f807 2c01 	strb.w	r2, [r7, #-1]
   87148:	f1ba 0f00 	cmp.w	sl, #0
   8714c:	d0e4      	beq.n	87118 <_svfprintf_r+0x1138>
   8714e:	f898 3000 	ldrb.w	r3, [r8]
   87152:	429e      	cmp	r6, r3
   87154:	d1e0      	bne.n	87118 <_svfprintf_r+0x1138>
   87156:	2eff      	cmp	r6, #255	; 0xff
   87158:	d0de      	beq.n	87118 <_svfprintf_r+0x1138>
   8715a:	2c0a      	cmp	r4, #10
   8715c:	f179 0300 	sbcs.w	r3, r9, #0
   87160:	f080 8130 	bcs.w	873c4 <_svfprintf_r+0x13e4>
   87164:	ab54      	add	r3, sp, #336	; 0x150
   87166:	1b5b      	subs	r3, r3, r5
   87168:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   8716c:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
   87170:	9612      	str	r6, [sp, #72]	; 0x48
   87172:	465f      	mov	r7, fp
   87174:	9e06      	ldr	r6, [sp, #24]
   87176:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   8717a:	930b      	str	r3, [sp, #44]	; 0x2c
   8717c:	f7ff b82b 	b.w	861d6 <_svfprintf_r+0x1f6>
   87180:	990c      	ldr	r1, [sp, #48]	; 0x30
   87182:	980a      	ldr	r0, [sp, #40]	; 0x28
   87184:	aa28      	add	r2, sp, #160	; 0xa0
   87186:	931d      	str	r3, [sp, #116]	; 0x74
   87188:	f002 fce8 	bl	89b5c <__ssprint_r>
   8718c:	2800      	cmp	r0, #0
   8718e:	f47f a88a 	bne.w	862a6 <_svfprintf_r+0x2c6>
   87192:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87196:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87198:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   8719a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8719e:	f7ff b8b8 	b.w	86312 <_svfprintf_r+0x332>
   871a2:	2301      	movs	r3, #1
   871a4:	f8c8 3004 	str.w	r3, [r8, #4]
   871a8:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   871aa:	4abc      	ldr	r2, [pc, #752]	; (8749c <_svfprintf_r+0x14bc>)
   871ac:	3301      	adds	r3, #1
   871ae:	3401      	adds	r4, #1
   871b0:	2b07      	cmp	r3, #7
   871b2:	942a      	str	r4, [sp, #168]	; 0xa8
   871b4:	9329      	str	r3, [sp, #164]	; 0xa4
   871b6:	f8c8 2000 	str.w	r2, [r8]
   871ba:	f300 8117 	bgt.w	873ec <_svfprintf_r+0x140c>
   871be:	f108 0808 	add.w	r8, r8, #8
   871c2:	2900      	cmp	r1, #0
   871c4:	f040 8086 	bne.w	872d4 <_svfprintf_r+0x12f4>
   871c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   871ca:	f007 0301 	and.w	r3, r7, #1
   871ce:	4313      	orrs	r3, r2
   871d0:	f43f a8e0 	beq.w	86394 <_svfprintf_r+0x3b4>
   871d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   871d6:	9917      	ldr	r1, [sp, #92]	; 0x5c
   871d8:	191a      	adds	r2, r3, r4
   871da:	e9c8 1300 	strd	r1, r3, [r8]
   871de:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   871e0:	922a      	str	r2, [sp, #168]	; 0xa8
   871e2:	3301      	adds	r3, #1
   871e4:	2b07      	cmp	r3, #7
   871e6:	9329      	str	r3, [sp, #164]	; 0xa4
   871e8:	f300 8137 	bgt.w	8745a <_svfprintf_r+0x147a>
   871ec:	f108 0808 	add.w	r8, r8, #8
   871f0:	9912      	ldr	r1, [sp, #72]	; 0x48
   871f2:	3301      	adds	r3, #1
   871f4:	188c      	adds	r4, r1, r2
   871f6:	2b07      	cmp	r3, #7
   871f8:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   871fc:	f8c8 5000 	str.w	r5, [r8]
   87200:	f8c8 1004 	str.w	r1, [r8, #4]
   87204:	f77f a8c4 	ble.w	86390 <_svfprintf_r+0x3b0>
   87208:	f7ff bbac 	b.w	86964 <_svfprintf_r+0x984>
   8720c:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   87210:	f000 80a5 	beq.w	8735e <_svfprintf_r+0x137e>
   87214:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   87216:	4699      	mov	r9, r3
   87218:	f852 4b04 	ldr.w	r4, [r2], #4
   8721c:	920e      	str	r2, [sp, #56]	; 0x38
   8721e:	b2a4      	uxth	r4, r4
   87220:	e664      	b.n	86eec <_svfprintf_r+0xf0c>
   87222:	46bb      	mov	fp, r7
   87224:	f7fe bfca 	b.w	861bc <_svfprintf_r+0x1dc>
   87228:	990c      	ldr	r1, [sp, #48]	; 0x30
   8722a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8722c:	aa28      	add	r2, sp, #160	; 0xa0
   8722e:	f002 fc95 	bl	89b5c <__ssprint_r>
   87232:	2800      	cmp	r0, #0
   87234:	f47f a837 	bne.w	862a6 <_svfprintf_r+0x2c6>
   87238:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8723a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8723e:	f7ff ba7b 	b.w	86738 <_svfprintf_r+0x758>
   87242:	4614      	mov	r4, r2
   87244:	463a      	mov	r2, r7
   87246:	464f      	mov	r7, r9
   87248:	4691      	mov	r9, r2
   8724a:	3301      	adds	r3, #1
   8724c:	442c      	add	r4, r5
   8724e:	2b07      	cmp	r3, #7
   87250:	f8c8 9000 	str.w	r9, [r8]
   87254:	f8c8 5004 	str.w	r5, [r8, #4]
   87258:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   8725c:	f77f a898 	ble.w	86390 <_svfprintf_r+0x3b0>
   87260:	f7ff bb80 	b.w	86964 <_svfprintf_r+0x984>
   87264:	4659      	mov	r1, fp
   87266:	4650      	mov	r0, sl
   87268:	aa28      	add	r2, sp, #160	; 0xa0
   8726a:	f002 fc77 	bl	89b5c <__ssprint_r>
   8726e:	2800      	cmp	r0, #0
   87270:	f47f a819 	bne.w	862a6 <_svfprintf_r+0x2c6>
   87274:	7838      	ldrb	r0, [r7, #0]
   87276:	992a      	ldr	r1, [sp, #168]	; 0xa8
   87278:	aa2b      	add	r2, sp, #172	; 0xac
   8727a:	e6e1      	b.n	87040 <_svfprintf_r+0x1060>
   8727c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8727e:	980a      	ldr	r0, [sp, #40]	; 0x28
   87280:	aa28      	add	r2, sp, #160	; 0xa0
   87282:	f002 fc6b 	bl	89b5c <__ssprint_r>
   87286:	2800      	cmp	r0, #0
   87288:	f47f a80d 	bne.w	862a6 <_svfprintf_r+0x2c6>
   8728c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8728e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87292:	f7ff b865 	b.w	86360 <_svfprintf_r+0x380>
   87296:	2b01      	cmp	r3, #1
   87298:	46bb      	mov	fp, r7
   8729a:	f47f a9f5 	bne.w	86688 <_svfprintf_r+0x6a8>
   8729e:	f7fe bf92 	b.w	861c6 <_svfprintf_r+0x1e6>
   872a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   872a4:	9908      	ldr	r1, [sp, #32]
   872a6:	f853 2b04 	ldr.w	r2, [r3], #4
   872aa:	4655      	mov	r5, sl
   872ac:	6011      	str	r1, [r2, #0]
   872ae:	930e      	str	r3, [sp, #56]	; 0x38
   872b0:	f7ff b88e 	b.w	863d0 <_svfprintf_r+0x3f0>
   872b4:	2b06      	cmp	r3, #6
   872b6:	4629      	mov	r1, r5
   872b8:	bf28      	it	cs
   872ba:	2306      	movcs	r3, #6
   872bc:	462a      	mov	r2, r5
   872be:	9507      	str	r5, [sp, #28]
   872c0:	950d      	str	r5, [sp, #52]	; 0x34
   872c2:	9306      	str	r3, [sp, #24]
   872c4:	4d76      	ldr	r5, [pc, #472]	; (874a0 <_svfprintf_r+0x14c0>)
   872c6:	940e      	str	r4, [sp, #56]	; 0x38
   872c8:	930b      	str	r3, [sp, #44]	; 0x2c
   872ca:	910f      	str	r1, [sp, #60]	; 0x3c
   872cc:	9113      	str	r1, [sp, #76]	; 0x4c
   872ce:	9110      	str	r1, [sp, #64]	; 0x40
   872d0:	f7fe bf8e 	b.w	861f0 <_svfprintf_r+0x210>
   872d4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   872d6:	9817      	ldr	r0, [sp, #92]	; 0x5c
   872d8:	191a      	adds	r2, r3, r4
   872da:	e9c8 0300 	strd	r0, r3, [r8]
   872de:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   872e0:	922a      	str	r2, [sp, #168]	; 0xa8
   872e2:	3301      	adds	r3, #1
   872e4:	2b07      	cmp	r3, #7
   872e6:	9329      	str	r3, [sp, #164]	; 0xa4
   872e8:	f300 80b7 	bgt.w	8745a <_svfprintf_r+0x147a>
   872ec:	f108 0808 	add.w	r8, r8, #8
   872f0:	2900      	cmp	r1, #0
   872f2:	f6bf af7d 	bge.w	871f0 <_svfprintf_r+0x1210>
   872f6:	424e      	negs	r6, r1
   872f8:	3110      	adds	r1, #16
   872fa:	f280 83a9 	bge.w	87a50 <_svfprintf_r+0x1a70>
   872fe:	4641      	mov	r1, r8
   87300:	2410      	movs	r4, #16
   87302:	46a8      	mov	r8, r5
   87304:	f8df 919c 	ldr.w	r9, [pc, #412]	; 874a4 <_svfprintf_r+0x14c4>
   87308:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   8730c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   8730e:	e004      	b.n	8731a <_svfprintf_r+0x133a>
   87310:	3108      	adds	r1, #8
   87312:	3e10      	subs	r6, #16
   87314:	2e10      	cmp	r6, #16
   87316:	f340 82a7 	ble.w	87868 <_svfprintf_r+0x1888>
   8731a:	3301      	adds	r3, #1
   8731c:	3210      	adds	r2, #16
   8731e:	2b07      	cmp	r3, #7
   87320:	e9c1 9400 	strd	r9, r4, [r1]
   87324:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   87328:	ddf2      	ble.n	87310 <_svfprintf_r+0x1330>
   8732a:	4629      	mov	r1, r5
   8732c:	4658      	mov	r0, fp
   8732e:	aa28      	add	r2, sp, #160	; 0xa0
   87330:	f002 fc14 	bl	89b5c <__ssprint_r>
   87334:	2800      	cmp	r0, #0
   87336:	f47e afb6 	bne.w	862a6 <_svfprintf_r+0x2c6>
   8733a:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   8733e:	a92b      	add	r1, sp, #172	; 0xac
   87340:	e7e7      	b.n	87312 <_svfprintf_r+0x1332>
   87342:	4614      	mov	r4, r2
   87344:	9f07      	ldr	r7, [sp, #28]
   87346:	3601      	adds	r6, #1
   87348:	442c      	add	r4, r5
   8734a:	2e07      	cmp	r6, #7
   8734c:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   87350:	f8c8 9000 	str.w	r9, [r8]
   87354:	f8c8 5004 	str.w	r5, [r8, #4]
   87358:	f77f aaf5 	ble.w	86946 <_svfprintf_r+0x966>
   8735c:	e44e      	b.n	86bfc <_svfprintf_r+0xc1c>
   8735e:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   87362:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87364:	d066      	beq.n	87434 <_svfprintf_r+0x1454>
   87366:	f853 4b04 	ldr.w	r4, [r3], #4
   8736a:	4691      	mov	r9, r2
   8736c:	930e      	str	r3, [sp, #56]	; 0x38
   8736e:	b2e4      	uxtb	r4, r4
   87370:	e5bc      	b.n	86eec <_svfprintf_r+0xf0c>
   87372:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   87376:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87378:	d057      	beq.n	8742a <_svfprintf_r+0x144a>
   8737a:	f853 4b04 	ldr.w	r4, [r3], #4
   8737e:	4691      	mov	r9, r2
   87380:	930e      	str	r3, [sp, #56]	; 0x38
   87382:	b2e4      	uxtb	r4, r4
   87384:	f7fe bf49 	b.w	8621a <_svfprintf_r+0x23a>
   87388:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   8738a:	f8df 9118 	ldr.w	r9, [pc, #280]	; 874a4 <_svfprintf_r+0x14c4>
   8738e:	f7ff ba95 	b.w	868bc <_svfprintf_r+0x8dc>
   87392:	222d      	movs	r2, #45	; 0x2d
   87394:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   87398:	f7ff b857 	b.w	8644a <_svfprintf_r+0x46a>
   8739c:	4645      	mov	r5, r8
   8739e:	4690      	mov	r8, r2
   873a0:	463a      	mov	r2, r7
   873a2:	460c      	mov	r4, r1
   873a4:	464f      	mov	r7, r9
   873a6:	4691      	mov	r9, r2
   873a8:	3301      	adds	r3, #1
   873aa:	4434      	add	r4, r6
   873ac:	2b07      	cmp	r3, #7
   873ae:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   873b2:	f8c8 9000 	str.w	r9, [r8]
   873b6:	f8c8 6004 	str.w	r6, [r8, #4]
   873ba:	dc5c      	bgt.n	87476 <_svfprintf_r+0x1496>
   873bc:	f108 0808 	add.w	r8, r8, #8
   873c0:	f7ff bb9e 	b.w	86b00 <_svfprintf_r+0xb20>
   873c4:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   873c6:	991b      	ldr	r1, [sp, #108]	; 0x6c
   873c8:	1aed      	subs	r5, r5, r3
   873ca:	461a      	mov	r2, r3
   873cc:	4628      	mov	r0, r5
   873ce:	f7fe fdd3 	bl	85f78 <strncpy>
   873d2:	f898 3001 	ldrb.w	r3, [r8, #1]
   873d6:	b10b      	cbz	r3, 873dc <_svfprintf_r+0x13fc>
   873d8:	f108 0801 	add.w	r8, r8, #1
   873dc:	4620      	mov	r0, r4
   873de:	4649      	mov	r1, r9
   873e0:	220a      	movs	r2, #10
   873e2:	2300      	movs	r3, #0
   873e4:	2600      	movs	r6, #0
   873e6:	f005 f99f 	bl	8c728 <__aeabi_uldivmod>
   873ea:	e69f      	b.n	8712c <_svfprintf_r+0x114c>
   873ec:	990c      	ldr	r1, [sp, #48]	; 0x30
   873ee:	980a      	ldr	r0, [sp, #40]	; 0x28
   873f0:	aa28      	add	r2, sp, #160	; 0xa0
   873f2:	f002 fbb3 	bl	89b5c <__ssprint_r>
   873f6:	2800      	cmp	r0, #0
   873f8:	f47e af55 	bne.w	862a6 <_svfprintf_r+0x2c6>
   873fc:	9922      	ldr	r1, [sp, #136]	; 0x88
   873fe:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87400:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87404:	e6dd      	b.n	871c2 <_svfprintf_r+0x11e2>
   87406:	9a12      	ldr	r2, [sp, #72]	; 0x48
   87408:	18ae      	adds	r6, r5, r2
   8740a:	eba6 060b 	sub.w	r6, r6, fp
   8740e:	1ad5      	subs	r5, r2, r3
   87410:	42ae      	cmp	r6, r5
   87412:	bfa8      	it	ge
   87414:	462e      	movge	r6, r5
   87416:	f7ff bba6 	b.w	86b66 <_svfprintf_r+0xb86>
   8741a:	f852 4b04 	ldr.w	r4, [r2], #4
   8741e:	4689      	mov	r9, r1
   87420:	2301      	movs	r3, #1
   87422:	920e      	str	r2, [sp, #56]	; 0x38
   87424:	b2e4      	uxtb	r4, r4
   87426:	f7fe befb 	b.w	86220 <_svfprintf_r+0x240>
   8742a:	f853 4b04 	ldr.w	r4, [r3], #4
   8742e:	930e      	str	r3, [sp, #56]	; 0x38
   87430:	f7fe bef3 	b.w	8621a <_svfprintf_r+0x23a>
   87434:	f853 4b04 	ldr.w	r4, [r3], #4
   87438:	930e      	str	r3, [sp, #56]	; 0x38
   8743a:	e557      	b.n	86eec <_svfprintf_r+0xf0c>
   8743c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8743e:	9908      	ldr	r1, [sp, #32]
   87440:	f853 2b04 	ldr.w	r2, [r3], #4
   87444:	4655      	mov	r5, sl
   87446:	8011      	strh	r1, [r2, #0]
   87448:	930e      	str	r3, [sp, #56]	; 0x38
   8744a:	f7fe bfc1 	b.w	863d0 <_svfprintf_r+0x3f0>
   8744e:	f344 19c0 	sbfx	r9, r4, #7, #1
   87452:	464b      	mov	r3, r9
   87454:	b264      	sxtb	r4, r4
   87456:	f7fe bea4 	b.w	861a2 <_svfprintf_r+0x1c2>
   8745a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8745c:	980a      	ldr	r0, [sp, #40]	; 0x28
   8745e:	aa28      	add	r2, sp, #160	; 0xa0
   87460:	f002 fb7c 	bl	89b5c <__ssprint_r>
   87464:	2800      	cmp	r0, #0
   87466:	f47e af1e 	bne.w	862a6 <_svfprintf_r+0x2c6>
   8746a:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   8746e:	9922      	ldr	r1, [sp, #136]	; 0x88
   87470:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87474:	e73c      	b.n	872f0 <_svfprintf_r+0x1310>
   87476:	990c      	ldr	r1, [sp, #48]	; 0x30
   87478:	980a      	ldr	r0, [sp, #40]	; 0x28
   8747a:	aa28      	add	r2, sp, #160	; 0xa0
   8747c:	f002 fb6e 	bl	89b5c <__ssprint_r>
   87480:	2800      	cmp	r0, #0
   87482:	f47e af10 	bne.w	862a6 <_svfprintf_r+0x2c6>
   87486:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87488:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8748c:	f7ff bb38 	b.w	86b00 <_svfprintf_r+0xb20>
   87490:	2306      	movs	r3, #6
   87492:	9307      	str	r3, [sp, #28]
   87494:	f026 0320 	bic.w	r3, r6, #32
   87498:	9306      	str	r3, [sp, #24]
   8749a:	e470      	b.n	86d7e <_svfprintf_r+0xd9e>
   8749c:	0008cad4 	.word	0x0008cad4
   874a0:	0008cacc 	.word	0x0008cacc
   874a4:	0008cae8 	.word	0x0008cae8
   874a8:	e9dd 3512 	ldrd	r3, r5, [sp, #72]	; 0x48
   874ac:	18eb      	adds	r3, r5, r3
   874ae:	429e      	cmp	r6, r3
   874b0:	46b3      	mov	fp, r6
   874b2:	9719      	str	r7, [sp, #100]	; 0x64
   874b4:	4690      	mov	r8, r2
   874b6:	460c      	mov	r4, r1
   874b8:	bf28      	it	cs
   874ba:	469b      	movcs	fp, r3
   874bc:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   874c0:	9f10      	ldr	r7, [sp, #64]	; 0x40
   874c2:	f7ff bb23 	b.w	86b0c <_svfprintf_r+0xb2c>
   874c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   874c8:	1cda      	adds	r2, r3, #3
   874ca:	9310      	str	r3, [sp, #64]	; 0x40
   874cc:	db02      	blt.n	874d4 <_svfprintf_r+0x14f4>
   874ce:	9a07      	ldr	r2, [sp, #28]
   874d0:	4293      	cmp	r3, r2
   874d2:	dd04      	ble.n	874de <_svfprintf_r+0x14fe>
   874d4:	3e02      	subs	r6, #2
   874d6:	f026 0320 	bic.w	r3, r6, #32
   874da:	9306      	str	r3, [sp, #24]
   874dc:	e48b      	b.n	86df6 <_svfprintf_r+0xe16>
   874de:	9b10      	ldr	r3, [sp, #64]	; 0x40
   874e0:	9a12      	ldr	r2, [sp, #72]	; 0x48
   874e2:	4293      	cmp	r3, r2
   874e4:	f2c0 80c2 	blt.w	8766c <_svfprintf_r+0x168c>
   874e8:	f019 0f01 	tst.w	r9, #1
   874ec:	f000 821d 	beq.w	8792a <_svfprintf_r+0x194a>
   874f0:	9a16      	ldr	r2, [sp, #88]	; 0x58
   874f2:	4413      	add	r3, r2
   874f4:	930b      	str	r3, [sp, #44]	; 0x2c
   874f6:	f419 6f80 	tst.w	r9, #1024	; 0x400
   874fa:	f000 8214 	beq.w	87926 <_svfprintf_r+0x1946>
   874fe:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87500:	2667      	movs	r6, #103	; 0x67
   87502:	2b00      	cmp	r3, #0
   87504:	dc76      	bgt.n	875f4 <_svfprintf_r+0x1614>
   87506:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87508:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   8750c:	9306      	str	r3, [sp, #24]
   8750e:	2300      	movs	r3, #0
   87510:	930f      	str	r3, [sp, #60]	; 0x3c
   87512:	9313      	str	r3, [sp, #76]	; 0x4c
   87514:	e4cf      	b.n	86eb6 <_svfprintf_r+0xed6>
   87516:	222d      	movs	r2, #45	; 0x2d
   87518:	2300      	movs	r3, #0
   8751a:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   8751e:	9307      	str	r3, [sp, #28]
   87520:	f7fe be68 	b.w	861f4 <_svfprintf_r+0x214>
   87524:	990c      	ldr	r1, [sp, #48]	; 0x30
   87526:	980a      	ldr	r0, [sp, #40]	; 0x28
   87528:	aa28      	add	r2, sp, #160	; 0xa0
   8752a:	f002 fb17 	bl	89b5c <__ssprint_r>
   8752e:	2800      	cmp	r0, #0
   87530:	f47e aeb9 	bne.w	862a6 <_svfprintf_r+0x2c6>
   87534:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87536:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8753a:	f7ff bad8 	b.w	86aee <_svfprintf_r+0xb0e>
   8753e:	4659      	mov	r1, fp
   87540:	4650      	mov	r0, sl
   87542:	aa28      	add	r2, sp, #160	; 0xa0
   87544:	f002 fb0a 	bl	89b5c <__ssprint_r>
   87548:	2800      	cmp	r0, #0
   8754a:	f47e aeac 	bne.w	862a6 <_svfprintf_r+0x2c6>
   8754e:	7838      	ldrb	r0, [r7, #0]
   87550:	992a      	ldr	r1, [sp, #168]	; 0xa8
   87552:	aa2b      	add	r2, sp, #172	; 0xac
   87554:	4406      	add	r6, r0
   87556:	e57a      	b.n	8704e <_svfprintf_r+0x106e>
   87558:	990c      	ldr	r1, [sp, #48]	; 0x30
   8755a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8755c:	aa28      	add	r2, sp, #160	; 0xa0
   8755e:	f002 fafd 	bl	89b5c <__ssprint_r>
   87562:	2800      	cmp	r0, #0
   87564:	f47e ae9f 	bne.w	862a6 <_svfprintf_r+0x2c6>
   87568:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8756a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8756c:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87570:	f7ff bae1 	b.w	86b36 <_svfprintf_r+0xb56>
   87574:	9907      	ldr	r1, [sp, #28]
   87576:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87578:	9101      	str	r1, [sp, #4]
   8757a:	2103      	movs	r1, #3
   8757c:	9100      	str	r1, [sp, #0]
   8757e:	a926      	add	r1, sp, #152	; 0x98
   87580:	9104      	str	r1, [sp, #16]
   87582:	a923      	add	r1, sp, #140	; 0x8c
   87584:	9103      	str	r1, [sp, #12]
   87586:	a922      	add	r1, sp, #136	; 0x88
   87588:	465a      	mov	r2, fp
   8758a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8758c:	9102      	str	r1, [sp, #8]
   8758e:	f000 fb1f 	bl	87bd0 <_dtoa_r>
   87592:	7803      	ldrb	r3, [r0, #0]
   87594:	4605      	mov	r5, r0
   87596:	2b30      	cmp	r3, #48	; 0x30
   87598:	f000 8216 	beq.w	879c8 <_svfprintf_r+0x19e8>
   8759c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8759e:	9a07      	ldr	r2, [sp, #28]
   875a0:	46b9      	mov	r9, r7
   875a2:	4413      	add	r3, r2
   875a4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   875a6:	18ec      	adds	r4, r5, r3
   875a8:	4658      	mov	r0, fp
   875aa:	2200      	movs	r2, #0
   875ac:	2300      	movs	r3, #0
   875ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   875b0:	f005 f84a 	bl	8c648 <__aeabi_dcmpeq>
   875b4:	b108      	cbz	r0, 875ba <_svfprintf_r+0x15da>
   875b6:	4623      	mov	r3, r4
   875b8:	e411      	b.n	86dde <_svfprintf_r+0xdfe>
   875ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
   875bc:	42a3      	cmp	r3, r4
   875be:	f4bf ac0e 	bcs.w	86dde <_svfprintf_r+0xdfe>
   875c2:	2130      	movs	r1, #48	; 0x30
   875c4:	1c5a      	adds	r2, r3, #1
   875c6:	9226      	str	r2, [sp, #152]	; 0x98
   875c8:	7019      	strb	r1, [r3, #0]
   875ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
   875cc:	429c      	cmp	r4, r3
   875ce:	d8f9      	bhi.n	875c4 <_svfprintf_r+0x15e4>
   875d0:	e405      	b.n	86dde <_svfprintf_r+0xdfe>
   875d2:	9a22      	ldr	r2, [sp, #136]	; 0x88
   875d4:	2a00      	cmp	r2, #0
   875d6:	9210      	str	r2, [sp, #64]	; 0x40
   875d8:	f340 820e 	ble.w	879f8 <_svfprintf_r+0x1a18>
   875dc:	9907      	ldr	r1, [sp, #28]
   875de:	f009 0301 	and.w	r3, r9, #1
   875e2:	430b      	orrs	r3, r1
   875e4:	f040 817e 	bne.w	878e4 <_svfprintf_r+0x1904>
   875e8:	2666      	movs	r6, #102	; 0x66
   875ea:	9b10      	ldr	r3, [sp, #64]	; 0x40
   875ec:	930b      	str	r3, [sp, #44]	; 0x2c
   875ee:	f419 6f80 	tst.w	r9, #1024	; 0x400
   875f2:	d088      	beq.n	87506 <_svfprintf_r+0x1526>
   875f4:	9919      	ldr	r1, [sp, #100]	; 0x64
   875f6:	780b      	ldrb	r3, [r1, #0]
   875f8:	2bff      	cmp	r3, #255	; 0xff
   875fa:	f000 8225 	beq.w	87a48 <_svfprintf_r+0x1a68>
   875fe:	2400      	movs	r4, #0
   87600:	9a10      	ldr	r2, [sp, #64]	; 0x40
   87602:	4620      	mov	r0, r4
   87604:	e004      	b.n	87610 <_svfprintf_r+0x1630>
   87606:	3001      	adds	r0, #1
   87608:	3101      	adds	r1, #1
   8760a:	2bff      	cmp	r3, #255	; 0xff
   8760c:	f000 8159 	beq.w	878c2 <_svfprintf_r+0x18e2>
   87610:	4293      	cmp	r3, r2
   87612:	f280 8156 	bge.w	878c2 <_svfprintf_r+0x18e2>
   87616:	1ad2      	subs	r2, r2, r3
   87618:	784b      	ldrb	r3, [r1, #1]
   8761a:	2b00      	cmp	r3, #0
   8761c:	d1f3      	bne.n	87606 <_svfprintf_r+0x1626>
   8761e:	780b      	ldrb	r3, [r1, #0]
   87620:	3401      	adds	r4, #1
   87622:	e7f2      	b.n	8760a <_svfprintf_r+0x162a>
   87624:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   87628:	f7ff b9da 	b.w	869e0 <_svfprintf_r+0xa00>
   8762c:	9b07      	ldr	r3, [sp, #28]
   8762e:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87632:	940e      	str	r4, [sp, #56]	; 0x38
   87634:	9306      	str	r3, [sp, #24]
   87636:	930b      	str	r3, [sp, #44]	; 0x2c
   87638:	9007      	str	r0, [sp, #28]
   8763a:	900f      	str	r0, [sp, #60]	; 0x3c
   8763c:	9013      	str	r0, [sp, #76]	; 0x4c
   8763e:	9010      	str	r0, [sp, #64]	; 0x40
   87640:	f7fe bdd6 	b.w	861f0 <_svfprintf_r+0x210>
   87644:	990c      	ldr	r1, [sp, #48]	; 0x30
   87646:	980a      	ldr	r0, [sp, #40]	; 0x28
   87648:	aa28      	add	r2, sp, #160	; 0xa0
   8764a:	f002 fa87 	bl	89b5c <__ssprint_r>
   8764e:	2800      	cmp	r0, #0
   87650:	f47e ae29 	bne.w	862a6 <_svfprintf_r+0x2c6>
   87654:	9d22      	ldr	r5, [sp, #136]	; 0x88
   87656:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87658:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8765a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8765e:	1b5d      	subs	r5, r3, r5
   87660:	f7ff ba81 	b.w	86b66 <_svfprintf_r+0xb86>
   87664:	2300      	movs	r3, #0
   87666:	9307      	str	r3, [sp, #28]
   87668:	f7fe bd0b 	b.w	86082 <_svfprintf_r+0xa2>
   8766c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8766e:	9a16      	ldr	r2, [sp, #88]	; 0x58
   87670:	189a      	adds	r2, r3, r2
   87672:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87674:	920b      	str	r2, [sp, #44]	; 0x2c
   87676:	2b00      	cmp	r3, #0
   87678:	f340 8185 	ble.w	87986 <_svfprintf_r+0x19a6>
   8767c:	2667      	movs	r6, #103	; 0x67
   8767e:	e7b6      	b.n	875ee <_svfprintf_r+0x160e>
   87680:	2330      	movs	r3, #48	; 0x30
   87682:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   87686:	2358      	movs	r3, #88	; 0x58
   87688:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
   8768c:	9b07      	ldr	r3, [sp, #28]
   8768e:	f047 0402 	orr.w	r4, r7, #2
   87692:	2b63      	cmp	r3, #99	; 0x63
   87694:	f300 80c4 	bgt.w	87820 <_svfprintf_r+0x1840>
   87698:	2300      	movs	r3, #0
   8769a:	ad3b      	add	r5, sp, #236	; 0xec
   8769c:	930d      	str	r3, [sp, #52]	; 0x34
   8769e:	f447 7381 	orr.w	r3, r7, #258	; 0x102
   876a2:	930f      	str	r3, [sp, #60]	; 0x3c
   876a4:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   876a8:	4613      	mov	r3, r2
   876aa:	2b00      	cmp	r3, #0
   876ac:	4627      	mov	r7, r4
   876ae:	f2c0 8084 	blt.w	877ba <_svfprintf_r+0x17da>
   876b2:	930b      	str	r3, [sp, #44]	; 0x2c
   876b4:	2300      	movs	r3, #0
   876b6:	468b      	mov	fp, r1
   876b8:	931d      	str	r3, [sp, #116]	; 0x74
   876ba:	f026 0320 	bic.w	r3, r6, #32
   876be:	9306      	str	r3, [sp, #24]
   876c0:	2e61      	cmp	r6, #97	; 0x61
   876c2:	f000 8118 	beq.w	878f6 <_svfprintf_r+0x1916>
   876c6:	2e41      	cmp	r6, #65	; 0x41
   876c8:	f47f ab67 	bne.w	86d9a <_svfprintf_r+0xdba>
   876cc:	aa22      	add	r2, sp, #136	; 0x88
   876ce:	4658      	mov	r0, fp
   876d0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   876d2:	f002 f9f9 	bl	89ac8 <frexp>
   876d6:	2200      	movs	r2, #0
   876d8:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   876dc:	f004 fd4c 	bl	8c178 <__aeabi_dmul>
   876e0:	4602      	mov	r2, r0
   876e2:	460b      	mov	r3, r1
   876e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   876e8:	2200      	movs	r2, #0
   876ea:	2300      	movs	r3, #0
   876ec:	f004 ffac 	bl	8c648 <__aeabi_dcmpeq>
   876f0:	b108      	cbz	r0, 876f6 <_svfprintf_r+0x1716>
   876f2:	2301      	movs	r3, #1
   876f4:	9322      	str	r3, [sp, #136]	; 0x88
   876f6:	4bad      	ldr	r3, [pc, #692]	; (879ac <_svfprintf_r+0x19cc>)
   876f8:	930b      	str	r3, [sp, #44]	; 0x2c
   876fa:	9b07      	ldr	r3, [sp, #28]
   876fc:	e9cd a612 	strd	sl, r6, [sp, #72]	; 0x48
   87700:	e9cd 781e 	strd	r7, r8, [sp, #120]	; 0x78
   87704:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   87708:	46ab      	mov	fp, r5
   8770a:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   8770e:	f103 39ff 	add.w	r9, r3, #4294967295
   87712:	9510      	str	r5, [sp, #64]	; 0x40
   87714:	e006      	b.n	87724 <_svfprintf_r+0x1744>
   87716:	2200      	movs	r2, #0
   87718:	2300      	movs	r3, #0
   8771a:	f109 39ff 	add.w	r9, r9, #4294967295
   8771e:	f004 ff93 	bl	8c648 <__aeabi_dcmpeq>
   87722:	b9e8      	cbnz	r0, 87760 <_svfprintf_r+0x1780>
   87724:	2200      	movs	r2, #0
   87726:	4ba2      	ldr	r3, [pc, #648]	; (879b0 <_svfprintf_r+0x19d0>)
   87728:	4630      	mov	r0, r6
   8772a:	4639      	mov	r1, r7
   8772c:	f004 fd24 	bl	8c178 <__aeabi_dmul>
   87730:	460f      	mov	r7, r1
   87732:	4606      	mov	r6, r0
   87734:	f004 ffd0 	bl	8c6d8 <__aeabi_d2iz>
   87738:	4604      	mov	r4, r0
   8773a:	f004 fcb3 	bl	8c0a4 <__aeabi_i2d>
   8773e:	460b      	mov	r3, r1
   87740:	4602      	mov	r2, r0
   87742:	4639      	mov	r1, r7
   87744:	4630      	mov	r0, r6
   87746:	f004 fb5f 	bl	8be08 <__aeabi_dsub>
   8774a:	f81a 3004 	ldrb.w	r3, [sl, r4]
   8774e:	f1b9 3fff 	cmp.w	r9, #4294967295
   87752:	46d8      	mov	r8, fp
   87754:	464d      	mov	r5, r9
   87756:	4606      	mov	r6, r0
   87758:	460f      	mov	r7, r1
   8775a:	f80b 3b01 	strb.w	r3, [fp], #1
   8775e:	d1da      	bne.n	87716 <_svfprintf_r+0x1736>
   87760:	4630      	mov	r0, r6
   87762:	4639      	mov	r1, r7
   87764:	2200      	movs	r2, #0
   87766:	4b93      	ldr	r3, [pc, #588]	; (879b4 <_svfprintf_r+0x19d4>)
   87768:	46a9      	mov	r9, r5
   8776a:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   8776e:	9d10      	ldr	r5, [sp, #64]	; 0x40
   87770:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   87774:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87778:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
   8777c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   8777e:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   87780:	f004 ff8a 	bl	8c698 <__aeabi_dcmpgt>
   87784:	bb80      	cbnz	r0, 877e8 <_svfprintf_r+0x1808>
   87786:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8778a:	2200      	movs	r2, #0
   8778c:	4b89      	ldr	r3, [pc, #548]	; (879b4 <_svfprintf_r+0x19d4>)
   8778e:	f004 ff5b 	bl	8c648 <__aeabi_dcmpeq>
   87792:	b108      	cbz	r0, 87798 <_svfprintf_r+0x17b8>
   87794:	07e1      	lsls	r1, r4, #31
   87796:	d427      	bmi.n	877e8 <_svfprintf_r+0x1808>
   87798:	464b      	mov	r3, r9
   8779a:	2b00      	cmp	r3, #0
   8779c:	db06      	blt.n	877ac <_svfprintf_r+0x17cc>
   8779e:	2230      	movs	r2, #48	; 0x30
   877a0:	3301      	adds	r3, #1
   877a2:	445b      	add	r3, fp
   877a4:	f80b 2b01 	strb.w	r2, [fp], #1
   877a8:	455b      	cmp	r3, fp
   877aa:	d1fb      	bne.n	877a4 <_svfprintf_r+0x17c4>
   877ac:	ebab 0305 	sub.w	r3, fp, r5
   877b0:	46b9      	mov	r9, r7
   877b2:	9312      	str	r3, [sp, #72]	; 0x48
   877b4:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   877b6:	f7ff bb14 	b.w	86de2 <_svfprintf_r+0xe02>
   877ba:	f026 0320 	bic.w	r3, r6, #32
   877be:	9306      	str	r3, [sp, #24]
   877c0:	222d      	movs	r2, #45	; 0x2d
   877c2:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   877c6:	469b      	mov	fp, r3
   877c8:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   877cc:	921d      	str	r2, [sp, #116]	; 0x74
   877ce:	930b      	str	r3, [sp, #44]	; 0x2c
   877d0:	e776      	b.n	876c0 <_svfprintf_r+0x16e0>
   877d2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   877d4:	f7ff b95c 	b.w	86a90 <_svfprintf_r+0xab0>
   877d8:	9b07      	ldr	r3, [sp, #28]
   877da:	18ec      	adds	r4, r5, r3
   877dc:	e6e4      	b.n	875a8 <_svfprintf_r+0x15c8>
   877de:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   877e0:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 879b8 <_svfprintf_r+0x19d8>
   877e4:	f7ff b827 	b.w	86836 <_svfprintf_r+0x856>
   877e8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   877ea:	9326      	str	r3, [sp, #152]	; 0x98
   877ec:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   877ee:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   877f2:	7bd9      	ldrb	r1, [r3, #15]
   877f4:	465b      	mov	r3, fp
   877f6:	428a      	cmp	r2, r1
   877f8:	d109      	bne.n	8780e <_svfprintf_r+0x182e>
   877fa:	2030      	movs	r0, #48	; 0x30
   877fc:	f803 0c01 	strb.w	r0, [r3, #-1]
   87800:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87802:	1e5a      	subs	r2, r3, #1
   87804:	9226      	str	r2, [sp, #152]	; 0x98
   87806:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   8780a:	4291      	cmp	r1, r2
   8780c:	d0f6      	beq.n	877fc <_svfprintf_r+0x181c>
   8780e:	2a39      	cmp	r2, #57	; 0x39
   87810:	bf0b      	itete	eq
   87812:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
   87814:	3201      	addne	r2, #1
   87816:	7a92      	ldrbeq	r2, [r2, #10]
   87818:	b2d2      	uxtbne	r2, r2
   8781a:	f803 2c01 	strb.w	r2, [r3, #-1]
   8781e:	e7c5      	b.n	877ac <_svfprintf_r+0x17cc>
   87820:	980a      	ldr	r0, [sp, #40]	; 0x28
   87822:	1c59      	adds	r1, r3, #1
   87824:	f001 faac 	bl	88d80 <_malloc_r>
   87828:	4605      	mov	r5, r0
   8782a:	2800      	cmp	r0, #0
   8782c:	f000 8117 	beq.w	87a5e <_svfprintf_r+0x1a7e>
   87830:	900d      	str	r0, [sp, #52]	; 0x34
   87832:	e734      	b.n	8769e <_svfprintf_r+0x16be>
   87834:	2102      	movs	r1, #2
   87836:	9100      	str	r1, [sp, #0]
   87838:	9907      	ldr	r1, [sp, #28]
   8783a:	465a      	mov	r2, fp
   8783c:	1c4c      	adds	r4, r1, #1
   8783e:	a926      	add	r1, sp, #152	; 0x98
   87840:	9104      	str	r1, [sp, #16]
   87842:	a923      	add	r1, sp, #140	; 0x8c
   87844:	9103      	str	r1, [sp, #12]
   87846:	a922      	add	r1, sp, #136	; 0x88
   87848:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8784a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8784c:	9401      	str	r4, [sp, #4]
   8784e:	9102      	str	r1, [sp, #8]
   87850:	f000 f9be 	bl	87bd0 <_dtoa_r>
   87854:	4605      	mov	r5, r0
   87856:	46b9      	mov	r9, r7
   87858:	442c      	add	r4, r5
   8785a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   8785c:	e6a4      	b.n	875a8 <_svfprintf_r+0x15c8>
   8785e:	2330      	movs	r3, #48	; 0x30
   87860:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   87864:	2378      	movs	r3, #120	; 0x78
   87866:	e70f      	b.n	87688 <_svfprintf_r+0x16a8>
   87868:	4645      	mov	r5, r8
   8786a:	4688      	mov	r8, r1
   8786c:	3301      	adds	r3, #1
   8786e:	4432      	add	r2, r6
   87870:	2b07      	cmp	r3, #7
   87872:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   87876:	f8c8 9000 	str.w	r9, [r8]
   8787a:	f8c8 6004 	str.w	r6, [r8, #4]
   8787e:	f77f acb5 	ble.w	871ec <_svfprintf_r+0x120c>
   87882:	990c      	ldr	r1, [sp, #48]	; 0x30
   87884:	980a      	ldr	r0, [sp, #40]	; 0x28
   87886:	aa28      	add	r2, sp, #160	; 0xa0
   87888:	f002 f968 	bl	89b5c <__ssprint_r>
   8788c:	2800      	cmp	r0, #0
   8788e:	f47e ad0a 	bne.w	862a6 <_svfprintf_r+0x2c6>
   87892:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   87896:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8789a:	e4a9      	b.n	871f0 <_svfprintf_r+0x1210>
   8789c:	9b07      	ldr	r3, [sp, #28]
   8789e:	2b00      	cmp	r3, #0
   878a0:	bf08      	it	eq
   878a2:	2301      	moveq	r3, #1
   878a4:	9307      	str	r3, [sp, #28]
   878a6:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   878aa:	930f      	str	r3, [sp, #60]	; 0x3c
   878ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
   878ae:	2b00      	cmp	r3, #0
   878b0:	f2c0 80b6 	blt.w	87a20 <_svfprintf_r+0x1a40>
   878b4:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
   878b8:	900d      	str	r0, [sp, #52]	; 0x34
   878ba:	930b      	str	r3, [sp, #44]	; 0x2c
   878bc:	901d      	str	r0, [sp, #116]	; 0x74
   878be:	f7ff ba73 	b.w	86da8 <_svfprintf_r+0xdc8>
   878c2:	9119      	str	r1, [sp, #100]	; 0x64
   878c4:	9210      	str	r2, [sp, #64]	; 0x40
   878c6:	9013      	str	r0, [sp, #76]	; 0x4c
   878c8:	940f      	str	r4, [sp, #60]	; 0x3c
   878ca:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   878cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   878ce:	991c      	ldr	r1, [sp, #112]	; 0x70
   878d0:	4413      	add	r3, r2
   878d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   878d4:	fb01 2303 	mla	r3, r1, r3, r2
   878d8:	930b      	str	r3, [sp, #44]	; 0x2c
   878da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   878de:	9306      	str	r3, [sp, #24]
   878e0:	f7ff bae9 	b.w	86eb6 <_svfprintf_r+0xed6>
   878e4:	9b16      	ldr	r3, [sp, #88]	; 0x58
   878e6:	2666      	movs	r6, #102	; 0x66
   878e8:	18d3      	adds	r3, r2, r3
   878ea:	4419      	add	r1, r3
   878ec:	910b      	str	r1, [sp, #44]	; 0x2c
   878ee:	e67e      	b.n	875ee <_svfprintf_r+0x160e>
   878f0:	2300      	movs	r3, #0
   878f2:	930d      	str	r3, [sp, #52]	; 0x34
   878f4:	e764      	b.n	877c0 <_svfprintf_r+0x17e0>
   878f6:	aa22      	add	r2, sp, #136	; 0x88
   878f8:	4658      	mov	r0, fp
   878fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
   878fc:	f002 f8e4 	bl	89ac8 <frexp>
   87900:	2200      	movs	r2, #0
   87902:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   87906:	f004 fc37 	bl	8c178 <__aeabi_dmul>
   8790a:	4602      	mov	r2, r0
   8790c:	460b      	mov	r3, r1
   8790e:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   87912:	2200      	movs	r2, #0
   87914:	2300      	movs	r3, #0
   87916:	f004 fe97 	bl	8c648 <__aeabi_dcmpeq>
   8791a:	b108      	cbz	r0, 87920 <_svfprintf_r+0x1940>
   8791c:	2301      	movs	r3, #1
   8791e:	9322      	str	r3, [sp, #136]	; 0x88
   87920:	4b26      	ldr	r3, [pc, #152]	; (879bc <_svfprintf_r+0x19dc>)
   87922:	930b      	str	r3, [sp, #44]	; 0x2c
   87924:	e6e9      	b.n	876fa <_svfprintf_r+0x171a>
   87926:	2667      	movs	r6, #103	; 0x67
   87928:	e5ed      	b.n	87506 <_svfprintf_r+0x1526>
   8792a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8792c:	930b      	str	r3, [sp, #44]	; 0x2c
   8792e:	e5e2      	b.n	874f6 <_svfprintf_r+0x1516>
   87930:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87932:	2003      	movs	r0, #3
   87934:	2b00      	cmp	r3, #0
   87936:	bfb8      	it	lt
   87938:	222d      	movlt	r2, #45	; 0x2d
   8793a:	f04f 0300 	mov.w	r3, #0
   8793e:	bfa8      	it	ge
   87940:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
   87944:	4619      	mov	r1, r3
   87946:	930d      	str	r3, [sp, #52]	; 0x34
   87948:	4d1d      	ldr	r5, [pc, #116]	; (879c0 <_svfprintf_r+0x19e0>)
   8794a:	4b1e      	ldr	r3, [pc, #120]	; (879c4 <_svfprintf_r+0x19e4>)
   8794c:	bfb8      	it	lt
   8794e:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
   87952:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   87956:	9006      	str	r0, [sp, #24]
   87958:	f7fe bd7f 	b.w	8645a <_svfprintf_r+0x47a>
   8795c:	2900      	cmp	r1, #0
   8795e:	d144      	bne.n	879ea <_svfprintf_r+0x1a0a>
   87960:	2230      	movs	r2, #48	; 0x30
   87962:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
   87966:	f10d 0293 	add.w	r2, sp, #147	; 0x93
   8796a:	3330      	adds	r3, #48	; 0x30
   8796c:	f802 3b01 	strb.w	r3, [r2], #1
   87970:	ab24      	add	r3, sp, #144	; 0x90
   87972:	1ad3      	subs	r3, r2, r3
   87974:	931a      	str	r3, [sp, #104]	; 0x68
   87976:	f7ff ba87 	b.w	86e88 <_svfprintf_r+0xea8>
   8797a:	f106 020f 	add.w	r2, r6, #15
   8797e:	2101      	movs	r1, #1
   87980:	b2d2      	uxtb	r2, r2
   87982:	f7ff ba41 	b.w	86e08 <_svfprintf_r+0xe28>
   87986:	f1c3 0301 	rsb	r3, r3, #1
   8798a:	441a      	add	r2, r3
   8798c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   87990:	2667      	movs	r6, #103	; 0x67
   87992:	920b      	str	r2, [sp, #44]	; 0x2c
   87994:	9306      	str	r3, [sp, #24]
   87996:	e5ba      	b.n	8750e <_svfprintf_r+0x152e>
   87998:	f019 0f01 	tst.w	r9, #1
   8799c:	f43f aa7f 	beq.w	86e9e <_svfprintf_r+0xebe>
   879a0:	f7ff ba79 	b.w	86e96 <_svfprintf_r+0xeb6>
   879a4:	9829      	ldr	r0, [sp, #164]	; 0xa4
   879a6:	f7ff bb7f 	b.w	870a8 <_svfprintf_r+0x10c8>
   879aa:	bf00      	nop
   879ac:	0008cab8 	.word	0x0008cab8
   879b0:	40300000 	.word	0x40300000
   879b4:	3fe00000 	.word	0x3fe00000
   879b8:	0008cae8 	.word	0x0008cae8
   879bc:	0008caa4 	.word	0x0008caa4
   879c0:	0008ca9c 	.word	0x0008ca9c
   879c4:	0008caa0 	.word	0x0008caa0
   879c8:	4658      	mov	r0, fp
   879ca:	2200      	movs	r2, #0
   879cc:	2300      	movs	r3, #0
   879ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
   879d0:	f004 fe3a 	bl	8c648 <__aeabi_dcmpeq>
   879d4:	2800      	cmp	r0, #0
   879d6:	f47f ade1 	bne.w	8759c <_svfprintf_r+0x15bc>
   879da:	9b07      	ldr	r3, [sp, #28]
   879dc:	f1c3 0301 	rsb	r3, r3, #1
   879e0:	9322      	str	r3, [sp, #136]	; 0x88
   879e2:	e5dc      	b.n	8759e <_svfprintf_r+0x15be>
   879e4:	f8df 9098 	ldr.w	r9, [pc, #152]	; 87a80 <_svfprintf_r+0x1aa0>
   879e8:	e4ad      	b.n	87346 <_svfprintf_r+0x1366>
   879ea:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   879ee:	e7bc      	b.n	8796a <_svfprintf_r+0x198a>
   879f0:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   879f2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 87a80 <_svfprintf_r+0x1aa0>
   879f6:	e428      	b.n	8724a <_svfprintf_r+0x126a>
   879f8:	9a07      	ldr	r2, [sp, #28]
   879fa:	f009 0901 	and.w	r9, r9, #1
   879fe:	ea59 0302 	orrs.w	r3, r9, r2
   87a02:	d104      	bne.n	87a0e <_svfprintf_r+0x1a2e>
   87a04:	2301      	movs	r3, #1
   87a06:	2666      	movs	r6, #102	; 0x66
   87a08:	9306      	str	r3, [sp, #24]
   87a0a:	930b      	str	r3, [sp, #44]	; 0x2c
   87a0c:	e57f      	b.n	8750e <_svfprintf_r+0x152e>
   87a0e:	9b16      	ldr	r3, [sp, #88]	; 0x58
   87a10:	2666      	movs	r6, #102	; 0x66
   87a12:	3301      	adds	r3, #1
   87a14:	441a      	add	r2, r3
   87a16:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   87a1a:	920b      	str	r2, [sp, #44]	; 0x2c
   87a1c:	9306      	str	r3, [sp, #24]
   87a1e:	e576      	b.n	8750e <_svfprintf_r+0x152e>
   87a20:	900d      	str	r0, [sp, #52]	; 0x34
   87a22:	e6cd      	b.n	877c0 <_svfprintf_r+0x17e0>
   87a24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87a26:	f89a 6001 	ldrb.w	r6, [sl, #1]
   87a2a:	4692      	mov	sl, r2
   87a2c:	f853 2b04 	ldr.w	r2, [r3], #4
   87a30:	930e      	str	r3, [sp, #56]	; 0x38
   87a32:	ea42 73e2 	orr.w	r3, r2, r2, asr #31
   87a36:	9307      	str	r3, [sp, #28]
   87a38:	f7fe bb21 	b.w	8607e <_svfprintf_r+0x9e>
   87a3c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87a3e:	f8df 9040 	ldr.w	r9, [pc, #64]	; 87a80 <_svfprintf_r+0x1aa0>
   87a42:	e4b1      	b.n	873a8 <_svfprintf_r+0x13c8>
   87a44:	9c07      	ldr	r4, [sp, #28]
   87a46:	e706      	b.n	87856 <_svfprintf_r+0x1876>
   87a48:	2300      	movs	r3, #0
   87a4a:	930f      	str	r3, [sp, #60]	; 0x3c
   87a4c:	9313      	str	r3, [sp, #76]	; 0x4c
   87a4e:	e73c      	b.n	878ca <_svfprintf_r+0x18ea>
   87a50:	f8df 902c 	ldr.w	r9, [pc, #44]	; 87a80 <_svfprintf_r+0x1aa0>
   87a54:	e70a      	b.n	8786c <_svfprintf_r+0x188c>
   87a56:	2302      	movs	r3, #2
   87a58:	931a      	str	r3, [sp, #104]	; 0x68
   87a5a:	f7ff ba15 	b.w	86e88 <_svfprintf_r+0xea8>
   87a5e:	990c      	ldr	r1, [sp, #48]	; 0x30
   87a60:	898b      	ldrh	r3, [r1, #12]
   87a62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   87a66:	4613      	mov	r3, r2
   87a68:	818a      	strh	r2, [r1, #12]
   87a6a:	f7fe bc24 	b.w	862b6 <_svfprintf_r+0x2d6>
   87a6e:	f04f 32ff 	mov.w	r2, #4294967295
   87a72:	230c      	movs	r3, #12
   87a74:	9208      	str	r2, [sp, #32]
   87a76:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87a78:	6013      	str	r3, [r2, #0]
   87a7a:	f7fe bc23 	b.w	862c4 <_svfprintf_r+0x2e4>
   87a7e:	bf00      	nop
   87a80:	0008cae8 	.word	0x0008cae8

00087a84 <register_fini>:
   87a84:	4b02      	ldr	r3, [pc, #8]	; (87a90 <register_fini+0xc>)
   87a86:	b113      	cbz	r3, 87a8e <register_fini+0xa>
   87a88:	4802      	ldr	r0, [pc, #8]	; (87a94 <register_fini+0x10>)
   87a8a:	f000 b805 	b.w	87a98 <atexit>
   87a8e:	4770      	bx	lr
   87a90:	00000000 	.word	0x00000000
   87a94:	00088a9d 	.word	0x00088a9d

00087a98 <atexit>:
   87a98:	2300      	movs	r3, #0
   87a9a:	4601      	mov	r1, r0
   87a9c:	461a      	mov	r2, r3
   87a9e:	4618      	mov	r0, r3
   87aa0:	f002 b8da 	b.w	89c58 <__register_exitproc>

00087aa4 <quorem>:
   87aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87aa8:	6903      	ldr	r3, [r0, #16]
   87aaa:	690c      	ldr	r4, [r1, #16]
   87aac:	b085      	sub	sp, #20
   87aae:	42a3      	cmp	r3, r4
   87ab0:	f2c0 8089 	blt.w	87bc6 <quorem+0x122>
   87ab4:	3c01      	subs	r4, #1
   87ab6:	f101 0514 	add.w	r5, r1, #20
   87aba:	00a3      	lsls	r3, r4, #2
   87abc:	f100 0814 	add.w	r8, r0, #20
   87ac0:	9301      	str	r3, [sp, #4]
   87ac2:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   87ac6:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   87aca:	3301      	adds	r3, #1
   87acc:	468a      	mov	sl, r1
   87ace:	429a      	cmp	r2, r3
   87ad0:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   87ad4:	4681      	mov	r9, r0
   87ad6:	fbb2 f6f3 	udiv	r6, r2, r3
   87ada:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   87ade:	9102      	str	r1, [sp, #8]
   87ae0:	d33a      	bcc.n	87b58 <quorem+0xb4>
   87ae2:	2100      	movs	r1, #0
   87ae4:	46ae      	mov	lr, r5
   87ae6:	4640      	mov	r0, r8
   87ae8:	460a      	mov	r2, r1
   87aea:	46a3      	mov	fp, r4
   87aec:	9503      	str	r5, [sp, #12]
   87aee:	f85e 5b04 	ldr.w	r5, [lr], #4
   87af2:	6804      	ldr	r4, [r0, #0]
   87af4:	b2ab      	uxth	r3, r5
   87af6:	fb06 1303 	mla	r3, r6, r3, r1
   87afa:	0c2d      	lsrs	r5, r5, #16
   87afc:	0c19      	lsrs	r1, r3, #16
   87afe:	fb06 1105 	mla	r1, r6, r5, r1
   87b02:	b29b      	uxth	r3, r3
   87b04:	1ad2      	subs	r2, r2, r3
   87b06:	fa1f fc84 	uxth.w	ip, r4
   87b0a:	4494      	add	ip, r2
   87b0c:	b28a      	uxth	r2, r1
   87b0e:	ebc2 4214 	rsb	r2, r2, r4, lsr #16
   87b12:	eb02 422c 	add.w	r2, r2, ip, asr #16
   87b16:	fa1f fc8c 	uxth.w	ip, ip
   87b1a:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   87b1e:	4577      	cmp	r7, lr
   87b20:	f840 3b04 	str.w	r3, [r0], #4
   87b24:	ea4f 4111 	mov.w	r1, r1, lsr #16
   87b28:	ea4f 4222 	mov.w	r2, r2, asr #16
   87b2c:	d2df      	bcs.n	87aee <quorem+0x4a>
   87b2e:	9b01      	ldr	r3, [sp, #4]
   87b30:	465c      	mov	r4, fp
   87b32:	f858 3003 	ldr.w	r3, [r8, r3]
   87b36:	9d03      	ldr	r5, [sp, #12]
   87b38:	b973      	cbnz	r3, 87b58 <quorem+0xb4>
   87b3a:	9b02      	ldr	r3, [sp, #8]
   87b3c:	3b04      	subs	r3, #4
   87b3e:	4598      	cmp	r8, r3
   87b40:	d304      	bcc.n	87b4c <quorem+0xa8>
   87b42:	e007      	b.n	87b54 <quorem+0xb0>
   87b44:	4598      	cmp	r8, r3
   87b46:	f104 34ff 	add.w	r4, r4, #4294967295
   87b4a:	d203      	bcs.n	87b54 <quorem+0xb0>
   87b4c:	f853 2904 	ldr.w	r2, [r3], #-4
   87b50:	2a00      	cmp	r2, #0
   87b52:	d0f7      	beq.n	87b44 <quorem+0xa0>
   87b54:	f8c9 4010 	str.w	r4, [r9, #16]
   87b58:	4651      	mov	r1, sl
   87b5a:	4648      	mov	r0, r9
   87b5c:	f001 fe8c 	bl	89878 <__mcmp>
   87b60:	2800      	cmp	r0, #0
   87b62:	db2c      	blt.n	87bbe <quorem+0x11a>
   87b64:	4640      	mov	r0, r8
   87b66:	2300      	movs	r3, #0
   87b68:	3601      	adds	r6, #1
   87b6a:	f855 1b04 	ldr.w	r1, [r5], #4
   87b6e:	f8d0 c000 	ldr.w	ip, [r0]
   87b72:	b28a      	uxth	r2, r1
   87b74:	1a9a      	subs	r2, r3, r2
   87b76:	fa1f fe8c 	uxth.w	lr, ip
   87b7a:	0c0b      	lsrs	r3, r1, #16
   87b7c:	4472      	add	r2, lr
   87b7e:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   87b82:	eb03 4322 	add.w	r3, r3, r2, asr #16
   87b86:	b292      	uxth	r2, r2
   87b88:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   87b8c:	42af      	cmp	r7, r5
   87b8e:	f840 2b04 	str.w	r2, [r0], #4
   87b92:	ea4f 4323 	mov.w	r3, r3, asr #16
   87b96:	d2e8      	bcs.n	87b6a <quorem+0xc6>
   87b98:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   87b9c:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   87ba0:	b96a      	cbnz	r2, 87bbe <quorem+0x11a>
   87ba2:	3b04      	subs	r3, #4
   87ba4:	4598      	cmp	r8, r3
   87ba6:	d304      	bcc.n	87bb2 <quorem+0x10e>
   87ba8:	e007      	b.n	87bba <quorem+0x116>
   87baa:	4598      	cmp	r8, r3
   87bac:	f104 34ff 	add.w	r4, r4, #4294967295
   87bb0:	d203      	bcs.n	87bba <quorem+0x116>
   87bb2:	f853 2904 	ldr.w	r2, [r3], #-4
   87bb6:	2a00      	cmp	r2, #0
   87bb8:	d0f7      	beq.n	87baa <quorem+0x106>
   87bba:	f8c9 4010 	str.w	r4, [r9, #16]
   87bbe:	4630      	mov	r0, r6
   87bc0:	b005      	add	sp, #20
   87bc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87bc6:	2000      	movs	r0, #0
   87bc8:	b005      	add	sp, #20
   87bca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87bce:	bf00      	nop

00087bd0 <_dtoa_r>:
   87bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87bd4:	4690      	mov	r8, r2
   87bd6:	4699      	mov	r9, r3
   87bd8:	6c01      	ldr	r1, [r0, #64]	; 0x40
   87bda:	b099      	sub	sp, #100	; 0x64
   87bdc:	4604      	mov	r4, r0
   87bde:	e9cd 8904 	strd	r8, r9, [sp, #16]
   87be2:	9d25      	ldr	r5, [sp, #148]	; 0x94
   87be4:	b141      	cbz	r1, 87bf8 <_dtoa_r+0x28>
   87be6:	2301      	movs	r3, #1
   87be8:	6c42      	ldr	r2, [r0, #68]	; 0x44
   87bea:	4093      	lsls	r3, r2
   87bec:	608b      	str	r3, [r1, #8]
   87bee:	604a      	str	r2, [r1, #4]
   87bf0:	f001 fbec 	bl	893cc <_Bfree>
   87bf4:	2300      	movs	r3, #0
   87bf6:	6423      	str	r3, [r4, #64]	; 0x40
   87bf8:	f1b9 0a00 	subs.w	sl, r9, #0
   87bfc:	bfb4      	ite	lt
   87bfe:	2301      	movlt	r3, #1
   87c00:	2300      	movge	r3, #0
   87c02:	602b      	str	r3, [r5, #0]
   87c04:	4b76      	ldr	r3, [pc, #472]	; (87de0 <_dtoa_r+0x210>)
   87c06:	bfbc      	itt	lt
   87c08:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   87c0c:	f8cd a014 	strlt.w	sl, [sp, #20]
   87c10:	ea33 030a 	bics.w	r3, r3, sl
   87c14:	f000 80aa 	beq.w	87d6c <_dtoa_r+0x19c>
   87c18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   87c1c:	4610      	mov	r0, r2
   87c1e:	4619      	mov	r1, r3
   87c20:	2200      	movs	r2, #0
   87c22:	2300      	movs	r3, #0
   87c24:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   87c28:	f004 fd0e 	bl	8c648 <__aeabi_dcmpeq>
   87c2c:	4607      	mov	r7, r0
   87c2e:	b170      	cbz	r0, 87c4e <_dtoa_r+0x7e>
   87c30:	2301      	movs	r3, #1
   87c32:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87c34:	6013      	str	r3, [r2, #0]
   87c36:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87c38:	2b00      	cmp	r3, #0
   87c3a:	f000 82e6 	beq.w	8820a <_dtoa_r+0x63a>
   87c3e:	4869      	ldr	r0, [pc, #420]	; (87de4 <_dtoa_r+0x214>)
   87c40:	6018      	str	r0, [r3, #0]
   87c42:	1e43      	subs	r3, r0, #1
   87c44:	9303      	str	r3, [sp, #12]
   87c46:	9803      	ldr	r0, [sp, #12]
   87c48:	b019      	add	sp, #100	; 0x64
   87c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87c4e:	ab16      	add	r3, sp, #88	; 0x58
   87c50:	9301      	str	r3, [sp, #4]
   87c52:	ab17      	add	r3, sp, #92	; 0x5c
   87c54:	9300      	str	r3, [sp, #0]
   87c56:	4620      	mov	r0, r4
   87c58:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   87c5c:	f001 fed2 	bl	89a04 <__d2b>
   87c60:	ea5f 561a 	movs.w	r6, sl, lsr #20
   87c64:	4605      	mov	r5, r0
   87c66:	f040 8097 	bne.w	87d98 <_dtoa_r+0x1c8>
   87c6a:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   87c6e:	443e      	add	r6, r7
   87c70:	f206 4032 	addw	r0, r6, #1074	; 0x432
   87c74:	2820      	cmp	r0, #32
   87c76:	f340 83b7 	ble.w	883e8 <_dtoa_r+0x818>
   87c7a:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   87c7e:	fa0a fa00 	lsl.w	sl, sl, r0
   87c82:	f206 4012 	addw	r0, r6, #1042	; 0x412
   87c86:	fa28 f000 	lsr.w	r0, r8, r0
   87c8a:	ea4a 0000 	orr.w	r0, sl, r0
   87c8e:	f004 f9f9 	bl	8c084 <__aeabi_ui2d>
   87c92:	2301      	movs	r3, #1
   87c94:	3e01      	subs	r6, #1
   87c96:	930f      	str	r3, [sp, #60]	; 0x3c
   87c98:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   87c9c:	2200      	movs	r2, #0
   87c9e:	4b52      	ldr	r3, [pc, #328]	; (87de8 <_dtoa_r+0x218>)
   87ca0:	f004 f8b2 	bl	8be08 <__aeabi_dsub>
   87ca4:	a348      	add	r3, pc, #288	; (adr r3, 87dc8 <_dtoa_r+0x1f8>)
   87ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
   87caa:	f004 fa65 	bl	8c178 <__aeabi_dmul>
   87cae:	a348      	add	r3, pc, #288	; (adr r3, 87dd0 <_dtoa_r+0x200>)
   87cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
   87cb4:	f004 f8aa 	bl	8be0c <__adddf3>
   87cb8:	4680      	mov	r8, r0
   87cba:	4630      	mov	r0, r6
   87cbc:	4689      	mov	r9, r1
   87cbe:	f004 f9f1 	bl	8c0a4 <__aeabi_i2d>
   87cc2:	a345      	add	r3, pc, #276	; (adr r3, 87dd8 <_dtoa_r+0x208>)
   87cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   87cc8:	f004 fa56 	bl	8c178 <__aeabi_dmul>
   87ccc:	4602      	mov	r2, r0
   87cce:	460b      	mov	r3, r1
   87cd0:	4640      	mov	r0, r8
   87cd2:	4649      	mov	r1, r9
   87cd4:	f004 f89a 	bl	8be0c <__adddf3>
   87cd8:	4680      	mov	r8, r0
   87cda:	4689      	mov	r9, r1
   87cdc:	f004 fcfc 	bl	8c6d8 <__aeabi_d2iz>
   87ce0:	2200      	movs	r2, #0
   87ce2:	4683      	mov	fp, r0
   87ce4:	2300      	movs	r3, #0
   87ce6:	4640      	mov	r0, r8
   87ce8:	4649      	mov	r1, r9
   87cea:	f004 fcb7 	bl	8c65c <__aeabi_dcmplt>
   87cee:	2800      	cmp	r0, #0
   87cf0:	f040 827e 	bne.w	881f0 <_dtoa_r+0x620>
   87cf4:	f1bb 0f16 	cmp.w	fp, #22
   87cf8:	f200 826d 	bhi.w	881d6 <_dtoa_r+0x606>
   87cfc:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   87d00:	4b3a      	ldr	r3, [pc, #232]	; (87dec <_dtoa_r+0x21c>)
   87d02:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   87d06:	e9d3 2300 	ldrd	r2, r3, [r3]
   87d0a:	f004 fca7 	bl	8c65c <__aeabi_dcmplt>
   87d0e:	2800      	cmp	r0, #0
   87d10:	d072      	beq.n	87df8 <_dtoa_r+0x228>
   87d12:	2300      	movs	r3, #0
   87d14:	1bbe      	subs	r6, r7, r6
   87d16:	930e      	str	r3, [sp, #56]	; 0x38
   87d18:	1e73      	subs	r3, r6, #1
   87d1a:	f10b 3bff 	add.w	fp, fp, #4294967295
   87d1e:	9306      	str	r3, [sp, #24]
   87d20:	f100 8260 	bmi.w	881e4 <_dtoa_r+0x614>
   87d24:	2300      	movs	r3, #0
   87d26:	9309      	str	r3, [sp, #36]	; 0x24
   87d28:	f1bb 0f00 	cmp.w	fp, #0
   87d2c:	da6b      	bge.n	87e06 <_dtoa_r+0x236>
   87d2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87d30:	f8cd b01c 	str.w	fp, [sp, #28]
   87d34:	eba3 030b 	sub.w	r3, r3, fp
   87d38:	9309      	str	r3, [sp, #36]	; 0x24
   87d3a:	f1cb 0300 	rsb	r3, fp, #0
   87d3e:	930d      	str	r3, [sp, #52]	; 0x34
   87d40:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87d42:	f04f 0b00 	mov.w	fp, #0
   87d46:	2b09      	cmp	r3, #9
   87d48:	d866      	bhi.n	87e18 <_dtoa_r+0x248>
   87d4a:	2b05      	cmp	r3, #5
   87d4c:	f340 834a 	ble.w	883e4 <_dtoa_r+0x814>
   87d50:	2600      	movs	r6, #0
   87d52:	3b04      	subs	r3, #4
   87d54:	9322      	str	r3, [sp, #136]	; 0x88
   87d56:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87d58:	3b02      	subs	r3, #2
   87d5a:	2b03      	cmp	r3, #3
   87d5c:	f200 866c 	bhi.w	88a38 <_dtoa_r+0xe68>
   87d60:	e8df f013 	tbh	[pc, r3, lsl #1]
   87d64:	045e0461 	.word	0x045e0461
   87d68:	04380455 	.word	0x04380455
   87d6c:	f242 730f 	movw	r3, #9999	; 0x270f
   87d70:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87d72:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   87d76:	6013      	str	r3, [r2, #0]
   87d78:	ea5a 0308 	orrs.w	r3, sl, r8
   87d7c:	d11a      	bne.n	87db4 <_dtoa_r+0x1e4>
   87d7e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87d80:	2b00      	cmp	r3, #0
   87d82:	f000 8668 	beq.w	88a56 <_dtoa_r+0xe86>
   87d86:	4b1a      	ldr	r3, [pc, #104]	; (87df0 <_dtoa_r+0x220>)
   87d88:	9303      	str	r3, [sp, #12]
   87d8a:	3308      	adds	r3, #8
   87d8c:	9a26      	ldr	r2, [sp, #152]	; 0x98
   87d8e:	9803      	ldr	r0, [sp, #12]
   87d90:	6013      	str	r3, [r2, #0]
   87d92:	b019      	add	sp, #100	; 0x64
   87d94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87d98:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   87d9c:	f3c2 0313 	ubfx	r3, r2, #0, #20
   87da0:	4608      	mov	r0, r1
   87da2:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   87da6:	970f      	str	r7, [sp, #60]	; 0x3c
   87da8:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   87dac:	9f16      	ldr	r7, [sp, #88]	; 0x58
   87dae:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   87db2:	e773      	b.n	87c9c <_dtoa_r+0xcc>
   87db4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87db6:	2b00      	cmp	r3, #0
   87db8:	f040 83ef 	bne.w	8859a <_dtoa_r+0x9ca>
   87dbc:	4b0d      	ldr	r3, [pc, #52]	; (87df4 <_dtoa_r+0x224>)
   87dbe:	9303      	str	r3, [sp, #12]
   87dc0:	e741      	b.n	87c46 <_dtoa_r+0x76>
   87dc2:	bf00      	nop
   87dc4:	f3af 8000 	nop.w
   87dc8:	636f4361 	.word	0x636f4361
   87dcc:	3fd287a7 	.word	0x3fd287a7
   87dd0:	8b60c8b3 	.word	0x8b60c8b3
   87dd4:	3fc68a28 	.word	0x3fc68a28
   87dd8:	509f79fb 	.word	0x509f79fb
   87ddc:	3fd34413 	.word	0x3fd34413
   87de0:	7ff00000 	.word	0x7ff00000
   87de4:	0008cad5 	.word	0x0008cad5
   87de8:	3ff80000 	.word	0x3ff80000
   87dec:	0008cc48 	.word	0x0008cc48
   87df0:	0008cafc 	.word	0x0008cafc
   87df4:	0008caf8 	.word	0x0008caf8
   87df8:	1bbe      	subs	r6, r7, r6
   87dfa:	1e73      	subs	r3, r6, #1
   87dfc:	9306      	str	r3, [sp, #24]
   87dfe:	f100 848a 	bmi.w	88716 <_dtoa_r+0xb46>
   87e02:	900e      	str	r0, [sp, #56]	; 0x38
   87e04:	9009      	str	r0, [sp, #36]	; 0x24
   87e06:	9b06      	ldr	r3, [sp, #24]
   87e08:	445b      	add	r3, fp
   87e0a:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   87e0e:	2300      	movs	r3, #0
   87e10:	930d      	str	r3, [sp, #52]	; 0x34
   87e12:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87e14:	2b09      	cmp	r3, #9
   87e16:	d998      	bls.n	87d4a <_dtoa_r+0x17a>
   87e18:	2300      	movs	r3, #0
   87e1a:	9322      	str	r3, [sp, #136]	; 0x88
   87e1c:	f04f 33ff 	mov.w	r3, #4294967295
   87e20:	2601      	movs	r6, #1
   87e22:	9308      	str	r3, [sp, #32]
   87e24:	2300      	movs	r3, #0
   87e26:	960c      	str	r6, [sp, #48]	; 0x30
   87e28:	9323      	str	r3, [sp, #140]	; 0x8c
   87e2a:	2100      	movs	r1, #0
   87e2c:	9b08      	ldr	r3, [sp, #32]
   87e2e:	6461      	str	r1, [r4, #68]	; 0x44
   87e30:	9312      	str	r3, [sp, #72]	; 0x48
   87e32:	4620      	mov	r0, r4
   87e34:	f001 faa4 	bl	89380 <_Balloc>
   87e38:	9003      	str	r0, [sp, #12]
   87e3a:	2800      	cmp	r0, #0
   87e3c:	f000 8604 	beq.w	88a48 <_dtoa_r+0xe78>
   87e40:	9b03      	ldr	r3, [sp, #12]
   87e42:	6423      	str	r3, [r4, #64]	; 0x40
   87e44:	9b08      	ldr	r3, [sp, #32]
   87e46:	2b0e      	cmp	r3, #14
   87e48:	f200 8114 	bhi.w	88074 <_dtoa_r+0x4a4>
   87e4c:	2e00      	cmp	r6, #0
   87e4e:	f000 8111 	beq.w	88074 <_dtoa_r+0x4a4>
   87e52:	9907      	ldr	r1, [sp, #28]
   87e54:	2900      	cmp	r1, #0
   87e56:	f340 8460 	ble.w	8871a <_dtoa_r+0xb4a>
   87e5a:	4baf      	ldr	r3, [pc, #700]	; (88118 <_dtoa_r+0x548>)
   87e5c:	f001 020f 	and.w	r2, r1, #15
   87e60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87e64:	460a      	mov	r2, r1
   87e66:	e9d3 6700 	ldrd	r6, r7, [r3]
   87e6a:	ea4f 1821 	mov.w	r8, r1, asr #4
   87e6e:	05d1      	lsls	r1, r2, #23
   87e70:	f140 8417 	bpl.w	886a2 <_dtoa_r+0xad2>
   87e74:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   87e78:	4ba8      	ldr	r3, [pc, #672]	; (8811c <_dtoa_r+0x54c>)
   87e7a:	f04f 0a03 	mov.w	sl, #3
   87e7e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   87e82:	f004 faa3 	bl	8c3cc <__aeabi_ddiv>
   87e86:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87e8a:	f008 080f 	and.w	r8, r8, #15
   87e8e:	f1b8 0f00 	cmp.w	r8, #0
   87e92:	d013      	beq.n	87ebc <_dtoa_r+0x2ec>
   87e94:	f8df 9284 	ldr.w	r9, [pc, #644]	; 8811c <_dtoa_r+0x54c>
   87e98:	f018 0f01 	tst.w	r8, #1
   87e9c:	d009      	beq.n	87eb2 <_dtoa_r+0x2e2>
   87e9e:	e9d9 2300 	ldrd	r2, r3, [r9]
   87ea2:	4630      	mov	r0, r6
   87ea4:	4639      	mov	r1, r7
   87ea6:	f004 f967 	bl	8c178 <__aeabi_dmul>
   87eaa:	4606      	mov	r6, r0
   87eac:	460f      	mov	r7, r1
   87eae:	f10a 0a01 	add.w	sl, sl, #1
   87eb2:	ea5f 0868 	movs.w	r8, r8, asr #1
   87eb6:	f109 0908 	add.w	r9, r9, #8
   87eba:	d1ed      	bne.n	87e98 <_dtoa_r+0x2c8>
   87ebc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87ec0:	4632      	mov	r2, r6
   87ec2:	463b      	mov	r3, r7
   87ec4:	f004 fa82 	bl	8c3cc <__aeabi_ddiv>
   87ec8:	4680      	mov	r8, r0
   87eca:	4689      	mov	r9, r1
   87ecc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87ece:	b143      	cbz	r3, 87ee2 <_dtoa_r+0x312>
   87ed0:	2200      	movs	r2, #0
   87ed2:	4640      	mov	r0, r8
   87ed4:	4649      	mov	r1, r9
   87ed6:	4b92      	ldr	r3, [pc, #584]	; (88120 <_dtoa_r+0x550>)
   87ed8:	f004 fbc0 	bl	8c65c <__aeabi_dcmplt>
   87edc:	2800      	cmp	r0, #0
   87ede:	f040 8535 	bne.w	8894c <_dtoa_r+0xd7c>
   87ee2:	4650      	mov	r0, sl
   87ee4:	f004 f8de 	bl	8c0a4 <__aeabi_i2d>
   87ee8:	4642      	mov	r2, r8
   87eea:	464b      	mov	r3, r9
   87eec:	f004 f944 	bl	8c178 <__aeabi_dmul>
   87ef0:	4b8c      	ldr	r3, [pc, #560]	; (88124 <_dtoa_r+0x554>)
   87ef2:	2200      	movs	r2, #0
   87ef4:	f003 ff8a 	bl	8be0c <__adddf3>
   87ef8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   87efc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87f00:	9311      	str	r3, [sp, #68]	; 0x44
   87f02:	9b08      	ldr	r3, [sp, #32]
   87f04:	2b00      	cmp	r3, #0
   87f06:	f000 8097 	beq.w	88038 <_dtoa_r+0x468>
   87f0a:	9b07      	ldr	r3, [sp, #28]
   87f0c:	9314      	str	r3, [sp, #80]	; 0x50
   87f0e:	9b08      	ldr	r3, [sp, #32]
   87f10:	9313      	str	r3, [sp, #76]	; 0x4c
   87f12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87f14:	2b00      	cmp	r3, #0
   87f16:	f000 84a9 	beq.w	8886c <_dtoa_r+0xc9c>
   87f1a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87f1c:	4b7e      	ldr	r3, [pc, #504]	; (88118 <_dtoa_r+0x548>)
   87f1e:	2000      	movs	r0, #0
   87f20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87f24:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   87f28:	497f      	ldr	r1, [pc, #508]	; (88128 <_dtoa_r+0x558>)
   87f2a:	f004 fa4f 	bl	8c3cc <__aeabi_ddiv>
   87f2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   87f32:	f003 ff69 	bl	8be08 <__aeabi_dsub>
   87f36:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87f3a:	4649      	mov	r1, r9
   87f3c:	4640      	mov	r0, r8
   87f3e:	f004 fbcb 	bl	8c6d8 <__aeabi_d2iz>
   87f42:	4607      	mov	r7, r0
   87f44:	f004 f8ae 	bl	8c0a4 <__aeabi_i2d>
   87f48:	4602      	mov	r2, r0
   87f4a:	460b      	mov	r3, r1
   87f4c:	4640      	mov	r0, r8
   87f4e:	4649      	mov	r1, r9
   87f50:	f003 ff5a 	bl	8be08 <__aeabi_dsub>
   87f54:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   87f58:	9e03      	ldr	r6, [sp, #12]
   87f5a:	3730      	adds	r7, #48	; 0x30
   87f5c:	f806 7b01 	strb.w	r7, [r6], #1
   87f60:	4680      	mov	r8, r0
   87f62:	4689      	mov	r9, r1
   87f64:	f004 fb7a 	bl	8c65c <__aeabi_dcmplt>
   87f68:	2800      	cmp	r0, #0
   87f6a:	f040 852e 	bne.w	889ca <_dtoa_r+0xdfa>
   87f6e:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   87f72:	2700      	movs	r7, #0
   87f74:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   87f78:	9510      	str	r5, [sp, #64]	; 0x40
   87f7a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   87f7c:	9413      	str	r4, [sp, #76]	; 0x4c
   87f7e:	e02a      	b.n	87fd6 <_dtoa_r+0x406>
   87f80:	3701      	adds	r7, #1
   87f82:	42af      	cmp	r7, r5
   87f84:	f280 852e 	bge.w	889e4 <_dtoa_r+0xe14>
   87f88:	4650      	mov	r0, sl
   87f8a:	4659      	mov	r1, fp
   87f8c:	2200      	movs	r2, #0
   87f8e:	4b67      	ldr	r3, [pc, #412]	; (8812c <_dtoa_r+0x55c>)
   87f90:	f004 f8f2 	bl	8c178 <__aeabi_dmul>
   87f94:	2200      	movs	r2, #0
   87f96:	4b65      	ldr	r3, [pc, #404]	; (8812c <_dtoa_r+0x55c>)
   87f98:	4682      	mov	sl, r0
   87f9a:	468b      	mov	fp, r1
   87f9c:	4640      	mov	r0, r8
   87f9e:	4649      	mov	r1, r9
   87fa0:	f004 f8ea 	bl	8c178 <__aeabi_dmul>
   87fa4:	4689      	mov	r9, r1
   87fa6:	4680      	mov	r8, r0
   87fa8:	f004 fb96 	bl	8c6d8 <__aeabi_d2iz>
   87fac:	4604      	mov	r4, r0
   87fae:	f004 f879 	bl	8c0a4 <__aeabi_i2d>
   87fb2:	4602      	mov	r2, r0
   87fb4:	460b      	mov	r3, r1
   87fb6:	4640      	mov	r0, r8
   87fb8:	4649      	mov	r1, r9
   87fba:	f003 ff25 	bl	8be08 <__aeabi_dsub>
   87fbe:	3430      	adds	r4, #48	; 0x30
   87fc0:	4652      	mov	r2, sl
   87fc2:	465b      	mov	r3, fp
   87fc4:	f806 4b01 	strb.w	r4, [r6], #1
   87fc8:	4680      	mov	r8, r0
   87fca:	4689      	mov	r9, r1
   87fcc:	f004 fb46 	bl	8c65c <__aeabi_dcmplt>
   87fd0:	2800      	cmp	r0, #0
   87fd2:	f040 84f8 	bne.w	889c6 <_dtoa_r+0xdf6>
   87fd6:	4642      	mov	r2, r8
   87fd8:	464b      	mov	r3, r9
   87fda:	2000      	movs	r0, #0
   87fdc:	4950      	ldr	r1, [pc, #320]	; (88120 <_dtoa_r+0x550>)
   87fde:	f003 ff13 	bl	8be08 <__aeabi_dsub>
   87fe2:	4652      	mov	r2, sl
   87fe4:	465b      	mov	r3, fp
   87fe6:	f004 fb39 	bl	8c65c <__aeabi_dcmplt>
   87fea:	2800      	cmp	r0, #0
   87fec:	d0c8      	beq.n	87f80 <_dtoa_r+0x3b0>
   87fee:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   87ff2:	9d10      	ldr	r5, [sp, #64]	; 0x40
   87ff4:	9a03      	ldr	r2, [sp, #12]
   87ff6:	9307      	str	r3, [sp, #28]
   87ff8:	e002      	b.n	88000 <_dtoa_r+0x430>
   87ffa:	4296      	cmp	r6, r2
   87ffc:	f000 84cd 	beq.w	8899a <_dtoa_r+0xdca>
   88000:	46b2      	mov	sl, r6
   88002:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   88006:	2b39      	cmp	r3, #57	; 0x39
   88008:	d0f7      	beq.n	87ffa <_dtoa_r+0x42a>
   8800a:	3301      	adds	r3, #1
   8800c:	b2db      	uxtb	r3, r3
   8800e:	7033      	strb	r3, [r6, #0]
   88010:	9b07      	ldr	r3, [sp, #28]
   88012:	3301      	adds	r3, #1
   88014:	9307      	str	r3, [sp, #28]
   88016:	e1c8      	b.n	883aa <_dtoa_r+0x7da>
   88018:	4650      	mov	r0, sl
   8801a:	f004 f843 	bl	8c0a4 <__aeabi_i2d>
   8801e:	4642      	mov	r2, r8
   88020:	464b      	mov	r3, r9
   88022:	f004 f8a9 	bl	8c178 <__aeabi_dmul>
   88026:	4b3f      	ldr	r3, [pc, #252]	; (88124 <_dtoa_r+0x554>)
   88028:	2200      	movs	r2, #0
   8802a:	f003 feef 	bl	8be0c <__adddf3>
   8802e:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   88032:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88036:	9311      	str	r3, [sp, #68]	; 0x44
   88038:	4640      	mov	r0, r8
   8803a:	4649      	mov	r1, r9
   8803c:	2200      	movs	r2, #0
   8803e:	4b3c      	ldr	r3, [pc, #240]	; (88130 <_dtoa_r+0x560>)
   88040:	f003 fee2 	bl	8be08 <__aeabi_dsub>
   88044:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   88048:	464b      	mov	r3, r9
   8804a:	4642      	mov	r2, r8
   8804c:	4606      	mov	r6, r0
   8804e:	460f      	mov	r7, r1
   88050:	f004 fb22 	bl	8c698 <__aeabi_dcmpgt>
   88054:	4681      	mov	r9, r0
   88056:	2800      	cmp	r0, #0
   88058:	f040 84af 	bne.w	889ba <_dtoa_r+0xdea>
   8805c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   88060:	4602      	mov	r2, r0
   88062:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   88066:	4630      	mov	r0, r6
   88068:	4639      	mov	r1, r7
   8806a:	f004 faf7 	bl	8c65c <__aeabi_dcmplt>
   8806e:	2800      	cmp	r0, #0
   88070:	f040 8348 	bne.w	88704 <_dtoa_r+0xb34>
   88074:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   88076:	2b00      	cmp	r3, #0
   88078:	f2c0 808c 	blt.w	88194 <_dtoa_r+0x5c4>
   8807c:	9a07      	ldr	r2, [sp, #28]
   8807e:	2a0e      	cmp	r2, #14
   88080:	f300 8088 	bgt.w	88194 <_dtoa_r+0x5c4>
   88084:	4b24      	ldr	r3, [pc, #144]	; (88118 <_dtoa_r+0x548>)
   88086:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8808a:	e9d3 ab00 	ldrd	sl, fp, [r3]
   8808e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88090:	2b00      	cmp	r3, #0
   88092:	da1b      	bge.n	880cc <_dtoa_r+0x4fc>
   88094:	9b08      	ldr	r3, [sp, #32]
   88096:	2b00      	cmp	r3, #0
   88098:	dc18      	bgt.n	880cc <_dtoa_r+0x4fc>
   8809a:	f040 8331 	bne.w	88700 <_dtoa_r+0xb30>
   8809e:	2200      	movs	r2, #0
   880a0:	4b23      	ldr	r3, [pc, #140]	; (88130 <_dtoa_r+0x560>)
   880a2:	4650      	mov	r0, sl
   880a4:	4659      	mov	r1, fp
   880a6:	f004 f867 	bl	8c178 <__aeabi_dmul>
   880aa:	4602      	mov	r2, r0
   880ac:	460b      	mov	r3, r1
   880ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   880b2:	f004 fadd 	bl	8c670 <__aeabi_dcmple>
   880b6:	f8dd 9020 	ldr.w	r9, [sp, #32]
   880ba:	464e      	mov	r6, r9
   880bc:	2800      	cmp	r0, #0
   880be:	f000 82ca 	beq.w	88656 <_dtoa_r+0xa86>
   880c2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   880c4:	f8dd 800c 	ldr.w	r8, [sp, #12]
   880c8:	43df      	mvns	r7, r3
   880ca:	e2cc      	b.n	88666 <_dtoa_r+0xa96>
   880cc:	4652      	mov	r2, sl
   880ce:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   880d2:	465b      	mov	r3, fp
   880d4:	4638      	mov	r0, r7
   880d6:	4641      	mov	r1, r8
   880d8:	f004 f978 	bl	8c3cc <__aeabi_ddiv>
   880dc:	f004 fafc 	bl	8c6d8 <__aeabi_d2iz>
   880e0:	4681      	mov	r9, r0
   880e2:	9009      	str	r0, [sp, #36]	; 0x24
   880e4:	f003 ffde 	bl	8c0a4 <__aeabi_i2d>
   880e8:	4652      	mov	r2, sl
   880ea:	465b      	mov	r3, fp
   880ec:	f004 f844 	bl	8c178 <__aeabi_dmul>
   880f0:	9e03      	ldr	r6, [sp, #12]
   880f2:	460b      	mov	r3, r1
   880f4:	4602      	mov	r2, r0
   880f6:	4641      	mov	r1, r8
   880f8:	4638      	mov	r0, r7
   880fa:	f003 fe85 	bl	8be08 <__aeabi_dsub>
   880fe:	f109 0330 	add.w	r3, r9, #48	; 0x30
   88102:	f806 3b01 	strb.w	r3, [r6], #1
   88106:	9b08      	ldr	r3, [sp, #32]
   88108:	2b01      	cmp	r3, #1
   8810a:	f000 835f 	beq.w	887cc <_dtoa_r+0xbfc>
   8810e:	9406      	str	r4, [sp, #24]
   88110:	2701      	movs	r7, #1
   88112:	461c      	mov	r4, r3
   88114:	9504      	str	r5, [sp, #16]
   88116:	e02a      	b.n	8816e <_dtoa_r+0x59e>
   88118:	0008cc48 	.word	0x0008cc48
   8811c:	0008cc20 	.word	0x0008cc20
   88120:	3ff00000 	.word	0x3ff00000
   88124:	401c0000 	.word	0x401c0000
   88128:	3fe00000 	.word	0x3fe00000
   8812c:	40240000 	.word	0x40240000
   88130:	40140000 	.word	0x40140000
   88134:	4652      	mov	r2, sl
   88136:	465b      	mov	r3, fp
   88138:	4640      	mov	r0, r8
   8813a:	4649      	mov	r1, r9
   8813c:	f004 f946 	bl	8c3cc <__aeabi_ddiv>
   88140:	f004 faca 	bl	8c6d8 <__aeabi_d2iz>
   88144:	4605      	mov	r5, r0
   88146:	f003 ffad 	bl	8c0a4 <__aeabi_i2d>
   8814a:	4652      	mov	r2, sl
   8814c:	465b      	mov	r3, fp
   8814e:	f004 f813 	bl	8c178 <__aeabi_dmul>
   88152:	3701      	adds	r7, #1
   88154:	460b      	mov	r3, r1
   88156:	4602      	mov	r2, r0
   88158:	4649      	mov	r1, r9
   8815a:	4640      	mov	r0, r8
   8815c:	f003 fe54 	bl	8be08 <__aeabi_dsub>
   88160:	f105 0330 	add.w	r3, r5, #48	; 0x30
   88164:	42a7      	cmp	r7, r4
   88166:	f806 3b01 	strb.w	r3, [r6], #1
   8816a:	f000 832c 	beq.w	887c6 <_dtoa_r+0xbf6>
   8816e:	2200      	movs	r2, #0
   88170:	4bab      	ldr	r3, [pc, #684]	; (88420 <_dtoa_r+0x850>)
   88172:	f004 f801 	bl	8c178 <__aeabi_dmul>
   88176:	2200      	movs	r2, #0
   88178:	2300      	movs	r3, #0
   8817a:	4680      	mov	r8, r0
   8817c:	4689      	mov	r9, r1
   8817e:	f004 fa63 	bl	8c648 <__aeabi_dcmpeq>
   88182:	2800      	cmp	r0, #0
   88184:	d0d6      	beq.n	88134 <_dtoa_r+0x564>
   88186:	9d04      	ldr	r5, [sp, #16]
   88188:	9c06      	ldr	r4, [sp, #24]
   8818a:	9b07      	ldr	r3, [sp, #28]
   8818c:	46b2      	mov	sl, r6
   8818e:	3301      	adds	r3, #1
   88190:	9307      	str	r3, [sp, #28]
   88192:	e10a      	b.n	883aa <_dtoa_r+0x7da>
   88194:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   88196:	2a00      	cmp	r2, #0
   88198:	d03d      	beq.n	88216 <_dtoa_r+0x646>
   8819a:	9a22      	ldr	r2, [sp, #136]	; 0x88
   8819c:	2a01      	cmp	r2, #1
   8819e:	f340 829f 	ble.w	886e0 <_dtoa_r+0xb10>
   881a2:	9b08      	ldr	r3, [sp, #32]
   881a4:	f103 38ff 	add.w	r8, r3, #4294967295
   881a8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   881aa:	4543      	cmp	r3, r8
   881ac:	f2c0 8270 	blt.w	88690 <_dtoa_r+0xac0>
   881b0:	eba3 0808 	sub.w	r8, r3, r8
   881b4:	9b08      	ldr	r3, [sp, #32]
   881b6:	2b00      	cmp	r3, #0
   881b8:	f2c0 8340 	blt.w	8883c <_dtoa_r+0xc6c>
   881bc:	9a06      	ldr	r2, [sp, #24]
   881be:	441a      	add	r2, r3
   881c0:	9206      	str	r2, [sp, #24]
   881c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
   881c4:	4617      	mov	r7, r2
   881c6:	441a      	add	r2, r3
   881c8:	9209      	str	r2, [sp, #36]	; 0x24
   881ca:	2101      	movs	r1, #1
   881cc:	4620      	mov	r0, r4
   881ce:	f001 f9a5 	bl	8951c <__i2b>
   881d2:	4606      	mov	r6, r0
   881d4:	e023      	b.n	8821e <_dtoa_r+0x64e>
   881d6:	2301      	movs	r3, #1
   881d8:	1bbe      	subs	r6, r7, r6
   881da:	930e      	str	r3, [sp, #56]	; 0x38
   881dc:	1e73      	subs	r3, r6, #1
   881de:	9306      	str	r3, [sp, #24]
   881e0:	f57f ada0 	bpl.w	87d24 <_dtoa_r+0x154>
   881e4:	f1c6 0301 	rsb	r3, r6, #1
   881e8:	9309      	str	r3, [sp, #36]	; 0x24
   881ea:	2300      	movs	r3, #0
   881ec:	9306      	str	r3, [sp, #24]
   881ee:	e59b      	b.n	87d28 <_dtoa_r+0x158>
   881f0:	4658      	mov	r0, fp
   881f2:	f003 ff57 	bl	8c0a4 <__aeabi_i2d>
   881f6:	4642      	mov	r2, r8
   881f8:	464b      	mov	r3, r9
   881fa:	f004 fa25 	bl	8c648 <__aeabi_dcmpeq>
   881fe:	2800      	cmp	r0, #0
   88200:	f47f ad78 	bne.w	87cf4 <_dtoa_r+0x124>
   88204:	f10b 3bff 	add.w	fp, fp, #4294967295
   88208:	e574      	b.n	87cf4 <_dtoa_r+0x124>
   8820a:	4b86      	ldr	r3, [pc, #536]	; (88424 <_dtoa_r+0x854>)
   8820c:	9303      	str	r3, [sp, #12]
   8820e:	9803      	ldr	r0, [sp, #12]
   88210:	b019      	add	sp, #100	; 0x64
   88212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88216:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   8821a:	9f09      	ldr	r7, [sp, #36]	; 0x24
   8821c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   8821e:	2f00      	cmp	r7, #0
   88220:	dd0c      	ble.n	8823c <_dtoa_r+0x66c>
   88222:	9906      	ldr	r1, [sp, #24]
   88224:	2900      	cmp	r1, #0
   88226:	460b      	mov	r3, r1
   88228:	dd08      	ble.n	8823c <_dtoa_r+0x66c>
   8822a:	42b9      	cmp	r1, r7
   8822c:	bfa8      	it	ge
   8822e:	463b      	movge	r3, r7
   88230:	9a09      	ldr	r2, [sp, #36]	; 0x24
   88232:	1aff      	subs	r7, r7, r3
   88234:	1ad2      	subs	r2, r2, r3
   88236:	1acb      	subs	r3, r1, r3
   88238:	9209      	str	r2, [sp, #36]	; 0x24
   8823a:	9306      	str	r3, [sp, #24]
   8823c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8823e:	b1e3      	cbz	r3, 8827a <_dtoa_r+0x6aa>
   88240:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88242:	2b00      	cmp	r3, #0
   88244:	f000 8260 	beq.w	88708 <_dtoa_r+0xb38>
   88248:	f1b8 0f00 	cmp.w	r8, #0
   8824c:	dd10      	ble.n	88270 <_dtoa_r+0x6a0>
   8824e:	4631      	mov	r1, r6
   88250:	4642      	mov	r2, r8
   88252:	4620      	mov	r0, r4
   88254:	f001 fa3e 	bl	896d4 <__pow5mult>
   88258:	4606      	mov	r6, r0
   8825a:	462a      	mov	r2, r5
   8825c:	4631      	mov	r1, r6
   8825e:	4620      	mov	r0, r4
   88260:	f001 f98a 	bl	89578 <__multiply>
   88264:	4603      	mov	r3, r0
   88266:	4629      	mov	r1, r5
   88268:	4620      	mov	r0, r4
   8826a:	461d      	mov	r5, r3
   8826c:	f001 f8ae 	bl	893cc <_Bfree>
   88270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88272:	ebb3 0208 	subs.w	r2, r3, r8
   88276:	f040 82db 	bne.w	88830 <_dtoa_r+0xc60>
   8827a:	2101      	movs	r1, #1
   8827c:	4620      	mov	r0, r4
   8827e:	f001 f94d 	bl	8951c <__i2b>
   88282:	f1bb 0f00 	cmp.w	fp, #0
   88286:	4681      	mov	r9, r0
   88288:	f300 80b3 	bgt.w	883f2 <_dtoa_r+0x822>
   8828c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8828e:	2b01      	cmp	r3, #1
   88290:	f340 8188 	ble.w	885a4 <_dtoa_r+0x9d4>
   88294:	f04f 0a00 	mov.w	sl, #0
   88298:	2001      	movs	r0, #1
   8829a:	f1bb 0f00 	cmp.w	fp, #0
   8829e:	f040 80b4 	bne.w	8840a <_dtoa_r+0x83a>
   882a2:	9a06      	ldr	r2, [sp, #24]
   882a4:	4410      	add	r0, r2
   882a6:	f010 001f 	ands.w	r0, r0, #31
   882aa:	f000 8092 	beq.w	883d2 <_dtoa_r+0x802>
   882ae:	f1c0 0320 	rsb	r3, r0, #32
   882b2:	2b04      	cmp	r3, #4
   882b4:	f340 83d3 	ble.w	88a5e <_dtoa_r+0xe8e>
   882b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   882ba:	f1c0 001c 	rsb	r0, r0, #28
   882be:	4403      	add	r3, r0
   882c0:	4402      	add	r2, r0
   882c2:	9309      	str	r3, [sp, #36]	; 0x24
   882c4:	4407      	add	r7, r0
   882c6:	9206      	str	r2, [sp, #24]
   882c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   882ca:	2b00      	cmp	r3, #0
   882cc:	dd05      	ble.n	882da <_dtoa_r+0x70a>
   882ce:	4629      	mov	r1, r5
   882d0:	461a      	mov	r2, r3
   882d2:	4620      	mov	r0, r4
   882d4:	f001 fa5a 	bl	8978c <__lshift>
   882d8:	4605      	mov	r5, r0
   882da:	9b06      	ldr	r3, [sp, #24]
   882dc:	2b00      	cmp	r3, #0
   882de:	dd05      	ble.n	882ec <_dtoa_r+0x71c>
   882e0:	4649      	mov	r1, r9
   882e2:	461a      	mov	r2, r3
   882e4:	4620      	mov	r0, r4
   882e6:	f001 fa51 	bl	8978c <__lshift>
   882ea:	4681      	mov	r9, r0
   882ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   882ee:	2b00      	cmp	r3, #0
   882f0:	f040 8138 	bne.w	88564 <_dtoa_r+0x994>
   882f4:	9b08      	ldr	r3, [sp, #32]
   882f6:	2b00      	cmp	r3, #0
   882f8:	f340 811e 	ble.w	88538 <_dtoa_r+0x968>
   882fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   882fe:	2b00      	cmp	r3, #0
   88300:	f040 809f 	bne.w	88442 <_dtoa_r+0x872>
   88304:	9b07      	ldr	r3, [sp, #28]
   88306:	3301      	adds	r3, #1
   88308:	9307      	str	r3, [sp, #28]
   8830a:	2701      	movs	r7, #1
   8830c:	f8dd 800c 	ldr.w	r8, [sp, #12]
   88310:	f8dd a020 	ldr.w	sl, [sp, #32]
   88314:	e007      	b.n	88326 <_dtoa_r+0x756>
   88316:	4629      	mov	r1, r5
   88318:	2300      	movs	r3, #0
   8831a:	220a      	movs	r2, #10
   8831c:	4620      	mov	r0, r4
   8831e:	f001 f85f 	bl	893e0 <__multadd>
   88322:	4605      	mov	r5, r0
   88324:	3701      	adds	r7, #1
   88326:	4649      	mov	r1, r9
   88328:	4628      	mov	r0, r5
   8832a:	f7ff fbbb 	bl	87aa4 <quorem>
   8832e:	4557      	cmp	r7, sl
   88330:	f100 0330 	add.w	r3, r0, #48	; 0x30
   88334:	f808 3b01 	strb.w	r3, [r8], #1
   88338:	dbed      	blt.n	88316 <_dtoa_r+0x746>
   8833a:	9a08      	ldr	r2, [sp, #32]
   8833c:	2700      	movs	r7, #0
   8833e:	2a00      	cmp	r2, #0
   88340:	bfcc      	ite	gt
   88342:	4693      	movgt	fp, r2
   88344:	f04f 0b01 	movle.w	fp, #1
   88348:	9a03      	ldr	r2, [sp, #12]
   8834a:	4493      	add	fp, r2
   8834c:	4629      	mov	r1, r5
   8834e:	2201      	movs	r2, #1
   88350:	4620      	mov	r0, r4
   88352:	9304      	str	r3, [sp, #16]
   88354:	f001 fa1a 	bl	8978c <__lshift>
   88358:	4649      	mov	r1, r9
   8835a:	4605      	mov	r5, r0
   8835c:	f001 fa8c 	bl	89878 <__mcmp>
   88360:	2800      	cmp	r0, #0
   88362:	f340 81ab 	ble.w	886bc <_dtoa_r+0xaec>
   88366:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   8836a:	9a03      	ldr	r2, [sp, #12]
   8836c:	f10b 3bff 	add.w	fp, fp, #4294967295
   88370:	e004      	b.n	8837c <_dtoa_r+0x7ac>
   88372:	455a      	cmp	r2, fp
   88374:	f000 81ad 	beq.w	886d2 <_dtoa_r+0xb02>
   88378:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   8837c:	2b39      	cmp	r3, #57	; 0x39
   8837e:	f10b 0a01 	add.w	sl, fp, #1
   88382:	d0f6      	beq.n	88372 <_dtoa_r+0x7a2>
   88384:	3301      	adds	r3, #1
   88386:	f88b 3000 	strb.w	r3, [fp]
   8838a:	4649      	mov	r1, r9
   8838c:	4620      	mov	r0, r4
   8838e:	f001 f81d 	bl	893cc <_Bfree>
   88392:	b156      	cbz	r6, 883aa <_dtoa_r+0x7da>
   88394:	b12f      	cbz	r7, 883a2 <_dtoa_r+0x7d2>
   88396:	42b7      	cmp	r7, r6
   88398:	d003      	beq.n	883a2 <_dtoa_r+0x7d2>
   8839a:	4639      	mov	r1, r7
   8839c:	4620      	mov	r0, r4
   8839e:	f001 f815 	bl	893cc <_Bfree>
   883a2:	4631      	mov	r1, r6
   883a4:	4620      	mov	r0, r4
   883a6:	f001 f811 	bl	893cc <_Bfree>
   883aa:	4629      	mov	r1, r5
   883ac:	4620      	mov	r0, r4
   883ae:	f001 f80d 	bl	893cc <_Bfree>
   883b2:	2300      	movs	r3, #0
   883b4:	9a07      	ldr	r2, [sp, #28]
   883b6:	f88a 3000 	strb.w	r3, [sl]
   883ba:	9b24      	ldr	r3, [sp, #144]	; 0x90
   883bc:	601a      	str	r2, [r3, #0]
   883be:	9b26      	ldr	r3, [sp, #152]	; 0x98
   883c0:	2b00      	cmp	r3, #0
   883c2:	f43f ac40 	beq.w	87c46 <_dtoa_r+0x76>
   883c6:	9803      	ldr	r0, [sp, #12]
   883c8:	f8c3 a000 	str.w	sl, [r3]
   883cc:	b019      	add	sp, #100	; 0x64
   883ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   883d2:	201c      	movs	r0, #28
   883d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   883d6:	4407      	add	r7, r0
   883d8:	4403      	add	r3, r0
   883da:	9309      	str	r3, [sp, #36]	; 0x24
   883dc:	9b06      	ldr	r3, [sp, #24]
   883de:	4403      	add	r3, r0
   883e0:	9306      	str	r3, [sp, #24]
   883e2:	e771      	b.n	882c8 <_dtoa_r+0x6f8>
   883e4:	2601      	movs	r6, #1
   883e6:	e4b6      	b.n	87d56 <_dtoa_r+0x186>
   883e8:	f1c0 0020 	rsb	r0, r0, #32
   883ec:	fa08 f000 	lsl.w	r0, r8, r0
   883f0:	e44d      	b.n	87c8e <_dtoa_r+0xbe>
   883f2:	4601      	mov	r1, r0
   883f4:	465a      	mov	r2, fp
   883f6:	4620      	mov	r0, r4
   883f8:	f001 f96c 	bl	896d4 <__pow5mult>
   883fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   883fe:	4681      	mov	r9, r0
   88400:	2b01      	cmp	r3, #1
   88402:	f340 81b6 	ble.w	88772 <_dtoa_r+0xba2>
   88406:	f04f 0a00 	mov.w	sl, #0
   8840a:	f8d9 3010 	ldr.w	r3, [r9, #16]
   8840e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   88412:	6918      	ldr	r0, [r3, #16]
   88414:	f001 f836 	bl	89484 <__hi0bits>
   88418:	f1c0 0020 	rsb	r0, r0, #32
   8841c:	e741      	b.n	882a2 <_dtoa_r+0x6d2>
   8841e:	bf00      	nop
   88420:	40240000 	.word	0x40240000
   88424:	0008cad4 	.word	0x0008cad4
   88428:	4631      	mov	r1, r6
   8842a:	2300      	movs	r3, #0
   8842c:	220a      	movs	r2, #10
   8842e:	4620      	mov	r0, r4
   88430:	f000 ffd6 	bl	893e0 <__multadd>
   88434:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88436:	4606      	mov	r6, r0
   88438:	2b00      	cmp	r3, #0
   8843a:	f340 82e9 	ble.w	88a10 <_dtoa_r+0xe40>
   8843e:	e9cd 8307 	strd	r8, r3, [sp, #28]
   88442:	2f00      	cmp	r7, #0
   88444:	f300 811d 	bgt.w	88682 <_dtoa_r+0xab2>
   88448:	f1ba 0f00 	cmp.w	sl, #0
   8844c:	f040 81d9 	bne.w	88802 <_dtoa_r+0xc32>
   88450:	46b0      	mov	r8, r6
   88452:	9b04      	ldr	r3, [sp, #16]
   88454:	9908      	ldr	r1, [sp, #32]
   88456:	f003 0201 	and.w	r2, r3, #1
   8845a:	9b03      	ldr	r3, [sp, #12]
   8845c:	920a      	str	r2, [sp, #40]	; 0x28
   8845e:	461f      	mov	r7, r3
   88460:	3b01      	subs	r3, #1
   88462:	4419      	add	r1, r3
   88464:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88466:	9108      	str	r1, [sp, #32]
   88468:	4313      	orrs	r3, r2
   8846a:	9309      	str	r3, [sp, #36]	; 0x24
   8846c:	4649      	mov	r1, r9
   8846e:	4628      	mov	r0, r5
   88470:	f7ff fb18 	bl	87aa4 <quorem>
   88474:	4631      	mov	r1, r6
   88476:	4683      	mov	fp, r0
   88478:	4628      	mov	r0, r5
   8847a:	f001 f9fd 	bl	89878 <__mcmp>
   8847e:	4642      	mov	r2, r8
   88480:	4649      	mov	r1, r9
   88482:	4682      	mov	sl, r0
   88484:	4620      	mov	r0, r4
   88486:	f001 fa17 	bl	898b8 <__mdiff>
   8848a:	68c2      	ldr	r2, [r0, #12]
   8848c:	4601      	mov	r1, r0
   8848e:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   88492:	2a00      	cmp	r2, #0
   88494:	d143      	bne.n	8851e <_dtoa_r+0x94e>
   88496:	9004      	str	r0, [sp, #16]
   88498:	4628      	mov	r0, r5
   8849a:	9306      	str	r3, [sp, #24]
   8849c:	f001 f9ec 	bl	89878 <__mcmp>
   884a0:	4602      	mov	r2, r0
   884a2:	9904      	ldr	r1, [sp, #16]
   884a4:	4620      	mov	r0, r4
   884a6:	9204      	str	r2, [sp, #16]
   884a8:	f000 ff90 	bl	893cc <_Bfree>
   884ac:	9a04      	ldr	r2, [sp, #16]
   884ae:	9b06      	ldr	r3, [sp, #24]
   884b0:	b91a      	cbnz	r2, 884ba <_dtoa_r+0x8ea>
   884b2:	9909      	ldr	r1, [sp, #36]	; 0x24
   884b4:	2900      	cmp	r1, #0
   884b6:	f000 829b 	beq.w	889f0 <_dtoa_r+0xe20>
   884ba:	f1ba 0f00 	cmp.w	sl, #0
   884be:	f2c0 8164 	blt.w	8878a <_dtoa_r+0xbba>
   884c2:	9922      	ldr	r1, [sp, #136]	; 0x88
   884c4:	ea4a 0a01 	orr.w	sl, sl, r1
   884c8:	990a      	ldr	r1, [sp, #40]	; 0x28
   884ca:	ea51 010a 	orrs.w	r1, r1, sl
   884ce:	f000 815c 	beq.w	8878a <_dtoa_r+0xbba>
   884d2:	2a00      	cmp	r2, #0
   884d4:	f300 81b6 	bgt.w	88844 <_dtoa_r+0xc74>
   884d8:	9a08      	ldr	r2, [sp, #32]
   884da:	f107 0a01 	add.w	sl, r7, #1
   884de:	4297      	cmp	r7, r2
   884e0:	46d3      	mov	fp, sl
   884e2:	703b      	strb	r3, [r7, #0]
   884e4:	f000 81b4 	beq.w	88850 <_dtoa_r+0xc80>
   884e8:	4629      	mov	r1, r5
   884ea:	2300      	movs	r3, #0
   884ec:	220a      	movs	r2, #10
   884ee:	4620      	mov	r0, r4
   884f0:	f000 ff76 	bl	893e0 <__multadd>
   884f4:	4546      	cmp	r6, r8
   884f6:	4605      	mov	r5, r0
   884f8:	4631      	mov	r1, r6
   884fa:	f04f 0300 	mov.w	r3, #0
   884fe:	f04f 020a 	mov.w	r2, #10
   88502:	4620      	mov	r0, r4
   88504:	d012      	beq.n	8852c <_dtoa_r+0x95c>
   88506:	f000 ff6b 	bl	893e0 <__multadd>
   8850a:	4641      	mov	r1, r8
   8850c:	4606      	mov	r6, r0
   8850e:	2300      	movs	r3, #0
   88510:	220a      	movs	r2, #10
   88512:	4620      	mov	r0, r4
   88514:	f000 ff64 	bl	893e0 <__multadd>
   88518:	4657      	mov	r7, sl
   8851a:	4680      	mov	r8, r0
   8851c:	e7a6      	b.n	8846c <_dtoa_r+0x89c>
   8851e:	4620      	mov	r0, r4
   88520:	9304      	str	r3, [sp, #16]
   88522:	f000 ff53 	bl	893cc <_Bfree>
   88526:	2201      	movs	r2, #1
   88528:	9b04      	ldr	r3, [sp, #16]
   8852a:	e7c6      	b.n	884ba <_dtoa_r+0x8ea>
   8852c:	f000 ff58 	bl	893e0 <__multadd>
   88530:	4657      	mov	r7, sl
   88532:	4606      	mov	r6, r0
   88534:	4680      	mov	r8, r0
   88536:	e799      	b.n	8846c <_dtoa_r+0x89c>
   88538:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8853a:	2b02      	cmp	r3, #2
   8853c:	dc7a      	bgt.n	88634 <_dtoa_r+0xa64>
   8853e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88540:	2b00      	cmp	r3, #0
   88542:	f47f af7e 	bne.w	88442 <_dtoa_r+0x872>
   88546:	9b07      	ldr	r3, [sp, #28]
   88548:	4649      	mov	r1, r9
   8854a:	3301      	adds	r3, #1
   8854c:	4628      	mov	r0, r5
   8854e:	9307      	str	r3, [sp, #28]
   88550:	f7ff faa8 	bl	87aa4 <quorem>
   88554:	f8dd b00c 	ldr.w	fp, [sp, #12]
   88558:	f100 0330 	add.w	r3, r0, #48	; 0x30
   8855c:	2700      	movs	r7, #0
   8855e:	f80b 3b01 	strb.w	r3, [fp], #1
   88562:	e6f3      	b.n	8834c <_dtoa_r+0x77c>
   88564:	4649      	mov	r1, r9
   88566:	4628      	mov	r0, r5
   88568:	f001 f986 	bl	89878 <__mcmp>
   8856c:	2800      	cmp	r0, #0
   8856e:	f6bf aec1 	bge.w	882f4 <_dtoa_r+0x724>
   88572:	4629      	mov	r1, r5
   88574:	2300      	movs	r3, #0
   88576:	220a      	movs	r2, #10
   88578:	4620      	mov	r0, r4
   8857a:	f000 ff31 	bl	893e0 <__multadd>
   8857e:	9b07      	ldr	r3, [sp, #28]
   88580:	4605      	mov	r5, r0
   88582:	f103 38ff 	add.w	r8, r3, #4294967295
   88586:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88588:	2b00      	cmp	r3, #0
   8858a:	f47f af4d 	bne.w	88428 <_dtoa_r+0x858>
   8858e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88590:	2b00      	cmp	r3, #0
   88592:	f340 8234 	ble.w	889fe <_dtoa_r+0xe2e>
   88596:	9308      	str	r3, [sp, #32]
   88598:	e6b7      	b.n	8830a <_dtoa_r+0x73a>
   8859a:	4bb0      	ldr	r3, [pc, #704]	; (8885c <_dtoa_r+0xc8c>)
   8859c:	9303      	str	r3, [sp, #12]
   8859e:	3303      	adds	r3, #3
   885a0:	f7ff bbf4 	b.w	87d8c <_dtoa_r+0x1bc>
   885a4:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   885a8:	2900      	cmp	r1, #0
   885aa:	f47f ae73 	bne.w	88294 <_dtoa_r+0x6c4>
   885ae:	f3c2 0313 	ubfx	r3, r2, #0, #20
   885b2:	2b00      	cmp	r3, #0
   885b4:	f47f ae6e 	bne.w	88294 <_dtoa_r+0x6c4>
   885b8:	4ba9      	ldr	r3, [pc, #676]	; (88860 <_dtoa_r+0xc90>)
   885ba:	4013      	ands	r3, r2
   885bc:	2b00      	cmp	r3, #0
   885be:	f000 8200 	beq.w	889c2 <_dtoa_r+0xdf2>
   885c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
   885c4:	f04f 0a01 	mov.w	sl, #1
   885c8:	3301      	adds	r3, #1
   885ca:	9309      	str	r3, [sp, #36]	; 0x24
   885cc:	9b06      	ldr	r3, [sp, #24]
   885ce:	3301      	adds	r3, #1
   885d0:	9306      	str	r3, [sp, #24]
   885d2:	e661      	b.n	88298 <_dtoa_r+0x6c8>
   885d4:	2301      	movs	r3, #1
   885d6:	930c      	str	r3, [sp, #48]	; 0x30
   885d8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   885da:	9a07      	ldr	r2, [sp, #28]
   885dc:	4413      	add	r3, r2
   885de:	9312      	str	r3, [sp, #72]	; 0x48
   885e0:	3301      	adds	r3, #1
   885e2:	2b01      	cmp	r3, #1
   885e4:	461f      	mov	r7, r3
   885e6:	bfb8      	it	lt
   885e8:	2701      	movlt	r7, #1
   885ea:	9308      	str	r3, [sp, #32]
   885ec:	2100      	movs	r1, #0
   885ee:	2f17      	cmp	r7, #23
   885f0:	6461      	str	r1, [r4, #68]	; 0x44
   885f2:	f77f ac1e 	ble.w	87e32 <_dtoa_r+0x262>
   885f6:	2201      	movs	r2, #1
   885f8:	2304      	movs	r3, #4
   885fa:	005b      	lsls	r3, r3, #1
   885fc:	f103 0014 	add.w	r0, r3, #20
   88600:	42b8      	cmp	r0, r7
   88602:	4611      	mov	r1, r2
   88604:	f102 0201 	add.w	r2, r2, #1
   88608:	d9f7      	bls.n	885fa <_dtoa_r+0xa2a>
   8860a:	6461      	str	r1, [r4, #68]	; 0x44
   8860c:	e411      	b.n	87e32 <_dtoa_r+0x262>
   8860e:	2301      	movs	r3, #1
   88610:	930c      	str	r3, [sp, #48]	; 0x30
   88612:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88614:	2b00      	cmp	r3, #0
   88616:	dd4c      	ble.n	886b2 <_dtoa_r+0xae2>
   88618:	461f      	mov	r7, r3
   8861a:	9312      	str	r3, [sp, #72]	; 0x48
   8861c:	9308      	str	r3, [sp, #32]
   8861e:	e7e5      	b.n	885ec <_dtoa_r+0xa1c>
   88620:	2300      	movs	r3, #0
   88622:	930c      	str	r3, [sp, #48]	; 0x30
   88624:	e7d8      	b.n	885d8 <_dtoa_r+0xa08>
   88626:	2300      	movs	r3, #0
   88628:	930c      	str	r3, [sp, #48]	; 0x30
   8862a:	e7f2      	b.n	88612 <_dtoa_r+0xa42>
   8862c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8862e:	f8cd 801c 	str.w	r8, [sp, #28]
   88632:	9308      	str	r3, [sp, #32]
   88634:	9b08      	ldr	r3, [sp, #32]
   88636:	2b00      	cmp	r3, #0
   88638:	f47f ad43 	bne.w	880c2 <_dtoa_r+0x4f2>
   8863c:	4649      	mov	r1, r9
   8863e:	2205      	movs	r2, #5
   88640:	4620      	mov	r0, r4
   88642:	f000 fecd 	bl	893e0 <__multadd>
   88646:	4681      	mov	r9, r0
   88648:	4628      	mov	r0, r5
   8864a:	4649      	mov	r1, r9
   8864c:	f001 f914 	bl	89878 <__mcmp>
   88650:	2800      	cmp	r0, #0
   88652:	f77f ad36 	ble.w	880c2 <_dtoa_r+0x4f2>
   88656:	2331      	movs	r3, #49	; 0x31
   88658:	9803      	ldr	r0, [sp, #12]
   8865a:	9f07      	ldr	r7, [sp, #28]
   8865c:	4680      	mov	r8, r0
   8865e:	f800 3b01 	strb.w	r3, [r0], #1
   88662:	3701      	adds	r7, #1
   88664:	9003      	str	r0, [sp, #12]
   88666:	4649      	mov	r1, r9
   88668:	4620      	mov	r0, r4
   8866a:	f000 feaf 	bl	893cc <_Bfree>
   8866e:	1c7b      	adds	r3, r7, #1
   88670:	f8dd a00c 	ldr.w	sl, [sp, #12]
   88674:	9307      	str	r3, [sp, #28]
   88676:	f8cd 800c 	str.w	r8, [sp, #12]
   8867a:	2e00      	cmp	r6, #0
   8867c:	f47f ae91 	bne.w	883a2 <_dtoa_r+0x7d2>
   88680:	e693      	b.n	883aa <_dtoa_r+0x7da>
   88682:	4631      	mov	r1, r6
   88684:	463a      	mov	r2, r7
   88686:	4620      	mov	r0, r4
   88688:	f001 f880 	bl	8978c <__lshift>
   8868c:	4606      	mov	r6, r0
   8868e:	e6db      	b.n	88448 <_dtoa_r+0x878>
   88690:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88692:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   88696:	eba8 0303 	sub.w	r3, r8, r3
   8869a:	449b      	add	fp, r3
   8869c:	f04f 0800 	mov.w	r8, #0
   886a0:	e588      	b.n	881b4 <_dtoa_r+0x5e4>
   886a2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   886a6:	f04f 0a02 	mov.w	sl, #2
   886aa:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   886ae:	f7ff bbee 	b.w	87e8e <_dtoa_r+0x2be>
   886b2:	2301      	movs	r3, #1
   886b4:	9323      	str	r3, [sp, #140]	; 0x8c
   886b6:	9308      	str	r3, [sp, #32]
   886b8:	f7ff bbb7 	b.w	87e2a <_dtoa_r+0x25a>
   886bc:	d103      	bne.n	886c6 <_dtoa_r+0xaf6>
   886be:	9b04      	ldr	r3, [sp, #16]
   886c0:	07d8      	lsls	r0, r3, #31
   886c2:	f53f ae50 	bmi.w	88366 <_dtoa_r+0x796>
   886c6:	46da      	mov	sl, fp
   886c8:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   886cc:	2b30      	cmp	r3, #48	; 0x30
   886ce:	d0fa      	beq.n	886c6 <_dtoa_r+0xaf6>
   886d0:	e65b      	b.n	8838a <_dtoa_r+0x7ba>
   886d2:	9b07      	ldr	r3, [sp, #28]
   886d4:	9a03      	ldr	r2, [sp, #12]
   886d6:	3301      	adds	r3, #1
   886d8:	9307      	str	r3, [sp, #28]
   886da:	2331      	movs	r3, #49	; 0x31
   886dc:	7013      	strb	r3, [r2, #0]
   886de:	e654      	b.n	8838a <_dtoa_r+0x7ba>
   886e0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   886e2:	2a00      	cmp	r2, #0
   886e4:	f000 8128 	beq.w	88938 <_dtoa_r+0xd68>
   886e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
   886ec:	9a06      	ldr	r2, [sp, #24]
   886ee:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   886f2:	441a      	add	r2, r3
   886f4:	9206      	str	r2, [sp, #24]
   886f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   886f8:	4617      	mov	r7, r2
   886fa:	441a      	add	r2, r3
   886fc:	9209      	str	r2, [sp, #36]	; 0x24
   886fe:	e564      	b.n	881ca <_dtoa_r+0x5fa>
   88700:	f04f 0900 	mov.w	r9, #0
   88704:	464e      	mov	r6, r9
   88706:	e4dc      	b.n	880c2 <_dtoa_r+0x4f2>
   88708:	4629      	mov	r1, r5
   8870a:	4620      	mov	r0, r4
   8870c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   8870e:	f000 ffe1 	bl	896d4 <__pow5mult>
   88712:	4605      	mov	r5, r0
   88714:	e5b1      	b.n	8827a <_dtoa_r+0x6aa>
   88716:	900e      	str	r0, [sp, #56]	; 0x38
   88718:	e564      	b.n	881e4 <_dtoa_r+0x614>
   8871a:	f000 8111 	beq.w	88940 <_dtoa_r+0xd70>
   8871e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   88722:	9a07      	ldr	r2, [sp, #28]
   88724:	4b4f      	ldr	r3, [pc, #316]	; (88864 <_dtoa_r+0xc94>)
   88726:	4256      	negs	r6, r2
   88728:	f006 020f 	and.w	r2, r6, #15
   8872c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   88730:	e9d3 2300 	ldrd	r2, r3, [r3]
   88734:	f003 fd20 	bl	8c178 <__aeabi_dmul>
   88738:	1136      	asrs	r6, r6, #4
   8873a:	4680      	mov	r8, r0
   8873c:	4689      	mov	r9, r1
   8873e:	f000 8170 	beq.w	88a22 <_dtoa_r+0xe52>
   88742:	2300      	movs	r3, #0
   88744:	f04f 0a02 	mov.w	sl, #2
   88748:	4f47      	ldr	r7, [pc, #284]	; (88868 <_dtoa_r+0xc98>)
   8874a:	07f2      	lsls	r2, r6, #31
   8874c:	d506      	bpl.n	8875c <_dtoa_r+0xb8c>
   8874e:	e9d7 2300 	ldrd	r2, r3, [r7]
   88752:	f003 fd11 	bl	8c178 <__aeabi_dmul>
   88756:	2301      	movs	r3, #1
   88758:	f10a 0a01 	add.w	sl, sl, #1
   8875c:	1076      	asrs	r6, r6, #1
   8875e:	f107 0708 	add.w	r7, r7, #8
   88762:	d1f2      	bne.n	8874a <_dtoa_r+0xb7a>
   88764:	2b00      	cmp	r3, #0
   88766:	f43f abb1 	beq.w	87ecc <_dtoa_r+0x2fc>
   8876a:	4680      	mov	r8, r0
   8876c:	4689      	mov	r9, r1
   8876e:	f7ff bbad 	b.w	87ecc <_dtoa_r+0x2fc>
   88772:	9b04      	ldr	r3, [sp, #16]
   88774:	2b00      	cmp	r3, #0
   88776:	f47f ae46 	bne.w	88406 <_dtoa_r+0x836>
   8877a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   8877e:	f3c2 0313 	ubfx	r3, r2, #0, #20
   88782:	2b00      	cmp	r3, #0
   88784:	f43f af18 	beq.w	885b8 <_dtoa_r+0x9e8>
   88788:	e63d      	b.n	88406 <_dtoa_r+0x836>
   8878a:	2a00      	cmp	r2, #0
   8878c:	dd12      	ble.n	887b4 <_dtoa_r+0xbe4>
   8878e:	4629      	mov	r1, r5
   88790:	2201      	movs	r2, #1
   88792:	4620      	mov	r0, r4
   88794:	9304      	str	r3, [sp, #16]
   88796:	f000 fff9 	bl	8978c <__lshift>
   8879a:	4649      	mov	r1, r9
   8879c:	4605      	mov	r5, r0
   8879e:	f001 f86b 	bl	89878 <__mcmp>
   887a2:	2800      	cmp	r0, #0
   887a4:	9b04      	ldr	r3, [sp, #16]
   887a6:	f340 8117 	ble.w	889d8 <_dtoa_r+0xe08>
   887aa:	2b39      	cmp	r3, #57	; 0x39
   887ac:	f000 80fb 	beq.w	889a6 <_dtoa_r+0xdd6>
   887b0:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   887b4:	46ba      	mov	sl, r7
   887b6:	9a07      	ldr	r2, [sp, #28]
   887b8:	4637      	mov	r7, r6
   887ba:	3201      	adds	r2, #1
   887bc:	4646      	mov	r6, r8
   887be:	9207      	str	r2, [sp, #28]
   887c0:	f80a 3b01 	strb.w	r3, [sl], #1
   887c4:	e5e1      	b.n	8838a <_dtoa_r+0x7ba>
   887c6:	9509      	str	r5, [sp, #36]	; 0x24
   887c8:	9c06      	ldr	r4, [sp, #24]
   887ca:	9d04      	ldr	r5, [sp, #16]
   887cc:	4602      	mov	r2, r0
   887ce:	460b      	mov	r3, r1
   887d0:	f003 fb1c 	bl	8be0c <__adddf3>
   887d4:	4652      	mov	r2, sl
   887d6:	465b      	mov	r3, fp
   887d8:	4680      	mov	r8, r0
   887da:	4689      	mov	r9, r1
   887dc:	f003 ff5c 	bl	8c698 <__aeabi_dcmpgt>
   887e0:	b960      	cbnz	r0, 887fc <_dtoa_r+0xc2c>
   887e2:	4652      	mov	r2, sl
   887e4:	465b      	mov	r3, fp
   887e6:	4640      	mov	r0, r8
   887e8:	4649      	mov	r1, r9
   887ea:	f003 ff2d 	bl	8c648 <__aeabi_dcmpeq>
   887ee:	2800      	cmp	r0, #0
   887f0:	f43f accb 	beq.w	8818a <_dtoa_r+0x5ba>
   887f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   887f6:	07d9      	lsls	r1, r3, #31
   887f8:	f57f acc7 	bpl.w	8818a <_dtoa_r+0x5ba>
   887fc:	9a03      	ldr	r2, [sp, #12]
   887fe:	f7ff bbff 	b.w	88000 <_dtoa_r+0x430>
   88802:	4620      	mov	r0, r4
   88804:	6871      	ldr	r1, [r6, #4]
   88806:	f000 fdbb 	bl	89380 <_Balloc>
   8880a:	4607      	mov	r7, r0
   8880c:	2800      	cmp	r0, #0
   8880e:	f000 810c 	beq.w	88a2a <_dtoa_r+0xe5a>
   88812:	6933      	ldr	r3, [r6, #16]
   88814:	f106 010c 	add.w	r1, r6, #12
   88818:	3302      	adds	r3, #2
   8881a:	009a      	lsls	r2, r3, #2
   8881c:	300c      	adds	r0, #12
   8881e:	f7fd fa93 	bl	85d48 <memcpy>
   88822:	4639      	mov	r1, r7
   88824:	2201      	movs	r2, #1
   88826:	4620      	mov	r0, r4
   88828:	f000 ffb0 	bl	8978c <__lshift>
   8882c:	4680      	mov	r8, r0
   8882e:	e610      	b.n	88452 <_dtoa_r+0x882>
   88830:	4629      	mov	r1, r5
   88832:	4620      	mov	r0, r4
   88834:	f000 ff4e 	bl	896d4 <__pow5mult>
   88838:	4605      	mov	r5, r0
   8883a:	e51e      	b.n	8827a <_dtoa_r+0x6aa>
   8883c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   88840:	1a9f      	subs	r7, r3, r2
   88842:	e4c2      	b.n	881ca <_dtoa_r+0x5fa>
   88844:	2b39      	cmp	r3, #57	; 0x39
   88846:	f000 80ae 	beq.w	889a6 <_dtoa_r+0xdd6>
   8884a:	46ba      	mov	sl, r7
   8884c:	3301      	adds	r3, #1
   8884e:	e7b2      	b.n	887b6 <_dtoa_r+0xbe6>
   88850:	9a07      	ldr	r2, [sp, #28]
   88852:	4637      	mov	r7, r6
   88854:	3201      	adds	r2, #1
   88856:	4646      	mov	r6, r8
   88858:	9207      	str	r2, [sp, #28]
   8885a:	e577      	b.n	8834c <_dtoa_r+0x77c>
   8885c:	0008caf8 	.word	0x0008caf8
   88860:	7ff00000 	.word	0x7ff00000
   88864:	0008cc48 	.word	0x0008cc48
   88868:	0008cc20 	.word	0x0008cc20
   8886c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   88870:	4983      	ldr	r1, [pc, #524]	; (88a80 <_dtoa_r+0xeb0>)
   88872:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   88876:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   8887a:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   8887e:	f003 fc7b 	bl	8c178 <__aeabi_dmul>
   88882:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88886:	4649      	mov	r1, r9
   88888:	4640      	mov	r0, r8
   8888a:	f003 ff25 	bl	8c6d8 <__aeabi_d2iz>
   8888e:	4606      	mov	r6, r0
   88890:	f003 fc08 	bl	8c0a4 <__aeabi_i2d>
   88894:	460b      	mov	r3, r1
   88896:	4602      	mov	r2, r0
   88898:	4649      	mov	r1, r9
   8889a:	4640      	mov	r0, r8
   8889c:	f003 fab4 	bl	8be08 <__aeabi_dsub>
   888a0:	4653      	mov	r3, sl
   888a2:	9f03      	ldr	r7, [sp, #12]
   888a4:	3630      	adds	r6, #48	; 0x30
   888a6:	2b01      	cmp	r3, #1
   888a8:	4680      	mov	r8, r0
   888aa:	4689      	mov	r9, r1
   888ac:	f807 6b01 	strb.w	r6, [r7], #1
   888b0:	f000 80ac 	beq.w	88a0c <_dtoa_r+0xe3c>
   888b4:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   888b6:	9b03      	ldr	r3, [sp, #12]
   888b8:	441e      	add	r6, r3
   888ba:	2200      	movs	r2, #0
   888bc:	4b71      	ldr	r3, [pc, #452]	; (88a84 <_dtoa_r+0xeb4>)
   888be:	4640      	mov	r0, r8
   888c0:	4649      	mov	r1, r9
   888c2:	f003 fc59 	bl	8c178 <__aeabi_dmul>
   888c6:	4689      	mov	r9, r1
   888c8:	4680      	mov	r8, r0
   888ca:	f003 ff05 	bl	8c6d8 <__aeabi_d2iz>
   888ce:	4682      	mov	sl, r0
   888d0:	f003 fbe8 	bl	8c0a4 <__aeabi_i2d>
   888d4:	4602      	mov	r2, r0
   888d6:	460b      	mov	r3, r1
   888d8:	4640      	mov	r0, r8
   888da:	4649      	mov	r1, r9
   888dc:	f003 fa94 	bl	8be08 <__aeabi_dsub>
   888e0:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   888e4:	f807 ab01 	strb.w	sl, [r7], #1
   888e8:	42b7      	cmp	r7, r6
   888ea:	4680      	mov	r8, r0
   888ec:	4689      	mov	r9, r1
   888ee:	d1e4      	bne.n	888ba <_dtoa_r+0xcea>
   888f0:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   888f4:	2200      	movs	r2, #0
   888f6:	4b64      	ldr	r3, [pc, #400]	; (88a88 <_dtoa_r+0xeb8>)
   888f8:	f003 fa88 	bl	8be0c <__adddf3>
   888fc:	4642      	mov	r2, r8
   888fe:	464b      	mov	r3, r9
   88900:	f003 feac 	bl	8c65c <__aeabi_dcmplt>
   88904:	2800      	cmp	r0, #0
   88906:	d162      	bne.n	889ce <_dtoa_r+0xdfe>
   88908:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8890c:	2000      	movs	r0, #0
   8890e:	495e      	ldr	r1, [pc, #376]	; (88a88 <_dtoa_r+0xeb8>)
   88910:	f003 fa7a 	bl	8be08 <__aeabi_dsub>
   88914:	4642      	mov	r2, r8
   88916:	464b      	mov	r3, r9
   88918:	f003 febe 	bl	8c698 <__aeabi_dcmpgt>
   8891c:	2800      	cmp	r0, #0
   8891e:	f43f aba9 	beq.w	88074 <_dtoa_r+0x4a4>
   88922:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   88926:	46b2      	mov	sl, r6
   88928:	2b30      	cmp	r3, #48	; 0x30
   8892a:	f106 36ff 	add.w	r6, r6, #4294967295
   8892e:	d0f8      	beq.n	88922 <_dtoa_r+0xd52>
   88930:	9b14      	ldr	r3, [sp, #80]	; 0x50
   88932:	3301      	adds	r3, #1
   88934:	9307      	str	r3, [sp, #28]
   88936:	e538      	b.n	883aa <_dtoa_r+0x7da>
   88938:	9b16      	ldr	r3, [sp, #88]	; 0x58
   8893a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   8893e:	e6d5      	b.n	886ec <_dtoa_r+0xb1c>
   88940:	f04f 0a02 	mov.w	sl, #2
   88944:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   88948:	f7ff bac0 	b.w	87ecc <_dtoa_r+0x2fc>
   8894c:	9b08      	ldr	r3, [sp, #32]
   8894e:	2b00      	cmp	r3, #0
   88950:	f43f ab62 	beq.w	88018 <_dtoa_r+0x448>
   88954:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88956:	2b00      	cmp	r3, #0
   88958:	f77f ab8c 	ble.w	88074 <_dtoa_r+0x4a4>
   8895c:	9313      	str	r3, [sp, #76]	; 0x4c
   8895e:	9b07      	ldr	r3, [sp, #28]
   88960:	2200      	movs	r2, #0
   88962:	3b01      	subs	r3, #1
   88964:	4640      	mov	r0, r8
   88966:	4649      	mov	r1, r9
   88968:	9314      	str	r3, [sp, #80]	; 0x50
   8896a:	4b46      	ldr	r3, [pc, #280]	; (88a84 <_dtoa_r+0xeb4>)
   8896c:	f003 fc04 	bl	8c178 <__aeabi_dmul>
   88970:	4680      	mov	r8, r0
   88972:	4689      	mov	r9, r1
   88974:	f10a 0001 	add.w	r0, sl, #1
   88978:	f003 fb94 	bl	8c0a4 <__aeabi_i2d>
   8897c:	4642      	mov	r2, r8
   8897e:	464b      	mov	r3, r9
   88980:	f003 fbfa 	bl	8c178 <__aeabi_dmul>
   88984:	4b41      	ldr	r3, [pc, #260]	; (88a8c <_dtoa_r+0xebc>)
   88986:	2200      	movs	r2, #0
   88988:	f003 fa40 	bl	8be0c <__adddf3>
   8898c:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   88990:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88994:	9311      	str	r3, [sp, #68]	; 0x44
   88996:	f7ff babc 	b.w	87f12 <_dtoa_r+0x342>
   8899a:	9b07      	ldr	r3, [sp, #28]
   8899c:	3301      	adds	r3, #1
   8899e:	9307      	str	r3, [sp, #28]
   889a0:	2331      	movs	r3, #49	; 0x31
   889a2:	f7ff bb34 	b.w	8800e <_dtoa_r+0x43e>
   889a6:	9b07      	ldr	r3, [sp, #28]
   889a8:	46bb      	mov	fp, r7
   889aa:	3301      	adds	r3, #1
   889ac:	9307      	str	r3, [sp, #28]
   889ae:	2339      	movs	r3, #57	; 0x39
   889b0:	4637      	mov	r7, r6
   889b2:	f80b 3b01 	strb.w	r3, [fp], #1
   889b6:	4646      	mov	r6, r8
   889b8:	e4d7      	b.n	8836a <_dtoa_r+0x79a>
   889ba:	f04f 0900 	mov.w	r9, #0
   889be:	464e      	mov	r6, r9
   889c0:	e649      	b.n	88656 <_dtoa_r+0xa86>
   889c2:	469a      	mov	sl, r3
   889c4:	e468      	b.n	88298 <_dtoa_r+0x6c8>
   889c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
   889c8:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   889ca:	46b2      	mov	sl, r6
   889cc:	e7b0      	b.n	88930 <_dtoa_r+0xd60>
   889ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
   889d0:	9a03      	ldr	r2, [sp, #12]
   889d2:	9307      	str	r3, [sp, #28]
   889d4:	f7ff bb14 	b.w	88000 <_dtoa_r+0x430>
   889d8:	f47f aeec 	bne.w	887b4 <_dtoa_r+0xbe4>
   889dc:	07da      	lsls	r2, r3, #31
   889de:	f57f aee9 	bpl.w	887b4 <_dtoa_r+0xbe4>
   889e2:	e6e2      	b.n	887aa <_dtoa_r+0xbda>
   889e4:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   889e8:	9d10      	ldr	r5, [sp, #64]	; 0x40
   889ea:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   889ec:	f7ff bb42 	b.w	88074 <_dtoa_r+0x4a4>
   889f0:	2b39      	cmp	r3, #57	; 0x39
   889f2:	d0d8      	beq.n	889a6 <_dtoa_r+0xdd6>
   889f4:	f1ba 0f00 	cmp.w	sl, #0
   889f8:	f73f aeda 	bgt.w	887b0 <_dtoa_r+0xbe0>
   889fc:	e6da      	b.n	887b4 <_dtoa_r+0xbe4>
   889fe:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88a00:	2b02      	cmp	r3, #2
   88a02:	f73f ae13 	bgt.w	8862c <_dtoa_r+0xa5c>
   88a06:	f8cd 801c 	str.w	r8, [sp, #28]
   88a0a:	e59c      	b.n	88546 <_dtoa_r+0x976>
   88a0c:	463e      	mov	r6, r7
   88a0e:	e76f      	b.n	888f0 <_dtoa_r+0xd20>
   88a10:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88a12:	2b02      	cmp	r3, #2
   88a14:	f73f ae0a 	bgt.w	8862c <_dtoa_r+0xa5c>
   88a18:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88a1a:	f8cd 801c 	str.w	r8, [sp, #28]
   88a1e:	9308      	str	r3, [sp, #32]
   88a20:	e50f      	b.n	88442 <_dtoa_r+0x872>
   88a22:	f04f 0a02 	mov.w	sl, #2
   88a26:	f7ff ba51 	b.w	87ecc <_dtoa_r+0x2fc>
   88a2a:	4602      	mov	r2, r0
   88a2c:	f240 21ea 	movw	r1, #746	; 0x2ea
   88a30:	4b17      	ldr	r3, [pc, #92]	; (88a90 <_dtoa_r+0xec0>)
   88a32:	4818      	ldr	r0, [pc, #96]	; (88a94 <_dtoa_r+0xec4>)
   88a34:	f001 f956 	bl	89ce4 <__assert_func>
   88a38:	2600      	movs	r6, #0
   88a3a:	4620      	mov	r0, r4
   88a3c:	4631      	mov	r1, r6
   88a3e:	6466      	str	r6, [r4, #68]	; 0x44
   88a40:	f000 fc9e 	bl	89380 <_Balloc>
   88a44:	9003      	str	r0, [sp, #12]
   88a46:	b978      	cbnz	r0, 88a68 <_dtoa_r+0xe98>
   88a48:	2200      	movs	r2, #0
   88a4a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   88a4e:	4b10      	ldr	r3, [pc, #64]	; (88a90 <_dtoa_r+0xec0>)
   88a50:	4810      	ldr	r0, [pc, #64]	; (88a94 <_dtoa_r+0xec4>)
   88a52:	f001 f947 	bl	89ce4 <__assert_func>
   88a56:	4b10      	ldr	r3, [pc, #64]	; (88a98 <_dtoa_r+0xec8>)
   88a58:	9303      	str	r3, [sp, #12]
   88a5a:	f7ff b8f4 	b.w	87c46 <_dtoa_r+0x76>
   88a5e:	f43f ac33 	beq.w	882c8 <_dtoa_r+0x6f8>
   88a62:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   88a66:	e4b5      	b.n	883d4 <_dtoa_r+0x804>
   88a68:	9b03      	ldr	r3, [sp, #12]
   88a6a:	2201      	movs	r2, #1
   88a6c:	6423      	str	r3, [r4, #64]	; 0x40
   88a6e:	f04f 33ff 	mov.w	r3, #4294967295
   88a72:	9623      	str	r6, [sp, #140]	; 0x8c
   88a74:	9312      	str	r3, [sp, #72]	; 0x48
   88a76:	920c      	str	r2, [sp, #48]	; 0x30
   88a78:	9308      	str	r3, [sp, #32]
   88a7a:	f7ff bafb 	b.w	88074 <_dtoa_r+0x4a4>
   88a7e:	bf00      	nop
   88a80:	0008cc48 	.word	0x0008cc48
   88a84:	40240000 	.word	0x40240000
   88a88:	3fe00000 	.word	0x3fe00000
   88a8c:	401c0000 	.word	0x401c0000
   88a90:	0008cb08 	.word	0x0008cb08
   88a94:	0008cb1c 	.word	0x0008cb1c
   88a98:	0008cafc 	.word	0x0008cafc

00088a9c <__libc_fini_array>:
   88a9c:	b538      	push	{r3, r4, r5, lr}
   88a9e:	4b08      	ldr	r3, [pc, #32]	; (88ac0 <__libc_fini_array+0x24>)
   88aa0:	4d08      	ldr	r5, [pc, #32]	; (88ac4 <__libc_fini_array+0x28>)
   88aa2:	1b5b      	subs	r3, r3, r5
   88aa4:	109c      	asrs	r4, r3, #2
   88aa6:	d007      	beq.n	88ab8 <__libc_fini_array+0x1c>
   88aa8:	3b04      	subs	r3, #4
   88aaa:	441d      	add	r5, r3
   88aac:	3c01      	subs	r4, #1
   88aae:	f855 3904 	ldr.w	r3, [r5], #-4
   88ab2:	4798      	blx	r3
   88ab4:	2c00      	cmp	r4, #0
   88ab6:	d1f9      	bne.n	88aac <__libc_fini_array+0x10>
   88ab8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   88abc:	f004 b9f2 	b.w	8cea4 <_fini>
   88ac0:	0008ceb4 	.word	0x0008ceb4
   88ac4:	0008ceb0 	.word	0x0008ceb0

00088ac8 <_malloc_trim_r>:
   88ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88aca:	460c      	mov	r4, r1
   88acc:	4f23      	ldr	r7, [pc, #140]	; (88b5c <_malloc_trim_r+0x94>)
   88ace:	4606      	mov	r6, r0
   88ad0:	f000 fc4a 	bl	89368 <__malloc_lock>
   88ad4:	68bb      	ldr	r3, [r7, #8]
   88ad6:	685d      	ldr	r5, [r3, #4]
   88ad8:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
   88adc:	f025 0503 	bic.w	r5, r5, #3
   88ae0:	330f      	adds	r3, #15
   88ae2:	442b      	add	r3, r5
   88ae4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   88ae8:	f023 030f 	bic.w	r3, r3, #15
   88aec:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   88af0:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   88af4:	db07      	blt.n	88b06 <_malloc_trim_r+0x3e>
   88af6:	2100      	movs	r1, #0
   88af8:	4630      	mov	r0, r6
   88afa:	f001 f81d 	bl	89b38 <_sbrk_r>
   88afe:	68bb      	ldr	r3, [r7, #8]
   88b00:	442b      	add	r3, r5
   88b02:	4298      	cmp	r0, r3
   88b04:	d004      	beq.n	88b10 <_malloc_trim_r+0x48>
   88b06:	4630      	mov	r0, r6
   88b08:	f000 fc34 	bl	89374 <__malloc_unlock>
   88b0c:	2000      	movs	r0, #0
   88b0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88b10:	4630      	mov	r0, r6
   88b12:	4261      	negs	r1, r4
   88b14:	f001 f810 	bl	89b38 <_sbrk_r>
   88b18:	3001      	adds	r0, #1
   88b1a:	d00d      	beq.n	88b38 <_malloc_trim_r+0x70>
   88b1c:	4a10      	ldr	r2, [pc, #64]	; (88b60 <_malloc_trim_r+0x98>)
   88b1e:	68bb      	ldr	r3, [r7, #8]
   88b20:	1b2d      	subs	r5, r5, r4
   88b22:	f045 0501 	orr.w	r5, r5, #1
   88b26:	605d      	str	r5, [r3, #4]
   88b28:	6813      	ldr	r3, [r2, #0]
   88b2a:	4630      	mov	r0, r6
   88b2c:	1b1b      	subs	r3, r3, r4
   88b2e:	6013      	str	r3, [r2, #0]
   88b30:	f000 fc20 	bl	89374 <__malloc_unlock>
   88b34:	2001      	movs	r0, #1
   88b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88b38:	2100      	movs	r1, #0
   88b3a:	4630      	mov	r0, r6
   88b3c:	f000 fffc 	bl	89b38 <_sbrk_r>
   88b40:	68ba      	ldr	r2, [r7, #8]
   88b42:	1a83      	subs	r3, r0, r2
   88b44:	2b0f      	cmp	r3, #15
   88b46:	ddde      	ble.n	88b06 <_malloc_trim_r+0x3e>
   88b48:	f043 0301 	orr.w	r3, r3, #1
   88b4c:	6053      	str	r3, [r2, #4]
   88b4e:	4b05      	ldr	r3, [pc, #20]	; (88b64 <_malloc_trim_r+0x9c>)
   88b50:	4903      	ldr	r1, [pc, #12]	; (88b60 <_malloc_trim_r+0x98>)
   88b52:	681b      	ldr	r3, [r3, #0]
   88b54:	1ac0      	subs	r0, r0, r3
   88b56:	6008      	str	r0, [r1, #0]
   88b58:	e7d5      	b.n	88b06 <_malloc_trim_r+0x3e>
   88b5a:	bf00      	nop
   88b5c:	20070f64 	.word	0x20070f64
   88b60:	2007331c 	.word	0x2007331c
   88b64:	2007136c 	.word	0x2007136c

00088b68 <_free_r>:
   88b68:	2900      	cmp	r1, #0
   88b6a:	d05e      	beq.n	88c2a <_free_r+0xc2>
   88b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88b6e:	460c      	mov	r4, r1
   88b70:	4606      	mov	r6, r0
   88b72:	f000 fbf9 	bl	89368 <__malloc_lock>
   88b76:	f854 2c04 	ldr.w	r2, [r4, #-4]
   88b7a:	4f78      	ldr	r7, [pc, #480]	; (88d5c <_free_r+0x1f4>)
   88b7c:	f1a4 0508 	sub.w	r5, r4, #8
   88b80:	f022 0101 	bic.w	r1, r2, #1
   88b84:	1868      	adds	r0, r5, r1
   88b86:	f8d7 c008 	ldr.w	ip, [r7, #8]
   88b8a:	6843      	ldr	r3, [r0, #4]
   88b8c:	4584      	cmp	ip, r0
   88b8e:	f023 0303 	bic.w	r3, r3, #3
   88b92:	f000 8087 	beq.w	88ca4 <_free_r+0x13c>
   88b96:	07d2      	lsls	r2, r2, #31
   88b98:	6043      	str	r3, [r0, #4]
   88b9a:	d434      	bmi.n	88c06 <_free_r+0x9e>
   88b9c:	f854 2c08 	ldr.w	r2, [r4, #-8]
   88ba0:	f107 0408 	add.w	r4, r7, #8
   88ba4:	1aad      	subs	r5, r5, r2
   88ba6:	4411      	add	r1, r2
   88ba8:	68aa      	ldr	r2, [r5, #8]
   88baa:	42a2      	cmp	r2, r4
   88bac:	d068      	beq.n	88c80 <_free_r+0x118>
   88bae:	eb00 0c03 	add.w	ip, r0, r3
   88bb2:	f8dc e004 	ldr.w	lr, [ip, #4]
   88bb6:	f8d5 c00c 	ldr.w	ip, [r5, #12]
   88bba:	f01e 0f01 	tst.w	lr, #1
   88bbe:	f8c2 c00c 	str.w	ip, [r2, #12]
   88bc2:	f8cc 2008 	str.w	r2, [ip, #8]
   88bc6:	f000 8091 	beq.w	88cec <_free_r+0x184>
   88bca:	f041 0301 	orr.w	r3, r1, #1
   88bce:	606b      	str	r3, [r5, #4]
   88bd0:	6001      	str	r1, [r0, #0]
   88bd2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   88bd6:	d231      	bcs.n	88c3c <_free_r+0xd4>
   88bd8:	094a      	lsrs	r2, r1, #5
   88bda:	08cb      	lsrs	r3, r1, #3
   88bdc:	2101      	movs	r1, #1
   88bde:	4091      	lsls	r1, r2
   88be0:	687a      	ldr	r2, [r7, #4]
   88be2:	3301      	adds	r3, #1
   88be4:	4311      	orrs	r1, r2
   88be6:	6079      	str	r1, [r7, #4]
   88be8:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   88bec:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   88bf0:	3a08      	subs	r2, #8
   88bf2:	e9c5 1202 	strd	r1, r2, [r5, #8]
   88bf6:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   88bfa:	60cd      	str	r5, [r1, #12]
   88bfc:	4630      	mov	r0, r6
   88bfe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   88c02:	f000 bbb7 	b.w	89374 <__malloc_unlock>
   88c06:	18c2      	adds	r2, r0, r3
   88c08:	6852      	ldr	r2, [r2, #4]
   88c0a:	07d2      	lsls	r2, r2, #31
   88c0c:	d40e      	bmi.n	88c2c <_free_r+0xc4>
   88c0e:	4419      	add	r1, r3
   88c10:	f107 0408 	add.w	r4, r7, #8
   88c14:	6883      	ldr	r3, [r0, #8]
   88c16:	42a3      	cmp	r3, r4
   88c18:	d070      	beq.n	88cfc <_free_r+0x194>
   88c1a:	68c2      	ldr	r2, [r0, #12]
   88c1c:	60da      	str	r2, [r3, #12]
   88c1e:	6093      	str	r3, [r2, #8]
   88c20:	f041 0301 	orr.w	r3, r1, #1
   88c24:	606b      	str	r3, [r5, #4]
   88c26:	5069      	str	r1, [r5, r1]
   88c28:	e7d3      	b.n	88bd2 <_free_r+0x6a>
   88c2a:	4770      	bx	lr
   88c2c:	f041 0301 	orr.w	r3, r1, #1
   88c30:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   88c34:	f844 3c04 	str.w	r3, [r4, #-4]
   88c38:	6001      	str	r1, [r0, #0]
   88c3a:	d3cd      	bcc.n	88bd8 <_free_r+0x70>
   88c3c:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   88c40:	ea4f 2351 	mov.w	r3, r1, lsr #9
   88c44:	d247      	bcs.n	88cd6 <_free_r+0x16e>
   88c46:	098b      	lsrs	r3, r1, #6
   88c48:	f103 0039 	add.w	r0, r3, #57	; 0x39
   88c4c:	f103 0238 	add.w	r2, r3, #56	; 0x38
   88c50:	00c3      	lsls	r3, r0, #3
   88c52:	18f8      	adds	r0, r7, r3
   88c54:	58fb      	ldr	r3, [r7, r3]
   88c56:	3808      	subs	r0, #8
   88c58:	4298      	cmp	r0, r3
   88c5a:	d058      	beq.n	88d0e <_free_r+0x1a6>
   88c5c:	685a      	ldr	r2, [r3, #4]
   88c5e:	f022 0203 	bic.w	r2, r2, #3
   88c62:	428a      	cmp	r2, r1
   88c64:	d902      	bls.n	88c6c <_free_r+0x104>
   88c66:	689b      	ldr	r3, [r3, #8]
   88c68:	4298      	cmp	r0, r3
   88c6a:	d1f7      	bne.n	88c5c <_free_r+0xf4>
   88c6c:	68d8      	ldr	r0, [r3, #12]
   88c6e:	e9c5 3002 	strd	r3, r0, [r5, #8]
   88c72:	6085      	str	r5, [r0, #8]
   88c74:	4630      	mov	r0, r6
   88c76:	60dd      	str	r5, [r3, #12]
   88c78:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   88c7c:	f000 bb7a 	b.w	89374 <__malloc_unlock>
   88c80:	18c2      	adds	r2, r0, r3
   88c82:	6852      	ldr	r2, [r2, #4]
   88c84:	07d2      	lsls	r2, r2, #31
   88c86:	d463      	bmi.n	88d50 <_free_r+0x1e8>
   88c88:	440b      	add	r3, r1
   88c8a:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   88c8e:	60ca      	str	r2, [r1, #12]
   88c90:	6091      	str	r1, [r2, #8]
   88c92:	f043 0201 	orr.w	r2, r3, #1
   88c96:	606a      	str	r2, [r5, #4]
   88c98:	4630      	mov	r0, r6
   88c9a:	50eb      	str	r3, [r5, r3]
   88c9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   88ca0:	f000 bb68 	b.w	89374 <__malloc_unlock>
   88ca4:	440b      	add	r3, r1
   88ca6:	07d1      	lsls	r1, r2, #31
   88ca8:	d407      	bmi.n	88cba <_free_r+0x152>
   88caa:	f854 2c08 	ldr.w	r2, [r4, #-8]
   88cae:	1aad      	subs	r5, r5, r2
   88cb0:	4413      	add	r3, r2
   88cb2:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   88cb6:	60ca      	str	r2, [r1, #12]
   88cb8:	6091      	str	r1, [r2, #8]
   88cba:	f043 0201 	orr.w	r2, r3, #1
   88cbe:	606a      	str	r2, [r5, #4]
   88cc0:	4a27      	ldr	r2, [pc, #156]	; (88d60 <_free_r+0x1f8>)
   88cc2:	60bd      	str	r5, [r7, #8]
   88cc4:	6812      	ldr	r2, [r2, #0]
   88cc6:	429a      	cmp	r2, r3
   88cc8:	d898      	bhi.n	88bfc <_free_r+0x94>
   88cca:	4b26      	ldr	r3, [pc, #152]	; (88d64 <_free_r+0x1fc>)
   88ccc:	4630      	mov	r0, r6
   88cce:	6819      	ldr	r1, [r3, #0]
   88cd0:	f7ff fefa 	bl	88ac8 <_malloc_trim_r>
   88cd4:	e792      	b.n	88bfc <_free_r+0x94>
   88cd6:	2b14      	cmp	r3, #20
   88cd8:	d90a      	bls.n	88cf0 <_free_r+0x188>
   88cda:	2b54      	cmp	r3, #84	; 0x54
   88cdc:	d81f      	bhi.n	88d1e <_free_r+0x1b6>
   88cde:	0b0b      	lsrs	r3, r1, #12
   88ce0:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   88ce4:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   88ce8:	00c3      	lsls	r3, r0, #3
   88cea:	e7b2      	b.n	88c52 <_free_r+0xea>
   88cec:	4419      	add	r1, r3
   88cee:	e791      	b.n	88c14 <_free_r+0xac>
   88cf0:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   88cf4:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   88cf8:	00c3      	lsls	r3, r0, #3
   88cfa:	e7aa      	b.n	88c52 <_free_r+0xea>
   88cfc:	f041 0301 	orr.w	r3, r1, #1
   88d00:	e9c7 5504 	strd	r5, r5, [r7, #16]
   88d04:	e9c5 4402 	strd	r4, r4, [r5, #8]
   88d08:	606b      	str	r3, [r5, #4]
   88d0a:	5069      	str	r1, [r5, r1]
   88d0c:	e776      	b.n	88bfc <_free_r+0x94>
   88d0e:	2101      	movs	r1, #1
   88d10:	1092      	asrs	r2, r2, #2
   88d12:	fa01 f202 	lsl.w	r2, r1, r2
   88d16:	6879      	ldr	r1, [r7, #4]
   88d18:	430a      	orrs	r2, r1
   88d1a:	607a      	str	r2, [r7, #4]
   88d1c:	e7a7      	b.n	88c6e <_free_r+0x106>
   88d1e:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   88d22:	d806      	bhi.n	88d32 <_free_r+0x1ca>
   88d24:	0bcb      	lsrs	r3, r1, #15
   88d26:	f103 0078 	add.w	r0, r3, #120	; 0x78
   88d2a:	f103 0277 	add.w	r2, r3, #119	; 0x77
   88d2e:	00c3      	lsls	r3, r0, #3
   88d30:	e78f      	b.n	88c52 <_free_r+0xea>
   88d32:	f240 5254 	movw	r2, #1364	; 0x554
   88d36:	4293      	cmp	r3, r2
   88d38:	d806      	bhi.n	88d48 <_free_r+0x1e0>
   88d3a:	0c8b      	lsrs	r3, r1, #18
   88d3c:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   88d40:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   88d44:	00c3      	lsls	r3, r0, #3
   88d46:	e784      	b.n	88c52 <_free_r+0xea>
   88d48:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   88d4c:	227e      	movs	r2, #126	; 0x7e
   88d4e:	e780      	b.n	88c52 <_free_r+0xea>
   88d50:	f041 0301 	orr.w	r3, r1, #1
   88d54:	606b      	str	r3, [r5, #4]
   88d56:	6001      	str	r1, [r0, #0]
   88d58:	e750      	b.n	88bfc <_free_r+0x94>
   88d5a:	bf00      	nop
   88d5c:	20070f64 	.word	0x20070f64
   88d60:	20071370 	.word	0x20071370
   88d64:	2007334c 	.word	0x2007334c

00088d68 <_localeconv_r>:
   88d68:	4800      	ldr	r0, [pc, #0]	; (88d6c <_localeconv_r+0x4>)
   88d6a:	4770      	bx	lr
   88d6c:	20071464 	.word	0x20071464

00088d70 <__retarget_lock_init_recursive>:
   88d70:	4770      	bx	lr
   88d72:	bf00      	nop

00088d74 <__retarget_lock_close_recursive>:
   88d74:	4770      	bx	lr
   88d76:	bf00      	nop

00088d78 <__retarget_lock_acquire_recursive>:
   88d78:	4770      	bx	lr
   88d7a:	bf00      	nop

00088d7c <__retarget_lock_release_recursive>:
   88d7c:	4770      	bx	lr
   88d7e:	bf00      	nop

00088d80 <_malloc_r>:
   88d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88d84:	f101 050b 	add.w	r5, r1, #11
   88d88:	2d16      	cmp	r5, #22
   88d8a:	4606      	mov	r6, r0
   88d8c:	b083      	sub	sp, #12
   88d8e:	d825      	bhi.n	88ddc <_malloc_r+0x5c>
   88d90:	2910      	cmp	r1, #16
   88d92:	f200 80b8 	bhi.w	88f06 <_malloc_r+0x186>
   88d96:	f000 fae7 	bl	89368 <__malloc_lock>
   88d9a:	2510      	movs	r5, #16
   88d9c:	2218      	movs	r2, #24
   88d9e:	f04f 0c02 	mov.w	ip, #2
   88da2:	4fb5      	ldr	r7, [pc, #724]	; (89078 <_malloc_r+0x2f8>)
   88da4:	443a      	add	r2, r7
   88da6:	6853      	ldr	r3, [r2, #4]
   88da8:	f1a2 0108 	sub.w	r1, r2, #8
   88dac:	428b      	cmp	r3, r1
   88dae:	f000 80b7 	beq.w	88f20 <_malloc_r+0x1a0>
   88db2:	685a      	ldr	r2, [r3, #4]
   88db4:	68d9      	ldr	r1, [r3, #12]
   88db6:	f022 0203 	bic.w	r2, r2, #3
   88dba:	441a      	add	r2, r3
   88dbc:	689c      	ldr	r4, [r3, #8]
   88dbe:	4630      	mov	r0, r6
   88dc0:	60e1      	str	r1, [r4, #12]
   88dc2:	608c      	str	r4, [r1, #8]
   88dc4:	6851      	ldr	r1, [r2, #4]
   88dc6:	f103 0408 	add.w	r4, r3, #8
   88dca:	f041 0101 	orr.w	r1, r1, #1
   88dce:	6051      	str	r1, [r2, #4]
   88dd0:	f000 fad0 	bl	89374 <__malloc_unlock>
   88dd4:	4620      	mov	r0, r4
   88dd6:	b003      	add	sp, #12
   88dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88ddc:	f035 0507 	bics.w	r5, r5, #7
   88de0:	f100 8091 	bmi.w	88f06 <_malloc_r+0x186>
   88de4:	42a9      	cmp	r1, r5
   88de6:	f200 808e 	bhi.w	88f06 <_malloc_r+0x186>
   88dea:	f000 fabd 	bl	89368 <__malloc_lock>
   88dee:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   88df2:	f0c0 8194 	bcc.w	8911e <_malloc_r+0x39e>
   88df6:	0a6b      	lsrs	r3, r5, #9
   88df8:	f000 808c 	beq.w	88f14 <_malloc_r+0x194>
   88dfc:	2b04      	cmp	r3, #4
   88dfe:	f200 816a 	bhi.w	890d6 <_malloc_r+0x356>
   88e02:	09ab      	lsrs	r3, r5, #6
   88e04:	f103 0c39 	add.w	ip, r3, #57	; 0x39
   88e08:	f103 0438 	add.w	r4, r3, #56	; 0x38
   88e0c:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   88e10:	4f99      	ldr	r7, [pc, #612]	; (89078 <_malloc_r+0x2f8>)
   88e12:	4438      	add	r0, r7
   88e14:	6843      	ldr	r3, [r0, #4]
   88e16:	3808      	subs	r0, #8
   88e18:	4298      	cmp	r0, r3
   88e1a:	d106      	bne.n	88e2a <_malloc_r+0xaa>
   88e1c:	e00c      	b.n	88e38 <_malloc_r+0xb8>
   88e1e:	2900      	cmp	r1, #0
   88e20:	f280 8126 	bge.w	89070 <_malloc_r+0x2f0>
   88e24:	68db      	ldr	r3, [r3, #12]
   88e26:	4298      	cmp	r0, r3
   88e28:	d006      	beq.n	88e38 <_malloc_r+0xb8>
   88e2a:	685a      	ldr	r2, [r3, #4]
   88e2c:	f022 0203 	bic.w	r2, r2, #3
   88e30:	1b51      	subs	r1, r2, r5
   88e32:	290f      	cmp	r1, #15
   88e34:	ddf3      	ble.n	88e1e <_malloc_r+0x9e>
   88e36:	46a4      	mov	ip, r4
   88e38:	693c      	ldr	r4, [r7, #16]
   88e3a:	f8df e240 	ldr.w	lr, [pc, #576]	; 8907c <_malloc_r+0x2fc>
   88e3e:	4574      	cmp	r4, lr
   88e40:	d07a      	beq.n	88f38 <_malloc_r+0x1b8>
   88e42:	6862      	ldr	r2, [r4, #4]
   88e44:	f022 0203 	bic.w	r2, r2, #3
   88e48:	1b53      	subs	r3, r2, r5
   88e4a:	2b0f      	cmp	r3, #15
   88e4c:	f300 8176 	bgt.w	8913c <_malloc_r+0x3bc>
   88e50:	2b00      	cmp	r3, #0
   88e52:	e9c7 ee04 	strd	lr, lr, [r7, #16]
   88e56:	f280 8167 	bge.w	89128 <_malloc_r+0x3a8>
   88e5a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   88e5e:	f080 8119 	bcs.w	89094 <_malloc_r+0x314>
   88e62:	2101      	movs	r1, #1
   88e64:	08d3      	lsrs	r3, r2, #3
   88e66:	0952      	lsrs	r2, r2, #5
   88e68:	440b      	add	r3, r1
   88e6a:	4091      	lsls	r1, r2
   88e6c:	687a      	ldr	r2, [r7, #4]
   88e6e:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
   88e72:	430a      	orrs	r2, r1
   88e74:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   88e78:	3908      	subs	r1, #8
   88e7a:	60a0      	str	r0, [r4, #8]
   88e7c:	60e1      	str	r1, [r4, #12]
   88e7e:	607a      	str	r2, [r7, #4]
   88e80:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   88e84:	60c4      	str	r4, [r0, #12]
   88e86:	2101      	movs	r1, #1
   88e88:	ea4f 03ac 	mov.w	r3, ip, asr #2
   88e8c:	4099      	lsls	r1, r3
   88e8e:	4291      	cmp	r1, r2
   88e90:	d859      	bhi.n	88f46 <_malloc_r+0x1c6>
   88e92:	4211      	tst	r1, r2
   88e94:	d106      	bne.n	88ea4 <_malloc_r+0x124>
   88e96:	f02c 0c03 	bic.w	ip, ip, #3
   88e9a:	0049      	lsls	r1, r1, #1
   88e9c:	4211      	tst	r1, r2
   88e9e:	f10c 0c04 	add.w	ip, ip, #4
   88ea2:	d0fa      	beq.n	88e9a <_malloc_r+0x11a>
   88ea4:	eb07 09cc 	add.w	r9, r7, ip, lsl #3
   88ea8:	4648      	mov	r0, r9
   88eaa:	4664      	mov	r4, ip
   88eac:	f8d0 800c 	ldr.w	r8, [r0, #12]
   88eb0:	4540      	cmp	r0, r8
   88eb2:	d108      	bne.n	88ec6 <_malloc_r+0x146>
   88eb4:	e11c      	b.n	890f0 <_malloc_r+0x370>
   88eb6:	2b00      	cmp	r3, #0
   88eb8:	f280 8121 	bge.w	890fe <_malloc_r+0x37e>
   88ebc:	f8d8 800c 	ldr.w	r8, [r8, #12]
   88ec0:	4540      	cmp	r0, r8
   88ec2:	f000 8115 	beq.w	890f0 <_malloc_r+0x370>
   88ec6:	f8d8 2004 	ldr.w	r2, [r8, #4]
   88eca:	f022 0203 	bic.w	r2, r2, #3
   88ece:	1b53      	subs	r3, r2, r5
   88ed0:	2b0f      	cmp	r3, #15
   88ed2:	ddf0      	ble.n	88eb6 <_malloc_r+0x136>
   88ed4:	eb08 0105 	add.w	r1, r8, r5
   88ed8:	f045 0501 	orr.w	r5, r5, #1
   88edc:	f8c8 5004 	str.w	r5, [r8, #4]
   88ee0:	4630      	mov	r0, r6
   88ee2:	e9d8 6402 	ldrd	r6, r4, [r8, #8]
   88ee6:	60f4      	str	r4, [r6, #12]
   88ee8:	60a6      	str	r6, [r4, #8]
   88eea:	f043 0401 	orr.w	r4, r3, #1
   88eee:	e9c7 1104 	strd	r1, r1, [r7, #16]
   88ef2:	604c      	str	r4, [r1, #4]
   88ef4:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   88ef8:	f848 3002 	str.w	r3, [r8, r2]
   88efc:	f000 fa3a 	bl	89374 <__malloc_unlock>
   88f00:	f108 0408 	add.w	r4, r8, #8
   88f04:	e002      	b.n	88f0c <_malloc_r+0x18c>
   88f06:	230c      	movs	r3, #12
   88f08:	2400      	movs	r4, #0
   88f0a:	6033      	str	r3, [r6, #0]
   88f0c:	4620      	mov	r0, r4
   88f0e:	b003      	add	sp, #12
   88f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88f14:	f44f 7000 	mov.w	r0, #512	; 0x200
   88f18:	f04f 0c40 	mov.w	ip, #64	; 0x40
   88f1c:	243f      	movs	r4, #63	; 0x3f
   88f1e:	e777      	b.n	88e10 <_malloc_r+0x90>
   88f20:	68d3      	ldr	r3, [r2, #12]
   88f22:	429a      	cmp	r2, r3
   88f24:	bf08      	it	eq
   88f26:	f10c 0c02 	addeq.w	ip, ip, #2
   88f2a:	f47f af42 	bne.w	88db2 <_malloc_r+0x32>
   88f2e:	693c      	ldr	r4, [r7, #16]
   88f30:	f8df e148 	ldr.w	lr, [pc, #328]	; 8907c <_malloc_r+0x2fc>
   88f34:	4574      	cmp	r4, lr
   88f36:	d184      	bne.n	88e42 <_malloc_r+0xc2>
   88f38:	2101      	movs	r1, #1
   88f3a:	687a      	ldr	r2, [r7, #4]
   88f3c:	ea4f 03ac 	mov.w	r3, ip, asr #2
   88f40:	4099      	lsls	r1, r3
   88f42:	4291      	cmp	r1, r2
   88f44:	d9a5      	bls.n	88e92 <_malloc_r+0x112>
   88f46:	68bc      	ldr	r4, [r7, #8]
   88f48:	6863      	ldr	r3, [r4, #4]
   88f4a:	f023 0903 	bic.w	r9, r3, #3
   88f4e:	454d      	cmp	r5, r9
   88f50:	d803      	bhi.n	88f5a <_malloc_r+0x1da>
   88f52:	eba9 0305 	sub.w	r3, r9, r5
   88f56:	2b0f      	cmp	r3, #15
   88f58:	dc7a      	bgt.n	89050 <_malloc_r+0x2d0>
   88f5a:	f8df b124 	ldr.w	fp, [pc, #292]	; 89080 <_malloc_r+0x300>
   88f5e:	4b49      	ldr	r3, [pc, #292]	; (89084 <_malloc_r+0x304>)
   88f60:	f8db 2000 	ldr.w	r2, [fp]
   88f64:	681b      	ldr	r3, [r3, #0]
   88f66:	3201      	adds	r2, #1
   88f68:	442b      	add	r3, r5
   88f6a:	eb04 0a09 	add.w	sl, r4, r9
   88f6e:	f000 812f 	beq.w	891d0 <_malloc_r+0x450>
   88f72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   88f76:	330f      	adds	r3, #15
   88f78:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   88f7c:	f028 080f 	bic.w	r8, r8, #15
   88f80:	4641      	mov	r1, r8
   88f82:	4630      	mov	r0, r6
   88f84:	f000 fdd8 	bl	89b38 <_sbrk_r>
   88f88:	1c41      	adds	r1, r0, #1
   88f8a:	4602      	mov	r2, r0
   88f8c:	f000 80ef 	beq.w	8916e <_malloc_r+0x3ee>
   88f90:	4582      	cmp	sl, r0
   88f92:	f200 80ea 	bhi.w	8916a <_malloc_r+0x3ea>
   88f96:	4b3c      	ldr	r3, [pc, #240]	; (89088 <_malloc_r+0x308>)
   88f98:	6819      	ldr	r1, [r3, #0]
   88f9a:	4441      	add	r1, r8
   88f9c:	4608      	mov	r0, r1
   88f9e:	6019      	str	r1, [r3, #0]
   88fa0:	f000 8149 	beq.w	89236 <_malloc_r+0x4b6>
   88fa4:	f8db 1000 	ldr.w	r1, [fp]
   88fa8:	9301      	str	r3, [sp, #4]
   88faa:	3101      	adds	r1, #1
   88fac:	bf1b      	ittet	ne
   88fae:	eba2 0a0a 	subne.w	sl, r2, sl
   88fb2:	4450      	addne	r0, sl
   88fb4:	f8cb 2000 	streq.w	r2, [fp]
   88fb8:	6018      	strne	r0, [r3, #0]
   88fba:	f012 0b07 	ands.w	fp, r2, #7
   88fbe:	f000 8111 	beq.w	891e4 <_malloc_r+0x464>
   88fc2:	f1cb 0108 	rsb	r1, fp, #8
   88fc6:	440a      	add	r2, r1
   88fc8:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   88fcc:	4490      	add	r8, r2
   88fce:	3108      	adds	r1, #8
   88fd0:	eba1 0108 	sub.w	r1, r1, r8
   88fd4:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   88fd8:	4651      	mov	r1, sl
   88fda:	4630      	mov	r0, r6
   88fdc:	9200      	str	r2, [sp, #0]
   88fde:	f000 fdab 	bl	89b38 <_sbrk_r>
   88fe2:	1c42      	adds	r2, r0, #1
   88fe4:	e9dd 2300 	ldrd	r2, r3, [sp]
   88fe8:	f000 814b 	beq.w	89282 <_malloc_r+0x502>
   88fec:	1a80      	subs	r0, r0, r2
   88fee:	eb00 080a 	add.w	r8, r0, sl
   88ff2:	6819      	ldr	r1, [r3, #0]
   88ff4:	f048 0001 	orr.w	r0, r8, #1
   88ff8:	4451      	add	r1, sl
   88ffa:	42bc      	cmp	r4, r7
   88ffc:	60ba      	str	r2, [r7, #8]
   88ffe:	6019      	str	r1, [r3, #0]
   89000:	6050      	str	r0, [r2, #4]
   89002:	f000 8124 	beq.w	8924e <_malloc_r+0x4ce>
   89006:	f1b9 0f0f 	cmp.w	r9, #15
   8900a:	f240 8122 	bls.w	89252 <_malloc_r+0x4d2>
   8900e:	f04f 0e05 	mov.w	lr, #5
   89012:	6860      	ldr	r0, [r4, #4]
   89014:	f1a9 0c0c 	sub.w	ip, r9, #12
   89018:	f02c 0c07 	bic.w	ip, ip, #7
   8901c:	f000 0001 	and.w	r0, r0, #1
   89020:	ea40 000c 	orr.w	r0, r0, ip
   89024:	6060      	str	r0, [r4, #4]
   89026:	f1bc 0f0f 	cmp.w	ip, #15
   8902a:	eb04 000c 	add.w	r0, r4, ip
   8902e:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   89032:	f200 812e 	bhi.w	89292 <_malloc_r+0x512>
   89036:	4614      	mov	r4, r2
   89038:	6850      	ldr	r0, [r2, #4]
   8903a:	4b14      	ldr	r3, [pc, #80]	; (8908c <_malloc_r+0x30c>)
   8903c:	681a      	ldr	r2, [r3, #0]
   8903e:	428a      	cmp	r2, r1
   89040:	bf38      	it	cc
   89042:	6019      	strcc	r1, [r3, #0]
   89044:	4b12      	ldr	r3, [pc, #72]	; (89090 <_malloc_r+0x310>)
   89046:	681a      	ldr	r2, [r3, #0]
   89048:	428a      	cmp	r2, r1
   8904a:	bf38      	it	cc
   8904c:	6019      	strcc	r1, [r3, #0]
   8904e:	e090      	b.n	89172 <_malloc_r+0x3f2>
   89050:	1962      	adds	r2, r4, r5
   89052:	f043 0301 	orr.w	r3, r3, #1
   89056:	f045 0501 	orr.w	r5, r5, #1
   8905a:	6065      	str	r5, [r4, #4]
   8905c:	4630      	mov	r0, r6
   8905e:	60ba      	str	r2, [r7, #8]
   89060:	3408      	adds	r4, #8
   89062:	6053      	str	r3, [r2, #4]
   89064:	f000 f986 	bl	89374 <__malloc_unlock>
   89068:	4620      	mov	r0, r4
   8906a:	b003      	add	sp, #12
   8906c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89070:	68d9      	ldr	r1, [r3, #12]
   89072:	441a      	add	r2, r3
   89074:	e6a2      	b.n	88dbc <_malloc_r+0x3c>
   89076:	bf00      	nop
   89078:	20070f64 	.word	0x20070f64
   8907c:	20070f6c 	.word	0x20070f6c
   89080:	2007136c 	.word	0x2007136c
   89084:	2007334c 	.word	0x2007334c
   89088:	2007331c 	.word	0x2007331c
   8908c:	20073344 	.word	0x20073344
   89090:	20073348 	.word	0x20073348
   89094:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   89098:	ea4f 2352 	mov.w	r3, r2, lsr #9
   8909c:	d35f      	bcc.n	8915e <_malloc_r+0x3de>
   8909e:	2b14      	cmp	r3, #20
   890a0:	f200 80b1 	bhi.w	89206 <_malloc_r+0x486>
   890a4:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   890a8:	00c9      	lsls	r1, r1, #3
   890aa:	335b      	adds	r3, #91	; 0x5b
   890ac:	1878      	adds	r0, r7, r1
   890ae:	5879      	ldr	r1, [r7, r1]
   890b0:	3808      	subs	r0, #8
   890b2:	4288      	cmp	r0, r1
   890b4:	f000 808f 	beq.w	891d6 <_malloc_r+0x456>
   890b8:	684b      	ldr	r3, [r1, #4]
   890ba:	f023 0303 	bic.w	r3, r3, #3
   890be:	4293      	cmp	r3, r2
   890c0:	d902      	bls.n	890c8 <_malloc_r+0x348>
   890c2:	6889      	ldr	r1, [r1, #8]
   890c4:	4288      	cmp	r0, r1
   890c6:	d1f7      	bne.n	890b8 <_malloc_r+0x338>
   890c8:	68c8      	ldr	r0, [r1, #12]
   890ca:	687a      	ldr	r2, [r7, #4]
   890cc:	e9c4 1002 	strd	r1, r0, [r4, #8]
   890d0:	6084      	str	r4, [r0, #8]
   890d2:	60cc      	str	r4, [r1, #12]
   890d4:	e6d7      	b.n	88e86 <_malloc_r+0x106>
   890d6:	2b14      	cmp	r3, #20
   890d8:	d959      	bls.n	8918e <_malloc_r+0x40e>
   890da:	2b54      	cmp	r3, #84	; 0x54
   890dc:	f200 809b 	bhi.w	89216 <_malloc_r+0x496>
   890e0:	0b2b      	lsrs	r3, r5, #12
   890e2:	f103 0c6f 	add.w	ip, r3, #111	; 0x6f
   890e6:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   890ea:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   890ee:	e68f      	b.n	88e10 <_malloc_r+0x90>
   890f0:	3401      	adds	r4, #1
   890f2:	07a3      	lsls	r3, r4, #30
   890f4:	f100 0008 	add.w	r0, r0, #8
   890f8:	f47f aed8 	bne.w	88eac <_malloc_r+0x12c>
   890fc:	e053      	b.n	891a6 <_malloc_r+0x426>
   890fe:	4644      	mov	r4, r8
   89100:	4442      	add	r2, r8
   89102:	6853      	ldr	r3, [r2, #4]
   89104:	f8d8 100c 	ldr.w	r1, [r8, #12]
   89108:	f043 0301 	orr.w	r3, r3, #1
   8910c:	6053      	str	r3, [r2, #4]
   8910e:	f854 3f08 	ldr.w	r3, [r4, #8]!
   89112:	4630      	mov	r0, r6
   89114:	60d9      	str	r1, [r3, #12]
   89116:	608b      	str	r3, [r1, #8]
   89118:	f000 f92c 	bl	89374 <__malloc_unlock>
   8911c:	e6f6      	b.n	88f0c <_malloc_r+0x18c>
   8911e:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   89122:	f105 0208 	add.w	r2, r5, #8
   89126:	e63c      	b.n	88da2 <_malloc_r+0x22>
   89128:	4422      	add	r2, r4
   8912a:	6853      	ldr	r3, [r2, #4]
   8912c:	4630      	mov	r0, r6
   8912e:	f043 0301 	orr.w	r3, r3, #1
   89132:	6053      	str	r3, [r2, #4]
   89134:	f000 f91e 	bl	89374 <__malloc_unlock>
   89138:	3408      	adds	r4, #8
   8913a:	e6e7      	b.n	88f0c <_malloc_r+0x18c>
   8913c:	1961      	adds	r1, r4, r5
   8913e:	f045 0501 	orr.w	r5, r5, #1
   89142:	6065      	str	r5, [r4, #4]
   89144:	f043 0501 	orr.w	r5, r3, #1
   89148:	e9c7 1104 	strd	r1, r1, [r7, #16]
   8914c:	4630      	mov	r0, r6
   8914e:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   89152:	604d      	str	r5, [r1, #4]
   89154:	50a3      	str	r3, [r4, r2]
   89156:	f000 f90d 	bl	89374 <__malloc_unlock>
   8915a:	3408      	adds	r4, #8
   8915c:	e6d6      	b.n	88f0c <_malloc_r+0x18c>
   8915e:	0993      	lsrs	r3, r2, #6
   89160:	f103 0139 	add.w	r1, r3, #57	; 0x39
   89164:	00c9      	lsls	r1, r1, #3
   89166:	3338      	adds	r3, #56	; 0x38
   89168:	e7a0      	b.n	890ac <_malloc_r+0x32c>
   8916a:	42bc      	cmp	r4, r7
   8916c:	d05e      	beq.n	8922c <_malloc_r+0x4ac>
   8916e:	68bc      	ldr	r4, [r7, #8]
   89170:	6860      	ldr	r0, [r4, #4]
   89172:	f020 0803 	bic.w	r8, r0, #3
   89176:	4545      	cmp	r5, r8
   89178:	eba8 0305 	sub.w	r3, r8, r5
   8917c:	d802      	bhi.n	89184 <_malloc_r+0x404>
   8917e:	2b0f      	cmp	r3, #15
   89180:	f73f af66 	bgt.w	89050 <_malloc_r+0x2d0>
   89184:	4630      	mov	r0, r6
   89186:	f000 f8f5 	bl	89374 <__malloc_unlock>
   8918a:	2400      	movs	r4, #0
   8918c:	e6be      	b.n	88f0c <_malloc_r+0x18c>
   8918e:	f103 0c5c 	add.w	ip, r3, #92	; 0x5c
   89192:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   89196:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8919a:	e639      	b.n	88e10 <_malloc_r+0x90>
   8919c:	f859 3908 	ldr.w	r3, [r9], #-8
   891a0:	454b      	cmp	r3, r9
   891a2:	f040 8095 	bne.w	892d0 <_malloc_r+0x550>
   891a6:	f01c 0f03 	tst.w	ip, #3
   891aa:	f10c 3cff 	add.w	ip, ip, #4294967295
   891ae:	d1f5      	bne.n	8919c <_malloc_r+0x41c>
   891b0:	687b      	ldr	r3, [r7, #4]
   891b2:	ea23 0301 	bic.w	r3, r3, r1
   891b6:	607b      	str	r3, [r7, #4]
   891b8:	0049      	lsls	r1, r1, #1
   891ba:	4299      	cmp	r1, r3
   891bc:	f63f aec3 	bhi.w	88f46 <_malloc_r+0x1c6>
   891c0:	b911      	cbnz	r1, 891c8 <_malloc_r+0x448>
   891c2:	e6c0      	b.n	88f46 <_malloc_r+0x1c6>
   891c4:	0049      	lsls	r1, r1, #1
   891c6:	3404      	adds	r4, #4
   891c8:	4219      	tst	r1, r3
   891ca:	d0fb      	beq.n	891c4 <_malloc_r+0x444>
   891cc:	46a4      	mov	ip, r4
   891ce:	e669      	b.n	88ea4 <_malloc_r+0x124>
   891d0:	f103 0810 	add.w	r8, r3, #16
   891d4:	e6d4      	b.n	88f80 <_malloc_r+0x200>
   891d6:	2201      	movs	r2, #1
   891d8:	109b      	asrs	r3, r3, #2
   891da:	409a      	lsls	r2, r3
   891dc:	687b      	ldr	r3, [r7, #4]
   891de:	431a      	orrs	r2, r3
   891e0:	607a      	str	r2, [r7, #4]
   891e2:	e773      	b.n	890cc <_malloc_r+0x34c>
   891e4:	eb02 0108 	add.w	r1, r2, r8
   891e8:	4249      	negs	r1, r1
   891ea:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   891ee:	4651      	mov	r1, sl
   891f0:	4630      	mov	r0, r6
   891f2:	9200      	str	r2, [sp, #0]
   891f4:	f000 fca0 	bl	89b38 <_sbrk_r>
   891f8:	1c43      	adds	r3, r0, #1
   891fa:	e9dd 2300 	ldrd	r2, r3, [sp]
   891fe:	f47f aef5 	bne.w	88fec <_malloc_r+0x26c>
   89202:	46da      	mov	sl, fp
   89204:	e6f5      	b.n	88ff2 <_malloc_r+0x272>
   89206:	2b54      	cmp	r3, #84	; 0x54
   89208:	d826      	bhi.n	89258 <_malloc_r+0x4d8>
   8920a:	0b13      	lsrs	r3, r2, #12
   8920c:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   89210:	00c9      	lsls	r1, r1, #3
   89212:	336e      	adds	r3, #110	; 0x6e
   89214:	e74a      	b.n	890ac <_malloc_r+0x32c>
   89216:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8921a:	d826      	bhi.n	8926a <_malloc_r+0x4ea>
   8921c:	0beb      	lsrs	r3, r5, #15
   8921e:	f103 0c78 	add.w	ip, r3, #120	; 0x78
   89222:	f103 0477 	add.w	r4, r3, #119	; 0x77
   89226:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   8922a:	e5f1      	b.n	88e10 <_malloc_r+0x90>
   8922c:	4b29      	ldr	r3, [pc, #164]	; (892d4 <_malloc_r+0x554>)
   8922e:	6818      	ldr	r0, [r3, #0]
   89230:	4440      	add	r0, r8
   89232:	6018      	str	r0, [r3, #0]
   89234:	e6b6      	b.n	88fa4 <_malloc_r+0x224>
   89236:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   8923a:	f1bc 0f00 	cmp.w	ip, #0
   8923e:	f47f aeb1 	bne.w	88fa4 <_malloc_r+0x224>
   89242:	68bc      	ldr	r4, [r7, #8]
   89244:	44c8      	add	r8, r9
   89246:	f048 0001 	orr.w	r0, r8, #1
   8924a:	6060      	str	r0, [r4, #4]
   8924c:	e6f5      	b.n	8903a <_malloc_r+0x2ba>
   8924e:	4614      	mov	r4, r2
   89250:	e6f3      	b.n	8903a <_malloc_r+0x2ba>
   89252:	2301      	movs	r3, #1
   89254:	6053      	str	r3, [r2, #4]
   89256:	e795      	b.n	89184 <_malloc_r+0x404>
   89258:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8925c:	d824      	bhi.n	892a8 <_malloc_r+0x528>
   8925e:	0bd3      	lsrs	r3, r2, #15
   89260:	f103 0178 	add.w	r1, r3, #120	; 0x78
   89264:	00c9      	lsls	r1, r1, #3
   89266:	3377      	adds	r3, #119	; 0x77
   89268:	e720      	b.n	890ac <_malloc_r+0x32c>
   8926a:	f240 5254 	movw	r2, #1364	; 0x554
   8926e:	4293      	cmp	r3, r2
   89270:	d824      	bhi.n	892bc <_malloc_r+0x53c>
   89272:	0cab      	lsrs	r3, r5, #18
   89274:	f103 0c7d 	add.w	ip, r3, #125	; 0x7d
   89278:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   8927c:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   89280:	e5c6      	b.n	88e10 <_malloc_r+0x90>
   89282:	f1ab 0b08 	sub.w	fp, fp, #8
   89286:	44d8      	add	r8, fp
   89288:	f04f 0a00 	mov.w	sl, #0
   8928c:	eba8 0802 	sub.w	r8, r8, r2
   89290:	e6af      	b.n	88ff2 <_malloc_r+0x272>
   89292:	f104 0108 	add.w	r1, r4, #8
   89296:	4630      	mov	r0, r6
   89298:	9300      	str	r3, [sp, #0]
   8929a:	f7ff fc65 	bl	88b68 <_free_r>
   8929e:	68bc      	ldr	r4, [r7, #8]
   892a0:	9b00      	ldr	r3, [sp, #0]
   892a2:	6860      	ldr	r0, [r4, #4]
   892a4:	6819      	ldr	r1, [r3, #0]
   892a6:	e6c8      	b.n	8903a <_malloc_r+0x2ba>
   892a8:	f240 5154 	movw	r1, #1364	; 0x554
   892ac:	428b      	cmp	r3, r1
   892ae:	d80b      	bhi.n	892c8 <_malloc_r+0x548>
   892b0:	0c93      	lsrs	r3, r2, #18
   892b2:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   892b6:	00c9      	lsls	r1, r1, #3
   892b8:	337c      	adds	r3, #124	; 0x7c
   892ba:	e6f7      	b.n	890ac <_malloc_r+0x32c>
   892bc:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
   892c0:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
   892c4:	247e      	movs	r4, #126	; 0x7e
   892c6:	e5a3      	b.n	88e10 <_malloc_r+0x90>
   892c8:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   892cc:	237e      	movs	r3, #126	; 0x7e
   892ce:	e6ed      	b.n	890ac <_malloc_r+0x32c>
   892d0:	687b      	ldr	r3, [r7, #4]
   892d2:	e771      	b.n	891b8 <_malloc_r+0x438>
   892d4:	2007331c 	.word	0x2007331c

000892d8 <memchr>:
   892d8:	fa5f fc81 	uxtb.w	ip, r1
   892dc:	0781      	lsls	r1, r0, #30
   892de:	d010      	beq.n	89302 <memchr+0x2a>
   892e0:	4603      	mov	r3, r0
   892e2:	1e51      	subs	r1, r2, #1
   892e4:	b92a      	cbnz	r2, 892f2 <memchr+0x1a>
   892e6:	e00a      	b.n	892fe <memchr+0x26>
   892e8:	079a      	lsls	r2, r3, #30
   892ea:	4618      	mov	r0, r3
   892ec:	d00a      	beq.n	89304 <memchr+0x2c>
   892ee:	3901      	subs	r1, #1
   892f0:	d305      	bcc.n	892fe <memchr+0x26>
   892f2:	4618      	mov	r0, r3
   892f4:	f813 2b01 	ldrb.w	r2, [r3], #1
   892f8:	4562      	cmp	r2, ip
   892fa:	d1f5      	bne.n	892e8 <memchr+0x10>
   892fc:	4770      	bx	lr
   892fe:	2000      	movs	r0, #0
   89300:	4770      	bx	lr
   89302:	4611      	mov	r1, r2
   89304:	2903      	cmp	r1, #3
   89306:	d80c      	bhi.n	89322 <memchr+0x4a>
   89308:	2900      	cmp	r1, #0
   8930a:	d0f8      	beq.n	892fe <memchr+0x26>
   8930c:	4603      	mov	r3, r0
   8930e:	4401      	add	r1, r0
   89310:	e001      	b.n	89316 <memchr+0x3e>
   89312:	428b      	cmp	r3, r1
   89314:	d0f3      	beq.n	892fe <memchr+0x26>
   89316:	4618      	mov	r0, r3
   89318:	f813 2b01 	ldrb.w	r2, [r3], #1
   8931c:	4562      	cmp	r2, ip
   8931e:	d1f8      	bne.n	89312 <memchr+0x3a>
   89320:	e7ec      	b.n	892fc <memchr+0x24>
   89322:	4602      	mov	r2, r0
   89324:	b510      	push	{r4, lr}
   89326:	ea4c 240c 	orr.w	r4, ip, ip, lsl #8
   8932a:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
   8932e:	4610      	mov	r0, r2
   89330:	6803      	ldr	r3, [r0, #0]
   89332:	3204      	adds	r2, #4
   89334:	4063      	eors	r3, r4
   89336:	f1a3 3e01 	sub.w	lr, r3, #16843009	; 0x1010101
   8933a:	ea2e 0303 	bic.w	r3, lr, r3
   8933e:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   89342:	d104      	bne.n	8934e <memchr+0x76>
   89344:	3904      	subs	r1, #4
   89346:	2903      	cmp	r1, #3
   89348:	4610      	mov	r0, r2
   8934a:	d8f0      	bhi.n	8932e <memchr+0x56>
   8934c:	b151      	cbz	r1, 89364 <memchr+0x8c>
   8934e:	4603      	mov	r3, r0
   89350:	4401      	add	r1, r0
   89352:	e001      	b.n	89358 <memchr+0x80>
   89354:	428b      	cmp	r3, r1
   89356:	d005      	beq.n	89364 <memchr+0x8c>
   89358:	4618      	mov	r0, r3
   8935a:	f813 2b01 	ldrb.w	r2, [r3], #1
   8935e:	4562      	cmp	r2, ip
   89360:	d1f8      	bne.n	89354 <memchr+0x7c>
   89362:	bd10      	pop	{r4, pc}
   89364:	2000      	movs	r0, #0
   89366:	bd10      	pop	{r4, pc}

00089368 <__malloc_lock>:
   89368:	4801      	ldr	r0, [pc, #4]	; (89370 <__malloc_lock+0x8>)
   8936a:	f7ff bd05 	b.w	88d78 <__retarget_lock_acquire_recursive>
   8936e:	bf00      	nop
   89370:	20073310 	.word	0x20073310

00089374 <__malloc_unlock>:
   89374:	4801      	ldr	r0, [pc, #4]	; (8937c <__malloc_unlock+0x8>)
   89376:	f7ff bd01 	b.w	88d7c <__retarget_lock_release_recursive>
   8937a:	bf00      	nop
   8937c:	20073310 	.word	0x20073310

00089380 <_Balloc>:
   89380:	b538      	push	{r3, r4, r5, lr}
   89382:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   89384:	4605      	mov	r5, r0
   89386:	460c      	mov	r4, r1
   89388:	b14b      	cbz	r3, 8939e <_Balloc+0x1e>
   8938a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   8938e:	b180      	cbz	r0, 893b2 <_Balloc+0x32>
   89390:	6802      	ldr	r2, [r0, #0]
   89392:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   89396:	2300      	movs	r3, #0
   89398:	e9c0 3303 	strd	r3, r3, [r0, #12]
   8939c:	bd38      	pop	{r3, r4, r5, pc}
   8939e:	2221      	movs	r2, #33	; 0x21
   893a0:	2104      	movs	r1, #4
   893a2:	f000 fcbf 	bl	89d24 <_calloc_r>
   893a6:	4603      	mov	r3, r0
   893a8:	64e8      	str	r0, [r5, #76]	; 0x4c
   893aa:	2800      	cmp	r0, #0
   893ac:	d1ed      	bne.n	8938a <_Balloc+0xa>
   893ae:	2000      	movs	r0, #0
   893b0:	bd38      	pop	{r3, r4, r5, pc}
   893b2:	2101      	movs	r1, #1
   893b4:	4628      	mov	r0, r5
   893b6:	fa01 f504 	lsl.w	r5, r1, r4
   893ba:	1d6a      	adds	r2, r5, #5
   893bc:	0092      	lsls	r2, r2, #2
   893be:	f000 fcb1 	bl	89d24 <_calloc_r>
   893c2:	2800      	cmp	r0, #0
   893c4:	d0f3      	beq.n	893ae <_Balloc+0x2e>
   893c6:	e9c0 4501 	strd	r4, r5, [r0, #4]
   893ca:	e7e4      	b.n	89396 <_Balloc+0x16>

000893cc <_Bfree>:
   893cc:	b131      	cbz	r1, 893dc <_Bfree+0x10>
   893ce:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   893d0:	684a      	ldr	r2, [r1, #4]
   893d2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   893d6:	6008      	str	r0, [r1, #0]
   893d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   893dc:	4770      	bx	lr
   893de:	bf00      	nop

000893e0 <__multadd>:
   893e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   893e4:	f04f 0e00 	mov.w	lr, #0
   893e8:	460e      	mov	r6, r1
   893ea:	461c      	mov	r4, r3
   893ec:	690d      	ldr	r5, [r1, #16]
   893ee:	4607      	mov	r7, r0
   893f0:	f101 0014 	add.w	r0, r1, #20
   893f4:	6801      	ldr	r1, [r0, #0]
   893f6:	f10e 0e01 	add.w	lr, lr, #1
   893fa:	b28b      	uxth	r3, r1
   893fc:	fb02 4303 	mla	r3, r2, r3, r4
   89400:	0c09      	lsrs	r1, r1, #16
   89402:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   89406:	fb02 cc01 	mla	ip, r2, r1, ip
   8940a:	b29b      	uxth	r3, r3
   8940c:	eb03 430c 	add.w	r3, r3, ip, lsl #16
   89410:	4575      	cmp	r5, lr
   89412:	f840 3b04 	str.w	r3, [r0], #4
   89416:	ea4f 441c 	mov.w	r4, ip, lsr #16
   8941a:	dceb      	bgt.n	893f4 <__multadd+0x14>
   8941c:	b13c      	cbz	r4, 8942e <__multadd+0x4e>
   8941e:	68b3      	ldr	r3, [r6, #8]
   89420:	42ab      	cmp	r3, r5
   89422:	dd07      	ble.n	89434 <__multadd+0x54>
   89424:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   89428:	3501      	adds	r5, #1
   8942a:	615c      	str	r4, [r3, #20]
   8942c:	6135      	str	r5, [r6, #16]
   8942e:	4630      	mov	r0, r6
   89430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89434:	6871      	ldr	r1, [r6, #4]
   89436:	4638      	mov	r0, r7
   89438:	3101      	adds	r1, #1
   8943a:	f7ff ffa1 	bl	89380 <_Balloc>
   8943e:	4680      	mov	r8, r0
   89440:	b1a8      	cbz	r0, 8946e <__multadd+0x8e>
   89442:	6932      	ldr	r2, [r6, #16]
   89444:	f106 010c 	add.w	r1, r6, #12
   89448:	3202      	adds	r2, #2
   8944a:	0092      	lsls	r2, r2, #2
   8944c:	300c      	adds	r0, #12
   8944e:	f7fc fc7b 	bl	85d48 <memcpy>
   89452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   89454:	6872      	ldr	r2, [r6, #4]
   89456:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8945a:	6031      	str	r1, [r6, #0]
   8945c:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   89460:	4646      	mov	r6, r8
   89462:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   89466:	3501      	adds	r5, #1
   89468:	615c      	str	r4, [r3, #20]
   8946a:	6135      	str	r5, [r6, #16]
   8946c:	e7df      	b.n	8942e <__multadd+0x4e>
   8946e:	4602      	mov	r2, r0
   89470:	21b5      	movs	r1, #181	; 0xb5
   89472:	4b02      	ldr	r3, [pc, #8]	; (8947c <__multadd+0x9c>)
   89474:	4802      	ldr	r0, [pc, #8]	; (89480 <__multadd+0xa0>)
   89476:	f000 fc35 	bl	89ce4 <__assert_func>
   8947a:	bf00      	nop
   8947c:	0008cb08 	.word	0x0008cb08
   89480:	0008cb9c 	.word	0x0008cb9c

00089484 <__hi0bits>:
   89484:	0c02      	lsrs	r2, r0, #16
   89486:	0412      	lsls	r2, r2, #16
   89488:	4603      	mov	r3, r0
   8948a:	b9ca      	cbnz	r2, 894c0 <__hi0bits+0x3c>
   8948c:	2010      	movs	r0, #16
   8948e:	4083      	lsls	r3, r0
   89490:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   89494:	bf04      	itt	eq
   89496:	021b      	lsleq	r3, r3, #8
   89498:	3008      	addeq	r0, #8
   8949a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   8949e:	bf04      	itt	eq
   894a0:	011b      	lsleq	r3, r3, #4
   894a2:	3004      	addeq	r0, #4
   894a4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   894a8:	bf04      	itt	eq
   894aa:	009b      	lsleq	r3, r3, #2
   894ac:	3002      	addeq	r0, #2
   894ae:	2b00      	cmp	r3, #0
   894b0:	db05      	blt.n	894be <__hi0bits+0x3a>
   894b2:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   894b6:	f100 0001 	add.w	r0, r0, #1
   894ba:	bf08      	it	eq
   894bc:	2020      	moveq	r0, #32
   894be:	4770      	bx	lr
   894c0:	2000      	movs	r0, #0
   894c2:	e7e5      	b.n	89490 <__hi0bits+0xc>

000894c4 <__lo0bits>:
   894c4:	6803      	ldr	r3, [r0, #0]
   894c6:	4602      	mov	r2, r0
   894c8:	f013 0007 	ands.w	r0, r3, #7
   894cc:	d009      	beq.n	894e2 <__lo0bits+0x1e>
   894ce:	07d9      	lsls	r1, r3, #31
   894d0:	d41f      	bmi.n	89512 <__lo0bits+0x4e>
   894d2:	0798      	lsls	r0, r3, #30
   894d4:	bf4b      	itete	mi
   894d6:	085b      	lsrmi	r3, r3, #1
   894d8:	089b      	lsrpl	r3, r3, #2
   894da:	2001      	movmi	r0, #1
   894dc:	2002      	movpl	r0, #2
   894de:	6013      	str	r3, [r2, #0]
   894e0:	4770      	bx	lr
   894e2:	b299      	uxth	r1, r3
   894e4:	b909      	cbnz	r1, 894ea <__lo0bits+0x26>
   894e6:	2010      	movs	r0, #16
   894e8:	40c3      	lsrs	r3, r0
   894ea:	b2d9      	uxtb	r1, r3
   894ec:	b909      	cbnz	r1, 894f2 <__lo0bits+0x2e>
   894ee:	3008      	adds	r0, #8
   894f0:	0a1b      	lsrs	r3, r3, #8
   894f2:	0719      	lsls	r1, r3, #28
   894f4:	bf04      	itt	eq
   894f6:	091b      	lsreq	r3, r3, #4
   894f8:	3004      	addeq	r0, #4
   894fa:	0799      	lsls	r1, r3, #30
   894fc:	bf04      	itt	eq
   894fe:	089b      	lsreq	r3, r3, #2
   89500:	3002      	addeq	r0, #2
   89502:	07d9      	lsls	r1, r3, #31
   89504:	d403      	bmi.n	8950e <__lo0bits+0x4a>
   89506:	085b      	lsrs	r3, r3, #1
   89508:	f100 0001 	add.w	r0, r0, #1
   8950c:	d003      	beq.n	89516 <__lo0bits+0x52>
   8950e:	6013      	str	r3, [r2, #0]
   89510:	4770      	bx	lr
   89512:	2000      	movs	r0, #0
   89514:	4770      	bx	lr
   89516:	2020      	movs	r0, #32
   89518:	4770      	bx	lr
   8951a:	bf00      	nop

0008951c <__i2b>:
   8951c:	b538      	push	{r3, r4, r5, lr}
   8951e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   89520:	4604      	mov	r4, r0
   89522:	460d      	mov	r5, r1
   89524:	b14b      	cbz	r3, 8953a <__i2b+0x1e>
   89526:	6858      	ldr	r0, [r3, #4]
   89528:	b1b0      	cbz	r0, 89558 <__i2b+0x3c>
   8952a:	6802      	ldr	r2, [r0, #0]
   8952c:	605a      	str	r2, [r3, #4]
   8952e:	2200      	movs	r2, #0
   89530:	2301      	movs	r3, #1
   89532:	6145      	str	r5, [r0, #20]
   89534:	e9c0 2303 	strd	r2, r3, [r0, #12]
   89538:	bd38      	pop	{r3, r4, r5, pc}
   8953a:	2221      	movs	r2, #33	; 0x21
   8953c:	2104      	movs	r1, #4
   8953e:	f000 fbf1 	bl	89d24 <_calloc_r>
   89542:	4603      	mov	r3, r0
   89544:	64e0      	str	r0, [r4, #76]	; 0x4c
   89546:	2800      	cmp	r0, #0
   89548:	d1ed      	bne.n	89526 <__i2b+0xa>
   8954a:	2200      	movs	r2, #0
   8954c:	f44f 71a0 	mov.w	r1, #320	; 0x140
   89550:	4b07      	ldr	r3, [pc, #28]	; (89570 <__i2b+0x54>)
   89552:	4808      	ldr	r0, [pc, #32]	; (89574 <__i2b+0x58>)
   89554:	f000 fbc6 	bl	89ce4 <__assert_func>
   89558:	221c      	movs	r2, #28
   8955a:	2101      	movs	r1, #1
   8955c:	4620      	mov	r0, r4
   8955e:	f000 fbe1 	bl	89d24 <_calloc_r>
   89562:	2800      	cmp	r0, #0
   89564:	d0f1      	beq.n	8954a <__i2b+0x2e>
   89566:	2201      	movs	r2, #1
   89568:	2302      	movs	r3, #2
   8956a:	e9c0 2301 	strd	r2, r3, [r0, #4]
   8956e:	e7de      	b.n	8952e <__i2b+0x12>
   89570:	0008cb08 	.word	0x0008cb08
   89574:	0008cb9c 	.word	0x0008cb9c

00089578 <__multiply>:
   89578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8957c:	690e      	ldr	r6, [r1, #16]
   8957e:	6915      	ldr	r5, [r2, #16]
   89580:	4688      	mov	r8, r1
   89582:	42ae      	cmp	r6, r5
   89584:	4614      	mov	r4, r2
   89586:	b085      	sub	sp, #20
   89588:	db05      	blt.n	89596 <__multiply+0x1e>
   8958a:	462a      	mov	r2, r5
   8958c:	4623      	mov	r3, r4
   8958e:	4635      	mov	r5, r6
   89590:	460c      	mov	r4, r1
   89592:	4616      	mov	r6, r2
   89594:	4698      	mov	r8, r3
   89596:	68a3      	ldr	r3, [r4, #8]
   89598:	6861      	ldr	r1, [r4, #4]
   8959a:	19af      	adds	r7, r5, r6
   8959c:	42bb      	cmp	r3, r7
   8959e:	bfb8      	it	lt
   895a0:	3101      	addlt	r1, #1
   895a2:	f7ff feed 	bl	89380 <_Balloc>
   895a6:	9001      	str	r0, [sp, #4]
   895a8:	2800      	cmp	r0, #0
   895aa:	f000 8087 	beq.w	896bc <__multiply+0x144>
   895ae:	9b01      	ldr	r3, [sp, #4]
   895b0:	f103 0914 	add.w	r9, r3, #20
   895b4:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   895b8:	45d1      	cmp	r9, sl
   895ba:	d205      	bcs.n	895c8 <__multiply+0x50>
   895bc:	464b      	mov	r3, r9
   895be:	2200      	movs	r2, #0
   895c0:	f843 2b04 	str.w	r2, [r3], #4
   895c4:	459a      	cmp	sl, r3
   895c6:	d8fb      	bhi.n	895c0 <__multiply+0x48>
   895c8:	f108 0814 	add.w	r8, r8, #20
   895cc:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   895d0:	f104 0314 	add.w	r3, r4, #20
   895d4:	45d8      	cmp	r8, fp
   895d6:	461a      	mov	r2, r3
   895d8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   895dc:	d25f      	bcs.n	8969e <__multiply+0x126>
   895de:	1b2b      	subs	r3, r5, r4
   895e0:	3b15      	subs	r3, #21
   895e2:	f023 0303 	bic.w	r3, r3, #3
   895e6:	3304      	adds	r3, #4
   895e8:	3415      	adds	r4, #21
   895ea:	42a5      	cmp	r5, r4
   895ec:	bf38      	it	cc
   895ee:	2304      	movcc	r3, #4
   895f0:	e9cd a702 	strd	sl, r7, [sp, #8]
   895f4:	46ac      	mov	ip, r5
   895f6:	461f      	mov	r7, r3
   895f8:	4692      	mov	sl, r2
   895fa:	e005      	b.n	89608 <__multiply+0x90>
   895fc:	0c00      	lsrs	r0, r0, #16
   895fe:	d129      	bne.n	89654 <__multiply+0xdc>
   89600:	45c3      	cmp	fp, r8
   89602:	f109 0904 	add.w	r9, r9, #4
   89606:	d948      	bls.n	8969a <__multiply+0x122>
   89608:	f858 0b04 	ldr.w	r0, [r8], #4
   8960c:	b285      	uxth	r5, r0
   8960e:	2d00      	cmp	r5, #0
   89610:	d0f4      	beq.n	895fc <__multiply+0x84>
   89612:	4656      	mov	r6, sl
   89614:	464c      	mov	r4, r9
   89616:	2300      	movs	r3, #0
   89618:	f856 0b04 	ldr.w	r0, [r6], #4
   8961c:	6821      	ldr	r1, [r4, #0]
   8961e:	b282      	uxth	r2, r0
   89620:	fa1f fe81 	uxth.w	lr, r1
   89624:	fb05 ee02 	mla	lr, r5, r2, lr
   89628:	0c00      	lsrs	r0, r0, #16
   8962a:	0c0a      	lsrs	r2, r1, #16
   8962c:	fb05 2200 	mla	r2, r5, r0, r2
   89630:	4473      	add	r3, lr
   89632:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   89636:	b29b      	uxth	r3, r3
   89638:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   8963c:	45b4      	cmp	ip, r6
   8963e:	f844 3b04 	str.w	r3, [r4], #4
   89642:	ea4f 4312 	mov.w	r3, r2, lsr #16
   89646:	d8e7      	bhi.n	89618 <__multiply+0xa0>
   89648:	f849 3007 	str.w	r3, [r9, r7]
   8964c:	f858 0c04 	ldr.w	r0, [r8, #-4]
   89650:	0c00      	lsrs	r0, r0, #16
   89652:	d0d5      	beq.n	89600 <__multiply+0x88>
   89654:	f8d9 3000 	ldr.w	r3, [r9]
   89658:	4654      	mov	r4, sl
   8965a:	4619      	mov	r1, r3
   8965c:	464d      	mov	r5, r9
   8965e:	2200      	movs	r2, #0
   89660:	8826      	ldrh	r6, [r4, #0]
   89662:	0c09      	lsrs	r1, r1, #16
   89664:	fb00 1106 	mla	r1, r0, r6, r1
   89668:	b29b      	uxth	r3, r3
   8966a:	440a      	add	r2, r1
   8966c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   89670:	f845 3b04 	str.w	r3, [r5], #4
   89674:	f854 6b04 	ldr.w	r6, [r4], #4
   89678:	6829      	ldr	r1, [r5, #0]
   8967a:	0c36      	lsrs	r6, r6, #16
   8967c:	b28b      	uxth	r3, r1
   8967e:	fb00 3306 	mla	r3, r0, r6, r3
   89682:	45a4      	cmp	ip, r4
   89684:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   89688:	ea4f 4213 	mov.w	r2, r3, lsr #16
   8968c:	d8e8      	bhi.n	89660 <__multiply+0xe8>
   8968e:	45c3      	cmp	fp, r8
   89690:	f849 3007 	str.w	r3, [r9, r7]
   89694:	f109 0904 	add.w	r9, r9, #4
   89698:	d8b6      	bhi.n	89608 <__multiply+0x90>
   8969a:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   8969e:	2f00      	cmp	r7, #0
   896a0:	dc02      	bgt.n	896a8 <__multiply+0x130>
   896a2:	e005      	b.n	896b0 <__multiply+0x138>
   896a4:	3f01      	subs	r7, #1
   896a6:	d003      	beq.n	896b0 <__multiply+0x138>
   896a8:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   896ac:	2b00      	cmp	r3, #0
   896ae:	d0f9      	beq.n	896a4 <__multiply+0x12c>
   896b0:	9b01      	ldr	r3, [sp, #4]
   896b2:	4618      	mov	r0, r3
   896b4:	611f      	str	r7, [r3, #16]
   896b6:	b005      	add	sp, #20
   896b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   896bc:	4602      	mov	r2, r0
   896be:	f240 115d 	movw	r1, #349	; 0x15d
   896c2:	4b02      	ldr	r3, [pc, #8]	; (896cc <__multiply+0x154>)
   896c4:	4802      	ldr	r0, [pc, #8]	; (896d0 <__multiply+0x158>)
   896c6:	f000 fb0d 	bl	89ce4 <__assert_func>
   896ca:	bf00      	nop
   896cc:	0008cb08 	.word	0x0008cb08
   896d0:	0008cb9c 	.word	0x0008cb9c

000896d4 <__pow5mult>:
   896d4:	f012 0303 	ands.w	r3, r2, #3
   896d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   896dc:	4614      	mov	r4, r2
   896de:	4607      	mov	r7, r0
   896e0:	d12e      	bne.n	89740 <__pow5mult+0x6c>
   896e2:	460e      	mov	r6, r1
   896e4:	10a4      	asrs	r4, r4, #2
   896e6:	d01c      	beq.n	89722 <__pow5mult+0x4e>
   896e8:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   896ea:	b395      	cbz	r5, 89752 <__pow5mult+0x7e>
   896ec:	07e3      	lsls	r3, r4, #31
   896ee:	f04f 0800 	mov.w	r8, #0
   896f2:	d406      	bmi.n	89702 <__pow5mult+0x2e>
   896f4:	1064      	asrs	r4, r4, #1
   896f6:	d014      	beq.n	89722 <__pow5mult+0x4e>
   896f8:	6828      	ldr	r0, [r5, #0]
   896fa:	b1a8      	cbz	r0, 89728 <__pow5mult+0x54>
   896fc:	4605      	mov	r5, r0
   896fe:	07e3      	lsls	r3, r4, #31
   89700:	d5f8      	bpl.n	896f4 <__pow5mult+0x20>
   89702:	462a      	mov	r2, r5
   89704:	4631      	mov	r1, r6
   89706:	4638      	mov	r0, r7
   89708:	f7ff ff36 	bl	89578 <__multiply>
   8970c:	b1b6      	cbz	r6, 8973c <__pow5mult+0x68>
   8970e:	6871      	ldr	r1, [r6, #4]
   89710:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   89712:	1064      	asrs	r4, r4, #1
   89714:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   89718:	6032      	str	r2, [r6, #0]
   8971a:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   8971e:	4606      	mov	r6, r0
   89720:	d1ea      	bne.n	896f8 <__pow5mult+0x24>
   89722:	4630      	mov	r0, r6
   89724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   89728:	462a      	mov	r2, r5
   8972a:	4629      	mov	r1, r5
   8972c:	4638      	mov	r0, r7
   8972e:	f7ff ff23 	bl	89578 <__multiply>
   89732:	6028      	str	r0, [r5, #0]
   89734:	4605      	mov	r5, r0
   89736:	f8c0 8000 	str.w	r8, [r0]
   8973a:	e7e0      	b.n	896fe <__pow5mult+0x2a>
   8973c:	4606      	mov	r6, r0
   8973e:	e7d9      	b.n	896f4 <__pow5mult+0x20>
   89740:	4a0f      	ldr	r2, [pc, #60]	; (89780 <__pow5mult+0xac>)
   89742:	3b01      	subs	r3, #1
   89744:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   89748:	2300      	movs	r3, #0
   8974a:	f7ff fe49 	bl	893e0 <__multadd>
   8974e:	4606      	mov	r6, r0
   89750:	e7c8      	b.n	896e4 <__pow5mult+0x10>
   89752:	2101      	movs	r1, #1
   89754:	4638      	mov	r0, r7
   89756:	f7ff fe13 	bl	89380 <_Balloc>
   8975a:	4605      	mov	r5, r0
   8975c:	b140      	cbz	r0, 89770 <__pow5mult+0x9c>
   8975e:	f240 2371 	movw	r3, #625	; 0x271
   89762:	2201      	movs	r2, #1
   89764:	e9c0 2304 	strd	r2, r3, [r0, #16]
   89768:	2300      	movs	r3, #0
   8976a:	64b8      	str	r0, [r7, #72]	; 0x48
   8976c:	6003      	str	r3, [r0, #0]
   8976e:	e7bd      	b.n	896ec <__pow5mult+0x18>
   89770:	4602      	mov	r2, r0
   89772:	f44f 71a0 	mov.w	r1, #320	; 0x140
   89776:	4b03      	ldr	r3, [pc, #12]	; (89784 <__pow5mult+0xb0>)
   89778:	4803      	ldr	r0, [pc, #12]	; (89788 <__pow5mult+0xb4>)
   8977a:	f000 fab3 	bl	89ce4 <__assert_func>
   8977e:	bf00      	nop
   89780:	0008cd10 	.word	0x0008cd10
   89784:	0008cb08 	.word	0x0008cb08
   89788:	0008cb9c 	.word	0x0008cb9c

0008978c <__lshift>:
   8978c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89790:	460c      	mov	r4, r1
   89792:	6926      	ldr	r6, [r4, #16]
   89794:	68a3      	ldr	r3, [r4, #8]
   89796:	eb06 1662 	add.w	r6, r6, r2, asr #5
   8979a:	1c75      	adds	r5, r6, #1
   8979c:	429d      	cmp	r5, r3
   8979e:	4690      	mov	r8, r2
   897a0:	4607      	mov	r7, r0
   897a2:	6849      	ldr	r1, [r1, #4]
   897a4:	ea4f 1962 	mov.w	r9, r2, asr #5
   897a8:	dd04      	ble.n	897b4 <__lshift+0x28>
   897aa:	005b      	lsls	r3, r3, #1
   897ac:	429d      	cmp	r5, r3
   897ae:	f101 0101 	add.w	r1, r1, #1
   897b2:	dcfa      	bgt.n	897aa <__lshift+0x1e>
   897b4:	4638      	mov	r0, r7
   897b6:	f7ff fde3 	bl	89380 <_Balloc>
   897ba:	2800      	cmp	r0, #0
   897bc:	d051      	beq.n	89862 <__lshift+0xd6>
   897be:	f1b9 0f00 	cmp.w	r9, #0
   897c2:	f100 0114 	add.w	r1, r0, #20
   897c6:	dd0f      	ble.n	897e8 <__lshift+0x5c>
   897c8:	460b      	mov	r3, r1
   897ca:	f04f 0c00 	mov.w	ip, #0
   897ce:	f109 0205 	add.w	r2, r9, #5
   897d2:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   897d6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   897da:	f843 cb04 	str.w	ip, [r3], #4
   897de:	4293      	cmp	r3, r2
   897e0:	d1fb      	bne.n	897da <__lshift+0x4e>
   897e2:	f1ae 0314 	sub.w	r3, lr, #20
   897e6:	4419      	add	r1, r3
   897e8:	6922      	ldr	r2, [r4, #16]
   897ea:	f104 0314 	add.w	r3, r4, #20
   897ee:	f018 081f 	ands.w	r8, r8, #31
   897f2:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   897f6:	d02c      	beq.n	89852 <__lshift+0xc6>
   897f8:	468e      	mov	lr, r1
   897fa:	f04f 0a00 	mov.w	sl, #0
   897fe:	f1c8 0920 	rsb	r9, r8, #32
   89802:	681a      	ldr	r2, [r3, #0]
   89804:	fa02 f208 	lsl.w	r2, r2, r8
   89808:	ea42 020a 	orr.w	r2, r2, sl
   8980c:	f84e 2b04 	str.w	r2, [lr], #4
   89810:	f853 2b04 	ldr.w	r2, [r3], #4
   89814:	459c      	cmp	ip, r3
   89816:	fa22 fa09 	lsr.w	sl, r2, r9
   8981a:	d8f2      	bhi.n	89802 <__lshift+0x76>
   8981c:	ebac 0304 	sub.w	r3, ip, r4
   89820:	3b15      	subs	r3, #21
   89822:	f023 0303 	bic.w	r3, r3, #3
   89826:	3304      	adds	r3, #4
   89828:	f104 0215 	add.w	r2, r4, #21
   8982c:	4594      	cmp	ip, r2
   8982e:	bf38      	it	cc
   89830:	2304      	movcc	r3, #4
   89832:	f1ba 0f00 	cmp.w	sl, #0
   89836:	bf18      	it	ne
   89838:	462e      	movne	r6, r5
   8983a:	f841 a003 	str.w	sl, [r1, r3]
   8983e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   89840:	6862      	ldr	r2, [r4, #4]
   89842:	6106      	str	r6, [r0, #16]
   89844:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   89848:	6021      	str	r1, [r4, #0]
   8984a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   8984e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89852:	3904      	subs	r1, #4
   89854:	f853 2b04 	ldr.w	r2, [r3], #4
   89858:	459c      	cmp	ip, r3
   8985a:	f841 2f04 	str.w	r2, [r1, #4]!
   8985e:	d8f9      	bhi.n	89854 <__lshift+0xc8>
   89860:	e7ed      	b.n	8983e <__lshift+0xb2>
   89862:	4602      	mov	r2, r0
   89864:	f240 11d9 	movw	r1, #473	; 0x1d9
   89868:	4b01      	ldr	r3, [pc, #4]	; (89870 <__lshift+0xe4>)
   8986a:	4802      	ldr	r0, [pc, #8]	; (89874 <__lshift+0xe8>)
   8986c:	f000 fa3a 	bl	89ce4 <__assert_func>
   89870:	0008cb08 	.word	0x0008cb08
   89874:	0008cb9c 	.word	0x0008cb9c

00089878 <__mcmp>:
   89878:	4684      	mov	ip, r0
   8987a:	690b      	ldr	r3, [r1, #16]
   8987c:	6900      	ldr	r0, [r0, #16]
   8987e:	1ac0      	subs	r0, r0, r3
   89880:	d115      	bne.n	898ae <__mcmp+0x36>
   89882:	f10c 0c14 	add.w	ip, ip, #20
   89886:	3114      	adds	r1, #20
   89888:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   8988c:	b410      	push	{r4}
   8988e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   89892:	e001      	b.n	89898 <__mcmp+0x20>
   89894:	4594      	cmp	ip, r2
   89896:	d208      	bcs.n	898aa <__mcmp+0x32>
   89898:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   8989c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   898a0:	428c      	cmp	r4, r1
   898a2:	d0f7      	beq.n	89894 <__mcmp+0x1c>
   898a4:	d204      	bcs.n	898b0 <__mcmp+0x38>
   898a6:	f04f 30ff 	mov.w	r0, #4294967295
   898aa:	bc10      	pop	{r4}
   898ac:	4770      	bx	lr
   898ae:	4770      	bx	lr
   898b0:	2001      	movs	r0, #1
   898b2:	bc10      	pop	{r4}
   898b4:	4770      	bx	lr
   898b6:	bf00      	nop

000898b8 <__mdiff>:
   898b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   898bc:	690c      	ldr	r4, [r1, #16]
   898be:	6913      	ldr	r3, [r2, #16]
   898c0:	4689      	mov	r9, r1
   898c2:	1ae4      	subs	r4, r4, r3
   898c4:	2c00      	cmp	r4, #0
   898c6:	4617      	mov	r7, r2
   898c8:	d17d      	bne.n	899c6 <__mdiff+0x10e>
   898ca:	f101 0614 	add.w	r6, r1, #20
   898ce:	3214      	adds	r2, #20
   898d0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   898d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   898d8:	e001      	b.n	898de <__mdiff+0x26>
   898da:	429e      	cmp	r6, r3
   898dc:	d276      	bcs.n	899cc <__mdiff+0x114>
   898de:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   898e2:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   898e6:	428d      	cmp	r5, r1
   898e8:	d0f7      	beq.n	898da <__mdiff+0x22>
   898ea:	d367      	bcc.n	899bc <__mdiff+0x104>
   898ec:	f8d9 1004 	ldr.w	r1, [r9, #4]
   898f0:	f7ff fd46 	bl	89380 <_Balloc>
   898f4:	2800      	cmp	r0, #0
   898f6:	d073      	beq.n	899e0 <__mdiff+0x128>
   898f8:	f8d9 5010 	ldr.w	r5, [r9, #16]
   898fc:	60c4      	str	r4, [r0, #12]
   898fe:	f100 0414 	add.w	r4, r0, #20
   89902:	4626      	mov	r6, r4
   89904:	f04f 0a00 	mov.w	sl, #0
   89908:	693b      	ldr	r3, [r7, #16]
   8990a:	f109 0814 	add.w	r8, r9, #20
   8990e:	f107 0e14 	add.w	lr, r7, #20
   89912:	f109 0c10 	add.w	ip, r9, #16
   89916:	eb08 0285 	add.w	r2, r8, r5, lsl #2
   8991a:	eb0e 0983 	add.w	r9, lr, r3, lsl #2
   8991e:	f85c bf04 	ldr.w	fp, [ip, #4]!
   89922:	f85e 1b04 	ldr.w	r1, [lr], #4
   89926:	fa1f f38b 	uxth.w	r3, fp
   8992a:	4453      	add	r3, sl
   8992c:	fa1f fa81 	uxth.w	sl, r1
   89930:	0c09      	lsrs	r1, r1, #16
   89932:	eba3 030a 	sub.w	r3, r3, sl
   89936:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
   8993a:	eb01 4123 	add.w	r1, r1, r3, asr #16
   8993e:	b29b      	uxth	r3, r3
   89940:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   89944:	45f1      	cmp	r9, lr
   89946:	f846 3b04 	str.w	r3, [r6], #4
   8994a:	ea4f 4a21 	mov.w	sl, r1, asr #16
   8994e:	d8e6      	bhi.n	8991e <__mdiff+0x66>
   89950:	eba9 0107 	sub.w	r1, r9, r7
   89954:	3915      	subs	r1, #21
   89956:	3715      	adds	r7, #21
   89958:	45b9      	cmp	r9, r7
   8995a:	f021 0603 	bic.w	r6, r1, #3
   8995e:	f106 0604 	add.w	r6, r6, #4
   89962:	bf38      	it	cc
   89964:	2604      	movcc	r6, #4
   89966:	f021 0103 	bic.w	r1, r1, #3
   8996a:	bf38      	it	cc
   8996c:	2100      	movcc	r1, #0
   8996e:	44b0      	add	r8, r6
   89970:	4542      	cmp	r2, r8
   89972:	4426      	add	r6, r4
   89974:	440c      	add	r4, r1
   89976:	d918      	bls.n	899aa <__mdiff+0xf2>
   89978:	4637      	mov	r7, r6
   8997a:	4644      	mov	r4, r8
   8997c:	f854 1b04 	ldr.w	r1, [r4], #4
   89980:	b28b      	uxth	r3, r1
   89982:	4453      	add	r3, sl
   89984:	ea4f 4a23 	mov.w	sl, r3, asr #16
   89988:	eb0a 4111 	add.w	r1, sl, r1, lsr #16
   8998c:	b29b      	uxth	r3, r3
   8998e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   89992:	42a2      	cmp	r2, r4
   89994:	f847 3b04 	str.w	r3, [r7], #4
   89998:	ea4f 4a21 	mov.w	sl, r1, asr #16
   8999c:	d8ee      	bhi.n	8997c <__mdiff+0xc4>
   8999e:	1e54      	subs	r4, r2, #1
   899a0:	eba4 0408 	sub.w	r4, r4, r8
   899a4:	f024 0403 	bic.w	r4, r4, #3
   899a8:	4434      	add	r4, r6
   899aa:	b923      	cbnz	r3, 899b6 <__mdiff+0xfe>
   899ac:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   899b0:	3d01      	subs	r5, #1
   899b2:	2b00      	cmp	r3, #0
   899b4:	d0fa      	beq.n	899ac <__mdiff+0xf4>
   899b6:	6105      	str	r5, [r0, #16]
   899b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   899bc:	464b      	mov	r3, r9
   899be:	2401      	movs	r4, #1
   899c0:	46b9      	mov	r9, r7
   899c2:	461f      	mov	r7, r3
   899c4:	e792      	b.n	898ec <__mdiff+0x34>
   899c6:	dbf9      	blt.n	899bc <__mdiff+0x104>
   899c8:	2400      	movs	r4, #0
   899ca:	e78f      	b.n	898ec <__mdiff+0x34>
   899cc:	2100      	movs	r1, #0
   899ce:	f7ff fcd7 	bl	89380 <_Balloc>
   899d2:	b160      	cbz	r0, 899ee <__mdiff+0x136>
   899d4:	2201      	movs	r2, #1
   899d6:	2300      	movs	r3, #0
   899d8:	e9c0 2304 	strd	r2, r3, [r0, #16]
   899dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   899e0:	4602      	mov	r2, r0
   899e2:	f44f 7110 	mov.w	r1, #576	; 0x240
   899e6:	4b05      	ldr	r3, [pc, #20]	; (899fc <__mdiff+0x144>)
   899e8:	4805      	ldr	r0, [pc, #20]	; (89a00 <__mdiff+0x148>)
   899ea:	f000 f97b 	bl	89ce4 <__assert_func>
   899ee:	4602      	mov	r2, r0
   899f0:	f240 2132 	movw	r1, #562	; 0x232
   899f4:	4b01      	ldr	r3, [pc, #4]	; (899fc <__mdiff+0x144>)
   899f6:	4802      	ldr	r0, [pc, #8]	; (89a00 <__mdiff+0x148>)
   899f8:	f000 f974 	bl	89ce4 <__assert_func>
   899fc:	0008cb08 	.word	0x0008cb08
   89a00:	0008cb9c 	.word	0x0008cb9c

00089a04 <__d2b>:
   89a04:	b570      	push	{r4, r5, r6, lr}
   89a06:	2101      	movs	r1, #1
   89a08:	b082      	sub	sp, #8
   89a0a:	4616      	mov	r6, r2
   89a0c:	461d      	mov	r5, r3
   89a0e:	f7ff fcb7 	bl	89380 <_Balloc>
   89a12:	4604      	mov	r4, r0
   89a14:	2800      	cmp	r0, #0
   89a16:	d04c      	beq.n	89ab2 <__d2b+0xae>
   89a18:	462b      	mov	r3, r5
   89a1a:	f3c5 550a 	ubfx	r5, r5, #20, #11
   89a1e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   89a22:	b10d      	cbz	r5, 89a28 <__d2b+0x24>
   89a24:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   89a28:	2e00      	cmp	r6, #0
   89a2a:	9301      	str	r3, [sp, #4]
   89a2c:	d022      	beq.n	89a74 <__d2b+0x70>
   89a2e:	4668      	mov	r0, sp
   89a30:	9600      	str	r6, [sp, #0]
   89a32:	f7ff fd47 	bl	894c4 <__lo0bits>
   89a36:	2800      	cmp	r0, #0
   89a38:	d037      	beq.n	89aaa <__d2b+0xa6>
   89a3a:	9b01      	ldr	r3, [sp, #4]
   89a3c:	9900      	ldr	r1, [sp, #0]
   89a3e:	f1c0 0220 	rsb	r2, r0, #32
   89a42:	fa03 f202 	lsl.w	r2, r3, r2
   89a46:	430a      	orrs	r2, r1
   89a48:	40c3      	lsrs	r3, r0
   89a4a:	9301      	str	r3, [sp, #4]
   89a4c:	6162      	str	r2, [r4, #20]
   89a4e:	2b00      	cmp	r3, #0
   89a50:	bf14      	ite	ne
   89a52:	2102      	movne	r1, #2
   89a54:	2101      	moveq	r1, #1
   89a56:	61a3      	str	r3, [r4, #24]
   89a58:	6121      	str	r1, [r4, #16]
   89a5a:	b1b5      	cbz	r5, 89a8a <__d2b+0x86>
   89a5c:	9b06      	ldr	r3, [sp, #24]
   89a5e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   89a62:	4405      	add	r5, r0
   89a64:	601d      	str	r5, [r3, #0]
   89a66:	9b07      	ldr	r3, [sp, #28]
   89a68:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   89a6c:	6018      	str	r0, [r3, #0]
   89a6e:	4620      	mov	r0, r4
   89a70:	b002      	add	sp, #8
   89a72:	bd70      	pop	{r4, r5, r6, pc}
   89a74:	a801      	add	r0, sp, #4
   89a76:	f7ff fd25 	bl	894c4 <__lo0bits>
   89a7a:	2301      	movs	r3, #1
   89a7c:	9a01      	ldr	r2, [sp, #4]
   89a7e:	4619      	mov	r1, r3
   89a80:	6162      	str	r2, [r4, #20]
   89a82:	3020      	adds	r0, #32
   89a84:	6123      	str	r3, [r4, #16]
   89a86:	2d00      	cmp	r5, #0
   89a88:	d1e8      	bne.n	89a5c <__d2b+0x58>
   89a8a:	eb04 0281 	add.w	r2, r4, r1, lsl #2
   89a8e:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
   89a92:	6910      	ldr	r0, [r2, #16]
   89a94:	9a06      	ldr	r2, [sp, #24]
   89a96:	6013      	str	r3, [r2, #0]
   89a98:	f7ff fcf4 	bl	89484 <__hi0bits>
   89a9c:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   89aa0:	4620      	mov	r0, r4
   89aa2:	9b07      	ldr	r3, [sp, #28]
   89aa4:	6019      	str	r1, [r3, #0]
   89aa6:	b002      	add	sp, #8
   89aa8:	bd70      	pop	{r4, r5, r6, pc}
   89aaa:	e9dd 2300 	ldrd	r2, r3, [sp]
   89aae:	6162      	str	r2, [r4, #20]
   89ab0:	e7cd      	b.n	89a4e <__d2b+0x4a>
   89ab2:	4602      	mov	r2, r0
   89ab4:	f240 310a 	movw	r1, #778	; 0x30a
   89ab8:	4b01      	ldr	r3, [pc, #4]	; (89ac0 <__d2b+0xbc>)
   89aba:	4802      	ldr	r0, [pc, #8]	; (89ac4 <__d2b+0xc0>)
   89abc:	f000 f912 	bl	89ce4 <__assert_func>
   89ac0:	0008cb08 	.word	0x0008cb08
   89ac4:	0008cb9c 	.word	0x0008cb9c

00089ac8 <frexp>:
   89ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89aca:	2700      	movs	r7, #0
   89acc:	f8df c05c 	ldr.w	ip, [pc, #92]	; 89b2c <frexp+0x64>
   89ad0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   89ad4:	4563      	cmp	r3, ip
   89ad6:	4604      	mov	r4, r0
   89ad8:	460d      	mov	r5, r1
   89ada:	6017      	str	r7, [r2, #0]
   89adc:	dc23      	bgt.n	89b26 <frexp+0x5e>
   89ade:	4684      	mov	ip, r0
   89ae0:	ea53 0c0c 	orrs.w	ip, r3, ip
   89ae4:	d01f      	beq.n	89b26 <frexp+0x5e>
   89ae6:	f8df c048 	ldr.w	ip, [pc, #72]	; 89b30 <frexp+0x68>
   89aea:	4616      	mov	r6, r2
   89aec:	ea01 0c0c 	and.w	ip, r1, ip
   89af0:	460a      	mov	r2, r1
   89af2:	f1bc 0f00 	cmp.w	ip, #0
   89af6:	d109      	bne.n	89b0c <frexp+0x44>
   89af8:	2200      	movs	r2, #0
   89afa:	4b0e      	ldr	r3, [pc, #56]	; (89b34 <frexp+0x6c>)
   89afc:	f002 fb3c 	bl	8c178 <__aeabi_dmul>
   89b00:	f06f 0735 	mvn.w	r7, #53	; 0x35
   89b04:	4604      	mov	r4, r0
   89b06:	460a      	mov	r2, r1
   89b08:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   89b0c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   89b10:	151b      	asrs	r3, r3, #20
   89b12:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   89b16:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   89b1a:	443b      	add	r3, r7
   89b1c:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   89b20:	6033      	str	r3, [r6, #0]
   89b22:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   89b26:	4620      	mov	r0, r4
   89b28:	4629      	mov	r1, r5
   89b2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89b2c:	7fefffff 	.word	0x7fefffff
   89b30:	7ff00000 	.word	0x7ff00000
   89b34:	43500000 	.word	0x43500000

00089b38 <_sbrk_r>:
   89b38:	2200      	movs	r2, #0
   89b3a:	b538      	push	{r3, r4, r5, lr}
   89b3c:	4d06      	ldr	r5, [pc, #24]	; (89b58 <_sbrk_r+0x20>)
   89b3e:	4604      	mov	r4, r0
   89b40:	4608      	mov	r0, r1
   89b42:	602a      	str	r2, [r5, #0]
   89b44:	f7fa f832 	bl	83bac <_sbrk>
   89b48:	1c43      	adds	r3, r0, #1
   89b4a:	d000      	beq.n	89b4e <_sbrk_r+0x16>
   89b4c:	bd38      	pop	{r3, r4, r5, pc}
   89b4e:	682b      	ldr	r3, [r5, #0]
   89b50:	2b00      	cmp	r3, #0
   89b52:	d0fb      	beq.n	89b4c <_sbrk_r+0x14>
   89b54:	6023      	str	r3, [r4, #0]
   89b56:	bd38      	pop	{r3, r4, r5, pc}
   89b58:	20073350 	.word	0x20073350

00089b5c <__ssprint_r>:
   89b5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89b60:	6893      	ldr	r3, [r2, #8]
   89b62:	4691      	mov	r9, r2
   89b64:	b083      	sub	sp, #12
   89b66:	2b00      	cmp	r3, #0
   89b68:	d06e      	beq.n	89c48 <__ssprint_r+0xec>
   89b6a:	6817      	ldr	r7, [r2, #0]
   89b6c:	4680      	mov	r8, r0
   89b6e:	460c      	mov	r4, r1
   89b70:	6808      	ldr	r0, [r1, #0]
   89b72:	688d      	ldr	r5, [r1, #8]
   89b74:	3708      	adds	r7, #8
   89b76:	e044      	b.n	89c02 <__ssprint_r+0xa6>
   89b78:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   89b7c:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   89b80:	d02e      	beq.n	89be0 <__ssprint_r+0x84>
   89b82:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   89b86:	1a45      	subs	r5, r0, r1
   89b88:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   89b8c:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   89b90:	19aa      	adds	r2, r5, r6
   89b92:	ea4f 0a63 	mov.w	sl, r3, asr #1
   89b96:	1c53      	adds	r3, r2, #1
   89b98:	4553      	cmp	r3, sl
   89b9a:	4652      	mov	r2, sl
   89b9c:	bf84      	itt	hi
   89b9e:	469a      	movhi	sl, r3
   89ba0:	4652      	movhi	r2, sl
   89ba2:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   89ba6:	d036      	beq.n	89c16 <__ssprint_r+0xba>
   89ba8:	4611      	mov	r1, r2
   89baa:	4640      	mov	r0, r8
   89bac:	f7ff f8e8 	bl	88d80 <_malloc_r>
   89bb0:	2800      	cmp	r0, #0
   89bb2:	d03a      	beq.n	89c2a <__ssprint_r+0xce>
   89bb4:	462a      	mov	r2, r5
   89bb6:	6921      	ldr	r1, [r4, #16]
   89bb8:	9001      	str	r0, [sp, #4]
   89bba:	f7fc f8c5 	bl	85d48 <memcpy>
   89bbe:	89a2      	ldrh	r2, [r4, #12]
   89bc0:	9b01      	ldr	r3, [sp, #4]
   89bc2:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   89bc6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   89bca:	81a2      	strh	r2, [r4, #12]
   89bcc:	1958      	adds	r0, r3, r5
   89bce:	ebaa 0505 	sub.w	r5, sl, r5
   89bd2:	60a5      	str	r5, [r4, #8]
   89bd4:	f8c4 a014 	str.w	sl, [r4, #20]
   89bd8:	4635      	mov	r5, r6
   89bda:	46b2      	mov	sl, r6
   89bdc:	6123      	str	r3, [r4, #16]
   89bde:	6020      	str	r0, [r4, #0]
   89be0:	4659      	mov	r1, fp
   89be2:	4652      	mov	r2, sl
   89be4:	f000 f910 	bl	89e08 <memmove>
   89be8:	f8d9 3008 	ldr.w	r3, [r9, #8]
   89bec:	68a1      	ldr	r1, [r4, #8]
   89bee:	6820      	ldr	r0, [r4, #0]
   89bf0:	1b4d      	subs	r5, r1, r5
   89bf2:	4450      	add	r0, sl
   89bf4:	1b9e      	subs	r6, r3, r6
   89bf6:	60a5      	str	r5, [r4, #8]
   89bf8:	6020      	str	r0, [r4, #0]
   89bfa:	f8c9 6008 	str.w	r6, [r9, #8]
   89bfe:	b31e      	cbz	r6, 89c48 <__ssprint_r+0xec>
   89c00:	3708      	adds	r7, #8
   89c02:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   89c06:	2e00      	cmp	r6, #0
   89c08:	d0fa      	beq.n	89c00 <__ssprint_r+0xa4>
   89c0a:	42b5      	cmp	r5, r6
   89c0c:	46aa      	mov	sl, r5
   89c0e:	d9b3      	bls.n	89b78 <__ssprint_r+0x1c>
   89c10:	4635      	mov	r5, r6
   89c12:	46b2      	mov	sl, r6
   89c14:	e7e4      	b.n	89be0 <__ssprint_r+0x84>
   89c16:	4640      	mov	r0, r8
   89c18:	f000 f972 	bl	89f00 <_realloc_r>
   89c1c:	4603      	mov	r3, r0
   89c1e:	2800      	cmp	r0, #0
   89c20:	d1d4      	bne.n	89bcc <__ssprint_r+0x70>
   89c22:	4640      	mov	r0, r8
   89c24:	6921      	ldr	r1, [r4, #16]
   89c26:	f7fe ff9f 	bl	88b68 <_free_r>
   89c2a:	230c      	movs	r3, #12
   89c2c:	2200      	movs	r2, #0
   89c2e:	f04f 30ff 	mov.w	r0, #4294967295
   89c32:	f8c8 3000 	str.w	r3, [r8]
   89c36:	89a3      	ldrh	r3, [r4, #12]
   89c38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89c3c:	81a3      	strh	r3, [r4, #12]
   89c3e:	e9c9 2201 	strd	r2, r2, [r9, #4]
   89c42:	b003      	add	sp, #12
   89c44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89c48:	2300      	movs	r3, #0
   89c4a:	4618      	mov	r0, r3
   89c4c:	f8c9 3004 	str.w	r3, [r9, #4]
   89c50:	b003      	add	sp, #12
   89c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89c56:	bf00      	nop

00089c58 <__register_exitproc>:
   89c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89c5c:	f8df a07c 	ldr.w	sl, [pc, #124]	; 89cdc <__register_exitproc+0x84>
   89c60:	4606      	mov	r6, r0
   89c62:	f8da 0000 	ldr.w	r0, [sl]
   89c66:	4698      	mov	r8, r3
   89c68:	460f      	mov	r7, r1
   89c6a:	4691      	mov	r9, r2
   89c6c:	f7ff f884 	bl	88d78 <__retarget_lock_acquire_recursive>
   89c70:	4b1b      	ldr	r3, [pc, #108]	; (89ce0 <__register_exitproc+0x88>)
   89c72:	681b      	ldr	r3, [r3, #0]
   89c74:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   89c78:	b324      	cbz	r4, 89cc4 <__register_exitproc+0x6c>
   89c7a:	6865      	ldr	r5, [r4, #4]
   89c7c:	2d1f      	cmp	r5, #31
   89c7e:	dc26      	bgt.n	89cce <__register_exitproc+0x76>
   89c80:	b95e      	cbnz	r6, 89c9a <__register_exitproc+0x42>
   89c82:	1c6b      	adds	r3, r5, #1
   89c84:	3502      	adds	r5, #2
   89c86:	f8da 0000 	ldr.w	r0, [sl]
   89c8a:	6063      	str	r3, [r4, #4]
   89c8c:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   89c90:	f7ff f874 	bl	88d7c <__retarget_lock_release_recursive>
   89c94:	2000      	movs	r0, #0
   89c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89c9a:	2301      	movs	r3, #1
   89c9c:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   89ca0:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   89ca4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   89ca8:	40ab      	lsls	r3, r5
   89caa:	431a      	orrs	r2, r3
   89cac:	2e02      	cmp	r6, #2
   89cae:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   89cb2:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   89cb6:	d1e4      	bne.n	89c82 <__register_exitproc+0x2a>
   89cb8:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   89cbc:	4313      	orrs	r3, r2
   89cbe:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   89cc2:	e7de      	b.n	89c82 <__register_exitproc+0x2a>
   89cc4:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   89cc8:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   89ccc:	e7d5      	b.n	89c7a <__register_exitproc+0x22>
   89cce:	f8da 0000 	ldr.w	r0, [sl]
   89cd2:	f7ff f853 	bl	88d7c <__retarget_lock_release_recursive>
   89cd6:	f04f 30ff 	mov.w	r0, #4294967295
   89cda:	e7dc      	b.n	89c96 <__register_exitproc+0x3e>
   89cdc:	20070f60 	.word	0x20070f60
   89ce0:	0008ca90 	.word	0x0008ca90

00089ce4 <__assert_func>:
   89ce4:	4614      	mov	r4, r2
   89ce6:	b500      	push	{lr}
   89ce8:	461a      	mov	r2, r3
   89cea:	4b0a      	ldr	r3, [pc, #40]	; (89d14 <__assert_func+0x30>)
   89cec:	460d      	mov	r5, r1
   89cee:	681b      	ldr	r3, [r3, #0]
   89cf0:	b085      	sub	sp, #20
   89cf2:	68de      	ldr	r6, [r3, #12]
   89cf4:	4603      	mov	r3, r0
   89cf6:	b14c      	cbz	r4, 89d0c <__assert_func+0x28>
   89cf8:	4907      	ldr	r1, [pc, #28]	; (89d18 <__assert_func+0x34>)
   89cfa:	9101      	str	r1, [sp, #4]
   89cfc:	4630      	mov	r0, r6
   89cfe:	4907      	ldr	r1, [pc, #28]	; (89d1c <__assert_func+0x38>)
   89d00:	9402      	str	r4, [sp, #8]
   89d02:	9500      	str	r5, [sp, #0]
   89d04:	f000 f850 	bl	89da8 <fiprintf>
   89d08:	f001 faaa 	bl	8b260 <abort>
   89d0c:	4904      	ldr	r1, [pc, #16]	; (89d20 <__assert_func+0x3c>)
   89d0e:	460c      	mov	r4, r1
   89d10:	e7f3      	b.n	89cfa <__assert_func+0x16>
   89d12:	bf00      	nop
   89d14:	20070b30 	.word	0x20070b30
   89d18:	0008cd1c 	.word	0x0008cd1c
   89d1c:	0008cd2c 	.word	0x0008cd2c
   89d20:	0008cd28 	.word	0x0008cd28

00089d24 <_calloc_r>:
   89d24:	b538      	push	{r3, r4, r5, lr}
   89d26:	fba1 1402 	umull	r1, r4, r1, r2
   89d2a:	bb84      	cbnz	r4, 89d8e <_calloc_r+0x6a>
   89d2c:	f7ff f828 	bl	88d80 <_malloc_r>
   89d30:	4605      	mov	r5, r0
   89d32:	b1d8      	cbz	r0, 89d6c <_calloc_r+0x48>
   89d34:	f850 2c04 	ldr.w	r2, [r0, #-4]
   89d38:	f022 0203 	bic.w	r2, r2, #3
   89d3c:	3a04      	subs	r2, #4
   89d3e:	2a24      	cmp	r2, #36	; 0x24
   89d40:	d816      	bhi.n	89d70 <_calloc_r+0x4c>
   89d42:	2a13      	cmp	r2, #19
   89d44:	d919      	bls.n	89d7a <_calloc_r+0x56>
   89d46:	2a1b      	cmp	r2, #27
   89d48:	e9c0 4400 	strd	r4, r4, [r0]
   89d4c:	d91c      	bls.n	89d88 <_calloc_r+0x64>
   89d4e:	2300      	movs	r3, #0
   89d50:	2a24      	cmp	r2, #36	; 0x24
   89d52:	bf14      	ite	ne
   89d54:	f100 0210 	addne.w	r2, r0, #16
   89d58:	f100 0218 	addeq.w	r2, r0, #24
   89d5c:	e9c0 4402 	strd	r4, r4, [r0, #8]
   89d60:	bf04      	itt	eq
   89d62:	6104      	streq	r4, [r0, #16]
   89d64:	6144      	streq	r4, [r0, #20]
   89d66:	e9c2 3300 	strd	r3, r3, [r2]
   89d6a:	6093      	str	r3, [r2, #8]
   89d6c:	4628      	mov	r0, r5
   89d6e:	bd38      	pop	{r3, r4, r5, pc}
   89d70:	4621      	mov	r1, r4
   89d72:	f7fc f85f 	bl	85e34 <memset>
   89d76:	4628      	mov	r0, r5
   89d78:	bd38      	pop	{r3, r4, r5, pc}
   89d7a:	4602      	mov	r2, r0
   89d7c:	2300      	movs	r3, #0
   89d7e:	4628      	mov	r0, r5
   89d80:	e9c2 3300 	strd	r3, r3, [r2]
   89d84:	6093      	str	r3, [r2, #8]
   89d86:	bd38      	pop	{r3, r4, r5, pc}
   89d88:	f100 0208 	add.w	r2, r0, #8
   89d8c:	e7f6      	b.n	89d7c <_calloc_r+0x58>
   89d8e:	f000 f805 	bl	89d9c <__errno>
   89d92:	230c      	movs	r3, #12
   89d94:	2500      	movs	r5, #0
   89d96:	6003      	str	r3, [r0, #0]
   89d98:	e7e8      	b.n	89d6c <_calloc_r+0x48>
   89d9a:	bf00      	nop

00089d9c <__errno>:
   89d9c:	4b01      	ldr	r3, [pc, #4]	; (89da4 <__errno+0x8>)
   89d9e:	6818      	ldr	r0, [r3, #0]
   89da0:	4770      	bx	lr
   89da2:	bf00      	nop
   89da4:	20070b30 	.word	0x20070b30

00089da8 <fiprintf>:
   89da8:	b40e      	push	{r1, r2, r3}
   89daa:	b500      	push	{lr}
   89dac:	4a07      	ldr	r2, [pc, #28]	; (89dcc <fiprintf+0x24>)
   89dae:	b082      	sub	sp, #8
   89db0:	ab03      	add	r3, sp, #12
   89db2:	4601      	mov	r1, r0
   89db4:	6810      	ldr	r0, [r2, #0]
   89db6:	f853 2b04 	ldr.w	r2, [r3], #4
   89dba:	9301      	str	r3, [sp, #4]
   89dbc:	f000 faca 	bl	8a354 <_vfiprintf_r>
   89dc0:	b002      	add	sp, #8
   89dc2:	f85d eb04 	ldr.w	lr, [sp], #4
   89dc6:	b003      	add	sp, #12
   89dc8:	4770      	bx	lr
   89dca:	bf00      	nop
   89dcc:	20070b30 	.word	0x20070b30

00089dd0 <__locale_mb_cur_max>:
   89dd0:	4b01      	ldr	r3, [pc, #4]	; (89dd8 <__locale_mb_cur_max+0x8>)
   89dd2:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   89dd6:	4770      	bx	lr
   89dd8:	20071374 	.word	0x20071374

00089ddc <__ascii_mbtowc>:
   89ddc:	b082      	sub	sp, #8
   89dde:	b149      	cbz	r1, 89df4 <__ascii_mbtowc+0x18>
   89de0:	b15a      	cbz	r2, 89dfa <__ascii_mbtowc+0x1e>
   89de2:	b16b      	cbz	r3, 89e00 <__ascii_mbtowc+0x24>
   89de4:	7813      	ldrb	r3, [r2, #0]
   89de6:	600b      	str	r3, [r1, #0]
   89de8:	7812      	ldrb	r2, [r2, #0]
   89dea:	1e10      	subs	r0, r2, #0
   89dec:	bf18      	it	ne
   89dee:	2001      	movne	r0, #1
   89df0:	b002      	add	sp, #8
   89df2:	4770      	bx	lr
   89df4:	a901      	add	r1, sp, #4
   89df6:	2a00      	cmp	r2, #0
   89df8:	d1f3      	bne.n	89de2 <__ascii_mbtowc+0x6>
   89dfa:	4610      	mov	r0, r2
   89dfc:	b002      	add	sp, #8
   89dfe:	4770      	bx	lr
   89e00:	f06f 0001 	mvn.w	r0, #1
   89e04:	e7f4      	b.n	89df0 <__ascii_mbtowc+0x14>
   89e06:	bf00      	nop

00089e08 <memmove>:
   89e08:	4288      	cmp	r0, r1
   89e0a:	d90d      	bls.n	89e28 <memmove+0x20>
   89e0c:	188b      	adds	r3, r1, r2
   89e0e:	4283      	cmp	r3, r0
   89e10:	d90a      	bls.n	89e28 <memmove+0x20>
   89e12:	eb00 0c02 	add.w	ip, r0, r2
   89e16:	b1ba      	cbz	r2, 89e48 <memmove+0x40>
   89e18:	4662      	mov	r2, ip
   89e1a:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   89e1e:	4299      	cmp	r1, r3
   89e20:	f802 cd01 	strb.w	ip, [r2, #-1]!
   89e24:	d1f9      	bne.n	89e1a <memmove+0x12>
   89e26:	4770      	bx	lr
   89e28:	2a0f      	cmp	r2, #15
   89e2a:	d80e      	bhi.n	89e4a <memmove+0x42>
   89e2c:	4603      	mov	r3, r0
   89e2e:	f102 3cff 	add.w	ip, r2, #4294967295
   89e32:	b14a      	cbz	r2, 89e48 <memmove+0x40>
   89e34:	f10c 0c01 	add.w	ip, ip, #1
   89e38:	3b01      	subs	r3, #1
   89e3a:	448c      	add	ip, r1
   89e3c:	f811 2b01 	ldrb.w	r2, [r1], #1
   89e40:	4561      	cmp	r1, ip
   89e42:	f803 2f01 	strb.w	r2, [r3, #1]!
   89e46:	d1f9      	bne.n	89e3c <memmove+0x34>
   89e48:	4770      	bx	lr
   89e4a:	ea40 0301 	orr.w	r3, r0, r1
   89e4e:	079b      	lsls	r3, r3, #30
   89e50:	d14f      	bne.n	89ef2 <memmove+0xea>
   89e52:	f1a2 0310 	sub.w	r3, r2, #16
   89e56:	b570      	push	{r4, r5, r6, lr}
   89e58:	f101 0c20 	add.w	ip, r1, #32
   89e5c:	f023 050f 	bic.w	r5, r3, #15
   89e60:	f101 0e10 	add.w	lr, r1, #16
   89e64:	f100 0410 	add.w	r4, r0, #16
   89e68:	44ac      	add	ip, r5
   89e6a:	091b      	lsrs	r3, r3, #4
   89e6c:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   89e70:	f10e 0e10 	add.w	lr, lr, #16
   89e74:	f844 5c10 	str.w	r5, [r4, #-16]
   89e78:	f85e 5c1c 	ldr.w	r5, [lr, #-28]
   89e7c:	3410      	adds	r4, #16
   89e7e:	f844 5c1c 	str.w	r5, [r4, #-28]
   89e82:	f85e 5c18 	ldr.w	r5, [lr, #-24]
   89e86:	f844 5c18 	str.w	r5, [r4, #-24]
   89e8a:	f85e 5c14 	ldr.w	r5, [lr, #-20]
   89e8e:	45e6      	cmp	lr, ip
   89e90:	f844 5c14 	str.w	r5, [r4, #-20]
   89e94:	d1ea      	bne.n	89e6c <memmove+0x64>
   89e96:	3301      	adds	r3, #1
   89e98:	f012 0f0c 	tst.w	r2, #12
   89e9c:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   89ea0:	f002 040f 	and.w	r4, r2, #15
   89ea4:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   89ea8:	d027      	beq.n	89efa <memmove+0xf2>
   89eaa:	468e      	mov	lr, r1
   89eac:	3c04      	subs	r4, #4
   89eae:	f024 0603 	bic.w	r6, r4, #3
   89eb2:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   89eb6:	441e      	add	r6, r3
   89eb8:	1f1c      	subs	r4, r3, #4
   89eba:	f85e 5b04 	ldr.w	r5, [lr], #4
   89ebe:	f844 5f04 	str.w	r5, [r4, #4]!
   89ec2:	42b4      	cmp	r4, r6
   89ec4:	d1f9      	bne.n	89eba <memmove+0xb2>
   89ec6:	f10c 0401 	add.w	r4, ip, #1
   89eca:	f002 0203 	and.w	r2, r2, #3
   89ece:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   89ed2:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   89ed6:	f102 3cff 	add.w	ip, r2, #4294967295
   89eda:	b14a      	cbz	r2, 89ef0 <memmove+0xe8>
   89edc:	f10c 0c01 	add.w	ip, ip, #1
   89ee0:	3b01      	subs	r3, #1
   89ee2:	448c      	add	ip, r1
   89ee4:	f811 2b01 	ldrb.w	r2, [r1], #1
   89ee8:	4561      	cmp	r1, ip
   89eea:	f803 2f01 	strb.w	r2, [r3, #1]!
   89eee:	d1f9      	bne.n	89ee4 <memmove+0xdc>
   89ef0:	bd70      	pop	{r4, r5, r6, pc}
   89ef2:	4603      	mov	r3, r0
   89ef4:	f102 3cff 	add.w	ip, r2, #4294967295
   89ef8:	e79c      	b.n	89e34 <memmove+0x2c>
   89efa:	4622      	mov	r2, r4
   89efc:	e7eb      	b.n	89ed6 <memmove+0xce>
   89efe:	bf00      	nop

00089f00 <_realloc_r>:
   89f00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89f04:	4616      	mov	r6, r2
   89f06:	2900      	cmp	r1, #0
   89f08:	f000 8098 	beq.w	8a03c <_realloc_r+0x13c>
   89f0c:	f106 050b 	add.w	r5, r6, #11
   89f10:	4680      	mov	r8, r0
   89f12:	460c      	mov	r4, r1
   89f14:	f7ff fa28 	bl	89368 <__malloc_lock>
   89f18:	2d16      	cmp	r5, #22
   89f1a:	d85d      	bhi.n	89fd8 <_realloc_r+0xd8>
   89f1c:	2510      	movs	r5, #16
   89f1e:	462a      	mov	r2, r5
   89f20:	42ae      	cmp	r6, r5
   89f22:	d85e      	bhi.n	89fe2 <_realloc_r+0xe2>
   89f24:	f854 1c04 	ldr.w	r1, [r4, #-4]
   89f28:	f1a4 0908 	sub.w	r9, r4, #8
   89f2c:	f021 0703 	bic.w	r7, r1, #3
   89f30:	4297      	cmp	r7, r2
   89f32:	da62      	bge.n	89ffa <_realloc_r+0xfa>
   89f34:	4bbc      	ldr	r3, [pc, #752]	; (8a228 <_realloc_r+0x328>)
   89f36:	eb09 0007 	add.w	r0, r9, r7
   89f3a:	f8d3 c008 	ldr.w	ip, [r3, #8]
   89f3e:	4584      	cmp	ip, r0
   89f40:	f000 8097 	beq.w	8a072 <_realloc_r+0x172>
   89f44:	f8d0 c004 	ldr.w	ip, [r0, #4]
   89f48:	f02c 0301 	bic.w	r3, ip, #1
   89f4c:	4403      	add	r3, r0
   89f4e:	685b      	ldr	r3, [r3, #4]
   89f50:	07db      	lsls	r3, r3, #31
   89f52:	d468      	bmi.n	8a026 <_realloc_r+0x126>
   89f54:	f02c 0c03 	bic.w	ip, ip, #3
   89f58:	eb07 030c 	add.w	r3, r7, ip
   89f5c:	4293      	cmp	r3, r2
   89f5e:	da47      	bge.n	89ff0 <_realloc_r+0xf0>
   89f60:	07cb      	lsls	r3, r1, #31
   89f62:	d410      	bmi.n	89f86 <_realloc_r+0x86>
   89f64:	f854 3c08 	ldr.w	r3, [r4, #-8]
   89f68:	eba9 0a03 	sub.w	sl, r9, r3
   89f6c:	f8da 3004 	ldr.w	r3, [sl, #4]
   89f70:	f023 0103 	bic.w	r1, r3, #3
   89f74:	448c      	add	ip, r1
   89f76:	44bc      	add	ip, r7
   89f78:	4594      	cmp	ip, r2
   89f7a:	f280 8111 	bge.w	8a1a0 <_realloc_r+0x2a0>
   89f7e:	187b      	adds	r3, r7, r1
   89f80:	4293      	cmp	r3, r2
   89f82:	f280 80e8 	bge.w	8a156 <_realloc_r+0x256>
   89f86:	4631      	mov	r1, r6
   89f88:	4640      	mov	r0, r8
   89f8a:	f7fe fef9 	bl	88d80 <_malloc_r>
   89f8e:	4606      	mov	r6, r0
   89f90:	b1e0      	cbz	r0, 89fcc <_realloc_r+0xcc>
   89f92:	f854 3c04 	ldr.w	r3, [r4, #-4]
   89f96:	f1a0 0208 	sub.w	r2, r0, #8
   89f9a:	f023 0301 	bic.w	r3, r3, #1
   89f9e:	444b      	add	r3, r9
   89fa0:	4293      	cmp	r3, r2
   89fa2:	f000 80d2 	beq.w	8a14a <_realloc_r+0x24a>
   89fa6:	1f3a      	subs	r2, r7, #4
   89fa8:	2a24      	cmp	r2, #36	; 0x24
   89faa:	f200 80f5 	bhi.w	8a198 <_realloc_r+0x298>
   89fae:	2a13      	cmp	r2, #19
   89fb0:	f200 80ac 	bhi.w	8a10c <_realloc_r+0x20c>
   89fb4:	4603      	mov	r3, r0
   89fb6:	4622      	mov	r2, r4
   89fb8:	6811      	ldr	r1, [r2, #0]
   89fba:	6019      	str	r1, [r3, #0]
   89fbc:	6851      	ldr	r1, [r2, #4]
   89fbe:	6059      	str	r1, [r3, #4]
   89fc0:	6892      	ldr	r2, [r2, #8]
   89fc2:	609a      	str	r2, [r3, #8]
   89fc4:	4621      	mov	r1, r4
   89fc6:	4640      	mov	r0, r8
   89fc8:	f7fe fdce 	bl	88b68 <_free_r>
   89fcc:	4640      	mov	r0, r8
   89fce:	f7ff f9d1 	bl	89374 <__malloc_unlock>
   89fd2:	4630      	mov	r0, r6
   89fd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89fd8:	f025 0507 	bic.w	r5, r5, #7
   89fdc:	2d00      	cmp	r5, #0
   89fde:	462a      	mov	r2, r5
   89fe0:	da9e      	bge.n	89f20 <_realloc_r+0x20>
   89fe2:	230c      	movs	r3, #12
   89fe4:	2600      	movs	r6, #0
   89fe6:	f8c8 3000 	str.w	r3, [r8]
   89fea:	4630      	mov	r0, r6
   89fec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89ff0:	461f      	mov	r7, r3
   89ff2:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   89ff6:	60d3      	str	r3, [r2, #12]
   89ff8:	609a      	str	r2, [r3, #8]
   89ffa:	1b7b      	subs	r3, r7, r5
   89ffc:	2b0f      	cmp	r3, #15
   89ffe:	d822      	bhi.n	8a046 <_realloc_r+0x146>
   8a000:	f8d9 3004 	ldr.w	r3, [r9, #4]
   8a004:	f003 0301 	and.w	r3, r3, #1
   8a008:	433b      	orrs	r3, r7
   8a00a:	f8c9 3004 	str.w	r3, [r9, #4]
   8a00e:	444f      	add	r7, r9
   8a010:	687b      	ldr	r3, [r7, #4]
   8a012:	f043 0301 	orr.w	r3, r3, #1
   8a016:	607b      	str	r3, [r7, #4]
   8a018:	4626      	mov	r6, r4
   8a01a:	4640      	mov	r0, r8
   8a01c:	f7ff f9aa 	bl	89374 <__malloc_unlock>
   8a020:	4630      	mov	r0, r6
   8a022:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a026:	07c9      	lsls	r1, r1, #31
   8a028:	d4ad      	bmi.n	89f86 <_realloc_r+0x86>
   8a02a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8a02e:	eba9 0a03 	sub.w	sl, r9, r3
   8a032:	f8da 1004 	ldr.w	r1, [sl, #4]
   8a036:	f021 0103 	bic.w	r1, r1, #3
   8a03a:	e7a0      	b.n	89f7e <_realloc_r+0x7e>
   8a03c:	4611      	mov	r1, r2
   8a03e:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a042:	f7fe be9d 	b.w	88d80 <_malloc_r>
   8a046:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8a04a:	f043 0301 	orr.w	r3, r3, #1
   8a04e:	f001 0101 	and.w	r1, r1, #1
   8a052:	4329      	orrs	r1, r5
   8a054:	f8c9 1004 	str.w	r1, [r9, #4]
   8a058:	eb09 0105 	add.w	r1, r9, r5
   8a05c:	604b      	str	r3, [r1, #4]
   8a05e:	444f      	add	r7, r9
   8a060:	687b      	ldr	r3, [r7, #4]
   8a062:	4640      	mov	r0, r8
   8a064:	f043 0301 	orr.w	r3, r3, #1
   8a068:	3108      	adds	r1, #8
   8a06a:	607b      	str	r3, [r7, #4]
   8a06c:	f7fe fd7c 	bl	88b68 <_free_r>
   8a070:	e7d2      	b.n	8a018 <_realloc_r+0x118>
   8a072:	f8dc 0004 	ldr.w	r0, [ip, #4]
   8a076:	f020 0b03 	bic.w	fp, r0, #3
   8a07a:	eb07 0c0b 	add.w	ip, r7, fp
   8a07e:	f105 0010 	add.w	r0, r5, #16
   8a082:	4584      	cmp	ip, r0
   8a084:	da4d      	bge.n	8a122 <_realloc_r+0x222>
   8a086:	07c9      	lsls	r1, r1, #31
   8a088:	f53f af7d 	bmi.w	89f86 <_realloc_r+0x86>
   8a08c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8a090:	eba9 0a01 	sub.w	sl, r9, r1
   8a094:	f8da 1004 	ldr.w	r1, [sl, #4]
   8a098:	f021 0103 	bic.w	r1, r1, #3
   8a09c:	448b      	add	fp, r1
   8a09e:	44bb      	add	fp, r7
   8a0a0:	4558      	cmp	r0, fp
   8a0a2:	f73f af6c 	bgt.w	89f7e <_realloc_r+0x7e>
   8a0a6:	4656      	mov	r6, sl
   8a0a8:	f8da 100c 	ldr.w	r1, [sl, #12]
   8a0ac:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8a0b0:	1f3a      	subs	r2, r7, #4
   8a0b2:	2a24      	cmp	r2, #36	; 0x24
   8a0b4:	60c1      	str	r1, [r0, #12]
   8a0b6:	6088      	str	r0, [r1, #8]
   8a0b8:	f200 80db 	bhi.w	8a272 <_realloc_r+0x372>
   8a0bc:	2a13      	cmp	r2, #19
   8a0be:	f240 80d6 	bls.w	8a26e <_realloc_r+0x36e>
   8a0c2:	6821      	ldr	r1, [r4, #0]
   8a0c4:	2a1b      	cmp	r2, #27
   8a0c6:	f8ca 1008 	str.w	r1, [sl, #8]
   8a0ca:	6861      	ldr	r1, [r4, #4]
   8a0cc:	f8ca 100c 	str.w	r1, [sl, #12]
   8a0d0:	f200 80e0 	bhi.w	8a294 <_realloc_r+0x394>
   8a0d4:	3408      	adds	r4, #8
   8a0d6:	f10a 0210 	add.w	r2, sl, #16
   8a0da:	6821      	ldr	r1, [r4, #0]
   8a0dc:	6011      	str	r1, [r2, #0]
   8a0de:	6861      	ldr	r1, [r4, #4]
   8a0e0:	6051      	str	r1, [r2, #4]
   8a0e2:	68a1      	ldr	r1, [r4, #8]
   8a0e4:	6091      	str	r1, [r2, #8]
   8a0e6:	ebab 0205 	sub.w	r2, fp, r5
   8a0ea:	eb0a 0105 	add.w	r1, sl, r5
   8a0ee:	f042 0201 	orr.w	r2, r2, #1
   8a0f2:	6099      	str	r1, [r3, #8]
   8a0f4:	604a      	str	r2, [r1, #4]
   8a0f6:	f8da 3004 	ldr.w	r3, [sl, #4]
   8a0fa:	4640      	mov	r0, r8
   8a0fc:	f003 0301 	and.w	r3, r3, #1
   8a100:	431d      	orrs	r5, r3
   8a102:	f8ca 5004 	str.w	r5, [sl, #4]
   8a106:	f7ff f935 	bl	89374 <__malloc_unlock>
   8a10a:	e76e      	b.n	89fea <_realloc_r+0xea>
   8a10c:	6823      	ldr	r3, [r4, #0]
   8a10e:	2a1b      	cmp	r2, #27
   8a110:	6003      	str	r3, [r0, #0]
   8a112:	6863      	ldr	r3, [r4, #4]
   8a114:	6043      	str	r3, [r0, #4]
   8a116:	d868      	bhi.n	8a1ea <_realloc_r+0x2ea>
   8a118:	f104 0208 	add.w	r2, r4, #8
   8a11c:	f100 0308 	add.w	r3, r0, #8
   8a120:	e74a      	b.n	89fb8 <_realloc_r+0xb8>
   8a122:	eb09 0205 	add.w	r2, r9, r5
   8a126:	ebac 0c05 	sub.w	ip, ip, r5
   8a12a:	609a      	str	r2, [r3, #8]
   8a12c:	f04c 0301 	orr.w	r3, ip, #1
   8a130:	6053      	str	r3, [r2, #4]
   8a132:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a136:	4640      	mov	r0, r8
   8a138:	f003 0301 	and.w	r3, r3, #1
   8a13c:	431d      	orrs	r5, r3
   8a13e:	f844 5c04 	str.w	r5, [r4, #-4]
   8a142:	f7ff f917 	bl	89374 <__malloc_unlock>
   8a146:	4626      	mov	r6, r4
   8a148:	e74f      	b.n	89fea <_realloc_r+0xea>
   8a14a:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8a14e:	f023 0303 	bic.w	r3, r3, #3
   8a152:	441f      	add	r7, r3
   8a154:	e751      	b.n	89ffa <_realloc_r+0xfa>
   8a156:	4656      	mov	r6, sl
   8a158:	f8da 100c 	ldr.w	r1, [sl, #12]
   8a15c:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8a160:	1f3a      	subs	r2, r7, #4
   8a162:	2a24      	cmp	r2, #36	; 0x24
   8a164:	60c1      	str	r1, [r0, #12]
   8a166:	6088      	str	r0, [r1, #8]
   8a168:	d84c      	bhi.n	8a204 <_realloc_r+0x304>
   8a16a:	2a13      	cmp	r2, #19
   8a16c:	d948      	bls.n	8a200 <_realloc_r+0x300>
   8a16e:	6821      	ldr	r1, [r4, #0]
   8a170:	2a1b      	cmp	r2, #27
   8a172:	f8ca 1008 	str.w	r1, [sl, #8]
   8a176:	6861      	ldr	r1, [r4, #4]
   8a178:	f8ca 100c 	str.w	r1, [sl, #12]
   8a17c:	d856      	bhi.n	8a22c <_realloc_r+0x32c>
   8a17e:	3408      	adds	r4, #8
   8a180:	f10a 0210 	add.w	r2, sl, #16
   8a184:	461f      	mov	r7, r3
   8a186:	6823      	ldr	r3, [r4, #0]
   8a188:	46d1      	mov	r9, sl
   8a18a:	6013      	str	r3, [r2, #0]
   8a18c:	6863      	ldr	r3, [r4, #4]
   8a18e:	6053      	str	r3, [r2, #4]
   8a190:	68a3      	ldr	r3, [r4, #8]
   8a192:	4634      	mov	r4, r6
   8a194:	6093      	str	r3, [r2, #8]
   8a196:	e730      	b.n	89ffa <_realloc_r+0xfa>
   8a198:	4621      	mov	r1, r4
   8a19a:	f7ff fe35 	bl	89e08 <memmove>
   8a19e:	e711      	b.n	89fc4 <_realloc_r+0xc4>
   8a1a0:	4656      	mov	r6, sl
   8a1a2:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8a1a6:	60cb      	str	r3, [r1, #12]
   8a1a8:	6099      	str	r1, [r3, #8]
   8a1aa:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8a1ae:	f8da 300c 	ldr.w	r3, [sl, #12]
   8a1b2:	1f3a      	subs	r2, r7, #4
   8a1b4:	2a24      	cmp	r2, #36	; 0x24
   8a1b6:	60cb      	str	r3, [r1, #12]
   8a1b8:	6099      	str	r1, [r3, #8]
   8a1ba:	d82d      	bhi.n	8a218 <_realloc_r+0x318>
   8a1bc:	2a13      	cmp	r2, #19
   8a1be:	d929      	bls.n	8a214 <_realloc_r+0x314>
   8a1c0:	6823      	ldr	r3, [r4, #0]
   8a1c2:	2a1b      	cmp	r2, #27
   8a1c4:	f8ca 3008 	str.w	r3, [sl, #8]
   8a1c8:	6863      	ldr	r3, [r4, #4]
   8a1ca:	f8ca 300c 	str.w	r3, [sl, #12]
   8a1ce:	d842      	bhi.n	8a256 <_realloc_r+0x356>
   8a1d0:	3408      	adds	r4, #8
   8a1d2:	f10a 0310 	add.w	r3, sl, #16
   8a1d6:	6822      	ldr	r2, [r4, #0]
   8a1d8:	4667      	mov	r7, ip
   8a1da:	601a      	str	r2, [r3, #0]
   8a1dc:	6862      	ldr	r2, [r4, #4]
   8a1de:	46d1      	mov	r9, sl
   8a1e0:	605a      	str	r2, [r3, #4]
   8a1e2:	68a2      	ldr	r2, [r4, #8]
   8a1e4:	4634      	mov	r4, r6
   8a1e6:	609a      	str	r2, [r3, #8]
   8a1e8:	e707      	b.n	89ffa <_realloc_r+0xfa>
   8a1ea:	68a3      	ldr	r3, [r4, #8]
   8a1ec:	2a24      	cmp	r2, #36	; 0x24
   8a1ee:	6083      	str	r3, [r0, #8]
   8a1f0:	68e3      	ldr	r3, [r4, #12]
   8a1f2:	60c3      	str	r3, [r0, #12]
   8a1f4:	d026      	beq.n	8a244 <_realloc_r+0x344>
   8a1f6:	f104 0210 	add.w	r2, r4, #16
   8a1fa:	f100 0310 	add.w	r3, r0, #16
   8a1fe:	e6db      	b.n	89fb8 <_realloc_r+0xb8>
   8a200:	4632      	mov	r2, r6
   8a202:	e7bf      	b.n	8a184 <_realloc_r+0x284>
   8a204:	4621      	mov	r1, r4
   8a206:	4630      	mov	r0, r6
   8a208:	461f      	mov	r7, r3
   8a20a:	46d1      	mov	r9, sl
   8a20c:	f7ff fdfc 	bl	89e08 <memmove>
   8a210:	4634      	mov	r4, r6
   8a212:	e6f2      	b.n	89ffa <_realloc_r+0xfa>
   8a214:	4633      	mov	r3, r6
   8a216:	e7de      	b.n	8a1d6 <_realloc_r+0x2d6>
   8a218:	4621      	mov	r1, r4
   8a21a:	4630      	mov	r0, r6
   8a21c:	4667      	mov	r7, ip
   8a21e:	46d1      	mov	r9, sl
   8a220:	f7ff fdf2 	bl	89e08 <memmove>
   8a224:	4634      	mov	r4, r6
   8a226:	e6e8      	b.n	89ffa <_realloc_r+0xfa>
   8a228:	20070f64 	.word	0x20070f64
   8a22c:	68a1      	ldr	r1, [r4, #8]
   8a22e:	2a24      	cmp	r2, #36	; 0x24
   8a230:	f8ca 1010 	str.w	r1, [sl, #16]
   8a234:	68e1      	ldr	r1, [r4, #12]
   8a236:	f8ca 1014 	str.w	r1, [sl, #20]
   8a23a:	d020      	beq.n	8a27e <_realloc_r+0x37e>
   8a23c:	3410      	adds	r4, #16
   8a23e:	f10a 0218 	add.w	r2, sl, #24
   8a242:	e79f      	b.n	8a184 <_realloc_r+0x284>
   8a244:	6923      	ldr	r3, [r4, #16]
   8a246:	f104 0218 	add.w	r2, r4, #24
   8a24a:	6103      	str	r3, [r0, #16]
   8a24c:	6963      	ldr	r3, [r4, #20]
   8a24e:	6143      	str	r3, [r0, #20]
   8a250:	f100 0318 	add.w	r3, r0, #24
   8a254:	e6b0      	b.n	89fb8 <_realloc_r+0xb8>
   8a256:	68a3      	ldr	r3, [r4, #8]
   8a258:	2a24      	cmp	r2, #36	; 0x24
   8a25a:	f8ca 3010 	str.w	r3, [sl, #16]
   8a25e:	68e3      	ldr	r3, [r4, #12]
   8a260:	f8ca 3014 	str.w	r3, [sl, #20]
   8a264:	d022      	beq.n	8a2ac <_realloc_r+0x3ac>
   8a266:	3410      	adds	r4, #16
   8a268:	f10a 0318 	add.w	r3, sl, #24
   8a26c:	e7b3      	b.n	8a1d6 <_realloc_r+0x2d6>
   8a26e:	4632      	mov	r2, r6
   8a270:	e733      	b.n	8a0da <_realloc_r+0x1da>
   8a272:	4621      	mov	r1, r4
   8a274:	4630      	mov	r0, r6
   8a276:	f7ff fdc7 	bl	89e08 <memmove>
   8a27a:	4b17      	ldr	r3, [pc, #92]	; (8a2d8 <_realloc_r+0x3d8>)
   8a27c:	e733      	b.n	8a0e6 <_realloc_r+0x1e6>
   8a27e:	6922      	ldr	r2, [r4, #16]
   8a280:	3418      	adds	r4, #24
   8a282:	f8ca 2018 	str.w	r2, [sl, #24]
   8a286:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8a28a:	f8ca 201c 	str.w	r2, [sl, #28]
   8a28e:	f10a 0220 	add.w	r2, sl, #32
   8a292:	e777      	b.n	8a184 <_realloc_r+0x284>
   8a294:	68a1      	ldr	r1, [r4, #8]
   8a296:	2a24      	cmp	r2, #36	; 0x24
   8a298:	f8ca 1010 	str.w	r1, [sl, #16]
   8a29c:	68e1      	ldr	r1, [r4, #12]
   8a29e:	f8ca 1014 	str.w	r1, [sl, #20]
   8a2a2:	d00e      	beq.n	8a2c2 <_realloc_r+0x3c2>
   8a2a4:	3410      	adds	r4, #16
   8a2a6:	f10a 0218 	add.w	r2, sl, #24
   8a2aa:	e716      	b.n	8a0da <_realloc_r+0x1da>
   8a2ac:	6923      	ldr	r3, [r4, #16]
   8a2ae:	3418      	adds	r4, #24
   8a2b0:	f8ca 3018 	str.w	r3, [sl, #24]
   8a2b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a2b8:	f8ca 301c 	str.w	r3, [sl, #28]
   8a2bc:	f10a 0320 	add.w	r3, sl, #32
   8a2c0:	e789      	b.n	8a1d6 <_realloc_r+0x2d6>
   8a2c2:	6922      	ldr	r2, [r4, #16]
   8a2c4:	3418      	adds	r4, #24
   8a2c6:	f8ca 2018 	str.w	r2, [sl, #24]
   8a2ca:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8a2ce:	f8ca 201c 	str.w	r2, [sl, #28]
   8a2d2:	f10a 0220 	add.w	r2, sl, #32
   8a2d6:	e700      	b.n	8a0da <_realloc_r+0x1da>
   8a2d8:	20070f64 	.word	0x20070f64

0008a2dc <__sprint_r.part.0>:
   8a2dc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a2e0:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8a2e2:	4690      	mov	r8, r2
   8a2e4:	049c      	lsls	r4, r3, #18
   8a2e6:	d52d      	bpl.n	8a344 <__sprint_r.part.0+0x68>
   8a2e8:	6893      	ldr	r3, [r2, #8]
   8a2ea:	6812      	ldr	r2, [r2, #0]
   8a2ec:	b343      	cbz	r3, 8a340 <__sprint_r.part.0+0x64>
   8a2ee:	468b      	mov	fp, r1
   8a2f0:	4606      	mov	r6, r0
   8a2f2:	f102 0908 	add.w	r9, r2, #8
   8a2f6:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   8a2fa:	ea5f 079a 	movs.w	r7, sl, lsr #2
   8a2fe:	d015      	beq.n	8a32c <__sprint_r.part.0+0x50>
   8a300:	2400      	movs	r4, #0
   8a302:	3d04      	subs	r5, #4
   8a304:	e001      	b.n	8a30a <__sprint_r.part.0+0x2e>
   8a306:	42a7      	cmp	r7, r4
   8a308:	d00e      	beq.n	8a328 <__sprint_r.part.0+0x4c>
   8a30a:	465a      	mov	r2, fp
   8a30c:	4630      	mov	r0, r6
   8a30e:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8a312:	f001 f955 	bl	8b5c0 <_fputwc_r>
   8a316:	1c43      	adds	r3, r0, #1
   8a318:	f104 0401 	add.w	r4, r4, #1
   8a31c:	d1f3      	bne.n	8a306 <__sprint_r.part.0+0x2a>
   8a31e:	2300      	movs	r3, #0
   8a320:	e9c8 3301 	strd	r3, r3, [r8, #4]
   8a324:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a328:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8a32c:	f02a 0a03 	bic.w	sl, sl, #3
   8a330:	eba3 030a 	sub.w	r3, r3, sl
   8a334:	f8c8 3008 	str.w	r3, [r8, #8]
   8a338:	f109 0908 	add.w	r9, r9, #8
   8a33c:	2b00      	cmp	r3, #0
   8a33e:	d1da      	bne.n	8a2f6 <__sprint_r.part.0+0x1a>
   8a340:	2000      	movs	r0, #0
   8a342:	e7ec      	b.n	8a31e <__sprint_r.part.0+0x42>
   8a344:	f001 f970 	bl	8b628 <__sfvwrite_r>
   8a348:	2300      	movs	r3, #0
   8a34a:	e9c8 3301 	strd	r3, r3, [r8, #4]
   8a34e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a352:	bf00      	nop

0008a354 <_vfiprintf_r>:
   8a354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a358:	b0bd      	sub	sp, #244	; 0xf4
   8a35a:	461c      	mov	r4, r3
   8a35c:	4617      	mov	r7, r2
   8a35e:	e9cd 3005 	strd	r3, r0, [sp, #20]
   8a362:	9102      	str	r1, [sp, #8]
   8a364:	b118      	cbz	r0, 8a36e <_vfiprintf_r+0x1a>
   8a366:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8a368:	2b00      	cmp	r3, #0
   8a36a:	f000 8277 	beq.w	8a85c <_vfiprintf_r+0x508>
   8a36e:	9a02      	ldr	r2, [sp, #8]
   8a370:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8a372:	07de      	lsls	r6, r3, #31
   8a374:	f140 8184 	bpl.w	8a680 <_vfiprintf_r+0x32c>
   8a378:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   8a37c:	b28a      	uxth	r2, r1
   8a37e:	0490      	lsls	r0, r2, #18
   8a380:	d408      	bmi.n	8a394 <_vfiprintf_r+0x40>
   8a382:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   8a386:	9902      	ldr	r1, [sp, #8]
   8a388:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8a38a:	818a      	strh	r2, [r1, #12]
   8a38c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8a390:	b292      	uxth	r2, r2
   8a392:	664b      	str	r3, [r1, #100]	; 0x64
   8a394:	0711      	lsls	r1, r2, #28
   8a396:	f140 80ec 	bpl.w	8a572 <_vfiprintf_r+0x21e>
   8a39a:	9b02      	ldr	r3, [sp, #8]
   8a39c:	691b      	ldr	r3, [r3, #16]
   8a39e:	2b00      	cmp	r3, #0
   8a3a0:	f000 80e7 	beq.w	8a572 <_vfiprintf_r+0x21e>
   8a3a4:	f002 031a 	and.w	r3, r2, #26
   8a3a8:	2b0a      	cmp	r3, #10
   8a3aa:	f000 80f0 	beq.w	8a58e <_vfiprintf_r+0x23a>
   8a3ae:	ab13      	add	r3, sp, #76	; 0x4c
   8a3b0:	9310      	str	r3, [sp, #64]	; 0x40
   8a3b2:	2300      	movs	r3, #0
   8a3b4:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   8a3b8:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   8a3bc:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   8a3c0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8a3c4:	9304      	str	r3, [sp, #16]
   8a3c6:	783b      	ldrb	r3, [r7, #0]
   8a3c8:	2b00      	cmp	r3, #0
   8a3ca:	f000 8146 	beq.w	8a65a <_vfiprintf_r+0x306>
   8a3ce:	463c      	mov	r4, r7
   8a3d0:	e004      	b.n	8a3dc <_vfiprintf_r+0x88>
   8a3d2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8a3d6:	2b00      	cmp	r3, #0
   8a3d8:	f000 8121 	beq.w	8a61e <_vfiprintf_r+0x2ca>
   8a3dc:	2b25      	cmp	r3, #37	; 0x25
   8a3de:	d1f8      	bne.n	8a3d2 <_vfiprintf_r+0x7e>
   8a3e0:	1be5      	subs	r5, r4, r7
   8a3e2:	f040 811e 	bne.w	8a622 <_vfiprintf_r+0x2ce>
   8a3e6:	7823      	ldrb	r3, [r4, #0]
   8a3e8:	2b00      	cmp	r3, #0
   8a3ea:	f000 8136 	beq.w	8a65a <_vfiprintf_r+0x306>
   8a3ee:	f04f 0300 	mov.w	r3, #0
   8a3f2:	2500      	movs	r5, #0
   8a3f4:	f04f 3bff 	mov.w	fp, #4294967295
   8a3f8:	f04f 082b 	mov.w	r8, #43	; 0x2b
   8a3fc:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8a400:	7863      	ldrb	r3, [r4, #1]
   8a402:	9503      	str	r5, [sp, #12]
   8a404:	1c67      	adds	r7, r4, #1
   8a406:	3701      	adds	r7, #1
   8a408:	f1a3 0220 	sub.w	r2, r3, #32
   8a40c:	2a5a      	cmp	r2, #90	; 0x5a
   8a40e:	f200 8146 	bhi.w	8a69e <_vfiprintf_r+0x34a>
   8a412:	e8df f012 	tbh	[pc, r2, lsl #1]
   8a416:	02a1      	.short	0x02a1
   8a418:	01440144 	.word	0x01440144
   8a41c:	0144029d 	.word	0x0144029d
   8a420:	01440144 	.word	0x01440144
   8a424:	0144027c 	.word	0x0144027c
   8a428:	006a0144 	.word	0x006a0144
   8a42c:	01440253 	.word	0x01440253
   8a430:	02af0229 	.word	0x02af0229
   8a434:	02ab0144 	.word	0x02ab0144
   8a438:	005b005b 	.word	0x005b005b
   8a43c:	005b005b 	.word	0x005b005b
   8a440:	005b005b 	.word	0x005b005b
   8a444:	005b005b 	.word	0x005b005b
   8a448:	0144005b 	.word	0x0144005b
   8a44c:	01440144 	.word	0x01440144
   8a450:	01440144 	.word	0x01440144
   8a454:	01440144 	.word	0x01440144
   8a458:	01440144 	.word	0x01440144
   8a45c:	00780213 	.word	0x00780213
   8a460:	01440144 	.word	0x01440144
   8a464:	01440144 	.word	0x01440144
   8a468:	01440144 	.word	0x01440144
   8a46c:	01440144 	.word	0x01440144
   8a470:	01440144 	.word	0x01440144
   8a474:	014400d1 	.word	0x014400d1
   8a478:	01440144 	.word	0x01440144
   8a47c:	014401f7 	.word	0x014401f7
   8a480:	01440241 	.word	0x01440241
   8a484:	05210144 	.word	0x05210144
   8a488:	01440144 	.word	0x01440144
   8a48c:	01440144 	.word	0x01440144
   8a490:	01440144 	.word	0x01440144
   8a494:	01440144 	.word	0x01440144
   8a498:	01440144 	.word	0x01440144
   8a49c:	007a0213 	.word	0x007a0213
   8a4a0:	01440144 	.word	0x01440144
   8a4a4:	02370144 	.word	0x02370144
   8a4a8:	0074007a 	.word	0x0074007a
   8a4ac:	022d0144 	.word	0x022d0144
   8a4b0:	02690144 	.word	0x02690144
   8a4b4:	025700d3 	.word	0x025700d3
   8a4b8:	01440074 	.word	0x01440074
   8a4bc:	007201f7 	.word	0x007201f7
   8a4c0:	01440541 	.word	0x01440541
   8a4c4:	05430144 	.word	0x05430144
   8a4c8:	00720144 	.word	0x00720144
   8a4cc:	2100      	movs	r1, #0
   8a4ce:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8a4d2:	f817 3b01 	ldrb.w	r3, [r7], #1
   8a4d6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8a4da:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   8a4de:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8a4e2:	2a09      	cmp	r2, #9
   8a4e4:	d9f5      	bls.n	8a4d2 <_vfiprintf_r+0x17e>
   8a4e6:	9103      	str	r1, [sp, #12]
   8a4e8:	e78e      	b.n	8a408 <_vfiprintf_r+0xb4>
   8a4ea:	9b05      	ldr	r3, [sp, #20]
   8a4ec:	f853 2b04 	ldr.w	r2, [r3], #4
   8a4f0:	2a00      	cmp	r2, #0
   8a4f2:	9203      	str	r2, [sp, #12]
   8a4f4:	9305      	str	r3, [sp, #20]
   8a4f6:	f2c0 81b4 	blt.w	8a862 <_vfiprintf_r+0x50e>
   8a4fa:	783b      	ldrb	r3, [r7, #0]
   8a4fc:	e783      	b.n	8a406 <_vfiprintf_r+0xb2>
   8a4fe:	783b      	ldrb	r3, [r7, #0]
   8a500:	f045 0520 	orr.w	r5, r5, #32
   8a504:	e77f      	b.n	8a406 <_vfiprintf_r+0xb2>
   8a506:	f045 0510 	orr.w	r5, r5, #16
   8a50a:	06ac      	lsls	r4, r5, #26
   8a50c:	9e05      	ldr	r6, [sp, #20]
   8a50e:	f140 816b 	bpl.w	8a7e8 <_vfiprintf_r+0x494>
   8a512:	3607      	adds	r6, #7
   8a514:	f026 0607 	bic.w	r6, r6, #7
   8a518:	4632      	mov	r2, r6
   8a51a:	6873      	ldr	r3, [r6, #4]
   8a51c:	f852 6b08 	ldr.w	r6, [r2], #8
   8a520:	4698      	mov	r8, r3
   8a522:	9205      	str	r2, [sp, #20]
   8a524:	2b00      	cmp	r3, #0
   8a526:	f2c0 8449 	blt.w	8adbc <_vfiprintf_r+0xa68>
   8a52a:	f1bb 3fff 	cmp.w	fp, #4294967295
   8a52e:	f000 8531 	beq.w	8af94 <_vfiprintf_r+0xc40>
   8a532:	ea56 0308 	orrs.w	r3, r6, r8
   8a536:	f025 0a80 	bic.w	sl, r5, #128	; 0x80
   8a53a:	f000 8425 	beq.w	8ad88 <_vfiprintf_r+0xa34>
   8a53e:	2e0a      	cmp	r6, #10
   8a540:	f178 0300 	sbcs.w	r3, r8, #0
   8a544:	f080 84e1 	bcs.w	8af0a <_vfiprintf_r+0xbb6>
   8a548:	2301      	movs	r3, #1
   8a54a:	4655      	mov	r5, sl
   8a54c:	3630      	adds	r6, #48	; 0x30
   8a54e:	f88d 60ef 	strb.w	r6, [sp, #239]	; 0xef
   8a552:	9301      	str	r3, [sp, #4]
   8a554:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   8a558:	f8dd 8004 	ldr.w	r8, [sp, #4]
   8a55c:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   8a560:	45d8      	cmp	r8, fp
   8a562:	bfb8      	it	lt
   8a564:	46d8      	movlt	r8, fp
   8a566:	2b00      	cmp	r3, #0
   8a568:	f000 80a8 	beq.w	8a6bc <_vfiprintf_r+0x368>
   8a56c:	f108 0801 	add.w	r8, r8, #1
   8a570:	e0a4      	b.n	8a6bc <_vfiprintf_r+0x368>
   8a572:	9d02      	ldr	r5, [sp, #8]
   8a574:	9806      	ldr	r0, [sp, #24]
   8a576:	4629      	mov	r1, r5
   8a578:	f000 fe08 	bl	8b18c <__swsetup_r>
   8a57c:	2800      	cmp	r0, #0
   8a57e:	f040 8594 	bne.w	8b0aa <_vfiprintf_r+0xd56>
   8a582:	89aa      	ldrh	r2, [r5, #12]
   8a584:	f002 031a 	and.w	r3, r2, #26
   8a588:	2b0a      	cmp	r3, #10
   8a58a:	f47f af10 	bne.w	8a3ae <_vfiprintf_r+0x5a>
   8a58e:	9902      	ldr	r1, [sp, #8]
   8a590:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   8a594:	2b00      	cmp	r3, #0
   8a596:	f6ff af0a 	blt.w	8a3ae <_vfiprintf_r+0x5a>
   8a59a:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8a59c:	07de      	lsls	r6, r3, #31
   8a59e:	d402      	bmi.n	8a5a6 <_vfiprintf_r+0x252>
   8a5a0:	0595      	lsls	r5, r2, #22
   8a5a2:	f140 8562 	bpl.w	8b06a <_vfiprintf_r+0xd16>
   8a5a6:	4623      	mov	r3, r4
   8a5a8:	463a      	mov	r2, r7
   8a5aa:	9902      	ldr	r1, [sp, #8]
   8a5ac:	9806      	ldr	r0, [sp, #24]
   8a5ae:	b03d      	add	sp, #244	; 0xf4
   8a5b0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a5b4:	f000 bd9a 	b.w	8b0ec <__sbprintf>
   8a5b8:	f045 0510 	orr.w	r5, r5, #16
   8a5bc:	f015 0820 	ands.w	r8, r5, #32
   8a5c0:	f000 8103 	beq.w	8a7ca <_vfiprintf_r+0x476>
   8a5c4:	9e05      	ldr	r6, [sp, #20]
   8a5c6:	3607      	adds	r6, #7
   8a5c8:	f026 0607 	bic.w	r6, r6, #7
   8a5cc:	4633      	mov	r3, r6
   8a5ce:	f8d6 8004 	ldr.w	r8, [r6, #4]
   8a5d2:	f853 6b08 	ldr.w	r6, [r3], #8
   8a5d6:	9305      	str	r3, [sp, #20]
   8a5d8:	2300      	movs	r3, #0
   8a5da:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   8a5de:	f04f 0200 	mov.w	r2, #0
   8a5e2:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   8a5e6:	f1bb 3fff 	cmp.w	fp, #4294967295
   8a5ea:	f000 81dd 	beq.w	8a9a8 <_vfiprintf_r+0x654>
   8a5ee:	ea56 0208 	orrs.w	r2, r6, r8
   8a5f2:	f02a 0580 	bic.w	r5, sl, #128	; 0x80
   8a5f6:	f040 81d6 	bne.w	8a9a6 <_vfiprintf_r+0x652>
   8a5fa:	f1bb 0f00 	cmp.w	fp, #0
   8a5fe:	f040 84cc 	bne.w	8af9a <_vfiprintf_r+0xc46>
   8a602:	2b00      	cmp	r3, #0
   8a604:	f040 83c5 	bne.w	8ad92 <_vfiprintf_r+0xa3e>
   8a608:	f01a 0301 	ands.w	r3, sl, #1
   8a60c:	9301      	str	r3, [sp, #4]
   8a60e:	f000 83ec 	beq.w	8adea <_vfiprintf_r+0xa96>
   8a612:	2330      	movs	r3, #48	; 0x30
   8a614:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   8a618:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
   8a61c:	e79c      	b.n	8a558 <_vfiprintf_r+0x204>
   8a61e:	1be5      	subs	r5, r4, r7
   8a620:	d01b      	beq.n	8a65a <_vfiprintf_r+0x306>
   8a622:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8a624:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8a626:	3301      	adds	r3, #1
   8a628:	442a      	add	r2, r5
   8a62a:	2b07      	cmp	r3, #7
   8a62c:	e9c9 7500 	strd	r7, r5, [r9]
   8a630:	9212      	str	r2, [sp, #72]	; 0x48
   8a632:	9311      	str	r3, [sp, #68]	; 0x44
   8a634:	dc05      	bgt.n	8a642 <_vfiprintf_r+0x2ee>
   8a636:	f109 0908 	add.w	r9, r9, #8
   8a63a:	9b04      	ldr	r3, [sp, #16]
   8a63c:	442b      	add	r3, r5
   8a63e:	9304      	str	r3, [sp, #16]
   8a640:	e6d1      	b.n	8a3e6 <_vfiprintf_r+0x92>
   8a642:	2a00      	cmp	r2, #0
   8a644:	f000 839c 	beq.w	8ad80 <_vfiprintf_r+0xa2c>
   8a648:	9902      	ldr	r1, [sp, #8]
   8a64a:	9806      	ldr	r0, [sp, #24]
   8a64c:	aa10      	add	r2, sp, #64	; 0x40
   8a64e:	f7ff fe45 	bl	8a2dc <__sprint_r.part.0>
   8a652:	b940      	cbnz	r0, 8a666 <_vfiprintf_r+0x312>
   8a654:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8a658:	e7ef      	b.n	8a63a <_vfiprintf_r+0x2e6>
   8a65a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a65c:	2b00      	cmp	r3, #0
   8a65e:	f040 8515 	bne.w	8b08c <_vfiprintf_r+0xd38>
   8a662:	2300      	movs	r3, #0
   8a664:	9311      	str	r3, [sp, #68]	; 0x44
   8a666:	9a02      	ldr	r2, [sp, #8]
   8a668:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8a66a:	07d9      	lsls	r1, r3, #31
   8a66c:	f140 80a2 	bpl.w	8a7b4 <_vfiprintf_r+0x460>
   8a670:	8993      	ldrh	r3, [r2, #12]
   8a672:	065b      	lsls	r3, r3, #25
   8a674:	f100 8525 	bmi.w	8b0c2 <_vfiprintf_r+0xd6e>
   8a678:	9804      	ldr	r0, [sp, #16]
   8a67a:	b03d      	add	sp, #244	; 0xf4
   8a67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a680:	9b02      	ldr	r3, [sp, #8]
   8a682:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   8a686:	058d      	lsls	r5, r1, #22
   8a688:	b28a      	uxth	r2, r1
   8a68a:	f53f ae78 	bmi.w	8a37e <_vfiprintf_r+0x2a>
   8a68e:	461d      	mov	r5, r3
   8a690:	6d98      	ldr	r0, [r3, #88]	; 0x58
   8a692:	f7fe fb71 	bl	88d78 <__retarget_lock_acquire_recursive>
   8a696:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   8a69a:	b28a      	uxth	r2, r1
   8a69c:	e66f      	b.n	8a37e <_vfiprintf_r+0x2a>
   8a69e:	2b00      	cmp	r3, #0
   8a6a0:	d0db      	beq.n	8a65a <_vfiprintf_r+0x306>
   8a6a2:	f04f 0801 	mov.w	r8, #1
   8a6a6:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   8a6aa:	f04f 0300 	mov.w	r3, #0
   8a6ae:	ac23      	add	r4, sp, #140	; 0x8c
   8a6b0:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8a6b4:	f8cd 8004 	str.w	r8, [sp, #4]
   8a6b8:	f04f 0b00 	mov.w	fp, #0
   8a6bc:	f015 0302 	ands.w	r3, r5, #2
   8a6c0:	9307      	str	r3, [sp, #28]
   8a6c2:	bf18      	it	ne
   8a6c4:	f108 0802 	addne.w	r8, r8, #2
   8a6c8:	f015 0384 	ands.w	r3, r5, #132	; 0x84
   8a6cc:	9308      	str	r3, [sp, #32]
   8a6ce:	d105      	bne.n	8a6dc <_vfiprintf_r+0x388>
   8a6d0:	9b03      	ldr	r3, [sp, #12]
   8a6d2:	eba3 0608 	sub.w	r6, r3, r8
   8a6d6:	2e00      	cmp	r6, #0
   8a6d8:	f300 828a 	bgt.w	8abf0 <_vfiprintf_r+0x89c>
   8a6dc:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8a6e0:	1c48      	adds	r0, r1, #1
   8a6e2:	f89d 603b 	ldrb.w	r6, [sp, #59]	; 0x3b
   8a6e6:	b176      	cbz	r6, 8a706 <_vfiprintf_r+0x3b2>
   8a6e8:	2101      	movs	r1, #1
   8a6ea:	3201      	adds	r2, #1
   8a6ec:	f10d 063b 	add.w	r6, sp, #59	; 0x3b
   8a6f0:	2807      	cmp	r0, #7
   8a6f2:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8a6f6:	e9c9 6100 	strd	r6, r1, [r9]
   8a6fa:	f300 8258 	bgt.w	8abae <_vfiprintf_r+0x85a>
   8a6fe:	4601      	mov	r1, r0
   8a700:	f109 0908 	add.w	r9, r9, #8
   8a704:	3001      	adds	r0, #1
   8a706:	9b07      	ldr	r3, [sp, #28]
   8a708:	b1d3      	cbz	r3, 8a740 <_vfiprintf_r+0x3ec>
   8a70a:	2302      	movs	r3, #2
   8a70c:	3202      	adds	r2, #2
   8a70e:	f8c9 3004 	str.w	r3, [r9, #4]
   8a712:	2807      	cmp	r0, #7
   8a714:	ab0f      	add	r3, sp, #60	; 0x3c
   8a716:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8a71a:	f8c9 3000 	str.w	r3, [r9]
   8a71e:	f340 8262 	ble.w	8abe6 <_vfiprintf_r+0x892>
   8a722:	2a00      	cmp	r2, #0
   8a724:	f000 8327 	beq.w	8ad76 <_vfiprintf_r+0xa22>
   8a728:	9902      	ldr	r1, [sp, #8]
   8a72a:	9806      	ldr	r0, [sp, #24]
   8a72c:	aa10      	add	r2, sp, #64	; 0x40
   8a72e:	f7ff fdd5 	bl	8a2dc <__sprint_r.part.0>
   8a732:	2800      	cmp	r0, #0
   8a734:	d197      	bne.n	8a666 <_vfiprintf_r+0x312>
   8a736:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8a73a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8a73e:	1c48      	adds	r0, r1, #1
   8a740:	9b08      	ldr	r3, [sp, #32]
   8a742:	2b80      	cmp	r3, #128	; 0x80
   8a744:	f000 8171 	beq.w	8aa2a <_vfiprintf_r+0x6d6>
   8a748:	9b01      	ldr	r3, [sp, #4]
   8a74a:	ebab 0603 	sub.w	r6, fp, r3
   8a74e:	2e00      	cmp	r6, #0
   8a750:	f300 81cf 	bgt.w	8aaf2 <_vfiprintf_r+0x79e>
   8a754:	9b01      	ldr	r3, [sp, #4]
   8a756:	2807      	cmp	r0, #7
   8a758:	441a      	add	r2, r3
   8a75a:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8a75e:	f8c9 4000 	str.w	r4, [r9]
   8a762:	f8c9 3004 	str.w	r3, [r9, #4]
   8a766:	f340 815d 	ble.w	8aa24 <_vfiprintf_r+0x6d0>
   8a76a:	2a00      	cmp	r2, #0
   8a76c:	f000 8293 	beq.w	8ac96 <_vfiprintf_r+0x942>
   8a770:	9902      	ldr	r1, [sp, #8]
   8a772:	9806      	ldr	r0, [sp, #24]
   8a774:	aa10      	add	r2, sp, #64	; 0x40
   8a776:	f7ff fdb1 	bl	8a2dc <__sprint_r.part.0>
   8a77a:	2800      	cmp	r0, #0
   8a77c:	f47f af73 	bne.w	8a666 <_vfiprintf_r+0x312>
   8a780:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8a782:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8a786:	0768      	lsls	r0, r5, #29
   8a788:	d505      	bpl.n	8a796 <_vfiprintf_r+0x442>
   8a78a:	9b03      	ldr	r3, [sp, #12]
   8a78c:	eba3 0408 	sub.w	r4, r3, r8
   8a790:	2c00      	cmp	r4, #0
   8a792:	f300 828a 	bgt.w	8acaa <_vfiprintf_r+0x956>
   8a796:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   8a79a:	4541      	cmp	r1, r8
   8a79c:	bfac      	ite	ge
   8a79e:	185b      	addge	r3, r3, r1
   8a7a0:	4443      	addlt	r3, r8
   8a7a2:	9304      	str	r3, [sp, #16]
   8a7a4:	2a00      	cmp	r2, #0
   8a7a6:	f040 81f3 	bne.w	8ab90 <_vfiprintf_r+0x83c>
   8a7aa:	2300      	movs	r3, #0
   8a7ac:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8a7b0:	9311      	str	r3, [sp, #68]	; 0x44
   8a7b2:	e608      	b.n	8a3c6 <_vfiprintf_r+0x72>
   8a7b4:	9b02      	ldr	r3, [sp, #8]
   8a7b6:	899b      	ldrh	r3, [r3, #12]
   8a7b8:	059a      	lsls	r2, r3, #22
   8a7ba:	f53f af5a 	bmi.w	8a672 <_vfiprintf_r+0x31e>
   8a7be:	9c02      	ldr	r4, [sp, #8]
   8a7c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a7c2:	f7fe fadb 	bl	88d7c <__retarget_lock_release_recursive>
   8a7c6:	89a3      	ldrh	r3, [r4, #12]
   8a7c8:	e753      	b.n	8a672 <_vfiprintf_r+0x31e>
   8a7ca:	f015 0310 	ands.w	r3, r5, #16
   8a7ce:	f040 8318 	bne.w	8ae02 <_vfiprintf_r+0xaae>
   8a7d2:	f015 0240 	ands.w	r2, r5, #64	; 0x40
   8a7d6:	f000 8310 	beq.w	8adfa <_vfiprintf_r+0xaa6>
   8a7da:	9e05      	ldr	r6, [sp, #20]
   8a7dc:	4698      	mov	r8, r3
   8a7de:	f856 3b04 	ldr.w	r3, [r6], #4
   8a7e2:	9605      	str	r6, [sp, #20]
   8a7e4:	b29e      	uxth	r6, r3
   8a7e6:	e6f7      	b.n	8a5d8 <_vfiprintf_r+0x284>
   8a7e8:	f856 3b04 	ldr.w	r3, [r6], #4
   8a7ec:	06e8      	lsls	r0, r5, #27
   8a7ee:	9605      	str	r6, [sp, #20]
   8a7f0:	f100 8310 	bmi.w	8ae14 <_vfiprintf_r+0xac0>
   8a7f4:	0669      	lsls	r1, r5, #25
   8a7f6:	f140 830a 	bpl.w	8ae0e <_vfiprintf_r+0xaba>
   8a7fa:	f343 38c0 	sbfx	r8, r3, #15, #1
   8a7fe:	b21e      	sxth	r6, r3
   8a800:	4643      	mov	r3, r8
   8a802:	e68f      	b.n	8a524 <_vfiprintf_r+0x1d0>
   8a804:	f04f 0300 	mov.w	r3, #0
   8a808:	9e05      	ldr	r6, [sp, #20]
   8a80a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8a80e:	f856 4b04 	ldr.w	r4, [r6], #4
   8a812:	2c00      	cmp	r4, #0
   8a814:	f000 83cf 	beq.w	8afb6 <_vfiprintf_r+0xc62>
   8a818:	f1bb 3fff 	cmp.w	fp, #4294967295
   8a81c:	f000 8341 	beq.w	8aea2 <_vfiprintf_r+0xb4e>
   8a820:	465a      	mov	r2, fp
   8a822:	2100      	movs	r1, #0
   8a824:	4620      	mov	r0, r4
   8a826:	f7fe fd57 	bl	892d8 <memchr>
   8a82a:	2800      	cmp	r0, #0
   8a82c:	f000 8422 	beq.w	8b074 <_vfiprintf_r+0xd20>
   8a830:	1b03      	subs	r3, r0, r4
   8a832:	f04f 0b00 	mov.w	fp, #0
   8a836:	9605      	str	r6, [sp, #20]
   8a838:	9301      	str	r3, [sp, #4]
   8a83a:	e68d      	b.n	8a558 <_vfiprintf_r+0x204>
   8a83c:	f04f 0300 	mov.w	r3, #0
   8a840:	f04f 0801 	mov.w	r8, #1
   8a844:	9e05      	ldr	r6, [sp, #20]
   8a846:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8a84a:	f856 3b04 	ldr.w	r3, [r6], #4
   8a84e:	ac23      	add	r4, sp, #140	; 0x8c
   8a850:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   8a854:	9605      	str	r6, [sp, #20]
   8a856:	f8cd 8004 	str.w	r8, [sp, #4]
   8a85a:	e72d      	b.n	8a6b8 <_vfiprintf_r+0x364>
   8a85c:	f000 fdce 	bl	8b3fc <__sinit>
   8a860:	e585      	b.n	8a36e <_vfiprintf_r+0x1a>
   8a862:	9b03      	ldr	r3, [sp, #12]
   8a864:	425b      	negs	r3, r3
   8a866:	9303      	str	r3, [sp, #12]
   8a868:	783b      	ldrb	r3, [r7, #0]
   8a86a:	f045 0504 	orr.w	r5, r5, #4
   8a86e:	e5ca      	b.n	8a406 <_vfiprintf_r+0xb2>
   8a870:	783b      	ldrb	r3, [r7, #0]
   8a872:	2b6c      	cmp	r3, #108	; 0x6c
   8a874:	bf03      	ittte	eq
   8a876:	787b      	ldrbeq	r3, [r7, #1]
   8a878:	f045 0520 	orreq.w	r5, r5, #32
   8a87c:	3701      	addeq	r7, #1
   8a87e:	f045 0510 	orrne.w	r5, r5, #16
   8a882:	e5c0      	b.n	8a406 <_vfiprintf_r+0xb2>
   8a884:	783b      	ldrb	r3, [r7, #0]
   8a886:	2b68      	cmp	r3, #104	; 0x68
   8a888:	bf03      	ittte	eq
   8a88a:	787b      	ldrbeq	r3, [r7, #1]
   8a88c:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
   8a890:	3701      	addeq	r7, #1
   8a892:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
   8a896:	e5b6      	b.n	8a406 <_vfiprintf_r+0xb2>
   8a898:	f045 0a10 	orr.w	sl, r5, #16
   8a89c:	f01a 0820 	ands.w	r8, sl, #32
   8a8a0:	f000 827e 	beq.w	8ada0 <_vfiprintf_r+0xa4c>
   8a8a4:	9e05      	ldr	r6, [sp, #20]
   8a8a6:	2301      	movs	r3, #1
   8a8a8:	3607      	adds	r6, #7
   8a8aa:	f026 0607 	bic.w	r6, r6, #7
   8a8ae:	4632      	mov	r2, r6
   8a8b0:	f8d6 8004 	ldr.w	r8, [r6, #4]
   8a8b4:	f852 6b08 	ldr.w	r6, [r2], #8
   8a8b8:	9205      	str	r2, [sp, #20]
   8a8ba:	e690      	b.n	8a5de <_vfiprintf_r+0x28a>
   8a8bc:	783b      	ldrb	r3, [r7, #0]
   8a8be:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
   8a8c2:	e5a0      	b.n	8a406 <_vfiprintf_r+0xb2>
   8a8c4:	2230      	movs	r2, #48	; 0x30
   8a8c6:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   8a8ca:	2278      	movs	r2, #120	; 0x78
   8a8cc:	9b05      	ldr	r3, [sp, #20]
   8a8ce:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
   8a8d2:	f853 6b04 	ldr.w	r6, [r3], #4
   8a8d6:	4abe      	ldr	r2, [pc, #760]	; (8abd0 <_vfiprintf_r+0x87c>)
   8a8d8:	9305      	str	r3, [sp, #20]
   8a8da:	f04f 0800 	mov.w	r8, #0
   8a8de:	2302      	movs	r3, #2
   8a8e0:	f045 0a02 	orr.w	sl, r5, #2
   8a8e4:	9209      	str	r2, [sp, #36]	; 0x24
   8a8e6:	e67a      	b.n	8a5de <_vfiprintf_r+0x28a>
   8a8e8:	06ae      	lsls	r6, r5, #26
   8a8ea:	f100 82a4 	bmi.w	8ae36 <_vfiprintf_r+0xae2>
   8a8ee:	06ec      	lsls	r4, r5, #27
   8a8f0:	f100 8359 	bmi.w	8afa6 <_vfiprintf_r+0xc52>
   8a8f4:	0668      	lsls	r0, r5, #25
   8a8f6:	f100 83b0 	bmi.w	8b05a <_vfiprintf_r+0xd06>
   8a8fa:	05a9      	lsls	r1, r5, #22
   8a8fc:	f140 8353 	bpl.w	8afa6 <_vfiprintf_r+0xc52>
   8a900:	9e05      	ldr	r6, [sp, #20]
   8a902:	9a04      	ldr	r2, [sp, #16]
   8a904:	f856 3b04 	ldr.w	r3, [r6], #4
   8a908:	701a      	strb	r2, [r3, #0]
   8a90a:	9605      	str	r6, [sp, #20]
   8a90c:	e55b      	b.n	8a3c6 <_vfiprintf_r+0x72>
   8a90e:	9c06      	ldr	r4, [sp, #24]
   8a910:	4620      	mov	r0, r4
   8a912:	f7fe fa29 	bl	88d68 <_localeconv_r>
   8a916:	6843      	ldr	r3, [r0, #4]
   8a918:	4618      	mov	r0, r3
   8a91a:	930b      	str	r3, [sp, #44]	; 0x2c
   8a91c:	f7fb fafe 	bl	85f1c <strlen>
   8a920:	4603      	mov	r3, r0
   8a922:	4620      	mov	r0, r4
   8a924:	930c      	str	r3, [sp, #48]	; 0x30
   8a926:	461c      	mov	r4, r3
   8a928:	f7fe fa1e 	bl	88d68 <_localeconv_r>
   8a92c:	6883      	ldr	r3, [r0, #8]
   8a92e:	930a      	str	r3, [sp, #40]	; 0x28
   8a930:	2c00      	cmp	r4, #0
   8a932:	f43f ade2 	beq.w	8a4fa <_vfiprintf_r+0x1a6>
   8a936:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a938:	2b00      	cmp	r3, #0
   8a93a:	f43f adde 	beq.w	8a4fa <_vfiprintf_r+0x1a6>
   8a93e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8a940:	781b      	ldrb	r3, [r3, #0]
   8a942:	2b00      	cmp	r3, #0
   8a944:	f43f add9 	beq.w	8a4fa <_vfiprintf_r+0x1a6>
   8a948:	783b      	ldrb	r3, [r7, #0]
   8a94a:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
   8a94e:	e55a      	b.n	8a406 <_vfiprintf_r+0xb2>
   8a950:	783b      	ldrb	r3, [r7, #0]
   8a952:	f045 0501 	orr.w	r5, r5, #1
   8a956:	e556      	b.n	8a406 <_vfiprintf_r+0xb2>
   8a958:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   8a95c:	2b00      	cmp	r3, #0
   8a95e:	f47f adcc 	bne.w	8a4fa <_vfiprintf_r+0x1a6>
   8a962:	2320      	movs	r3, #32
   8a964:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8a968:	783b      	ldrb	r3, [r7, #0]
   8a96a:	e54c      	b.n	8a406 <_vfiprintf_r+0xb2>
   8a96c:	783b      	ldrb	r3, [r7, #0]
   8a96e:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   8a972:	e548      	b.n	8a406 <_vfiprintf_r+0xb2>
   8a974:	4639      	mov	r1, r7
   8a976:	f811 3b01 	ldrb.w	r3, [r1], #1
   8a97a:	2b2a      	cmp	r3, #42	; 0x2a
   8a97c:	f000 83a6 	beq.w	8b0cc <_vfiprintf_r+0xd78>
   8a980:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8a984:	2a09      	cmp	r2, #9
   8a986:	460f      	mov	r7, r1
   8a988:	f04f 0b00 	mov.w	fp, #0
   8a98c:	f63f ad3c 	bhi.w	8a408 <_vfiprintf_r+0xb4>
   8a990:	f817 3b01 	ldrb.w	r3, [r7], #1
   8a994:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
   8a998:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
   8a99c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8a9a0:	2a09      	cmp	r2, #9
   8a9a2:	d9f5      	bls.n	8a990 <_vfiprintf_r+0x63c>
   8a9a4:	e530      	b.n	8a408 <_vfiprintf_r+0xb4>
   8a9a6:	46aa      	mov	sl, r5
   8a9a8:	2b01      	cmp	r3, #1
   8a9aa:	f43f adc8 	beq.w	8a53e <_vfiprintf_r+0x1ea>
   8a9ae:	2b02      	cmp	r3, #2
   8a9b0:	ac3c      	add	r4, sp, #240	; 0xf0
   8a9b2:	d112      	bne.n	8a9da <_vfiprintf_r+0x686>
   8a9b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8a9b6:	f006 030f 	and.w	r3, r6, #15
   8a9ba:	5cd3      	ldrb	r3, [r2, r3]
   8a9bc:	0936      	lsrs	r6, r6, #4
   8a9be:	ea46 7608 	orr.w	r6, r6, r8, lsl #28
   8a9c2:	ea4f 1818 	mov.w	r8, r8, lsr #4
   8a9c6:	f804 3d01 	strb.w	r3, [r4, #-1]!
   8a9ca:	ea56 0308 	orrs.w	r3, r6, r8
   8a9ce:	d1f2      	bne.n	8a9b6 <_vfiprintf_r+0x662>
   8a9d0:	ab3c      	add	r3, sp, #240	; 0xf0
   8a9d2:	1b1b      	subs	r3, r3, r4
   8a9d4:	4655      	mov	r5, sl
   8a9d6:	9301      	str	r3, [sp, #4]
   8a9d8:	e5be      	b.n	8a558 <_vfiprintf_r+0x204>
   8a9da:	f006 0307 	and.w	r3, r6, #7
   8a9de:	08f6      	lsrs	r6, r6, #3
   8a9e0:	ea46 7648 	orr.w	r6, r6, r8, lsl #29
   8a9e4:	ea4f 08d8 	mov.w	r8, r8, lsr #3
   8a9e8:	3330      	adds	r3, #48	; 0x30
   8a9ea:	ea56 0108 	orrs.w	r1, r6, r8
   8a9ee:	4622      	mov	r2, r4
   8a9f0:	f804 3d01 	strb.w	r3, [r4, #-1]!
   8a9f4:	d1f1      	bne.n	8a9da <_vfiprintf_r+0x686>
   8a9f6:	f01a 0f01 	tst.w	sl, #1
   8a9fa:	d0e9      	beq.n	8a9d0 <_vfiprintf_r+0x67c>
   8a9fc:	2b30      	cmp	r3, #48	; 0x30
   8a9fe:	d0e7      	beq.n	8a9d0 <_vfiprintf_r+0x67c>
   8aa00:	2330      	movs	r3, #48	; 0x30
   8aa02:	3a02      	subs	r2, #2
   8aa04:	f804 3c01 	strb.w	r3, [r4, #-1]
   8aa08:	ab3c      	add	r3, sp, #240	; 0xf0
   8aa0a:	1a9b      	subs	r3, r3, r2
   8aa0c:	4655      	mov	r5, sl
   8aa0e:	4614      	mov	r4, r2
   8aa10:	9301      	str	r3, [sp, #4]
   8aa12:	e5a1      	b.n	8a558 <_vfiprintf_r+0x204>
   8aa14:	2301      	movs	r3, #1
   8aa16:	9a01      	ldr	r2, [sp, #4]
   8aa18:	9413      	str	r4, [sp, #76]	; 0x4c
   8aa1a:	9311      	str	r3, [sp, #68]	; 0x44
   8aa1c:	9214      	str	r2, [sp, #80]	; 0x50
   8aa1e:	9212      	str	r2, [sp, #72]	; 0x48
   8aa20:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8aa24:	f109 0908 	add.w	r9, r9, #8
   8aa28:	e6ad      	b.n	8a786 <_vfiprintf_r+0x432>
   8aa2a:	9b03      	ldr	r3, [sp, #12]
   8aa2c:	eba3 0608 	sub.w	r6, r3, r8
   8aa30:	2e00      	cmp	r6, #0
   8aa32:	f77f ae89 	ble.w	8a748 <_vfiprintf_r+0x3f4>
   8aa36:	2e10      	cmp	r6, #16
   8aa38:	f8df a198 	ldr.w	sl, [pc, #408]	; 8abd4 <_vfiprintf_r+0x880>
   8aa3c:	dd38      	ble.n	8aab0 <_vfiprintf_r+0x75c>
   8aa3e:	4653      	mov	r3, sl
   8aa40:	46cc      	mov	ip, r9
   8aa42:	46ba      	mov	sl, r7
   8aa44:	46c1      	mov	r9, r8
   8aa46:	9407      	str	r4, [sp, #28]
   8aa48:	46a8      	mov	r8, r5
   8aa4a:	461f      	mov	r7, r3
   8aa4c:	9c06      	ldr	r4, [sp, #24]
   8aa4e:	9d02      	ldr	r5, [sp, #8]
   8aa50:	e007      	b.n	8aa62 <_vfiprintf_r+0x70e>
   8aa52:	f101 0e02 	add.w	lr, r1, #2
   8aa56:	4601      	mov	r1, r0
   8aa58:	f10c 0c08 	add.w	ip, ip, #8
   8aa5c:	3e10      	subs	r6, #16
   8aa5e:	2e10      	cmp	r6, #16
   8aa60:	dd1e      	ble.n	8aaa0 <_vfiprintf_r+0x74c>
   8aa62:	2310      	movs	r3, #16
   8aa64:	1c48      	adds	r0, r1, #1
   8aa66:	3210      	adds	r2, #16
   8aa68:	2807      	cmp	r0, #7
   8aa6a:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8aa6e:	f8cc 7000 	str.w	r7, [ip]
   8aa72:	f8cc 3004 	str.w	r3, [ip, #4]
   8aa76:	ddec      	ble.n	8aa52 <_vfiprintf_r+0x6fe>
   8aa78:	2a00      	cmp	r2, #0
   8aa7a:	f000 8092 	beq.w	8aba2 <_vfiprintf_r+0x84e>
   8aa7e:	4629      	mov	r1, r5
   8aa80:	4620      	mov	r0, r4
   8aa82:	aa10      	add	r2, sp, #64	; 0x40
   8aa84:	f7ff fc2a 	bl	8a2dc <__sprint_r.part.0>
   8aa88:	2800      	cmp	r0, #0
   8aa8a:	f47f adec 	bne.w	8a666 <_vfiprintf_r+0x312>
   8aa8e:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8aa92:	3e10      	subs	r6, #16
   8aa94:	2e10      	cmp	r6, #16
   8aa96:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8aa9a:	f101 0e01 	add.w	lr, r1, #1
   8aa9e:	dce0      	bgt.n	8aa62 <_vfiprintf_r+0x70e>
   8aaa0:	463b      	mov	r3, r7
   8aaa2:	4645      	mov	r5, r8
   8aaa4:	4657      	mov	r7, sl
   8aaa6:	46c8      	mov	r8, r9
   8aaa8:	4670      	mov	r0, lr
   8aaaa:	46e1      	mov	r9, ip
   8aaac:	469a      	mov	sl, r3
   8aaae:	9c07      	ldr	r4, [sp, #28]
   8aab0:	4432      	add	r2, r6
   8aab2:	2807      	cmp	r0, #7
   8aab4:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8aab8:	f8c9 a000 	str.w	sl, [r9]
   8aabc:	f8c9 6004 	str.w	r6, [r9, #4]
   8aac0:	f340 8196 	ble.w	8adf0 <_vfiprintf_r+0xa9c>
   8aac4:	2a00      	cmp	r2, #0
   8aac6:	f000 829a 	beq.w	8affe <_vfiprintf_r+0xcaa>
   8aaca:	9902      	ldr	r1, [sp, #8]
   8aacc:	9806      	ldr	r0, [sp, #24]
   8aace:	aa10      	add	r2, sp, #64	; 0x40
   8aad0:	f7ff fc04 	bl	8a2dc <__sprint_r.part.0>
   8aad4:	2800      	cmp	r0, #0
   8aad6:	f47f adc6 	bne.w	8a666 <_vfiprintf_r+0x312>
   8aada:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8aade:	9b01      	ldr	r3, [sp, #4]
   8aae0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8aae4:	ebab 0603 	sub.w	r6, fp, r3
   8aae8:	2e00      	cmp	r6, #0
   8aaea:	f101 0001 	add.w	r0, r1, #1
   8aaee:	f77f ae31 	ble.w	8a754 <_vfiprintf_r+0x400>
   8aaf2:	2e10      	cmp	r6, #16
   8aaf4:	f340 826b 	ble.w	8afce <_vfiprintf_r+0xc7a>
   8aaf8:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8abd4 <_vfiprintf_r+0x880>
   8aafc:	46cc      	mov	ip, r9
   8aafe:	4653      	mov	r3, sl
   8ab00:	46c1      	mov	r9, r8
   8ab02:	46ba      	mov	sl, r7
   8ab04:	46a8      	mov	r8, r5
   8ab06:	9407      	str	r4, [sp, #28]
   8ab08:	f04f 0b10 	mov.w	fp, #16
   8ab0c:	461f      	mov	r7, r3
   8ab0e:	9c06      	ldr	r4, [sp, #24]
   8ab10:	9d02      	ldr	r5, [sp, #8]
   8ab12:	e007      	b.n	8ab24 <_vfiprintf_r+0x7d0>
   8ab14:	f101 0e02 	add.w	lr, r1, #2
   8ab18:	4601      	mov	r1, r0
   8ab1a:	f10c 0c08 	add.w	ip, ip, #8
   8ab1e:	3e10      	subs	r6, #16
   8ab20:	2e10      	cmp	r6, #16
   8ab22:	dd19      	ble.n	8ab58 <_vfiprintf_r+0x804>
   8ab24:	1c48      	adds	r0, r1, #1
   8ab26:	3210      	adds	r2, #16
   8ab28:	2807      	cmp	r0, #7
   8ab2a:	e9cc 7b00 	strd	r7, fp, [ip]
   8ab2e:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8ab32:	ddef      	ble.n	8ab14 <_vfiprintf_r+0x7c0>
   8ab34:	b332      	cbz	r2, 8ab84 <_vfiprintf_r+0x830>
   8ab36:	4629      	mov	r1, r5
   8ab38:	4620      	mov	r0, r4
   8ab3a:	aa10      	add	r2, sp, #64	; 0x40
   8ab3c:	f7ff fbce 	bl	8a2dc <__sprint_r.part.0>
   8ab40:	2800      	cmp	r0, #0
   8ab42:	f47f ad90 	bne.w	8a666 <_vfiprintf_r+0x312>
   8ab46:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8ab4a:	3e10      	subs	r6, #16
   8ab4c:	2e10      	cmp	r6, #16
   8ab4e:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8ab52:	f101 0e01 	add.w	lr, r1, #1
   8ab56:	dce5      	bgt.n	8ab24 <_vfiprintf_r+0x7d0>
   8ab58:	463b      	mov	r3, r7
   8ab5a:	4645      	mov	r5, r8
   8ab5c:	4657      	mov	r7, sl
   8ab5e:	46c8      	mov	r8, r9
   8ab60:	4670      	mov	r0, lr
   8ab62:	46e1      	mov	r9, ip
   8ab64:	469a      	mov	sl, r3
   8ab66:	9c07      	ldr	r4, [sp, #28]
   8ab68:	4432      	add	r2, r6
   8ab6a:	2807      	cmp	r0, #7
   8ab6c:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8ab70:	f8c9 a000 	str.w	sl, [r9]
   8ab74:	f8c9 6004 	str.w	r6, [r9, #4]
   8ab78:	f300 80e9 	bgt.w	8ad4e <_vfiprintf_r+0x9fa>
   8ab7c:	f109 0908 	add.w	r9, r9, #8
   8ab80:	3001      	adds	r0, #1
   8ab82:	e5e7      	b.n	8a754 <_vfiprintf_r+0x400>
   8ab84:	f04f 0e01 	mov.w	lr, #1
   8ab88:	4611      	mov	r1, r2
   8ab8a:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8ab8e:	e7c6      	b.n	8ab1e <_vfiprintf_r+0x7ca>
   8ab90:	9902      	ldr	r1, [sp, #8]
   8ab92:	9806      	ldr	r0, [sp, #24]
   8ab94:	aa10      	add	r2, sp, #64	; 0x40
   8ab96:	f7ff fba1 	bl	8a2dc <__sprint_r.part.0>
   8ab9a:	2800      	cmp	r0, #0
   8ab9c:	f43f ae05 	beq.w	8a7aa <_vfiprintf_r+0x456>
   8aba0:	e561      	b.n	8a666 <_vfiprintf_r+0x312>
   8aba2:	f04f 0e01 	mov.w	lr, #1
   8aba6:	4611      	mov	r1, r2
   8aba8:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8abac:	e756      	b.n	8aa5c <_vfiprintf_r+0x708>
   8abae:	2a00      	cmp	r2, #0
   8abb0:	f000 80de 	beq.w	8ad70 <_vfiprintf_r+0xa1c>
   8abb4:	9902      	ldr	r1, [sp, #8]
   8abb6:	9806      	ldr	r0, [sp, #24]
   8abb8:	aa10      	add	r2, sp, #64	; 0x40
   8abba:	f7ff fb8f 	bl	8a2dc <__sprint_r.part.0>
   8abbe:	2800      	cmp	r0, #0
   8abc0:	f47f ad51 	bne.w	8a666 <_vfiprintf_r+0x312>
   8abc4:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8abc8:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8abcc:	1c48      	adds	r0, r1, #1
   8abce:	e59a      	b.n	8a706 <_vfiprintf_r+0x3b2>
   8abd0:	0008caa4 	.word	0x0008caa4
   8abd4:	0008cd7c 	.word	0x0008cd7c
   8abd8:	2202      	movs	r2, #2
   8abda:	2001      	movs	r0, #1
   8abdc:	ab0f      	add	r3, sp, #60	; 0x3c
   8abde:	9313      	str	r3, [sp, #76]	; 0x4c
   8abe0:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8abe4:	9214      	str	r2, [sp, #80]	; 0x50
   8abe6:	4601      	mov	r1, r0
   8abe8:	f109 0908 	add.w	r9, r9, #8
   8abec:	1c48      	adds	r0, r1, #1
   8abee:	e5a7      	b.n	8a740 <_vfiprintf_r+0x3ec>
   8abf0:	2e10      	cmp	r6, #16
   8abf2:	f340 8245 	ble.w	8b080 <_vfiprintf_r+0xd2c>
   8abf6:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   8abfa:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 8aeec <_vfiprintf_r+0xb98>
   8abfe:	4619      	mov	r1, r3
   8ac00:	4653      	mov	r3, sl
   8ac02:	46cc      	mov	ip, r9
   8ac04:	46ba      	mov	sl, r7
   8ac06:	46c1      	mov	r9, r8
   8ac08:	940d      	str	r4, [sp, #52]	; 0x34
   8ac0a:	46a8      	mov	r8, r5
   8ac0c:	461f      	mov	r7, r3
   8ac0e:	9c06      	ldr	r4, [sp, #24]
   8ac10:	9d02      	ldr	r5, [sp, #8]
   8ac12:	e007      	b.n	8ac24 <_vfiprintf_r+0x8d0>
   8ac14:	f101 0e02 	add.w	lr, r1, #2
   8ac18:	4601      	mov	r1, r0
   8ac1a:	f10c 0c08 	add.w	ip, ip, #8
   8ac1e:	3e10      	subs	r6, #16
   8ac20:	2e10      	cmp	r6, #16
   8ac22:	dd1c      	ble.n	8ac5e <_vfiprintf_r+0x90a>
   8ac24:	2310      	movs	r3, #16
   8ac26:	1c48      	adds	r0, r1, #1
   8ac28:	3210      	adds	r2, #16
   8ac2a:	2807      	cmp	r0, #7
   8ac2c:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8ac30:	f8cc 7000 	str.w	r7, [ip]
   8ac34:	f8cc 3004 	str.w	r3, [ip, #4]
   8ac38:	ddec      	ble.n	8ac14 <_vfiprintf_r+0x8c0>
   8ac3a:	b332      	cbz	r2, 8ac8a <_vfiprintf_r+0x936>
   8ac3c:	4629      	mov	r1, r5
   8ac3e:	4620      	mov	r0, r4
   8ac40:	aa10      	add	r2, sp, #64	; 0x40
   8ac42:	f7ff fb4b 	bl	8a2dc <__sprint_r.part.0>
   8ac46:	2800      	cmp	r0, #0
   8ac48:	f47f ad0d 	bne.w	8a666 <_vfiprintf_r+0x312>
   8ac4c:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8ac50:	3e10      	subs	r6, #16
   8ac52:	2e10      	cmp	r6, #16
   8ac54:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8ac58:	f101 0e01 	add.w	lr, r1, #1
   8ac5c:	dce2      	bgt.n	8ac24 <_vfiprintf_r+0x8d0>
   8ac5e:	463b      	mov	r3, r7
   8ac60:	4645      	mov	r5, r8
   8ac62:	4657      	mov	r7, sl
   8ac64:	46c8      	mov	r8, r9
   8ac66:	4671      	mov	r1, lr
   8ac68:	46e1      	mov	r9, ip
   8ac6a:	469a      	mov	sl, r3
   8ac6c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   8ac6e:	4432      	add	r2, r6
   8ac70:	2907      	cmp	r1, #7
   8ac72:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   8ac76:	f8c9 a000 	str.w	sl, [r9]
   8ac7a:	f8c9 6004 	str.w	r6, [r9, #4]
   8ac7e:	f300 80a7 	bgt.w	8add0 <_vfiprintf_r+0xa7c>
   8ac82:	f109 0908 	add.w	r9, r9, #8
   8ac86:	1c48      	adds	r0, r1, #1
   8ac88:	e52b      	b.n	8a6e2 <_vfiprintf_r+0x38e>
   8ac8a:	4611      	mov	r1, r2
   8ac8c:	f04f 0e01 	mov.w	lr, #1
   8ac90:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8ac94:	e7c3      	b.n	8ac1e <_vfiprintf_r+0x8ca>
   8ac96:	076c      	lsls	r4, r5, #29
   8ac98:	9211      	str	r2, [sp, #68]	; 0x44
   8ac9a:	d550      	bpl.n	8ad3e <_vfiprintf_r+0x9ea>
   8ac9c:	9b03      	ldr	r3, [sp, #12]
   8ac9e:	eba3 0408 	sub.w	r4, r3, r8
   8aca2:	2c00      	cmp	r4, #0
   8aca4:	dd4b      	ble.n	8ad3e <_vfiprintf_r+0x9ea>
   8aca6:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8acaa:	2c10      	cmp	r4, #16
   8acac:	f340 81f8 	ble.w	8b0a0 <_vfiprintf_r+0xd4c>
   8acb0:	f8df a238 	ldr.w	sl, [pc, #568]	; 8aeec <_vfiprintf_r+0xb98>
   8acb4:	2510      	movs	r5, #16
   8acb6:	4653      	mov	r3, sl
   8acb8:	9911      	ldr	r1, [sp, #68]	; 0x44
   8acba:	46ba      	mov	sl, r7
   8acbc:	9e06      	ldr	r6, [sp, #24]
   8acbe:	461f      	mov	r7, r3
   8acc0:	f8dd b008 	ldr.w	fp, [sp, #8]
   8acc4:	e006      	b.n	8acd4 <_vfiprintf_r+0x980>
   8acc6:	1c88      	adds	r0, r1, #2
   8acc8:	4619      	mov	r1, r3
   8acca:	f109 0908 	add.w	r9, r9, #8
   8acce:	3c10      	subs	r4, #16
   8acd0:	2c10      	cmp	r4, #16
   8acd2:	dd19      	ble.n	8ad08 <_vfiprintf_r+0x9b4>
   8acd4:	1c4b      	adds	r3, r1, #1
   8acd6:	3210      	adds	r2, #16
   8acd8:	2b07      	cmp	r3, #7
   8acda:	e9c9 7500 	strd	r7, r5, [r9]
   8acde:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   8ace2:	ddf0      	ble.n	8acc6 <_vfiprintf_r+0x972>
   8ace4:	b332      	cbz	r2, 8ad34 <_vfiprintf_r+0x9e0>
   8ace6:	4659      	mov	r1, fp
   8ace8:	4630      	mov	r0, r6
   8acea:	aa10      	add	r2, sp, #64	; 0x40
   8acec:	f7ff faf6 	bl	8a2dc <__sprint_r.part.0>
   8acf0:	2800      	cmp	r0, #0
   8acf2:	f47f acb8 	bne.w	8a666 <_vfiprintf_r+0x312>
   8acf6:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8acfa:	3c10      	subs	r4, #16
   8acfc:	2c10      	cmp	r4, #16
   8acfe:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ad02:	f101 0001 	add.w	r0, r1, #1
   8ad06:	dce5      	bgt.n	8acd4 <_vfiprintf_r+0x980>
   8ad08:	463b      	mov	r3, r7
   8ad0a:	4657      	mov	r7, sl
   8ad0c:	469a      	mov	sl, r3
   8ad0e:	4422      	add	r2, r4
   8ad10:	2807      	cmp	r0, #7
   8ad12:	e9c9 a400 	strd	sl, r4, [r9]
   8ad16:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8ad1a:	f77f ad3c 	ble.w	8a796 <_vfiprintf_r+0x442>
   8ad1e:	b172      	cbz	r2, 8ad3e <_vfiprintf_r+0x9ea>
   8ad20:	9902      	ldr	r1, [sp, #8]
   8ad22:	9806      	ldr	r0, [sp, #24]
   8ad24:	aa10      	add	r2, sp, #64	; 0x40
   8ad26:	f7ff fad9 	bl	8a2dc <__sprint_r.part.0>
   8ad2a:	2800      	cmp	r0, #0
   8ad2c:	f47f ac9b 	bne.w	8a666 <_vfiprintf_r+0x312>
   8ad30:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8ad32:	e530      	b.n	8a796 <_vfiprintf_r+0x442>
   8ad34:	2001      	movs	r0, #1
   8ad36:	4611      	mov	r1, r2
   8ad38:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ad3c:	e7c7      	b.n	8acce <_vfiprintf_r+0x97a>
   8ad3e:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   8ad42:	4542      	cmp	r2, r8
   8ad44:	bfac      	ite	ge
   8ad46:	189b      	addge	r3, r3, r2
   8ad48:	4443      	addlt	r3, r8
   8ad4a:	9304      	str	r3, [sp, #16]
   8ad4c:	e52d      	b.n	8a7aa <_vfiprintf_r+0x456>
   8ad4e:	2a00      	cmp	r2, #0
   8ad50:	f43f ae60 	beq.w	8aa14 <_vfiprintf_r+0x6c0>
   8ad54:	9902      	ldr	r1, [sp, #8]
   8ad56:	9806      	ldr	r0, [sp, #24]
   8ad58:	aa10      	add	r2, sp, #64	; 0x40
   8ad5a:	f7ff fabf 	bl	8a2dc <__sprint_r.part.0>
   8ad5e:	2800      	cmp	r0, #0
   8ad60:	f47f ac81 	bne.w	8a666 <_vfiprintf_r+0x312>
   8ad64:	9811      	ldr	r0, [sp, #68]	; 0x44
   8ad66:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8ad68:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ad6c:	3001      	adds	r0, #1
   8ad6e:	e4f1      	b.n	8a754 <_vfiprintf_r+0x400>
   8ad70:	9b07      	ldr	r3, [sp, #28]
   8ad72:	2b00      	cmp	r3, #0
   8ad74:	d169      	bne.n	8ae4a <_vfiprintf_r+0xaf6>
   8ad76:	2001      	movs	r0, #1
   8ad78:	4611      	mov	r1, r2
   8ad7a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ad7e:	e4df      	b.n	8a740 <_vfiprintf_r+0x3ec>
   8ad80:	9211      	str	r2, [sp, #68]	; 0x44
   8ad82:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ad86:	e458      	b.n	8a63a <_vfiprintf_r+0x2e6>
   8ad88:	f1bb 0f00 	cmp.w	fp, #0
   8ad8c:	f47f abdc 	bne.w	8a548 <_vfiprintf_r+0x1f4>
   8ad90:	4655      	mov	r5, sl
   8ad92:	f04f 0b00 	mov.w	fp, #0
   8ad96:	ac3c      	add	r4, sp, #240	; 0xf0
   8ad98:	f8cd b004 	str.w	fp, [sp, #4]
   8ad9c:	f7ff bbdc 	b.w	8a558 <_vfiprintf_r+0x204>
   8ada0:	f01a 0310 	ands.w	r3, sl, #16
   8ada4:	d140      	bne.n	8ae28 <_vfiprintf_r+0xad4>
   8ada6:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
   8adaa:	d039      	beq.n	8ae20 <_vfiprintf_r+0xacc>
   8adac:	9e05      	ldr	r6, [sp, #20]
   8adae:	4698      	mov	r8, r3
   8adb0:	f856 2b04 	ldr.w	r2, [r6], #4
   8adb4:	2301      	movs	r3, #1
   8adb6:	9605      	str	r6, [sp, #20]
   8adb8:	b296      	uxth	r6, r2
   8adba:	e410      	b.n	8a5de <_vfiprintf_r+0x28a>
   8adbc:	232d      	movs	r3, #45	; 0x2d
   8adbe:	4276      	negs	r6, r6
   8adc0:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8adc4:	46aa      	mov	sl, r5
   8adc6:	f04f 0301 	mov.w	r3, #1
   8adca:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
   8adce:	e40a      	b.n	8a5e6 <_vfiprintf_r+0x292>
   8add0:	2a00      	cmp	r2, #0
   8add2:	d06f      	beq.n	8aeb4 <_vfiprintf_r+0xb60>
   8add4:	9902      	ldr	r1, [sp, #8]
   8add6:	9806      	ldr	r0, [sp, #24]
   8add8:	aa10      	add	r2, sp, #64	; 0x40
   8adda:	f7ff fa7f 	bl	8a2dc <__sprint_r.part.0>
   8adde:	2800      	cmp	r0, #0
   8ade0:	f47f ac41 	bne.w	8a666 <_vfiprintf_r+0x312>
   8ade4:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ade8:	e478      	b.n	8a6dc <_vfiprintf_r+0x388>
   8adea:	ac3c      	add	r4, sp, #240	; 0xf0
   8adec:	f7ff bbb4 	b.w	8a558 <_vfiprintf_r+0x204>
   8adf0:	4601      	mov	r1, r0
   8adf2:	f109 0908 	add.w	r9, r9, #8
   8adf6:	3001      	adds	r0, #1
   8adf8:	e4a6      	b.n	8a748 <_vfiprintf_r+0x3f4>
   8adfa:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   8adfe:	f040 811d 	bne.w	8b03c <_vfiprintf_r+0xce8>
   8ae02:	9b05      	ldr	r3, [sp, #20]
   8ae04:	f853 6b04 	ldr.w	r6, [r3], #4
   8ae08:	9305      	str	r3, [sp, #20]
   8ae0a:	f7ff bbe5 	b.w	8a5d8 <_vfiprintf_r+0x284>
   8ae0e:	05aa      	lsls	r2, r5, #22
   8ae10:	f100 810e 	bmi.w	8b030 <_vfiprintf_r+0xcdc>
   8ae14:	ea4f 78e3 	mov.w	r8, r3, asr #31
   8ae18:	461e      	mov	r6, r3
   8ae1a:	4643      	mov	r3, r8
   8ae1c:	f7ff bb82 	b.w	8a524 <_vfiprintf_r+0x1d0>
   8ae20:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
   8ae24:	f040 80fb 	bne.w	8b01e <_vfiprintf_r+0xcca>
   8ae28:	9a05      	ldr	r2, [sp, #20]
   8ae2a:	2301      	movs	r3, #1
   8ae2c:	f852 6b04 	ldr.w	r6, [r2], #4
   8ae30:	9205      	str	r2, [sp, #20]
   8ae32:	f7ff bbd4 	b.w	8a5de <_vfiprintf_r+0x28a>
   8ae36:	e9dd 1604 	ldrd	r1, r6, [sp, #16]
   8ae3a:	f856 2b04 	ldr.w	r2, [r6], #4
   8ae3e:	17cb      	asrs	r3, r1, #31
   8ae40:	e9c2 1300 	strd	r1, r3, [r2]
   8ae44:	9605      	str	r6, [sp, #20]
   8ae46:	f7ff babe 	b.w	8a3c6 <_vfiprintf_r+0x72>
   8ae4a:	2202      	movs	r2, #2
   8ae4c:	ab0f      	add	r3, sp, #60	; 0x3c
   8ae4e:	9313      	str	r3, [sp, #76]	; 0x4c
   8ae50:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ae54:	9214      	str	r2, [sp, #80]	; 0x50
   8ae56:	e6c7      	b.n	8abe8 <_vfiprintf_r+0x894>
   8ae58:	4a25      	ldr	r2, [pc, #148]	; (8aef0 <_vfiprintf_r+0xb9c>)
   8ae5a:	9209      	str	r2, [sp, #36]	; 0x24
   8ae5c:	f015 0820 	ands.w	r8, r5, #32
   8ae60:	d036      	beq.n	8aed0 <_vfiprintf_r+0xb7c>
   8ae62:	9e05      	ldr	r6, [sp, #20]
   8ae64:	3607      	adds	r6, #7
   8ae66:	f026 0607 	bic.w	r6, r6, #7
   8ae6a:	4632      	mov	r2, r6
   8ae6c:	f8d6 8004 	ldr.w	r8, [r6, #4]
   8ae70:	f852 6b08 	ldr.w	r6, [r2], #8
   8ae74:	9205      	str	r2, [sp, #20]
   8ae76:	07ea      	lsls	r2, r5, #31
   8ae78:	d509      	bpl.n	8ae8e <_vfiprintf_r+0xb3a>
   8ae7a:	ea56 0208 	orrs.w	r2, r6, r8
   8ae7e:	d006      	beq.n	8ae8e <_vfiprintf_r+0xb3a>
   8ae80:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   8ae84:	2330      	movs	r3, #48	; 0x30
   8ae86:	f045 0502 	orr.w	r5, r5, #2
   8ae8a:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   8ae8e:	2302      	movs	r3, #2
   8ae90:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   8ae94:	f7ff bba3 	b.w	8a5de <_vfiprintf_r+0x28a>
   8ae98:	46aa      	mov	sl, r5
   8ae9a:	e4ff      	b.n	8a89c <_vfiprintf_r+0x548>
   8ae9c:	4a15      	ldr	r2, [pc, #84]	; (8aef4 <_vfiprintf_r+0xba0>)
   8ae9e:	9209      	str	r2, [sp, #36]	; 0x24
   8aea0:	e7dc      	b.n	8ae5c <_vfiprintf_r+0xb08>
   8aea2:	4620      	mov	r0, r4
   8aea4:	9605      	str	r6, [sp, #20]
   8aea6:	f7fb f839 	bl	85f1c <strlen>
   8aeaa:	f04f 0b00 	mov.w	fp, #0
   8aeae:	9001      	str	r0, [sp, #4]
   8aeb0:	f7ff bb52 	b.w	8a558 <_vfiprintf_r+0x204>
   8aeb4:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   8aeb8:	2900      	cmp	r1, #0
   8aeba:	f000 80a6 	beq.w	8b00a <_vfiprintf_r+0xcb6>
   8aebe:	2001      	movs	r0, #1
   8aec0:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
   8aec4:	9213      	str	r2, [sp, #76]	; 0x4c
   8aec6:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8aeca:	4602      	mov	r2, r0
   8aecc:	9014      	str	r0, [sp, #80]	; 0x50
   8aece:	e416      	b.n	8a6fe <_vfiprintf_r+0x3aa>
   8aed0:	f015 0210 	ands.w	r2, r5, #16
   8aed4:	d114      	bne.n	8af00 <_vfiprintf_r+0xbac>
   8aed6:	f015 0140 	ands.w	r1, r5, #64	; 0x40
   8aeda:	d00d      	beq.n	8aef8 <_vfiprintf_r+0xba4>
   8aedc:	9e05      	ldr	r6, [sp, #20]
   8aede:	4690      	mov	r8, r2
   8aee0:	f856 2b04 	ldr.w	r2, [r6], #4
   8aee4:	9605      	str	r6, [sp, #20]
   8aee6:	b296      	uxth	r6, r2
   8aee8:	e7c5      	b.n	8ae76 <_vfiprintf_r+0xb22>
   8aeea:	bf00      	nop
   8aeec:	0008cd6c 	.word	0x0008cd6c
   8aef0:	0008cab8 	.word	0x0008cab8
   8aef4:	0008caa4 	.word	0x0008caa4
   8aef8:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   8aefc:	f040 80a6 	bne.w	8b04c <_vfiprintf_r+0xcf8>
   8af00:	9a05      	ldr	r2, [sp, #20]
   8af02:	f852 6b04 	ldr.w	r6, [r2], #4
   8af06:	9205      	str	r2, [sp, #20]
   8af08:	e7b5      	b.n	8ae76 <_vfiprintf_r+0xb22>
   8af0a:	2300      	movs	r3, #0
   8af0c:	f40a 6280 	and.w	r2, sl, #1024	; 0x400
   8af10:	f8cd b004 	str.w	fp, [sp, #4]
   8af14:	f8cd a01c 	str.w	sl, [sp, #28]
   8af18:	46bb      	mov	fp, r7
   8af1a:	f8cd 9020 	str.w	r9, [sp, #32]
   8af1e:	469a      	mov	sl, r3
   8af20:	4617      	mov	r7, r2
   8af22:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8af26:	ad3c      	add	r5, sp, #240	; 0xf0
   8af28:	e00c      	b.n	8af44 <_vfiprintf_r+0xbf0>
   8af2a:	2300      	movs	r3, #0
   8af2c:	4630      	mov	r0, r6
   8af2e:	4641      	mov	r1, r8
   8af30:	220a      	movs	r2, #10
   8af32:	f001 fbf9 	bl	8c728 <__aeabi_uldivmod>
   8af36:	2e0a      	cmp	r6, #10
   8af38:	f178 0300 	sbcs.w	r3, r8, #0
   8af3c:	d31b      	bcc.n	8af76 <_vfiprintf_r+0xc22>
   8af3e:	4606      	mov	r6, r0
   8af40:	4688      	mov	r8, r1
   8af42:	4625      	mov	r5, r4
   8af44:	4630      	mov	r0, r6
   8af46:	4641      	mov	r1, r8
   8af48:	220a      	movs	r2, #10
   8af4a:	2300      	movs	r3, #0
   8af4c:	f001 fbec 	bl	8c728 <__aeabi_uldivmod>
   8af50:	3230      	adds	r2, #48	; 0x30
   8af52:	1e6c      	subs	r4, r5, #1
   8af54:	f10a 0a01 	add.w	sl, sl, #1
   8af58:	f805 2c01 	strb.w	r2, [r5, #-1]
   8af5c:	2f00      	cmp	r7, #0
   8af5e:	d0e4      	beq.n	8af2a <_vfiprintf_r+0xbd6>
   8af60:	f899 3000 	ldrb.w	r3, [r9]
   8af64:	4553      	cmp	r3, sl
   8af66:	d1e0      	bne.n	8af2a <_vfiprintf_r+0xbd6>
   8af68:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   8af6c:	d0dd      	beq.n	8af2a <_vfiprintf_r+0xbd6>
   8af6e:	2e0a      	cmp	r6, #10
   8af70:	f178 0300 	sbcs.w	r3, r8, #0
   8af74:	d22e      	bcs.n	8afd4 <_vfiprintf_r+0xc80>
   8af76:	f8dd a01c 	ldr.w	sl, [sp, #28]
   8af7a:	ab3c      	add	r3, sp, #240	; 0xf0
   8af7c:	1b1b      	subs	r3, r3, r4
   8af7e:	465f      	mov	r7, fp
   8af80:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   8af84:	f8dd b004 	ldr.w	fp, [sp, #4]
   8af88:	4655      	mov	r5, sl
   8af8a:	f8dd 9020 	ldr.w	r9, [sp, #32]
   8af8e:	9301      	str	r3, [sp, #4]
   8af90:	f7ff bae2 	b.w	8a558 <_vfiprintf_r+0x204>
   8af94:	46aa      	mov	sl, r5
   8af96:	f7ff bad2 	b.w	8a53e <_vfiprintf_r+0x1ea>
   8af9a:	2b01      	cmp	r3, #1
   8af9c:	46aa      	mov	sl, r5
   8af9e:	f47f ad06 	bne.w	8a9ae <_vfiprintf_r+0x65a>
   8afa2:	f7ff bad1 	b.w	8a548 <_vfiprintf_r+0x1f4>
   8afa6:	9e05      	ldr	r6, [sp, #20]
   8afa8:	9a04      	ldr	r2, [sp, #16]
   8afaa:	f856 3b04 	ldr.w	r3, [r6], #4
   8afae:	601a      	str	r2, [r3, #0]
   8afb0:	9605      	str	r6, [sp, #20]
   8afb2:	f7ff ba08 	b.w	8a3c6 <_vfiprintf_r+0x72>
   8afb6:	f1bb 0f06 	cmp.w	fp, #6
   8afba:	46d8      	mov	r8, fp
   8afbc:	bf28      	it	cs
   8afbe:	f04f 0806 	movcs.w	r8, #6
   8afc2:	4c47      	ldr	r4, [pc, #284]	; (8b0e0 <_vfiprintf_r+0xd8c>)
   8afc4:	f8cd 8004 	str.w	r8, [sp, #4]
   8afc8:	9605      	str	r6, [sp, #20]
   8afca:	f7ff bb75 	b.w	8a6b8 <_vfiprintf_r+0x364>
   8afce:	f8df a114 	ldr.w	sl, [pc, #276]	; 8b0e4 <_vfiprintf_r+0xd90>
   8afd2:	e5c9      	b.n	8ab68 <_vfiprintf_r+0x814>
   8afd4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8afd6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8afd8:	1ae4      	subs	r4, r4, r3
   8afda:	461a      	mov	r2, r3
   8afdc:	4620      	mov	r0, r4
   8afde:	f7fa ffcb 	bl	85f78 <strncpy>
   8afe2:	f899 3001 	ldrb.w	r3, [r9, #1]
   8afe6:	b10b      	cbz	r3, 8afec <_vfiprintf_r+0xc98>
   8afe8:	f109 0901 	add.w	r9, r9, #1
   8afec:	4630      	mov	r0, r6
   8afee:	4641      	mov	r1, r8
   8aff0:	220a      	movs	r2, #10
   8aff2:	2300      	movs	r3, #0
   8aff4:	f04f 0a00 	mov.w	sl, #0
   8aff8:	f001 fb96 	bl	8c728 <__aeabi_uldivmod>
   8affc:	e79f      	b.n	8af3e <_vfiprintf_r+0xbea>
   8affe:	2001      	movs	r0, #1
   8b000:	4611      	mov	r1, r2
   8b002:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8b006:	f7ff bb9f 	b.w	8a748 <_vfiprintf_r+0x3f4>
   8b00a:	9b07      	ldr	r3, [sp, #28]
   8b00c:	2b00      	cmp	r3, #0
   8b00e:	f47f ade3 	bne.w	8abd8 <_vfiprintf_r+0x884>
   8b012:	4611      	mov	r1, r2
   8b014:	2001      	movs	r0, #1
   8b016:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8b01a:	f7ff bb95 	b.w	8a748 <_vfiprintf_r+0x3f4>
   8b01e:	9e05      	ldr	r6, [sp, #20]
   8b020:	4690      	mov	r8, r2
   8b022:	f856 2b04 	ldr.w	r2, [r6], #4
   8b026:	2301      	movs	r3, #1
   8b028:	9605      	str	r6, [sp, #20]
   8b02a:	b2d6      	uxtb	r6, r2
   8b02c:	f7ff bad7 	b.w	8a5de <_vfiprintf_r+0x28a>
   8b030:	f343 18c0 	sbfx	r8, r3, #7, #1
   8b034:	b25e      	sxtb	r6, r3
   8b036:	4643      	mov	r3, r8
   8b038:	f7ff ba74 	b.w	8a524 <_vfiprintf_r+0x1d0>
   8b03c:	9e05      	ldr	r6, [sp, #20]
   8b03e:	4690      	mov	r8, r2
   8b040:	f856 3b04 	ldr.w	r3, [r6], #4
   8b044:	9605      	str	r6, [sp, #20]
   8b046:	b2de      	uxtb	r6, r3
   8b048:	f7ff bac6 	b.w	8a5d8 <_vfiprintf_r+0x284>
   8b04c:	9e05      	ldr	r6, [sp, #20]
   8b04e:	4688      	mov	r8, r1
   8b050:	f856 2b04 	ldr.w	r2, [r6], #4
   8b054:	9605      	str	r6, [sp, #20]
   8b056:	b2d6      	uxtb	r6, r2
   8b058:	e70d      	b.n	8ae76 <_vfiprintf_r+0xb22>
   8b05a:	9e05      	ldr	r6, [sp, #20]
   8b05c:	9a04      	ldr	r2, [sp, #16]
   8b05e:	f856 3b04 	ldr.w	r3, [r6], #4
   8b062:	801a      	strh	r2, [r3, #0]
   8b064:	9605      	str	r6, [sp, #20]
   8b066:	f7ff b9ae 	b.w	8a3c6 <_vfiprintf_r+0x72>
   8b06a:	6d88      	ldr	r0, [r1, #88]	; 0x58
   8b06c:	f7fd fe86 	bl	88d7c <__retarget_lock_release_recursive>
   8b070:	f7ff ba99 	b.w	8a5a6 <_vfiprintf_r+0x252>
   8b074:	f8cd b004 	str.w	fp, [sp, #4]
   8b078:	9605      	str	r6, [sp, #20]
   8b07a:	4683      	mov	fp, r0
   8b07c:	f7ff ba6c 	b.w	8a558 <_vfiprintf_r+0x204>
   8b080:	9911      	ldr	r1, [sp, #68]	; 0x44
   8b082:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8b084:	f8df a060 	ldr.w	sl, [pc, #96]	; 8b0e8 <_vfiprintf_r+0xd94>
   8b088:	3101      	adds	r1, #1
   8b08a:	e5f0      	b.n	8ac6e <_vfiprintf_r+0x91a>
   8b08c:	9902      	ldr	r1, [sp, #8]
   8b08e:	9806      	ldr	r0, [sp, #24]
   8b090:	aa10      	add	r2, sp, #64	; 0x40
   8b092:	f7ff f923 	bl	8a2dc <__sprint_r.part.0>
   8b096:	2800      	cmp	r0, #0
   8b098:	f43f aae3 	beq.w	8a662 <_vfiprintf_r+0x30e>
   8b09c:	f7ff bae3 	b.w	8a666 <_vfiprintf_r+0x312>
   8b0a0:	9811      	ldr	r0, [sp, #68]	; 0x44
   8b0a2:	f8df a044 	ldr.w	sl, [pc, #68]	; 8b0e8 <_vfiprintf_r+0xd94>
   8b0a6:	3001      	adds	r0, #1
   8b0a8:	e631      	b.n	8ad0e <_vfiprintf_r+0x9ba>
   8b0aa:	9b02      	ldr	r3, [sp, #8]
   8b0ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   8b0ae:	07db      	lsls	r3, r3, #31
   8b0b0:	d407      	bmi.n	8b0c2 <_vfiprintf_r+0xd6e>
   8b0b2:	9b02      	ldr	r3, [sp, #8]
   8b0b4:	899b      	ldrh	r3, [r3, #12]
   8b0b6:	059f      	lsls	r7, r3, #22
   8b0b8:	d403      	bmi.n	8b0c2 <_vfiprintf_r+0xd6e>
   8b0ba:	9b02      	ldr	r3, [sp, #8]
   8b0bc:	6d98      	ldr	r0, [r3, #88]	; 0x58
   8b0be:	f7fd fe5d 	bl	88d7c <__retarget_lock_release_recursive>
   8b0c2:	f04f 33ff 	mov.w	r3, #4294967295
   8b0c6:	9304      	str	r3, [sp, #16]
   8b0c8:	f7ff bad6 	b.w	8a678 <_vfiprintf_r+0x324>
   8b0cc:	9a05      	ldr	r2, [sp, #20]
   8b0ce:	787b      	ldrb	r3, [r7, #1]
   8b0d0:	460f      	mov	r7, r1
   8b0d2:	f852 1b04 	ldr.w	r1, [r2], #4
   8b0d6:	9205      	str	r2, [sp, #20]
   8b0d8:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
   8b0dc:	f7ff b993 	b.w	8a406 <_vfiprintf_r+0xb2>
   8b0e0:	0008cacc 	.word	0x0008cacc
   8b0e4:	0008cd7c 	.word	0x0008cd7c
   8b0e8:	0008cd6c 	.word	0x0008cd6c

0008b0ec <__sbprintf>:
   8b0ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   8b0ee:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   8b0f2:	4615      	mov	r5, r2
   8b0f4:	2400      	movs	r4, #0
   8b0f6:	4606      	mov	r6, r0
   8b0f8:	461f      	mov	r7, r3
   8b0fa:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   8b0fe:	ab1a      	add	r3, sp, #104	; 0x68
   8b100:	9300      	str	r3, [sp, #0]
   8b102:	9304      	str	r3, [sp, #16]
   8b104:	898b      	ldrh	r3, [r1, #12]
   8b106:	a816      	add	r0, sp, #88	; 0x58
   8b108:	f023 0302 	bic.w	r3, r3, #2
   8b10c:	f8ad 300c 	strh.w	r3, [sp, #12]
   8b110:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8b112:	9406      	str	r4, [sp, #24]
   8b114:	9319      	str	r3, [sp, #100]	; 0x64
   8b116:	89cb      	ldrh	r3, [r1, #14]
   8b118:	460c      	mov	r4, r1
   8b11a:	f8ad 300e 	strh.w	r3, [sp, #14]
   8b11e:	69cb      	ldr	r3, [r1, #28]
   8b120:	f8cd c008 	str.w	ip, [sp, #8]
   8b124:	9307      	str	r3, [sp, #28]
   8b126:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8b128:	f8cd c014 	str.w	ip, [sp, #20]
   8b12c:	9309      	str	r3, [sp, #36]	; 0x24
   8b12e:	f7fd fe1f 	bl	88d70 <__retarget_lock_init_recursive>
   8b132:	462a      	mov	r2, r5
   8b134:	463b      	mov	r3, r7
   8b136:	4669      	mov	r1, sp
   8b138:	4630      	mov	r0, r6
   8b13a:	f7ff f90b 	bl	8a354 <_vfiprintf_r>
   8b13e:	1e05      	subs	r5, r0, #0
   8b140:	db07      	blt.n	8b152 <__sbprintf+0x66>
   8b142:	4669      	mov	r1, sp
   8b144:	4630      	mov	r0, r6
   8b146:	f000 f925 	bl	8b394 <_fflush_r>
   8b14a:	2800      	cmp	r0, #0
   8b14c:	bf18      	it	ne
   8b14e:	f04f 35ff 	movne.w	r5, #4294967295
   8b152:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8b156:	065b      	lsls	r3, r3, #25
   8b158:	d503      	bpl.n	8b162 <__sbprintf+0x76>
   8b15a:	89a3      	ldrh	r3, [r4, #12]
   8b15c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b160:	81a3      	strh	r3, [r4, #12]
   8b162:	9816      	ldr	r0, [sp, #88]	; 0x58
   8b164:	f7fd fe06 	bl	88d74 <__retarget_lock_close_recursive>
   8b168:	4628      	mov	r0, r5
   8b16a:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   8b16e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0008b170 <__ascii_wctomb>:
   8b170:	4603      	mov	r3, r0
   8b172:	b149      	cbz	r1, 8b188 <__ascii_wctomb+0x18>
   8b174:	2aff      	cmp	r2, #255	; 0xff
   8b176:	d802      	bhi.n	8b17e <__ascii_wctomb+0xe>
   8b178:	2001      	movs	r0, #1
   8b17a:	700a      	strb	r2, [r1, #0]
   8b17c:	4770      	bx	lr
   8b17e:	228a      	movs	r2, #138	; 0x8a
   8b180:	f04f 30ff 	mov.w	r0, #4294967295
   8b184:	601a      	str	r2, [r3, #0]
   8b186:	4770      	bx	lr
   8b188:	4608      	mov	r0, r1
   8b18a:	4770      	bx	lr

0008b18c <__swsetup_r>:
   8b18c:	b538      	push	{r3, r4, r5, lr}
   8b18e:	4b33      	ldr	r3, [pc, #204]	; (8b25c <__swsetup_r+0xd0>)
   8b190:	4605      	mov	r5, r0
   8b192:	681b      	ldr	r3, [r3, #0]
   8b194:	460c      	mov	r4, r1
   8b196:	b10b      	cbz	r3, 8b19c <__swsetup_r+0x10>
   8b198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   8b19a:	b312      	cbz	r2, 8b1e2 <__swsetup_r+0x56>
   8b19c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b1a0:	0718      	lsls	r0, r3, #28
   8b1a2:	b29a      	uxth	r2, r3
   8b1a4:	d525      	bpl.n	8b1f2 <__swsetup_r+0x66>
   8b1a6:	6921      	ldr	r1, [r4, #16]
   8b1a8:	2900      	cmp	r1, #0
   8b1aa:	d02d      	beq.n	8b208 <__swsetup_r+0x7c>
   8b1ac:	f012 0001 	ands.w	r0, r2, #1
   8b1b0:	d007      	beq.n	8b1c2 <__swsetup_r+0x36>
   8b1b2:	2500      	movs	r5, #0
   8b1b4:	6960      	ldr	r0, [r4, #20]
   8b1b6:	60a5      	str	r5, [r4, #8]
   8b1b8:	4240      	negs	r0, r0
   8b1ba:	61a0      	str	r0, [r4, #24]
   8b1bc:	b139      	cbz	r1, 8b1ce <__swsetup_r+0x42>
   8b1be:	2000      	movs	r0, #0
   8b1c0:	bd38      	pop	{r3, r4, r5, pc}
   8b1c2:	0795      	lsls	r5, r2, #30
   8b1c4:	bf58      	it	pl
   8b1c6:	6960      	ldrpl	r0, [r4, #20]
   8b1c8:	60a0      	str	r0, [r4, #8]
   8b1ca:	2900      	cmp	r1, #0
   8b1cc:	d1f7      	bne.n	8b1be <__swsetup_r+0x32>
   8b1ce:	0612      	lsls	r2, r2, #24
   8b1d0:	bf58      	it	pl
   8b1d2:	4608      	movpl	r0, r1
   8b1d4:	d5f4      	bpl.n	8b1c0 <__swsetup_r+0x34>
   8b1d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b1da:	f04f 30ff 	mov.w	r0, #4294967295
   8b1de:	81a3      	strh	r3, [r4, #12]
   8b1e0:	bd38      	pop	{r3, r4, r5, pc}
   8b1e2:	4618      	mov	r0, r3
   8b1e4:	f000 f90a 	bl	8b3fc <__sinit>
   8b1e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b1ec:	0718      	lsls	r0, r3, #28
   8b1ee:	b29a      	uxth	r2, r3
   8b1f0:	d4d9      	bmi.n	8b1a6 <__swsetup_r+0x1a>
   8b1f2:	06d1      	lsls	r1, r2, #27
   8b1f4:	d52a      	bpl.n	8b24c <__swsetup_r+0xc0>
   8b1f6:	0752      	lsls	r2, r2, #29
   8b1f8:	d414      	bmi.n	8b224 <__swsetup_r+0x98>
   8b1fa:	6921      	ldr	r1, [r4, #16]
   8b1fc:	f043 0308 	orr.w	r3, r3, #8
   8b200:	81a3      	strh	r3, [r4, #12]
   8b202:	b29a      	uxth	r2, r3
   8b204:	2900      	cmp	r1, #0
   8b206:	d1d1      	bne.n	8b1ac <__swsetup_r+0x20>
   8b208:	f402 7020 	and.w	r0, r2, #640	; 0x280
   8b20c:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8b210:	d0cc      	beq.n	8b1ac <__swsetup_r+0x20>
   8b212:	4621      	mov	r1, r4
   8b214:	4628      	mov	r0, r5
   8b216:	f000 fba3 	bl	8b960 <__smakebuf_r>
   8b21a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b21e:	6921      	ldr	r1, [r4, #16]
   8b220:	b29a      	uxth	r2, r3
   8b222:	e7c3      	b.n	8b1ac <__swsetup_r+0x20>
   8b224:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8b226:	b151      	cbz	r1, 8b23e <__swsetup_r+0xb2>
   8b228:	f104 0240 	add.w	r2, r4, #64	; 0x40
   8b22c:	4291      	cmp	r1, r2
   8b22e:	d004      	beq.n	8b23a <__swsetup_r+0xae>
   8b230:	4628      	mov	r0, r5
   8b232:	f7fd fc99 	bl	88b68 <_free_r>
   8b236:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b23a:	2200      	movs	r2, #0
   8b23c:	6322      	str	r2, [r4, #48]	; 0x30
   8b23e:	2200      	movs	r2, #0
   8b240:	6921      	ldr	r1, [r4, #16]
   8b242:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   8b246:	e9c4 1200 	strd	r1, r2, [r4]
   8b24a:	e7d7      	b.n	8b1fc <__swsetup_r+0x70>
   8b24c:	2209      	movs	r2, #9
   8b24e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b252:	602a      	str	r2, [r5, #0]
   8b254:	f04f 30ff 	mov.w	r0, #4294967295
   8b258:	81a3      	strh	r3, [r4, #12]
   8b25a:	bd38      	pop	{r3, r4, r5, pc}
   8b25c:	20070b30 	.word	0x20070b30

0008b260 <abort>:
   8b260:	2006      	movs	r0, #6
   8b262:	b508      	push	{r3, lr}
   8b264:	f000 fbec 	bl	8ba40 <raise>
   8b268:	2001      	movs	r0, #1
   8b26a:	f7f8 fccd 	bl	83c08 <_exit>
   8b26e:	bf00      	nop

0008b270 <__sflush_r>:
   8b270:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8b274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b276:	460c      	mov	r4, r1
   8b278:	0711      	lsls	r1, r2, #28
   8b27a:	4607      	mov	r7, r0
   8b27c:	d443      	bmi.n	8b306 <__sflush_r+0x96>
   8b27e:	6863      	ldr	r3, [r4, #4]
   8b280:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8b284:	2b00      	cmp	r3, #0
   8b286:	81a2      	strh	r2, [r4, #12]
   8b288:	dd5b      	ble.n	8b342 <__sflush_r+0xd2>
   8b28a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   8b28c:	2d00      	cmp	r5, #0
   8b28e:	d056      	beq.n	8b33e <__sflush_r+0xce>
   8b290:	2300      	movs	r3, #0
   8b292:	683e      	ldr	r6, [r7, #0]
   8b294:	603b      	str	r3, [r7, #0]
   8b296:	b293      	uxth	r3, r2
   8b298:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   8b29c:	d155      	bne.n	8b34a <__sflush_r+0xda>
   8b29e:	2301      	movs	r3, #1
   8b2a0:	4638      	mov	r0, r7
   8b2a2:	69e1      	ldr	r1, [r4, #28]
   8b2a4:	47a8      	blx	r5
   8b2a6:	1c42      	adds	r2, r0, #1
   8b2a8:	d065      	beq.n	8b376 <__sflush_r+0x106>
   8b2aa:	89a3      	ldrh	r3, [r4, #12]
   8b2ac:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   8b2ae:	075b      	lsls	r3, r3, #29
   8b2b0:	d505      	bpl.n	8b2be <__sflush_r+0x4e>
   8b2b2:	6863      	ldr	r3, [r4, #4]
   8b2b4:	1ac0      	subs	r0, r0, r3
   8b2b6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8b2b8:	b10b      	cbz	r3, 8b2be <__sflush_r+0x4e>
   8b2ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8b2bc:	1ac0      	subs	r0, r0, r3
   8b2be:	4602      	mov	r2, r0
   8b2c0:	69e1      	ldr	r1, [r4, #28]
   8b2c2:	2300      	movs	r3, #0
   8b2c4:	4638      	mov	r0, r7
   8b2c6:	47a8      	blx	r5
   8b2c8:	1c41      	adds	r1, r0, #1
   8b2ca:	d140      	bne.n	8b34e <__sflush_r+0xde>
   8b2cc:	683b      	ldr	r3, [r7, #0]
   8b2ce:	2b00      	cmp	r3, #0
   8b2d0:	d03d      	beq.n	8b34e <__sflush_r+0xde>
   8b2d2:	2b1d      	cmp	r3, #29
   8b2d4:	d001      	beq.n	8b2da <__sflush_r+0x6a>
   8b2d6:	2b16      	cmp	r3, #22
   8b2d8:	d154      	bne.n	8b384 <__sflush_r+0x114>
   8b2da:	2200      	movs	r2, #0
   8b2dc:	89a3      	ldrh	r3, [r4, #12]
   8b2de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8b2e2:	81a3      	strh	r3, [r4, #12]
   8b2e4:	6923      	ldr	r3, [r4, #16]
   8b2e6:	e9c4 3200 	strd	r3, r2, [r4]
   8b2ea:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8b2ec:	603e      	str	r6, [r7, #0]
   8b2ee:	b331      	cbz	r1, 8b33e <__sflush_r+0xce>
   8b2f0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8b2f4:	4299      	cmp	r1, r3
   8b2f6:	d002      	beq.n	8b2fe <__sflush_r+0x8e>
   8b2f8:	4638      	mov	r0, r7
   8b2fa:	f7fd fc35 	bl	88b68 <_free_r>
   8b2fe:	2300      	movs	r3, #0
   8b300:	4618      	mov	r0, r3
   8b302:	6323      	str	r3, [r4, #48]	; 0x30
   8b304:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b306:	6926      	ldr	r6, [r4, #16]
   8b308:	b1ce      	cbz	r6, 8b33e <__sflush_r+0xce>
   8b30a:	b293      	uxth	r3, r2
   8b30c:	079a      	lsls	r2, r3, #30
   8b30e:	bf18      	it	ne
   8b310:	2300      	movne	r3, #0
   8b312:	6825      	ldr	r5, [r4, #0]
   8b314:	bf08      	it	eq
   8b316:	6963      	ldreq	r3, [r4, #20]
   8b318:	6026      	str	r6, [r4, #0]
   8b31a:	1bad      	subs	r5, r5, r6
   8b31c:	60a3      	str	r3, [r4, #8]
   8b31e:	e00c      	b.n	8b33a <__sflush_r+0xca>
   8b320:	462b      	mov	r3, r5
   8b322:	4632      	mov	r2, r6
   8b324:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8b328:	4638      	mov	r0, r7
   8b32a:	69e1      	ldr	r1, [r4, #28]
   8b32c:	47e0      	blx	ip
   8b32e:	f1b0 0c00 	subs.w	ip, r0, #0
   8b332:	eba5 050c 	sub.w	r5, r5, ip
   8b336:	4466      	add	r6, ip
   8b338:	dd16      	ble.n	8b368 <__sflush_r+0xf8>
   8b33a:	2d00      	cmp	r5, #0
   8b33c:	dcf0      	bgt.n	8b320 <__sflush_r+0xb0>
   8b33e:	2000      	movs	r0, #0
   8b340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b342:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8b344:	2b00      	cmp	r3, #0
   8b346:	dca0      	bgt.n	8b28a <__sflush_r+0x1a>
   8b348:	e7f9      	b.n	8b33e <__sflush_r+0xce>
   8b34a:	6d20      	ldr	r0, [r4, #80]	; 0x50
   8b34c:	e7af      	b.n	8b2ae <__sflush_r+0x3e>
   8b34e:	2200      	movs	r2, #0
   8b350:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b354:	6062      	str	r2, [r4, #4]
   8b356:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8b35a:	6922      	ldr	r2, [r4, #16]
   8b35c:	81a3      	strh	r3, [r4, #12]
   8b35e:	04db      	lsls	r3, r3, #19
   8b360:	6022      	str	r2, [r4, #0]
   8b362:	d5c2      	bpl.n	8b2ea <__sflush_r+0x7a>
   8b364:	6520      	str	r0, [r4, #80]	; 0x50
   8b366:	e7c0      	b.n	8b2ea <__sflush_r+0x7a>
   8b368:	89a3      	ldrh	r3, [r4, #12]
   8b36a:	f04f 30ff 	mov.w	r0, #4294967295
   8b36e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b372:	81a3      	strh	r3, [r4, #12]
   8b374:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b376:	683b      	ldr	r3, [r7, #0]
   8b378:	2b00      	cmp	r3, #0
   8b37a:	d096      	beq.n	8b2aa <__sflush_r+0x3a>
   8b37c:	2b1d      	cmp	r3, #29
   8b37e:	d006      	beq.n	8b38e <__sflush_r+0x11e>
   8b380:	2b16      	cmp	r3, #22
   8b382:	d004      	beq.n	8b38e <__sflush_r+0x11e>
   8b384:	89a3      	ldrh	r3, [r4, #12]
   8b386:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b38a:	81a3      	strh	r3, [r4, #12]
   8b38c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b38e:	2000      	movs	r0, #0
   8b390:	603e      	str	r6, [r7, #0]
   8b392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0008b394 <_fflush_r>:
   8b394:	b538      	push	{r3, r4, r5, lr}
   8b396:	4605      	mov	r5, r0
   8b398:	460c      	mov	r4, r1
   8b39a:	b108      	cbz	r0, 8b3a0 <_fflush_r+0xc>
   8b39c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8b39e:	b1a3      	cbz	r3, 8b3ca <_fflush_r+0x36>
   8b3a0:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8b3a4:	b1b8      	cbz	r0, 8b3d6 <_fflush_r+0x42>
   8b3a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b3a8:	07db      	lsls	r3, r3, #31
   8b3aa:	d401      	bmi.n	8b3b0 <_fflush_r+0x1c>
   8b3ac:	0581      	lsls	r1, r0, #22
   8b3ae:	d515      	bpl.n	8b3dc <_fflush_r+0x48>
   8b3b0:	4628      	mov	r0, r5
   8b3b2:	4621      	mov	r1, r4
   8b3b4:	f7ff ff5c 	bl	8b270 <__sflush_r>
   8b3b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b3ba:	4605      	mov	r5, r0
   8b3bc:	07da      	lsls	r2, r3, #31
   8b3be:	d402      	bmi.n	8b3c6 <_fflush_r+0x32>
   8b3c0:	89a3      	ldrh	r3, [r4, #12]
   8b3c2:	059b      	lsls	r3, r3, #22
   8b3c4:	d50e      	bpl.n	8b3e4 <_fflush_r+0x50>
   8b3c6:	4628      	mov	r0, r5
   8b3c8:	bd38      	pop	{r3, r4, r5, pc}
   8b3ca:	f000 f817 	bl	8b3fc <__sinit>
   8b3ce:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8b3d2:	2800      	cmp	r0, #0
   8b3d4:	d1e7      	bne.n	8b3a6 <_fflush_r+0x12>
   8b3d6:	4605      	mov	r5, r0
   8b3d8:	4628      	mov	r0, r5
   8b3da:	bd38      	pop	{r3, r4, r5, pc}
   8b3dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b3de:	f7fd fccb 	bl	88d78 <__retarget_lock_acquire_recursive>
   8b3e2:	e7e5      	b.n	8b3b0 <_fflush_r+0x1c>
   8b3e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b3e6:	f7fd fcc9 	bl	88d7c <__retarget_lock_release_recursive>
   8b3ea:	4628      	mov	r0, r5
   8b3ec:	bd38      	pop	{r3, r4, r5, pc}
   8b3ee:	bf00      	nop

0008b3f0 <_cleanup_r>:
   8b3f0:	4901      	ldr	r1, [pc, #4]	; (8b3f8 <_cleanup_r+0x8>)
   8b3f2:	f000 ba91 	b.w	8b918 <_fwalk_reent>
   8b3f6:	bf00      	nop
   8b3f8:	0008bc91 	.word	0x0008bc91

0008b3fc <__sinit>:
   8b3fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b400:	4682      	mov	sl, r0
   8b402:	4839      	ldr	r0, [pc, #228]	; (8b4e8 <__sinit+0xec>)
   8b404:	f7fd fcb8 	bl	88d78 <__retarget_lock_acquire_recursive>
   8b408:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
   8b40c:	2c00      	cmp	r4, #0
   8b40e:	d166      	bne.n	8b4de <__sinit+0xe2>
   8b410:	2304      	movs	r3, #4
   8b412:	2203      	movs	r2, #3
   8b414:	4935      	ldr	r1, [pc, #212]	; (8b4ec <__sinit+0xf0>)
   8b416:	f8da 5004 	ldr.w	r5, [sl, #4]
   8b41a:	f8ca 103c 	str.w	r1, [sl, #60]	; 0x3c
   8b41e:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8b4f0 <__sinit+0xf4>
   8b422:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8b4f4 <__sinit+0xf8>
   8b426:	4f34      	ldr	r7, [pc, #208]	; (8b4f8 <__sinit+0xfc>)
   8b428:	4e34      	ldr	r6, [pc, #208]	; (8b4fc <__sinit+0x100>)
   8b42a:	f50a 713b 	add.w	r1, sl, #748	; 0x2ec
   8b42e:	e9ca 21b9 	strd	r2, r1, [sl, #740]	; 0x2e4
   8b432:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
   8b436:	4621      	mov	r1, r4
   8b438:	60eb      	str	r3, [r5, #12]
   8b43a:	2208      	movs	r2, #8
   8b43c:	e9c5 4400 	strd	r4, r4, [r5]
   8b440:	e9c5 4404 	strd	r4, r4, [r5, #16]
   8b444:	666c      	str	r4, [r5, #100]	; 0x64
   8b446:	60ac      	str	r4, [r5, #8]
   8b448:	61ac      	str	r4, [r5, #24]
   8b44a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8b44e:	f7fa fcf1 	bl	85e34 <memset>
   8b452:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8b456:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   8b45a:	62ee      	str	r6, [r5, #44]	; 0x2c
   8b45c:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8b460:	f7fd fc86 	bl	88d70 <__retarget_lock_init_recursive>
   8b464:	f8da 5008 	ldr.w	r5, [sl, #8]
   8b468:	4b25      	ldr	r3, [pc, #148]	; (8b500 <__sinit+0x104>)
   8b46a:	4621      	mov	r1, r4
   8b46c:	60eb      	str	r3, [r5, #12]
   8b46e:	2208      	movs	r2, #8
   8b470:	e9c5 4400 	strd	r4, r4, [r5]
   8b474:	e9c5 4404 	strd	r4, r4, [r5, #16]
   8b478:	666c      	str	r4, [r5, #100]	; 0x64
   8b47a:	60ac      	str	r4, [r5, #8]
   8b47c:	61ac      	str	r4, [r5, #24]
   8b47e:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8b482:	f7fa fcd7 	bl	85e34 <memset>
   8b486:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8b48a:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   8b48e:	62ee      	str	r6, [r5, #44]	; 0x2c
   8b490:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8b494:	f7fd fc6c 	bl	88d70 <__retarget_lock_init_recursive>
   8b498:	f8da 500c 	ldr.w	r5, [sl, #12]
   8b49c:	4b19      	ldr	r3, [pc, #100]	; (8b504 <__sinit+0x108>)
   8b49e:	4621      	mov	r1, r4
   8b4a0:	60eb      	str	r3, [r5, #12]
   8b4a2:	2208      	movs	r2, #8
   8b4a4:	e9c5 4400 	strd	r4, r4, [r5]
   8b4a8:	e9c5 4404 	strd	r4, r4, [r5, #16]
   8b4ac:	666c      	str	r4, [r5, #100]	; 0x64
   8b4ae:	60ac      	str	r4, [r5, #8]
   8b4b0:	61ac      	str	r4, [r5, #24]
   8b4b2:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8b4b6:	f7fa fcbd 	bl	85e34 <memset>
   8b4ba:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8b4be:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8b4c2:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
   8b4c6:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
   8b4ca:	f7fd fc51 	bl	88d70 <__retarget_lock_init_recursive>
   8b4ce:	2301      	movs	r3, #1
   8b4d0:	4805      	ldr	r0, [pc, #20]	; (8b4e8 <__sinit+0xec>)
   8b4d2:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
   8b4d6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b4da:	f7fd bc4f 	b.w	88d7c <__retarget_lock_release_recursive>
   8b4de:	4802      	ldr	r0, [pc, #8]	; (8b4e8 <__sinit+0xec>)
   8b4e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b4e4:	f7fd bc4a 	b.w	88d7c <__retarget_lock_release_recursive>
   8b4e8:	20073318 	.word	0x20073318
   8b4ec:	0008b3f1 	.word	0x0008b3f1
   8b4f0:	0008bac9 	.word	0x0008bac9
   8b4f4:	0008baed 	.word	0x0008baed
   8b4f8:	0008bb2d 	.word	0x0008bb2d
   8b4fc:	0008bb4d 	.word	0x0008bb4d
   8b500:	00010009 	.word	0x00010009
   8b504:	00020012 	.word	0x00020012

0008b508 <__sfp_lock_acquire>:
   8b508:	4801      	ldr	r0, [pc, #4]	; (8b510 <__sfp_lock_acquire+0x8>)
   8b50a:	f7fd bc35 	b.w	88d78 <__retarget_lock_acquire_recursive>
   8b50e:	bf00      	nop
   8b510:	20073314 	.word	0x20073314

0008b514 <__sfp_lock_release>:
   8b514:	4801      	ldr	r0, [pc, #4]	; (8b51c <__sfp_lock_release+0x8>)
   8b516:	f7fd bc31 	b.w	88d7c <__retarget_lock_release_recursive>
   8b51a:	bf00      	nop
   8b51c:	20073314 	.word	0x20073314

0008b520 <__fputwc>:
   8b520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8b524:	b083      	sub	sp, #12
   8b526:	4607      	mov	r7, r0
   8b528:	4688      	mov	r8, r1
   8b52a:	4614      	mov	r4, r2
   8b52c:	f7fe fc50 	bl	89dd0 <__locale_mb_cur_max>
   8b530:	2801      	cmp	r0, #1
   8b532:	d103      	bne.n	8b53c <__fputwc+0x1c>
   8b534:	f108 33ff 	add.w	r3, r8, #4294967295
   8b538:	2bfe      	cmp	r3, #254	; 0xfe
   8b53a:	d933      	bls.n	8b5a4 <__fputwc+0x84>
   8b53c:	4642      	mov	r2, r8
   8b53e:	4638      	mov	r0, r7
   8b540:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8b544:	a901      	add	r1, sp, #4
   8b546:	f000 fb5d 	bl	8bc04 <_wcrtomb_r>
   8b54a:	1c42      	adds	r2, r0, #1
   8b54c:	4606      	mov	r6, r0
   8b54e:	d02f      	beq.n	8b5b0 <__fputwc+0x90>
   8b550:	b318      	cbz	r0, 8b59a <__fputwc+0x7a>
   8b552:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8b556:	2500      	movs	r5, #0
   8b558:	f10d 0905 	add.w	r9, sp, #5
   8b55c:	e008      	b.n	8b570 <__fputwc+0x50>
   8b55e:	6823      	ldr	r3, [r4, #0]
   8b560:	1c5a      	adds	r2, r3, #1
   8b562:	6022      	str	r2, [r4, #0]
   8b564:	7019      	strb	r1, [r3, #0]
   8b566:	3501      	adds	r5, #1
   8b568:	42b5      	cmp	r5, r6
   8b56a:	d216      	bcs.n	8b59a <__fputwc+0x7a>
   8b56c:	f819 1b01 	ldrb.w	r1, [r9], #1
   8b570:	68a3      	ldr	r3, [r4, #8]
   8b572:	3b01      	subs	r3, #1
   8b574:	2b00      	cmp	r3, #0
   8b576:	60a3      	str	r3, [r4, #8]
   8b578:	daf1      	bge.n	8b55e <__fputwc+0x3e>
   8b57a:	69a2      	ldr	r2, [r4, #24]
   8b57c:	4293      	cmp	r3, r2
   8b57e:	db01      	blt.n	8b584 <__fputwc+0x64>
   8b580:	290a      	cmp	r1, #10
   8b582:	d1ec      	bne.n	8b55e <__fputwc+0x3e>
   8b584:	4622      	mov	r2, r4
   8b586:	4638      	mov	r0, r7
   8b588:	f000 fae4 	bl	8bb54 <__swbuf_r>
   8b58c:	1c43      	adds	r3, r0, #1
   8b58e:	d1ea      	bne.n	8b566 <__fputwc+0x46>
   8b590:	4606      	mov	r6, r0
   8b592:	4630      	mov	r0, r6
   8b594:	b003      	add	sp, #12
   8b596:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8b59a:	4646      	mov	r6, r8
   8b59c:	4630      	mov	r0, r6
   8b59e:	b003      	add	sp, #12
   8b5a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8b5a4:	fa5f f188 	uxtb.w	r1, r8
   8b5a8:	4606      	mov	r6, r0
   8b5aa:	f88d 1004 	strb.w	r1, [sp, #4]
   8b5ae:	e7d2      	b.n	8b556 <__fputwc+0x36>
   8b5b0:	4630      	mov	r0, r6
   8b5b2:	89a3      	ldrh	r3, [r4, #12]
   8b5b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b5b8:	81a3      	strh	r3, [r4, #12]
   8b5ba:	b003      	add	sp, #12
   8b5bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008b5c0 <_fputwc_r>:
   8b5c0:	b530      	push	{r4, r5, lr}
   8b5c2:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8b5c4:	4614      	mov	r4, r2
   8b5c6:	f013 0f01 	tst.w	r3, #1
   8b5ca:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8b5ce:	4605      	mov	r5, r0
   8b5d0:	b083      	sub	sp, #12
   8b5d2:	b29a      	uxth	r2, r3
   8b5d4:	d101      	bne.n	8b5da <_fputwc_r+0x1a>
   8b5d6:	0598      	lsls	r0, r3, #22
   8b5d8:	d51c      	bpl.n	8b614 <_fputwc_r+0x54>
   8b5da:	0490      	lsls	r0, r2, #18
   8b5dc:	d406      	bmi.n	8b5ec <_fputwc_r+0x2c>
   8b5de:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8b5e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8b5e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8b5e8:	81a3      	strh	r3, [r4, #12]
   8b5ea:	6662      	str	r2, [r4, #100]	; 0x64
   8b5ec:	4622      	mov	r2, r4
   8b5ee:	4628      	mov	r0, r5
   8b5f0:	f7ff ff96 	bl	8b520 <__fputwc>
   8b5f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b5f6:	4605      	mov	r5, r0
   8b5f8:	07da      	lsls	r2, r3, #31
   8b5fa:	d402      	bmi.n	8b602 <_fputwc_r+0x42>
   8b5fc:	89a3      	ldrh	r3, [r4, #12]
   8b5fe:	059b      	lsls	r3, r3, #22
   8b600:	d502      	bpl.n	8b608 <_fputwc_r+0x48>
   8b602:	4628      	mov	r0, r5
   8b604:	b003      	add	sp, #12
   8b606:	bd30      	pop	{r4, r5, pc}
   8b608:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b60a:	f7fd fbb7 	bl	88d7c <__retarget_lock_release_recursive>
   8b60e:	4628      	mov	r0, r5
   8b610:	b003      	add	sp, #12
   8b612:	bd30      	pop	{r4, r5, pc}
   8b614:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b616:	9101      	str	r1, [sp, #4]
   8b618:	f7fd fbae 	bl	88d78 <__retarget_lock_acquire_recursive>
   8b61c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b620:	9901      	ldr	r1, [sp, #4]
   8b622:	b29a      	uxth	r2, r3
   8b624:	e7d9      	b.n	8b5da <_fputwc_r+0x1a>
   8b626:	bf00      	nop

0008b628 <__sfvwrite_r>:
   8b628:	6893      	ldr	r3, [r2, #8]
   8b62a:	2b00      	cmp	r3, #0
   8b62c:	f000 80b7 	beq.w	8b79e <__sfvwrite_r+0x176>
   8b630:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b634:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   8b638:	460c      	mov	r4, r1
   8b63a:	0719      	lsls	r1, r3, #28
   8b63c:	4680      	mov	r8, r0
   8b63e:	4617      	mov	r7, r2
   8b640:	b083      	sub	sp, #12
   8b642:	b298      	uxth	r0, r3
   8b644:	d525      	bpl.n	8b692 <__sfvwrite_r+0x6a>
   8b646:	6923      	ldr	r3, [r4, #16]
   8b648:	b31b      	cbz	r3, 8b692 <__sfvwrite_r+0x6a>
   8b64a:	f010 0302 	ands.w	r3, r0, #2
   8b64e:	683d      	ldr	r5, [r7, #0]
   8b650:	d02d      	beq.n	8b6ae <__sfvwrite_r+0x86>
   8b652:	f04f 0b00 	mov.w	fp, #0
   8b656:	465e      	mov	r6, fp
   8b658:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8b914 <__sfvwrite_r+0x2ec>
   8b65c:	2e00      	cmp	r6, #0
   8b65e:	f000 808b 	beq.w	8b778 <__sfvwrite_r+0x150>
   8b662:	4556      	cmp	r6, sl
   8b664:	4633      	mov	r3, r6
   8b666:	465a      	mov	r2, fp
   8b668:	bf28      	it	cs
   8b66a:	4653      	movcs	r3, sl
   8b66c:	4640      	mov	r0, r8
   8b66e:	69e1      	ldr	r1, [r4, #28]
   8b670:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8b674:	47e0      	blx	ip
   8b676:	2800      	cmp	r0, #0
   8b678:	f340 8087 	ble.w	8b78a <__sfvwrite_r+0x162>
   8b67c:	68bb      	ldr	r3, [r7, #8]
   8b67e:	4483      	add	fp, r0
   8b680:	1a1b      	subs	r3, r3, r0
   8b682:	1a36      	subs	r6, r6, r0
   8b684:	60bb      	str	r3, [r7, #8]
   8b686:	2b00      	cmp	r3, #0
   8b688:	d1e8      	bne.n	8b65c <__sfvwrite_r+0x34>
   8b68a:	2000      	movs	r0, #0
   8b68c:	b003      	add	sp, #12
   8b68e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b692:	4621      	mov	r1, r4
   8b694:	4640      	mov	r0, r8
   8b696:	f7ff fd79 	bl	8b18c <__swsetup_r>
   8b69a:	2800      	cmp	r0, #0
   8b69c:	f040 8136 	bne.w	8b90c <__sfvwrite_r+0x2e4>
   8b6a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b6a4:	683d      	ldr	r5, [r7, #0]
   8b6a6:	b298      	uxth	r0, r3
   8b6a8:	f010 0302 	ands.w	r3, r0, #2
   8b6ac:	d1d1      	bne.n	8b652 <__sfvwrite_r+0x2a>
   8b6ae:	f010 0901 	ands.w	r9, r0, #1
   8b6b2:	d176      	bne.n	8b7a2 <__sfvwrite_r+0x17a>
   8b6b4:	464e      	mov	r6, r9
   8b6b6:	2e00      	cmp	r6, #0
   8b6b8:	d05a      	beq.n	8b770 <__sfvwrite_r+0x148>
   8b6ba:	0582      	lsls	r2, r0, #22
   8b6bc:	f8d4 b008 	ldr.w	fp, [r4, #8]
   8b6c0:	f140 80b5 	bpl.w	8b82e <__sfvwrite_r+0x206>
   8b6c4:	45b3      	cmp	fp, r6
   8b6c6:	465a      	mov	r2, fp
   8b6c8:	f200 80cd 	bhi.w	8b866 <__sfvwrite_r+0x23e>
   8b6cc:	f410 6f90 	tst.w	r0, #1152	; 0x480
   8b6d0:	f000 80cb 	beq.w	8b86a <__sfvwrite_r+0x242>
   8b6d4:	6823      	ldr	r3, [r4, #0]
   8b6d6:	6921      	ldr	r1, [r4, #16]
   8b6d8:	eba3 0b01 	sub.w	fp, r3, r1
   8b6dc:	6963      	ldr	r3, [r4, #20]
   8b6de:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   8b6e2:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   8b6e6:	f10b 0301 	add.w	r3, fp, #1
   8b6ea:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   8b6ee:	4433      	add	r3, r6
   8b6f0:	4553      	cmp	r3, sl
   8b6f2:	4652      	mov	r2, sl
   8b6f4:	bf84      	itt	hi
   8b6f6:	469a      	movhi	sl, r3
   8b6f8:	4652      	movhi	r2, sl
   8b6fa:	0543      	lsls	r3, r0, #21
   8b6fc:	f140 80ea 	bpl.w	8b8d4 <__sfvwrite_r+0x2ac>
   8b700:	4611      	mov	r1, r2
   8b702:	4640      	mov	r0, r8
   8b704:	f7fd fb3c 	bl	88d80 <_malloc_r>
   8b708:	2800      	cmp	r0, #0
   8b70a:	f000 80f9 	beq.w	8b900 <__sfvwrite_r+0x2d8>
   8b70e:	465a      	mov	r2, fp
   8b710:	6921      	ldr	r1, [r4, #16]
   8b712:	9001      	str	r0, [sp, #4]
   8b714:	f7fa fb18 	bl	85d48 <memcpy>
   8b718:	89a2      	ldrh	r2, [r4, #12]
   8b71a:	9b01      	ldr	r3, [sp, #4]
   8b71c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8b720:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8b724:	81a2      	strh	r2, [r4, #12]
   8b726:	eb03 000b 	add.w	r0, r3, fp
   8b72a:	6123      	str	r3, [r4, #16]
   8b72c:	4632      	mov	r2, r6
   8b72e:	ebaa 030b 	sub.w	r3, sl, fp
   8b732:	46b3      	mov	fp, r6
   8b734:	f8c4 a014 	str.w	sl, [r4, #20]
   8b738:	60a3      	str	r3, [r4, #8]
   8b73a:	6020      	str	r0, [r4, #0]
   8b73c:	46b2      	mov	sl, r6
   8b73e:	2600      	movs	r6, #0
   8b740:	4649      	mov	r1, r9
   8b742:	9201      	str	r2, [sp, #4]
   8b744:	f7fe fb60 	bl	89e08 <memmove>
   8b748:	68a3      	ldr	r3, [r4, #8]
   8b74a:	6821      	ldr	r1, [r4, #0]
   8b74c:	9a01      	ldr	r2, [sp, #4]
   8b74e:	eba3 030b 	sub.w	r3, r3, fp
   8b752:	440a      	add	r2, r1
   8b754:	60a3      	str	r3, [r4, #8]
   8b756:	6022      	str	r2, [r4, #0]
   8b758:	68b8      	ldr	r0, [r7, #8]
   8b75a:	44d1      	add	r9, sl
   8b75c:	eba0 000a 	sub.w	r0, r0, sl
   8b760:	60b8      	str	r0, [r7, #8]
   8b762:	2800      	cmp	r0, #0
   8b764:	d091      	beq.n	8b68a <__sfvwrite_r+0x62>
   8b766:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8b76a:	b280      	uxth	r0, r0
   8b76c:	2e00      	cmp	r6, #0
   8b76e:	d1a4      	bne.n	8b6ba <__sfvwrite_r+0x92>
   8b770:	e9d5 9600 	ldrd	r9, r6, [r5]
   8b774:	3508      	adds	r5, #8
   8b776:	e79e      	b.n	8b6b6 <__sfvwrite_r+0x8e>
   8b778:	e9d5 b600 	ldrd	fp, r6, [r5]
   8b77c:	3508      	adds	r5, #8
   8b77e:	e76d      	b.n	8b65c <__sfvwrite_r+0x34>
   8b780:	4621      	mov	r1, r4
   8b782:	4640      	mov	r0, r8
   8b784:	f7ff fe06 	bl	8b394 <_fflush_r>
   8b788:	b380      	cbz	r0, 8b7ec <__sfvwrite_r+0x1c4>
   8b78a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b78e:	f04f 30ff 	mov.w	r0, #4294967295
   8b792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b796:	81a3      	strh	r3, [r4, #12]
   8b798:	b003      	add	sp, #12
   8b79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b79e:	2000      	movs	r0, #0
   8b7a0:	4770      	bx	lr
   8b7a2:	461e      	mov	r6, r3
   8b7a4:	46aa      	mov	sl, r5
   8b7a6:	4699      	mov	r9, r3
   8b7a8:	4618      	mov	r0, r3
   8b7aa:	461d      	mov	r5, r3
   8b7ac:	b356      	cbz	r6, 8b804 <__sfvwrite_r+0x1dc>
   8b7ae:	2800      	cmp	r0, #0
   8b7b0:	d032      	beq.n	8b818 <__sfvwrite_r+0x1f0>
   8b7b2:	464a      	mov	r2, r9
   8b7b4:	6820      	ldr	r0, [r4, #0]
   8b7b6:	6921      	ldr	r1, [r4, #16]
   8b7b8:	42b2      	cmp	r2, r6
   8b7ba:	bf28      	it	cs
   8b7bc:	4632      	movcs	r2, r6
   8b7be:	4288      	cmp	r0, r1
   8b7c0:	6963      	ldr	r3, [r4, #20]
   8b7c2:	d904      	bls.n	8b7ce <__sfvwrite_r+0x1a6>
   8b7c4:	68a1      	ldr	r1, [r4, #8]
   8b7c6:	eb03 0b01 	add.w	fp, r3, r1
   8b7ca:	455a      	cmp	r2, fp
   8b7cc:	dc74      	bgt.n	8b8b8 <__sfvwrite_r+0x290>
   8b7ce:	4293      	cmp	r3, r2
   8b7d0:	dc65      	bgt.n	8b89e <__sfvwrite_r+0x276>
   8b7d2:	462a      	mov	r2, r5
   8b7d4:	4640      	mov	r0, r8
   8b7d6:	69e1      	ldr	r1, [r4, #28]
   8b7d8:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8b7dc:	47e0      	blx	ip
   8b7de:	f1b0 0b00 	subs.w	fp, r0, #0
   8b7e2:	ddd2      	ble.n	8b78a <__sfvwrite_r+0x162>
   8b7e4:	ebb9 090b 	subs.w	r9, r9, fp
   8b7e8:	d0ca      	beq.n	8b780 <__sfvwrite_r+0x158>
   8b7ea:	2001      	movs	r0, #1
   8b7ec:	68bb      	ldr	r3, [r7, #8]
   8b7ee:	445d      	add	r5, fp
   8b7f0:	eba3 030b 	sub.w	r3, r3, fp
   8b7f4:	eba6 060b 	sub.w	r6, r6, fp
   8b7f8:	60bb      	str	r3, [r7, #8]
   8b7fa:	2b00      	cmp	r3, #0
   8b7fc:	f43f af45 	beq.w	8b68a <__sfvwrite_r+0x62>
   8b800:	2e00      	cmp	r6, #0
   8b802:	d1d4      	bne.n	8b7ae <__sfvwrite_r+0x186>
   8b804:	f10a 0308 	add.w	r3, sl, #8
   8b808:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8b80c:	469a      	mov	sl, r3
   8b80e:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8b812:	3308      	adds	r3, #8
   8b814:	2e00      	cmp	r6, #0
   8b816:	d0f7      	beq.n	8b808 <__sfvwrite_r+0x1e0>
   8b818:	4632      	mov	r2, r6
   8b81a:	210a      	movs	r1, #10
   8b81c:	4628      	mov	r0, r5
   8b81e:	f7fd fd5b 	bl	892d8 <memchr>
   8b822:	2800      	cmp	r0, #0
   8b824:	d069      	beq.n	8b8fa <__sfvwrite_r+0x2d2>
   8b826:	3001      	adds	r0, #1
   8b828:	eba0 0905 	sub.w	r9, r0, r5
   8b82c:	e7c1      	b.n	8b7b2 <__sfvwrite_r+0x18a>
   8b82e:	6820      	ldr	r0, [r4, #0]
   8b830:	6923      	ldr	r3, [r4, #16]
   8b832:	4298      	cmp	r0, r3
   8b834:	d81b      	bhi.n	8b86e <__sfvwrite_r+0x246>
   8b836:	6963      	ldr	r3, [r4, #20]
   8b838:	42b3      	cmp	r3, r6
   8b83a:	d818      	bhi.n	8b86e <__sfvwrite_r+0x246>
   8b83c:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   8b840:	45b4      	cmp	ip, r6
   8b842:	bf28      	it	cs
   8b844:	46b4      	movcs	ip, r6
   8b846:	fb9c fcf3 	sdiv	ip, ip, r3
   8b84a:	464a      	mov	r2, r9
   8b84c:	fb03 f30c 	mul.w	r3, r3, ip
   8b850:	4640      	mov	r0, r8
   8b852:	69e1      	ldr	r1, [r4, #28]
   8b854:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8b858:	47e0      	blx	ip
   8b85a:	f1b0 0a00 	subs.w	sl, r0, #0
   8b85e:	dd94      	ble.n	8b78a <__sfvwrite_r+0x162>
   8b860:	eba6 060a 	sub.w	r6, r6, sl
   8b864:	e778      	b.n	8b758 <__sfvwrite_r+0x130>
   8b866:	46b3      	mov	fp, r6
   8b868:	4632      	mov	r2, r6
   8b86a:	6820      	ldr	r0, [r4, #0]
   8b86c:	e766      	b.n	8b73c <__sfvwrite_r+0x114>
   8b86e:	45b3      	cmp	fp, r6
   8b870:	46da      	mov	sl, fp
   8b872:	bf28      	it	cs
   8b874:	46b2      	movcs	sl, r6
   8b876:	4649      	mov	r1, r9
   8b878:	4652      	mov	r2, sl
   8b87a:	f7fe fac5 	bl	89e08 <memmove>
   8b87e:	68a3      	ldr	r3, [r4, #8]
   8b880:	6822      	ldr	r2, [r4, #0]
   8b882:	eba3 030a 	sub.w	r3, r3, sl
   8b886:	4452      	add	r2, sl
   8b888:	60a3      	str	r3, [r4, #8]
   8b88a:	6022      	str	r2, [r4, #0]
   8b88c:	2b00      	cmp	r3, #0
   8b88e:	d1e7      	bne.n	8b860 <__sfvwrite_r+0x238>
   8b890:	4621      	mov	r1, r4
   8b892:	4640      	mov	r0, r8
   8b894:	f7ff fd7e 	bl	8b394 <_fflush_r>
   8b898:	2800      	cmp	r0, #0
   8b89a:	d0e1      	beq.n	8b860 <__sfvwrite_r+0x238>
   8b89c:	e775      	b.n	8b78a <__sfvwrite_r+0x162>
   8b89e:	4629      	mov	r1, r5
   8b8a0:	4693      	mov	fp, r2
   8b8a2:	9201      	str	r2, [sp, #4]
   8b8a4:	f7fe fab0 	bl	89e08 <memmove>
   8b8a8:	68a3      	ldr	r3, [r4, #8]
   8b8aa:	9a01      	ldr	r2, [sp, #4]
   8b8ac:	1a9b      	subs	r3, r3, r2
   8b8ae:	60a3      	str	r3, [r4, #8]
   8b8b0:	6823      	ldr	r3, [r4, #0]
   8b8b2:	441a      	add	r2, r3
   8b8b4:	6022      	str	r2, [r4, #0]
   8b8b6:	e795      	b.n	8b7e4 <__sfvwrite_r+0x1bc>
   8b8b8:	4629      	mov	r1, r5
   8b8ba:	465a      	mov	r2, fp
   8b8bc:	f7fe faa4 	bl	89e08 <memmove>
   8b8c0:	6823      	ldr	r3, [r4, #0]
   8b8c2:	4621      	mov	r1, r4
   8b8c4:	445b      	add	r3, fp
   8b8c6:	4640      	mov	r0, r8
   8b8c8:	6023      	str	r3, [r4, #0]
   8b8ca:	f7ff fd63 	bl	8b394 <_fflush_r>
   8b8ce:	2800      	cmp	r0, #0
   8b8d0:	d088      	beq.n	8b7e4 <__sfvwrite_r+0x1bc>
   8b8d2:	e75a      	b.n	8b78a <__sfvwrite_r+0x162>
   8b8d4:	4640      	mov	r0, r8
   8b8d6:	f7fe fb13 	bl	89f00 <_realloc_r>
   8b8da:	4603      	mov	r3, r0
   8b8dc:	2800      	cmp	r0, #0
   8b8de:	f47f af22 	bne.w	8b726 <__sfvwrite_r+0xfe>
   8b8e2:	4640      	mov	r0, r8
   8b8e4:	6921      	ldr	r1, [r4, #16]
   8b8e6:	f7fd f93f 	bl	88b68 <_free_r>
   8b8ea:	220c      	movs	r2, #12
   8b8ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b8f0:	f8c8 2000 	str.w	r2, [r8]
   8b8f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8b8f8:	e749      	b.n	8b78e <__sfvwrite_r+0x166>
   8b8fa:	1c72      	adds	r2, r6, #1
   8b8fc:	4691      	mov	r9, r2
   8b8fe:	e759      	b.n	8b7b4 <__sfvwrite_r+0x18c>
   8b900:	220c      	movs	r2, #12
   8b902:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b906:	f8c8 2000 	str.w	r2, [r8]
   8b90a:	e740      	b.n	8b78e <__sfvwrite_r+0x166>
   8b90c:	f04f 30ff 	mov.w	r0, #4294967295
   8b910:	e6bc      	b.n	8b68c <__sfvwrite_r+0x64>
   8b912:	bf00      	nop
   8b914:	7ffffc00 	.word	0x7ffffc00

0008b918 <_fwalk_reent>:
   8b918:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8b91c:	f04f 0900 	mov.w	r9, #0
   8b920:	4607      	mov	r7, r0
   8b922:	4688      	mov	r8, r1
   8b924:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8b928:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8b92c:	3d01      	subs	r5, #1
   8b92e:	d410      	bmi.n	8b952 <_fwalk_reent+0x3a>
   8b930:	89a3      	ldrh	r3, [r4, #12]
   8b932:	3d01      	subs	r5, #1
   8b934:	2b01      	cmp	r3, #1
   8b936:	d908      	bls.n	8b94a <_fwalk_reent+0x32>
   8b938:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8b93c:	3301      	adds	r3, #1
   8b93e:	d004      	beq.n	8b94a <_fwalk_reent+0x32>
   8b940:	4621      	mov	r1, r4
   8b942:	4638      	mov	r0, r7
   8b944:	47c0      	blx	r8
   8b946:	ea49 0900 	orr.w	r9, r9, r0
   8b94a:	1c6b      	adds	r3, r5, #1
   8b94c:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8b950:	d1ee      	bne.n	8b930 <_fwalk_reent+0x18>
   8b952:	6836      	ldr	r6, [r6, #0]
   8b954:	2e00      	cmp	r6, #0
   8b956:	d1e7      	bne.n	8b928 <_fwalk_reent+0x10>
   8b958:	4648      	mov	r0, r9
   8b95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8b95e:	bf00      	nop

0008b960 <__smakebuf_r>:
   8b960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8b964:	898b      	ldrh	r3, [r1, #12]
   8b966:	460c      	mov	r4, r1
   8b968:	0799      	lsls	r1, r3, #30
   8b96a:	b096      	sub	sp, #88	; 0x58
   8b96c:	d508      	bpl.n	8b980 <__smakebuf_r+0x20>
   8b96e:	2201      	movs	r2, #1
   8b970:	f104 0343 	add.w	r3, r4, #67	; 0x43
   8b974:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8b978:	6023      	str	r3, [r4, #0]
   8b97a:	b016      	add	sp, #88	; 0x58
   8b97c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b980:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8b984:	4606      	mov	r6, r0
   8b986:	2900      	cmp	r1, #0
   8b988:	db27      	blt.n	8b9da <__smakebuf_r+0x7a>
   8b98a:	466a      	mov	r2, sp
   8b98c:	f000 f9e6 	bl	8bd5c <_fstat_r>
   8b990:	2800      	cmp	r0, #0
   8b992:	db21      	blt.n	8b9d8 <__smakebuf_r+0x78>
   8b994:	9d01      	ldr	r5, [sp, #4]
   8b996:	f44f 6880 	mov.w	r8, #1024	; 0x400
   8b99a:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   8b99e:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   8b9a2:	fab5 f585 	clz	r5, r5
   8b9a6:	f44f 6700 	mov.w	r7, #2048	; 0x800
   8b9aa:	096d      	lsrs	r5, r5, #5
   8b9ac:	4641      	mov	r1, r8
   8b9ae:	4630      	mov	r0, r6
   8b9b0:	f7fd f9e6 	bl	88d80 <_malloc_r>
   8b9b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b9b8:	b1f0      	cbz	r0, 8b9f8 <__smakebuf_r+0x98>
   8b9ba:	4a20      	ldr	r2, [pc, #128]	; (8ba3c <__smakebuf_r+0xdc>)
   8b9bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8b9c0:	63f2      	str	r2, [r6, #60]	; 0x3c
   8b9c2:	f8c4 8014 	str.w	r8, [r4, #20]
   8b9c6:	81a3      	strh	r3, [r4, #12]
   8b9c8:	6020      	str	r0, [r4, #0]
   8b9ca:	6120      	str	r0, [r4, #16]
   8b9cc:	bb35      	cbnz	r5, 8ba1c <__smakebuf_r+0xbc>
   8b9ce:	433b      	orrs	r3, r7
   8b9d0:	81a3      	strh	r3, [r4, #12]
   8b9d2:	b016      	add	sp, #88	; 0x58
   8b9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8b9d8:	89a3      	ldrh	r3, [r4, #12]
   8b9da:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   8b9de:	d019      	beq.n	8ba14 <__smakebuf_r+0xb4>
   8b9e0:	f04f 0840 	mov.w	r8, #64	; 0x40
   8b9e4:	4630      	mov	r0, r6
   8b9e6:	4641      	mov	r1, r8
   8b9e8:	2500      	movs	r5, #0
   8b9ea:	f7fd f9c9 	bl	88d80 <_malloc_r>
   8b9ee:	462f      	mov	r7, r5
   8b9f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b9f4:	2800      	cmp	r0, #0
   8b9f6:	d1e0      	bne.n	8b9ba <__smakebuf_r+0x5a>
   8b9f8:	059a      	lsls	r2, r3, #22
   8b9fa:	d4be      	bmi.n	8b97a <__smakebuf_r+0x1a>
   8b9fc:	2101      	movs	r1, #1
   8b9fe:	f023 0303 	bic.w	r3, r3, #3
   8ba02:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8ba06:	f043 0302 	orr.w	r3, r3, #2
   8ba0a:	e9c4 2104 	strd	r2, r1, [r4, #16]
   8ba0e:	81a3      	strh	r3, [r4, #12]
   8ba10:	6022      	str	r2, [r4, #0]
   8ba12:	e7b2      	b.n	8b97a <__smakebuf_r+0x1a>
   8ba14:	f44f 6880 	mov.w	r8, #1024	; 0x400
   8ba18:	462f      	mov	r7, r5
   8ba1a:	e7c7      	b.n	8b9ac <__smakebuf_r+0x4c>
   8ba1c:	4630      	mov	r0, r6
   8ba1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8ba22:	f000 f9af 	bl	8bd84 <_isatty_r>
   8ba26:	b910      	cbnz	r0, 8ba2e <__smakebuf_r+0xce>
   8ba28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ba2c:	e7cf      	b.n	8b9ce <__smakebuf_r+0x6e>
   8ba2e:	89a3      	ldrh	r3, [r4, #12]
   8ba30:	f023 0303 	bic.w	r3, r3, #3
   8ba34:	f043 0301 	orr.w	r3, r3, #1
   8ba38:	b21b      	sxth	r3, r3
   8ba3a:	e7c8      	b.n	8b9ce <__smakebuf_r+0x6e>
   8ba3c:	0008b3f1 	.word	0x0008b3f1

0008ba40 <raise>:
   8ba40:	b538      	push	{r3, r4, r5, lr}
   8ba42:	4b15      	ldr	r3, [pc, #84]	; (8ba98 <raise+0x58>)
   8ba44:	281f      	cmp	r0, #31
   8ba46:	681d      	ldr	r5, [r3, #0]
   8ba48:	d820      	bhi.n	8ba8c <raise+0x4c>
   8ba4a:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
   8ba4e:	4604      	mov	r4, r0
   8ba50:	b162      	cbz	r2, 8ba6c <raise+0x2c>
   8ba52:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   8ba56:	b14b      	cbz	r3, 8ba6c <raise+0x2c>
   8ba58:	2b01      	cmp	r3, #1
   8ba5a:	d015      	beq.n	8ba88 <raise+0x48>
   8ba5c:	1c59      	adds	r1, r3, #1
   8ba5e:	d00f      	beq.n	8ba80 <raise+0x40>
   8ba60:	2500      	movs	r5, #0
   8ba62:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   8ba66:	4798      	blx	r3
   8ba68:	4628      	mov	r0, r5
   8ba6a:	bd38      	pop	{r3, r4, r5, pc}
   8ba6c:	4628      	mov	r0, r5
   8ba6e:	f000 f829 	bl	8bac4 <_getpid_r>
   8ba72:	4622      	mov	r2, r4
   8ba74:	4601      	mov	r1, r0
   8ba76:	4628      	mov	r0, r5
   8ba78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8ba7c:	f000 b80e 	b.w	8ba9c <_kill_r>
   8ba80:	2316      	movs	r3, #22
   8ba82:	2001      	movs	r0, #1
   8ba84:	602b      	str	r3, [r5, #0]
   8ba86:	bd38      	pop	{r3, r4, r5, pc}
   8ba88:	2000      	movs	r0, #0
   8ba8a:	bd38      	pop	{r3, r4, r5, pc}
   8ba8c:	2316      	movs	r3, #22
   8ba8e:	f04f 30ff 	mov.w	r0, #4294967295
   8ba92:	602b      	str	r3, [r5, #0]
   8ba94:	bd38      	pop	{r3, r4, r5, pc}
   8ba96:	bf00      	nop
   8ba98:	20070b30 	.word	0x20070b30

0008ba9c <_kill_r>:
   8ba9c:	b570      	push	{r4, r5, r6, lr}
   8ba9e:	2600      	movs	r6, #0
   8baa0:	4d07      	ldr	r5, [pc, #28]	; (8bac0 <_kill_r+0x24>)
   8baa2:	4604      	mov	r4, r0
   8baa4:	4608      	mov	r0, r1
   8baa6:	4611      	mov	r1, r2
   8baa8:	602e      	str	r6, [r5, #0]
   8baaa:	f7f8 f8af 	bl	83c0c <_kill>
   8baae:	1c43      	adds	r3, r0, #1
   8bab0:	d000      	beq.n	8bab4 <_kill_r+0x18>
   8bab2:	bd70      	pop	{r4, r5, r6, pc}
   8bab4:	682b      	ldr	r3, [r5, #0]
   8bab6:	2b00      	cmp	r3, #0
   8bab8:	d0fb      	beq.n	8bab2 <_kill_r+0x16>
   8baba:	6023      	str	r3, [r4, #0]
   8babc:	bd70      	pop	{r4, r5, r6, pc}
   8babe:	bf00      	nop
   8bac0:	20073350 	.word	0x20073350

0008bac4 <_getpid_r>:
   8bac4:	f7f8 b8a4 	b.w	83c10 <_getpid>

0008bac8 <__sread>:
   8bac8:	b510      	push	{r4, lr}
   8baca:	460c      	mov	r4, r1
   8bacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bad0:	f000 f980 	bl	8bdd4 <_read_r>
   8bad4:	2800      	cmp	r0, #0
   8bad6:	db03      	blt.n	8bae0 <__sread+0x18>
   8bad8:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8bada:	4403      	add	r3, r0
   8badc:	6523      	str	r3, [r4, #80]	; 0x50
   8bade:	bd10      	pop	{r4, pc}
   8bae0:	89a3      	ldrh	r3, [r4, #12]
   8bae2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8bae6:	81a3      	strh	r3, [r4, #12]
   8bae8:	bd10      	pop	{r4, pc}
   8baea:	bf00      	nop

0008baec <__swrite>:
   8baec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8baf0:	460c      	mov	r4, r1
   8baf2:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8baf6:	461f      	mov	r7, r3
   8baf8:	05cb      	lsls	r3, r1, #23
   8bafa:	4605      	mov	r5, r0
   8bafc:	4616      	mov	r6, r2
   8bafe:	d40b      	bmi.n	8bb18 <__swrite+0x2c>
   8bb00:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8bb04:	81a1      	strh	r1, [r4, #12]
   8bb06:	463b      	mov	r3, r7
   8bb08:	4632      	mov	r2, r6
   8bb0a:	4628      	mov	r0, r5
   8bb0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8bb10:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8bb14:	f000 b894 	b.w	8bc40 <_write_r>
   8bb18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8bb1c:	2302      	movs	r3, #2
   8bb1e:	2200      	movs	r2, #0
   8bb20:	f000 f942 	bl	8bda8 <_lseek_r>
   8bb24:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8bb28:	e7ea      	b.n	8bb00 <__swrite+0x14>
   8bb2a:	bf00      	nop

0008bb2c <__sseek>:
   8bb2c:	b510      	push	{r4, lr}
   8bb2e:	460c      	mov	r4, r1
   8bb30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bb34:	f000 f938 	bl	8bda8 <_lseek_r>
   8bb38:	89a3      	ldrh	r3, [r4, #12]
   8bb3a:	1c42      	adds	r2, r0, #1
   8bb3c:	bf0e      	itee	eq
   8bb3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8bb42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8bb46:	6520      	strne	r0, [r4, #80]	; 0x50
   8bb48:	81a3      	strh	r3, [r4, #12]
   8bb4a:	bd10      	pop	{r4, pc}

0008bb4c <__sclose>:
   8bb4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bb50:	f000 b88c 	b.w	8bc6c <_close_r>

0008bb54 <__swbuf_r>:
   8bb54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bb56:	4606      	mov	r6, r0
   8bb58:	460d      	mov	r5, r1
   8bb5a:	4614      	mov	r4, r2
   8bb5c:	b110      	cbz	r0, 8bb64 <__swbuf_r+0x10>
   8bb5e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8bb60:	2b00      	cmp	r3, #0
   8bb62:	d043      	beq.n	8bbec <__swbuf_r+0x98>
   8bb64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8bb68:	69a3      	ldr	r3, [r4, #24]
   8bb6a:	0710      	lsls	r0, r2, #28
   8bb6c:	60a3      	str	r3, [r4, #8]
   8bb6e:	b291      	uxth	r1, r2
   8bb70:	d51b      	bpl.n	8bbaa <__swbuf_r+0x56>
   8bb72:	6923      	ldr	r3, [r4, #16]
   8bb74:	b1cb      	cbz	r3, 8bbaa <__swbuf_r+0x56>
   8bb76:	b2ed      	uxtb	r5, r5
   8bb78:	0489      	lsls	r1, r1, #18
   8bb7a:	462f      	mov	r7, r5
   8bb7c:	d522      	bpl.n	8bbc4 <__swbuf_r+0x70>
   8bb7e:	6822      	ldr	r2, [r4, #0]
   8bb80:	6961      	ldr	r1, [r4, #20]
   8bb82:	1ad3      	subs	r3, r2, r3
   8bb84:	4299      	cmp	r1, r3
   8bb86:	dd29      	ble.n	8bbdc <__swbuf_r+0x88>
   8bb88:	3301      	adds	r3, #1
   8bb8a:	68a1      	ldr	r1, [r4, #8]
   8bb8c:	3901      	subs	r1, #1
   8bb8e:	60a1      	str	r1, [r4, #8]
   8bb90:	1c51      	adds	r1, r2, #1
   8bb92:	6021      	str	r1, [r4, #0]
   8bb94:	7015      	strb	r5, [r2, #0]
   8bb96:	6962      	ldr	r2, [r4, #20]
   8bb98:	429a      	cmp	r2, r3
   8bb9a:	d02a      	beq.n	8bbf2 <__swbuf_r+0x9e>
   8bb9c:	89a3      	ldrh	r3, [r4, #12]
   8bb9e:	07db      	lsls	r3, r3, #31
   8bba0:	d501      	bpl.n	8bba6 <__swbuf_r+0x52>
   8bba2:	2d0a      	cmp	r5, #10
   8bba4:	d025      	beq.n	8bbf2 <__swbuf_r+0x9e>
   8bba6:	4638      	mov	r0, r7
   8bba8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bbaa:	4621      	mov	r1, r4
   8bbac:	4630      	mov	r0, r6
   8bbae:	f7ff faed 	bl	8b18c <__swsetup_r>
   8bbb2:	bb20      	cbnz	r0, 8bbfe <__swbuf_r+0xaa>
   8bbb4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8bbb8:	b2ed      	uxtb	r5, r5
   8bbba:	b291      	uxth	r1, r2
   8bbbc:	0489      	lsls	r1, r1, #18
   8bbbe:	462f      	mov	r7, r5
   8bbc0:	6923      	ldr	r3, [r4, #16]
   8bbc2:	d4dc      	bmi.n	8bb7e <__swbuf_r+0x2a>
   8bbc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8bbc8:	81a2      	strh	r2, [r4, #12]
   8bbca:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8bbcc:	6961      	ldr	r1, [r4, #20]
   8bbce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   8bbd2:	6662      	str	r2, [r4, #100]	; 0x64
   8bbd4:	6822      	ldr	r2, [r4, #0]
   8bbd6:	1ad3      	subs	r3, r2, r3
   8bbd8:	4299      	cmp	r1, r3
   8bbda:	dcd5      	bgt.n	8bb88 <__swbuf_r+0x34>
   8bbdc:	4621      	mov	r1, r4
   8bbde:	4630      	mov	r0, r6
   8bbe0:	f7ff fbd8 	bl	8b394 <_fflush_r>
   8bbe4:	b958      	cbnz	r0, 8bbfe <__swbuf_r+0xaa>
   8bbe6:	2301      	movs	r3, #1
   8bbe8:	6822      	ldr	r2, [r4, #0]
   8bbea:	e7ce      	b.n	8bb8a <__swbuf_r+0x36>
   8bbec:	f7ff fc06 	bl	8b3fc <__sinit>
   8bbf0:	e7b8      	b.n	8bb64 <__swbuf_r+0x10>
   8bbf2:	4621      	mov	r1, r4
   8bbf4:	4630      	mov	r0, r6
   8bbf6:	f7ff fbcd 	bl	8b394 <_fflush_r>
   8bbfa:	2800      	cmp	r0, #0
   8bbfc:	d0d3      	beq.n	8bba6 <__swbuf_r+0x52>
   8bbfe:	f04f 37ff 	mov.w	r7, #4294967295
   8bc02:	e7d0      	b.n	8bba6 <__swbuf_r+0x52>

0008bc04 <_wcrtomb_r>:
   8bc04:	b570      	push	{r4, r5, r6, lr}
   8bc06:	4605      	mov	r5, r0
   8bc08:	461c      	mov	r4, r3
   8bc0a:	b084      	sub	sp, #16
   8bc0c:	b139      	cbz	r1, 8bc1e <_wcrtomb_r+0x1a>
   8bc0e:	4e0b      	ldr	r6, [pc, #44]	; (8bc3c <_wcrtomb_r+0x38>)
   8bc10:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
   8bc14:	47b0      	blx	r6
   8bc16:	1c43      	adds	r3, r0, #1
   8bc18:	d009      	beq.n	8bc2e <_wcrtomb_r+0x2a>
   8bc1a:	b004      	add	sp, #16
   8bc1c:	bd70      	pop	{r4, r5, r6, pc}
   8bc1e:	460a      	mov	r2, r1
   8bc20:	4906      	ldr	r1, [pc, #24]	; (8bc3c <_wcrtomb_r+0x38>)
   8bc22:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
   8bc26:	a901      	add	r1, sp, #4
   8bc28:	47b0      	blx	r6
   8bc2a:	1c43      	adds	r3, r0, #1
   8bc2c:	d1f5      	bne.n	8bc1a <_wcrtomb_r+0x16>
   8bc2e:	2200      	movs	r2, #0
   8bc30:	238a      	movs	r3, #138	; 0x8a
   8bc32:	6022      	str	r2, [r4, #0]
   8bc34:	602b      	str	r3, [r5, #0]
   8bc36:	b004      	add	sp, #16
   8bc38:	bd70      	pop	{r4, r5, r6, pc}
   8bc3a:	bf00      	nop
   8bc3c:	20071374 	.word	0x20071374

0008bc40 <_write_r>:
   8bc40:	b538      	push	{r3, r4, r5, lr}
   8bc42:	460c      	mov	r4, r1
   8bc44:	4611      	mov	r1, r2
   8bc46:	2200      	movs	r2, #0
   8bc48:	4684      	mov	ip, r0
   8bc4a:	4d07      	ldr	r5, [pc, #28]	; (8bc68 <_write_r+0x28>)
   8bc4c:	4620      	mov	r0, r4
   8bc4e:	602a      	str	r2, [r5, #0]
   8bc50:	461a      	mov	r2, r3
   8bc52:	4664      	mov	r4, ip
   8bc54:	f7f7 fb3c 	bl	832d0 <_write>
   8bc58:	1c43      	adds	r3, r0, #1
   8bc5a:	d000      	beq.n	8bc5e <_write_r+0x1e>
   8bc5c:	bd38      	pop	{r3, r4, r5, pc}
   8bc5e:	682b      	ldr	r3, [r5, #0]
   8bc60:	2b00      	cmp	r3, #0
   8bc62:	d0fb      	beq.n	8bc5c <_write_r+0x1c>
   8bc64:	6023      	str	r3, [r4, #0]
   8bc66:	bd38      	pop	{r3, r4, r5, pc}
   8bc68:	20073350 	.word	0x20073350

0008bc6c <_close_r>:
   8bc6c:	2200      	movs	r2, #0
   8bc6e:	b538      	push	{r3, r4, r5, lr}
   8bc70:	4d06      	ldr	r5, [pc, #24]	; (8bc8c <_close_r+0x20>)
   8bc72:	4604      	mov	r4, r0
   8bc74:	4608      	mov	r0, r1
   8bc76:	602a      	str	r2, [r5, #0]
   8bc78:	f7f7 ffb8 	bl	83bec <_close>
   8bc7c:	1c43      	adds	r3, r0, #1
   8bc7e:	d000      	beq.n	8bc82 <_close_r+0x16>
   8bc80:	bd38      	pop	{r3, r4, r5, pc}
   8bc82:	682b      	ldr	r3, [r5, #0]
   8bc84:	2b00      	cmp	r3, #0
   8bc86:	d0fb      	beq.n	8bc80 <_close_r+0x14>
   8bc88:	6023      	str	r3, [r4, #0]
   8bc8a:	bd38      	pop	{r3, r4, r5, pc}
   8bc8c:	20073350 	.word	0x20073350

0008bc90 <_fclose_r>:
   8bc90:	b570      	push	{r4, r5, r6, lr}
   8bc92:	2900      	cmp	r1, #0
   8bc94:	d04b      	beq.n	8bd2e <_fclose_r+0x9e>
   8bc96:	4606      	mov	r6, r0
   8bc98:	460c      	mov	r4, r1
   8bc9a:	b110      	cbz	r0, 8bca2 <_fclose_r+0x12>
   8bc9c:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8bc9e:	2b00      	cmp	r3, #0
   8bca0:	d048      	beq.n	8bd34 <_fclose_r+0xa4>
   8bca2:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8bca4:	07d8      	lsls	r0, r3, #31
   8bca6:	d534      	bpl.n	8bd12 <_fclose_r+0x82>
   8bca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bcac:	2b00      	cmp	r3, #0
   8bcae:	d03e      	beq.n	8bd2e <_fclose_r+0x9e>
   8bcb0:	4621      	mov	r1, r4
   8bcb2:	4630      	mov	r0, r6
   8bcb4:	f7ff fadc 	bl	8b270 <__sflush_r>
   8bcb8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8bcba:	4605      	mov	r5, r0
   8bcbc:	b133      	cbz	r3, 8bccc <_fclose_r+0x3c>
   8bcbe:	4630      	mov	r0, r6
   8bcc0:	69e1      	ldr	r1, [r4, #28]
   8bcc2:	4798      	blx	r3
   8bcc4:	2800      	cmp	r0, #0
   8bcc6:	bfb8      	it	lt
   8bcc8:	f04f 35ff 	movlt.w	r5, #4294967295
   8bccc:	89a3      	ldrh	r3, [r4, #12]
   8bcce:	061a      	lsls	r2, r3, #24
   8bcd0:	d43b      	bmi.n	8bd4a <_fclose_r+0xba>
   8bcd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8bcd4:	b141      	cbz	r1, 8bce8 <_fclose_r+0x58>
   8bcd6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8bcda:	4299      	cmp	r1, r3
   8bcdc:	d002      	beq.n	8bce4 <_fclose_r+0x54>
   8bcde:	4630      	mov	r0, r6
   8bce0:	f7fc ff42 	bl	88b68 <_free_r>
   8bce4:	2300      	movs	r3, #0
   8bce6:	6323      	str	r3, [r4, #48]	; 0x30
   8bce8:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8bcea:	b121      	cbz	r1, 8bcf6 <_fclose_r+0x66>
   8bcec:	4630      	mov	r0, r6
   8bcee:	f7fc ff3b 	bl	88b68 <_free_r>
   8bcf2:	2300      	movs	r3, #0
   8bcf4:	6463      	str	r3, [r4, #68]	; 0x44
   8bcf6:	f7ff fc07 	bl	8b508 <__sfp_lock_acquire>
   8bcfa:	2200      	movs	r2, #0
   8bcfc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8bcfe:	81a2      	strh	r2, [r4, #12]
   8bd00:	07db      	lsls	r3, r3, #31
   8bd02:	d527      	bpl.n	8bd54 <_fclose_r+0xc4>
   8bd04:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bd06:	f7fd f835 	bl	88d74 <__retarget_lock_close_recursive>
   8bd0a:	f7ff fc03 	bl	8b514 <__sfp_lock_release>
   8bd0e:	4628      	mov	r0, r5
   8bd10:	bd70      	pop	{r4, r5, r6, pc}
   8bd12:	89a3      	ldrh	r3, [r4, #12]
   8bd14:	0599      	lsls	r1, r3, #22
   8bd16:	d4cb      	bmi.n	8bcb0 <_fclose_r+0x20>
   8bd18:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bd1a:	f7fd f82d 	bl	88d78 <__retarget_lock_acquire_recursive>
   8bd1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bd22:	2b00      	cmp	r3, #0
   8bd24:	d1c4      	bne.n	8bcb0 <_fclose_r+0x20>
   8bd26:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8bd28:	f015 0501 	ands.w	r5, r5, #1
   8bd2c:	d008      	beq.n	8bd40 <_fclose_r+0xb0>
   8bd2e:	2500      	movs	r5, #0
   8bd30:	4628      	mov	r0, r5
   8bd32:	bd70      	pop	{r4, r5, r6, pc}
   8bd34:	f7ff fb62 	bl	8b3fc <__sinit>
   8bd38:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8bd3a:	07d8      	lsls	r0, r3, #31
   8bd3c:	d4b4      	bmi.n	8bca8 <_fclose_r+0x18>
   8bd3e:	e7e8      	b.n	8bd12 <_fclose_r+0x82>
   8bd40:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bd42:	f7fd f81b 	bl	88d7c <__retarget_lock_release_recursive>
   8bd46:	4628      	mov	r0, r5
   8bd48:	bd70      	pop	{r4, r5, r6, pc}
   8bd4a:	4630      	mov	r0, r6
   8bd4c:	6921      	ldr	r1, [r4, #16]
   8bd4e:	f7fc ff0b 	bl	88b68 <_free_r>
   8bd52:	e7be      	b.n	8bcd2 <_fclose_r+0x42>
   8bd54:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bd56:	f7fd f811 	bl	88d7c <__retarget_lock_release_recursive>
   8bd5a:	e7d3      	b.n	8bd04 <_fclose_r+0x74>

0008bd5c <_fstat_r>:
   8bd5c:	b570      	push	{r4, r5, r6, lr}
   8bd5e:	2600      	movs	r6, #0
   8bd60:	4d07      	ldr	r5, [pc, #28]	; (8bd80 <_fstat_r+0x24>)
   8bd62:	4604      	mov	r4, r0
   8bd64:	4608      	mov	r0, r1
   8bd66:	4611      	mov	r1, r2
   8bd68:	602e      	str	r6, [r5, #0]
   8bd6a:	f7f7 ff43 	bl	83bf4 <_fstat>
   8bd6e:	1c43      	adds	r3, r0, #1
   8bd70:	d000      	beq.n	8bd74 <_fstat_r+0x18>
   8bd72:	bd70      	pop	{r4, r5, r6, pc}
   8bd74:	682b      	ldr	r3, [r5, #0]
   8bd76:	2b00      	cmp	r3, #0
   8bd78:	d0fb      	beq.n	8bd72 <_fstat_r+0x16>
   8bd7a:	6023      	str	r3, [r4, #0]
   8bd7c:	bd70      	pop	{r4, r5, r6, pc}
   8bd7e:	bf00      	nop
   8bd80:	20073350 	.word	0x20073350

0008bd84 <_isatty_r>:
   8bd84:	2200      	movs	r2, #0
   8bd86:	b538      	push	{r3, r4, r5, lr}
   8bd88:	4d06      	ldr	r5, [pc, #24]	; (8bda4 <_isatty_r+0x20>)
   8bd8a:	4604      	mov	r4, r0
   8bd8c:	4608      	mov	r0, r1
   8bd8e:	602a      	str	r2, [r5, #0]
   8bd90:	f7f7 ff36 	bl	83c00 <_isatty>
   8bd94:	1c43      	adds	r3, r0, #1
   8bd96:	d000      	beq.n	8bd9a <_isatty_r+0x16>
   8bd98:	bd38      	pop	{r3, r4, r5, pc}
   8bd9a:	682b      	ldr	r3, [r5, #0]
   8bd9c:	2b00      	cmp	r3, #0
   8bd9e:	d0fb      	beq.n	8bd98 <_isatty_r+0x14>
   8bda0:	6023      	str	r3, [r4, #0]
   8bda2:	bd38      	pop	{r3, r4, r5, pc}
   8bda4:	20073350 	.word	0x20073350

0008bda8 <_lseek_r>:
   8bda8:	b538      	push	{r3, r4, r5, lr}
   8bdaa:	460c      	mov	r4, r1
   8bdac:	4611      	mov	r1, r2
   8bdae:	2200      	movs	r2, #0
   8bdb0:	4684      	mov	ip, r0
   8bdb2:	4d07      	ldr	r5, [pc, #28]	; (8bdd0 <_lseek_r+0x28>)
   8bdb4:	4620      	mov	r0, r4
   8bdb6:	602a      	str	r2, [r5, #0]
   8bdb8:	461a      	mov	r2, r3
   8bdba:	4664      	mov	r4, ip
   8bdbc:	f7f7 ff22 	bl	83c04 <_lseek>
   8bdc0:	1c43      	adds	r3, r0, #1
   8bdc2:	d000      	beq.n	8bdc6 <_lseek_r+0x1e>
   8bdc4:	bd38      	pop	{r3, r4, r5, pc}
   8bdc6:	682b      	ldr	r3, [r5, #0]
   8bdc8:	2b00      	cmp	r3, #0
   8bdca:	d0fb      	beq.n	8bdc4 <_lseek_r+0x1c>
   8bdcc:	6023      	str	r3, [r4, #0]
   8bdce:	bd38      	pop	{r3, r4, r5, pc}
   8bdd0:	20073350 	.word	0x20073350

0008bdd4 <_read_r>:
   8bdd4:	b538      	push	{r3, r4, r5, lr}
   8bdd6:	460c      	mov	r4, r1
   8bdd8:	4611      	mov	r1, r2
   8bdda:	2200      	movs	r2, #0
   8bddc:	4684      	mov	ip, r0
   8bdde:	4d07      	ldr	r5, [pc, #28]	; (8bdfc <_read_r+0x28>)
   8bde0:	4620      	mov	r0, r4
   8bde2:	602a      	str	r2, [r5, #0]
   8bde4:	461a      	mov	r2, r3
   8bde6:	4664      	mov	r4, ip
   8bde8:	f7f9 ff46 	bl	85c78 <_read>
   8bdec:	1c43      	adds	r3, r0, #1
   8bdee:	d000      	beq.n	8bdf2 <_read_r+0x1e>
   8bdf0:	bd38      	pop	{r3, r4, r5, pc}
   8bdf2:	682b      	ldr	r3, [r5, #0]
   8bdf4:	2b00      	cmp	r3, #0
   8bdf6:	d0fb      	beq.n	8bdf0 <_read_r+0x1c>
   8bdf8:	6023      	str	r3, [r4, #0]
   8bdfa:	bd38      	pop	{r3, r4, r5, pc}
   8bdfc:	20073350 	.word	0x20073350

0008be00 <__aeabi_drsub>:
   8be00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8be04:	e002      	b.n	8be0c <__adddf3>
   8be06:	bf00      	nop

0008be08 <__aeabi_dsub>:
   8be08:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008be0c <__adddf3>:
   8be0c:	b530      	push	{r4, r5, lr}
   8be0e:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8be12:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8be16:	ea94 0f05 	teq	r4, r5
   8be1a:	bf08      	it	eq
   8be1c:	ea90 0f02 	teqeq	r0, r2
   8be20:	bf1f      	itttt	ne
   8be22:	ea54 0c00 	orrsne.w	ip, r4, r0
   8be26:	ea55 0c02 	orrsne.w	ip, r5, r2
   8be2a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8be2e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8be32:	f000 80e2 	beq.w	8bffa <__adddf3+0x1ee>
   8be36:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8be3a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8be3e:	bfb8      	it	lt
   8be40:	426d      	neglt	r5, r5
   8be42:	dd0c      	ble.n	8be5e <__adddf3+0x52>
   8be44:	442c      	add	r4, r5
   8be46:	ea80 0202 	eor.w	r2, r0, r2
   8be4a:	ea81 0303 	eor.w	r3, r1, r3
   8be4e:	ea82 0000 	eor.w	r0, r2, r0
   8be52:	ea83 0101 	eor.w	r1, r3, r1
   8be56:	ea80 0202 	eor.w	r2, r0, r2
   8be5a:	ea81 0303 	eor.w	r3, r1, r3
   8be5e:	2d36      	cmp	r5, #54	; 0x36
   8be60:	bf88      	it	hi
   8be62:	bd30      	pophi	{r4, r5, pc}
   8be64:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8be68:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8be6c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8be70:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8be74:	d002      	beq.n	8be7c <__adddf3+0x70>
   8be76:	4240      	negs	r0, r0
   8be78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8be7c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8be80:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8be84:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8be88:	d002      	beq.n	8be90 <__adddf3+0x84>
   8be8a:	4252      	negs	r2, r2
   8be8c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8be90:	ea94 0f05 	teq	r4, r5
   8be94:	f000 80a7 	beq.w	8bfe6 <__adddf3+0x1da>
   8be98:	f1a4 0401 	sub.w	r4, r4, #1
   8be9c:	f1d5 0e20 	rsbs	lr, r5, #32
   8bea0:	db0d      	blt.n	8bebe <__adddf3+0xb2>
   8bea2:	fa02 fc0e 	lsl.w	ip, r2, lr
   8bea6:	fa22 f205 	lsr.w	r2, r2, r5
   8beaa:	1880      	adds	r0, r0, r2
   8beac:	f141 0100 	adc.w	r1, r1, #0
   8beb0:	fa03 f20e 	lsl.w	r2, r3, lr
   8beb4:	1880      	adds	r0, r0, r2
   8beb6:	fa43 f305 	asr.w	r3, r3, r5
   8beba:	4159      	adcs	r1, r3
   8bebc:	e00e      	b.n	8bedc <__adddf3+0xd0>
   8bebe:	f1a5 0520 	sub.w	r5, r5, #32
   8bec2:	f10e 0e20 	add.w	lr, lr, #32
   8bec6:	2a01      	cmp	r2, #1
   8bec8:	fa03 fc0e 	lsl.w	ip, r3, lr
   8becc:	bf28      	it	cs
   8bece:	f04c 0c02 	orrcs.w	ip, ip, #2
   8bed2:	fa43 f305 	asr.w	r3, r3, r5
   8bed6:	18c0      	adds	r0, r0, r3
   8bed8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8bedc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8bee0:	d507      	bpl.n	8bef2 <__adddf3+0xe6>
   8bee2:	f04f 0e00 	mov.w	lr, #0
   8bee6:	f1dc 0c00 	rsbs	ip, ip, #0
   8beea:	eb7e 0000 	sbcs.w	r0, lr, r0
   8beee:	eb6e 0101 	sbc.w	r1, lr, r1
   8bef2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8bef6:	d31b      	bcc.n	8bf30 <__adddf3+0x124>
   8bef8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8befc:	d30c      	bcc.n	8bf18 <__adddf3+0x10c>
   8befe:	0849      	lsrs	r1, r1, #1
   8bf00:	ea5f 0030 	movs.w	r0, r0, rrx
   8bf04:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8bf08:	f104 0401 	add.w	r4, r4, #1
   8bf0c:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8bf10:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8bf14:	f080 809a 	bcs.w	8c04c <__adddf3+0x240>
   8bf18:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8bf1c:	bf08      	it	eq
   8bf1e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8bf22:	f150 0000 	adcs.w	r0, r0, #0
   8bf26:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8bf2a:	ea41 0105 	orr.w	r1, r1, r5
   8bf2e:	bd30      	pop	{r4, r5, pc}
   8bf30:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8bf34:	4140      	adcs	r0, r0
   8bf36:	eb41 0101 	adc.w	r1, r1, r1
   8bf3a:	3c01      	subs	r4, #1
   8bf3c:	bf28      	it	cs
   8bf3e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8bf42:	d2e9      	bcs.n	8bf18 <__adddf3+0x10c>
   8bf44:	f091 0f00 	teq	r1, #0
   8bf48:	bf04      	itt	eq
   8bf4a:	4601      	moveq	r1, r0
   8bf4c:	2000      	moveq	r0, #0
   8bf4e:	fab1 f381 	clz	r3, r1
   8bf52:	bf08      	it	eq
   8bf54:	3320      	addeq	r3, #32
   8bf56:	f1a3 030b 	sub.w	r3, r3, #11
   8bf5a:	f1b3 0220 	subs.w	r2, r3, #32
   8bf5e:	da0c      	bge.n	8bf7a <__adddf3+0x16e>
   8bf60:	320c      	adds	r2, #12
   8bf62:	dd08      	ble.n	8bf76 <__adddf3+0x16a>
   8bf64:	f102 0c14 	add.w	ip, r2, #20
   8bf68:	f1c2 020c 	rsb	r2, r2, #12
   8bf6c:	fa01 f00c 	lsl.w	r0, r1, ip
   8bf70:	fa21 f102 	lsr.w	r1, r1, r2
   8bf74:	e00c      	b.n	8bf90 <__adddf3+0x184>
   8bf76:	f102 0214 	add.w	r2, r2, #20
   8bf7a:	bfd8      	it	le
   8bf7c:	f1c2 0c20 	rsble	ip, r2, #32
   8bf80:	fa01 f102 	lsl.w	r1, r1, r2
   8bf84:	fa20 fc0c 	lsr.w	ip, r0, ip
   8bf88:	bfdc      	itt	le
   8bf8a:	ea41 010c 	orrle.w	r1, r1, ip
   8bf8e:	4090      	lslle	r0, r2
   8bf90:	1ae4      	subs	r4, r4, r3
   8bf92:	bfa2      	ittt	ge
   8bf94:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8bf98:	4329      	orrge	r1, r5
   8bf9a:	bd30      	popge	{r4, r5, pc}
   8bf9c:	ea6f 0404 	mvn.w	r4, r4
   8bfa0:	3c1f      	subs	r4, #31
   8bfa2:	da1c      	bge.n	8bfde <__adddf3+0x1d2>
   8bfa4:	340c      	adds	r4, #12
   8bfa6:	dc0e      	bgt.n	8bfc6 <__adddf3+0x1ba>
   8bfa8:	f104 0414 	add.w	r4, r4, #20
   8bfac:	f1c4 0220 	rsb	r2, r4, #32
   8bfb0:	fa20 f004 	lsr.w	r0, r0, r4
   8bfb4:	fa01 f302 	lsl.w	r3, r1, r2
   8bfb8:	ea40 0003 	orr.w	r0, r0, r3
   8bfbc:	fa21 f304 	lsr.w	r3, r1, r4
   8bfc0:	ea45 0103 	orr.w	r1, r5, r3
   8bfc4:	bd30      	pop	{r4, r5, pc}
   8bfc6:	f1c4 040c 	rsb	r4, r4, #12
   8bfca:	f1c4 0220 	rsb	r2, r4, #32
   8bfce:	fa20 f002 	lsr.w	r0, r0, r2
   8bfd2:	fa01 f304 	lsl.w	r3, r1, r4
   8bfd6:	ea40 0003 	orr.w	r0, r0, r3
   8bfda:	4629      	mov	r1, r5
   8bfdc:	bd30      	pop	{r4, r5, pc}
   8bfde:	fa21 f004 	lsr.w	r0, r1, r4
   8bfe2:	4629      	mov	r1, r5
   8bfe4:	bd30      	pop	{r4, r5, pc}
   8bfe6:	f094 0f00 	teq	r4, #0
   8bfea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8bfee:	bf06      	itte	eq
   8bff0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8bff4:	3401      	addeq	r4, #1
   8bff6:	3d01      	subne	r5, #1
   8bff8:	e74e      	b.n	8be98 <__adddf3+0x8c>
   8bffa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8bffe:	bf18      	it	ne
   8c000:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c004:	d029      	beq.n	8c05a <__adddf3+0x24e>
   8c006:	ea94 0f05 	teq	r4, r5
   8c00a:	bf08      	it	eq
   8c00c:	ea90 0f02 	teqeq	r0, r2
   8c010:	d005      	beq.n	8c01e <__adddf3+0x212>
   8c012:	ea54 0c00 	orrs.w	ip, r4, r0
   8c016:	bf04      	itt	eq
   8c018:	4619      	moveq	r1, r3
   8c01a:	4610      	moveq	r0, r2
   8c01c:	bd30      	pop	{r4, r5, pc}
   8c01e:	ea91 0f03 	teq	r1, r3
   8c022:	bf1e      	ittt	ne
   8c024:	2100      	movne	r1, #0
   8c026:	2000      	movne	r0, #0
   8c028:	bd30      	popne	{r4, r5, pc}
   8c02a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8c02e:	d105      	bne.n	8c03c <__adddf3+0x230>
   8c030:	0040      	lsls	r0, r0, #1
   8c032:	4149      	adcs	r1, r1
   8c034:	bf28      	it	cs
   8c036:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8c03a:	bd30      	pop	{r4, r5, pc}
   8c03c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8c040:	bf3c      	itt	cc
   8c042:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8c046:	bd30      	popcc	{r4, r5, pc}
   8c048:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c04c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8c050:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c054:	f04f 0000 	mov.w	r0, #0
   8c058:	bd30      	pop	{r4, r5, pc}
   8c05a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c05e:	bf1a      	itte	ne
   8c060:	4619      	movne	r1, r3
   8c062:	4610      	movne	r0, r2
   8c064:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8c068:	bf1c      	itt	ne
   8c06a:	460b      	movne	r3, r1
   8c06c:	4602      	movne	r2, r0
   8c06e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c072:	bf06      	itte	eq
   8c074:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8c078:	ea91 0f03 	teqeq	r1, r3
   8c07c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8c080:	bd30      	pop	{r4, r5, pc}
   8c082:	bf00      	nop

0008c084 <__aeabi_ui2d>:
   8c084:	f090 0f00 	teq	r0, #0
   8c088:	bf04      	itt	eq
   8c08a:	2100      	moveq	r1, #0
   8c08c:	4770      	bxeq	lr
   8c08e:	b530      	push	{r4, r5, lr}
   8c090:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c094:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c098:	f04f 0500 	mov.w	r5, #0
   8c09c:	f04f 0100 	mov.w	r1, #0
   8c0a0:	e750      	b.n	8bf44 <__adddf3+0x138>
   8c0a2:	bf00      	nop

0008c0a4 <__aeabi_i2d>:
   8c0a4:	f090 0f00 	teq	r0, #0
   8c0a8:	bf04      	itt	eq
   8c0aa:	2100      	moveq	r1, #0
   8c0ac:	4770      	bxeq	lr
   8c0ae:	b530      	push	{r4, r5, lr}
   8c0b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c0b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c0b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8c0bc:	bf48      	it	mi
   8c0be:	4240      	negmi	r0, r0
   8c0c0:	f04f 0100 	mov.w	r1, #0
   8c0c4:	e73e      	b.n	8bf44 <__adddf3+0x138>
   8c0c6:	bf00      	nop

0008c0c8 <__aeabi_f2d>:
   8c0c8:	0042      	lsls	r2, r0, #1
   8c0ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8c0ce:	ea4f 0131 	mov.w	r1, r1, rrx
   8c0d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8c0d6:	bf1f      	itttt	ne
   8c0d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8c0dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8c0e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8c0e4:	4770      	bxne	lr
   8c0e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8c0ea:	bf08      	it	eq
   8c0ec:	4770      	bxeq	lr
   8c0ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8c0f2:	bf04      	itt	eq
   8c0f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8c0f8:	4770      	bxeq	lr
   8c0fa:	b530      	push	{r4, r5, lr}
   8c0fc:	f44f 7460 	mov.w	r4, #896	; 0x380
   8c100:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c104:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c108:	e71c      	b.n	8bf44 <__adddf3+0x138>
   8c10a:	bf00      	nop

0008c10c <__aeabi_ul2d>:
   8c10c:	ea50 0201 	orrs.w	r2, r0, r1
   8c110:	bf08      	it	eq
   8c112:	4770      	bxeq	lr
   8c114:	b530      	push	{r4, r5, lr}
   8c116:	f04f 0500 	mov.w	r5, #0
   8c11a:	e00a      	b.n	8c132 <__aeabi_l2d+0x16>

0008c11c <__aeabi_l2d>:
   8c11c:	ea50 0201 	orrs.w	r2, r0, r1
   8c120:	bf08      	it	eq
   8c122:	4770      	bxeq	lr
   8c124:	b530      	push	{r4, r5, lr}
   8c126:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8c12a:	d502      	bpl.n	8c132 <__aeabi_l2d+0x16>
   8c12c:	4240      	negs	r0, r0
   8c12e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c132:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c136:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c13a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8c13e:	f43f aed8 	beq.w	8bef2 <__adddf3+0xe6>
   8c142:	f04f 0203 	mov.w	r2, #3
   8c146:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c14a:	bf18      	it	ne
   8c14c:	3203      	addne	r2, #3
   8c14e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c152:	bf18      	it	ne
   8c154:	3203      	addne	r2, #3
   8c156:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8c15a:	f1c2 0320 	rsb	r3, r2, #32
   8c15e:	fa00 fc03 	lsl.w	ip, r0, r3
   8c162:	fa20 f002 	lsr.w	r0, r0, r2
   8c166:	fa01 fe03 	lsl.w	lr, r1, r3
   8c16a:	ea40 000e 	orr.w	r0, r0, lr
   8c16e:	fa21 f102 	lsr.w	r1, r1, r2
   8c172:	4414      	add	r4, r2
   8c174:	e6bd      	b.n	8bef2 <__adddf3+0xe6>
   8c176:	bf00      	nop

0008c178 <__aeabi_dmul>:
   8c178:	b570      	push	{r4, r5, r6, lr}
   8c17a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c17e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c182:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c186:	bf1d      	ittte	ne
   8c188:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c18c:	ea94 0f0c 	teqne	r4, ip
   8c190:	ea95 0f0c 	teqne	r5, ip
   8c194:	f000 f8de 	bleq	8c354 <__aeabi_dmul+0x1dc>
   8c198:	442c      	add	r4, r5
   8c19a:	ea81 0603 	eor.w	r6, r1, r3
   8c19e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8c1a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8c1a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8c1aa:	bf18      	it	ne
   8c1ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8c1b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c1b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8c1b8:	d038      	beq.n	8c22c <__aeabi_dmul+0xb4>
   8c1ba:	fba0 ce02 	umull	ip, lr, r0, r2
   8c1be:	f04f 0500 	mov.w	r5, #0
   8c1c2:	fbe1 e502 	umlal	lr, r5, r1, r2
   8c1c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8c1ca:	fbe0 e503 	umlal	lr, r5, r0, r3
   8c1ce:	f04f 0600 	mov.w	r6, #0
   8c1d2:	fbe1 5603 	umlal	r5, r6, r1, r3
   8c1d6:	f09c 0f00 	teq	ip, #0
   8c1da:	bf18      	it	ne
   8c1dc:	f04e 0e01 	orrne.w	lr, lr, #1
   8c1e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8c1e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8c1e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8c1ec:	d204      	bcs.n	8c1f8 <__aeabi_dmul+0x80>
   8c1ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8c1f2:	416d      	adcs	r5, r5
   8c1f4:	eb46 0606 	adc.w	r6, r6, r6
   8c1f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8c1fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8c200:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8c204:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8c208:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8c20c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c210:	bf88      	it	hi
   8c212:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c216:	d81e      	bhi.n	8c256 <__aeabi_dmul+0xde>
   8c218:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8c21c:	bf08      	it	eq
   8c21e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8c222:	f150 0000 	adcs.w	r0, r0, #0
   8c226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c22a:	bd70      	pop	{r4, r5, r6, pc}
   8c22c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8c230:	ea46 0101 	orr.w	r1, r6, r1
   8c234:	ea40 0002 	orr.w	r0, r0, r2
   8c238:	ea81 0103 	eor.w	r1, r1, r3
   8c23c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8c240:	bfc2      	ittt	gt
   8c242:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c246:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c24a:	bd70      	popgt	{r4, r5, r6, pc}
   8c24c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c250:	f04f 0e00 	mov.w	lr, #0
   8c254:	3c01      	subs	r4, #1
   8c256:	f300 80ab 	bgt.w	8c3b0 <__aeabi_dmul+0x238>
   8c25a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8c25e:	bfde      	ittt	le
   8c260:	2000      	movle	r0, #0
   8c262:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8c266:	bd70      	pople	{r4, r5, r6, pc}
   8c268:	f1c4 0400 	rsb	r4, r4, #0
   8c26c:	3c20      	subs	r4, #32
   8c26e:	da35      	bge.n	8c2dc <__aeabi_dmul+0x164>
   8c270:	340c      	adds	r4, #12
   8c272:	dc1b      	bgt.n	8c2ac <__aeabi_dmul+0x134>
   8c274:	f104 0414 	add.w	r4, r4, #20
   8c278:	f1c4 0520 	rsb	r5, r4, #32
   8c27c:	fa00 f305 	lsl.w	r3, r0, r5
   8c280:	fa20 f004 	lsr.w	r0, r0, r4
   8c284:	fa01 f205 	lsl.w	r2, r1, r5
   8c288:	ea40 0002 	orr.w	r0, r0, r2
   8c28c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8c290:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c294:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c298:	fa21 f604 	lsr.w	r6, r1, r4
   8c29c:	eb42 0106 	adc.w	r1, r2, r6
   8c2a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c2a4:	bf08      	it	eq
   8c2a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c2aa:	bd70      	pop	{r4, r5, r6, pc}
   8c2ac:	f1c4 040c 	rsb	r4, r4, #12
   8c2b0:	f1c4 0520 	rsb	r5, r4, #32
   8c2b4:	fa00 f304 	lsl.w	r3, r0, r4
   8c2b8:	fa20 f005 	lsr.w	r0, r0, r5
   8c2bc:	fa01 f204 	lsl.w	r2, r1, r4
   8c2c0:	ea40 0002 	orr.w	r0, r0, r2
   8c2c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c2c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c2cc:	f141 0100 	adc.w	r1, r1, #0
   8c2d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c2d4:	bf08      	it	eq
   8c2d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c2da:	bd70      	pop	{r4, r5, r6, pc}
   8c2dc:	f1c4 0520 	rsb	r5, r4, #32
   8c2e0:	fa00 f205 	lsl.w	r2, r0, r5
   8c2e4:	ea4e 0e02 	orr.w	lr, lr, r2
   8c2e8:	fa20 f304 	lsr.w	r3, r0, r4
   8c2ec:	fa01 f205 	lsl.w	r2, r1, r5
   8c2f0:	ea43 0302 	orr.w	r3, r3, r2
   8c2f4:	fa21 f004 	lsr.w	r0, r1, r4
   8c2f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c2fc:	fa21 f204 	lsr.w	r2, r1, r4
   8c300:	ea20 0002 	bic.w	r0, r0, r2
   8c304:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8c308:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c30c:	bf08      	it	eq
   8c30e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c312:	bd70      	pop	{r4, r5, r6, pc}
   8c314:	f094 0f00 	teq	r4, #0
   8c318:	d10f      	bne.n	8c33a <__aeabi_dmul+0x1c2>
   8c31a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8c31e:	0040      	lsls	r0, r0, #1
   8c320:	eb41 0101 	adc.w	r1, r1, r1
   8c324:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c328:	bf08      	it	eq
   8c32a:	3c01      	subeq	r4, #1
   8c32c:	d0f7      	beq.n	8c31e <__aeabi_dmul+0x1a6>
   8c32e:	ea41 0106 	orr.w	r1, r1, r6
   8c332:	f095 0f00 	teq	r5, #0
   8c336:	bf18      	it	ne
   8c338:	4770      	bxne	lr
   8c33a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8c33e:	0052      	lsls	r2, r2, #1
   8c340:	eb43 0303 	adc.w	r3, r3, r3
   8c344:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8c348:	bf08      	it	eq
   8c34a:	3d01      	subeq	r5, #1
   8c34c:	d0f7      	beq.n	8c33e <__aeabi_dmul+0x1c6>
   8c34e:	ea43 0306 	orr.w	r3, r3, r6
   8c352:	4770      	bx	lr
   8c354:	ea94 0f0c 	teq	r4, ip
   8c358:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c35c:	bf18      	it	ne
   8c35e:	ea95 0f0c 	teqne	r5, ip
   8c362:	d00c      	beq.n	8c37e <__aeabi_dmul+0x206>
   8c364:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c368:	bf18      	it	ne
   8c36a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c36e:	d1d1      	bne.n	8c314 <__aeabi_dmul+0x19c>
   8c370:	ea81 0103 	eor.w	r1, r1, r3
   8c374:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c378:	f04f 0000 	mov.w	r0, #0
   8c37c:	bd70      	pop	{r4, r5, r6, pc}
   8c37e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c382:	bf06      	itte	eq
   8c384:	4610      	moveq	r0, r2
   8c386:	4619      	moveq	r1, r3
   8c388:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c38c:	d019      	beq.n	8c3c2 <__aeabi_dmul+0x24a>
   8c38e:	ea94 0f0c 	teq	r4, ip
   8c392:	d102      	bne.n	8c39a <__aeabi_dmul+0x222>
   8c394:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8c398:	d113      	bne.n	8c3c2 <__aeabi_dmul+0x24a>
   8c39a:	ea95 0f0c 	teq	r5, ip
   8c39e:	d105      	bne.n	8c3ac <__aeabi_dmul+0x234>
   8c3a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8c3a4:	bf1c      	itt	ne
   8c3a6:	4610      	movne	r0, r2
   8c3a8:	4619      	movne	r1, r3
   8c3aa:	d10a      	bne.n	8c3c2 <__aeabi_dmul+0x24a>
   8c3ac:	ea81 0103 	eor.w	r1, r1, r3
   8c3b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c3b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c3b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c3bc:	f04f 0000 	mov.w	r0, #0
   8c3c0:	bd70      	pop	{r4, r5, r6, pc}
   8c3c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c3c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8c3ca:	bd70      	pop	{r4, r5, r6, pc}

0008c3cc <__aeabi_ddiv>:
   8c3cc:	b570      	push	{r4, r5, r6, lr}
   8c3ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c3d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c3d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c3da:	bf1d      	ittte	ne
   8c3dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c3e0:	ea94 0f0c 	teqne	r4, ip
   8c3e4:	ea95 0f0c 	teqne	r5, ip
   8c3e8:	f000 f8a7 	bleq	8c53a <__aeabi_ddiv+0x16e>
   8c3ec:	eba4 0405 	sub.w	r4, r4, r5
   8c3f0:	ea81 0e03 	eor.w	lr, r1, r3
   8c3f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c3f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c3fc:	f000 8088 	beq.w	8c510 <__aeabi_ddiv+0x144>
   8c400:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c404:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8c408:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8c40c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8c410:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8c414:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8c418:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8c41c:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8c420:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8c424:	429d      	cmp	r5, r3
   8c426:	bf08      	it	eq
   8c428:	4296      	cmpeq	r6, r2
   8c42a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8c42e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8c432:	d202      	bcs.n	8c43a <__aeabi_ddiv+0x6e>
   8c434:	085b      	lsrs	r3, r3, #1
   8c436:	ea4f 0232 	mov.w	r2, r2, rrx
   8c43a:	1ab6      	subs	r6, r6, r2
   8c43c:	eb65 0503 	sbc.w	r5, r5, r3
   8c440:	085b      	lsrs	r3, r3, #1
   8c442:	ea4f 0232 	mov.w	r2, r2, rrx
   8c446:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8c44a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8c44e:	ebb6 0e02 	subs.w	lr, r6, r2
   8c452:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c456:	bf22      	ittt	cs
   8c458:	1ab6      	subcs	r6, r6, r2
   8c45a:	4675      	movcs	r5, lr
   8c45c:	ea40 000c 	orrcs.w	r0, r0, ip
   8c460:	085b      	lsrs	r3, r3, #1
   8c462:	ea4f 0232 	mov.w	r2, r2, rrx
   8c466:	ebb6 0e02 	subs.w	lr, r6, r2
   8c46a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c46e:	bf22      	ittt	cs
   8c470:	1ab6      	subcs	r6, r6, r2
   8c472:	4675      	movcs	r5, lr
   8c474:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8c478:	085b      	lsrs	r3, r3, #1
   8c47a:	ea4f 0232 	mov.w	r2, r2, rrx
   8c47e:	ebb6 0e02 	subs.w	lr, r6, r2
   8c482:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c486:	bf22      	ittt	cs
   8c488:	1ab6      	subcs	r6, r6, r2
   8c48a:	4675      	movcs	r5, lr
   8c48c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8c490:	085b      	lsrs	r3, r3, #1
   8c492:	ea4f 0232 	mov.w	r2, r2, rrx
   8c496:	ebb6 0e02 	subs.w	lr, r6, r2
   8c49a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c49e:	bf22      	ittt	cs
   8c4a0:	1ab6      	subcs	r6, r6, r2
   8c4a2:	4675      	movcs	r5, lr
   8c4a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8c4a8:	ea55 0e06 	orrs.w	lr, r5, r6
   8c4ac:	d018      	beq.n	8c4e0 <__aeabi_ddiv+0x114>
   8c4ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8c4b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8c4b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8c4ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8c4be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8c4c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8c4c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8c4ca:	d1c0      	bne.n	8c44e <__aeabi_ddiv+0x82>
   8c4cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c4d0:	d10b      	bne.n	8c4ea <__aeabi_ddiv+0x11e>
   8c4d2:	ea41 0100 	orr.w	r1, r1, r0
   8c4d6:	f04f 0000 	mov.w	r0, #0
   8c4da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8c4de:	e7b6      	b.n	8c44e <__aeabi_ddiv+0x82>
   8c4e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c4e4:	bf04      	itt	eq
   8c4e6:	4301      	orreq	r1, r0
   8c4e8:	2000      	moveq	r0, #0
   8c4ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c4ee:	bf88      	it	hi
   8c4f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c4f4:	f63f aeaf 	bhi.w	8c256 <__aeabi_dmul+0xde>
   8c4f8:	ebb5 0c03 	subs.w	ip, r5, r3
   8c4fc:	bf04      	itt	eq
   8c4fe:	ebb6 0c02 	subseq.w	ip, r6, r2
   8c502:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c506:	f150 0000 	adcs.w	r0, r0, #0
   8c50a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c50e:	bd70      	pop	{r4, r5, r6, pc}
   8c510:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8c514:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8c518:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8c51c:	bfc2      	ittt	gt
   8c51e:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c522:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c526:	bd70      	popgt	{r4, r5, r6, pc}
   8c528:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c52c:	f04f 0e00 	mov.w	lr, #0
   8c530:	3c01      	subs	r4, #1
   8c532:	e690      	b.n	8c256 <__aeabi_dmul+0xde>
   8c534:	ea45 0e06 	orr.w	lr, r5, r6
   8c538:	e68d      	b.n	8c256 <__aeabi_dmul+0xde>
   8c53a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c53e:	ea94 0f0c 	teq	r4, ip
   8c542:	bf08      	it	eq
   8c544:	ea95 0f0c 	teqeq	r5, ip
   8c548:	f43f af3b 	beq.w	8c3c2 <__aeabi_dmul+0x24a>
   8c54c:	ea94 0f0c 	teq	r4, ip
   8c550:	d10a      	bne.n	8c568 <__aeabi_ddiv+0x19c>
   8c552:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c556:	f47f af34 	bne.w	8c3c2 <__aeabi_dmul+0x24a>
   8c55a:	ea95 0f0c 	teq	r5, ip
   8c55e:	f47f af25 	bne.w	8c3ac <__aeabi_dmul+0x234>
   8c562:	4610      	mov	r0, r2
   8c564:	4619      	mov	r1, r3
   8c566:	e72c      	b.n	8c3c2 <__aeabi_dmul+0x24a>
   8c568:	ea95 0f0c 	teq	r5, ip
   8c56c:	d106      	bne.n	8c57c <__aeabi_ddiv+0x1b0>
   8c56e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c572:	f43f aefd 	beq.w	8c370 <__aeabi_dmul+0x1f8>
   8c576:	4610      	mov	r0, r2
   8c578:	4619      	mov	r1, r3
   8c57a:	e722      	b.n	8c3c2 <__aeabi_dmul+0x24a>
   8c57c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c580:	bf18      	it	ne
   8c582:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c586:	f47f aec5 	bne.w	8c314 <__aeabi_dmul+0x19c>
   8c58a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8c58e:	f47f af0d 	bne.w	8c3ac <__aeabi_dmul+0x234>
   8c592:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8c596:	f47f aeeb 	bne.w	8c370 <__aeabi_dmul+0x1f8>
   8c59a:	e712      	b.n	8c3c2 <__aeabi_dmul+0x24a>

0008c59c <__gedf2>:
   8c59c:	f04f 3cff 	mov.w	ip, #4294967295
   8c5a0:	e006      	b.n	8c5b0 <__cmpdf2+0x4>
   8c5a2:	bf00      	nop

0008c5a4 <__ledf2>:
   8c5a4:	f04f 0c01 	mov.w	ip, #1
   8c5a8:	e002      	b.n	8c5b0 <__cmpdf2+0x4>
   8c5aa:	bf00      	nop

0008c5ac <__cmpdf2>:
   8c5ac:	f04f 0c01 	mov.w	ip, #1
   8c5b0:	f84d cd04 	str.w	ip, [sp, #-4]!
   8c5b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c5b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c5bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c5c0:	bf18      	it	ne
   8c5c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8c5c6:	d01b      	beq.n	8c600 <__cmpdf2+0x54>
   8c5c8:	b001      	add	sp, #4
   8c5ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8c5ce:	bf0c      	ite	eq
   8c5d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8c5d4:	ea91 0f03 	teqne	r1, r3
   8c5d8:	bf02      	ittt	eq
   8c5da:	ea90 0f02 	teqeq	r0, r2
   8c5de:	2000      	moveq	r0, #0
   8c5e0:	4770      	bxeq	lr
   8c5e2:	f110 0f00 	cmn.w	r0, #0
   8c5e6:	ea91 0f03 	teq	r1, r3
   8c5ea:	bf58      	it	pl
   8c5ec:	4299      	cmppl	r1, r3
   8c5ee:	bf08      	it	eq
   8c5f0:	4290      	cmpeq	r0, r2
   8c5f2:	bf2c      	ite	cs
   8c5f4:	17d8      	asrcs	r0, r3, #31
   8c5f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8c5fa:	f040 0001 	orr.w	r0, r0, #1
   8c5fe:	4770      	bx	lr
   8c600:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c604:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c608:	d102      	bne.n	8c610 <__cmpdf2+0x64>
   8c60a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8c60e:	d107      	bne.n	8c620 <__cmpdf2+0x74>
   8c610:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c614:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c618:	d1d6      	bne.n	8c5c8 <__cmpdf2+0x1c>
   8c61a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8c61e:	d0d3      	beq.n	8c5c8 <__cmpdf2+0x1c>
   8c620:	f85d 0b04 	ldr.w	r0, [sp], #4
   8c624:	4770      	bx	lr
   8c626:	bf00      	nop

0008c628 <__aeabi_cdrcmple>:
   8c628:	4684      	mov	ip, r0
   8c62a:	4610      	mov	r0, r2
   8c62c:	4662      	mov	r2, ip
   8c62e:	468c      	mov	ip, r1
   8c630:	4619      	mov	r1, r3
   8c632:	4663      	mov	r3, ip
   8c634:	e000      	b.n	8c638 <__aeabi_cdcmpeq>
   8c636:	bf00      	nop

0008c638 <__aeabi_cdcmpeq>:
   8c638:	b501      	push	{r0, lr}
   8c63a:	f7ff ffb7 	bl	8c5ac <__cmpdf2>
   8c63e:	2800      	cmp	r0, #0
   8c640:	bf48      	it	mi
   8c642:	f110 0f00 	cmnmi.w	r0, #0
   8c646:	bd01      	pop	{r0, pc}

0008c648 <__aeabi_dcmpeq>:
   8c648:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c64c:	f7ff fff4 	bl	8c638 <__aeabi_cdcmpeq>
   8c650:	bf0c      	ite	eq
   8c652:	2001      	moveq	r0, #1
   8c654:	2000      	movne	r0, #0
   8c656:	f85d fb08 	ldr.w	pc, [sp], #8
   8c65a:	bf00      	nop

0008c65c <__aeabi_dcmplt>:
   8c65c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c660:	f7ff ffea 	bl	8c638 <__aeabi_cdcmpeq>
   8c664:	bf34      	ite	cc
   8c666:	2001      	movcc	r0, #1
   8c668:	2000      	movcs	r0, #0
   8c66a:	f85d fb08 	ldr.w	pc, [sp], #8
   8c66e:	bf00      	nop

0008c670 <__aeabi_dcmple>:
   8c670:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c674:	f7ff ffe0 	bl	8c638 <__aeabi_cdcmpeq>
   8c678:	bf94      	ite	ls
   8c67a:	2001      	movls	r0, #1
   8c67c:	2000      	movhi	r0, #0
   8c67e:	f85d fb08 	ldr.w	pc, [sp], #8
   8c682:	bf00      	nop

0008c684 <__aeabi_dcmpge>:
   8c684:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c688:	f7ff ffce 	bl	8c628 <__aeabi_cdrcmple>
   8c68c:	bf94      	ite	ls
   8c68e:	2001      	movls	r0, #1
   8c690:	2000      	movhi	r0, #0
   8c692:	f85d fb08 	ldr.w	pc, [sp], #8
   8c696:	bf00      	nop

0008c698 <__aeabi_dcmpgt>:
   8c698:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c69c:	f7ff ffc4 	bl	8c628 <__aeabi_cdrcmple>
   8c6a0:	bf34      	ite	cc
   8c6a2:	2001      	movcc	r0, #1
   8c6a4:	2000      	movcs	r0, #0
   8c6a6:	f85d fb08 	ldr.w	pc, [sp], #8
   8c6aa:	bf00      	nop

0008c6ac <__aeabi_dcmpun>:
   8c6ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c6b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c6b4:	d102      	bne.n	8c6bc <__aeabi_dcmpun+0x10>
   8c6b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8c6ba:	d10a      	bne.n	8c6d2 <__aeabi_dcmpun+0x26>
   8c6bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c6c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c6c4:	d102      	bne.n	8c6cc <__aeabi_dcmpun+0x20>
   8c6c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8c6ca:	d102      	bne.n	8c6d2 <__aeabi_dcmpun+0x26>
   8c6cc:	f04f 0000 	mov.w	r0, #0
   8c6d0:	4770      	bx	lr
   8c6d2:	f04f 0001 	mov.w	r0, #1
   8c6d6:	4770      	bx	lr

0008c6d8 <__aeabi_d2iz>:
   8c6d8:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8c6dc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8c6e0:	d215      	bcs.n	8c70e <__aeabi_d2iz+0x36>
   8c6e2:	d511      	bpl.n	8c708 <__aeabi_d2iz+0x30>
   8c6e4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8c6e8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8c6ec:	d912      	bls.n	8c714 <__aeabi_d2iz+0x3c>
   8c6ee:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8c6f2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8c6f6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8c6fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c6fe:	fa23 f002 	lsr.w	r0, r3, r2
   8c702:	bf18      	it	ne
   8c704:	4240      	negne	r0, r0
   8c706:	4770      	bx	lr
   8c708:	f04f 0000 	mov.w	r0, #0
   8c70c:	4770      	bx	lr
   8c70e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8c712:	d105      	bne.n	8c720 <__aeabi_d2iz+0x48>
   8c714:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8c718:	bf08      	it	eq
   8c71a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8c71e:	4770      	bx	lr
   8c720:	f04f 0000 	mov.w	r0, #0
   8c724:	4770      	bx	lr
   8c726:	bf00      	nop

0008c728 <__aeabi_uldivmod>:
   8c728:	b953      	cbnz	r3, 8c740 <__aeabi_uldivmod+0x18>
   8c72a:	b94a      	cbnz	r2, 8c740 <__aeabi_uldivmod+0x18>
   8c72c:	2900      	cmp	r1, #0
   8c72e:	bf08      	it	eq
   8c730:	2800      	cmpeq	r0, #0
   8c732:	bf1c      	itt	ne
   8c734:	f04f 31ff 	movne.w	r1, #4294967295
   8c738:	f04f 30ff 	movne.w	r0, #4294967295
   8c73c:	f000 b976 	b.w	8ca2c <__aeabi_idiv0>
   8c740:	f1ad 0c08 	sub.w	ip, sp, #8
   8c744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8c748:	f000 f806 	bl	8c758 <__udivmoddi4>
   8c74c:	f8dd e004 	ldr.w	lr, [sp, #4]
   8c750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8c754:	b004      	add	sp, #16
   8c756:	4770      	bx	lr

0008c758 <__udivmoddi4>:
   8c758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8c75c:	9e08      	ldr	r6, [sp, #32]
   8c75e:	460d      	mov	r5, r1
   8c760:	4604      	mov	r4, r0
   8c762:	4688      	mov	r8, r1
   8c764:	2b00      	cmp	r3, #0
   8c766:	d14d      	bne.n	8c804 <__udivmoddi4+0xac>
   8c768:	428a      	cmp	r2, r1
   8c76a:	4694      	mov	ip, r2
   8c76c:	d968      	bls.n	8c840 <__udivmoddi4+0xe8>
   8c76e:	fab2 f282 	clz	r2, r2
   8c772:	b152      	cbz	r2, 8c78a <__udivmoddi4+0x32>
   8c774:	fa01 f302 	lsl.w	r3, r1, r2
   8c778:	f1c2 0120 	rsb	r1, r2, #32
   8c77c:	fa20 f101 	lsr.w	r1, r0, r1
   8c780:	fa0c fc02 	lsl.w	ip, ip, r2
   8c784:	ea41 0803 	orr.w	r8, r1, r3
   8c788:	4094      	lsls	r4, r2
   8c78a:	ea4f 411c 	mov.w	r1, ip, lsr #16
   8c78e:	fbb8 f7f1 	udiv	r7, r8, r1
   8c792:	fa1f fe8c 	uxth.w	lr, ip
   8c796:	fb01 8817 	mls	r8, r1, r7, r8
   8c79a:	fb07 f00e 	mul.w	r0, r7, lr
   8c79e:	0c23      	lsrs	r3, r4, #16
   8c7a0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8c7a4:	4298      	cmp	r0, r3
   8c7a6:	d90a      	bls.n	8c7be <__udivmoddi4+0x66>
   8c7a8:	eb1c 0303 	adds.w	r3, ip, r3
   8c7ac:	f107 35ff 	add.w	r5, r7, #4294967295
   8c7b0:	f080 811e 	bcs.w	8c9f0 <__udivmoddi4+0x298>
   8c7b4:	4298      	cmp	r0, r3
   8c7b6:	f240 811b 	bls.w	8c9f0 <__udivmoddi4+0x298>
   8c7ba:	3f02      	subs	r7, #2
   8c7bc:	4463      	add	r3, ip
   8c7be:	1a1b      	subs	r3, r3, r0
   8c7c0:	fbb3 f0f1 	udiv	r0, r3, r1
   8c7c4:	fb01 3310 	mls	r3, r1, r0, r3
   8c7c8:	fb00 fe0e 	mul.w	lr, r0, lr
   8c7cc:	b2a4      	uxth	r4, r4
   8c7ce:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   8c7d2:	45a6      	cmp	lr, r4
   8c7d4:	d90a      	bls.n	8c7ec <__udivmoddi4+0x94>
   8c7d6:	eb1c 0404 	adds.w	r4, ip, r4
   8c7da:	f100 33ff 	add.w	r3, r0, #4294967295
   8c7de:	f080 8109 	bcs.w	8c9f4 <__udivmoddi4+0x29c>
   8c7e2:	45a6      	cmp	lr, r4
   8c7e4:	f240 8106 	bls.w	8c9f4 <__udivmoddi4+0x29c>
   8c7e8:	4464      	add	r4, ip
   8c7ea:	3802      	subs	r0, #2
   8c7ec:	2100      	movs	r1, #0
   8c7ee:	eba4 040e 	sub.w	r4, r4, lr
   8c7f2:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   8c7f6:	b11e      	cbz	r6, 8c800 <__udivmoddi4+0xa8>
   8c7f8:	2300      	movs	r3, #0
   8c7fa:	40d4      	lsrs	r4, r2
   8c7fc:	e9c6 4300 	strd	r4, r3, [r6]
   8c800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8c804:	428b      	cmp	r3, r1
   8c806:	d908      	bls.n	8c81a <__udivmoddi4+0xc2>
   8c808:	2e00      	cmp	r6, #0
   8c80a:	f000 80ee 	beq.w	8c9ea <__udivmoddi4+0x292>
   8c80e:	2100      	movs	r1, #0
   8c810:	e9c6 0500 	strd	r0, r5, [r6]
   8c814:	4608      	mov	r0, r1
   8c816:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8c81a:	fab3 f183 	clz	r1, r3
   8c81e:	2900      	cmp	r1, #0
   8c820:	d14a      	bne.n	8c8b8 <__udivmoddi4+0x160>
   8c822:	42ab      	cmp	r3, r5
   8c824:	d302      	bcc.n	8c82c <__udivmoddi4+0xd4>
   8c826:	4282      	cmp	r2, r0
   8c828:	f200 80fc 	bhi.w	8ca24 <__udivmoddi4+0x2cc>
   8c82c:	1a84      	subs	r4, r0, r2
   8c82e:	eb65 0303 	sbc.w	r3, r5, r3
   8c832:	2001      	movs	r0, #1
   8c834:	4698      	mov	r8, r3
   8c836:	2e00      	cmp	r6, #0
   8c838:	d0e2      	beq.n	8c800 <__udivmoddi4+0xa8>
   8c83a:	e9c6 4800 	strd	r4, r8, [r6]
   8c83e:	e7df      	b.n	8c800 <__udivmoddi4+0xa8>
   8c840:	b902      	cbnz	r2, 8c844 <__udivmoddi4+0xec>
   8c842:	deff      	udf	#255	; 0xff
   8c844:	fab2 f282 	clz	r2, r2
   8c848:	2a00      	cmp	r2, #0
   8c84a:	f040 8091 	bne.w	8c970 <__udivmoddi4+0x218>
   8c84e:	eba1 000c 	sub.w	r0, r1, ip
   8c852:	2101      	movs	r1, #1
   8c854:	ea4f 471c 	mov.w	r7, ip, lsr #16
   8c858:	fa1f fe8c 	uxth.w	lr, ip
   8c85c:	fbb0 f3f7 	udiv	r3, r0, r7
   8c860:	fb07 0013 	mls	r0, r7, r3, r0
   8c864:	0c25      	lsrs	r5, r4, #16
   8c866:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   8c86a:	fb0e f003 	mul.w	r0, lr, r3
   8c86e:	42a8      	cmp	r0, r5
   8c870:	d908      	bls.n	8c884 <__udivmoddi4+0x12c>
   8c872:	eb1c 0505 	adds.w	r5, ip, r5
   8c876:	f103 38ff 	add.w	r8, r3, #4294967295
   8c87a:	d202      	bcs.n	8c882 <__udivmoddi4+0x12a>
   8c87c:	42a8      	cmp	r0, r5
   8c87e:	f200 80ce 	bhi.w	8ca1e <__udivmoddi4+0x2c6>
   8c882:	4643      	mov	r3, r8
   8c884:	1a2d      	subs	r5, r5, r0
   8c886:	fbb5 f0f7 	udiv	r0, r5, r7
   8c88a:	fb07 5510 	mls	r5, r7, r0, r5
   8c88e:	fb0e fe00 	mul.w	lr, lr, r0
   8c892:	b2a4      	uxth	r4, r4
   8c894:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8c898:	45a6      	cmp	lr, r4
   8c89a:	d908      	bls.n	8c8ae <__udivmoddi4+0x156>
   8c89c:	eb1c 0404 	adds.w	r4, ip, r4
   8c8a0:	f100 35ff 	add.w	r5, r0, #4294967295
   8c8a4:	d202      	bcs.n	8c8ac <__udivmoddi4+0x154>
   8c8a6:	45a6      	cmp	lr, r4
   8c8a8:	f200 80b6 	bhi.w	8ca18 <__udivmoddi4+0x2c0>
   8c8ac:	4628      	mov	r0, r5
   8c8ae:	eba4 040e 	sub.w	r4, r4, lr
   8c8b2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8c8b6:	e79e      	b.n	8c7f6 <__udivmoddi4+0x9e>
   8c8b8:	f1c1 0720 	rsb	r7, r1, #32
   8c8bc:	408b      	lsls	r3, r1
   8c8be:	fa22 fc07 	lsr.w	ip, r2, r7
   8c8c2:	ea4c 0c03 	orr.w	ip, ip, r3
   8c8c6:	fa25 fa07 	lsr.w	sl, r5, r7
   8c8ca:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8c8ce:	fbba f8f9 	udiv	r8, sl, r9
   8c8d2:	fa20 f307 	lsr.w	r3, r0, r7
   8c8d6:	fb09 aa18 	mls	sl, r9, r8, sl
   8c8da:	408d      	lsls	r5, r1
   8c8dc:	fa1f fe8c 	uxth.w	lr, ip
   8c8e0:	431d      	orrs	r5, r3
   8c8e2:	fa00 f301 	lsl.w	r3, r0, r1
   8c8e6:	fb08 f00e 	mul.w	r0, r8, lr
   8c8ea:	0c2c      	lsrs	r4, r5, #16
   8c8ec:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
   8c8f0:	42a0      	cmp	r0, r4
   8c8f2:	fa02 f201 	lsl.w	r2, r2, r1
   8c8f6:	d90b      	bls.n	8c910 <__udivmoddi4+0x1b8>
   8c8f8:	eb1c 0404 	adds.w	r4, ip, r4
   8c8fc:	f108 3aff 	add.w	sl, r8, #4294967295
   8c900:	f080 8088 	bcs.w	8ca14 <__udivmoddi4+0x2bc>
   8c904:	42a0      	cmp	r0, r4
   8c906:	f240 8085 	bls.w	8ca14 <__udivmoddi4+0x2bc>
   8c90a:	f1a8 0802 	sub.w	r8, r8, #2
   8c90e:	4464      	add	r4, ip
   8c910:	1a24      	subs	r4, r4, r0
   8c912:	fbb4 f0f9 	udiv	r0, r4, r9
   8c916:	fb09 4410 	mls	r4, r9, r0, r4
   8c91a:	fb00 fe0e 	mul.w	lr, r0, lr
   8c91e:	b2ad      	uxth	r5, r5
   8c920:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   8c924:	45a6      	cmp	lr, r4
   8c926:	d908      	bls.n	8c93a <__udivmoddi4+0x1e2>
   8c928:	eb1c 0404 	adds.w	r4, ip, r4
   8c92c:	f100 35ff 	add.w	r5, r0, #4294967295
   8c930:	d26c      	bcs.n	8ca0c <__udivmoddi4+0x2b4>
   8c932:	45a6      	cmp	lr, r4
   8c934:	d96a      	bls.n	8ca0c <__udivmoddi4+0x2b4>
   8c936:	3802      	subs	r0, #2
   8c938:	4464      	add	r4, ip
   8c93a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   8c93e:	fba0 9502 	umull	r9, r5, r0, r2
   8c942:	eba4 040e 	sub.w	r4, r4, lr
   8c946:	42ac      	cmp	r4, r5
   8c948:	46c8      	mov	r8, r9
   8c94a:	46ae      	mov	lr, r5
   8c94c:	d356      	bcc.n	8c9fc <__udivmoddi4+0x2a4>
   8c94e:	d053      	beq.n	8c9f8 <__udivmoddi4+0x2a0>
   8c950:	2e00      	cmp	r6, #0
   8c952:	d069      	beq.n	8ca28 <__udivmoddi4+0x2d0>
   8c954:	ebb3 0208 	subs.w	r2, r3, r8
   8c958:	eb64 040e 	sbc.w	r4, r4, lr
   8c95c:	fa22 f301 	lsr.w	r3, r2, r1
   8c960:	fa04 f707 	lsl.w	r7, r4, r7
   8c964:	431f      	orrs	r7, r3
   8c966:	40cc      	lsrs	r4, r1
   8c968:	e9c6 7400 	strd	r7, r4, [r6]
   8c96c:	2100      	movs	r1, #0
   8c96e:	e747      	b.n	8c800 <__udivmoddi4+0xa8>
   8c970:	fa0c fc02 	lsl.w	ip, ip, r2
   8c974:	f1c2 0120 	rsb	r1, r2, #32
   8c978:	fa25 f301 	lsr.w	r3, r5, r1
   8c97c:	ea4f 471c 	mov.w	r7, ip, lsr #16
   8c980:	fa20 f101 	lsr.w	r1, r0, r1
   8c984:	4095      	lsls	r5, r2
   8c986:	430d      	orrs	r5, r1
   8c988:	fbb3 f1f7 	udiv	r1, r3, r7
   8c98c:	fb07 3311 	mls	r3, r7, r1, r3
   8c990:	fa1f fe8c 	uxth.w	lr, ip
   8c994:	0c28      	lsrs	r0, r5, #16
   8c996:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8c99a:	fb01 f30e 	mul.w	r3, r1, lr
   8c99e:	4283      	cmp	r3, r0
   8c9a0:	fa04 f402 	lsl.w	r4, r4, r2
   8c9a4:	d908      	bls.n	8c9b8 <__udivmoddi4+0x260>
   8c9a6:	eb1c 0000 	adds.w	r0, ip, r0
   8c9aa:	f101 38ff 	add.w	r8, r1, #4294967295
   8c9ae:	d22f      	bcs.n	8ca10 <__udivmoddi4+0x2b8>
   8c9b0:	4283      	cmp	r3, r0
   8c9b2:	d92d      	bls.n	8ca10 <__udivmoddi4+0x2b8>
   8c9b4:	3902      	subs	r1, #2
   8c9b6:	4460      	add	r0, ip
   8c9b8:	1ac0      	subs	r0, r0, r3
   8c9ba:	fbb0 f3f7 	udiv	r3, r0, r7
   8c9be:	fb07 0013 	mls	r0, r7, r3, r0
   8c9c2:	b2ad      	uxth	r5, r5
   8c9c4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   8c9c8:	fb03 f00e 	mul.w	r0, r3, lr
   8c9cc:	42a8      	cmp	r0, r5
   8c9ce:	d908      	bls.n	8c9e2 <__udivmoddi4+0x28a>
   8c9d0:	eb1c 0505 	adds.w	r5, ip, r5
   8c9d4:	f103 38ff 	add.w	r8, r3, #4294967295
   8c9d8:	d216      	bcs.n	8ca08 <__udivmoddi4+0x2b0>
   8c9da:	42a8      	cmp	r0, r5
   8c9dc:	d914      	bls.n	8ca08 <__udivmoddi4+0x2b0>
   8c9de:	3b02      	subs	r3, #2
   8c9e0:	4465      	add	r5, ip
   8c9e2:	1a28      	subs	r0, r5, r0
   8c9e4:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   8c9e8:	e738      	b.n	8c85c <__udivmoddi4+0x104>
   8c9ea:	4631      	mov	r1, r6
   8c9ec:	4630      	mov	r0, r6
   8c9ee:	e707      	b.n	8c800 <__udivmoddi4+0xa8>
   8c9f0:	462f      	mov	r7, r5
   8c9f2:	e6e4      	b.n	8c7be <__udivmoddi4+0x66>
   8c9f4:	4618      	mov	r0, r3
   8c9f6:	e6f9      	b.n	8c7ec <__udivmoddi4+0x94>
   8c9f8:	454b      	cmp	r3, r9
   8c9fa:	d2a9      	bcs.n	8c950 <__udivmoddi4+0x1f8>
   8c9fc:	ebb9 0802 	subs.w	r8, r9, r2
   8ca00:	eb65 0e0c 	sbc.w	lr, r5, ip
   8ca04:	3801      	subs	r0, #1
   8ca06:	e7a3      	b.n	8c950 <__udivmoddi4+0x1f8>
   8ca08:	4643      	mov	r3, r8
   8ca0a:	e7ea      	b.n	8c9e2 <__udivmoddi4+0x28a>
   8ca0c:	4628      	mov	r0, r5
   8ca0e:	e794      	b.n	8c93a <__udivmoddi4+0x1e2>
   8ca10:	4641      	mov	r1, r8
   8ca12:	e7d1      	b.n	8c9b8 <__udivmoddi4+0x260>
   8ca14:	46d0      	mov	r8, sl
   8ca16:	e77b      	b.n	8c910 <__udivmoddi4+0x1b8>
   8ca18:	4464      	add	r4, ip
   8ca1a:	3802      	subs	r0, #2
   8ca1c:	e747      	b.n	8c8ae <__udivmoddi4+0x156>
   8ca1e:	3b02      	subs	r3, #2
   8ca20:	4465      	add	r5, ip
   8ca22:	e72f      	b.n	8c884 <__udivmoddi4+0x12c>
   8ca24:	4608      	mov	r0, r1
   8ca26:	e706      	b.n	8c836 <__udivmoddi4+0xde>
   8ca28:	4631      	mov	r1, r6
   8ca2a:	e6e9      	b.n	8c800 <__udivmoddi4+0xa8>

0008ca2c <__aeabi_idiv0>:
   8ca2c:	4770      	bx	lr
   8ca2e:	bf00      	nop
   8ca30:	78383025 	.word	0x78383025
   8ca34:	00000000 	.word	0x00000000

0008ca38 <BUILD_DATE>:
   8ca38:	20626546 32203320 00333230              Feb  3 2023.

0008ca44 <BUILD_TIME>:
   8ca44:	303a3631 30303a33 00000000 00000000     16:03:00........
   8ca54:	00000000 00000000 aaaaaa00 aaaaaaaa     ................
   8ca64:	eeeeeeaa eeeeeeee fffffeee ffffffff     ................
   8ca74:	ffffffff dfbf7fff fdfbf7ef dfbf7efc     .............~..
   8ca84:	fdfbf7ef 0000007e                       ....~...

0008ca8c <CSWTCH.109>:
   8ca8c:	00010102                                ....

0008ca90 <_global_impure_ptr>:
   8ca90:	20070b38 00464e49 00666e69 004e414e     8.. INF.inf.NAN.
   8caa0:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8cab0:	66656463 00000000 33323130 37363534     cdef....01234567
   8cac0:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8cad0:	0000296c 00000030                       l)..0...

0008cad8 <blanks.1>:
   8cad8:	20202020 20202020 20202020 20202020                     

0008cae8 <zeroes.0>:
   8cae8:	30303030 30303030 30303030 30303030     0000000000000000
   8caf8:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8cb08:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8cb18:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8cb28:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8cb38:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8cb48:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8cb58:	656e696c 3833332d 3230325f 31303131     line-338_2021101
   8cb68:	36315f38 31353433 33303236 6372732f     8_1634516203/src
   8cb78:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8cb88:	2f636269 6c647473 642f6269 2e616f74     ibc/stdlib/dtoa.
   8cb98:	00000063 746e6d2f 726f772f 6170736b     c.../mnt/workspa
   8cba8:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8cbb8:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8cbc8:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8cbd8:	656e696c 3833332d 3230325f 31303131     line-338_2021101
   8cbe8:	36315f38 31353433 33303236 6372732f     8_1634516203/src
   8cbf8:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8cc08:	2f636269 6c647473 6d2f6269 63657270     ibc/stdlib/mprec
   8cc18:	0000632e 00000000                       .c......

0008cc20 <__mprec_bigtens>:
   8cc20:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8cc30:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8cc40:	7f73bf3c 75154fdd                       <.s..O.u

0008cc48 <__mprec_tens>:
   8cc48:	00000000 3ff00000 00000000 40240000     .......?......$@
   8cc58:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8cc68:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8cc78:	00000000 412e8480 00000000 416312d0     .......A......cA
   8cc88:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8cc98:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8cca8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8ccb8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8ccc8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8ccd8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8cce8:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8ccf8:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8cd08:	79d99db4 44ea7843                       ...yCx.D

0008cd10 <p05.0>:
   8cd10:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8cd20:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8cd30:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8cd40:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8cd50:	2520656e 25732564 00000a73 00000043     ne %d%s%s...C...
   8cd60:	49534f50 00000058 0000002e              POSIX.......

0008cd6c <blanks.1>:
   8cd6c:	20202020 20202020 20202020 20202020                     

0008cd7c <zeroes.0>:
   8cd7c:	30303030 30303030 30303030 30303030     0000000000000000

0008cd8c <_ctype_>:
   8cd8c:	20202000 20202020 28282020 20282828     .         ((((( 
   8cd9c:	20202020 20202020 20202020 20202020                     
   8cdac:	10108820 10101010 10101010 10101010      ...............
   8cdbc:	04040410 04040404 10040404 10101010     ................
   8cdcc:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8cddc:	01010101 01010101 01010101 10101010     ................
   8cdec:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8cdfc:	02020202 02020202 02020202 10101010     ................
   8ce0c:	00000020 00000000 00000000 00000000      ...............
   8ce1c:	00000000 00000000 00000000 00000000     ................
   8ce2c:	00000000 00000000 00000000 00000000     ................
   8ce3c:	00000000 00000000 00000000 00000000     ................
   8ce4c:	00000000 00000000 00000000 00000000     ................
   8ce5c:	00000000 00000000 00000000 00000000     ................
   8ce6c:	00000000 00000000 00000000 00000000     ................
   8ce7c:	00000000 00000000 00000000 00000000     ................
   8ce8c:	00000000                                ....

0008ce90 <_init>:
   8ce90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8ce92:	bf00      	nop
   8ce94:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8ce96:	bc08      	pop	{r3}
   8ce98:	469e      	mov	lr, r3
   8ce9a:	4770      	bx	lr

0008ce9c <__init_array_start>:
   8ce9c:	00087a85 	.word	0x00087a85

0008cea0 <__frame_dummy_init_array_entry>:
   8cea0:	00080119                                ....

0008cea4 <_fini>:
   8cea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cea6:	bf00      	nop
   8cea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8ceaa:	bc08      	pop	{r3}
   8ceac:	469e      	mov	lr, r3
   8ceae:	4770      	bx	lr

0008ceb0 <__do_global_dtors_aux_fini_array_entry>:
   8ceb0:	00f5 0008                                   ....

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4819      	ldr	r0, [pc, #100]	; (2007006c <SystemInit+0x6c>)
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070006:	491a      	ldr	r1, [pc, #104]	; (20070070 <SystemInit+0x70>)
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070008:	4a1a      	ldr	r2, [pc, #104]	; (20070074 <SystemInit+0x74>)
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000a:	6003      	str	r3, [r0, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	600b      	str	r3, [r1, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	6a13      	ldr	r3, [r2, #32]
20070010:	01db      	lsls	r3, r3, #7
20070012:	d404      	bmi.n	2007001e <SystemInit+0x1e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070014:	4b18      	ldr	r3, [pc, #96]	; (20070078 <SystemInit+0x78>)
20070016:	6213      	str	r3, [r2, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070018:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007001a:	07d8      	lsls	r0, r3, #31
2007001c:	d5fc      	bpl.n	20070018 <SystemInit+0x18>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2007001e:	4a15      	ldr	r2, [pc, #84]	; (20070074 <SystemInit+0x74>)
20070020:	4b16      	ldr	r3, [pc, #88]	; (2007007c <SystemInit+0x7c>)
20070022:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20070024:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070026:	03d9      	lsls	r1, r3, #15
20070028:	d5fc      	bpl.n	20070024 <SystemInit+0x24>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2007002a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2007002c:	4811      	ldr	r0, [pc, #68]	; (20070074 <SystemInit+0x74>)
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2007002e:	f023 0303 	bic.w	r3, r3, #3
20070032:	f043 0301 	orr.w	r3, r3, #1
20070036:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070038:	6e83      	ldr	r3, [r0, #104]	; 0x68
2007003a:	071b      	lsls	r3, r3, #28
2007003c:	d5fc      	bpl.n	20070038 <SystemInit+0x38>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007003e:	4b10      	ldr	r3, [pc, #64]	; (20070080 <SystemInit+0x80>)
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070040:	490c      	ldr	r1, [pc, #48]	; (20070074 <SystemInit+0x74>)
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070042:	6283      	str	r3, [r0, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070044:	6e8b      	ldr	r3, [r1, #104]	; 0x68
20070046:	0798      	lsls	r0, r3, #30
20070048:	d5fc      	bpl.n	20070044 <SystemInit+0x44>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007004a:	2311      	movs	r3, #17
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2007004c:	4a09      	ldr	r2, [pc, #36]	; (20070074 <SystemInit+0x74>)
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007004e:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070050:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070052:	0719      	lsls	r1, r3, #28
20070054:	d5fc      	bpl.n	20070050 <SystemInit+0x50>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070056:	2312      	movs	r3, #18
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	4906      	ldr	r1, [pc, #24]	; (20070074 <SystemInit+0x74>)
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007005a:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2007005c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
2007005e:	071b      	lsls	r3, r3, #28
20070060:	d5fc      	bpl.n	2007005c <SystemInit+0x5c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070062:	4b08      	ldr	r3, [pc, #32]	; (20070084 <SystemInit+0x84>)
20070064:	4a08      	ldr	r2, [pc, #32]	; (20070088 <SystemInit+0x88>)
20070066:	601a      	str	r2, [r3, #0]
}
20070068:	4770      	bx	lr
2007006a:	bf00      	nop
2007006c:	400e0a00 	.word	0x400e0a00
20070070:	400e0c00 	.word	0x400e0c00
20070074:	400e0600 	.word	0x400e0600
20070078:	00370809 	.word	0x00370809
2007007c:	01370809 	.word	0x01370809
20070080:	200d3f01 	.word	0x200d3f01
20070084:	20070948 	.word	0x20070948
20070088:	0501bd00 	.word	0x0501bd00

2007008c <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
2007008c:	4b19      	ldr	r3, [pc, #100]	; (200700f4 <system_init_flash+0x68>)
2007008e:	4298      	cmp	r0, r3
20070090:	d805      	bhi.n	2007009e <system_init_flash+0x12>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20070092:	2300      	movs	r3, #0
20070094:	4918      	ldr	r1, [pc, #96]	; (200700f8 <system_init_flash+0x6c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20070096:	4a19      	ldr	r2, [pc, #100]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20070098:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
2007009a:	6013      	str	r3, [r2, #0]
2007009c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
2007009e:	4b18      	ldr	r3, [pc, #96]	; (20070100 <system_init_flash+0x74>)
200700a0:	4298      	cmp	r0, r3
200700a2:	d806      	bhi.n	200700b2 <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700a4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700a8:	4913      	ldr	r1, [pc, #76]	; (200700f8 <system_init_flash+0x6c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700aa:	4a14      	ldr	r2, [pc, #80]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ac:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ae:	6013      	str	r3, [r2, #0]
200700b0:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b2:	4b14      	ldr	r3, [pc, #80]	; (20070104 <system_init_flash+0x78>)
200700b4:	4298      	cmp	r0, r3
200700b6:	d309      	bcc.n	200700cc <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b8:	4b13      	ldr	r3, [pc, #76]	; (20070108 <system_init_flash+0x7c>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d80d      	bhi.n	200700da <system_init_flash+0x4e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700be:	f44f 7340 	mov.w	r3, #768	; 0x300
200700c2:	490d      	ldr	r1, [pc, #52]	; (200700f8 <system_init_flash+0x6c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700c4:	4a0d      	ldr	r2, [pc, #52]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700c6:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700c8:	6013      	str	r3, [r2, #0]
200700ca:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700cc:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d0:	4909      	ldr	r1, [pc, #36]	; (200700f8 <system_init_flash+0x6c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700d2:	4a0a      	ldr	r2, [pc, #40]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700da:	4b0c      	ldr	r3, [pc, #48]	; (2007010c <system_init_flash+0x80>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700dc:	4906      	ldr	r1, [pc, #24]	; (200700f8 <system_init_flash+0x6c>)
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700de:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700e0:	bf94      	ite	ls
200700e2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700e6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ea:	4a04      	ldr	r2, [pc, #16]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700ec:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ee:	6013      	str	r3, [r2, #0]
	}
}
200700f0:	4770      	bx	lr
200700f2:	bf00      	nop
200700f4:	0121eabf 	.word	0x0121eabf
200700f8:	400e0a00 	.word	0x400e0a00
200700fc:	400e0c00 	.word	0x400e0c00
20070100:	02faf07f 	.word	0x02faf07f
20070104:	03d09000 	.word	0x03d09000
20070108:	04c4b3ff 	.word	0x04c4b3ff
2007010c:	055d4a7f 	.word	0x055d4a7f

20070110 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070110:	b530      	push	{r4, r5, lr}
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMS32|| SAM4CMP32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
20070112:	4c20      	ldr	r4, [pc, #128]	; (20070194 <efc_perform_read_sequence+0x84>)
{
20070114:	b083      	sub	sp, #12
			(uint32_t *) ((p_efc == EFC0) ?
20070116:	42a0      	cmp	r0, r4
20070118:	bf0c      	ite	eq
2007011a:	f44f 2c00 	moveq.w	ip, #524288	; 0x80000
2007011e:	f44f 2c40 	movne.w	ip, #786432	; 0xc0000
{
20070122:	9d06      	ldr	r5, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070124:	b393      	cbz	r3, 2007018c <efc_perform_read_sequence+0x7c>
20070126:	4686      	mov	lr, r0
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20070128:	6800      	ldr	r0, [r0, #0]
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2007012a:	b2c9      	uxtb	r1, r1
2007012c:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FMR |= (0x1u << 16);
20070130:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
20070134:	f8ce 0000 	str.w	r0, [lr]
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070138:	f8ce 1004 	str.w	r1, [lr, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2007013c:	f8de 1008 	ldr.w	r1, [lr, #8]
20070140:	9101      	str	r1, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20070142:	9801      	ldr	r0, [sp, #4]
20070144:	f010 0001 	ands.w	r0, r0, #1
20070148:	d1f8      	bne.n	2007013c <efc_perform_read_sequence+0x2c>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007014a:	b165      	cbz	r5, 20070166 <efc_perform_read_sequence+0x56>
2007014c:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
20070150:	f1ac 0104 	sub.w	r1, ip, #4
20070154:	3b04      	subs	r3, #4
20070156:	f1a5 0c04 	sub.w	ip, r5, #4
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007015a:	f851 4f04 	ldr.w	r4, [r1, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007015e:	4561      	cmp	r1, ip
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20070160:	f843 4f04 	str.w	r4, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070164:	d1f9      	bne.n	2007015a <efc_perform_read_sequence+0x4a>
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20070166:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20070168:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
2007016c:	f8ce 2004 	str.w	r2, [lr, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070170:	f8de 3008 	ldr.w	r3, [lr, #8]
20070174:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070176:	9b01      	ldr	r3, [sp, #4]
20070178:	07db      	lsls	r3, r3, #31
2007017a:	d5f9      	bpl.n	20070170 <efc_perform_read_sequence+0x60>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2007017c:	f8de 3000 	ldr.w	r3, [lr]
20070180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20070184:	f8ce 3000 	str.w	r3, [lr]

	return EFC_RC_OK;
}
20070188:	b003      	add	sp, #12
2007018a:	bd30      	pop	{r4, r5, pc}
		return EFC_RC_INVALID;
2007018c:	2002      	movs	r0, #2
}
2007018e:	b003      	add	sp, #12
20070190:	bd30      	pop	{r4, r5, pc}
20070192:	bf00      	nop
20070194:	400e0a00 	.word	0x400e0a00

20070198 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20070198:	6001      	str	r1, [r0, #0]
}
2007019a:	4770      	bx	lr

2007019c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2007019c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2007019e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200701a0:	6883      	ldr	r3, [r0, #8]
200701a2:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200701a4:	9b01      	ldr	r3, [sp, #4]
200701a6:	07db      	lsls	r3, r3, #31
200701a8:	d5fa      	bpl.n	200701a0 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
200701aa:	9801      	ldr	r0, [sp, #4]
}
200701ac:	f000 0006 	and.w	r0, r0, #6
200701b0:	b002      	add	sp, #8
200701b2:	4770      	bx	lr

200701b4 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
200701b4:	f3bf 8f5f 	dmb	sy
200701b8:	3801      	subs	r0, #1
200701ba:	d1fb      	bne.n	200701b4 <portable_delay_cycles>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
200701bc:	4770      	bx	lr
200701be:	0000      	movs	r0, r0

200701c0 <pin_spi1_cs>:
200701c0:	ffff ffff                                   ....

200701c4 <pin_spi1_miso>:
200701c4:	ffff ffff                                   ....

200701c8 <pin_spi1_mosi>:
200701c8:	ffff ffff                                   ....

200701cc <pin_spi1_sck>:
200701cc:	ffff ffff                                   ....

200701d0 <usb_serial_number>:
200701d0:	3030 3030 3030 3030 3030 3030 4544 4441     000000000000DEAD
200701e0:	4542 4645 0000 0000 0000 0000 0000 0000     BEEF............
200701f0:	0000 0000                                   ....

200701f4 <USER_TWI_PACKET>:
200701f4:	0000 0000 0001 0000 0000 0000 0000 0000     ................
20070204:	0000 0000                                   ....

20070208 <last_power_state.0>:
20070208:	0001 0000                                   ....

2007020c <MS_BOS_PACKET>:
2007020c:	0f05 0021 1c01 0510 df00 dd60 89d8 c745     ..!.......`...E.
2007021c:	9c4c 65d2 9e9d 8a64 009f 0300 4a06 0101     L..e..d......J..
2007022c:	0000 0000                                   ....

20070230 <MS_OS_DESC>:
20070230:	000a 0000 0000 0603 014a 0008 0002 0000     ........J.......
20070240:	00a0 0014 0003 4957 554e 4253 0000 0000     ......WINUSB....
20070250:	0000 0000 0000 0084 0004 0007 002a 0044     ............*.D.
20070260:	0065 0076 0069 0063 0065 0049 006e 0074     e.v.i.c.e.I.n.t.
20070270:	0065 0072 0066 0061 0063 0065 0047 0055     e.r.f.a.c.e.G.U.
20070280:	0049 0044 0073 0000 0050 007b 0030 0041     I.D.s...P.{.0.A.
20070290:	0043 0045 0032 0042 0033 0045 002d 0032     C.E.2.B.3.E.-.2.
200702a0:	0042 0033 0045 002d 0032 0042 0033 0045     B.3.E.-.2.B.3.E.
200702b0:	002d 0032 0042 0033 0045 002d 0034 0033     -.2.B.3.E.-.4.3.
200702c0:	0034 0030 0030 0041 0043 0045 0032 0042     4.0.0.A.C.E.2.B.
200702d0:	0033 0045 007d 0000 0000 0008 0002 0001     3.E.}...........
200702e0:	00a0 0014 0003 4957 554e 4253 0000 0000     ......WINUSB....
200702f0:	0000 0000 0000 0084 0004 0007 002a 0044     ............*.D.
20070300:	0065 0076 0069 0063 0065 0049 006e 0074     e.v.i.c.e.I.n.t.
20070310:	0065 0072 0066 0061 0063 0065 0047 0055     e.r.f.a.c.e.G.U.
20070320:	0049 0044 0073 0000 0050 007b 0031 0041     I.D.s...P.{.1.A.
20070330:	0043 0045 0032 0042 0033 0045 002d 0032     C.E.2.B.3.E.-.2.
20070340:	0042 0033 0045 002d 0032 0042 0033 0045     B.3.E.-.2.B.3.E.
20070350:	002d 0032 0042 0033 0045 002d 0034 0033     -.2.B.3.E.-.4.3.
20070360:	0034 0030 0031 0041 0043 0045 0032 0042     4.0.1.A.C.E.2.B.
20070370:	0033 0045 007d 0000 0000 0000               3.E.}.......

2007037c <udc_string_desc>:
2007037c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
2007038c:	0000 0000 0000 0000 0000 0000 0000 0000     ................
2007039c:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200703ac:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200703bc:	0000 0000                                   ....

200703c0 <udc_string_desc_languageid>:
200703c0:	0304 0409                                   ....

200703c4 <udc_string_manufacturer_name>:
200703c4:	654e 4177 2045 6554 6863 6f6e 6f6c 7967     NewAE Technology
200703d4:	4920 636e 002e 0000                          Inc....

200703dc <udc_string_product_name>:
200703dc:	6843 7069 6857 7369 6570 6572 2072 5743     ChipWhisperer CW
200703ec:	3433 2030 202d 754c 616e 4220 616f 6472     340 - Luna Board
200703fc:	                                             .

200703fd <main_b_vendor_enable>:
200703fd:	0001                                         ...

20070400 <usart0_driver>:
20070400:	8000 4009 0000 0000 0000 0000 0000 0000     ...@............
20070410:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070420:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070430:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070440:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070450:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070460:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070470:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070480:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070490:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704a0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704b0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704c0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704d0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704e0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704f0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070500:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070510:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070520:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070530:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070540:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070550:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070560:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070570:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070580:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070590:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705a0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705b0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705c0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705d0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705e0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705f0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070600:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070610:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070620:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070630:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070640:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070650:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070660:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070670:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070680:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070690:	0000 0000 0000 0000 0000 0000 0009 0000     ................

200706a0 <usart1_driver>:
200706a0:	c000 4009 0000 0000 0000 0000 0000 0000     ...@............
200706b0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200706c0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200706d0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200706e0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200706f0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070700:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070710:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070720:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070730:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070740:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070750:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070760:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070770:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070780:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070790:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707a0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707b0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707c0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707d0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707e0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707f0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070800:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070810:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070820:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070830:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070840:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070850:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070860:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070870:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070880:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070890:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708a0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708b0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708c0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708d0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708e0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708f0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070900:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070910:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070920:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070930:	0000 0000 0000 0000 0001 0000 0009 0000     ................

20070940 <vccint_setting>:
20070940:	03e8 0000                                   ....

20070944 <xram>:
20070944:	0000 6000                                   ...`

20070948 <SystemCoreClock>:
20070948:	0900 003d                                   ..=.

2007094c <udi_api_vendor>:
2007094c:	3569 0008 3525 0008 3539 0008 3519 0008     i5..%5..95...5..
2007095c:	0000 0000                                   ....

20070960 <udc_config>:
20070960:	0ad0 2007 0980 2007 0ad0 2007 0ae4 2007     ... ... ... ... 
20070970:	0978 2007 0000 0000                         x.. ....

20070978 <udc_config_hs>:
20070978:	0a2c 2007 0af0 2007                         ,.. ... 

20070980 <udc_config_lsfs>:
20070980:	0988 2007 0af0 2007                         ... ... 

20070988 <udc_desc_fs>:
20070988:	0209 00a4 0105 8000 09fa 0004 0200 ffff     ................
20070998:	00ff 0507 0281 0040 0700 0205 4002 0000     ......@......@..
200709a8:	0b08 0201 0202 0000 0409 0001 0201 0002     ................
200709b8:	0500 0024 0110 2404 0202 2405 0106 0502     ..$....$...$....
200709c8:	0124 0203 0507 0387 0040 0910 0204 0200     $.......@.......
200709d8:	000a 0000 0507 0283 0040 0700 0405 4002     ........@......@
200709e8:	0000 0b08 0203 0202 0000 0409 0003 0201     ................
200709f8:	0002 0500 0024 0110 2404 0202 2405 0306     ....$....$...$..
20070a08:	0504 0124 0403 0507 0388 0040 0910 0404     ..$.......@.....
20070a18:	0200 000a 0000 0507 0285 0040 0700 0605     ..........@.....
20070a28:	4002 0000                                   .@..

20070a2c <udc_desc_hs>:
20070a2c:	0209 00a4 0105 8000 09fa 0004 0200 ffff     ................
20070a3c:	00ff 0507 0281 0200 0700 0205 0002 0002     ................
20070a4c:	0b08 0201 0202 0000 0409 0001 0201 0002     ................
20070a5c:	0500 0024 0110 2404 0202 2405 0106 0502     ..$....$...$....
20070a6c:	0124 0203 0507 0387 0040 0910 0204 0200     $.......@.......
20070a7c:	000a 0000 0507 0283 0200 0700 0405 0002     ................
20070a8c:	0002 0b08 0203 0202 0000 0409 0003 0201     ................
20070a9c:	0002 0500 0024 0110 2404 0202 2405 0306     ....$....$...$..
20070aac:	0504 0124 0403 0507 0388 0040 0910 0404     ..$.......@.....
20070abc:	0200 000a 0000 0507 0285 0200 0700 0605     ................
20070acc:	0002 0002                                   ....

20070ad0 <udc_device_desc>:
20070ad0:	0112 0200 0000 4000 2b3e c340 0900 0201     .......@>+@.....
20070ae0:	0103 0000                                   ....

20070ae4 <udc_device_qual>:
20070ae4:	060a 0200 0000 4000 0001 0000               .......@....

20070af0 <udi_apis>:
20070af0:	094c 2007 0b08 2007 0b1c 2007 0b08 2007     L.. ... ... ... 
20070b00:	0b1c 2007                                   ... 

20070b04 <g_interrupt_enabled>:
20070b04:	0001 0000                                   ....

20070b08 <udi_api_cdc_comm>:
20070b08:	5529 0008 5459 0008 5469 0008 54fd 0008     )U..YT..iT...T..
20070b18:	0000 0000                                   ....

20070b1c <udi_api_cdc_data>:
20070b1c:	58c9 0008 55bd 0008 54f9 0008 54fd 0008     .X...U...T...T..
20070b2c:	5799 0008                                   .W..

20070b30 <_impure_ptr>:
20070b30:	0b38 2007 0000 0000                         8.. ....

20070b38 <impure_data>:
20070b38:	0000 0000 0e24 2007 0e8c 2007 0ef4 2007     ....$.. ... ... 
20070b48:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070b58:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070b68:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070b78:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070b88:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070b98:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ba8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070bb8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070bc8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070bd8:	0000 0000 0000 0000 0001 0000 0000 0000     ................
20070be8:	330e abcd 1234 e66d deec 0005 000b 0000     .3..4.m.........
20070bf8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c08:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c18:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c28:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c38:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c48:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c58:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c68:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c78:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c88:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c98:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ca8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070cb8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070cc8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070cd8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ce8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070cf8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d08:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d18:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d28:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d38:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d48:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d58:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d68:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d78:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d88:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d98:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070da8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070db8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070dc8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070dd8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070de8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070df8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e08:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e18:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e28:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e38:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e48:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e58:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e68:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e78:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e88:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e98:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ea8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070eb8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ec8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ed8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ee8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ef8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f08:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f18:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f28:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f38:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f48:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f58:	0000 0000 0000 0000                         ........

20070f60 <__atexit_recursive_mutex>:
20070f60:	330c 2007                                   .3. 

20070f64 <__malloc_av_>:
20070f64:	0000 0000 0000 0000 0f64 2007 0f64 2007     ........d.. d.. 
20070f74:	0f6c 2007 0f6c 2007 0f74 2007 0f74 2007     l.. l.. t.. t.. 
20070f84:	0f7c 2007 0f7c 2007 0f84 2007 0f84 2007     |.. |.. ... ... 
20070f94:	0f8c 2007 0f8c 2007 0f94 2007 0f94 2007     ... ... ... ... 
20070fa4:	0f9c 2007 0f9c 2007 0fa4 2007 0fa4 2007     ... ... ... ... 
20070fb4:	0fac 2007 0fac 2007 0fb4 2007 0fb4 2007     ... ... ... ... 
20070fc4:	0fbc 2007 0fbc 2007 0fc4 2007 0fc4 2007     ... ... ... ... 
20070fd4:	0fcc 2007 0fcc 2007 0fd4 2007 0fd4 2007     ... ... ... ... 
20070fe4:	0fdc 2007 0fdc 2007 0fe4 2007 0fe4 2007     ... ... ... ... 
20070ff4:	0fec 2007 0fec 2007 0ff4 2007 0ff4 2007     ... ... ... ... 
20071004:	0ffc 2007 0ffc 2007 1004 2007 1004 2007     ... ... ... ... 
20071014:	100c 2007 100c 2007 1014 2007 1014 2007     ... ... ... ... 
20071024:	101c 2007 101c 2007 1024 2007 1024 2007     ... ... $.. $.. 
20071034:	102c 2007 102c 2007 1034 2007 1034 2007     ,.. ,.. 4.. 4.. 
20071044:	103c 2007 103c 2007 1044 2007 1044 2007     <.. <.. D.. D.. 
20071054:	104c 2007 104c 2007 1054 2007 1054 2007     L.. L.. T.. T.. 
20071064:	105c 2007 105c 2007 1064 2007 1064 2007     \.. \.. d.. d.. 
20071074:	106c 2007 106c 2007 1074 2007 1074 2007     l.. l.. t.. t.. 
20071084:	107c 2007 107c 2007 1084 2007 1084 2007     |.. |.. ... ... 
20071094:	108c 2007 108c 2007 1094 2007 1094 2007     ... ... ... ... 
200710a4:	109c 2007 109c 2007 10a4 2007 10a4 2007     ... ... ... ... 
200710b4:	10ac 2007 10ac 2007 10b4 2007 10b4 2007     ... ... ... ... 
200710c4:	10bc 2007 10bc 2007 10c4 2007 10c4 2007     ... ... ... ... 
200710d4:	10cc 2007 10cc 2007 10d4 2007 10d4 2007     ... ... ... ... 
200710e4:	10dc 2007 10dc 2007 10e4 2007 10e4 2007     ... ... ... ... 
200710f4:	10ec 2007 10ec 2007 10f4 2007 10f4 2007     ... ... ... ... 
20071104:	10fc 2007 10fc 2007 1104 2007 1104 2007     ... ... ... ... 
20071114:	110c 2007 110c 2007 1114 2007 1114 2007     ... ... ... ... 
20071124:	111c 2007 111c 2007 1124 2007 1124 2007     ... ... $.. $.. 
20071134:	112c 2007 112c 2007 1134 2007 1134 2007     ,.. ,.. 4.. 4.. 
20071144:	113c 2007 113c 2007 1144 2007 1144 2007     <.. <.. D.. D.. 
20071154:	114c 2007 114c 2007 1154 2007 1154 2007     L.. L.. T.. T.. 
20071164:	115c 2007 115c 2007 1164 2007 1164 2007     \.. \.. d.. d.. 
20071174:	116c 2007 116c 2007 1174 2007 1174 2007     l.. l.. t.. t.. 
20071184:	117c 2007 117c 2007 1184 2007 1184 2007     |.. |.. ... ... 
20071194:	118c 2007 118c 2007 1194 2007 1194 2007     ... ... ... ... 
200711a4:	119c 2007 119c 2007 11a4 2007 11a4 2007     ... ... ... ... 
200711b4:	11ac 2007 11ac 2007 11b4 2007 11b4 2007     ... ... ... ... 
200711c4:	11bc 2007 11bc 2007 11c4 2007 11c4 2007     ... ... ... ... 
200711d4:	11cc 2007 11cc 2007 11d4 2007 11d4 2007     ... ... ... ... 
200711e4:	11dc 2007 11dc 2007 11e4 2007 11e4 2007     ... ... ... ... 
200711f4:	11ec 2007 11ec 2007 11f4 2007 11f4 2007     ... ... ... ... 
20071204:	11fc 2007 11fc 2007 1204 2007 1204 2007     ... ... ... ... 
20071214:	120c 2007 120c 2007 1214 2007 1214 2007     ... ... ... ... 
20071224:	121c 2007 121c 2007 1224 2007 1224 2007     ... ... $.. $.. 
20071234:	122c 2007 122c 2007 1234 2007 1234 2007     ,.. ,.. 4.. 4.. 
20071244:	123c 2007 123c 2007 1244 2007 1244 2007     <.. <.. D.. D.. 
20071254:	124c 2007 124c 2007 1254 2007 1254 2007     L.. L.. T.. T.. 
20071264:	125c 2007 125c 2007 1264 2007 1264 2007     \.. \.. d.. d.. 
20071274:	126c 2007 126c 2007 1274 2007 1274 2007     l.. l.. t.. t.. 
20071284:	127c 2007 127c 2007 1284 2007 1284 2007     |.. |.. ... ... 
20071294:	128c 2007 128c 2007 1294 2007 1294 2007     ... ... ... ... 
200712a4:	129c 2007 129c 2007 12a4 2007 12a4 2007     ... ... ... ... 
200712b4:	12ac 2007 12ac 2007 12b4 2007 12b4 2007     ... ... ... ... 
200712c4:	12bc 2007 12bc 2007 12c4 2007 12c4 2007     ... ... ... ... 
200712d4:	12cc 2007 12cc 2007 12d4 2007 12d4 2007     ... ... ... ... 
200712e4:	12dc 2007 12dc 2007 12e4 2007 12e4 2007     ... ... ... ... 
200712f4:	12ec 2007 12ec 2007 12f4 2007 12f4 2007     ... ... ... ... 
20071304:	12fc 2007 12fc 2007 1304 2007 1304 2007     ... ... ... ... 
20071314:	130c 2007 130c 2007 1314 2007 1314 2007     ... ... ... ... 
20071324:	131c 2007 131c 2007 1324 2007 1324 2007     ... ... $.. $.. 
20071334:	132c 2007 132c 2007 1334 2007 1334 2007     ,.. ,.. 4.. 4.. 
20071344:	133c 2007 133c 2007 1344 2007 1344 2007     <.. <.. D.. D.. 
20071354:	134c 2007 134c 2007 1354 2007 1354 2007     L.. L.. T.. T.. 
20071364:	135c 2007 135c 2007                         \.. \.. 

2007136c <__malloc_sbrk_base>:
2007136c:	ffff ffff                                   ....

20071370 <__malloc_trim_threshold>:
20071370:	0000 0002                                   ....

20071374 <__global_locale>:
20071374:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
20071384:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071394:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
200713a4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200713b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
200713c4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200713d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
200713e4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200713f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
20071404:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071414:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
20071424:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071434:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
20071444:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071454:	b171 0008 9ddd 0008 0000 0000 cd8c 0008     q...............
20071464:	cd68 0008 cd28 0008 cd28 0008 cd28 0008     h...(...(...(...
20071474:	cd28 0008 cd28 0008 cd28 0008 cd28 0008     (...(...(...(...
20071484:	cd28 0008 cd28 0008 ffff ffff ffff ffff     (...(...........
20071494:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
200714a4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200714b4:	0000 0000 0000 0000 0000 5341 4943 0049     ..........ASCII.
200714c4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200714d4:	0000 0000 0000 0000 0000 0000               ............
