
CW340.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cf7c  00080000  00080000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  0008cf7c  0008cf7c  0001cf7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000014e0  20070000  0008cf84  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          00001e78  200714e0  0008e464  000214e0  2**2
                  ALLOC
  4 .stack        00001500  20073358  000902dc  000214e0  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000214e0  2**0
                  CONTENTS, READONLY
  6 .comment      00000049  00000000  00000000  00021509  2**0
                  CONTENTS, READONLY
  7 .debug_info   00022245  00000000  00000000  00021552  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_abbrev 00006643  00000000  00000000  00043797  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_loc    0001113c  00000000  00000000  00049dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_aranges 00001490  00000000  00000000  0005af16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_ranges 00005388  00000000  00000000  0005c3a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_macro  000252ec  00000000  00000000  0006172e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_line   0002d67f  00000000  00000000  00086a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_str    0007501b  00000000  00000000  000b4099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  00004bd0  00000000  00000000  001290b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

00080000 <exception_table>:
   80000:	58 48 07 20 65 39 08 00 61 39 08 00 61 39 08 00     XH. e9..a9..a9..
   80010:	61 39 08 00 61 39 08 00 61 39 08 00 00 00 00 00     a9..a9..a9......
   80020:	00 00 00 00 00 00 00 00 00 00 00 00 61 39 08 00     ............a9..
   80030:	61 39 08 00 00 00 00 00 61 39 08 00 61 39 08 00     a9......a9..a9..
   80040:	61 39 08 00 61 39 08 00 61 39 08 00 61 39 08 00     a9..a9..a9..a9..
   80050:	61 39 08 00 61 39 08 00 61 39 08 00 61 39 08 00     a9..a9..a9..a9..
   80060:	61 39 08 00 61 39 08 00 00 00 00 00 55 33 08 00     a9..a9......U3..
   80070:	65 33 08 00 75 33 08 00 85 33 08 00 00 00 00 00     e3..u3...3......
   80080:	00 00 00 00 a9 1c 08 00 b9 1c 08 00 61 39 08 00     ............a9..
   80090:	61 39 08 00 61 39 08 00 61 39 08 00 61 39 08 00     a9..a9..a9..a9..
   800a0:	61 39 08 00 00 00 00 00 61 39 08 00 61 39 08 00     a9......a9..a9..
   800b0:	a1 0f 08 00 61 39 08 00 61 39 08 00 61 39 08 00     ....a9..a9..a9..
   800c0:	61 39 08 00 61 39 08 00 61 39 08 00 61 39 08 00     a9..a9..a9..a9..
   800d0:	61 39 08 00 61 39 08 00 61 39 08 00 61 39 08 00     a9..a9..a9..a9..
   800e0:	55 49 08 00 61 39 08 00 61 39 08 00 61 39 08 00     UI..a9..a9..a9..
   800f0:	61 39 08 00                                         a9..

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200714e0 	.word	0x200714e0
   80110:	00000000 	.word	0x00000000
   80114:	0008cf84 	.word	0x0008cf84

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b03      	ldr	r3, [pc, #12]	; (80128 <frame_dummy+0x10>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4903      	ldr	r1, [pc, #12]	; (8012c <frame_dummy+0x14>)
   80120:	4803      	ldr	r0, [pc, #12]	; (80130 <frame_dummy+0x18>)
   80122:	f3af 8000 	nop.w
   80126:	bd08      	pop	{r3, pc}
   80128:	00000000 	.word	0x00000000
   8012c:	200714e4 	.word	0x200714e4
   80130:	0008cf84 	.word	0x0008cf84

00080134 <init_circ_buf>:

    @param cbuf Points to the structure to be initialized.
*/
void init_circ_buf(tcirc_buf *cbuf)
{
    cbuf->head = cbuf->tail = 0;
   80134:	2300      	movs	r3, #0
   80136:	6043      	str	r3, [r0, #4]
   80138:	6003      	str	r3, [r0, #0]
    cbuf->dropped = 0;
   8013a:	6083      	str	r3, [r0, #8]
}
   8013c:	4770      	bx	lr
   8013e:	bf00      	nop

00080140 <add_to_circ_buf>:

    @param cbuf Pointer to structure that contains data.
    @param ch Character to add to buffer.
*/
void add_to_circ_buf(tcirc_buf *cbuf, uint8_t ch, bool block)
{
   80140:	b410      	push	{r4}
    // Add char to buffer
    unsigned int newhead = cbuf->head;
   80142:	6804      	ldr	r4, [r0, #0]
    newhead++;
   80144:	3401      	adds	r4, #1
    if (newhead >= CIRCBUFSIZE)
        newhead = 0;
   80146:	2cc8      	cmp	r4, #200	; 0xc8
   80148:	bf28      	it	cs
   8014a:	2400      	movcs	r4, #0
   8014c:	e000      	b.n	80150 <add_to_circ_buf+0x10>
    while (newhead == cbuf->tail)
    {
        if (!block)
   8014e:	b142      	cbz	r2, 80162 <add_to_circ_buf+0x22>
    while (newhead == cbuf->tail)
   80150:	6843      	ldr	r3, [r0, #4]
   80152:	42a3      	cmp	r3, r4
   80154:	d0fb      	beq.n	8014e <add_to_circ_buf+0xe>
        
        //Add processing here?
        
    }

    cbuf->buf[cbuf->head] = ch;
   80156:	6803      	ldr	r3, [r0, #0]
   80158:	4403      	add	r3, r0
   8015a:	7319      	strb	r1, [r3, #12]
    cbuf->head = newhead;
   8015c:	6004      	str	r4, [r0, #0]
}
   8015e:	bc10      	pop	{r4}
   80160:	4770      	bx	lr
            cbuf->dropped++;
   80162:	6883      	ldr	r3, [r0, #8]
}
   80164:	bc10      	pop	{r4}
            cbuf->dropped++;
   80166:	3301      	adds	r3, #1
   80168:	6083      	str	r3, [r0, #8]
}
   8016a:	4770      	bx	lr

0008016c <get_from_circ_buf>:
*/
uint8_t get_from_circ_buf(tcirc_buf *cbuf)
{
    // Get char from buffer
    // Be sure to check first that there is a char in buffer
    unsigned int newtail = cbuf->tail;
   8016c:	6843      	ldr	r3, [r0, #4]
    uint8_t retval = cbuf->buf[newtail];

    if (newtail == cbuf->head)
   8016e:	6801      	ldr	r1, [r0, #0]
{
   80170:	4602      	mov	r2, r0
    if (newtail == cbuf->head)
   80172:	4299      	cmp	r1, r3
    uint8_t retval = cbuf->buf[newtail];
   80174:	4418      	add	r0, r3
   80176:	7b00      	ldrb	r0, [r0, #12]
    if (newtail == cbuf->head)
   80178:	d005      	beq.n	80186 <get_from_circ_buf+0x1a>
        return SERIAL_ERR;

    newtail++;
   8017a:	3301      	adds	r3, #1
    if (newtail >= CIRCBUFSIZE)
        // Rollover
        newtail = 0;
   8017c:	2bc8      	cmp	r3, #200	; 0xc8
   8017e:	bf28      	it	cs
   80180:	2300      	movcs	r3, #0
    cbuf->tail = newtail;
   80182:	6053      	str	r3, [r2, #4]

    return retval;
   80184:	4770      	bx	lr
        return SERIAL_ERR;
   80186:	20ff      	movs	r0, #255	; 0xff
}
   80188:	4770      	bx	lr
   8018a:	bf00      	nop

0008018c <circ_buf_has_char>:
    @retval false if buffer is empty.
*/
bool circ_buf_has_char(tcirc_buf *cbuf)
{
    // Return true if buffer empty
    unsigned int head = cbuf->head;
   8018c:	6803      	ldr	r3, [r0, #0]
    return (head != cbuf->tail);
   8018e:	6840      	ldr	r0, [r0, #4]
}
   80190:	1ac0      	subs	r0, r0, r3
   80192:	bf18      	it	ne
   80194:	2001      	movne	r0, #1
   80196:	4770      	bx	lr

00080198 <circ_buf_count>:
 */
unsigned int circ_buf_count(tcirc_buf *cbuf)
{
    int count;

    count = cbuf->head;
   80198:	6803      	ldr	r3, [r0, #0]
    count -= cbuf->tail;
   8019a:	6840      	ldr	r0, [r0, #4]
    if (count < 0)
   8019c:	1a18      	subs	r0, r3, r0
        count += CIRCBUFSIZE;
   8019e:	bf48      	it	mi
   801a0:	30c8      	addmi	r0, #200	; 0xc8
    return (unsigned int)count;
}
   801a2:	4770      	bx	lr

000801a4 <spi1util_init>:
int pin_spi1_sck = -1;
int pin_spi1_cs = -1;

/* FPGA Programming: Init pins - assumes FPGA already programmed to use these */
void spi1util_init(void)
{
   801a4:	b510      	push	{r4, lr}
    /* IO setup is done when IO pins are configured right now */
	gpio_set_pin_high(pin_spi1_cs);
   801a6:	4a05      	ldr	r2, [pc, #20]	; (801bc <spi1util_init+0x18>)
   801a8:	4b05      	ldr	r3, [pc, #20]	; (801c0 <spi1util_init+0x1c>)
   801aa:	6810      	ldr	r0, [r2, #0]
   801ac:	4798      	blx	r3
	gpio_set_pin_low(pin_spi1_sck);
}
   801ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	gpio_set_pin_low(pin_spi1_sck);
   801b2:	4a04      	ldr	r2, [pc, #16]	; (801c4 <spi1util_init+0x20>)
   801b4:	4b04      	ldr	r3, [pc, #16]	; (801c8 <spi1util_init+0x24>)
   801b6:	6810      	ldr	r0, [r2, #0]
   801b8:	4718      	bx	r3
   801ba:	bf00      	nop
   801bc:	200701c0 	.word	0x200701c0
   801c0:	00083749 	.word	0x00083749
   801c4:	200701cc 	.word	0x200701cc
   801c8:	00083765 	.word	0x00083765

000801cc <spi1util_cs_low>:

/* SPI CS Pin Low */
void spi1util_cs_low(void)
{
	gpio_set_pin_low(pin_spi1_cs);
   801cc:	4a01      	ldr	r2, [pc, #4]	; (801d4 <spi1util_cs_low+0x8>)
   801ce:	4b02      	ldr	r3, [pc, #8]	; (801d8 <spi1util_cs_low+0xc>)
   801d0:	6810      	ldr	r0, [r2, #0]
   801d2:	4718      	bx	r3
   801d4:	200701c0 	.word	0x200701c0
   801d8:	00083765 	.word	0x00083765

000801dc <spi1util_cs_high>:
}

/* SPI CS Pin High */
void spi1util_cs_high(void)
{
	gpio_set_pin_high(pin_spi1_cs);
   801dc:	4a01      	ldr	r2, [pc, #4]	; (801e4 <spi1util_cs_high+0x8>)
   801de:	4b02      	ldr	r3, [pc, #8]	; (801e8 <spi1util_cs_high+0xc>)
   801e0:	6810      	ldr	r0, [r2, #0]
   801e2:	4718      	bx	r3
   801e4:	200701c0 	.word	0x200701c0
   801e8:	00083749 	.word	0x00083749

000801ec <spi1util_xferbyte>:
}

/* SPI data byte transfer */
uint8_t spi1util_xferbyte(uint8_t databyte)
{
   801ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   801f0:	2608      	movs	r6, #8
	uint8_t result = 0;
   801f2:	2400      	movs	r4, #0
{
   801f4:	4605      	mov	r5, r0

	for(unsigned int i=0; i < 8; i++){	
   801f6:	f8df b064 	ldr.w	fp, [pc, #100]	; 8025c <spi1util_xferbyte+0x70>
   801fa:	4f19      	ldr	r7, [pc, #100]	; (80260 <spi1util_xferbyte+0x74>)
   801fc:	f8df 8064 	ldr.w	r8, [pc, #100]	; 80264 <spi1util_xferbyte+0x78>
   80200:	f8df a064 	ldr.w	sl, [pc, #100]	; 80268 <spi1util_xferbyte+0x7c>
   80204:	f8df 9064 	ldr.w	r9, [pc, #100]	; 8026c <spi1util_xferbyte+0x80>
   80208:	e008      	b.n	8021c <spi1util_xferbyte+0x30>
		gpio_set_pin_low(pin_spi1_sck);

		if (databyte & 0x80){
			gpio_set_pin_high(pin_spi1_mosi);
			} else {
			gpio_set_pin_low(pin_spi1_mosi);
   8020a:	47c0      	blx	r8
		}
		
		gpio_set_pin_high(pin_spi1_sck);
   8020c:	6838      	ldr	r0, [r7, #0]
   8020e:	47c8      	blx	r9
		databyte = databyte << 1;
   80210:	006d      	lsls	r5, r5, #1
		result = result << 1;
   80212:	0064      	lsls	r4, r4, #1
	for(unsigned int i=0; i < 8; i++){	
   80214:	3e01      	subs	r6, #1
		databyte = databyte << 1;
   80216:	b2ed      	uxtb	r5, r5
		result = result << 1;
   80218:	b2e4      	uxtb	r4, r4
	for(unsigned int i=0; i < 8; i++){	
   8021a:	d010      	beq.n	8023e <spi1util_xferbyte+0x52>
		result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   8021c:	4b14      	ldr	r3, [pc, #80]	; (80270 <spi1util_xferbyte+0x84>)
   8021e:	f8db 0000 	ldr.w	r0, [fp]
   80222:	4798      	blx	r3
   80224:	4603      	mov	r3, r0
		gpio_set_pin_low(pin_spi1_sck);
   80226:	6838      	ldr	r0, [r7, #0]
		result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80228:	2b00      	cmp	r3, #0
   8022a:	bf18      	it	ne
   8022c:	f044 0401 	orrne.w	r4, r4, #1
		gpio_set_pin_low(pin_spi1_sck);
   80230:	47c0      	blx	r8
		if (databyte & 0x80){
   80232:	062b      	lsls	r3, r5, #24
			gpio_set_pin_high(pin_spi1_mosi);
   80234:	f8da 0000 	ldr.w	r0, [sl]
		if (databyte & 0x80){
   80238:	d5e7      	bpl.n	8020a <spi1util_xferbyte+0x1e>
			gpio_set_pin_high(pin_spi1_mosi);
   8023a:	47c8      	blx	r9
   8023c:	e7e6      	b.n	8020c <spi1util_xferbyte+0x20>
	}

	result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   8023e:	f8db 0000 	ldr.w	r0, [fp]
   80242:	4b0b      	ldr	r3, [pc, #44]	; (80270 <spi1util_xferbyte+0x84>)
   80244:	4798      	blx	r3
   80246:	4603      	mov	r3, r0
   80248:	2b00      	cmp	r3, #0
   8024a:	bf18      	it	ne
   8024c:	f044 0401 	orrne.w	r4, r4, #1

	gpio_set_pin_low(pin_spi1_sck);
   80250:	6838      	ldr	r0, [r7, #0]
	result |= pio_get_pin_value(pin_spi1_miso) ? (1) : 0;
   80252:	b264      	sxtb	r4, r4
	gpio_set_pin_low(pin_spi1_sck);
   80254:	47c0      	blx	r8

	return result;
}
   80256:	b2e0      	uxtb	r0, r4
   80258:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8025c:	200701c4 	.word	0x200701c4
   80260:	200701cc 	.word	0x200701cc
   80264:	00083765 	.word	0x00083765
   80268:	200701c8 	.word	0x200701c8
   8026c:	00083749 	.word	0x00083749
   80270:	0008372d 	.word	0x0008372d

00080274 <spi1util_deinit>:


void spi1util_deinit(void)
{
	/* IO setup is done when IO pins are configured right now */
   80274:	4770      	bx	lr
   80276:	bf00      	nop

00080278 <fpga_pins>:
void fpga_pins(bool enabled);
void usb_pwr_setup(void);
void check_power_state(void);

void fpga_pins(bool enabled)
{
   80278:	b570      	push	{r4, r5, r6, lr}
   8027a:	4605      	mov	r5, r0
	gpio_configure_pin(PIN_FPGA_DONE_GPIO, PIN_FPGA_DONE_FLAGS);
   8027c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80280:	2031      	movs	r0, #49	; 0x31
   80282:	4c4f      	ldr	r4, [pc, #316]	; (803c0 <fpga_pins+0x148>)
   80284:	47a0      	blx	r4
	
	//gpio_configure_pin(PIO_PB22_IDX, PIO_OUTPUT_0);
	//gpio_configure_pin(PIO_PB18_IDX, PIO_OUTPUT_0);	
	
	if (enabled){
   80286:	2d00      	cmp	r5, #0
   80288:	d044      	beq.n	80314 <fpga_pins+0x9c>
		#ifdef CONF_BOARD_PCK0
		gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   8028a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8028e:	2036      	movs	r0, #54	; 0x36
   80290:	47a0      	blx	r4
		#ifdef CONF_BOARD_PCK1
		gpio_configure_pin(PIN_PCK1, PIN_PCK1_FLAGS);
		#endif
		
		
		gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   80292:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80296:	200a      	movs	r0, #10
   80298:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   8029a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8029e:	200b      	movs	r0, #11
   802a0:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART1_RXD, PIN_USART1_RXD_FLAGS);
   802a2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802a6:	200c      	movs	r0, #12
   802a8:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART1_TXD, PIN_USART1_TXD_FLAGS);
   802aa:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802ae:	200d      	movs	r0, #13
   802b0:	47a0      	blx	r4
		
		gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIN_EBI_DATA_BUS_FLAG1);
   802b2:	4944      	ldr	r1, [pc, #272]	; (803c4 <fpga_pins+0x14c>)
   802b4:	2042      	movs	r0, #66	; 0x42
   802b6:	47a0      	blx	r4
		// gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIN_EBI_DATA_BUS_FLAG1);
		gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIN_EBI_DATA_BUS_FLAG1);
   802b8:	4942      	ldr	r1, [pc, #264]	; (803c4 <fpga_pins+0x14c>)
   802ba:	2044      	movs	r0, #68	; 0x44
   802bc:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIN_EBI_DATA_BUS_FLAG1);
   802be:	4941      	ldr	r1, [pc, #260]	; (803c4 <fpga_pins+0x14c>)
   802c0:	2045      	movs	r0, #69	; 0x45
   802c2:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIN_EBI_DATA_BUS_FLAG1);
   802c4:	493f      	ldr	r1, [pc, #252]	; (803c4 <fpga_pins+0x14c>)
   802c6:	2046      	movs	r0, #70	; 0x46
   802c8:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIN_EBI_DATA_BUS_FLAG1);
   802ca:	493e      	ldr	r1, [pc, #248]	; (803c4 <fpga_pins+0x14c>)
   802cc:	2047      	movs	r0, #71	; 0x47
   802ce:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIN_EBI_DATA_BUS_FLAG1);
   802d0:	493c      	ldr	r1, [pc, #240]	; (803c4 <fpga_pins+0x14c>)
   802d2:	2048      	movs	r0, #72	; 0x48
   802d4:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIN_EBI_DATA_BUS_FLAG1);
   802d6:	493b      	ldr	r1, [pc, #236]	; (803c4 <fpga_pins+0x14c>)
   802d8:	2049      	movs	r0, #73	; 0x49
   802da:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NRD, PIN_EBI_NRD_FLAGS);
   802dc:	493a      	ldr	r1, [pc, #232]	; (803c8 <fpga_pins+0x150>)
   802de:	201d      	movs	r0, #29
   802e0:	47a0      	blx	r4
		// gpio_configure_pin(PIN_EBI_NWE, PIN_EBI_NWE_FLAGS);
		gpio_configure_pin(PIN_EBI_NCS0, PIN_EBI_NCS0_FLAGS);
   802e2:	4939      	ldr	r1, [pc, #228]	; (803c8 <fpga_pins+0x150>)
   802e4:	2006      	movs	r0, #6
   802e6:	47a0      	blx	r4
		// gpio_configure_pin(PIN_EBI_ADDR_BUS_A19, PIN_EBI_DATA_BUS_FLAG1);
		//gpio_configure_pin(PIN_EBI_ADDR_BUS_A20, PIN_EBI_DATA_BUS_FLAG1); /* TODO: Add ADDR20 back */
		
		
		/* FPGA Programming pins */
		FPGA_NPROG_SETUP();
   802e8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   802ec:	2033      	movs	r0, #51	; 0x33
   802ee:	47a0      	blx	r4
		FPGA_NPROG_HIGH();		
   802f0:	2033      	movs	r0, #51	; 0x33
   802f2:	4b36      	ldr	r3, [pc, #216]	; (803cc <fpga_pins+0x154>)
   802f4:	4798      	blx	r3
		//gpio_configure_pin(FPGA_ALE_GPIO, FPGA_ALE_FLAGS);
		//gpio_set_pin_high(FPGA_ALE_GPIO);
			
		//Force FPGA trigger
		
		gpio_configure_pin(FPGA_TRIGGER_GPIO, FPGA_TRIGGER_FLAGS);
   802f6:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   802fa:	2057      	movs	r0, #87	; 0x57
   802fc:	47a0      	blx	r4
		
		gpio_configure_pin(PIN_FPGA_PROGRAM_GPIO, PIN_FPGA_PROGRAM_FLAGS);
   802fe:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80302:	2033      	movs	r0, #51	; 0x33
   80304:	47a0      	blx	r4
		gpio_configure_pin(SPI_MISO_GPIO, PIO_INPUT); /* TODO: Add back */
		gpio_configure_pin(SPI_MOSI_GPIO, PIO_INPUT); /* TODO: Add back */
		gpio_configure_pin(SPI_SPCK_GPIO, PIO_INPUT); /* TODO: Add back */
	}
	
	gpio_configure_pin(PIN_FPGA_DONE_GPIO, PIN_FPGA_DONE_FLAGS);
   80306:	4623      	mov	r3, r4
	
}
   80308:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	gpio_configure_pin(PIN_FPGA_DONE_GPIO, PIN_FPGA_DONE_FLAGS);
   8030c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80310:	2031      	movs	r0, #49	; 0x31
   80312:	4718      	bx	r3
		gpio_configure_pin(PIN_PCK0, PIO_INPUT);
   80314:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80318:	2036      	movs	r0, #54	; 0x36
   8031a:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART0_RXD, PIO_INPUT);
   8031c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80320:	200a      	movs	r0, #10
   80322:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART0_TXD, PIO_INPUT);
   80324:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80328:	200b      	movs	r0, #11
   8032a:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART1_RXD, PIO_INPUT);
   8032c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80330:	200c      	movs	r0, #12
   80332:	47a0      	blx	r4
		gpio_configure_pin(PIN_USART1_TXD, PIO_INPUT);
   80334:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80338:	200d      	movs	r0, #13
   8033a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D0, PIO_INPUT);
   8033c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80340:	2042      	movs	r0, #66	; 0x42
   80342:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D1, PIO_INPUT);
   80344:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80348:	2043      	movs	r0, #67	; 0x43
   8034a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D2, PIO_INPUT);
   8034c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80350:	2044      	movs	r0, #68	; 0x44
   80352:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D3, PIO_INPUT);
   80354:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80358:	2045      	movs	r0, #69	; 0x45
   8035a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D4, PIO_INPUT);
   8035c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80360:	2046      	movs	r0, #70	; 0x46
   80362:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D5, PIO_INPUT);
   80364:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80368:	2047      	movs	r0, #71	; 0x47
   8036a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D6, PIO_INPUT);
   8036c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80370:	2048      	movs	r0, #72	; 0x48
   80372:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_DATA_BUS_D7, PIO_INPUT);
   80374:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80378:	2049      	movs	r0, #73	; 0x49
   8037a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NRD, PIO_INPUT);
   8037c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80380:	201d      	movs	r0, #29
   80382:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NWE, PIO_INPUT);
   80384:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80388:	2052      	movs	r0, #82	; 0x52
   8038a:	47a0      	blx	r4
		gpio_configure_pin(PIN_EBI_NCS0, PIO_INPUT);
   8038c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80390:	2006      	movs	r0, #6
   80392:	47a0      	blx	r4
		gpio_configure_pin(FPGA_TRIGGER_GPIO, PIO_INPUT);
   80394:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80398:	2057      	movs	r0, #87	; 0x57
   8039a:	47a0      	blx	r4
		gpio_configure_pin(PIN_FPGA_PROGRAM_GPIO, PIO_INPUT);
   8039c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803a0:	2033      	movs	r0, #51	; 0x33
   803a2:	47a0      	blx	r4
		gpio_configure_pin(SPI_MISO_GPIO, PIO_INPUT); /* TODO: Add back */
   803a4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803a8:	2019      	movs	r0, #25
   803aa:	47a0      	blx	r4
		gpio_configure_pin(SPI_MOSI_GPIO, PIO_INPUT); /* TODO: Add back */
   803ac:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803b0:	201a      	movs	r0, #26
   803b2:	47a0      	blx	r4
		gpio_configure_pin(SPI_SPCK_GPIO, PIO_INPUT); /* TODO: Add back */
   803b4:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   803b8:	201b      	movs	r0, #27
   803ba:	47a0      	blx	r4
   803bc:	e7a3      	b.n	80306 <fpga_pins+0x8e>
   803be:	bf00      	nop
   803c0:	000837a5 	.word	0x000837a5
   803c4:	08000001 	.word	0x08000001
   803c8:	10000001 	.word	0x10000001
   803cc:	00083749 	.word	0x00083749

000803d0 <i2c_setup>:

#define TPS56520_ADDR 0x34
void i2c_setup(void)
{
   803d0:	b530      	push	{r4, r5, lr}
	gpio_configure_pin(PIN_PWD_SDA, PIN_PWD_SDA_FLAGS);
   803d2:	4d0c      	ldr	r5, [pc, #48]	; (80404 <i2c_setup+0x34>)
{
   803d4:	b085      	sub	sp, #20
	gpio_configure_pin(PIN_PWD_SDA, PIN_PWD_SDA_FLAGS);
   803d6:	4629      	mov	r1, r5
   803d8:	4c0b      	ldr	r4, [pc, #44]	; (80408 <i2c_setup+0x38>)
   803da:	2011      	movs	r0, #17
   803dc:	47a0      	blx	r4
	gpio_configure_pin(PIN_PWD_SCL, PIN_PWD_SCL_FLAGS);
   803de:	4629      	mov	r1, r5
   803e0:	2012      	movs	r0, #18
   803e2:	47a0      	blx	r4
	
	twi_master_options_t opt = {
   803e4:	f24c 3250 	movw	r2, #50000	; 0xc350
   803e8:	2100      	movs	r1, #0
typedef twi_packet_t twi_package_t;

static inline uint32_t twi_master_setup(twi_master_t p_twi,
		twi_master_options_t *p_opt)
{
	p_opt->master_clk = sysclk_get_peripheral_hz();
   803ea:	4c08      	ldr	r4, [pc, #32]	; (8040c <i2c_setup+0x3c>)
   803ec:	e9cd 2102 	strd	r2, r1, [sp, #8]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   803f0:	4b07      	ldr	r3, [pc, #28]	; (80410 <i2c_setup+0x40>)
   803f2:	2016      	movs	r0, #22
   803f4:	9401      	str	r4, [sp, #4]
   803f6:	4798      	blx	r3
	} else {
		// Do Nothing
	}
#endif

	return (twi_master_init(p_twi, p_opt));
   803f8:	4b06      	ldr	r3, [pc, #24]	; (80414 <i2c_setup+0x44>)
   803fa:	a901      	add	r1, sp, #4
   803fc:	4806      	ldr	r0, [pc, #24]	; (80418 <i2c_setup+0x48>)
   803fe:	4798      	blx	r3
		.speed = 50000,
		.chip  = 0x00
	};
	
	twi_master_setup(TWI0, &opt);	
}
   80400:	b005      	add	sp, #20
   80402:	bd30      	pop	{r4, r5, pc}
   80404:	08000001 	.word	0x08000001
   80408:	000837a5 	.word	0x000837a5
   8040c:	0501bd00 	.word	0x0501bd00
   80410:	00083599 	.word	0x00083599
   80414:	00083a99 	.word	0x00083a99
   80418:	4008c000 	.word	0x4008c000

0008041c <peripheral_setup>:

void peripheral_setup(void)
{
   8041c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	// delay_ms(1);
	// gpio_configure_pin(PIN_USB_RESET, PIO_TYPE_PIO_OUTPUT_1);
	// gpio_set_pin_high(PIN_USB_RESET); //reset enable
	// setup interrupts
	irq_initialize_vectors();
	cpu_irq_enable();
   80420:	f04f 0801 	mov.w	r8, #1
   80424:	4e42      	ldr	r6, [pc, #264]	; (80530 <peripheral_setup+0x114>)
   80426:	200b      	movs	r0, #11
   80428:	47b0      	blx	r6
   8042a:	200c      	movs	r0, #12
   8042c:	47b0      	blx	r6
   8042e:	200d      	movs	r0, #13
   80430:	47b0      	blx	r6
   80432:	200e      	movs	r0, #14
   80434:	47b0      	blx	r6
	fpga_pins(0); // set FPGA pins as inputs
   80436:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 80534 <peripheral_setup+0x118>
   8043a:	2000      	movs	r0, #0
   8043c:	47c8      	blx	r9
	enable_switched_power();
   8043e:	4b3e      	ldr	r3, [pc, #248]	; (80538 <peripheral_setup+0x11c>)
   80440:	4798      	blx	r3
	gpio_configure_pin(PIN_SWSTATE_GPIO, PIN_SWSTATE_FLAGS);
   80442:	4c3e      	ldr	r4, [pc, #248]	; (8053c <peripheral_setup+0x120>)
   80444:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80448:	203a      	movs	r0, #58	; 0x3a
   8044a:	47a0      	blx	r4
	gpio_configure_pin(PIN_USB_HBEAT, PIN_USB_HBEAT_FLAGS);
   8044c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80450:	2003      	movs	r0, #3
   80452:	47a0      	blx	r4
	gpio_configure_pin(PIN_TEMP_ERR_LED, PIN_TEMP_ERR_LED_FLAGS);
   80454:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80458:	2000      	movs	r0, #0
   8045a:	47a0      	blx	r4
	gpio_configure_pin(PIN_TEMP_OK_LED, PIN_TEMP_OK_LED_FLAGS);
   8045c:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80460:	2001      	movs	r0, #1
   80462:	47a0      	blx	r4
	cpu_irq_enable();
   80464:	4b36      	ldr	r3, [pc, #216]	; (80540 <peripheral_setup+0x124>)
   80466:	f883 8000 	strb.w	r8, [r3]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
   8046a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8046e:	b662      	cpsie	i
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
		sleepmgr_locks[i] = 0;
   80470:	2500      	movs	r5, #0
   80472:	4b34      	ldr	r3, [pc, #208]	; (80544 <peripheral_setup+0x128>)

	// Initialize the sleep manager
	sleepmgr_init();

#if !SAMD21 && !SAMR21
	sysclk_init();
   80474:	4a34      	ldr	r2, [pc, #208]	; (80548 <peripheral_setup+0x12c>)
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
   80476:	f883 8005 	strb.w	r8, [r3, #5]
		sleepmgr_locks[i] = 0;
   8047a:	701d      	strb	r5, [r3, #0]
   8047c:	705d      	strb	r5, [r3, #1]
   8047e:	709d      	strb	r5, [r3, #2]
   80480:	70dd      	strb	r5, [r3, #3]
   80482:	711d      	strb	r5, [r3, #4]
   80484:	4790      	blx	r2
	board_init();
   80486:	4b31      	ldr	r3, [pc, #196]	; (8054c <peripheral_setup+0x130>)
   80488:	4798      	blx	r3
	//But you can't define things invalid, so hold is auto-calculated:	
	//NRD_HOLD = NRD_CYCLE - NRD SETUP - NRD PULSE
	//NCS_RD_HOLD = NRD_CYCLE - NCS_RD_SETUP - NCS_RD_PULSE

	pmc_enable_periph_clk(ID_SMC);	
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(2)
   8048a:	4f31      	ldr	r7, [pc, #196]	; (80550 <peripheral_setup+0x134>)
	i2c_setup(); // setup I2C comms
   8048c:	4b31      	ldr	r3, [pc, #196]	; (80554 <peripheral_setup+0x138>)
   8048e:	4798      	blx	r3
	pmc_enable_periph_clk(ID_SMC);	
   80490:	2009      	movs	r0, #9
   80492:	47b0      	blx	r6
	smc_set_setup_timing(SMC, 0, SMC_SETUP_NWE_SETUP(2)
   80494:	4629      	mov	r1, r5
   80496:	4638      	mov	r0, r7
   80498:	4a2f      	ldr	r2, [pc, #188]	; (80558 <peripheral_setup+0x13c>)
   8049a:	4b30      	ldr	r3, [pc, #192]	; (8055c <peripheral_setup+0x140>)
   8049c:	4798      	blx	r3
	| SMC_SETUP_NCS_WR_SETUP(3)
	| SMC_SETUP_NRD_SETUP(2)
	| SMC_SETUP_NCS_RD_SETUP(3));
	smc_set_pulse_timing(SMC, 0, SMC_PULSE_NWE_PULSE(6)
   8049e:	4629      	mov	r1, r5
   804a0:	4638      	mov	r0, r7
   804a2:	4a2f      	ldr	r2, [pc, #188]	; (80560 <peripheral_setup+0x144>)
   804a4:	4b2f      	ldr	r3, [pc, #188]	; (80564 <peripheral_setup+0x148>)
   804a6:	4798      	blx	r3
	| SMC_PULSE_NCS_WR_PULSE(2)
	| SMC_PULSE_NRD_PULSE(6)
	| SMC_PULSE_NCS_RD_PULSE(6));
	smc_set_cycle_timing(SMC, 0, SMC_CYCLE_NWE_CYCLE(12)
   804a8:	4629      	mov	r1, r5
   804aa:	4638      	mov	r0, r7
   804ac:	f04f 120c 	mov.w	r2, #786444	; 0xc000c
   804b0:	4b2d      	ldr	r3, [pc, #180]	; (80568 <peripheral_setup+0x14c>)
   804b2:	4798      	blx	r3
	| SMC_CYCLE_NRD_CYCLE(12));
	smc_set_mode(SMC, 0, SMC_MODE_READ_MODE | SMC_MODE_WRITE_MODE
   804b4:	4629      	mov	r1, r5
   804b6:	4638      	mov	r0, r7
   804b8:	2203      	movs	r2, #3
   804ba:	4b2c      	ldr	r3, [pc, #176]	; (8056c <peripheral_setup+0x150>)
   804bc:	4798      	blx	r3
//@}

static inline void genclk_enable(const struct genclk_config *p_cfg,
		uint32_t ul_id)
{
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   804be:	2204      	movs	r2, #4
   804c0:	4b2b      	ldr	r3, [pc, #172]	; (80570 <peripheral_setup+0x154>)
	pmc_enable_pck(ul_id);
   804c2:	4628      	mov	r0, r5
	PMC->PMC_PCK[ul_id] = p_cfg->ctrl;
   804c4:	641a      	str	r2, [r3, #64]	; 0x40
	pmc_enable_pck(ul_id);
   804c6:	4b2b      	ldr	r3, [pc, #172]	; (80574 <peripheral_setup+0x158>)
   804c8:	4798      	blx	r3
        | SMC_MODE_DBW_BIT_8);


	/* Enable PCLK0 at 84 MHz */	
	genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_MCK, GENCLK_PCK_PRES_1);
	pmc_enable_upll_clock();
   804ca:	4b2b      	ldr	r3, [pc, #172]	; (80578 <peripheral_setup+0x15c>)
   804cc:	4798      	blx	r3
	pmc_enable_periph_clk(ID_UOTGHS);
   804ce:	2028      	movs	r0, #40	; 0x28
   804d0:	47b0      	blx	r6

	// Setup fan PWM
	gpio_configure_pin(PIO_PB25_IDX, PIO_PERIPH_B);	
   804d2:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   804d6:	2039      	movs	r0, #57	; 0x39
   804d8:	47a0      	blx	r4

	fan_pwm_init();
   804da:	4b28      	ldr	r3, [pc, #160]	; (8057c <peripheral_setup+0x160>)
   804dc:	4798      	blx	r3
	fan_pwm_set_duty_cycle(75); //Set at 50% in case we crash - will be tuned later
   804de:	4b28      	ldr	r3, [pc, #160]	; (80580 <peripheral_setup+0x164>)
   804e0:	204b      	movs	r0, #75	; 0x4b
   804e2:	4798      	blx	r3

	// tps56520_init(); // set FPGA voltage to default (1V) //do later, after daughter board connected
	cdce906_init();  //Init CDCE906 PLL Chip
   804e4:	4b27      	ldr	r3, [pc, #156]	; (80584 <peripheral_setup+0x168>)
   804e6:	4798      	blx	r3

	// gpio_set_pin_low(PIN_USB_RESET); // bring USB-PD chip out of reset
	// delay_ms(100); //TODO - these delays are way off??

	// turn on power pins for various on board regulators
	power_init();
   804e8:	4b27      	ldr	r3, [pc, #156]	; (80588 <peripheral_setup+0x16c>)
   804ea:	4798      	blx	r3

	// enable on board thermometers for monitoring board temps
	thermals_init(); 
   804ec:	4b27      	ldr	r3, [pc, #156]	; (8058c <peripheral_setup+0x170>)
   804ee:	4798      	blx	r3

	/* Enable SMC */
	fpga_pins(true);
   804f0:	4640      	mov	r0, r8
   804f2:	47c8      	blx	r9

	udc_start();
   804f4:	4b26      	ldr	r3, [pc, #152]	; (80590 <peripheral_setup+0x174>)
   804f6:	4798      	blx	r3

	// enable periodic interrupt to check thermals
	periodic_timer_init();
   804f8:	4b26      	ldr	r3, [pc, #152]	; (80594 <peripheral_setup+0x178>)
   804fa:	4798      	blx	r3

	// enable power delivery to FPGA (Tgt Power switch)
	gpio_configure_pin(PIO_PB27_IDX, PIO_OUTPUT_1 | PIO_DEFAULT);
   804fc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80500:	203b      	movs	r0, #59	; 0x3b
   80502:	47a0      	blx	r4

	enable_fpga_power();
   80504:	4b24      	ldr	r3, [pc, #144]	; (80598 <peripheral_setup+0x17c>)
   80506:	4798      	blx	r3

	gpio_configure_pin(PIN_FPGA_M0, PIN_FPGA_M0_FLAGS);
   80508:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8050c:	2013      	movs	r0, #19
   8050e:	47a0      	blx	r4
	gpio_configure_pin(PIN_FPGA_M1, PIN_FPGA_M1_FLAGS);
   80510:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80514:	2014      	movs	r0, #20
   80516:	47a0      	blx	r4
	gpio_configure_pin(PIN_FPGA_M2, PIN_FPGA_M2_FLAGS);
   80518:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8051c:	2015      	movs	r0, #21
   8051e:	47a0      	blx	r4

	gpio_configure_pin(PIN_VBUS_DETECT, PIN_VBUS_DETECT_FLAGS);
   80520:	4623      	mov	r3, r4
}
   80522:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	gpio_configure_pin(PIN_VBUS_DETECT, PIN_VBUS_DETECT_FLAGS);
   80526:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8052a:	204f      	movs	r0, #79	; 0x4f
   8052c:	4718      	bx	r3
   8052e:	bf00      	nop
   80530:	00083599 	.word	0x00083599
   80534:	00080279 	.word	0x00080279
   80538:	000809cd 	.word	0x000809cd
   8053c:	000837a5 	.word	0x000837a5
   80540:	20070b04 	.word	0x20070b04
   80544:	20073308 	.word	0x20073308
   80548:	000833e5 	.word	0x000833e5
   8054c:	000854ad 	.word	0x000854ad
   80550:	400e0000 	.word	0x400e0000
   80554:	000803d1 	.word	0x000803d1
   80558:	03020302 	.word	0x03020302
   8055c:	00083241 	.word	0x00083241
   80560:	06060206 	.word	0x06060206
   80564:	0008324d 	.word	0x0008324d
   80568:	00083259 	.word	0x00083259
   8056c:	00083265 	.word	0x00083265
   80570:	400e0600 	.word	0x400e0600
   80574:	000835b9 	.word	0x000835b9
   80578:	00083585 	.word	0x00083585
   8057c:	00080e35 	.word	0x00080e35
   80580:	00080e89 	.word	0x00080e89
   80584:	00082de9 	.word	0x00082de9
   80588:	00080a89 	.word	0x00080a89
   8058c:	00080b35 	.word	0x00080b35
   80590:	00081175 	.word	0x00081175
   80594:	00080f1d 	.word	0x00080f1d
   80598:	00080ded 	.word	0x00080ded

0008059c <main>:

/*! \brief Main function. Execution starts here.
 */
int main(void)
{
	volatile uint32_t reset_reason = 0;
   8059c:	2300      	movs	r3, #0
{
   8059e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	
	// capture reset reason as watchdog on by default...
	reset_reason = RSTC->RSTC_SR;
	reset_reason = reset_reason; //Still a thing in 2021??
	WDT->WDT_MR = (1 << 25); //disable watchdog
   805a2:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
   805a6:	f8df 9094 	ldr.w	r9, [pc, #148]	; 8063c <main+0xa0>
{
   805aa:	b086      	sub	sp, #24
   805ac:	464c      	mov	r4, r9
	reset_reason = RSTC->RSTC_SR;
   805ae:	4a24      	ldr	r2, [pc, #144]	; (80640 <main+0xa4>)
	volatile uint32_t reset_reason = 0;
   805b0:	9301      	str	r3, [sp, #4]
	reset_reason = RSTC->RSTC_SR;
   805b2:	f8d2 a004 	ldr.w	sl, [r2, #4]
	
	// unlock I2C
	I2C_LOCK = 0;
   805b6:	f8df c08c 	ldr.w	ip, [pc, #140]	; 80644 <main+0xa8>
	reset_reason = RSTC->RSTC_SR;
   805ba:	f8cd a004 	str.w	sl, [sp, #4]
	reset_reason = reset_reason; //Still a thing in 2021??
   805be:	f8dd a004 	ldr.w	sl, [sp, #4]
	
	//Convert serial number to ASCII for USB Serial number
	uint32_t serial_number[4];
	flash_read_unique_id(serial_number, sizeof(serial_number));
   805c2:	4e21      	ldr	r6, [pc, #132]	; (80648 <main+0xac>)
	reset_reason = reset_reason; //Still a thing in 2021??
   805c4:	f8cd a004 	str.w	sl, [sp, #4]
	flash_read_unique_id(serial_number, sizeof(serial_number));
   805c8:	a802      	add	r0, sp, #8
	WDT->WDT_MR = (1 << 25); //disable watchdog
   805ca:	f8c2 e054 	str.w	lr, [r2, #84]	; 0x54
	flash_read_unique_id(serial_number, sizeof(serial_number));
   805ce:	2110      	movs	r1, #16
   805d0:	4605      	mov	r5, r0
	I2C_LOCK = 0;
   805d2:	f88c 3000 	strb.w	r3, [ip]
	flash_read_unique_id(serial_number, sizeof(serial_number));
   805d6:	4f1d      	ldr	r7, [pc, #116]	; (8064c <main+0xb0>)
   805d8:	47b0      	blx	r6
	for(unsigned int i = 0; i < 4; i++){
		sprintf(usb_serial_number+(i*8), "%08x", (unsigned int)serial_number[i]);
   805da:	4e1d      	ldr	r6, [pc, #116]	; (80650 <main+0xb4>)
   805dc:	f10d 0818 	add.w	r8, sp, #24
   805e0:	f855 2b04 	ldr.w	r2, [r5], #4
   805e4:	4620      	mov	r0, r4
   805e6:	4631      	mov	r1, r6
   805e8:	47b8      	blx	r7
	for(unsigned int i = 0; i < 4; i++){
   805ea:	4545      	cmp	r5, r8
   805ec:	f104 0408 	add.w	r4, r4, #8
   805f0:	d1f6      	bne.n	805e0 <main+0x44>
	}
	usb_serial_number[32] = 0;
   805f2:	2200      	movs	r2, #0

	peripheral_setup(); // turn on required peripherals
   805f4:	4b17      	ldr	r3, [pc, #92]	; (80654 <main+0xb8>)
	usb_serial_number[32] = 0;
   805f6:	f889 2020 	strb.w	r2, [r9, #32]
	peripheral_setup(); // turn on required peripherals
   805fa:	4798      	blx	r3
	//Following is 60MHz version
	//genclk_enable_config(GENCLK_PCK_0, GENCLK_PCK_SRC_PLLBCK, GENCLK_PCK_PRES_4);

	
	
	naeusb_register_handlers();
   805fc:	4b16      	ldr	r3, [pc, #88]	; (80658 <main+0xbc>)
   805fe:	4798      	blx	r3
	naeusart_register_handlers();
   80600:	4b16      	ldr	r3, [pc, #88]	; (8065c <main+0xc0>)
   80602:	4798      	blx	r3
	fpga_target_register_handlers();
   80604:	4b16      	ldr	r3, [pc, #88]	; (80660 <main+0xc4>)
   80606:	4798      	blx	r3
	bergen_register_handlers();
   80608:	4b16      	ldr	r3, [pc, #88]	; (80664 <main+0xc8>)
		cdc_send_to_pc();
		check_power_state(); //make sure power hasn't been killed		
		if (!TPS_CONNECTED) {
			if (tps56520_set(600)) {
				if (tps56520_set(1000)) {
					TPS_CONNECTED = true;
   8060a:	f04f 0801 	mov.w	r8, #1
   8060e:	4e16      	ldr	r6, [pc, #88]	; (80668 <main+0xcc>)
   80610:	4d16      	ldr	r5, [pc, #88]	; (8066c <main+0xd0>)
   80612:	4c17      	ldr	r4, [pc, #92]	; (80670 <main+0xd4>)
   80614:	4f17      	ldr	r7, [pc, #92]	; (80674 <main+0xd8>)
	bergen_register_handlers();
   80616:	4798      	blx	r3
		cdc_send_to_pc();
   80618:	47b0      	blx	r6
		check_power_state(); //make sure power hasn't been killed		
   8061a:	47a8      	blx	r5
		if (!TPS_CONNECTED) {
   8061c:	7823      	ldrb	r3, [r4, #0]
   8061e:	2b00      	cmp	r3, #0
   80620:	d1fa      	bne.n	80618 <main+0x7c>
			if (tps56520_set(600)) {
   80622:	f44f 7016 	mov.w	r0, #600	; 0x258
   80626:	47b8      	blx	r7
   80628:	2800      	cmp	r0, #0
   8062a:	d0f5      	beq.n	80618 <main+0x7c>
				if (tps56520_set(1000)) {
   8062c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   80630:	47b8      	blx	r7
   80632:	2800      	cmp	r0, #0
   80634:	d0f0      	beq.n	80618 <main+0x7c>
					TPS_CONNECTED = true;
   80636:	f884 8000 	strb.w	r8, [r4]
   8063a:	e7ed      	b.n	80618 <main+0x7c>
   8063c:	200701d0 	.word	0x200701d0
   80640:	400e1a00 	.word	0x400e1a00
   80644:	20072133 	.word	0x20072133
   80648:	00082f35 	.word	0x00082f35
   8064c:	00085f9d 	.word	0x00085f9d
   80650:	0008caf8 	.word	0x0008caf8
   80654:	0008041d 	.word	0x0008041d
   80658:	00081ae1 	.word	0x00081ae1
   8065c:	00081fa5 	.word	0x00081fa5
   80660:	00082afd 	.word	0x00082afd
   80664:	000808c1 	.word	0x000808c1
   80668:	000822c1 	.word	0x000822c1
   8066c:	00080ed9 	.word	0x00080ed9
   80670:	20072132 	.word	0x20072132
   80674:	00082da5 	.word	0x00082da5

00080678 <ctrl_i2c_setup>:
	I2C_LOCK = 0;
}

void ctrl_i2c_setup(void)
{
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)
   80678:	4a0d      	ldr	r2, [pc, #52]	; (806b0 <ctrl_i2c_setup+0x38>)
   8067a:	88d3      	ldrh	r3, [r2, #6]
   8067c:	8991      	ldrh	r1, [r2, #12]
   8067e:	4299      	cmp	r1, r3
   80680:	d314      	bcc.n	806ac <ctrl_i2c_setup+0x34>
	return;
	
	uint8_t addr_len = udd_g_ctrlreq.req.wLength - 1;
	if ((addr_len > 3) || (addr_len < 1)) {
   80682:	3b02      	subs	r3, #2
   80684:	b2db      	uxtb	r3, r3
   80686:	2b02      	cmp	r3, #2
   80688:	d810      	bhi.n	806ac <ctrl_i2c_setup+0x34>
{
   8068a:	b410      	push	{r4}
		return;
	}
	USER_TWI_PACKET.chip = udd_g_ctrlreq.payload[0];
   8068c:	6894      	ldr	r4, [r2, #8]
   8068e:	4809      	ldr	r0, [pc, #36]	; (806b4 <ctrl_i2c_setup+0x3c>)
   80690:	4622      	mov	r2, r4
   80692:	7824      	ldrb	r4, [r4, #0]
   80694:	4601      	mov	r1, r0
   80696:	7404      	strb	r4, [r0, #16]
	for (uint8_t i = 0; i < addr_len; i++) {
   80698:	1c50      	adds	r0, r2, #1
   8069a:	4403      	add	r3, r0
		USER_TWI_PACKET.addr[i] = udd_g_ctrlreq.payload[i+1];
   8069c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
	for (uint8_t i = 0; i < addr_len; i++) {
   806a0:	429a      	cmp	r2, r3
		USER_TWI_PACKET.addr[i] = udd_g_ctrlreq.payload[i+1];
   806a2:	f801 0b01 	strb.w	r0, [r1], #1
	for (uint8_t i = 0; i < addr_len; i++) {
   806a6:	d1f9      	bne.n	8069c <ctrl_i2c_setup+0x24>
	}
	
	
}
   806a8:	bc10      	pop	{r4}
   806aa:	4770      	bx	lr
   806ac:	4770      	bx	lr
   806ae:	bf00      	nop
   806b0:	2007228c 	.word	0x2007228c
   806b4:	200701f4 	.word	0x200701f4

000806b8 <bergen_setup_out_received>:
bool naeusb_cdc_settings_in(void);
void naeusb_cdc_settings_out(void);

bool bergen_setup_out_received(void)
{
	switch (udd_g_ctrlreq.req.bRequest) {			
   806b8:	4a0d      	ldr	r2, [pc, #52]	; (806f0 <bergen_setup_out_received+0x38>)
   806ba:	7853      	ldrb	r3, [r2, #1]
   806bc:	3b41      	subs	r3, #65	; 0x41
   806be:	2b03      	cmp	r3, #3
   806c0:	d813      	bhi.n	806ea <bergen_setup_out_received+0x32>
   806c2:	e8df f003 	tbb	[pc, r3]
   806c6:	0a0e      	.short	0x0a0e
   806c8:	0206      	.short	0x0206
		case REQ_I2C_SETUP:
			udd_g_ctrlreq.callback = ctrl_i2c_setup;
			return true;
			
		case REQ_I2C_DATA:
			udd_g_ctrlreq.callback = ctrl_i2c_send;
   806ca:	4b0a      	ldr	r3, [pc, #40]	; (806f4 <bergen_setup_out_received+0x3c>)
			return true;
   806cc:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_i2c_send;
   806ce:	6113      	str	r3, [r2, #16]
			return true;
   806d0:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_i2c_setup;
   806d2:	4b09      	ldr	r3, [pc, #36]	; (806f8 <bergen_setup_out_received+0x40>)
			return true;
   806d4:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_i2c_setup;
   806d6:	6113      	str	r3, [r2, #16]
			return true;
   806d8:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_fpga_temp_cb;
   806da:	4b08      	ldr	r3, [pc, #32]	; (806fc <bergen_setup_out_received+0x44>)
			return true;
   806dc:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_fpga_temp_cb;
   806de:	6113      	str	r3, [r2, #16]
			return true;
   806e0:	4770      	bx	lr
			
		case REQ_FPGA_CDC:
			udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   806e2:	4b07      	ldr	r3, [pc, #28]	; (80700 <bergen_setup_out_received+0x48>)
			return true;
   806e4:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   806e6:	6113      	str	r3, [r2, #16]
			return true;
   806e8:	4770      	bx	lr
	switch (udd_g_ctrlreq.req.bRequest) {			
   806ea:	2000      	movs	r0, #0
			break;
	}
	return false;
}
   806ec:	4770      	bx	lr
   806ee:	bf00      	nop
   806f0:	2007228c 	.word	0x2007228c
   806f4:	00080705 	.word	0x00080705
   806f8:	00080679 	.word	0x00080679
   806fc:	00080865 	.word	0x00080865
   80700:	00081b41 	.word	0x00081b41

00080704 <ctrl_i2c_send>:
{
   80704:	b538      	push	{r3, r4, r5, lr}
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size)
   80706:	4b0e      	ldr	r3, [pc, #56]	; (80740 <ctrl_i2c_send+0x3c>)
   80708:	88da      	ldrh	r2, [r3, #6]
   8070a:	8999      	ldrh	r1, [r3, #12]
   8070c:	4291      	cmp	r1, r2
   8070e:	d307      	bcc.n	80720 <ctrl_i2c_send+0x1c>
	if (I2C_LOCK) {
   80710:	4c0c      	ldr	r4, [pc, #48]	; (80744 <ctrl_i2c_send+0x40>)
   80712:	7821      	ldrb	r1, [r4, #0]
   80714:	f001 05ff 	and.w	r5, r1, #255	; 0xff
   80718:	b119      	cbz	r1, 80722 <ctrl_i2c_send+0x1e>
		I2C_STATUS = 1;
   8071a:	2201      	movs	r2, #1
   8071c:	4b0a      	ldr	r3, [pc, #40]	; (80748 <ctrl_i2c_send+0x44>)
   8071e:	701a      	strb	r2, [r3, #0]
}
   80720:	bd38      	pop	{r3, r4, r5, pc}
	USER_TWI_PACKET.buffer = udd_g_ctrlreq.payload;
   80722:	490a      	ldr	r1, [pc, #40]	; (8074c <ctrl_i2c_send+0x48>)
   80724:	689b      	ldr	r3, [r3, #8]
	USER_TWI_PACKET.length = udd_g_ctrlreq.req.wLength;
   80726:	60ca      	str	r2, [r1, #12]
	I2C_LOCK = 1;
   80728:	2201      	movs	r2, #1
	USER_TWI_PACKET.buffer = udd_g_ctrlreq.payload;
   8072a:	608b      	str	r3, [r1, #8]
	I2C_STATUS = twi_master_write(TWI0, &USER_TWI_PACKET);
   8072c:	4808      	ldr	r0, [pc, #32]	; (80750 <ctrl_i2c_send+0x4c>)
   8072e:	4b09      	ldr	r3, [pc, #36]	; (80754 <ctrl_i2c_send+0x50>)
	I2C_LOCK = 1;
   80730:	7022      	strb	r2, [r4, #0]
	I2C_STATUS = twi_master_write(TWI0, &USER_TWI_PACKET);
   80732:	4798      	blx	r3
   80734:	4b04      	ldr	r3, [pc, #16]	; (80748 <ctrl_i2c_send+0x44>)
   80736:	b2c0      	uxtb	r0, r0
   80738:	7018      	strb	r0, [r3, #0]
	I2C_LOCK = 0;
   8073a:	7025      	strb	r5, [r4, #0]
}
   8073c:	bd38      	pop	{r3, r4, r5, pc}
   8073e:	bf00      	nop
   80740:	2007228c 	.word	0x2007228c
   80744:	20072133 	.word	0x20072133
   80748:	20071c9c 	.word	0x20071c9c
   8074c:	200701f4 	.word	0x200701f4
   80750:	4008c000 	.word	0x4008c000
   80754:	00083bc9 	.word	0x00083bc9

00080758 <bergen_setup_in_received>:

bool bergen_setup_in_received(void)
{
   80758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint8_t addr;
	switch (udd_g_ctrlreq.req.bRequest & 0xFF) {
   8075c:	4c37      	ldr	r4, [pc, #220]	; (8083c <bergen_setup_in_received+0xe4>)
   8075e:	7863      	ldrb	r3, [r4, #1]
   80760:	3b41      	subs	r3, #65	; 0x41
   80762:	2b03      	cmp	r3, #3
   80764:	d867      	bhi.n	80836 <bergen_setup_in_received+0xde>
   80766:	e8df f003 	tbb	[pc, r3]
   8076a:	3441      	.short	0x3441
   8076c:	021b      	.short	0x021b
			break;
		
		case REQ_I2C_DATA:
			USER_TWI_PACKET.length = udd_g_ctrlreq.req.wLength;
			USER_TWI_PACKET.buffer = respbuf + 1;
			if (I2C_LOCK) {
   8076e:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80840 <bergen_setup_in_received+0xe8>
			USER_TWI_PACKET.length = udd_g_ctrlreq.req.wLength;
   80772:	4f34      	ldr	r7, [pc, #208]	; (80844 <bergen_setup_in_received+0xec>)
   80774:	88e3      	ldrh	r3, [r4, #6]
			USER_TWI_PACKET.buffer = respbuf + 1;
   80776:	4e34      	ldr	r6, [pc, #208]	; (80848 <bergen_setup_in_received+0xf0>)
			if (I2C_LOCK) {
   80778:	f898 2000 	ldrb.w	r2, [r8]
			USER_TWI_PACKET.buffer = respbuf + 1;
   8077c:	e9c7 6302 	strd	r6, r3, [r7, #8]
			if (I2C_LOCK) {
   80780:	f002 09ff 	and.w	r9, r2, #255	; 0xff
   80784:	2a00      	cmp	r2, #0
   80786:	d035      	beq.n	807f4 <bergen_setup_in_received+0x9c>
				respbuf[0] = 1;
   80788:	2201      	movs	r2, #1
				I2C_STATUS = 1;
   8078a:	4930      	ldr	r1, [pc, #192]	; (8084c <bergen_setup_in_received+0xf4>)
				respbuf[0] = 1;
   8078c:	1e70      	subs	r0, r6, #1
				udd_g_ctrlreq.payload = respbuf;
				udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   8078e:	4413      	add	r3, r2
				respbuf[0] = 1;
   80790:	f806 2c01 	strb.w	r2, [r6, #-1]
				I2C_STATUS = 1;
   80794:	700a      	strb	r2, [r1, #0]
				udd_g_ctrlreq.payload = respbuf;
   80796:	60a0      	str	r0, [r4, #8]
				udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   80798:	81a3      	strh	r3, [r4, #12]
				return true;
   8079a:	4610      	mov	r0, r2
		case REQ_FPGA_CDC:
			return naeusb_cdc_settings_in();
			break;
	}
	return false;
}
   8079c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			respbuf[1] = USER_TWI_PACKET.chip;
   807a0:	4f28      	ldr	r7, [pc, #160]	; (80844 <bergen_setup_in_received+0xec>)
			respbuf[0] = I2C_STATUS;
   807a2:	4b2a      	ldr	r3, [pc, #168]	; (8084c <bergen_setup_in_received+0xf4>)
   807a4:	4e2a      	ldr	r6, [pc, #168]	; (80850 <bergen_setup_in_received+0xf8>)
   807a6:	781a      	ldrb	r2, [r3, #0]
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   807a8:	687d      	ldr	r5, [r7, #4]
			respbuf[1] = USER_TWI_PACKET.chip;
   807aa:	7c3b      	ldrb	r3, [r7, #16]
			respbuf[0] = I2C_STATUS;
   807ac:	7032      	strb	r2, [r6, #0]
			respbuf[1] = USER_TWI_PACKET.chip;
   807ae:	7073      	strb	r3, [r6, #1]
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   807b0:	2d00      	cmp	r5, #0
   807b2:	d03e      	beq.n	80832 <bergen_setup_in_received+0xda>
   807b4:	2300      	movs	r3, #0
   807b6:	1c58      	adds	r0, r3, #1
				respbuf[i + 2] = USER_TWI_PACKET.addr[i];
   807b8:	5cf9      	ldrb	r1, [r7, r3]
   807ba:	18f2      	adds	r2, r6, r3
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   807bc:	b2c3      	uxtb	r3, r0
   807be:	42ab      	cmp	r3, r5
				respbuf[i + 2] = USER_TWI_PACKET.addr[i];
   807c0:	7091      	strb	r1, [r2, #2]
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   807c2:	d3f8      	bcc.n	807b6 <bergen_setup_in_received+0x5e>
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.addr_length + 2;
   807c4:	3502      	adds	r5, #2
   807c6:	b2ad      	uxth	r5, r5
			return true;
   807c8:	2001      	movs	r0, #1
			udd_g_ctrlreq.payload = respbuf;
   807ca:	60a6      	str	r6, [r4, #8]
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.addr_length + 2;
   807cc:	81a5      	strh	r5, [r4, #12]
}
   807ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (I2C_LOCK) {
   807d2:	4b1b      	ldr	r3, [pc, #108]	; (80840 <bergen_setup_in_received+0xe8>)
   807d4:	781b      	ldrb	r3, [r3, #0]
   807d6:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   807da:	b1eb      	cbz	r3, 80818 <bergen_setup_in_received+0xc0>
				respbuf[0] = 1;
   807dc:	2301      	movs	r3, #1
   807de:	4a1c      	ldr	r2, [pc, #112]	; (80850 <bergen_setup_in_received+0xf8>)
				return true;
   807e0:	4618      	mov	r0, r3
				respbuf[0] = 1;
   807e2:	7013      	strb	r3, [r2, #0]
				udd_g_ctrlreq.payload = respbuf;
   807e4:	60a2      	str	r2, [r4, #8]
				udd_g_ctrlreq.payload_size = 1;
   807e6:	81a3      	strh	r3, [r4, #12]
}
   807e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			return naeusb_cdc_settings_in();
   807ec:	4b19      	ldr	r3, [pc, #100]	; (80854 <bergen_setup_in_received+0xfc>)
}
   807ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return naeusb_cdc_settings_in();
   807f2:	4718      	bx	r3
			I2C_LOCK = 1;
   807f4:	2501      	movs	r5, #1
			twi_master_read(TWI0, &USER_TWI_PACKET);
   807f6:	4b18      	ldr	r3, [pc, #96]	; (80858 <bergen_setup_in_received+0x100>)
   807f8:	4639      	mov	r1, r7
   807fa:	4818      	ldr	r0, [pc, #96]	; (8085c <bergen_setup_in_received+0x104>)
			I2C_LOCK = 1;
   807fc:	f888 5000 	strb.w	r5, [r8]
			twi_master_read(TWI0, &USER_TWI_PACKET);
   80800:	4798      	blx	r3
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   80802:	68fb      	ldr	r3, [r7, #12]
			respbuf[0] = 0;
   80804:	f806 9c01 	strb.w	r9, [r6, #-1]
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   80808:	442b      	add	r3, r5
			respbuf[0] = 0;
   8080a:	3e01      	subs	r6, #1
			return true;
   8080c:	4628      	mov	r0, r5
			I2C_LOCK = 0;
   8080e:	f888 9000 	strb.w	r9, [r8]
			udd_g_ctrlreq.payload = respbuf;
   80812:	60a6      	str	r6, [r4, #8]
			udd_g_ctrlreq.payload_size = USER_TWI_PACKET.length + 1;
   80814:	81a3      	strh	r3, [r4, #12]
			return true;
   80816:	e7da      	b.n	807ce <bergen_setup_in_received+0x76>
			max1617_register_read(addr, respbuf + 1);
   80818:	4d0b      	ldr	r5, [pc, #44]	; (80848 <bergen_setup_in_received+0xf0>)
   8081a:	4b11      	ldr	r3, [pc, #68]	; (80860 <bergen_setup_in_received+0x108>)
   8081c:	4629      	mov	r1, r5
   8081e:	78a0      	ldrb	r0, [r4, #2]
   80820:	4798      	blx	r3
			udd_g_ctrlreq.payload_size = 2;
   80822:	2302      	movs	r3, #2
			respbuf[0] = 0;
   80824:	1e6a      	subs	r2, r5, #1
			return true;
   80826:	2001      	movs	r0, #1
			respbuf[0] = 0;
   80828:	f805 6c01 	strb.w	r6, [r5, #-1]
			udd_g_ctrlreq.payload = respbuf;
   8082c:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = 2;
   8082e:	81a3      	strh	r3, [r4, #12]
			return true;
   80830:	e7cd      	b.n	807ce <bergen_setup_in_received+0x76>
			for (uint8_t i = 0; i < USER_TWI_PACKET.addr_length; i++) {
   80832:	2502      	movs	r5, #2
   80834:	e7c8      	b.n	807c8 <bergen_setup_in_received+0x70>
	switch (udd_g_ctrlreq.req.bRequest & 0xFF) {
   80836:	2000      	movs	r0, #0
   80838:	e7c9      	b.n	807ce <bergen_setup_in_received+0x76>
   8083a:	bf00      	nop
   8083c:	2007228c 	.word	0x2007228c
   80840:	20072133 	.word	0x20072133
   80844:	200701f4 	.word	0x200701f4
   80848:	20071a19 	.word	0x20071a19
   8084c:	20071c9c 	.word	0x20071c9c
   80850:	20071a18 	.word	0x20071a18
   80854:	00082051 	.word	0x00082051
   80858:	00083af1 	.word	0x00083af1
   8085c:	4008c000 	.word	0x4008c000
   80860:	000809e1 	.word	0x000809e1

00080864 <ctrl_fpga_temp_cb>:
{
   80864:	b538      	push	{r3, r4, r5, lr}
	if (I2C_LOCK) {
   80866:	4c0b      	ldr	r4, [pc, #44]	; (80894 <ctrl_fpga_temp_cb+0x30>)
   80868:	7823      	ldrb	r3, [r4, #0]
   8086a:	b11b      	cbz	r3, 80874 <ctrl_fpga_temp_cb+0x10>
		I2C_STATUS = 1;
   8086c:	2201      	movs	r2, #1
   8086e:	4b0a      	ldr	r3, [pc, #40]	; (80898 <ctrl_fpga_temp_cb+0x34>)
   80870:	701a      	strb	r2, [r3, #0]
}
   80872:	bd38      	pop	{r3, r4, r5, pc}
	I2C_LOCK = 1;
   80874:	2101      	movs	r1, #1
   80876:	f003 05ff 	and.w	r5, r3, #255	; 0xff
	max1617_register_write(udd_g_ctrlreq.req.wValue & 0xFF, udd_g_ctrlreq.payload[0]);
   8087a:	4b08      	ldr	r3, [pc, #32]	; (8089c <ctrl_fpga_temp_cb+0x38>)
	I2C_LOCK = 1;
   8087c:	7021      	strb	r1, [r4, #0]
	max1617_register_write(udd_g_ctrlreq.req.wValue & 0xFF, udd_g_ctrlreq.payload[0]);
   8087e:	689a      	ldr	r2, [r3, #8]
   80880:	7898      	ldrb	r0, [r3, #2]
   80882:	f992 1000 	ldrsb.w	r1, [r2]
   80886:	4b06      	ldr	r3, [pc, #24]	; (808a0 <ctrl_fpga_temp_cb+0x3c>)
   80888:	4798      	blx	r3
	I2C_STATUS = 0;
   8088a:	4b03      	ldr	r3, [pc, #12]	; (80898 <ctrl_fpga_temp_cb+0x34>)
	I2C_LOCK = 0;
   8088c:	7025      	strb	r5, [r4, #0]
	I2C_STATUS = 0;
   8088e:	701d      	strb	r5, [r3, #0]
}
   80890:	bd38      	pop	{r3, r4, r5, pc}
   80892:	bf00      	nop
   80894:	20072133 	.word	0x20072133
   80898:	20071c9c 	.word	0x20071c9c
   8089c:	2007228c 	.word	0x2007228c
   808a0:	00080a31 	.word	0x00080a31

000808a4 <ui_powerdown>:
}
   808a4:	4770      	bx	lr
   808a6:	bf00      	nop

000808a8 <ui_wakeup>:
   808a8:	4770      	bx	lr
   808aa:	bf00      	nop

000808ac <ui_process>:
	if (!(frame_number % 0x200))
   808ac:	f3c0 0008 	ubfx	r0, r0, #0, #9
   808b0:	b100      	cbz	r0, 808b4 <ui_process+0x8>
}
   808b2:	4770      	bx	lr
		gpio_toggle_pin(PIN_USB_HBEAT);
   808b4:	2003      	movs	r0, #3
   808b6:	4b01      	ldr	r3, [pc, #4]	; (808bc <ui_process+0x10>)
   808b8:	4718      	bx	r3
   808ba:	bf00      	nop
   808bc:	00083781 	.word	0x00083781

000808c0 <bergen_register_handlers>:

void bergen_register_handlers(void)
{
   808c0:	b510      	push	{r4, lr}
	naeusb_add_in_handler(bergen_setup_in_received);
   808c2:	4b04      	ldr	r3, [pc, #16]	; (808d4 <bergen_register_handlers+0x14>)
   808c4:	4804      	ldr	r0, [pc, #16]	; (808d8 <bergen_register_handlers+0x18>)
   808c6:	4798      	blx	r3
	naeusb_add_out_handler(bergen_setup_out_received);
   808c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	naeusb_add_out_handler(bergen_setup_out_received);
   808cc:	4803      	ldr	r0, [pc, #12]	; (808dc <bergen_register_handlers+0x1c>)
   808ce:	4b04      	ldr	r3, [pc, #16]	; (808e0 <bergen_register_handlers+0x20>)
   808d0:	4718      	bx	r3
   808d2:	bf00      	nop
   808d4:	00081819 	.word	0x00081819
   808d8:	00080759 	.word	0x00080759
   808dc:	000806b9 	.word	0x000806b9
   808e0:	00081841 	.word	0x00081841

000808e4 <pgood_alert_handler>:
	// 	}
	// }
}

void pgood_alert_handler(const uint32_t id, const uint32_t index)
{
   808e4:	b510      	push	{r4, lr}
	if (pio_get(PIOC, PIO_INPUT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN) != (PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN) || 
   808e6:	f44f 12c8 	mov.w	r2, #1638400	; 0x190000
   808ea:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   808ee:	480a      	ldr	r0, [pc, #40]	; (80918 <pgood_alert_handler+0x34>)
   808f0:	4c0a      	ldr	r4, [pc, #40]	; (8091c <pgood_alert_handler+0x38>)
   808f2:	47a0      	blx	r4
   808f4:	f5b0 1fc8 	cmp.w	r0, #1638400	; 0x190000
   808f8:	d005      	beq.n	80906 <pgood_alert_handler+0x22>
		!pio_get(PIOB, PIO_INPUT, PIN_PGOOD_3V3_PIN))
		if (power_toggles++ > 5) {
   808fa:	4a09      	ldr	r2, [pc, #36]	; (80920 <pgood_alert_handler+0x3c>)
   808fc:	7813      	ldrb	r3, [r2, #0]
   808fe:	3301      	adds	r3, #1
   80900:	b2db      	uxtb	r3, r3
   80902:	7013      	strb	r3, [r2, #0]
			//kill_fpga_power(); //lots of glitching on PIO?
		}
   80904:	bd10      	pop	{r4, pc}
		!pio_get(PIOB, PIO_INPUT, PIN_PGOOD_3V3_PIN))
   80906:	f44f 6200 	mov.w	r2, #2048	; 0x800
   8090a:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   8090e:	4805      	ldr	r0, [pc, #20]	; (80924 <pgood_alert_handler+0x40>)
   80910:	47a0      	blx	r4
	if (pio_get(PIOC, PIO_INPUT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN) != (PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN) || 
   80912:	2800      	cmp	r0, #0
   80914:	d0f1      	beq.n	808fa <pgood_alert_handler+0x16>
   80916:	bd10      	pop	{r4, pc}
   80918:	400e1200 	.word	0x400e1200
   8091c:	000836e1 	.word	0x000836e1
   80920:	200714fd 	.word	0x200714fd
   80924:	400e1000 	.word	0x400e1000

00080928 <fpga_power_reset_handler>:
{
   80928:	b538      	push	{r3, r4, r5, lr}
	if (!pio_get(PIOB, PIO_INPUT, PIN_FPGA_POWER_RESET_PIN)) {
   8092a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   8092e:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80932:	480d      	ldr	r0, [pc, #52]	; (80968 <fpga_power_reset_handler+0x40>)
   80934:	4b0d      	ldr	r3, [pc, #52]	; (8096c <fpga_power_reset_handler+0x44>)
   80936:	4798      	blx	r3
   80938:	b958      	cbnz	r0, 80952 <fpga_power_reset_handler+0x2a>
   8093a:	4604      	mov	r4, r0
		power_killed = false;
   8093c:	4d0c      	ldr	r5, [pc, #48]	; (80970 <fpga_power_reset_handler+0x48>)
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   8093e:	203b      	movs	r0, #59	; 0x3b
   80940:	4b0c      	ldr	r3, [pc, #48]	; (80974 <fpga_power_reset_handler+0x4c>)
		power_killed = false;
   80942:	702c      	strb	r4, [r5, #0]
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   80944:	4798      	blx	r3
	fpga_pins(false);
   80946:	4b0c      	ldr	r3, [pc, #48]	; (80978 <fpga_power_reset_handler+0x50>)
   80948:	4620      	mov	r0, r4
   8094a:	4798      	blx	r3
	power_killed = true;
   8094c:	2301      	movs	r3, #1
   8094e:	702b      	strb	r3, [r5, #0]
}
   80950:	bd38      	pop	{r3, r4, r5, pc}
	gpio_set_pin_high(PIN_FPGA_PWR_ENABLE);
   80952:	203b      	movs	r0, #59	; 0x3b
   80954:	4b09      	ldr	r3, [pc, #36]	; (8097c <fpga_power_reset_handler+0x54>)
   80956:	4798      	blx	r3
	fpga_pins(true);
   80958:	4b07      	ldr	r3, [pc, #28]	; (80978 <fpga_power_reset_handler+0x50>)
   8095a:	2001      	movs	r0, #1
   8095c:	4798      	blx	r3
	power_killed = false;
   8095e:	2200      	movs	r2, #0
   80960:	4b03      	ldr	r3, [pc, #12]	; (80970 <fpga_power_reset_handler+0x48>)
   80962:	701a      	strb	r2, [r3, #0]
}
   80964:	bd38      	pop	{r3, r4, r5, pc}
   80966:	bf00      	nop
   80968:	400e1000 	.word	0x400e1000
   8096c:	000836e1 	.word	0x000836e1
   80970:	200714fc 	.word	0x200714fc
   80974:	00083765 	.word	0x00083765
   80978:	00080279 	.word	0x00080279
   8097c:	00083749 	.word	0x00083749

00080980 <max1617_alert_handler>:
	if ((id == ID_PIOA) && (index == PIO_PA16) && (!pio_get(PIOA, PIO_INPUT, PIO_PA16))) {
   80980:	280b      	cmp	r0, #11
   80982:	d000      	beq.n	80986 <max1617_alert_handler+0x6>
   80984:	4770      	bx	lr
   80986:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
   8098a:	d1fb      	bne.n	80984 <max1617_alert_handler+0x4>
   8098c:	460a      	mov	r2, r1
{
   8098e:	b570      	push	{r4, r5, r6, lr}
	if ((id == ID_PIOA) && (index == PIO_PA16) && (!pio_get(PIOA, PIO_INPUT, PIO_PA16))) {
   80990:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80994:	4808      	ldr	r0, [pc, #32]	; (809b8 <max1617_alert_handler+0x38>)
   80996:	4b09      	ldr	r3, [pc, #36]	; (809bc <max1617_alert_handler+0x3c>)
   80998:	4798      	blx	r3
   8099a:	4604      	mov	r4, r0
   8099c:	b100      	cbz	r0, 809a0 <max1617_alert_handler+0x20>
}
   8099e:	bd70      	pop	{r4, r5, r6, pc}
			power_killed = true;
   809a0:	2601      	movs	r6, #1
   809a2:	4d07      	ldr	r5, [pc, #28]	; (809c0 <max1617_alert_handler+0x40>)
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   809a4:	203b      	movs	r0, #59	; 0x3b
   809a6:	4b07      	ldr	r3, [pc, #28]	; (809c4 <max1617_alert_handler+0x44>)
			power_killed = true;
   809a8:	702e      	strb	r6, [r5, #0]
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   809aa:	4798      	blx	r3
	fpga_pins(false);
   809ac:	4620      	mov	r0, r4
   809ae:	4b06      	ldr	r3, [pc, #24]	; (809c8 <max1617_alert_handler+0x48>)
   809b0:	4798      	blx	r3
	power_killed = true;
   809b2:	702e      	strb	r6, [r5, #0]
}
   809b4:	bd70      	pop	{r4, r5, r6, pc}
   809b6:	bf00      	nop
   809b8:	400e0e00 	.word	0x400e0e00
   809bc:	000836e1 	.word	0x000836e1
   809c0:	200714fc 	.word	0x200714fc
   809c4:	00083765 	.word	0x00083765
   809c8:	00080279 	.word	0x00080279

000809cc <enable_switched_power>:
{
   809cc:	b508      	push	{r3, lr}
	gpio_configure_pin(PIN_SAM_SWITCHED_PWR_ENABLE, PIN_SAM_SWITCHED_PWR_ENABLE_FLAGS);
   809ce:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   809d2:	4b02      	ldr	r3, [pc, #8]	; (809dc <enable_switched_power+0x10>)
   809d4:	2004      	movs	r0, #4
   809d6:	4798      	blx	r3
}
   809d8:	2000      	movs	r0, #0
   809da:	bd08      	pop	{r3, pc}
   809dc:	000837a5 	.word	0x000837a5

000809e0 <max1617_register_read>:
{
   809e0:	b530      	push	{r4, r5, lr}
	twi_package_t max_packet = {
   809e2:	f04f 0c00 	mov.w	ip, #0
   809e6:	2301      	movs	r3, #1
   809e8:	f04f 0e18 	mov.w	lr, #24
	if (I2C_LOCK) {
   809ec:	4c0d      	ldr	r4, [pc, #52]	; (80a24 <max1617_register_read+0x44>)
{
   809ee:	b087      	sub	sp, #28
	if (I2C_LOCK) {
   809f0:	7822      	ldrb	r2, [r4, #0]
	twi_package_t max_packet = {
   809f2:	f88d c005 	strb.w	ip, [sp, #5]
   809f6:	f88d c006 	strb.w	ip, [sp, #6]
   809fa:	9103      	str	r1, [sp, #12]
   809fc:	f88d e014 	strb.w	lr, [sp, #20]
   80a00:	f88d 0004 	strb.w	r0, [sp, #4]
   80a04:	9302      	str	r3, [sp, #8]
   80a06:	9304      	str	r3, [sp, #16]
	if (I2C_LOCK) {
   80a08:	b94a      	cbnz	r2, 80a1e <max1617_register_read+0x3e>
	I2C_LOCK = 1;
   80a0a:	f002 05ff 	and.w	r5, r2, #255	; 0xff
	int rtn = twi_master_read(MAX1617_I2C, &max_packet);
   80a0e:	4806      	ldr	r0, [pc, #24]	; (80a28 <max1617_register_read+0x48>)
   80a10:	4a06      	ldr	r2, [pc, #24]	; (80a2c <max1617_register_read+0x4c>)
   80a12:	a901      	add	r1, sp, #4
	I2C_LOCK = 1;
   80a14:	7023      	strb	r3, [r4, #0]
	int rtn = twi_master_read(MAX1617_I2C, &max_packet);
   80a16:	4790      	blx	r2
	I2C_LOCK = 0;
   80a18:	7025      	strb	r5, [r4, #0]
}
   80a1a:	b007      	add	sp, #28
   80a1c:	bd30      	pop	{r4, r5, pc}
		return -1;
   80a1e:	f04f 30ff 	mov.w	r0, #4294967295
   80a22:	e7fa      	b.n	80a1a <max1617_register_read+0x3a>
   80a24:	20072133 	.word	0x20072133
   80a28:	4008c000 	.word	0x4008c000
   80a2c:	00083af1 	.word	0x00083af1

00080a30 <max1617_register_write>:
{
   80a30:	b530      	push	{r4, r5, lr}
	twi_package_t max_packet = {
   80a32:	f04f 0c00 	mov.w	ip, #0
   80a36:	2301      	movs	r3, #1
   80a38:	f04f 0e18 	mov.w	lr, #24
{
   80a3c:	b089      	sub	sp, #36	; 0x24
	if (I2C_LOCK) {
   80a3e:	4c0f      	ldr	r4, [pc, #60]	; (80a7c <max1617_register_write+0x4c>)
	twi_package_t max_packet = {
   80a40:	f10d 0207 	add.w	r2, sp, #7
   80a44:	9205      	str	r2, [sp, #20]
	if (I2C_LOCK) {
   80a46:	7822      	ldrb	r2, [r4, #0]
	twi_package_t max_packet = {
   80a48:	f88d c00d 	strb.w	ip, [sp, #13]
   80a4c:	f88d c00e 	strb.w	ip, [sp, #14]
   80a50:	f88d e01c 	strb.w	lr, [sp, #28]
{
   80a54:	f88d 1007 	strb.w	r1, [sp, #7]
	twi_package_t max_packet = {
   80a58:	f88d 000c 	strb.w	r0, [sp, #12]
   80a5c:	9304      	str	r3, [sp, #16]
   80a5e:	9306      	str	r3, [sp, #24]
	if (I2C_LOCK) {
   80a60:	b94a      	cbnz	r2, 80a76 <max1617_register_write+0x46>
	I2C_LOCK = 1;
   80a62:	f002 05ff 	and.w	r5, r2, #255	; 0xff
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80a66:	4806      	ldr	r0, [pc, #24]	; (80a80 <max1617_register_write+0x50>)
   80a68:	4a06      	ldr	r2, [pc, #24]	; (80a84 <max1617_register_write+0x54>)
   80a6a:	a903      	add	r1, sp, #12
	I2C_LOCK = 1;
   80a6c:	7023      	strb	r3, [r4, #0]
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80a6e:	4790      	blx	r2
	I2C_LOCK = 0;
   80a70:	7025      	strb	r5, [r4, #0]
}
   80a72:	b009      	add	sp, #36	; 0x24
   80a74:	bd30      	pop	{r4, r5, pc}
		return -1;
   80a76:	f04f 30ff 	mov.w	r0, #4294967295
   80a7a:	e7fa      	b.n	80a72 <max1617_register_write+0x42>
   80a7c:	20072133 	.word	0x20072133
   80a80:	4008c000 	.word	0x4008c000
   80a84:	00083bc9 	.word	0x00083bc9

00080a88 <power_init>:
{
   80a88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	pmc_enable_periph_clk(ID_PIOC);
   80a8c:	200d      	movs	r0, #13
{
   80a8e:	b083      	sub	sp, #12
	pio_configure_pin_group(PIN_PGOOD_VCCINT_PORT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80a90:	4d1f      	ldr	r5, [pc, #124]	; (80b10 <power_init+0x88>)
	pmc_enable_periph_clk(ID_PIOC);
   80a92:	4c20      	ldr	r4, [pc, #128]	; (80b14 <power_init+0x8c>)
	pio_configure_pin_group(PIN_PGOOD_VCCINT_PORT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80a94:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80b18 <power_init+0x90>
	pmc_enable_periph_clk(ID_PIOC);
   80a98:	47a0      	blx	r4
	pio_handler_set(PIN_PGOOD_VCCINT_PORT, ID_PIOC, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIO_IT_FALL_EDGE, pgood_alert_handler);
   80a9a:	4f20      	ldr	r7, [pc, #128]	; (80b1c <power_init+0x94>)
	pmc_enable_periph_clk(ID_PIOB);
   80a9c:	200c      	movs	r0, #12
   80a9e:	47a0      	blx	r4
	pio_configure_pin_group(PIN_PGOOD_VCCINT_PORT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80aa0:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80b20 <power_init+0x98>
   80aa4:	464a      	mov	r2, r9
   80aa6:	f44f 11c8 	mov.w	r1, #1638400	; 0x190000
   80aaa:	4628      	mov	r0, r5
   80aac:	47c0      	blx	r8
	pio_configure_pin_group(PIN_PGOOD_3V3_PORT, PIN_PGOOD_3V3_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80aae:	4c1d      	ldr	r4, [pc, #116]	; (80b24 <power_init+0x9c>)
	pio_handler_set(PIN_PGOOD_VCCINT_PORT, ID_PIOC, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN, PIO_IT_FALL_EDGE, pgood_alert_handler);
   80ab0:	2350      	movs	r3, #80	; 0x50
   80ab2:	f44f 12c8 	mov.w	r2, #1638400	; 0x190000
   80ab6:	4e1c      	ldr	r6, [pc, #112]	; (80b28 <power_init+0xa0>)
   80ab8:	210d      	movs	r1, #13
   80aba:	4628      	mov	r0, r5
   80abc:	9700      	str	r7, [sp, #0]
   80abe:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PGOOD_VCCINT_PORT, PIN_PGOOD_VCCINT_PIN | PIN_PGOOD_1V2_PIN | PIN_PGOOD_1V8_PIN);
   80ac0:	4628      	mov	r0, r5
   80ac2:	f44f 11c8 	mov.w	r1, #1638400	; 0x190000
   80ac6:	4d19      	ldr	r5, [pc, #100]	; (80b2c <power_init+0xa4>)
   80ac8:	47a8      	blx	r5
	pio_configure_pin_group(PIN_PGOOD_3V3_PORT, PIN_PGOOD_3V3_PIN, PIN_PGOOD_VCCINT_FLAGS);
   80aca:	464a      	mov	r2, r9
   80acc:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80ad0:	4620      	mov	r0, r4
   80ad2:	47c0      	blx	r8
	pio_handler_set(PIN_PGOOD_3V3_PORT, ID_PIOB, PIN_PGOOD_3V3_PIN, PIO_IT_FALL_EDGE, pgood_alert_handler);
   80ad4:	2350      	movs	r3, #80	; 0x50
   80ad6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   80ada:	210c      	movs	r1, #12
   80adc:	4620      	mov	r0, r4
   80ade:	9700      	str	r7, [sp, #0]
   80ae0:	47b0      	blx	r6
	pio_enable_interrupt(PIN_PGOOD_3V3_PORT, PIN_PGOOD_3V3_PIN);
   80ae2:	f44f 6100 	mov.w	r1, #2048	; 0x800
   80ae6:	4620      	mov	r0, r4
   80ae8:	47a8      	blx	r5
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80aea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   80aee:	4b10      	ldr	r3, [pc, #64]	; (80b30 <power_init+0xa8>)
   80af0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   80af4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   80af8:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   80afc:	2190      	movs	r1, #144	; 0x90
}
   80afe:	2000      	movs	r0, #0
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80b00:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   80b04:	f883 130d 	strb.w	r1, [r3, #781]	; 0x30d
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80b08:	601a      	str	r2, [r3, #0]
   80b0a:	b003      	add	sp, #12
   80b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80b10:	400e1200 	.word	0x400e1200
   80b14:	00083599 	.word	0x00083599
   80b18:	2800000a 	.word	0x2800000a
   80b1c:	000808e5 	.word	0x000808e5
   80b20:	0008389d 	.word	0x0008389d
   80b24:	400e1000 	.word	0x400e1000
   80b28:	000832cd 	.word	0x000832cd
   80b2c:	00083721 	.word	0x00083721
   80b30:	e000e100 	.word	0xe000e100

00080b34 <thermals_init>:
{	
   80b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80b38:	2007      	movs	r0, #7
	twi_package_t max_packet = {
   80b3a:	2601      	movs	r6, #1
   80b3c:	210a      	movs	r1, #10
   80b3e:	2200      	movs	r2, #0
   80b40:	f04f 0818 	mov.w	r8, #24
{	
   80b44:	b089      	sub	sp, #36	; 0x24
	if (I2C_LOCK) {
   80b46:	4f3d      	ldr	r7, [pc, #244]	; (80c3c <thermals_init+0x108>)
	twi_package_t max_packet = {
   80b48:	f10d 030b 	add.w	r3, sp, #11
   80b4c:	9305      	str	r3, [sp, #20]
	if (I2C_LOCK) {
   80b4e:	783b      	ldrb	r3, [r7, #0]
	twi_package_t max_packet = {
   80b50:	9604      	str	r6, [sp, #16]
   80b52:	f88d 000b 	strb.w	r0, [sp, #11]
   80b56:	f8ad 100c 	strh.w	r1, [sp, #12]
   80b5a:	f88d 200e 	strb.w	r2, [sp, #14]
   80b5e:	9606      	str	r6, [sp, #24]
   80b60:	f88d 801c 	strb.w	r8, [sp, #28]
	if (I2C_LOCK) {
   80b64:	2b00      	cmp	r3, #0
   80b66:	d166      	bne.n	80c36 <thermals_init+0x102>
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80b68:	4835      	ldr	r0, [pc, #212]	; (80c40 <thermals_init+0x10c>)
   80b6a:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 80c44 <thermals_init+0x110>
   80b6e:	a903      	add	r1, sp, #12
   80b70:	f003 05ff 	and.w	r5, r3, #255	; 0xff
	I2C_LOCK = 1;
   80b74:	703e      	strb	r6, [r7, #0]
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80b76:	47c8      	blx	r9
	I2C_LOCK = 0;
   80b78:	703d      	strb	r5, [r7, #0]
	if (rtn != TWI_SUCCESS)
   80b7a:	4604      	mov	r4, r0
   80b7c:	b118      	cbz	r0, 80b86 <thermals_init+0x52>
}
   80b7e:	4620      	mov	r0, r4
   80b80:	b009      	add	sp, #36	; 0x24
   80b82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	twi_package_t max_packet = {
   80b86:	f10d 030b 	add.w	r3, sp, #11
   80b8a:	e9cd 6304 	strd	r6, r3, [sp, #16]
   80b8e:	f88d 801c 	strb.w	r8, [sp, #28]
   80b92:	230d      	movs	r3, #13
   80b94:	f04f 0850 	mov.w	r8, #80	; 0x50
	if (I2C_LOCK) {
   80b98:	783a      	ldrb	r2, [r7, #0]
	twi_package_t max_packet = {
   80b9a:	f88d 000e 	strb.w	r0, [sp, #14]
   80b9e:	9606      	str	r6, [sp, #24]
   80ba0:	f8ad 300c 	strh.w	r3, [sp, #12]
   80ba4:	f88d 800b 	strb.w	r8, [sp, #11]
	if (I2C_LOCK) {
   80ba8:	f002 05ff 	and.w	r5, r2, #255	; 0xff
   80bac:	2a00      	cmp	r2, #0
   80bae:	d142      	bne.n	80c36 <thermals_init+0x102>
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80bb0:	4823      	ldr	r0, [pc, #140]	; (80c40 <thermals_init+0x10c>)
   80bb2:	a903      	add	r1, sp, #12
	I2C_LOCK = 1;
   80bb4:	703e      	strb	r6, [r7, #0]
	int rtn = twi_master_write(MAX1617_I2C, &max_packet);
   80bb6:	47c8      	blx	r9
	I2C_LOCK = 0;
   80bb8:	703d      	strb	r5, [r7, #0]
	if (rtn != TWI_SUCCESS)
   80bba:	4604      	mov	r4, r0
   80bbc:	2800      	cmp	r0, #0
   80bbe:	d1de      	bne.n	80b7e <thermals_init+0x4a>
	gpio_configure_pin(PIN_TEMP_ALERT, PIN_TEMP_ALERT_FLAGS);
   80bc0:	4d21      	ldr	r5, [pc, #132]	; (80c48 <thermals_init+0x114>)
   80bc2:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   80bc6:	2017      	movs	r0, #23
   80bc8:	47a8      	blx	r5
	pio_handler_set(PIN_TEMP_ALERT_PORT, ID_PIOA, PIN_TEMP_ALERT_PIN, PIO_IT_FALL_EDGE, max1617_alert_handler);
   80bca:	4a20      	ldr	r2, [pc, #128]	; (80c4c <thermals_init+0x118>)
   80bcc:	4643      	mov	r3, r8
   80bce:	9200      	str	r2, [sp, #0]
   80bd0:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80c50 <thermals_init+0x11c>
   80bd4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80bd8:	210b      	movs	r1, #11
   80bda:	481e      	ldr	r0, [pc, #120]	; (80c54 <thermals_init+0x120>)
   80bdc:	47c0      	blx	r8
	pio_enable_interrupt(PIOA, PIN_TEMP_ALERT_PIN);
   80bde:	4f1e      	ldr	r7, [pc, #120]	; (80c58 <thermals_init+0x124>)
   80be0:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   80be4:	481b      	ldr	r0, [pc, #108]	; (80c54 <thermals_init+0x120>)
   80be6:	47b8      	blx	r7
	gpio_configure_pin(PIN_FPGA_POWER_RESET, PIN_FPGA_POWER_RESET_FLAGS);
   80be8:	491c      	ldr	r1, [pc, #112]	; (80c5c <thermals_init+0x128>)
   80bea:	2037      	movs	r0, #55	; 0x37
   80bec:	47a8      	blx	r5
	pio_handler_set(PIN_FPGA_POWER_RESET_PORT, ID_PIOB, PIN_FPGA_POWER_RESET_PIN, 0, fpga_power_reset_handler);
   80bee:	4b1c      	ldr	r3, [pc, #112]	; (80c60 <thermals_init+0x12c>)
   80bf0:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   80bf4:	9300      	str	r3, [sp, #0]
   80bf6:	210c      	movs	r1, #12
   80bf8:	4623      	mov	r3, r4
   80bfa:	481a      	ldr	r0, [pc, #104]	; (80c64 <thermals_init+0x130>)
   80bfc:	47c0      	blx	r8
	pio_enable_interrupt(PIOB, PIN_FPGA_POWER_RESET_PIN);
   80bfe:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   80c02:	4818      	ldr	r0, [pc, #96]	; (80c64 <thermals_init+0x130>)
   80c04:	47b8      	blx	r7
   80c06:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   80c0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
	gpio_configure_pin(PIN_TEMP_ERR_LED, PIN_TEMP_ERR_LED_FLAGS);
   80c0e:	4620      	mov	r0, r4
	return 0x01;
   80c10:	4634      	mov	r4, r6
   80c12:	4b15      	ldr	r3, [pc, #84]	; (80c68 <thermals_init+0x134>)
   80c14:	6019      	str	r1, [r3, #0]
   80c16:	601a      	str	r2, [r3, #0]
	gpio_configure_pin(PIN_TEMP_ERR_LED, PIN_TEMP_ERR_LED_FLAGS);
   80c18:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80c1c:	47a8      	blx	r5
	gpio_configure_pin(PIN_TEMP_OK_LED, PIN_TEMP_OK_LED_FLAGS);
   80c1e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80c22:	4630      	mov	r0, r6
   80c24:	47a8      	blx	r5
	gpio_configure_pin(PIN_FPGA_PWR_ENABLE, PIN_FPGA_PWR_ENABLE_FLAGS);
   80c26:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   80c2a:	203b      	movs	r0, #59	; 0x3b
   80c2c:	47a8      	blx	r5
}
   80c2e:	4620      	mov	r0, r4
   80c30:	b009      	add	sp, #36	; 0x24
   80c32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -1;
   80c36:	f04f 34ff 	mov.w	r4, #4294967295
   80c3a:	e7a0      	b.n	80b7e <thermals_init+0x4a>
   80c3c:	20072133 	.word	0x20072133
   80c40:	4008c000 	.word	0x4008c000
   80c44:	00083bc9 	.word	0x00083bc9
   80c48:	000837a5 	.word	0x000837a5
   80c4c:	00080981 	.word	0x00080981
   80c50:	000832cd 	.word	0x000832cd
   80c54:	400e0e00 	.word	0x400e0e00
   80c58:	00083721 	.word	0x00083721
   80c5c:	2800000b 	.word	0x2800000b
   80c60:	00080929 	.word	0x00080929
   80c64:	400e1000 	.word	0x400e1000
   80c68:	e000e100 	.word	0xe000e100

00080c6c <thermals_slow_tick>:
{
   80c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	twi_package_t max_packet = {
   80c6e:	2218      	movs	r2, #24
   80c70:	2501      	movs	r5, #1
	int8_t temp = 0;
   80c72:	2400      	movs	r4, #0
{
   80c74:	b087      	sub	sp, #28
	if (I2C_LOCK) {
   80c76:	4e49      	ldr	r6, [pc, #292]	; (80d9c <thermals_slow_tick+0x130>)
	twi_package_t max_packet = {
   80c78:	f10d 0303 	add.w	r3, sp, #3
   80c7c:	9303      	str	r3, [sp, #12]
	if (I2C_LOCK) {
   80c7e:	7833      	ldrb	r3, [r6, #0]
	twi_package_t max_packet = {
   80c80:	f8ad 5004 	strh.w	r5, [sp, #4]
	int8_t temp = 0;
   80c84:	f88d 4003 	strb.w	r4, [sp, #3]
	twi_package_t max_packet = {
   80c88:	f88d 4006 	strb.w	r4, [sp, #6]
   80c8c:	9502      	str	r5, [sp, #8]
   80c8e:	9504      	str	r5, [sp, #16]
   80c90:	f88d 2014 	strb.w	r2, [sp, #20]
	if (I2C_LOCK) {
   80c94:	2b00      	cmp	r3, #0
   80c96:	d140      	bne.n	80d1a <thermals_slow_tick+0xae>
	I2C_LOCK = 1;
   80c98:	f003 07ff 	and.w	r7, r3, #255	; 0xff
	int rtn = twi_master_read(MAX1617_I2C, &max_packet);
   80c9c:	4840      	ldr	r0, [pc, #256]	; (80da0 <thermals_slow_tick+0x134>)
   80c9e:	4b41      	ldr	r3, [pc, #260]	; (80da4 <thermals_slow_tick+0x138>)
   80ca0:	a901      	add	r1, sp, #4
	I2C_LOCK = 1;
   80ca2:	7035      	strb	r5, [r6, #0]
	int rtn = twi_master_read(MAX1617_I2C, &max_packet);
   80ca4:	4798      	blx	r3
	return temp;
   80ca6:	f99d 4003 	ldrsb.w	r4, [sp, #3]
	I2C_LOCK = 0;
   80caa:	7037      	strb	r7, [r6, #0]
	if (fpga_temp == 0){
   80cac:	2c00      	cmp	r4, #0
   80cae:	d034      	beq.n	80d1a <thermals_slow_tick+0xae>
	if (fpga_temp >= MAX1617_KILL_TEMP) {
   80cb0:	2c40      	cmp	r4, #64	; 0x40
   80cb2:	dc64      	bgt.n	80d7e <thermals_slow_tick+0x112>
	} else if (fpga_temp >= MAX1617_MAX_TEMP) {
   80cb4:	2c36      	cmp	r4, #54	; 0x36
   80cb6:	dd41      	ble.n	80d3c <thermals_slow_tick+0xd0>
		if (!power_killed) {
   80cb8:	4a3b      	ldr	r2, [pc, #236]	; (80da8 <thermals_slow_tick+0x13c>)
		gpio_set_pin_low(PIN_TEMP_OK_LED);
   80cba:	4628      	mov	r0, r5
   80cbc:	4b3b      	ldr	r3, [pc, #236]	; (80dac <thermals_slow_tick+0x140>)
		if (!power_killed) {
   80cbe:	7812      	ldrb	r2, [r2, #0]
		gpio_set_pin_low(PIN_TEMP_OK_LED);
   80cc0:	4798      	blx	r3
		gpio_set_pin_high(PIN_TEMP_ERR_LED);
   80cc2:	4638      	mov	r0, r7
   80cc4:	4b3a      	ldr	r3, [pc, #232]	; (80db0 <thermals_slow_tick+0x144>)
   80cc6:	4798      	blx	r3
	fpga_temp = min(MAX1617_FULL_FAN_TEMP, fpga_temp);
   80cc8:	2c32      	cmp	r4, #50	; 0x32
   80cca:	bfa8      	it	ge
   80ccc:	2432      	movge	r4, #50	; 0x32
	fpga_temp = max(MAX1617_OFF_FAN_TEMP, fpga_temp);
   80cce:	2c23      	cmp	r4, #35	; 0x23
   80cd0:	bfb8      	it	lt
   80cd2:	2423      	movlt	r4, #35	; 0x23
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80cd4:	2064      	movs	r0, #100	; 0x64
	unsigned int fan_pwm = fpga_temp - MAX1617_OFF_FAN_TEMP;
   80cd6:	3c23      	subs	r4, #35	; 0x23
   80cd8:	b264      	sxtb	r4, r4
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80cda:	fb00 f404 	mul.w	r4, r0, r4
   80cde:	4935      	ldr	r1, [pc, #212]	; (80db4 <thermals_slow_tick+0x148>)
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   80ce0:	f44f 7224 	mov.w	r2, #656	; 0x290
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80ce4:	fba1 1404 	umull	r1, r4, r1, r4
   80ce8:	08e4      	lsrs	r4, r4, #3
	fan_pwm = min(99, fan_pwm);
   80cea:	2c63      	cmp	r4, #99	; 0x63
   80cec:	bf28      	it	cs
   80cee:	2463      	movcs	r4, #99	; 0x63
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   80cf0:	1b04      	subs	r4, r0, r4
   80cf2:	fb02 f404 	mul.w	r4, r2, r4
   80cf6:	4b30      	ldr	r3, [pc, #192]	; (80db8 <thermals_slow_tick+0x14c>)
   80cf8:	fba3 3404 	umull	r3, r4, r3, r4
   80cfc:	0964      	lsrs	r4, r4, #5
	tc_write_rc(TC0, FAN_PWM_TIMER_CHANNEL, rc);
   80cfe:	2100      	movs	r1, #0
   80d00:	f44f 7224 	mov.w	r2, #656	; 0x290
   80d04:	482d      	ldr	r0, [pc, #180]	; (80dbc <thermals_slow_tick+0x150>)
   80d06:	4b2e      	ldr	r3, [pc, #184]	; (80dc0 <thermals_slow_tick+0x154>)
   80d08:	4798      	blx	r3
	tc_write_ra(TC0, FAN_PWM_TIMER_CHANNEL, ra);
   80d0a:	4622      	mov	r2, r4
   80d0c:	2100      	movs	r1, #0
   80d0e:	482b      	ldr	r0, [pc, #172]	; (80dbc <thermals_slow_tick+0x150>)
   80d10:	4b2c      	ldr	r3, [pc, #176]	; (80dc4 <thermals_slow_tick+0x158>)
   80d12:	4798      	blx	r3
}
   80d14:	2000      	movs	r0, #0
   80d16:	b007      	add	sp, #28
   80d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		gpio_set_pin_high(PIN_TEMP_OK_LED);
   80d1a:	4628      	mov	r0, r5
   80d1c:	4b24      	ldr	r3, [pc, #144]	; (80db0 <thermals_slow_tick+0x144>)
   80d1e:	4798      	blx	r3
		gpio_set_pin_low(PIN_TEMP_ERR_LED);
   80d20:	4620      	mov	r0, r4
   80d22:	4b22      	ldr	r3, [pc, #136]	; (80dac <thermals_slow_tick+0x140>)
   80d24:	4798      	blx	r3
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   80d26:	f44f 7224 	mov.w	r2, #656	; 0x290
   80d2a:	f1c4 0464 	rsb	r4, r4, #100	; 0x64
   80d2e:	fb02 f404 	mul.w	r4, r2, r4
   80d32:	4b21      	ldr	r3, [pc, #132]	; (80db8 <thermals_slow_tick+0x14c>)
   80d34:	fba3 3404 	umull	r3, r4, r3, r4
   80d38:	0964      	lsrs	r4, r4, #5
   80d3a:	e7e0      	b.n	80cfe <thermals_slow_tick+0x92>
	fpga_temp = max(MAX1617_OFF_FAN_TEMP, fpga_temp);
   80d3c:	2c32      	cmp	r4, #50	; 0x32
   80d3e:	bfa8      	it	ge
   80d40:	2432      	movge	r4, #50	; 0x32
   80d42:	2c23      	cmp	r4, #35	; 0x23
   80d44:	bfb8      	it	lt
   80d46:	2423      	movlt	r4, #35	; 0x23
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80d48:	2164      	movs	r1, #100	; 0x64
		gpio_set_pin_high(PIN_TEMP_OK_LED);
   80d4a:	4628      	mov	r0, r5
	unsigned int fan_pwm = fpga_temp - MAX1617_OFF_FAN_TEMP;
   80d4c:	f1a4 0523 	sub.w	r5, r4, #35	; 0x23
   80d50:	b26d      	sxtb	r5, r5
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80d52:	fb01 f505 	mul.w	r5, r1, r5
   80d56:	4b17      	ldr	r3, [pc, #92]	; (80db4 <thermals_slow_tick+0x148>)
		gpio_set_pin_high(PIN_TEMP_OK_LED);
   80d58:	4a15      	ldr	r2, [pc, #84]	; (80db0 <thermals_slow_tick+0x144>)
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80d5a:	fba3 3405 	umull	r3, r4, r3, r5
		gpio_set_pin_high(PIN_TEMP_OK_LED);
   80d5e:	4790      	blx	r2
		gpio_set_pin_low(PIN_TEMP_ERR_LED);
   80d60:	4b12      	ldr	r3, [pc, #72]	; (80dac <thermals_slow_tick+0x140>)
   80d62:	4638      	mov	r0, r7
   80d64:	4798      	blx	r3
	if (fan_pwm > 0){
   80d66:	f240 5381 	movw	r3, #1409	; 0x581
	fan_pwm = (fan_pwm * 100) /  (MAX1617_FULL_FAN_TEMP-MAX1617_OFF_FAN_TEMP);
   80d6a:	08e4      	lsrs	r4, r4, #3
	fan_pwm = min(99, fan_pwm);
   80d6c:	2c63      	cmp	r4, #99	; 0x63
	if (fan_pwm > 0){
   80d6e:	f1a5 050f 	sub.w	r5, r5, #15
	fan_pwm = min(99, fan_pwm);
   80d72:	bf28      	it	cs
   80d74:	2463      	movcs	r4, #99	; 0x63
	if (fan_pwm > 0){
   80d76:	429d      	cmp	r5, r3
   80d78:	d8d5      	bhi.n	80d26 <thermals_slow_tick+0xba>
   80d7a:	2420      	movs	r4, #32
   80d7c:	e7bf      	b.n	80cfe <thermals_slow_tick+0x92>
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   80d7e:	4e0b      	ldr	r6, [pc, #44]	; (80dac <thermals_slow_tick+0x140>)
   80d80:	203b      	movs	r0, #59	; 0x3b
   80d82:	47b0      	blx	r6
	fpga_pins(false);
   80d84:	4638      	mov	r0, r7
   80d86:	4b10      	ldr	r3, [pc, #64]	; (80dc8 <thermals_slow_tick+0x15c>)
   80d88:	4798      	blx	r3
	power_killed = true;
   80d8a:	4b07      	ldr	r3, [pc, #28]	; (80da8 <thermals_slow_tick+0x13c>)
		gpio_set_pin_low(PIN_TEMP_OK_LED);
   80d8c:	4628      	mov	r0, r5
	power_killed = true;
   80d8e:	701d      	strb	r5, [r3, #0]
		power_killed = true;
   80d90:	701d      	strb	r5, [r3, #0]
		gpio_set_pin_low(PIN_TEMP_OK_LED);
   80d92:	47b0      	blx	r6
		gpio_set_pin_high(PIN_TEMP_ERR_LED);
   80d94:	4638      	mov	r0, r7
   80d96:	4b06      	ldr	r3, [pc, #24]	; (80db0 <thermals_slow_tick+0x144>)
   80d98:	4798      	blx	r3
   80d9a:	e795      	b.n	80cc8 <thermals_slow_tick+0x5c>
   80d9c:	20072133 	.word	0x20072133
   80da0:	4008c000 	.word	0x4008c000
   80da4:	00083af1 	.word	0x00083af1
   80da8:	200714fc 	.word	0x200714fc
   80dac:	00083765 	.word	0x00083765
   80db0:	00083749 	.word	0x00083749
   80db4:	88888889 	.word	0x88888889
   80db8:	51eb851f 	.word	0x51eb851f
   80dbc:	40080000 	.word	0x40080000
   80dc0:	00085dad 	.word	0x00085dad
   80dc4:	00085da5 	.word	0x00085da5
   80dc8:	00080279 	.word	0x00080279

00080dcc <thermals_fast_tick>:
{
   80dcc:	b508      	push	{r3, lr}
	if (power_killed) {
   80dce:	4b05      	ldr	r3, [pc, #20]	; (80de4 <thermals_fast_tick+0x18>)
   80dd0:	781b      	ldrb	r3, [r3, #0]
   80dd2:	b90b      	cbnz	r3, 80dd8 <thermals_fast_tick+0xc>
}
   80dd4:	2000      	movs	r0, #0
   80dd6:	bd08      	pop	{r3, pc}
		gpio_toggle_pin(PIN_TEMP_ERR_LED);
   80dd8:	2000      	movs	r0, #0
   80dda:	4b03      	ldr	r3, [pc, #12]	; (80de8 <thermals_fast_tick+0x1c>)
   80ddc:	4798      	blx	r3
}
   80dde:	2000      	movs	r0, #0
   80de0:	bd08      	pop	{r3, pc}
   80de2:	bf00      	nop
   80de4:	200714fc 	.word	0x200714fc
   80de8:	00083781 	.word	0x00083781

00080dec <enable_fpga_power>:
{
   80dec:	b508      	push	{r3, lr}
	gpio_set_pin_high(PIN_FPGA_PWR_ENABLE);
   80dee:	203b      	movs	r0, #59	; 0x3b
   80df0:	4b04      	ldr	r3, [pc, #16]	; (80e04 <enable_fpga_power+0x18>)
   80df2:	4798      	blx	r3
	fpga_pins(true);
   80df4:	4b04      	ldr	r3, [pc, #16]	; (80e08 <enable_fpga_power+0x1c>)
   80df6:	2001      	movs	r0, #1
   80df8:	4798      	blx	r3
	power_killed = false;
   80dfa:	2200      	movs	r2, #0
   80dfc:	4b03      	ldr	r3, [pc, #12]	; (80e0c <enable_fpga_power+0x20>)
   80dfe:	701a      	strb	r2, [r3, #0]
}
   80e00:	bd08      	pop	{r3, pc}
   80e02:	bf00      	nop
   80e04:	00083749 	.word	0x00083749
   80e08:	00080279 	.word	0x00080279
   80e0c:	200714fc 	.word	0x200714fc

00080e10 <kill_fpga_power>:
{
   80e10:	b508      	push	{r3, lr}
	gpio_set_pin_low(PIN_FPGA_PWR_ENABLE);
   80e12:	203b      	movs	r0, #59	; 0x3b
   80e14:	4b04      	ldr	r3, [pc, #16]	; (80e28 <kill_fpga_power+0x18>)
   80e16:	4798      	blx	r3
	fpga_pins(false);
   80e18:	4b04      	ldr	r3, [pc, #16]	; (80e2c <kill_fpga_power+0x1c>)
   80e1a:	2000      	movs	r0, #0
   80e1c:	4798      	blx	r3
	power_killed = true;
   80e1e:	2201      	movs	r2, #1
   80e20:	4b03      	ldr	r3, [pc, #12]	; (80e30 <kill_fpga_power+0x20>)
   80e22:	701a      	strb	r2, [r3, #0]
}
   80e24:	bd08      	pop	{r3, pc}
   80e26:	bf00      	nop
   80e28:	00083765 	.word	0x00083765
   80e2c:	00080279 	.word	0x00080279
   80e30:	200714fc 	.word	0x200714fc

00080e34 <fan_pwm_init>:
{
   80e34:	b510      	push	{r4, lr}
	tc_init(TC0, FAN_PWM_TIMER_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_WAVE | TC_CMR_ACPA_SET | TC_CMR_ACPC_CLEAR | TC_CMR_CPCTRG);
   80e36:	4c0e      	ldr	r4, [pc, #56]	; (80e70 <fan_pwm_init+0x3c>)
	pmc_enable_periph_clk(ID_TC0);
   80e38:	4b0e      	ldr	r3, [pc, #56]	; (80e74 <fan_pwm_init+0x40>)
   80e3a:	201b      	movs	r0, #27
   80e3c:	4798      	blx	r3
	tc_init(TC0, FAN_PWM_TIMER_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_WAVE | TC_CMR_ACPA_SET | TC_CMR_ACPC_CLEAR | TC_CMR_CPCTRG);
   80e3e:	4620      	mov	r0, r4
   80e40:	f44f 221c 	mov.w	r2, #638976	; 0x9c000
   80e44:	2100      	movs	r1, #0
   80e46:	4b0c      	ldr	r3, [pc, #48]	; (80e78 <fan_pwm_init+0x44>)
   80e48:	4798      	blx	r3
	tc_write_rc(TC0, FAN_PWM_TIMER_CHANNEL, rc);
   80e4a:	4620      	mov	r0, r4
   80e4c:	f44f 7224 	mov.w	r2, #656	; 0x290
   80e50:	2100      	movs	r1, #0
   80e52:	4b0a      	ldr	r3, [pc, #40]	; (80e7c <fan_pwm_init+0x48>)
   80e54:	4798      	blx	r3
	tc_write_ra(TC0, FAN_PWM_TIMER_CHANNEL, ra);
   80e56:	f44f 72a4 	mov.w	r2, #328	; 0x148
   80e5a:	4620      	mov	r0, r4
   80e5c:	2100      	movs	r1, #0
   80e5e:	4b08      	ldr	r3, [pc, #32]	; (80e80 <fan_pwm_init+0x4c>)
   80e60:	4798      	blx	r3
	tc_start(TC0, FAN_PWM_TIMER_CHANNEL);
   80e62:	4620      	mov	r0, r4
   80e64:	2100      	movs	r1, #0
   80e66:	4b07      	ldr	r3, [pc, #28]	; (80e84 <fan_pwm_init+0x50>)
   80e68:	4798      	blx	r3
}
   80e6a:	2000      	movs	r0, #0
   80e6c:	bd10      	pop	{r4, pc}
   80e6e:	bf00      	nop
   80e70:	40080000 	.word	0x40080000
   80e74:	00083599 	.word	0x00083599
   80e78:	00085d7d 	.word	0x00085d7d
   80e7c:	00085dad 	.word	0x00085dad
   80e80:	00085da5 	.word	0x00085da5
   80e84:	00085d9d 	.word	0x00085d9d

00080e88 <fan_pwm_set_duty_cycle>:
{
   80e88:	b570      	push	{r4, r5, r6, lr}
	tc_write_rc(TC0, FAN_PWM_TIMER_CHANNEL, rc);
   80e8a:	4d0c      	ldr	r5, [pc, #48]	; (80ebc <fan_pwm_set_duty_cycle+0x34>)
{
   80e8c:	4604      	mov	r4, r0
	tc_write_rc(TC0, FAN_PWM_TIMER_CHANNEL, rc);
   80e8e:	f44f 7224 	mov.w	r2, #656	; 0x290
   80e92:	4628      	mov	r0, r5
   80e94:	2100      	movs	r1, #0
   80e96:	4b0a      	ldr	r3, [pc, #40]	; (80ec0 <fan_pwm_set_duty_cycle+0x38>)
   80e98:	4798      	blx	r3
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   80e9a:	f44f 7c24 	mov.w	ip, #656	; 0x290
   80e9e:	f1c4 0264 	rsb	r2, r4, #100	; 0x64
   80ea2:	fb0c f202 	mul.w	r2, ip, r2
   80ea6:	4e07      	ldr	r6, [pc, #28]	; (80ec4 <fan_pwm_set_duty_cycle+0x3c>)
	tc_write_ra(TC0, FAN_PWM_TIMER_CHANNEL, ra);
   80ea8:	4628      	mov	r0, r5
	uint32_t ra = (100 - duty_cycle) * rc / 100;
   80eaa:	fba6 4202 	umull	r4, r2, r6, r2
	tc_write_ra(TC0, FAN_PWM_TIMER_CHANNEL, ra);
   80eae:	2100      	movs	r1, #0
   80eb0:	4b05      	ldr	r3, [pc, #20]	; (80ec8 <fan_pwm_set_duty_cycle+0x40>)
   80eb2:	0952      	lsrs	r2, r2, #5
   80eb4:	4798      	blx	r3
}
   80eb6:	2000      	movs	r0, #0
   80eb8:	bd70      	pop	{r4, r5, r6, pc}
   80eba:	bf00      	nop
   80ebc:	40080000 	.word	0x40080000
   80ec0:	00085dad 	.word	0x00085dad
   80ec4:	51eb851f 	.word	0x51eb851f
   80ec8:	00085da5 	.word	0x00085da5

00080ecc <pgood_tick>:
	power_toggles = 0;
   80ecc:	2000      	movs	r0, #0
   80ece:	4b01      	ldr	r3, [pc, #4]	; (80ed4 <pgood_tick+0x8>)
   80ed0:	7018      	strb	r0, [r3, #0]
}
   80ed2:	4770      	bx	lr
   80ed4:	200714fd 	.word	0x200714fd

00080ed8 <check_power_state>:
{
   80ed8:	b538      	push	{r3, r4, r5, lr}
	if (board_get_powerstate() != last_power_state){
   80eda:	203a      	movs	r0, #58	; 0x3a
   80edc:	4c0c      	ldr	r4, [pc, #48]	; (80f10 <check_power_state+0x38>)
   80ede:	47a0      	blx	r4
   80ee0:	3800      	subs	r0, #0
   80ee2:	bf18      	it	ne
   80ee4:	2001      	movne	r0, #1
   80ee6:	4d0b      	ldr	r5, [pc, #44]	; (80f14 <check_power_state+0x3c>)
   80ee8:	782b      	ldrb	r3, [r5, #0]
   80eea:	4298      	cmp	r0, r3
   80eec:	d100      	bne.n	80ef0 <check_power_state+0x18>
}
   80eee:	bd38      	pop	{r3, r4, r5, pc}
		if (board_get_powerstate()){
   80ef0:	203a      	movs	r0, #58	; 0x3a
   80ef2:	47a0      	blx	r4
   80ef4:	b148      	cbz	r0, 80f0a <check_power_state+0x32>
			fpga_pins(true);
   80ef6:	2001      	movs	r0, #1
   80ef8:	4b07      	ldr	r3, [pc, #28]	; (80f18 <check_power_state+0x40>)
   80efa:	4798      	blx	r3
		last_power_state = board_get_powerstate();
   80efc:	203a      	movs	r0, #58	; 0x3a
   80efe:	47a0      	blx	r4
   80f00:	3800      	subs	r0, #0
   80f02:	bf18      	it	ne
   80f04:	2001      	movne	r0, #1
   80f06:	7028      	strb	r0, [r5, #0]
}
   80f08:	bd38      	pop	{r3, r4, r5, pc}
			fpga_pins(false);
   80f0a:	4b03      	ldr	r3, [pc, #12]	; (80f18 <check_power_state+0x40>)
   80f0c:	4798      	blx	r3
   80f0e:	e7f5      	b.n	80efc <check_power_state+0x24>
   80f10:	0008372d 	.word	0x0008372d
   80f14:	20070208 	.word	0x20070208
   80f18:	00080279 	.word	0x00080279

00080f1c <periodic_timer_init>:
#include "timers.h"

#define PERIODIC_TIMER_CHANNEL 1

int periodic_timer_init(void)
{
   80f1c:	b538      	push	{r3, r4, r5, lr}
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80f1e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
	pmc_enable_periph_clk(ID_TC1); //ahhhhh
	
	tc_init(TC0, PERIODIC_TIMER_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_CPCTRG | TC_CMR_WAVE);
   80f22:	4c16      	ldr	r4, [pc, #88]	; (80f7c <periodic_timer_init+0x60>)
	pmc_enable_periph_clk(ID_TC1); //ahhhhh
   80f24:	4b16      	ldr	r3, [pc, #88]	; (80f80 <periodic_timer_init+0x64>)
   80f26:	201c      	movs	r0, #28
   80f28:	4798      	blx	r3
	tc_init(TC0, PERIODIC_TIMER_CHANNEL, TC_CMR_TCCLKS_TIMER_CLOCK1 | TC_CMR_CPCTRG | TC_CMR_WAVE);
   80f2a:	4620      	mov	r0, r4
   80f2c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
   80f30:	2101      	movs	r1, #1
   80f32:	4b14      	ldr	r3, [pc, #80]	; (80f84 <periodic_timer_init+0x68>)
   80f34:	4798      	blx	r3
	tc_write_rc(TC0, PERIODIC_TIMER_CHANNEL, sysclk_get_peripheral_bus_hz(TC0) / 2 / 4); //4 Hz
   80f36:	4a14      	ldr	r2, [pc, #80]	; (80f88 <periodic_timer_init+0x6c>)
   80f38:	4620      	mov	r0, r4
   80f3a:	2101      	movs	r1, #1
   80f3c:	4b13      	ldr	r3, [pc, #76]	; (80f8c <periodic_timer_init+0x70>)
   80f3e:	4798      	blx	r3
	
	tc_start(TC0, PERIODIC_TIMER_CHANNEL);
   80f40:	4620      	mov	r0, r4
   80f42:	2101      	movs	r1, #1
   80f44:	4b12      	ldr	r3, [pc, #72]	; (80f90 <periodic_timer_init+0x74>)
   80f46:	4798      	blx	r3
	tc_get_status(TC0, PERIODIC_TIMER_CHANNEL);
   80f48:	2101      	movs	r1, #1
   80f4a:	4620      	mov	r0, r4
   80f4c:	4b11      	ldr	r3, [pc, #68]	; (80f94 <periodic_timer_init+0x78>)
   80f4e:	4798      	blx	r3
   80f50:	4b11      	ldr	r3, [pc, #68]	; (80f98 <periodic_timer_init+0x7c>)
   80f52:	f8c3 5080 	str.w	r5, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
   80f56:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   80f5a:	f3bf 8f6f 	isb	sy
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   80f5e:	f04f 0c80 	mov.w	ip, #128	; 0x80
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80f62:	f8c3 5180 	str.w	r5, [r3, #384]	; 0x180
	
	NVIC_DisableIRQ(TC1_IRQn);
	NVIC_ClearPendingIRQ(TC1_IRQn);
	NVIC_SetPriority(TC1_IRQn, 8);
	NVIC_EnableIRQ(TC1_IRQn);
	tc_enable_interrupt(TC0, PERIODIC_TIMER_CHANNEL, TC_IER_CPCS);
   80f66:	4620      	mov	r0, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   80f68:	f883 c31c 	strb.w	ip, [r3, #796]	; 0x31c
   80f6c:	2210      	movs	r2, #16
   80f6e:	2101      	movs	r1, #1
   80f70:	4c0a      	ldr	r4, [pc, #40]	; (80f9c <periodic_timer_init+0x80>)
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   80f72:	601d      	str	r5, [r3, #0]
   80f74:	47a0      	blx	r4
	return 0x00;
}
   80f76:	2000      	movs	r0, #0
   80f78:	bd38      	pop	{r3, r4, r5, pc}
   80f7a:	bf00      	nop
   80f7c:	40080000 	.word	0x40080000
   80f80:	00083599 	.word	0x00083599
   80f84:	00085d7d 	.word	0x00085d7d
   80f88:	00a037a0 	.word	0x00a037a0
   80f8c:	00085dad 	.word	0x00085dad
   80f90:	00085d9d 	.word	0x00085d9d
   80f94:	00085dbd 	.word	0x00085dbd
   80f98:	e000e100 	.word	0xe000e100
   80f9c:	00085db5 	.word	0x00085db5

00080fa0 <TC1_Handler>:

volatile uint32_t periodic_tick_div = 0;
ISR(TC1_Handler)
{
	if (tc_get_status(TC0, PERIODIC_TIMER_CHANNEL) & (TC_IER_CPCS)) {
   80fa0:	2101      	movs	r1, #1
{
   80fa2:	b510      	push	{r4, lr}
	if (tc_get_status(TC0, PERIODIC_TIMER_CHANNEL) & (TC_IER_CPCS)) {
   80fa4:	480c      	ldr	r0, [pc, #48]	; (80fd8 <TC1_Handler+0x38>)
   80fa6:	4b0d      	ldr	r3, [pc, #52]	; (80fdc <TC1_Handler+0x3c>)
   80fa8:	4798      	blx	r3
   80faa:	06c1      	lsls	r1, r0, #27
   80fac:	d400      	bmi.n	80fb0 <TC1_Handler+0x10>
		
		if (!(periodic_tick_div % 16)) {
			pgood_tick();
		}
	}
}
   80fae:	bd10      	pop	{r4, pc}
		periodic_tick_div++;
   80fb0:	4c0b      	ldr	r4, [pc, #44]	; (80fe0 <TC1_Handler+0x40>)
		thermals_fast_tick();
   80fb2:	4b0c      	ldr	r3, [pc, #48]	; (80fe4 <TC1_Handler+0x44>)
   80fb4:	4798      	blx	r3
		periodic_tick_div++;
   80fb6:	6823      	ldr	r3, [r4, #0]
   80fb8:	3301      	adds	r3, #1
   80fba:	6023      	str	r3, [r4, #0]
		if (!(periodic_tick_div % 8)) {
   80fbc:	6823      	ldr	r3, [r4, #0]
   80fbe:	075a      	lsls	r2, r3, #29
   80fc0:	d006      	beq.n	80fd0 <TC1_Handler+0x30>
		if (!(periodic_tick_div % 16)) {
   80fc2:	6823      	ldr	r3, [r4, #0]
   80fc4:	071b      	lsls	r3, r3, #28
   80fc6:	d1f2      	bne.n	80fae <TC1_Handler+0xe>
}
   80fc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			pgood_tick();
   80fcc:	4b06      	ldr	r3, [pc, #24]	; (80fe8 <TC1_Handler+0x48>)
   80fce:	4718      	bx	r3
			thermals_slow_tick();
   80fd0:	4b06      	ldr	r3, [pc, #24]	; (80fec <TC1_Handler+0x4c>)
   80fd2:	4798      	blx	r3
   80fd4:	e7f5      	b.n	80fc2 <TC1_Handler+0x22>
   80fd6:	bf00      	nop
   80fd8:	40080000 	.word	0x40080000
   80fdc:	00085dbd 	.word	0x00085dbd
   80fe0:	20071500 	.word	0x20071500
   80fe4:	00080dcd 	.word	0x00080dcd
   80fe8:	00080ecd 	.word	0x00080ecd
   80fec:	00080c6d 	.word	0x00080c6d

00080ff0 <udc_valid_address>:
 * \brief Change the address of device
 * Callback called at the end of request set address
 */
static void udc_valid_address(void)
{
	udd_set_address(udd_g_ctrlreq.req.wValue & 0x7F);
   80ff0:	4a02      	ldr	r2, [pc, #8]	; (80ffc <udc_valid_address+0xc>)
   80ff2:	4b03      	ldr	r3, [pc, #12]	; (81000 <udc_valid_address+0x10>)
   80ff4:	8850      	ldrh	r0, [r2, #2]
   80ff6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   80ffa:	4718      	bx	r3
   80ffc:	2007228c 	.word	0x2007228c
   81000:	000842f1 	.word	0x000842f1

00081004 <udc_update_iface_desc.part.0>:
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81004:	4b15      	ldr	r3, [pc, #84]	; (8105c <udc_update_iface_desc.part.0+0x58>)
   81006:	681b      	ldr	r3, [r3, #0]
   81008:	681b      	ldr	r3, [r3, #0]
   8100a:	791a      	ldrb	r2, [r3, #4]
   8100c:	4282      	cmp	r2, r0
   8100e:	d922      	bls.n	81056 <udc_update_iface_desc.part.0+0x52>
static bool udc_update_iface_desc(uint8_t iface_num, uint8_t setting_num)
   81010:	b430      	push	{r4, r5}
	udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *)
   81012:	4c13      	ldr	r4, [pc, #76]	; (81060 <udc_update_iface_desc.part.0+0x5c>)
   81014:	6023      	str	r3, [r4, #0]
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   81016:	f8b3 c002 	ldrh.w	ip, [r3, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   8101a:	449c      	add	ip, r3
	while (ptr_end_desc >
   8101c:	4563      	cmp	r3, ip
   8101e:	d217      	bcs.n	81050 <udc_update_iface_desc.part.0+0x4c>
   81020:	2500      	movs	r5, #0
   81022:	e004      	b.n	8102e <udc_update_iface_desc.part.0+0x2a>
				udc_ptr_iface->bLength);
   81024:	781a      	ldrb	r2, [r3, #0]
   81026:	2501      	movs	r5, #1
		udc_ptr_iface = (UDC_DESC_STORAGE usb_iface_desc_t *) (
   81028:	4413      	add	r3, r2
	while (ptr_end_desc >
   8102a:	459c      	cmp	ip, r3
   8102c:	d90c      	bls.n	81048 <udc_update_iface_desc.part.0+0x44>
		if (USB_DT_INTERFACE == udc_ptr_iface->bDescriptorType) {
   8102e:	785a      	ldrb	r2, [r3, #1]
   81030:	2a04      	cmp	r2, #4
   81032:	d1f7      	bne.n	81024 <udc_update_iface_desc.part.0+0x20>
			if ((iface_num == udc_ptr_iface->bInterfaceNumber) &&
   81034:	789a      	ldrb	r2, [r3, #2]
   81036:	4282      	cmp	r2, r0
   81038:	d1f4      	bne.n	81024 <udc_update_iface_desc.part.0+0x20>
   8103a:	78da      	ldrb	r2, [r3, #3]
   8103c:	428a      	cmp	r2, r1
   8103e:	d1f1      	bne.n	81024 <udc_update_iface_desc.part.0+0x20>
   81040:	b105      	cbz	r5, 81044 <udc_update_iface_desc.part.0+0x40>
   81042:	6023      	str	r3, [r4, #0]
				return true; // Interface found
   81044:	2001      	movs	r0, #1
   81046:	e001      	b.n	8104c <udc_update_iface_desc.part.0+0x48>
	return false; // Interface not found
   81048:	2000      	movs	r0, #0
   8104a:	6023      	str	r3, [r4, #0]
}
   8104c:	bc30      	pop	{r4, r5}
   8104e:	4770      	bx	lr
		return false;
   81050:	2000      	movs	r0, #0
}
   81052:	bc30      	pop	{r4, r5}
   81054:	4770      	bx	lr
		return false;
   81056:	2000      	movs	r0, #0
}
   81058:	4770      	bx	lr
   8105a:	bf00      	nop
   8105c:	2007150c 	.word	0x2007150c
   81060:	20071510 	.word	0x20071510

00081064 <udc_iface_disable>:
{
   81064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (0 == udc_num_configuration) {
   81068:	4c1c      	ldr	r4, [pc, #112]	; (810dc <udc_iface_disable+0x78>)
   8106a:	7823      	ldrb	r3, [r4, #0]
   8106c:	b37b      	cbz	r3, 810ce <udc_iface_disable+0x6a>
   8106e:	2100      	movs	r1, #0
   81070:	4e1b      	ldr	r6, [pc, #108]	; (810e0 <udc_iface_disable+0x7c>)
   81072:	4605      	mov	r5, r0
   81074:	47b0      	blx	r6
	if (!udc_update_iface_desc(iface_num, 0)) {
   81076:	b350      	cbz	r0, 810ce <udc_iface_disable+0x6a>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81078:	f8df 8068 	ldr.w	r8, [pc, #104]	; 810e4 <udc_iface_disable+0x80>
   8107c:	f8d8 3000 	ldr.w	r3, [r8]
   81080:	685b      	ldr	r3, [r3, #4]
   81082:	f853 7025 	ldr.w	r7, [r3, r5, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81086:	68fb      	ldr	r3, [r7, #12]
   81088:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   8108a:	7823      	ldrb	r3, [r4, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   8108c:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
   8108e:	b1f3      	cbz	r3, 810ce <udc_iface_disable+0x6a>
   81090:	4628      	mov	r0, r5
   81092:	47b0      	blx	r6
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81094:	4605      	mov	r5, r0
   81096:	b1d0      	cbz	r0, 810ce <udc_iface_disable+0x6a>
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   81098:	4b13      	ldr	r3, [pc, #76]	; (810e8 <udc_iface_disable+0x84>)
			udd_ep_free(ep_desc->bEndpointAddress);
   8109a:	4e14      	ldr	r6, [pc, #80]	; (810ec <udc_iface_disable+0x88>)
		ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   8109c:	681c      	ldr	r4, [r3, #0]
			udc_ptr_conf->desc +
   8109e:	f8d8 2000 	ldr.w	r2, [r8]
			desc->bLength);
   810a2:	7823      	ldrb	r3, [r4, #0]
			udc_ptr_conf->desc +
   810a4:	6812      	ldr	r2, [r2, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   810a6:	441c      	add	r4, r3
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   810a8:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   810aa:	441a      	add	r2, r3
	while (ptr_eof_desc > desc) {
   810ac:	42a2      	cmp	r2, r4
   810ae:	d806      	bhi.n	810be <udc_iface_disable+0x5a>
   810b0:	e008      	b.n	810c4 <udc_iface_disable+0x60>
		if (desc_id == desc->bDescriptorType) {
   810b2:	2b05      	cmp	r3, #5
   810b4:	d00f      	beq.n	810d6 <udc_iface_disable+0x72>
				desc->bLength);
   810b6:	7823      	ldrb	r3, [r4, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   810b8:	441c      	add	r4, r3
	while (ptr_eof_desc > desc) {
   810ba:	42a2      	cmp	r2, r4
   810bc:	d902      	bls.n	810c4 <udc_iface_disable+0x60>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   810be:	7863      	ldrb	r3, [r4, #1]
   810c0:	2b04      	cmp	r3, #4
   810c2:	d1f6      	bne.n	810b2 <udc_iface_disable+0x4e>
	udi_api->disable();
   810c4:	687b      	ldr	r3, [r7, #4]
   810c6:	4798      	blx	r3
}
   810c8:	4628      	mov	r0, r5
   810ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   810ce:	2500      	movs	r5, #0
}
   810d0:	4628      	mov	r0, r5
   810d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			udd_ep_free(ep_desc->bEndpointAddress);
   810d6:	78a0      	ldrb	r0, [r4, #2]
   810d8:	47b0      	blx	r6
			ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *)
   810da:	e7e0      	b.n	8109e <udc_iface_disable+0x3a>
   810dc:	20071509 	.word	0x20071509
   810e0:	00081005 	.word	0x00081005
   810e4:	2007150c 	.word	0x2007150c
   810e8:	20071510 	.word	0x20071510
   810ec:	00084355 	.word	0x00084355

000810f0 <udc_iface_enable>:
	if (0 == udc_num_configuration) {
   810f0:	4b18      	ldr	r3, [pc, #96]	; (81154 <udc_iface_enable+0x64>)
   810f2:	781b      	ldrb	r3, [r3, #0]
   810f4:	b35b      	cbz	r3, 8114e <udc_iface_enable+0x5e>
{
   810f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   810fa:	4b17      	ldr	r3, [pc, #92]	; (81158 <udc_iface_enable+0x68>)
   810fc:	4605      	mov	r5, r0
   810fe:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, setting_num)) {
   81100:	b310      	cbz	r0, 81148 <udc_iface_enable+0x58>
	ep_desc = (UDC_DESC_STORAGE usb_ep_desc_t *) udc_ptr_iface;
   81102:	4b16      	ldr	r3, [pc, #88]	; (8115c <udc_iface_enable+0x6c>)
   81104:	4e16      	ldr	r6, [pc, #88]	; (81160 <udc_iface_enable+0x70>)
   81106:	681c      	ldr	r4, [r3, #0]
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   81108:	4f16      	ldr	r7, [pc, #88]	; (81164 <udc_iface_enable+0x74>)
			udc_ptr_conf->desc +
   8110a:	6831      	ldr	r1, [r6, #0]
			desc->bLength);
   8110c:	7823      	ldrb	r3, [r4, #0]
			udc_ptr_conf->desc +
   8110e:	680a      	ldr	r2, [r1, #0]
	desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   81110:	441c      	add	r4, r3
			le16_to_cpu(udc_ptr_conf->desc->wTotalLength));
   81112:	8853      	ldrh	r3, [r2, #2]
	return (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *)
   81114:	441a      	add	r2, r3
	while (ptr_eof_desc > desc) {
   81116:	42a2      	cmp	r2, r4
   81118:	d806      	bhi.n	81128 <udc_iface_enable+0x38>
   8111a:	e008      	b.n	8112e <udc_iface_enable+0x3e>
		if (desc_id == desc->bDescriptorType) {
   8111c:	2b05      	cmp	r3, #5
   8111e:	d00d      	beq.n	8113c <udc_iface_enable+0x4c>
				desc->bLength);
   81120:	7823      	ldrb	r3, [r4, #0]
		desc = (UDC_DESC_STORAGE usb_conf_desc_t *) ((uint8_t *) desc +
   81122:	441c      	add	r4, r3
	while (ptr_eof_desc > desc) {
   81124:	42a2      	cmp	r2, r4
   81126:	d902      	bls.n	8112e <udc_iface_enable+0x3e>
		if (USB_DT_INTERFACE == desc->bDescriptorType) {
   81128:	7863      	ldrb	r3, [r4, #1]
   8112a:	2b04      	cmp	r3, #4
   8112c:	d1f6      	bne.n	8111c <udc_iface_enable+0x2c>
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   8112e:	684b      	ldr	r3, [r1, #4]
   81130:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
}
   81134:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return udc_ptr_conf->udi_apis[iface_num]->enable();
   81138:	681b      	ldr	r3, [r3, #0]
   8113a:	4718      	bx	r3
		if (!udd_ep_alloc(ep_desc->bEndpointAddress,
   8113c:	88a2      	ldrh	r2, [r4, #4]
   8113e:	78e1      	ldrb	r1, [r4, #3]
   81140:	78a0      	ldrb	r0, [r4, #2]
   81142:	47b8      	blx	r7
   81144:	2800      	cmp	r0, #0
   81146:	d1e0      	bne.n	8110a <udc_iface_enable+0x1a>
}
   81148:	2000      	movs	r0, #0
   8114a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8114e:	2000      	movs	r0, #0
   81150:	4770      	bx	lr
   81152:	bf00      	nop
   81154:	20071509 	.word	0x20071509
   81158:	00081005 	.word	0x00081005
   8115c:	20071510 	.word	0x20071510
   81160:	2007150c 	.word	0x2007150c
   81164:	000846a1 	.word	0x000846a1

00081168 <udc_get_interface_desc>:
	return udc_ptr_iface;
   81168:	4b01      	ldr	r3, [pc, #4]	; (81170 <udc_get_interface_desc+0x8>)
}
   8116a:	6818      	ldr	r0, [r3, #0]
   8116c:	4770      	bx	lr
   8116e:	bf00      	nop
   81170:	20071510 	.word	0x20071510

00081174 <udc_start>:
	udd_enable();
   81174:	4b00      	ldr	r3, [pc, #0]	; (81178 <udc_start+0x4>)
   81176:	4718      	bx	r3
   81178:	0008404d 	.word	0x0008404d

0008117c <udc_reset>:
{
   8117c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (udc_num_configuration) {
   8117e:	4f0c      	ldr	r7, [pc, #48]	; (811b0 <udc_reset+0x34>)
   81180:	783b      	ldrb	r3, [r7, #0]
   81182:	b17b      	cbz	r3, 811a4 <udc_reset+0x28>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81184:	4d0b      	ldr	r5, [pc, #44]	; (811b4 <udc_reset+0x38>)
   81186:	682b      	ldr	r3, [r5, #0]
   81188:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   8118a:	791b      	ldrb	r3, [r3, #4]
   8118c:	b153      	cbz	r3, 811a4 <udc_reset+0x28>
   8118e:	2400      	movs	r4, #0
   81190:	4620      	mov	r0, r4
   81192:	4e09      	ldr	r6, [pc, #36]	; (811b8 <udc_reset+0x3c>)
			udc_iface_disable(iface_num);
   81194:	47b0      	blx	r6
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81196:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
   81198:	3401      	adds	r4, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8119a:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   8119c:	b2e0      	uxtb	r0, r4
   8119e:	791b      	ldrb	r3, [r3, #4]
   811a0:	4283      	cmp	r3, r0
   811a2:	d8f7      	bhi.n	81194 <udc_reset+0x18>
	udc_num_configuration = 0;
   811a4:	2300      	movs	r3, #0
	udc_device_status =
   811a6:	4a05      	ldr	r2, [pc, #20]	; (811bc <udc_reset+0x40>)
	udc_num_configuration = 0;
   811a8:	703b      	strb	r3, [r7, #0]
	udc_device_status =
   811aa:	8013      	strh	r3, [r2, #0]
}
   811ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   811ae:	bf00      	nop
   811b0:	20071509 	.word	0x20071509
   811b4:	2007150c 	.word	0x2007150c
   811b8:	00081065 	.word	0x00081065
   811bc:	20071504 	.word	0x20071504

000811c0 <udc_sof_notify>:
{
   811c0:	b538      	push	{r3, r4, r5, lr}
	if (udc_num_configuration) {
   811c2:	4b0c      	ldr	r3, [pc, #48]	; (811f4 <udc_sof_notify+0x34>)
   811c4:	781b      	ldrb	r3, [r3, #0]
   811c6:	b19b      	cbz	r3, 811f0 <udc_sof_notify+0x30>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   811c8:	4d0b      	ldr	r5, [pc, #44]	; (811f8 <udc_sof_notify+0x38>)
   811ca:	682b      	ldr	r3, [r5, #0]
   811cc:	681a      	ldr	r2, [r3, #0]
		for (iface_num = 0;
   811ce:	7912      	ldrb	r2, [r2, #4]
   811d0:	b172      	cbz	r2, 811f0 <udc_sof_notify+0x30>
   811d2:	2400      	movs	r4, #0
   811d4:	4622      	mov	r2, r4
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   811d6:	685b      	ldr	r3, [r3, #4]
		for (iface_num = 0;
   811d8:	3401      	adds	r4, #1
			if (udc_ptr_conf->udi_apis[iface_num]->sof_notify != NULL) {
   811da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   811de:	691b      	ldr	r3, [r3, #16]
   811e0:	b103      	cbz	r3, 811e4 <udc_sof_notify+0x24>
				udc_ptr_conf->udi_apis[iface_num]->sof_notify();
   811e2:	4798      	blx	r3
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   811e4:	682b      	ldr	r3, [r5, #0]
		for (iface_num = 0;
   811e6:	b2e2      	uxtb	r2, r4
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   811e8:	6819      	ldr	r1, [r3, #0]
		for (iface_num = 0;
   811ea:	7909      	ldrb	r1, [r1, #4]
   811ec:	4291      	cmp	r1, r2
   811ee:	d8f2      	bhi.n	811d6 <udc_sof_notify+0x16>
}
   811f0:	bd38      	pop	{r3, r4, r5, pc}
   811f2:	bf00      	nop
   811f4:	20071509 	.word	0x20071509
   811f8:	2007150c 	.word	0x2007150c

000811fc <udc_process_setup>:
 * \return true if the request is supported, else the request is stalled by UDD
 */
bool udc_process_setup(void)
{
	// By default no data (receive/send) and no callbacks registered
	udd_g_ctrlreq.payload_size = 0;
   811fc:	2300      	movs	r3, #0
{
   811fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	udd_g_ctrlreq.payload_size = 0;
   81202:	4c8b      	ldr	r4, [pc, #556]	; (81430 <udc_process_setup+0x234>)
	udd_g_ctrlreq.callback = NULL;
	udd_g_ctrlreq.over_under_run = NULL;

	// MS requests this using request type 0xC0 and our user defined bRequest (0x01 in our case)
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   81204:	8822      	ldrh	r2, [r4, #0]
	udd_g_ctrlreq.over_under_run = NULL;
   81206:	e9c4 3304 	strd	r3, r3, [r4, #16]
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   8120a:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
	udd_g_ctrlreq.payload_size = 0;
   8120e:	81a3      	strh	r3, [r4, #12]
	if ((udd_g_ctrlreq.req.bmRequestType == 0xC0) && (udd_g_ctrlreq.req.bRequest == 0x01)) {
   81210:	f000 80d0 	beq.w	813b4 <udc_process_setup+0x1b8>
#endif
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
		return true;
	}

	if (Udd_setup_is_in()) {
   81214:	f994 2000 	ldrsb.w	r2, [r4]
   81218:	7823      	ldrb	r3, [r4, #0]
   8121a:	2a00      	cmp	r2, #0
   8121c:	db0e      	blt.n	8123c <udc_process_setup+0x40>
			return false; // Error from USB host
		}
	}

	// If standard request then try to decode it in UDC
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   8121e:	f013 0f60 	tst.w	r3, #96	; 0x60
   81222:	d079      	beq.n	81318 <udc_process_setup+0x11c>
			return true;
		}
	}

	// If interface request then try to decode it in UDI
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   81224:	f013 0f1e 	tst.w	r3, #30
   81228:	d040      	beq.n	812ac <udc_process_setup+0xb0>
			return true;
		}
	}

	// If endpoint request then try to decode it in UDI
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   8122a:	f003 031f 	and.w	r3, r3, #31
   8122e:	2b02      	cmp	r3, #2
   81230:	f000 80b6 	beq.w	813a0 <udc_process_setup+0x1a4>
	// Here SETUP request unknown by UDC and UDIs
#ifdef USB_DEVICE_SPECIFIC_REQUEST
	// Try to decode it in specific callback
	return USB_DEVICE_SPECIFIC_REQUEST(); // Ex: Vendor request,...
#else
	return false;
   81234:	2500      	movs	r5, #0
#endif
}
   81236:	4628      	mov	r0, r5
   81238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (udd_g_ctrlreq.req.wLength == 0) {
   8123c:	88e5      	ldrh	r5, [r4, #6]
   8123e:	2d00      	cmp	r5, #0
   81240:	d0f8      	beq.n	81234 <udc_process_setup+0x38>
	if (Udd_setup_type() == USB_REQ_TYPE_STANDARD) {
   81242:	f013 0f60 	tst.w	r3, #96	; 0x60
   81246:	d1ed      	bne.n	81224 <udc_process_setup+0x28>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   81248:	f013 021f 	ands.w	r2, r3, #31
   8124c:	f000 8165 	beq.w	8151a <udc_process_setup+0x31e>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   81250:	2a01      	cmp	r2, #1
   81252:	f040 80ba 	bne.w	813ca <udc_process_setup+0x1ce>
			switch (udd_g_ctrlreq.req.bRequest) {
   81256:	7862      	ldrb	r2, [r4, #1]
   81258:	2a0a      	cmp	r2, #10
   8125a:	d124      	bne.n	812a6 <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wLength != 1) {
   8125c:	2d01      	cmp	r5, #1
   8125e:	d122      	bne.n	812a6 <udc_process_setup+0xaa>
	if (!udc_num_configuration) {
   81260:	4a74      	ldr	r2, [pc, #464]	; (81434 <udc_process_setup+0x238>)
   81262:	7812      	ldrb	r2, [r2, #0]
   81264:	b1fa      	cbz	r2, 812a6 <udc_process_setup+0xaa>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   81266:	4a74      	ldr	r2, [pc, #464]	; (81438 <udc_process_setup+0x23c>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81268:	7926      	ldrb	r6, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   8126a:	6817      	ldr	r7, [r2, #0]
   8126c:	683a      	ldr	r2, [r7, #0]
   8126e:	7912      	ldrb	r2, [r2, #4]
   81270:	42b2      	cmp	r2, r6
   81272:	d918      	bls.n	812a6 <udc_process_setup+0xaa>
	if (0 == udc_num_configuration) {
   81274:	2100      	movs	r1, #0
   81276:	4630      	mov	r0, r6
   81278:	4b70      	ldr	r3, [pc, #448]	; (8143c <udc_process_setup+0x240>)
   8127a:	4798      	blx	r3
	if (!udc_update_iface_desc(iface_num, 0)) {
   8127c:	4605      	mov	r5, r0
   8127e:	2800      	cmp	r0, #0
   81280:	f000 80c6 	beq.w	81410 <udc_process_setup+0x214>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   81284:	687b      	ldr	r3, [r7, #4]
	udc_iface_setting = udi_api->getsetting();
   81286:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
   8128a:	68db      	ldr	r3, [r3, #12]
   8128c:	4798      	blx	r3
   8128e:	4602      	mov	r2, r0
   81290:	486b      	ldr	r0, [pc, #428]	; (81440 <udc_process_setup+0x244>)
	udd_set_setup_payload(&udc_iface_setting,1);
   81292:	2101      	movs	r1, #1
   81294:	4b6b      	ldr	r3, [pc, #428]	; (81444 <udc_process_setup+0x248>)
	udc_iface_setting = udi_api->getsetting();
   81296:	7002      	strb	r2, [r0, #0]
	udd_set_setup_payload(&udc_iface_setting,1);
   81298:	4798      	blx	r3
	return true;
   8129a:	e7cc      	b.n	81236 <udc_process_setup+0x3a>
		if (USB_REQ_RECIP_INTERFACE == Udd_setup_recipient()) {
   8129c:	2a01      	cmp	r2, #1
   8129e:	f000 814d 	beq.w	8153c <udc_process_setup+0x340>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   812a2:	2a02      	cmp	r2, #2
   812a4:	d06c      	beq.n	81380 <udc_process_setup+0x184>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   812a6:	f013 0f1e 	tst.w	r3, #30
   812aa:	d1c3      	bne.n	81234 <udc_process_setup+0x38>
		if (udd_g_ctrlreq.req.wIndex == 2) {
   812ac:	88a3      	ldrh	r3, [r4, #4]
	if (0 == udc_num_configuration) {
   812ae:	4e61      	ldr	r6, [pc, #388]	; (81434 <udc_process_setup+0x238>)
		if (udd_g_ctrlreq.req.wIndex == 2) {
   812b0:	2b02      	cmp	r3, #2
			udd_g_ctrlreq.req.wIndex = 1;
   812b2:	bf04      	itt	eq
   812b4:	2301      	moveq	r3, #1
   812b6:	80a3      	strheq	r3, [r4, #4]
	if (0 == udc_num_configuration) {
   812b8:	7833      	ldrb	r3, [r6, #0]
   812ba:	2b00      	cmp	r3, #0
   812bc:	d0ba      	beq.n	81234 <udc_process_setup+0x38>
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   812be:	4f5e      	ldr	r7, [pc, #376]	; (81438 <udc_process_setup+0x23c>)
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   812c0:	f894 8004 	ldrb.w	r8, [r4, #4]
	if (iface_num >= udc_ptr_conf->desc->bNumInterfaces) {
   812c4:	683d      	ldr	r5, [r7, #0]
   812c6:	682b      	ldr	r3, [r5, #0]
   812c8:	791b      	ldrb	r3, [r3, #4]
   812ca:	4598      	cmp	r8, r3
   812cc:	d340      	bcc.n	81350 <udc_process_setup+0x154>
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   812ce:	7822      	ldrb	r2, [r4, #0]
   812d0:	f002 021f 	and.w	r2, r2, #31
   812d4:	2a02      	cmp	r2, #2
   812d6:	d1ad      	bne.n	81234 <udc_process_setup+0x38>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   812d8:	2b00      	cmp	r3, #0
   812da:	d0ab      	beq.n	81234 <udc_process_setup+0x38>
   812dc:	2400      	movs	r4, #0
   812de:	46a0      	mov	r8, r4
   812e0:	f8df 9158 	ldr.w	r9, [pc, #344]	; 8143c <udc_process_setup+0x240>
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   812e4:	686b      	ldr	r3, [r5, #4]
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   812e6:	3401      	adds	r4, #1
		udi_api = udc_ptr_conf->udi_apis[iface_num];
   812e8:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   812ec:	68eb      	ldr	r3, [r5, #12]
   812ee:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   812f0:	7833      	ldrb	r3, [r6, #0]
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   812f2:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
   812f4:	2b00      	cmp	r3, #0
   812f6:	d09d      	beq.n	81234 <udc_process_setup+0x38>
   812f8:	4640      	mov	r0, r8
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   812fa:	fa5f f884 	uxtb.w	r8, r4
   812fe:	47c8      	blx	r9
		if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81300:	2800      	cmp	r0, #0
   81302:	d097      	beq.n	81234 <udc_process_setup+0x38>
		if (udi_api->setup()) {
   81304:	68ab      	ldr	r3, [r5, #8]
   81306:	4798      	blx	r3
   81308:	2800      	cmp	r0, #0
   8130a:	d137      	bne.n	8137c <udc_process_setup+0x180>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8130c:	683d      	ldr	r5, [r7, #0]
   8130e:	682b      	ldr	r3, [r5, #0]
   81310:	791b      	ldrb	r3, [r3, #4]
   81312:	4543      	cmp	r3, r8
   81314:	d8e6      	bhi.n	812e4 <udc_process_setup+0xe8>
   81316:	e78d      	b.n	81234 <udc_process_setup+0x38>
		if (USB_REQ_RECIP_DEVICE == Udd_setup_recipient()) {
   81318:	f013 021f 	ands.w	r2, r3, #31
   8131c:	d1be      	bne.n	8129c <udc_process_setup+0xa0>
			switch (udd_g_ctrlreq.req.bRequest) {
   8131e:	7862      	ldrb	r2, [r4, #1]
   81320:	3a01      	subs	r2, #1
   81322:	2a08      	cmp	r2, #8
   81324:	d8bf      	bhi.n	812a6 <udc_process_setup+0xaa>
   81326:	a101      	add	r1, pc, #4	; (adr r1, 8132c <udc_process_setup+0x130>)
   81328:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   8132c:	00081415 	.word	0x00081415
   81330:	000812a7 	.word	0x000812a7
   81334:	000813f1 	.word	0x000813f1
   81338:	000812a7 	.word	0x000812a7
   8133c:	0008150b 	.word	0x0008150b
   81340:	000812a7 	.word	0x000812a7
   81344:	000812a7 	.word	0x000812a7
   81348:	000812a7 	.word	0x000812a7
   8134c:	0008145d 	.word	0x0008145d
	if (0 == udc_num_configuration) {
   81350:	2100      	movs	r1, #0
   81352:	4640      	mov	r0, r8
   81354:	4f39      	ldr	r7, [pc, #228]	; (8143c <udc_process_setup+0x240>)
   81356:	47b8      	blx	r7
	if (!udc_update_iface_desc(iface_num, 0)) {
   81358:	2800      	cmp	r0, #0
   8135a:	d034      	beq.n	813c6 <udc_process_setup+0x1ca>
	udi_api = udc_ptr_conf->udi_apis[iface_num];
   8135c:	686b      	ldr	r3, [r5, #4]
   8135e:	f853 5028 	ldr.w	r5, [r3, r8, lsl #2]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81362:	68eb      	ldr	r3, [r5, #12]
   81364:	4798      	blx	r3
	if (0 == udc_num_configuration) {
   81366:	7833      	ldrb	r3, [r6, #0]
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81368:	4601      	mov	r1, r0
	if (0 == udc_num_configuration) {
   8136a:	2b00      	cmp	r3, #0
   8136c:	f43f af62 	beq.w	81234 <udc_process_setup+0x38>
   81370:	4640      	mov	r0, r8
   81372:	47b8      	blx	r7
	if (!udc_update_iface_desc(iface_num, udi_api->getsetting())) {
   81374:	b338      	cbz	r0, 813c6 <udc_process_setup+0x1ca>
	return udi_api->setup();
   81376:	68ab      	ldr	r3, [r5, #8]
   81378:	4798      	blx	r3
		if (udc_req_iface()) {
   8137a:	b320      	cbz	r0, 813c6 <udc_process_setup+0x1ca>
			return true;
   8137c:	2501      	movs	r5, #1
   8137e:	e75a      	b.n	81236 <udc_process_setup+0x3a>
			switch (udd_g_ctrlreq.req.bRequest) {
   81380:	7862      	ldrb	r2, [r4, #1]
   81382:	2a01      	cmp	r2, #1
   81384:	f000 80f7 	beq.w	81576 <udc_process_setup+0x37a>
   81388:	2a03      	cmp	r2, #3
   8138a:	d106      	bne.n	8139a <udc_process_setup+0x19e>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   8138c:	88e2      	ldrh	r2, [r4, #6]
   8138e:	8861      	ldrh	r1, [r4, #2]
   81390:	430a      	orrs	r2, r1
   81392:	b292      	uxth	r2, r2
   81394:	2a00      	cmp	r2, #0
   81396:	f000 81c1 	beq.w	8171c <udc_process_setup+0x520>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   8139a:	f013 0f1e 	tst.w	r3, #30
   8139e:	d085      	beq.n	812ac <udc_process_setup+0xb0>
	if (0 == udc_num_configuration) {
   813a0:	4e24      	ldr	r6, [pc, #144]	; (81434 <udc_process_setup+0x238>)
   813a2:	7833      	ldrb	r3, [r6, #0]
   813a4:	2b00      	cmp	r3, #0
   813a6:	f43f af45 	beq.w	81234 <udc_process_setup+0x38>
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   813aa:	4f23      	ldr	r7, [pc, #140]	; (81438 <udc_process_setup+0x23c>)
   813ac:	683d      	ldr	r5, [r7, #0]
   813ae:	682b      	ldr	r3, [r5, #0]
   813b0:	791b      	ldrb	r3, [r3, #4]
   813b2:	e791      	b.n	812d8 <udc_process_setup+0xdc>
		return true;
   813b4:	2501      	movs	r5, #1
		udd_set_setup_payload((uint8_t *)&MS_OS_DESC, sizeof(struct MS_OS_DESC_SET_HEADER));
   813b6:	f44f 71a5 	mov.w	r1, #330	; 0x14a
   813ba:	4823      	ldr	r0, [pc, #140]	; (81448 <udc_process_setup+0x24c>)
   813bc:	4b21      	ldr	r3, [pc, #132]	; (81444 <udc_process_setup+0x248>)
   813be:	4798      	blx	r3
}
   813c0:	4628      	mov	r0, r5
   813c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (Udd_setup_recipient() == USB_REQ_RECIP_ENDPOINT) {
   813c6:	7823      	ldrb	r3, [r4, #0]
   813c8:	e72f      	b.n	8122a <udc_process_setup+0x2e>
		if (USB_REQ_RECIP_ENDPOINT == Udd_setup_recipient()) {
   813ca:	2a02      	cmp	r2, #2
   813cc:	f47f af6b 	bne.w	812a6 <udc_process_setup+0xaa>
			switch (udd_g_ctrlreq.req.bRequest) {
   813d0:	7862      	ldrb	r2, [r4, #1]
   813d2:	2a00      	cmp	r2, #0
   813d4:	d1e1      	bne.n	8139a <udc_process_setup+0x19e>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_ep_status)) {
   813d6:	2d02      	cmp	r5, #2
   813d8:	d1df      	bne.n	8139a <udc_process_setup+0x19e>
	udc_ep_status = udd_ep_is_halted(udd_g_ctrlreq.req.
   813da:	7920      	ldrb	r0, [r4, #4]
   813dc:	4b1b      	ldr	r3, [pc, #108]	; (8144c <udc_process_setup+0x250>)
   813de:	4798      	blx	r3
   813e0:	4602      	mov	r2, r0
   813e2:	481b      	ldr	r0, [pc, #108]	; (81450 <udc_process_setup+0x254>)
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   813e4:	4629      	mov	r1, r5
   813e6:	4b17      	ldr	r3, [pc, #92]	; (81444 <udc_process_setup+0x248>)
			return true;
   813e8:	2501      	movs	r5, #1
			wIndex & 0xFF) ? CPU_TO_LE16(USB_EP_STATUS_HALTED) : 0;
   813ea:	8002      	strh	r2, [r0, #0]
	udd_set_setup_payload( (uint8_t *) & udc_ep_status,
   813ec:	4798      	blx	r3
	return true;
   813ee:	e722      	b.n	81236 <udc_process_setup+0x3a>
	if (udd_g_ctrlreq.req.wLength) {
   813f0:	88e2      	ldrh	r2, [r4, #6]
   813f2:	2a00      	cmp	r2, #0
   813f4:	f47f af57 	bne.w	812a6 <udc_process_setup+0xaa>
	switch (udd_g_ctrlreq.req.wValue) {
   813f8:	8862      	ldrh	r2, [r4, #2]
   813fa:	2a02      	cmp	r2, #2
   813fc:	f47f af53 	bne.w	812a6 <udc_process_setup+0xaa>
		if (!udd_is_high_speed()) {
   81400:	4b14      	ldr	r3, [pc, #80]	; (81454 <udc_process_setup+0x258>)
   81402:	4798      	blx	r3
   81404:	4605      	mov	r5, r0
   81406:	b118      	cbz	r0, 81410 <udc_process_setup+0x214>
		if (udd_g_ctrlreq.req.wIndex & 0xff) {
   81408:	7923      	ldrb	r3, [r4, #4]
   8140a:	2b00      	cmp	r3, #0
   8140c:	f000 81bb 	beq.w	81786 <udc_process_setup+0x58a>
	if ((Udd_setup_recipient() == USB_REQ_RECIP_INTERFACE) || (Udd_setup_recipient() == USB_REQ_RECIP_DEVICE)) {
   81410:	7823      	ldrb	r3, [r4, #0]
   81412:	e707      	b.n	81224 <udc_process_setup+0x28>
	if (udd_g_ctrlreq.req.wLength) {
   81414:	88e2      	ldrh	r2, [r4, #6]
   81416:	2a00      	cmp	r2, #0
   81418:	f47f af45 	bne.w	812a6 <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wValue == USB_DEV_FEATURE_REMOTE_WAKEUP) {
   8141c:	8865      	ldrh	r5, [r4, #2]
   8141e:	2d01      	cmp	r5, #1
   81420:	f47f af41 	bne.w	812a6 <udc_process_setup+0xaa>
		udc_device_status &= CPU_TO_LE16(~(uint32_t)USB_DEV_STATUS_REMOTEWAKEUP);
   81424:	4a0c      	ldr	r2, [pc, #48]	; (81458 <udc_process_setup+0x25c>)
   81426:	8813      	ldrh	r3, [r2, #0]
   81428:	f023 0302 	bic.w	r3, r3, #2
   8142c:	8013      	strh	r3, [r2, #0]
		return true;
   8142e:	e702      	b.n	81236 <udc_process_setup+0x3a>
   81430:	2007228c 	.word	0x2007228c
   81434:	20071509 	.word	0x20071509
   81438:	2007150c 	.word	0x2007150c
   8143c:	00081005 	.word	0x00081005
   81440:	20071508 	.word	0x20071508
   81444:	00084349 	.word	0x00084349
   81448:	20070230 	.word	0x20070230
   8144c:	000843ad 	.word	0x000843ad
   81450:	20071506 	.word	0x20071506
   81454:	000842dd 	.word	0x000842dd
   81458:	20071504 	.word	0x20071504
	if (udd_g_ctrlreq.req.wLength) {
   8145c:	88e2      	ldrh	r2, [r4, #6]
   8145e:	2a00      	cmp	r2, #0
   81460:	f47f af21 	bne.w	812a6 <udc_process_setup+0xaa>
	if (!udd_getaddress()) {
   81464:	4b9c      	ldr	r3, [pc, #624]	; (816d8 <udc_process_setup+0x4dc>)
   81466:	4798      	blx	r3
   81468:	2800      	cmp	r0, #0
   8146a:	d0d1      	beq.n	81410 <udc_process_setup+0x214>
	if (udd_is_high_speed()) {
   8146c:	f8df 926c 	ldr.w	r9, [pc, #620]	; 816dc <udc_process_setup+0x4e0>
   81470:	47c8      	blx	r9
				udc_config.confdev_hs->bNumConfigurations) {
   81472:	f8df a26c 	ldr.w	sl, [pc, #620]	; 816e0 <udc_process_setup+0x4e4>
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81476:	78a3      	ldrb	r3, [r4, #2]
	if (udd_is_high_speed()) {
   81478:	2800      	cmp	r0, #0
   8147a:	f000 8125 	beq.w	816c8 <udc_process_setup+0x4cc>
				udc_config.confdev_hs->bNumConfigurations) {
   8147e:	f8da 2008 	ldr.w	r2, [sl, #8]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   81482:	7c52      	ldrb	r2, [r2, #17]
   81484:	429a      	cmp	r2, r3
   81486:	d3c3      	bcc.n	81410 <udc_process_setup+0x214>
	if (udc_num_configuration) {
   81488:	4e96      	ldr	r6, [pc, #600]	; (816e4 <udc_process_setup+0x4e8>)
   8148a:	7833      	ldrb	r3, [r6, #0]
   8148c:	b183      	cbz	r3, 814b0 <udc_process_setup+0x2b4>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8148e:	4f96      	ldr	r7, [pc, #600]	; (816e8 <udc_process_setup+0x4ec>)
   81490:	683b      	ldr	r3, [r7, #0]
   81492:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   81494:	791b      	ldrb	r3, [r3, #4]
   81496:	b15b      	cbz	r3, 814b0 <udc_process_setup+0x2b4>
   81498:	2500      	movs	r5, #0
   8149a:	4628      	mov	r0, r5
   8149c:	f8df 824c 	ldr.w	r8, [pc, #588]	; 816ec <udc_process_setup+0x4f0>
			udc_iface_disable(iface_num);
   814a0:	47c0      	blx	r8
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   814a2:	683b      	ldr	r3, [r7, #0]
		for (iface_num = 0;
   814a4:	3501      	adds	r5, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   814a6:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   814a8:	b2e8      	uxtb	r0, r5
   814aa:	791b      	ldrb	r3, [r3, #4]
   814ac:	4283      	cmp	r3, r0
   814ae:	d8f7      	bhi.n	814a0 <udc_process_setup+0x2a4>
	udc_device_status =
   814b0:	2200      	movs	r2, #0
   814b2:	4b8f      	ldr	r3, [pc, #572]	; (816f0 <udc_process_setup+0x4f4>)
   814b4:	801a      	strh	r2, [r3, #0]
	udc_num_configuration = udd_g_ctrlreq.req.wValue & 0xFF;
   814b6:	78a3      	ldrb	r3, [r4, #2]
   814b8:	7033      	strb	r3, [r6, #0]
	if (udc_num_configuration == 0) {
   814ba:	2b00      	cmp	r3, #0
   814bc:	f43f af5e 	beq.w	8137c <udc_process_setup+0x180>
	if (udd_is_high_speed()) {
   814c0:	47c8      	blx	r9
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   814c2:	7832      	ldrb	r2, [r6, #0]
	if (udd_is_high_speed()) {
   814c4:	2800      	cmp	r0, #0
   814c6:	f000 8133 	beq.w	81730 <udc_process_setup+0x534>
		udc_ptr_conf = &udc_config.conf_hs[udc_num_configuration - 1];
   814ca:	f8da 3010 	ldr.w	r3, [sl, #16]
   814ce:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   814d2:	3a01      	subs	r2, #1
   814d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   814d8:	681a      	ldr	r2, [r3, #0]
   814da:	4f83      	ldr	r7, [pc, #524]	; (816e8 <udc_process_setup+0x4ec>)
   814dc:	7912      	ldrb	r2, [r2, #4]
   814de:	603b      	str	r3, [r7, #0]
   814e0:	2a00      	cmp	r2, #0
   814e2:	f43f af4b 	beq.w	8137c <udc_process_setup+0x180>
   814e6:	2500      	movs	r5, #0
   814e8:	4e82      	ldr	r6, [pc, #520]	; (816f4 <udc_process_setup+0x4f8>)
   814ea:	462b      	mov	r3, r5
   814ec:	e005      	b.n	814fa <udc_process_setup+0x2fe>
   814ee:	683a      	ldr	r2, [r7, #0]
   814f0:	6812      	ldr	r2, [r2, #0]
   814f2:	7912      	ldrb	r2, [r2, #4]
   814f4:	429a      	cmp	r2, r3
   814f6:	f67f af41 	bls.w	8137c <udc_process_setup+0x180>
		if (!udc_iface_enable(iface_num, 0)) {
   814fa:	4618      	mov	r0, r3
   814fc:	2100      	movs	r1, #0
   814fe:	47b0      	blx	r6
	for (iface_num = 0; iface_num < udc_ptr_conf->desc->bNumInterfaces;
   81500:	3501      	adds	r5, #1
   81502:	b2eb      	uxtb	r3, r5
		if (!udc_iface_enable(iface_num, 0)) {
   81504:	2800      	cmp	r0, #0
   81506:	d1f2      	bne.n	814ee <udc_process_setup+0x2f2>
   81508:	e782      	b.n	81410 <udc_process_setup+0x214>
	if (udd_g_ctrlreq.req.wLength) {
   8150a:	88e2      	ldrh	r2, [r4, #6]
   8150c:	2a00      	cmp	r2, #0
   8150e:	f47f aeca 	bne.w	812a6 <udc_process_setup+0xaa>
	udd_g_ctrlreq.callback = udc_valid_address;
   81512:	4b79      	ldr	r3, [pc, #484]	; (816f8 <udc_process_setup+0x4fc>)
			return true;
   81514:	2501      	movs	r5, #1
	udd_g_ctrlreq.callback = udc_valid_address;
   81516:	6123      	str	r3, [r4, #16]
	return true;
   81518:	e68d      	b.n	81236 <udc_process_setup+0x3a>
			switch (udd_g_ctrlreq.req.bRequest) {
   8151a:	7862      	ldrb	r2, [r4, #1]
   8151c:	2a06      	cmp	r2, #6
   8151e:	d040      	beq.n	815a2 <udc_process_setup+0x3a6>
   81520:	2a08      	cmp	r2, #8
   81522:	d036      	beq.n	81592 <udc_process_setup+0x396>
   81524:	2a00      	cmp	r2, #0
   81526:	f47f aebe 	bne.w	812a6 <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wLength != sizeof(udc_device_status)) {
   8152a:	2d02      	cmp	r5, #2
   8152c:	f47f aebb 	bne.w	812a6 <udc_process_setup+0xaa>
	udd_set_setup_payload( (uint8_t *) & udc_device_status,
   81530:	4629      	mov	r1, r5
   81532:	486f      	ldr	r0, [pc, #444]	; (816f0 <udc_process_setup+0x4f4>)
   81534:	4b71      	ldr	r3, [pc, #452]	; (816fc <udc_process_setup+0x500>)
   81536:	4798      	blx	r3
			return true;
   81538:	2501      	movs	r5, #1
   8153a:	e67c      	b.n	81236 <udc_process_setup+0x3a>
			switch (udd_g_ctrlreq.req.bRequest) {
   8153c:	7862      	ldrb	r2, [r4, #1]
   8153e:	2a0b      	cmp	r2, #11
   81540:	f47f aeb1 	bne.w	812a6 <udc_process_setup+0xaa>
	if (udd_g_ctrlreq.req.wLength) {
   81544:	88e2      	ldrh	r2, [r4, #6]
   81546:	2a00      	cmp	r2, #0
   81548:	f47f aead 	bne.w	812a6 <udc_process_setup+0xaa>
	if (!udc_num_configuration) {
   8154c:	4a65      	ldr	r2, [pc, #404]	; (816e4 <udc_process_setup+0x4e8>)
   8154e:	7812      	ldrb	r2, [r2, #0]
   81550:	2a00      	cmp	r2, #0
   81552:	f43f aea8 	beq.w	812a6 <udc_process_setup+0xaa>
	iface_num = udd_g_ctrlreq.req.wIndex & 0xFF;
   81556:	7925      	ldrb	r5, [r4, #4]
	if (!udc_iface_disable(iface_num)) {
   81558:	4b64      	ldr	r3, [pc, #400]	; (816ec <udc_process_setup+0x4f0>)
   8155a:	4628      	mov	r0, r5
	setting_num = udd_g_ctrlreq.req.wValue & 0xFF;
   8155c:	8866      	ldrh	r6, [r4, #2]
	if (!udc_iface_disable(iface_num)) {
   8155e:	4798      	blx	r3
   81560:	2800      	cmp	r0, #0
   81562:	f43f af55 	beq.w	81410 <udc_process_setup+0x214>
	return udc_iface_enable(iface_num, setting_num);
   81566:	4628      	mov	r0, r5
   81568:	4b62      	ldr	r3, [pc, #392]	; (816f4 <udc_process_setup+0x4f8>)
   8156a:	b2f1      	uxtb	r1, r6
   8156c:	4798      	blx	r3
		if (udc_reqstd()) {
   8156e:	2800      	cmp	r0, #0
   81570:	f47f af04 	bne.w	8137c <udc_process_setup+0x180>
   81574:	e74c      	b.n	81410 <udc_process_setup+0x214>
	if (udd_g_ctrlreq.req.wValue == USB_EP_FEATURE_HALT) {
   81576:	88e2      	ldrh	r2, [r4, #6]
   81578:	8861      	ldrh	r1, [r4, #2]
   8157a:	430a      	orrs	r2, r1
   8157c:	b292      	uxth	r2, r2
   8157e:	2a00      	cmp	r2, #0
   81580:	f47f af0b 	bne.w	8139a <udc_process_setup+0x19e>
		return udd_ep_clear_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   81584:	7920      	ldrb	r0, [r4, #4]
   81586:	4b5e      	ldr	r3, [pc, #376]	; (81700 <udc_process_setup+0x504>)
   81588:	4798      	blx	r3
		if (udc_reqstd()) {
   8158a:	2800      	cmp	r0, #0
   8158c:	f47f aef6 	bne.w	8137c <udc_process_setup+0x180>
   81590:	e73e      	b.n	81410 <udc_process_setup+0x214>
	if (udd_g_ctrlreq.req.wLength != 1) {
   81592:	2d01      	cmp	r5, #1
   81594:	f47f ae87 	bne.w	812a6 <udc_process_setup+0xaa>
	udd_set_setup_payload(&udc_num_configuration,1);
   81598:	4629      	mov	r1, r5
   8159a:	4852      	ldr	r0, [pc, #328]	; (816e4 <udc_process_setup+0x4e8>)
   8159c:	4b57      	ldr	r3, [pc, #348]	; (816fc <udc_process_setup+0x500>)
   8159e:	4798      	blx	r3
	return true;
   815a0:	e649      	b.n	81236 <udc_process_setup+0x3a>
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   815a2:	8861      	ldrh	r1, [r4, #2]
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   815a4:	0a0a      	lsrs	r2, r1, #8
   815a6:	3a01      	subs	r2, #1
	conf_num = udd_g_ctrlreq.req.wValue & 0xff;
   815a8:	b2cd      	uxtb	r5, r1
	switch ((uint8_t) (udd_g_ctrlreq.req.wValue >> 8)) {
   815aa:	2a0e      	cmp	r2, #14
   815ac:	f63f ae3a 	bhi.w	81224 <udc_process_setup+0x28>
   815b0:	a101      	add	r1, pc, #4	; (adr r1, 815b8 <udc_process_setup+0x3bc>)
   815b2:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
   815b6:	bf00      	nop
   815b8:	0008166d 	.word	0x0008166d
   815bc:	00081643 	.word	0x00081643
   815c0:	00081681 	.word	0x00081681
   815c4:	00081225 	.word	0x00081225
   815c8:	00081225 	.word	0x00081225
   815cc:	00081637 	.word	0x00081637
   815d0:	0008160d 	.word	0x0008160d
   815d4:	00081225 	.word	0x00081225
   815d8:	00081225 	.word	0x00081225
   815dc:	00081225 	.word	0x00081225
   815e0:	00081225 	.word	0x00081225
   815e4:	00081225 	.word	0x00081225
   815e8:	00081225 	.word	0x00081225
   815ec:	00081225 	.word	0x00081225
   815f0:	000815f5 	.word	0x000815f5
		udd_set_setup_payload( (uint8_t *) &MS_BOS_PACKET,
   815f4:	2121      	movs	r1, #33	; 0x21
   815f6:	4843      	ldr	r0, [pc, #268]	; (81704 <udc_process_setup+0x508>)
   815f8:	4b40      	ldr	r3, [pc, #256]	; (816fc <udc_process_setup+0x500>)
   815fa:	4798      	blx	r3
	if (udd_g_ctrlreq.req.wLength < udd_g_ctrlreq.payload_size) {
   815fc:	88e3      	ldrh	r3, [r4, #6]
   815fe:	89a2      	ldrh	r2, [r4, #12]
   81600:	429a      	cmp	r2, r3
   81602:	f67f aebb 	bls.w	8137c <udc_process_setup+0x180>
			return true;
   81606:	2501      	movs	r5, #1
		udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   81608:	81a3      	strh	r3, [r4, #12]
   8160a:	e614      	b.n	81236 <udc_process_setup+0x3a>
		if (!udd_is_high_speed()) {
   8160c:	4b33      	ldr	r3, [pc, #204]	; (816dc <udc_process_setup+0x4e0>)
   8160e:	4798      	blx	r3
			if (conf_num >= udc_config.confdev_hs->
   81610:	4b33      	ldr	r3, [pc, #204]	; (816e0 <udc_process_setup+0x4e4>)
		if (!udd_is_high_speed()) {
   81612:	2800      	cmp	r0, #0
   81614:	f040 8094 	bne.w	81740 <udc_process_setup+0x544>
			if (conf_num >= udc_config.confdev_hs->
   81618:	689a      	ldr	r2, [r3, #8]
   8161a:	7c52      	ldrb	r2, [r2, #17]
   8161c:	42aa      	cmp	r2, r5
   8161e:	f67f aef7 	bls.w	81410 <udc_process_setup+0x214>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81622:	691a      	ldr	r2, [r3, #16]
			udd_set_setup_payload(
   81624:	4b35      	ldr	r3, [pc, #212]	; (816fc <udc_process_setup+0x500>)
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81626:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   8162a:	8841      	ldrh	r1, [r0, #2]
   8162c:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   8162e:	2207      	movs	r2, #7
   81630:	68a3      	ldr	r3, [r4, #8]
   81632:	705a      	strb	r2, [r3, #1]
		break;
   81634:	e7e2      	b.n	815fc <udc_process_setup+0x400>
		udd_set_setup_payload( (uint8_t *) udc_config.qualifier,
   81636:	4a2a      	ldr	r2, [pc, #168]	; (816e0 <udc_process_setup+0x4e4>)
   81638:	4b30      	ldr	r3, [pc, #192]	; (816fc <udc_process_setup+0x500>)
   8163a:	68d0      	ldr	r0, [r2, #12]
   8163c:	7801      	ldrb	r1, [r0, #0]
   8163e:	4798      	blx	r3
		break;
   81640:	e7dc      	b.n	815fc <udc_process_setup+0x400>
		if (udd_is_high_speed()) {
   81642:	4b26      	ldr	r3, [pc, #152]	; (816dc <udc_process_setup+0x4e0>)
   81644:	4798      	blx	r3
			if (conf_num >= udc_config.confdev_hs->
   81646:	4b26      	ldr	r3, [pc, #152]	; (816e0 <udc_process_setup+0x4e4>)
		if (udd_is_high_speed()) {
   81648:	2800      	cmp	r0, #0
   8164a:	f000 8090 	beq.w	8176e <udc_process_setup+0x572>
			if (conf_num >= udc_config.confdev_hs->
   8164e:	689a      	ldr	r2, [r3, #8]
   81650:	7c52      	ldrb	r2, [r2, #17]
   81652:	42aa      	cmp	r2, r5
   81654:	f67f aedc 	bls.w	81410 <udc_process_setup+0x214>
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   81658:	691a      	ldr	r2, [r3, #16]
			udd_set_setup_payload(
   8165a:	4b28      	ldr	r3, [pc, #160]	; (816fc <udc_process_setup+0x500>)
				(uint8_t *)udc_config.conf_hs[conf_num].desc,
   8165c:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   81660:	8841      	ldrh	r1, [r0, #2]
   81662:	4798      	blx	r3
		((usb_conf_desc_t *) udd_g_ctrlreq.payload)->bDescriptorType =
   81664:	2202      	movs	r2, #2
   81666:	68a3      	ldr	r3, [r4, #8]
   81668:	705a      	strb	r2, [r3, #1]
		break;
   8166a:	e7c7      	b.n	815fc <udc_process_setup+0x400>
		if (!udd_is_high_speed()) {
   8166c:	4b1b      	ldr	r3, [pc, #108]	; (816dc <udc_process_setup+0x4e0>)
   8166e:	4798      	blx	r3
   81670:	2800      	cmp	r0, #0
   81672:	d171      	bne.n	81758 <udc_process_setup+0x55c>
				(uint8_t *) udc_config.confdev_hs,
   81674:	4a1a      	ldr	r2, [pc, #104]	; (816e0 <udc_process_setup+0x4e4>)
			udd_set_setup_payload(
   81676:	4b21      	ldr	r3, [pc, #132]	; (816fc <udc_process_setup+0x500>)
				(uint8_t *) udc_config.confdev_hs,
   81678:	6890      	ldr	r0, [r2, #8]
			udd_set_setup_payload(
   8167a:	7801      	ldrb	r1, [r0, #0]
   8167c:	4798      	blx	r3
   8167e:	e7bd      	b.n	815fc <udc_process_setup+0x400>
	switch (udd_g_ctrlreq.req.wValue & 0xff) {
   81680:	2d03      	cmp	r5, #3
   81682:	f63f adcf 	bhi.w	81224 <udc_process_setup+0x28>
   81686:	e8df f005 	tbb	[pc, r5]
   8168a:	171a      	.short	0x171a
   8168c:	0214      	.short	0x0214
   8168e:	2120      	movs	r1, #32
   81690:	4b1d      	ldr	r3, [pc, #116]	; (81708 <udc_process_setup+0x50c>)
		for(i = 0; i < str_length; i++) {
   81692:	4e1e      	ldr	r6, [pc, #120]	; (8170c <udc_process_setup+0x510>)
   81694:	185d      	adds	r5, r3, r1
   81696:	4632      	mov	r2, r6
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   81698:	f813 0b01 	ldrb.w	r0, [r3], #1
		for(i = 0; i < str_length; i++) {
   8169c:	42ab      	cmp	r3, r5
			udc_string_desc.string[i] = cpu_to_le16((le16_t)str[i]);
   8169e:	f822 0f02 	strh.w	r0, [r2, #2]!
		for(i = 0; i < str_length; i++) {
   816a2:	d1f9      	bne.n	81698 <udc_process_setup+0x49c>
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   816a4:	0049      	lsls	r1, r1, #1
   816a6:	3102      	adds	r1, #2
		udd_set_setup_payload(
   816a8:	4818      	ldr	r0, [pc, #96]	; (8170c <udc_process_setup+0x510>)
   816aa:	4b14      	ldr	r3, [pc, #80]	; (816fc <udc_process_setup+0x500>)
		udc_string_desc.header.bLength = 2 + (str_length) * 2;
   816ac:	7031      	strb	r1, [r6, #0]
		udd_set_setup_payload(
   816ae:	4798      	blx	r3
   816b0:	e7a4      	b.n	815fc <udc_process_setup+0x400>
		str_length = USB_DEVICE_PRODUCT_NAME_SIZE;
   816b2:	2120      	movs	r1, #32
		str = udc_string_product_name;
   816b4:	4b16      	ldr	r3, [pc, #88]	; (81710 <udc_process_setup+0x514>)
   816b6:	e7ec      	b.n	81692 <udc_process_setup+0x496>
		str_length = USB_DEVICE_MANUFACTURE_NAME_SIZE;
   816b8:	2115      	movs	r1, #21
		str = udc_string_manufacturer_name;
   816ba:	4b16      	ldr	r3, [pc, #88]	; (81714 <udc_process_setup+0x518>)
   816bc:	e7e9      	b.n	81692 <udc_process_setup+0x496>
		udd_set_setup_payload((uint8_t *) &udc_string_desc_languageid,
   816be:	2104      	movs	r1, #4
   816c0:	4815      	ldr	r0, [pc, #84]	; (81718 <udc_process_setup+0x51c>)
   816c2:	4b0e      	ldr	r3, [pc, #56]	; (816fc <udc_process_setup+0x500>)
   816c4:	4798      	blx	r3
	if (str_length) {
   816c6:	e799      	b.n	815fc <udc_process_setup+0x400>
				udc_config.confdev_lsfs->bNumConfigurations) {
   816c8:	f8da 2000 	ldr.w	r2, [sl]
		if ((udd_g_ctrlreq.req.wValue & 0xFF) >
   816cc:	7c52      	ldrb	r2, [r2, #17]
   816ce:	429a      	cmp	r2, r3
   816d0:	f4bf aeda 	bcs.w	81488 <udc_process_setup+0x28c>
   816d4:	e69c      	b.n	81410 <udc_process_setup+0x214>
   816d6:	bf00      	nop
   816d8:	00084319 	.word	0x00084319
   816dc:	000842dd 	.word	0x000842dd
   816e0:	20070960 	.word	0x20070960
   816e4:	20071509 	.word	0x20071509
   816e8:	2007150c 	.word	0x2007150c
   816ec:	00081065 	.word	0x00081065
   816f0:	20071504 	.word	0x20071504
   816f4:	000810f1 	.word	0x000810f1
   816f8:	00080ff1 	.word	0x00080ff1
   816fc:	00084349 	.word	0x00084349
   81700:	000844ad 	.word	0x000844ad
   81704:	2007020c 	.word	0x2007020c
   81708:	200701d0 	.word	0x200701d0
   8170c:	2007037c 	.word	0x2007037c
   81710:	200703dc 	.word	0x200703dc
   81714:	200703c4 	.word	0x200703c4
   81718:	200703c0 	.word	0x200703c0
		udd_ep_abort(udd_g_ctrlreq.req.wIndex & 0xFF);
   8171c:	7920      	ldrb	r0, [r4, #4]
   8171e:	4b32      	ldr	r3, [pc, #200]	; (817e8 <udc_process_setup+0x5ec>)
   81720:	4798      	blx	r3
		return udd_ep_set_halt(udd_g_ctrlreq.req.wIndex & 0xFF);
   81722:	7920      	ldrb	r0, [r4, #4]
   81724:	4b31      	ldr	r3, [pc, #196]	; (817ec <udc_process_setup+0x5f0>)
   81726:	4798      	blx	r3
		if (udc_reqstd()) {
   81728:	2800      	cmp	r0, #0
   8172a:	f47f ae27 	bne.w	8137c <udc_process_setup+0x180>
   8172e:	e66f      	b.n	81410 <udc_process_setup+0x214>
		udc_ptr_conf = &udc_config.conf_lsfs[udc_num_configuration - 1];
   81730:	f8da 3004 	ldr.w	r3, [sl, #4]
   81734:	f102 5200 	add.w	r2, r2, #536870912	; 0x20000000
   81738:	3a01      	subs	r2, #1
   8173a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   8173e:	e6cb      	b.n	814d8 <udc_process_setup+0x2dc>
			if (conf_num >= udc_config.confdev_lsfs->
   81740:	681a      	ldr	r2, [r3, #0]
   81742:	7c52      	ldrb	r2, [r2, #17]
   81744:	42aa      	cmp	r2, r5
   81746:	f67f ae63 	bls.w	81410 <udc_process_setup+0x214>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   8174a:	685a      	ldr	r2, [r3, #4]
			udd_set_setup_payload(
   8174c:	4b28      	ldr	r3, [pc, #160]	; (817f0 <udc_process_setup+0x5f4>)
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   8174e:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   81752:	8841      	ldrh	r1, [r0, #2]
   81754:	4798      	blx	r3
   81756:	e76a      	b.n	8162e <udc_process_setup+0x432>
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   81758:	2010      	movs	r0, #16
   8175a:	2102      	movs	r1, #2
   8175c:	4b25      	ldr	r3, [pc, #148]	; (817f4 <udc_process_setup+0x5f8>)
			udd_set_setup_payload(
   8175e:	4d24      	ldr	r5, [pc, #144]	; (817f0 <udc_process_setup+0x5f4>)
			(udc_config.confdev_lsfs)->bcdUSB = 0x0210;
   81760:	681a      	ldr	r2, [r3, #0]
   81762:	7090      	strb	r0, [r2, #2]
   81764:	70d1      	strb	r1, [r2, #3]
				(uint8_t *) udc_config.confdev_lsfs,
   81766:	6818      	ldr	r0, [r3, #0]
			udd_set_setup_payload(
   81768:	7801      	ldrb	r1, [r0, #0]
   8176a:	47a8      	blx	r5
   8176c:	e746      	b.n	815fc <udc_process_setup+0x400>
			if (conf_num >= udc_config.confdev_lsfs->
   8176e:	681a      	ldr	r2, [r3, #0]
   81770:	7c52      	ldrb	r2, [r2, #17]
   81772:	42aa      	cmp	r2, r5
   81774:	f67f ae4c 	bls.w	81410 <udc_process_setup+0x214>
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   81778:	685a      	ldr	r2, [r3, #4]
			udd_set_setup_payload(
   8177a:	4b1d      	ldr	r3, [pc, #116]	; (817f0 <udc_process_setup+0x5f4>)
				(uint8_t *)udc_config.conf_lsfs[conf_num].desc,
   8177c:	f852 0035 	ldr.w	r0, [r2, r5, lsl #3]
			udd_set_setup_payload(
   81780:	8841      	ldrh	r1, [r0, #2]
   81782:	4798      	blx	r3
   81784:	e76e      	b.n	81664 <udc_process_setup+0x468>
	if (udc_num_configuration) {
   81786:	4e1c      	ldr	r6, [pc, #112]	; (817f8 <udc_process_setup+0x5fc>)
   81788:	7832      	ldrb	r2, [r6, #0]
   8178a:	b192      	cbz	r2, 817b2 <udc_process_setup+0x5b6>
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   8178c:	4f1b      	ldr	r7, [pc, #108]	; (817fc <udc_process_setup+0x600>)
   8178e:	683a      	ldr	r2, [r7, #0]
   81790:	6812      	ldr	r2, [r2, #0]
		for (iface_num = 0;
   81792:	7912      	ldrb	r2, [r2, #4]
   81794:	b16a      	cbz	r2, 817b2 <udc_process_setup+0x5b6>
   81796:	4699      	mov	r9, r3
   81798:	4618      	mov	r0, r3
   8179a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 81800 <udc_process_setup+0x604>
			udc_iface_disable(iface_num);
   8179e:	47c0      	blx	r8
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   817a0:	683b      	ldr	r3, [r7, #0]
		for (iface_num = 0;
   817a2:	f109 0901 	add.w	r9, r9, #1
				iface_num < udc_ptr_conf->desc->bNumInterfaces;
   817a6:	681b      	ldr	r3, [r3, #0]
		for (iface_num = 0;
   817a8:	fa5f f089 	uxtb.w	r0, r9
   817ac:	791b      	ldrb	r3, [r3, #4]
   817ae:	4283      	cmp	r3, r0
   817b0:	d8f5      	bhi.n	8179e <udc_process_setup+0x5a2>
	udc_num_configuration = 0;
   817b2:	2200      	movs	r2, #0
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   817b4:	88a3      	ldrh	r3, [r4, #4]
	udc_device_status =
   817b6:	4913      	ldr	r1, [pc, #76]	; (81804 <udc_process_setup+0x608>)
   817b8:	0a1b      	lsrs	r3, r3, #8
   817ba:	3b01      	subs	r3, #1
   817bc:	800a      	strh	r2, [r1, #0]
	udc_num_configuration = 0;
   817be:	7032      	strb	r2, [r6, #0]
		switch ((udd_g_ctrlreq.req.wIndex >> 8) & 0xFF) {
   817c0:	2b03      	cmp	r3, #3
   817c2:	f63f ae25 	bhi.w	81410 <udc_process_setup+0x214>
   817c6:	e8df f003 	tbb	[pc, r3]
   817ca:	080b      	.short	0x080b
   817cc:	0205      	.short	0x0205
			udd_g_ctrlreq.callback = udd_test_mode_packet;
   817ce:	4b0e      	ldr	r3, [pc, #56]	; (81808 <udc_process_setup+0x60c>)
   817d0:	6123      	str	r3, [r4, #16]
			return true;
   817d2:	e530      	b.n	81236 <udc_process_setup+0x3a>
			udd_g_ctrlreq.callback = udd_test_mode_se0_nak;
   817d4:	4b0d      	ldr	r3, [pc, #52]	; (8180c <udc_process_setup+0x610>)
   817d6:	6123      	str	r3, [r4, #16]
			return true;
   817d8:	e52d      	b.n	81236 <udc_process_setup+0x3a>
			udd_g_ctrlreq.callback = udd_test_mode_k;
   817da:	4b0d      	ldr	r3, [pc, #52]	; (81810 <udc_process_setup+0x614>)
   817dc:	6123      	str	r3, [r4, #16]
			return true;
   817de:	e52a      	b.n	81236 <udc_process_setup+0x3a>
			udd_g_ctrlreq.callback = udd_test_mode_j;
   817e0:	4b0c      	ldr	r3, [pc, #48]	; (81814 <udc_process_setup+0x618>)
   817e2:	6123      	str	r3, [r4, #16]
			return true;
   817e4:	e527      	b.n	81236 <udc_process_setup+0x3a>
   817e6:	bf00      	nop
   817e8:	00084899 	.word	0x00084899
   817ec:	000843c1 	.word	0x000843c1
   817f0:	00084349 	.word	0x00084349
   817f4:	20070960 	.word	0x20070960
   817f8:	20071509 	.word	0x20071509
   817fc:	2007150c 	.word	0x2007150c
   81800:	00081065 	.word	0x00081065
   81804:	20071504 	.word	0x20071504
   81808:	00085409 	.word	0x00085409
   8180c:	000853f5 	.word	0x000853f5
   81810:	000853d9 	.word	0x000853d9
   81814:	000853bd 	.word	0x000853bd

00081818 <naeusb_add_in_handler>:
    return main_b_vendor_enable;
}

bool naeusb_add_in_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_in_handlers < 16) {
   81818:	4907      	ldr	r1, [pc, #28]	; (81838 <naeusb_add_in_handler+0x20>)
   8181a:	780a      	ldrb	r2, [r1, #0]
   8181c:	2a0f      	cmp	r2, #15
   8181e:	d901      	bls.n	81824 <naeusb_add_in_handler+0xc>
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
        return true;
    }
    return false;
   81820:	2000      	movs	r0, #0
    
}
   81822:	4770      	bx	lr
   81824:	4603      	mov	r3, r0
{
   81826:	b410      	push	{r4}
        naeusb_in_request_handlers[naeusb_num_in_handlers++] = new_handler;
   81828:	1c50      	adds	r0, r2, #1
   8182a:	4c04      	ldr	r4, [pc, #16]	; (8183c <naeusb_add_in_handler+0x24>)
   8182c:	7008      	strb	r0, [r1, #0]
   8182e:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        return true;
   81832:	2001      	movs	r0, #1
}
   81834:	bc10      	pop	{r4}
   81836:	4770      	bx	lr
   81838:	200719d4 	.word	0x200719d4
   8183c:	20071994 	.word	0x20071994

00081840 <naeusb_add_out_handler>:

bool naeusb_add_out_handler(usb_request_handle_func new_handler)
{
    if (naeusb_num_out_handlers < 16) {
   81840:	4907      	ldr	r1, [pc, #28]	; (81860 <naeusb_add_out_handler+0x20>)
   81842:	780a      	ldrb	r2, [r1, #0]
   81844:	2a0f      	cmp	r2, #15
   81846:	d901      	bls.n	8184c <naeusb_add_out_handler+0xc>
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
        return true;
    }
    return false;
   81848:	2000      	movs	r0, #0
    
}
   8184a:	4770      	bx	lr
   8184c:	4603      	mov	r3, r0
{
   8184e:	b410      	push	{r4}
        naeusb_out_request_handlers[naeusb_num_out_handlers++] = new_handler;
   81850:	1c50      	adds	r0, r2, #1
   81852:	4c04      	ldr	r4, [pc, #16]	; (81864 <naeusb_add_out_handler+0x24>)
   81854:	7008      	strb	r0, [r1, #0]
   81856:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
        return true;
   8185a:	2001      	movs	r0, #1
}
   8185c:	bc10      	pop	{r4}
   8185e:	4770      	bx	lr
   81860:	200719d5 	.word	0x200719d5
   81864:	200719d8 	.word	0x200719d8

00081868 <main_suspend_action>:

//this stuff just turns leds on and off
void main_suspend_action(void)
{
	active = false;
	ui_powerdown();
   81868:	4b00      	ldr	r3, [pc, #0]	; (8186c <main_suspend_action+0x4>)
   8186a:	4718      	bx	r3
   8186c:	000808a5 	.word	0x000808a5

00081870 <main_resume_action>:
}

void main_resume_action(void)
{
    ui_wakeup();
   81870:	4b00      	ldr	r3, [pc, #0]	; (81874 <main_resume_action+0x4>)
   81872:	4718      	bx	r3
   81874:	000808a9 	.word	0x000808a9

00081878 <main_sof_action>:
}

void main_sof_action(void)
{
    if (!main_b_vendor_enable)
   81878:	4b05      	ldr	r3, [pc, #20]	; (81890 <main_sof_action+0x18>)
   8187a:	781b      	ldrb	r3, [r3, #0]
   8187c:	b903      	cbnz	r3, 81880 <main_sof_action+0x8>
   8187e:	4770      	bx	lr
{
   81880:	b510      	push	{r4, lr}
        return;
    ui_process(udd_get_frame_number());
   81882:	4b04      	ldr	r3, [pc, #16]	; (81894 <main_sof_action+0x1c>)
   81884:	4798      	blx	r3
}
   81886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ui_process(udd_get_frame_number());
   8188a:	4b03      	ldr	r3, [pc, #12]	; (81898 <main_sof_action+0x20>)
   8188c:	4718      	bx	r3
   8188e:	bf00      	nop
   81890:	200703fd 	.word	0x200703fd
   81894:	00084329 	.word	0x00084329
   81898:	000808ad 	.word	0x000808ad

0008189c <main_vendor_enable>:

void main_vendor_bulk_out_received(udd_ep_status_t status,
                                   iram_size_t nb_transfered, udd_ep_id_t ep);

bool main_vendor_enable(void)
{
   8189c:	b538      	push	{r3, r4, r5, lr}
    active = true;
    main_b_vendor_enable = true;
   8189e:	2401      	movs	r4, #1
   818a0:	4d04      	ldr	r5, [pc, #16]	; (818b4 <main_vendor_enable+0x18>)
    // Start data reception on OUT endpoints
// #if UDI_VENDOR_EPS_SIZE_BULK_FS
//     //main_vendor_bulk_in_received(UDD_EP_TRANSFER_OK, 0, 0);
    udi_vendor_bulk_out_run(
   818a2:	f44f 6180 	mov.w	r1, #1024	; 0x400
   818a6:	4a04      	ldr	r2, [pc, #16]	; (818b8 <main_vendor_enable+0x1c>)
   818a8:	4b04      	ldr	r3, [pc, #16]	; (818bc <main_vendor_enable+0x20>)
   818aa:	4805      	ldr	r0, [pc, #20]	; (818c0 <main_vendor_enable+0x24>)
    main_b_vendor_enable = true;
   818ac:	702c      	strb	r4, [r5, #0]
    udi_vendor_bulk_out_run(
   818ae:	4798      	blx	r3
        main_buf_loopback,
        sizeof(main_buf_loopback),
        main_vendor_bulk_out_received);
// #endif
    return true;
}
   818b0:	4620      	mov	r0, r4
   818b2:	bd38      	pop	{r3, r4, r5, pc}
   818b4:	200703fd 	.word	0x200703fd
   818b8:	000825c1 	.word	0x000825c1
   818bc:	00083675 	.word	0x00083675
   818c0:	20071594 	.word	0x20071594

000818c4 <main_vendor_disable>:

void main_vendor_disable(void)
{
    main_b_vendor_enable = false;
   818c4:	2200      	movs	r2, #0
   818c6:	4b01      	ldr	r3, [pc, #4]	; (818cc <main_vendor_disable+0x8>)
   818c8:	701a      	strb	r2, [r3, #0]
}
   818ca:	4770      	bx	lr
   818cc:	200703fd 	.word	0x200703fd

000818d0 <main_setup_out_received>:

bool main_setup_out_received(void)
{
   818d0:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;
    udd_g_ctrlreq.payload = ctrlbuffer;
   818d2:	4b0f      	ldr	r3, [pc, #60]	; (81910 <main_setup_out_received+0x40>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));

    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   818d4:	4a0f      	ldr	r2, [pc, #60]	; (81914 <main_setup_out_received+0x44>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   818d6:	88d9      	ldrh	r1, [r3, #6]
    udd_g_ctrlreq.payload = ctrlbuffer;
   818d8:	480f      	ldr	r0, [pc, #60]	; (81918 <main_setup_out_received+0x48>)
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   818da:	2980      	cmp	r1, #128	; 0x80
   818dc:	bf28      	it	cs
   818de:	2180      	movcs	r1, #128	; 0x80
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   818e0:	7812      	ldrb	r2, [r2, #0]
    udd_g_ctrlreq.payload = ctrlbuffer;
   818e2:	6098      	str	r0, [r3, #8]
    udd_g_ctrlreq.payload_size = min(udd_g_ctrlreq.req.wLength,	sizeof(ctrlbuffer));
   818e4:	8199      	strh	r1, [r3, #12]
    for (uint8_t i = naeusb_num_out_handlers; i > 0; i--) {
   818e6:	b18a      	cbz	r2, 8190c <main_setup_out_received+0x3c>
   818e8:	4c0c      	ldr	r4, [pc, #48]	; (8191c <main_setup_out_received+0x4c>)
   818ea:	1e55      	subs	r5, r2, #1
   818ec:	b2ed      	uxtb	r5, r5
   818ee:	1b53      	subs	r3, r2, r5
   818f0:	1f25      	subs	r5, r4, #4
   818f2:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   818f6:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   818fa:	e001      	b.n	81900 <main_setup_out_received+0x30>
   818fc:	42ac      	cmp	r4, r5
   818fe:	d005      	beq.n	8190c <main_setup_out_received+0x3c>
        handler_status = naeusb_out_request_handlers[i-1]();
   81900:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   81904:	4798      	blx	r3
        if (handler_status == true) {
   81906:	2800      	cmp	r0, #0
   81908:	d0f8      	beq.n	818fc <main_setup_out_received+0x2c>
        }
    }

    return false;

}
   8190a:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   8190c:	2000      	movs	r0, #0
}
   8190e:	bd38      	pop	{r3, r4, r5, pc}
   81910:	2007228c 	.word	0x2007228c
   81914:	200719d5 	.word	0x200719d5
   81918:	20071514 	.word	0x20071514
   8191c:	200719d8 	.word	0x200719d8

00081920 <main_setup_in_received>:

bool main_setup_in_received(void)
{
   81920:	b538      	push	{r3, r4, r5, lr}
    bool handler_status = false;

    for (uint8_t i = naeusb_num_in_handlers; i > 0; i--) {
   81922:	4b0b      	ldr	r3, [pc, #44]	; (81950 <main_setup_in_received+0x30>)
   81924:	781a      	ldrb	r2, [r3, #0]
   81926:	b18a      	cbz	r2, 8194c <main_setup_in_received+0x2c>
   81928:	4c0a      	ldr	r4, [pc, #40]	; (81954 <main_setup_in_received+0x34>)
   8192a:	1e55      	subs	r5, r2, #1
   8192c:	b2ed      	uxtb	r5, r5
   8192e:	1b53      	subs	r3, r2, r5
   81930:	1f25      	subs	r5, r4, #4
   81932:	eb05 0583 	add.w	r5, r5, r3, lsl #2
   81936:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   8193a:	e001      	b.n	81940 <main_setup_in_received+0x20>
   8193c:	42ac      	cmp	r4, r5
   8193e:	d005      	beq.n	8194c <main_setup_in_received+0x2c>
        handler_status = naeusb_in_request_handlers[i-1]();
   81940:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   81944:	4798      	blx	r3
        if (handler_status == true) {
   81946:	2800      	cmp	r0, #0
   81948:	d0f8      	beq.n	8193c <main_setup_in_received+0x1c>
        }
    }

    return false;

   8194a:	bd38      	pop	{r3, r4, r5, pc}
    return false;
   8194c:	2000      	movs	r0, #0
   8194e:	bd38      	pop	{r3, r4, r5, pc}
   81950:	200719d4 	.word	0x200719d4
   81954:	20071994 	.word	0x20071994

00081958 <naeusb_setup_out_received>:
}


bool naeusb_setup_out_received(void)
{
    switch (udd_g_ctrlreq.req.bRequest) {
   81958:	4b04      	ldr	r3, [pc, #16]	; (8196c <naeusb_setup_out_received+0x14>)
   8195a:	785a      	ldrb	r2, [r3, #1]
   8195c:	2a22      	cmp	r2, #34	; 0x22
        case REQ_SAM_CFG:
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   8195e:	bf03      	ittte	eq
   81960:	4a03      	ldreq	r2, [pc, #12]	; (81970 <naeusb_setup_out_received+0x18>)
            return true;
   81962:	2001      	moveq	r0, #1
            udd_g_ctrlreq.callback = naeusb_sam_cfg_out;
   81964:	611a      	streq	r2, [r3, #16]
            break;
    }
    return false;
   81966:	2000      	movne	r0, #0
}
   81968:	4770      	bx	lr
   8196a:	bf00      	nop
   8196c:	2007228c 	.word	0x2007228c
   81970:	00081975 	.word	0x00081975

00081974 <naeusb_sam_cfg_out>:
{
   81974:	b510      	push	{r4, lr}
    switch(udd_g_ctrlreq.req.wValue & 0xFF)
   81976:	4b28      	ldr	r3, [pc, #160]	; (81a18 <naeusb_sam_cfg_out+0xa4>)
   81978:	885a      	ldrh	r2, [r3, #2]
   8197a:	b2d3      	uxtb	r3, r2
   8197c:	3b01      	subs	r3, #1
   8197e:	2b12      	cmp	r3, #18
   81980:	d80e      	bhi.n	819a0 <naeusb_sam_cfg_out+0x2c>
   81982:	e8df f003 	tbb	[pc, r3]
   81986:	1b0e      	.short	0x1b0e
   81988:	0d0d0d20 	.word	0x0d0d0d20
   8198c:	0d0d0d0d 	.word	0x0d0d0d0d
   81990:	0d0d0d0d 	.word	0x0d0d0d0d
   81994:	4541340d 	.word	0x4541340d
   81998:	0a          	.byte	0x0a
   81999:	00          	.byte	0x00
        CURRENT_ERRORS = 0;
   8199a:	2200      	movs	r2, #0
   8199c:	4b1f      	ldr	r3, [pc, #124]	; (81a1c <naeusb_sam_cfg_out+0xa8>)
   8199e:	801a      	strh	r2, [r3, #0]
}
   819a0:	bd10      	pop	{r4, pc}
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   819a2:	213e      	movs	r1, #62	; 0x3e
   819a4:	2000      	movs	r0, #0
   819a6:	4b1e      	ldr	r3, [pc, #120]	; (81a20 <naeusb_sam_cfg_out+0xac>)
   819a8:	4798      	blx	r3
			pmc_us_to_moscxtst(BOARD_OSC_STARTUP_US,
				OSC_SLCK_32K_RC_HZ));
		break;
   819aa:	4c1e      	ldr	r4, [pc, #120]	; (81a24 <naeusb_sam_cfg_out+0xb0>)
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   819ac:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   819ae:	2800      	cmp	r0, #0
   819b0:	d0fc      	beq.n	819ac <naeusb_sam_cfg_out+0x38>
   819b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
   819b6:	2010      	movs	r0, #16
   819b8:	4b1b      	ldr	r3, [pc, #108]	; (81a28 <naeusb_sam_cfg_out+0xb4>)
   819ba:	4718      	bx	r3
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   819bc:	2010      	movs	r0, #16
}
   819be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   819c2:	4b1a      	ldr	r3, [pc, #104]	; (81a2c <naeusb_sam_cfg_out+0xb8>)
   819c4:	4718      	bx	r3
        board_power(0);
   819c6:	4b1a      	ldr	r3, [pc, #104]	; (81a30 <naeusb_sam_cfg_out+0xbc>)
   819c8:	4798      	blx	r3
        efc_perform_command(EFC0, EFC_FCMD_CGPB, 1);
   819ca:	2201      	movs	r2, #1
   819cc:	210c      	movs	r1, #12
   819ce:	4b19      	ldr	r3, [pc, #100]	; (81a34 <naeusb_sam_cfg_out+0xc0>)
   819d0:	4819      	ldr	r0, [pc, #100]	; (81a38 <naeusb_sam_cfg_out+0xc4>)
   819d2:	4798      	blx	r3
 *
 * The driver must remove pull-up on USB line D- or D+.
 */
static inline void udc_detach(void)
{
	udd_detach();
   819d4:	4b19      	ldr	r3, [pc, #100]	; (81a3c <naeusb_sam_cfg_out+0xc8>)
   819d6:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   819d8:	4a19      	ldr	r2, [pc, #100]	; (81a40 <naeusb_sam_cfg_out+0xcc>)
   819da:	6853      	ldr	r3, [r2, #4]
   819dc:	0399      	lsls	r1, r3, #14
   819de:	d4fc      	bmi.n	819da <naeusb_sam_cfg_out+0x66>
		RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   819e0:	6813      	ldr	r3, [r2, #0]
   819e2:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   819e6:	f043 0305 	orr.w	r3, r3, #5
   819ea:	6013      	str	r3, [r2, #0]
        while(1);
   819ec:	e7fe      	b.n	819ec <naeusb_sam_cfg_out+0x78>
   819ee:	4b13      	ldr	r3, [pc, #76]	; (81a3c <naeusb_sam_cfg_out+0xc8>)
   819f0:	4798      	blx	r3
        while (RSTC->RSTC_SR & RSTC_SR_SRCMP);
   819f2:	4a13      	ldr	r2, [pc, #76]	; (81a40 <naeusb_sam_cfg_out+0xcc>)
   819f4:	6853      	ldr	r3, [r2, #4]
   819f6:	039b      	lsls	r3, r3, #14
   819f8:	d4fc      	bmi.n	819f4 <naeusb_sam_cfg_out+0x80>
        RSTC->RSTC_CR |= RSTC_CR_KEY_PASSWD | RSTC_CR_PERRST | RSTC_CR_PROCRST;
   819fa:	6813      	ldr	r3, [r2, #0]
   819fc:	f043 4325 	orr.w	r3, r3, #2768240640	; 0xa5000000
   81a00:	f043 0305 	orr.w	r3, r3, #5
   81a04:	6013      	str	r3, [r2, #0]
        while(1);
   81a06:	e7fe      	b.n	81a06 <naeusb_sam_cfg_out+0x92>
        FPGA_releaselock();
   81a08:	4b0e      	ldr	r3, [pc, #56]	; (81a44 <naeusb_sam_cfg_out+0xd0>)
}
   81a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FPGA_releaselock();
   81a0e:	4718      	bx	r3
        LED_SETTING = (udd_g_ctrlreq.req.wValue >> 8) & 0xFF;
   81a10:	4b0d      	ldr	r3, [pc, #52]	; (81a48 <naeusb_sam_cfg_out+0xd4>)
   81a12:	0a12      	lsrs	r2, r2, #8
   81a14:	701a      	strb	r2, [r3, #0]
}
   81a16:	bd10      	pop	{r4, pc}
   81a18:	2007228c 	.word	0x2007228c
   81a1c:	20071a98 	.word	0x20071a98
   81a20:	00083505 	.word	0x00083505
   81a24:	00083555 	.word	0x00083555
   81a28:	0008344d 	.word	0x0008344d
   81a2c:	000834a9 	.word	0x000834a9
   81a30:	00080e11 	.word	0x00080e11
   81a34:	00083695 	.word	0x00083695
   81a38:	400e0a00 	.word	0x400e0a00
   81a3c:	0008426d 	.word	0x0008426d
   81a40:	400e1a00 	.word	0x400e1a00
   81a44:	00082b51 	.word	0x00082b51
   81a48:	20071a9a 	.word	0x20071a9a

00081a4c <naeusb_setup_in_received>:


bool naeusb_setup_in_received(void)
{
   81a4c:	b538      	push	{r3, r4, r5, lr}
    switch (udd_g_ctrlreq.req.bRequest) {
   81a4e:	4c1c      	ldr	r4, [pc, #112]	; (81ac0 <naeusb_setup_in_received+0x74>)
   81a50:	7863      	ldrb	r3, [r4, #1]
   81a52:	2b22      	cmp	r3, #34	; 0x22
   81a54:	d005      	beq.n	81a62 <naeusb_setup_in_received+0x16>
   81a56:	2b40      	cmp	r3, #64	; 0x40
   81a58:	d01a      	beq.n	81a90 <naeusb_setup_in_received+0x44>
   81a5a:	2b17      	cmp	r3, #23
   81a5c:	d00d      	beq.n	81a7a <naeusb_setup_in_received+0x2e>
   81a5e:	2000      	movs	r0, #0
        case REQ_SAM_STATUS:
            return naeusb_status_in();
            break;
    }
    return false;
}
   81a60:	bd38      	pop	{r3, r4, r5, pc}
    udd_g_ctrlreq.payload_size = 3;
   81a62:	2203      	movs	r2, #3
    respbuf[0] = CURRENT_ERRORS & 0xFF;
   81a64:	4817      	ldr	r0, [pc, #92]	; (81ac4 <naeusb_setup_in_received+0x78>)
    respbuf[2] = LED_SETTING;
   81a66:	4918      	ldr	r1, [pc, #96]	; (81ac8 <naeusb_setup_in_received+0x7c>)
    respbuf[0] = CURRENT_ERRORS & 0xFF;
   81a68:	4b18      	ldr	r3, [pc, #96]	; (81acc <naeusb_setup_in_received+0x80>)
   81a6a:	8800      	ldrh	r0, [r0, #0]
    respbuf[2] = LED_SETTING;
   81a6c:	7809      	ldrb	r1, [r1, #0]
    respbuf[0] = CURRENT_ERRORS & 0xFF;
   81a6e:	8018      	strh	r0, [r3, #0]
    respbuf[2] = LED_SETTING;
   81a70:	7099      	strb	r1, [r3, #2]
    udd_g_ctrlreq.payload_size = 3;
   81a72:	2001      	movs	r0, #1
    udd_g_ctrlreq.payload = respbuf;
   81a74:	60a3      	str	r3, [r4, #8]
    udd_g_ctrlreq.payload_size = 3;
   81a76:	81a2      	strh	r2, [r4, #12]
}
   81a78:	bd38      	pop	{r3, r4, r5, pc}
    respbuf[0] = FW_VER_MAJOR;
   81a7a:	f240 2501 	movw	r5, #513	; 0x201
    respbuf[2] = FW_VER_DEBUG;
   81a7e:	2100      	movs	r1, #0
    udd_g_ctrlreq.payload_size = 3;
   81a80:	2203      	movs	r2, #3
    respbuf[0] = FW_VER_MAJOR;
   81a82:	4b12      	ldr	r3, [pc, #72]	; (81acc <naeusb_setup_in_received+0x80>)
            return naeusb_fw_version_in();
   81a84:	2001      	movs	r0, #1
    respbuf[0] = FW_VER_MAJOR;
   81a86:	801d      	strh	r5, [r3, #0]
    respbuf[2] = FW_VER_DEBUG;
   81a88:	7099      	strb	r1, [r3, #2]
    udd_g_ctrlreq.payload = respbuf;
   81a8a:	60a3      	str	r3, [r4, #8]
    udd_g_ctrlreq.payload_size = 3;
   81a8c:	81a2      	strh	r2, [r4, #12]
}
   81a8e:	bd38      	pop	{r3, r4, r5, pc}
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   81a90:	f04f 0c20 	mov.w	ip, #32
    strncpy(respbuf, BUILD_TIME, 64);
   81a94:	4d0d      	ldr	r5, [pc, #52]	; (81acc <naeusb_setup_in_received+0x80>)
   81a96:	4b0e      	ldr	r3, [pc, #56]	; (81ad0 <naeusb_setup_in_received+0x84>)
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   81a98:	2237      	movs	r2, #55	; 0x37
    strncpy(respbuf, BUILD_TIME, 64);
   81a9a:	e893 0003 	ldmia.w	r3, {r0, r1}
    respbuf[sizeof(BUILD_TIME) - 1] = ' ';
   81a9e:	f885 c008 	strb.w	ip, [r5, #8]
    strncpy(respbuf, BUILD_TIME, 64);
   81aa2:	e885 0003 	stmia.w	r5, {r0, r1}
    strncpy(respbuf + sizeof(BUILD_TIME), BUILD_DATE, 64 - sizeof(BUILD_TIME));
   81aa6:	4b0b      	ldr	r3, [pc, #44]	; (81ad4 <naeusb_setup_in_received+0x88>)
   81aa8:	490b      	ldr	r1, [pc, #44]	; (81ad8 <naeusb_setup_in_received+0x8c>)
   81aaa:	f105 0009 	add.w	r0, r5, #9
   81aae:	4798      	blx	r3
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81ab0:	4628      	mov	r0, r5
   81ab2:	4b0a      	ldr	r3, [pc, #40]	; (81adc <naeusb_setup_in_received+0x90>)
    udd_g_ctrlreq.payload = respbuf;
   81ab4:	60a5      	str	r5, [r4, #8]
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81ab6:	4798      	blx	r3
   81ab8:	4603      	mov	r3, r0
            return naeusb_build_date_in();
   81aba:	2001      	movs	r0, #1
    udd_g_ctrlreq.payload_size = strlen(respbuf);
   81abc:	81a3      	strh	r3, [r4, #12]
}
   81abe:	bd38      	pop	{r3, r4, r5, pc}
   81ac0:	2007228c 	.word	0x2007228c
   81ac4:	20071a98 	.word	0x20071a98
   81ac8:	20071a9a 	.word	0x20071a9a
   81acc:	20071a18 	.word	0x20071a18
   81ad0:	0008cb0c 	.word	0x0008cb0c
   81ad4:	0008603d 	.word	0x0008603d
   81ad8:	0008cb00 	.word	0x0008cb00
   81adc:	00085fe1 	.word	0x00085fe1

00081ae0 <naeusb_register_handlers>:

void naeusb_register_handlers(void)
{
   81ae0:	b510      	push	{r4, lr}
    naeusb_add_in_handler(naeusb_setup_in_received);
   81ae2:	4b04      	ldr	r3, [pc, #16]	; (81af4 <naeusb_register_handlers+0x14>)
   81ae4:	4804      	ldr	r0, [pc, #16]	; (81af8 <naeusb_register_handlers+0x18>)
   81ae6:	4798      	blx	r3
    naeusb_add_out_handler(naeusb_setup_out_received);
   81ae8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    naeusb_add_out_handler(naeusb_setup_out_received);
   81aec:	4803      	ldr	r0, [pc, #12]	; (81afc <naeusb_register_handlers+0x1c>)
   81aee:	4b04      	ldr	r3, [pc, #16]	; (81b00 <naeusb_register_handlers+0x20>)
   81af0:	4718      	bx	r3
   81af2:	bf00      	nop
   81af4:	00081819 	.word	0x00081819
   81af8:	00081a4d 	.word	0x00081a4d
   81afc:	00081959 	.word	0x00081959
   81b00:	00081841 	.word	0x00081841

00081b04 <usart_setup_out_received>:
    }
}

bool usart_setup_out_received(void)
{
    switch(udd_g_ctrlreq.req.bRequest) {
   81b04:	4a0a      	ldr	r2, [pc, #40]	; (81b30 <usart_setup_out_received+0x2c>)
   81b06:	7853      	ldrb	r3, [r2, #1]
   81b08:	2b1b      	cmp	r3, #27
   81b0a:	d005      	beq.n	81b18 <usart_setup_out_received+0x14>
   81b0c:	2b31      	cmp	r3, #49	; 0x31
   81b0e:	d00b      	beq.n	81b28 <usart_setup_out_received+0x24>
   81b10:	2b1a      	cmp	r3, #26
   81b12:	d005      	beq.n	81b20 <usart_setup_out_received+0x1c>
   81b14:	2000      	movs	r0, #0
   81b16:	4770      	bx	lr
    case REQ_USART0_CONFIG:
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   81b18:	4b06      	ldr	r3, [pc, #24]	; (81b34 <usart_setup_out_received+0x30>)
        return true;
   81b1a:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = ctrl_usart_cb;
   81b1c:	6113      	str	r3, [r2, #16]
        return true;
   81b1e:	4770      	bx	lr
        
    case REQ_USART0_DATA:
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   81b20:	4b05      	ldr	r3, [pc, #20]	; (81b38 <usart_setup_out_received+0x34>)
        return true;
   81b22:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = ctrl_usart_cb_data;
   81b24:	6113      	str	r3, [r2, #16]
        return true;
   81b26:	4770      	bx	lr
    case REQ_AVR_PROGRAM:
        udd_g_ctrlreq.callback = ctrl_avr_program_void;
        return true;
#endif
    case REQ_CDC_SETTINGS_EN:
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   81b28:	4b04      	ldr	r3, [pc, #16]	; (81b3c <usart_setup_out_received+0x38>)
        return true;
   81b2a:	2001      	movs	r0, #1
        udd_g_ctrlreq.callback = naeusb_cdc_settings_out;
   81b2c:	6113      	str	r3, [r2, #16]
        break;
    }
    return false;
}
   81b2e:	4770      	bx	lr
   81b30:	2007228c 	.word	0x2007228c
   81b34:	00081ee5 	.word	0x00081ee5
   81b38:	00081f49 	.word	0x00081f49
   81b3c:	00081b41 	.word	0x00081b41

00081b40 <naeusb_cdc_settings_out>:
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81b40:	2300      	movs	r3, #0
{
   81b42:	b430      	push	{r4, r5}
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81b44:	4a11      	ldr	r2, [pc, #68]	; (81b8c <naeusb_cdc_settings_out+0x4c>)
		if (port == 0) break;
   81b46:	4d12      	ldr	r5, [pc, #72]	; (81b90 <naeusb_cdc_settings_out+0x50>)
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81b48:	f8b2 c002 	ldrh.w	ip, [r2, #2]
		if (port == 0) break;
   81b4c:	4c11      	ldr	r4, [pc, #68]	; (81b94 <naeusb_cdc_settings_out+0x54>)
   81b4e:	b133      	cbz	r3, 81b5e <naeusb_cdc_settings_out+0x1e>
   81b50:	2b01      	cmp	r3, #1
   81b52:	d018      	beq.n	81b86 <naeusb_cdc_settings_out+0x46>
    for (uint8_t i = 0; i < 4; i++) {
   81b54:	3301      	adds	r3, #1
   81b56:	2b04      	cmp	r3, #4
   81b58:	d1f9      	bne.n	81b4e <naeusb_cdc_settings_out+0xe>
}
   81b5a:	bc30      	pop	{r4, r5}
   81b5c:	4770      	bx	lr
		if (port == 0) break;
   81b5e:	4629      	mov	r1, r5
            if (udd_g_ctrlreq.req.wValue & (1 << i)) {
   81b60:	fa4c f203 	asr.w	r2, ip, r3
   81b64:	f012 0201 	ands.w	r2, r2, #1
   81b68:	d006      	beq.n	81b78 <naeusb_cdc_settings_out+0x38>
                driver->cdc_settings_change = 1;
   81b6a:	f891 229c 	ldrb.w	r2, [r1, #668]	; 0x29c
   81b6e:	f042 0208 	orr.w	r2, r2, #8
   81b72:	f881 229c 	strb.w	r2, [r1, #668]	; 0x29c
   81b76:	e7ed      	b.n	81b54 <naeusb_cdc_settings_out+0x14>
                driver->cdc_settings_change = 0;
   81b78:	f891 029c 	ldrb.w	r0, [r1, #668]	; 0x29c
   81b7c:	f362 00c3 	bfi	r0, r2, #3, #1
   81b80:	f881 029c 	strb.w	r0, [r1, #668]	; 0x29c
   81b84:	e7e6      	b.n	81b54 <naeusb_cdc_settings_out+0x14>
		if (port == 0) break;
   81b86:	4621      	mov	r1, r4
   81b88:	e7ea      	b.n	81b60 <naeusb_cdc_settings_out+0x20>
   81b8a:	bf00      	nop
   81b8c:	2007228c 	.word	0x2007228c
   81b90:	20070400 	.word	0x20070400
   81b94:	200706a0 	.word	0x200706a0

00081b98 <usart_enableIO>:
{
   81b98:	b510      	push	{r4, lr}
    if (driver->usart_id == 0) {
   81b9a:	f8d0 3298 	ldr.w	r3, [r0, #664]	; 0x298
   81b9e:	b113      	cbz	r3, 81ba6 <usart_enableIO+0xe>
    } else if (driver->usart_id == 1) {
   81ba0:	2b01      	cmp	r3, #1
   81ba2:	d016      	beq.n	81bd2 <usart_enableIO+0x3a>
}
   81ba4:	bd10      	pop	{r4, pc}
   81ba6:	4b16      	ldr	r3, [pc, #88]	; (81c00 <usart_enableIO+0x68>)
   81ba8:	2011      	movs	r0, #17
   81baa:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   81bac:	4c15      	ldr	r4, [pc, #84]	; (81c04 <usart_enableIO+0x6c>)
   81bae:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bb2:	200a      	movs	r0, #10
   81bb4:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   81bb6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bba:	200b      	movs	r0, #11
   81bbc:	47a0      	blx	r4
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81bbe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81bc2:	2130      	movs	r1, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81bc4:	4b10      	ldr	r3, [pc, #64]	; (81c08 <usart_enableIO+0x70>)
   81bc6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81bca:	f883 1311 	strb.w	r1, [r3, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81bce:	601a      	str	r2, [r3, #0]
}
   81bd0:	bd10      	pop	{r4, pc}
   81bd2:	4b0b      	ldr	r3, [pc, #44]	; (81c00 <usart_enableIO+0x68>)
   81bd4:	2012      	movs	r0, #18
   81bd6:	4798      	blx	r3
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
   81bd8:	4c0a      	ldr	r4, [pc, #40]	; (81c04 <usart_enableIO+0x6c>)
   81bda:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81bde:	200c      	movs	r0, #12
   81be0:	47a0      	blx	r4
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
   81be2:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81be6:	200d      	movs	r0, #13
   81be8:	47a0      	blx	r4
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81bea:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81bee:	2130      	movs	r1, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81bf0:	4b05      	ldr	r3, [pc, #20]	; (81c08 <usart_enableIO+0x70>)
   81bf2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81bf6:	f883 1312 	strb.w	r1, [r3, #786]	; 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81bfa:	601a      	str	r2, [r3, #0]
}
   81bfc:	bd10      	pop	{r4, pc}
   81bfe:	bf00      	nop
   81c00:	00083599 	.word	0x00083599
   81c04:	000837a5 	.word	0x000837a5
   81c08:	e000e100 	.word	0xe000e100

00081c0c <generic_isr>:
{
   81c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	status = usart_get_status(driver->usart);
   81c10:	4b1e      	ldr	r3, [pc, #120]	; (81c8c <generic_isr+0x80>)
{
   81c12:	4604      	mov	r4, r0
	status = usart_get_status(driver->usart);
   81c14:	6800      	ldr	r0, [r0, #0]
   81c16:	4798      	blx	r3
	if (status & US_CSR_RXRDY){
   81c18:	07c1      	lsls	r1, r0, #31
	status = usart_get_status(driver->usart);
   81c1a:	4605      	mov	r5, r0
	if (status & US_CSR_RXRDY){
   81c1c:	d403      	bmi.n	81c26 <generic_isr+0x1a>
	if (status & US_CSR_TXRDY){
   81c1e:	07ab      	lsls	r3, r5, #30
   81c20:	d418      	bmi.n	81c54 <generic_isr+0x48>
}
   81c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
   81c26:	4620      	mov	r0, r4
   81c28:	f850 3b1c 	ldr.w	r3, [r0], #28
		add_to_circ_buf(&driver->rxbuf, temp, false);
   81c2c:	2200      	movs	r2, #0
		temp = driver->usart->US_RHR & US_RHR_RXCHR_Msk;
   81c2e:	699e      	ldr	r6, [r3, #24]
		add_to_circ_buf(&driver->rxbuf, temp, false);
   81c30:	4f17      	ldr	r7, [pc, #92]	; (81c90 <generic_isr+0x84>)
   81c32:	b2f6      	uxtb	r6, r6
   81c34:	4631      	mov	r1, r6
   81c36:	47b8      	blx	r7
        if (driver->cdc_enabled)
   81c38:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   81c3c:	075a      	lsls	r2, r3, #29
   81c3e:	d41f      	bmi.n	81c80 <generic_isr+0x74>
        if (driver->rxbuf.dropped > 0) {
   81c40:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81c42:	2b00      	cmp	r3, #0
   81c44:	d0eb      	beq.n	81c1e <generic_isr+0x12>
            CURRENT_ERRORS |= CW_ERR_USART_RX_OVERFLOW;
   81c46:	4a13      	ldr	r2, [pc, #76]	; (81c94 <generic_isr+0x88>)
   81c48:	8813      	ldrh	r3, [r2, #0]
   81c4a:	f043 0301 	orr.w	r3, r3, #1
   81c4e:	8013      	strh	r3, [r2, #0]
	if (status & US_CSR_TXRDY){
   81c50:	07ab      	lsls	r3, r5, #30
   81c52:	d5e6      	bpl.n	81c22 <generic_isr+0x16>
		if (circ_buf_has_char(&driver->txbuf)){
   81c54:	f104 05f0 	add.w	r5, r4, #240	; 0xf0
   81c58:	4628      	mov	r0, r5
   81c5a:	4b0f      	ldr	r3, [pc, #60]	; (81c98 <generic_isr+0x8c>)
   81c5c:	4798      	blx	r3
   81c5e:	b148      	cbz	r0, 81c74 <generic_isr+0x68>
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
   81c60:	4628      	mov	r0, r5
   81c62:	4b0e      	ldr	r3, [pc, #56]	; (81c9c <generic_isr+0x90>)
   81c64:	6824      	ldr	r4, [r4, #0]
   81c66:	4798      	blx	r3
   81c68:	4b0d      	ldr	r3, [pc, #52]	; (81ca0 <generic_isr+0x94>)
   81c6a:	4601      	mov	r1, r0
   81c6c:	4620      	mov	r0, r4
}
   81c6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));			
   81c72:	4718      	bx	r3
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
   81c74:	6820      	ldr	r0, [r4, #0]
   81c76:	2102      	movs	r1, #2
}
   81c78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			usart_disable_interrupt(driver->usart, UART_IER_TXRDY);
   81c7c:	4b09      	ldr	r3, [pc, #36]	; (81ca4 <generic_isr+0x98>)
   81c7e:	4718      	bx	r3
            add_to_circ_buf(&driver->rx_cdc_buf, temp, false);
   81c80:	2200      	movs	r2, #0
   81c82:	4631      	mov	r1, r6
   81c84:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   81c88:	47b8      	blx	r7
   81c8a:	e7d9      	b.n	81c40 <generic_isr+0x34>
   81c8c:	00083145 	.word	0x00083145
   81c90:	00080141 	.word	0x00080141
   81c94:	20071a98 	.word	0x20071a98
   81c98:	0008018d 	.word	0x0008018d
   81c9c:	0008016d 	.word	0x0008016d
   81ca0:	00083149 	.word	0x00083149
   81ca4:	0008313d 	.word	0x0008313d

00081ca8 <USART0_Handler>:
	generic_isr(&usart0_driver);
   81ca8:	4801      	ldr	r0, [pc, #4]	; (81cb0 <USART0_Handler+0x8>)
   81caa:	4b02      	ldr	r3, [pc, #8]	; (81cb4 <USART0_Handler+0xc>)
   81cac:	4718      	bx	r3
   81cae:	bf00      	nop
   81cb0:	20070400 	.word	0x20070400
   81cb4:	00081c0d 	.word	0x00081c0d

00081cb8 <USART1_Handler>:
	generic_isr(&usart1_driver);
   81cb8:	4801      	ldr	r0, [pc, #4]	; (81cc0 <USART1_Handler+0x8>)
   81cba:	4b02      	ldr	r3, [pc, #8]	; (81cc4 <USART1_Handler+0xc>)
   81cbc:	4718      	bx	r3
   81cbe:	bf00      	nop
   81cc0:	200706a0 	.word	0x200706a0
   81cc4:	00081c0d 	.word	0x00081c0d

00081cc8 <ctrl_usart_in>:
{
   81cc8:	b570      	push	{r4, r5, r6, lr}
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81cca:	4b21      	ldr	r3, [pc, #132]	; (81d50 <ctrl_usart_in+0x88>)
   81ccc:	8858      	ldrh	r0, [r3, #2]
		if (port == 0) break;
   81cce:	0a02      	lsrs	r2, r0, #8
   81cd0:	d003      	beq.n	81cda <ctrl_usart_in+0x12>
   81cd2:	2a01      	cmp	r2, #1
   81cd4:	d03a      	beq.n	81d4c <ctrl_usart_in+0x84>
        return false;
   81cd6:	2000      	movs	r0, #0
}
   81cd8:	bd70      	pop	{r4, r5, r6, pc}
		if (port == 0) break;
   81cda:	4c1e      	ldr	r4, [pc, #120]	; (81d54 <ctrl_usart_in+0x8c>)
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   81cdc:	b2c0      	uxtb	r0, r0
   81cde:	2814      	cmp	r0, #20
   81ce0:	d007      	beq.n	81cf2 <ctrl_usart_in+0x2a>
   81ce2:	2818      	cmp	r0, #24
   81ce4:	d01b      	beq.n	81d1e <ctrl_usart_in+0x56>
   81ce6:	f1a0 0010 	sub.w	r0, r0, #16
   81cea:	fab0 f080 	clz	r0, r0
   81cee:	0940      	lsrs	r0, r0, #5
}
   81cf0:	bd70      	pop	{r4, r5, r6, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
   81cf2:	88da      	ldrh	r2, [r3, #6]
   81cf4:	2a03      	cmp	r2, #3
   81cf6:	d9ee      	bls.n	81cd6 <ctrl_usart_in+0xe>
        udd_g_ctrlreq.payload_size = 4;
   81cf8:	2104      	movs	r1, #4
        udd_g_ctrlreq.payload = respbuf;
   81cfa:	4d17      	ldr	r5, [pc, #92]	; (81d58 <ctrl_usart_in+0x90>)
        cnt = circ_buf_count(&driver->rxbuf);
   81cfc:	4a17      	ldr	r2, [pc, #92]	; (81d5c <ctrl_usart_in+0x94>)
   81cfe:	f104 001c 	add.w	r0, r4, #28
        udd_g_ctrlreq.payload = respbuf;
   81d02:	609d      	str	r5, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   81d04:	8199      	strh	r1, [r3, #12]
        cnt = circ_buf_count(&driver->rxbuf);
   81d06:	4790      	blx	r2
        driver->rxbuf.dropped = 0; //clear dropped characters
   81d08:	2100      	movs	r1, #0
        cnt = circ_buf_count(&driver->rxbuf);
   81d0a:	4606      	mov	r6, r0
        CURRENT_ERRORS &= ~CW_ERR_USART_RX_OVERFLOW;
   81d0c:	4a14      	ldr	r2, [pc, #80]	; (81d60 <ctrl_usart_in+0x98>)
        driver->rxbuf.dropped = 0; //clear dropped characters
   81d0e:	6261      	str	r1, [r4, #36]	; 0x24
        CURRENT_ERRORS &= ~CW_ERR_USART_RX_OVERFLOW;
   81d10:	8813      	ldrh	r3, [r2, #0]
        return true;
   81d12:	2001      	movs	r0, #1
        CURRENT_ERRORS &= ~CW_ERR_USART_RX_OVERFLOW;
   81d14:	f023 0301 	bic.w	r3, r3, #1
   81d18:	8013      	strh	r3, [r2, #0]
        word2buf(respbuf, cnt);
   81d1a:	602e      	str	r6, [r5, #0]
}
   81d1c:	bd70      	pop	{r4, r5, r6, pc}
        if (udd_g_ctrlreq.req.wLength < 4) {
   81d1e:	88da      	ldrh	r2, [r3, #6]
   81d20:	2a03      	cmp	r2, #3
   81d22:	d9d8      	bls.n	81cd6 <ctrl_usart_in+0xe>
        udd_g_ctrlreq.payload_size = 4;
   81d24:	2104      	movs	r1, #4
        udd_g_ctrlreq.payload = respbuf;
   81d26:	4d0c      	ldr	r5, [pc, #48]	; (81d58 <ctrl_usart_in+0x90>)
        cnt = circ_buf_count(&driver->txbuf);
   81d28:	4a0c      	ldr	r2, [pc, #48]	; (81d5c <ctrl_usart_in+0x94>)
   81d2a:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
        udd_g_ctrlreq.payload = respbuf;
   81d2e:	609d      	str	r5, [r3, #8]
        udd_g_ctrlreq.payload_size = 4;
   81d30:	8199      	strh	r1, [r3, #12]
        cnt = circ_buf_count(&driver->txbuf);
   81d32:	4790      	blx	r2
        driver->txbuf.dropped = 0; //clear dropped characters
   81d34:	2100      	movs	r1, #0
        cnt = circ_buf_count(&driver->txbuf);
   81d36:	4606      	mov	r6, r0
        CURRENT_ERRORS &= ~CW_ERR_USART_TX_OVERFLOW;
   81d38:	4a09      	ldr	r2, [pc, #36]	; (81d60 <ctrl_usart_in+0x98>)
        driver->txbuf.dropped = 0; //clear dropped characters
   81d3a:	f8c4 10f8 	str.w	r1, [r4, #248]	; 0xf8
        CURRENT_ERRORS &= ~CW_ERR_USART_TX_OVERFLOW;
   81d3e:	8813      	ldrh	r3, [r2, #0]
        return true;
   81d40:	2001      	movs	r0, #1
        CURRENT_ERRORS &= ~CW_ERR_USART_TX_OVERFLOW;
   81d42:	f023 0302 	bic.w	r3, r3, #2
   81d46:	8013      	strh	r3, [r2, #0]
        word2buf(respbuf, cnt);
   81d48:	602e      	str	r6, [r5, #0]
}
   81d4a:	bd70      	pop	{r4, r5, r6, pc}
		if (port == 0) break;
   81d4c:	4c05      	ldr	r4, [pc, #20]	; (81d64 <ctrl_usart_in+0x9c>)
   81d4e:	e7c5      	b.n	81cdc <ctrl_usart_in+0x14>
   81d50:	2007228c 	.word	0x2007228c
   81d54:	20070400 	.word	0x20070400
   81d58:	20071a18 	.word	0x20071a18
   81d5c:	00080199 	.word	0x00080199
   81d60:	20071a98 	.word	0x20071a98
   81d64:	200706a0 	.word	0x200706a0

00081d68 <configure_usart>:
{
   81d68:	b538      	push	{r3, r4, r5, lr}
    switch(stop_bits)
   81d6a:	2a01      	cmp	r2, #1
{
   81d6c:	4604      	mov	r4, r0
   81d6e:	f89d 5010 	ldrb.w	r5, [sp, #16]
    driver->usartopts.baudrate = baud;
   81d72:	6041      	str	r1, [r0, #4]
    switch(stop_bits)
   81d74:	d00e      	beq.n	81d94 <configure_usart+0x2c>
   81d76:	2a02      	cmp	r2, #2
   81d78:	d008      	beq.n	81d8c <configure_usart+0x24>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_BIT;
   81d7a:	2200      	movs	r2, #0
   81d7c:	6102      	str	r2, [r0, #16]
    switch(parity)
   81d7e:	3b01      	subs	r3, #1
   81d80:	2b03      	cmp	r3, #3
   81d82:	d848      	bhi.n	81e16 <configure_usart+0xae>
   81d84:	e8df f003 	tbb	[pc, r3]
   81d88:	0a3d3a32 	.word	0x0a3d3a32
            driver->usartopts.stop_bits = US_MR_NBSTOP_2_BIT;
   81d8c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   81d90:	6102      	str	r2, [r0, #16]
            break;
   81d92:	e7f4      	b.n	81d7e <configure_usart+0x16>
            driver->usartopts.stop_bits = US_MR_NBSTOP_1_5_BIT;
   81d94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
   81d98:	6102      	str	r2, [r0, #16]
            break;
   81d9a:	e7f0      	b.n	81d7e <configure_usart+0x16>
            driver->usartopts.parity_type = US_MR_PAR_SPACE;
   81d9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   81da0:	60e3      	str	r3, [r4, #12]
    switch(dbits)
   81da2:	2d06      	cmp	r5, #6
   81da4:	d027      	beq.n	81df6 <configure_usart+0x8e>
   81da6:	2d07      	cmp	r5, #7
   81da8:	d032      	beq.n	81e10 <configure_usart+0xa8>
   81daa:	2d05      	cmp	r5, #5
   81dac:	d02d      	beq.n	81e0a <configure_usart+0xa2>
            driver->usartopts.char_length = US_MR_CHRL_8_BIT;
   81dae:	23c0      	movs	r3, #192	; 0xc0
   81db0:	60a3      	str	r3, [r4, #8]
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   81db2:	2200      	movs	r2, #0
    usart_enableIO(driver);
   81db4:	4620      	mov	r0, r4
    driver->usartopts.channel_mode = US_MR_CHMODE_NORMAL;
   81db6:	6162      	str	r2, [r4, #20]
    usart_enableIO(driver);
   81db8:	4b19      	ldr	r3, [pc, #100]	; (81e20 <configure_usart+0xb8>)
   81dba:	4798      	blx	r3
    driver->enabled = 1;
   81dbc:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
   81dc0:	4d18      	ldr	r5, [pc, #96]	; (81e24 <configure_usart+0xbc>)
    driver->enabled = 1;
   81dc2:	f043 0302 	orr.w	r3, r3, #2
   81dc6:	f884 329c 	strb.w	r3, [r4, #668]	; 0x29c
    init_circ_buf(&driver->txbuf);
   81dca:	f104 00f0 	add.w	r0, r4, #240	; 0xf0
   81dce:	47a8      	blx	r5
    init_circ_buf(&driver->rxbuf);
   81dd0:	f104 001c 	add.w	r0, r4, #28
   81dd4:	47a8      	blx	r5
    init_circ_buf(&driver->rx_cdc_buf);
   81dd6:	f504 70e2 	add.w	r0, r4, #452	; 0x1c4
   81dda:	47a8      	blx	r5
    usart_init_rs232(driver->usart, &driver->usartopts, sysclk_get_cpu_hz());
   81ddc:	4621      	mov	r1, r4
   81dde:	4a12      	ldr	r2, [pc, #72]	; (81e28 <configure_usart+0xc0>)
   81de0:	4b12      	ldr	r3, [pc, #72]	; (81e2c <configure_usart+0xc4>)
   81de2:	f851 0b04 	ldr.w	r0, [r1], #4
   81de6:	4798      	blx	r3
}
   81de8:	2001      	movs	r0, #1
   81dea:	bd38      	pop	{r3, r4, r5, pc}
            driver->usartopts.parity_type = US_MR_PAR_ODD;
   81dec:	f44f 7300 	mov.w	r3, #512	; 0x200
    switch(dbits)
   81df0:	2d06      	cmp	r5, #6
            driver->usartopts.parity_type = US_MR_PAR_ODD;
   81df2:	60e3      	str	r3, [r4, #12]
    switch(dbits)
   81df4:	d1d7      	bne.n	81da6 <configure_usart+0x3e>
            driver->usartopts.char_length = US_MR_CHRL_6_BIT;
   81df6:	2340      	movs	r3, #64	; 0x40
   81df8:	60a3      	str	r3, [r4, #8]
            break;
   81dfa:	e7da      	b.n	81db2 <configure_usart+0x4a>
            driver->usartopts.parity_type = US_MR_PAR_EVEN;
   81dfc:	2300      	movs	r3, #0
   81dfe:	60e3      	str	r3, [r4, #12]
            break;
   81e00:	e7cf      	b.n	81da2 <configure_usart+0x3a>
            driver->usartopts.parity_type = US_MR_PAR_MARK;
   81e02:	f44f 63c0 	mov.w	r3, #1536	; 0x600
   81e06:	60e3      	str	r3, [r4, #12]
            break;
   81e08:	e7cb      	b.n	81da2 <configure_usart+0x3a>
            driver->usartopts.char_length = US_MR_CHRL_5_BIT;
   81e0a:	2300      	movs	r3, #0
   81e0c:	60a3      	str	r3, [r4, #8]
            break;
   81e0e:	e7d0      	b.n	81db2 <configure_usart+0x4a>
            driver->usartopts.char_length = US_MR_CHRL_7_BIT;
   81e10:	2380      	movs	r3, #128	; 0x80
   81e12:	60a3      	str	r3, [r4, #8]
            break;
   81e14:	e7cd      	b.n	81db2 <configure_usart+0x4a>
            driver->usartopts.parity_type = US_MR_PAR_NO;
   81e16:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81e1a:	60e3      	str	r3, [r4, #12]
            break;
   81e1c:	e7c1      	b.n	81da2 <configure_usart+0x3a>
   81e1e:	bf00      	nop
   81e20:	00081b99 	.word	0x00081b99
   81e24:	00080135 	.word	0x00080135
   81e28:	0501bd00 	.word	0x0501bd00
   81e2c:	00082fdd 	.word	0x00082fdd

00081e30 <ctrl_usart_out>:
{
   81e30:	b570      	push	{r4, r5, r6, lr}
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81e32:	4c21      	ldr	r4, [pc, #132]	; (81eb8 <ctrl_usart_out+0x88>)
{
   81e34:	b082      	sub	sp, #8
    usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81e36:	8863      	ldrh	r3, [r4, #2]
		if (port == 0) break;
   81e38:	0a1a      	lsrs	r2, r3, #8
   81e3a:	d003      	beq.n	81e44 <ctrl_usart_out+0x14>
   81e3c:	2a01      	cmp	r2, #1
   81e3e:	d038      	beq.n	81eb2 <ctrl_usart_out+0x82>
}
   81e40:	b002      	add	sp, #8
   81e42:	bd70      	pop	{r4, r5, r6, pc}
		if (port == 0) break;
   81e44:	4d1d      	ldr	r5, [pc, #116]	; (81ebc <ctrl_usart_out+0x8c>)
    switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   81e46:	b2db      	uxtb	r3, r3
   81e48:	2b11      	cmp	r3, #17
   81e4a:	d015      	beq.n	81e78 <ctrl_usart_out+0x48>
   81e4c:	2b12      	cmp	r3, #18
   81e4e:	d023      	beq.n	81e98 <ctrl_usart_out+0x68>
   81e50:	2b10      	cmp	r3, #16
   81e52:	d1f5      	bne.n	81e40 <ctrl_usart_out+0x10>
        if (udd_g_ctrlreq.req.wLength != 7) return;
   81e54:	88e3      	ldrh	r3, [r4, #6]
   81e56:	2b07      	cmp	r3, #7
   81e58:	d1f2      	bne.n	81e40 <ctrl_usart_out+0x10>
        buf2word(baud, udd_g_ctrlreq.payload);
   81e5a:	68a2      	ldr	r2, [r4, #8]
		usart_enableIO(driver);
   81e5c:	4628      	mov	r0, r5
   81e5e:	4b18      	ldr	r3, [pc, #96]	; (81ec0 <ctrl_usart_out+0x90>)
        buf2word(baud, udd_g_ctrlreq.payload);
   81e60:	6816      	ldr	r6, [r2, #0]
		usart_enableIO(driver);
   81e62:	4798      	blx	r3
        configure_usart(driver, baud, udd_g_ctrlreq.payload[4], 
   81e64:	68a0      	ldr	r0, [r4, #8]
   81e66:	4631      	mov	r1, r6
   81e68:	7943      	ldrb	r3, [r0, #5]
   81e6a:	7902      	ldrb	r2, [r0, #4]
   81e6c:	7980      	ldrb	r0, [r0, #6]
   81e6e:	4c15      	ldr	r4, [pc, #84]	; (81ec4 <ctrl_usart_out+0x94>)
   81e70:	9000      	str	r0, [sp, #0]
   81e72:	4628      	mov	r0, r5
   81e74:	47a0      	blx	r4
        return ;
   81e76:	e7e3      	b.n	81e40 <ctrl_usart_out+0x10>
		usart_enableIO(driver);
   81e78:	4628      	mov	r0, r5
   81e7a:	4b11      	ldr	r3, [pc, #68]	; (81ec0 <ctrl_usart_out+0x90>)
   81e7c:	4798      	blx	r3
        usart_enable_rx(driver->usart);
   81e7e:	6828      	ldr	r0, [r5, #0]
   81e80:	4b11      	ldr	r3, [pc, #68]	; (81ec8 <ctrl_usart_out+0x98>)
   81e82:	4798      	blx	r3
        usart_enable_tx(driver->usart);
   81e84:	6828      	ldr	r0, [r5, #0]
   81e86:	4b11      	ldr	r3, [pc, #68]	; (81ecc <ctrl_usart_out+0x9c>)
   81e88:	4798      	blx	r3
        usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   81e8a:	2101      	movs	r1, #1
   81e8c:	6828      	ldr	r0, [r5, #0]
   81e8e:	4b10      	ldr	r3, [pc, #64]	; (81ed0 <ctrl_usart_out+0xa0>)
}
   81e90:	b002      	add	sp, #8
   81e92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   81e96:	4718      	bx	r3
        usart_disable_rx(driver->usart);
   81e98:	6828      	ldr	r0, [r5, #0]
   81e9a:	4b0e      	ldr	r3, [pc, #56]	; (81ed4 <ctrl_usart_out+0xa4>)
   81e9c:	4798      	blx	r3
        usart_disable_tx(driver->usart);
   81e9e:	6828      	ldr	r0, [r5, #0]
   81ea0:	4b0d      	ldr	r3, [pc, #52]	; (81ed8 <ctrl_usart_out+0xa8>)
   81ea2:	4798      	blx	r3
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   81ea4:	2103      	movs	r1, #3
   81ea6:	6828      	ldr	r0, [r5, #0]
   81ea8:	4b0c      	ldr	r3, [pc, #48]	; (81edc <ctrl_usart_out+0xac>)
}
   81eaa:	b002      	add	sp, #8
   81eac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        usart_disable_interrupt(driver->usart, UART_IER_RXRDY | UART_IER_TXRDY);
   81eb0:	4718      	bx	r3
		if (port == 0) break;
   81eb2:	4d0b      	ldr	r5, [pc, #44]	; (81ee0 <ctrl_usart_out+0xb0>)
   81eb4:	e7c7      	b.n	81e46 <ctrl_usart_out+0x16>
   81eb6:	bf00      	nop
   81eb8:	2007228c 	.word	0x2007228c
   81ebc:	20070400 	.word	0x20070400
   81ec0:	00081b99 	.word	0x00081b99
   81ec4:	00081d69 	.word	0x00081d69
   81ec8:	00083129 	.word	0x00083129
   81ecc:	00083119 	.word	0x00083119
   81ed0:	00083139 	.word	0x00083139
   81ed4:	00083131 	.word	0x00083131
   81ed8:	00083121 	.word	0x00083121
   81edc:	0008313d 	.word	0x0008313d
   81ee0:	200706a0 	.word	0x200706a0

00081ee4 <ctrl_usart_cb>:
	ctrl_usart_out();
   81ee4:	4b00      	ldr	r3, [pc, #0]	; (81ee8 <ctrl_usart_cb+0x4>)
   81ee6:	4718      	bx	r3
   81ee8:	00081e31 	.word	0x00081e31

00081eec <usart_driver_putchar>:
{
   81eec:	b570      	push	{r4, r5, r6, lr}
   81eee:	4604      	mov	r4, r0
    add_to_circ_buf(&driver->txbuf, data, false);
   81ef0:	f100 05f0 	add.w	r5, r0, #240	; 0xf0
   81ef4:	2200      	movs	r2, #0
   81ef6:	4628      	mov	r0, r5
   81ef8:	4b0d      	ldr	r3, [pc, #52]	; (81f30 <usart_driver_putchar+0x44>)
   81efa:	4798      	blx	r3
	if ((usart_get_interrupt_mask(driver->usart) & US_CSR_TXRDY) == 0) {
   81efc:	6820      	ldr	r0, [r4, #0]
   81efe:	4b0d      	ldr	r3, [pc, #52]	; (81f34 <usart_driver_putchar+0x48>)
   81f00:	4798      	blx	r3
   81f02:	0782      	lsls	r2, r0, #30
   81f04:	d500      	bpl.n	81f08 <usart_driver_putchar+0x1c>
}
   81f06:	bd70      	pop	{r4, r5, r6, pc}
		if ((usart_get_status(driver->usart) & US_CSR_TXRDY))
   81f08:	4b0b      	ldr	r3, [pc, #44]	; (81f38 <usart_driver_putchar+0x4c>)
   81f0a:	6820      	ldr	r0, [r4, #0]
   81f0c:	4798      	blx	r3
   81f0e:	0783      	lsls	r3, r0, #30
   81f10:	d405      	bmi.n	81f1e <usart_driver_putchar+0x32>
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
   81f12:	6820      	ldr	r0, [r4, #0]
   81f14:	2102      	movs	r1, #2
}
   81f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		usart_enable_interrupt(driver->usart, US_CSR_TXRDY);
   81f1a:	4b08      	ldr	r3, [pc, #32]	; (81f3c <usart_driver_putchar+0x50>)
   81f1c:	4718      	bx	r3
			usart_putchar(driver->usart, get_from_circ_buf(&driver->txbuf));
   81f1e:	4628      	mov	r0, r5
   81f20:	4b07      	ldr	r3, [pc, #28]	; (81f40 <usart_driver_putchar+0x54>)
   81f22:	6825      	ldr	r5, [r4, #0]
   81f24:	4798      	blx	r3
   81f26:	4b07      	ldr	r3, [pc, #28]	; (81f44 <usart_driver_putchar+0x58>)
   81f28:	4601      	mov	r1, r0
   81f2a:	4628      	mov	r0, r5
   81f2c:	4798      	blx	r3
   81f2e:	e7f0      	b.n	81f12 <usart_driver_putchar+0x26>
   81f30:	00080141 	.word	0x00080141
   81f34:	00083141 	.word	0x00083141
   81f38:	00083145 	.word	0x00083145
   81f3c:	00083139 	.word	0x00083139
   81f40:	0008016d 	.word	0x0008016d
   81f44:	00083149 	.word	0x00083149

00081f48 <ctrl_usart_cb_data>:
{		
   81f48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   81f4a:	4d11      	ldr	r5, [pc, #68]	; (81f90 <ctrl_usart_cb_data+0x48>)
   81f4c:	886b      	ldrh	r3, [r5, #2]
		if (port == 0) break;
   81f4e:	0a1b      	lsrs	r3, r3, #8
   81f50:	d01c      	beq.n	81f8c <ctrl_usart_cb_data+0x44>
   81f52:	2b01      	cmp	r3, #1
   81f54:	d000      	beq.n	81f58 <ctrl_usart_cb_data+0x10>
}
   81f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (port == 0) break;
   81f58:	4e0e      	ldr	r6, [pc, #56]	; (81f94 <ctrl_usart_cb_data+0x4c>)
	if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   81f5a:	88eb      	ldrh	r3, [r5, #6]
   81f5c:	89aa      	ldrh	r2, [r5, #12]
   81f5e:	429a      	cmp	r2, r3
   81f60:	d3f9      	bcc.n	81f56 <ctrl_usart_cb_data+0xe>
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81f62:	b14b      	cbz	r3, 81f78 <ctrl_usart_cb_data+0x30>
   81f64:	2400      	movs	r4, #0
   81f66:	4f0c      	ldr	r7, [pc, #48]	; (81f98 <ctrl_usart_cb_data+0x50>)
		usart_driver_putchar(driver, udd_g_ctrlreq.payload[i]);
   81f68:	68ab      	ldr	r3, [r5, #8]
   81f6a:	4630      	mov	r0, r6
   81f6c:	5d19      	ldrb	r1, [r3, r4]
   81f6e:	47b8      	blx	r7
	for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   81f70:	88eb      	ldrh	r3, [r5, #6]
   81f72:	3401      	adds	r4, #1
   81f74:	42a3      	cmp	r3, r4
   81f76:	dcf7      	bgt.n	81f68 <ctrl_usart_cb_data+0x20>
    if (driver->txbuf.dropped > 0) {
   81f78:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   81f7c:	2b00      	cmp	r3, #0
   81f7e:	d0ea      	beq.n	81f56 <ctrl_usart_cb_data+0xe>
        CURRENT_ERRORS |= CW_ERR_USART_TX_OVERFLOW;
   81f80:	4a06      	ldr	r2, [pc, #24]	; (81f9c <ctrl_usart_cb_data+0x54>)
   81f82:	8813      	ldrh	r3, [r2, #0]
   81f84:	f043 0302 	orr.w	r3, r3, #2
   81f88:	8013      	strh	r3, [r2, #0]
}
   81f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (port == 0) break;
   81f8c:	4e04      	ldr	r6, [pc, #16]	; (81fa0 <ctrl_usart_cb_data+0x58>)
   81f8e:	e7e4      	b.n	81f5a <ctrl_usart_cb_data+0x12>
   81f90:	2007228c 	.word	0x2007228c
   81f94:	200706a0 	.word	0x200706a0
   81f98:	00081eed 	.word	0x00081eed
   81f9c:	20071a98 	.word	0x20071a98
   81fa0:	20070400 	.word	0x20070400

00081fa4 <naeusart_register_handlers>:
{
   81fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81fa8:	2400      	movs	r4, #0
   81faa:	4f20      	ldr	r7, [pc, #128]	; (8202c <naeusart_register_handlers+0x88>)
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
   81fac:	4e20      	ldr	r6, [pc, #128]	; (82030 <naeusart_register_handlers+0x8c>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81fae:	4d21      	ldr	r5, [pc, #132]	; (82034 <naeusart_register_handlers+0x90>)
		if (port == 0) break;
   81fb0:	b2e3      	uxtb	r3, r4
   81fb2:	b164      	cbz	r4, 81fce <naeusart_register_handlers+0x2a>
   81fb4:	2b01      	cmp	r3, #1
   81fb6:	d036      	beq.n	82026 <naeusart_register_handlers+0x82>
	for (uint8_t i = 0; i < 4; i++) {
   81fb8:	3401      	adds	r4, #1
   81fba:	2c04      	cmp	r4, #4
   81fbc:	d1f8      	bne.n	81fb0 <naeusart_register_handlers+0xc>
    naeusb_add_in_handler(usart_setup_in_received);
   81fbe:	4b1e      	ldr	r3, [pc, #120]	; (82038 <naeusart_register_handlers+0x94>)
   81fc0:	481e      	ldr	r0, [pc, #120]	; (8203c <naeusart_register_handlers+0x98>)
   81fc2:	4798      	blx	r3
}
   81fc4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    naeusb_add_out_handler(usart_setup_out_received);
   81fc8:	481d      	ldr	r0, [pc, #116]	; (82040 <naeusart_register_handlers+0x9c>)
   81fca:	4b1e      	ldr	r3, [pc, #120]	; (82044 <naeusart_register_handlers+0xa0>)
   81fcc:	4718      	bx	r3
		if (port == 0) break;
   81fce:	4b1e      	ldr	r3, [pc, #120]	; (82048 <naeusart_register_handlers+0xa4>)
    if (driver->usart_id == 0) {
   81fd0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
   81fd4:	b1a3      	cbz	r3, 82000 <naeusart_register_handlers+0x5c>
    } else if (driver->usart_id == 1) {
   81fd6:	2b01      	cmp	r3, #1
   81fd8:	d1ee      	bne.n	81fb8 <naeusart_register_handlers+0x14>
   81fda:	2012      	movs	r0, #18
   81fdc:	47b8      	blx	r7
	gpio_configure_pin(PIN_USART1_RXD_IDX, PIN_USART1_RXD_FLAGS);
   81fde:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81fe2:	200c      	movs	r0, #12
   81fe4:	47b0      	blx	r6
	gpio_configure_pin(PIN_USART1_TXD_IDX, PIN_USART1_TXD_FLAGS);
   81fe6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81fea:	200d      	movs	r0, #13
   81fec:	47b0      	blx	r6
   81fee:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81ff2:	2230      	movs	r2, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81ff4:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   81ff8:	f885 2312 	strb.w	r2, [r5, #786]	; 0x312
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   81ffc:	602b      	str	r3, [r5, #0]
   81ffe:	e7db      	b.n	81fb8 <naeusart_register_handlers+0x14>
   82000:	2011      	movs	r0, #17
   82002:	47b8      	blx	r7
	gpio_configure_pin(PIN_USART0_RXD, PIN_USART0_RXD_FLAGS);
   82004:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82008:	200a      	movs	r0, #10
   8200a:	47b0      	blx	r6
	gpio_configure_pin(PIN_USART0_TXD, PIN_USART0_TXD_FLAGS);
   8200c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82010:	200b      	movs	r0, #11
   82012:	47b0      	blx	r6
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   82014:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   82018:	2230      	movs	r2, #48	; 0x30
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8201a:	f8c5 3180 	str.w	r3, [r5, #384]	; 0x180
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   8201e:	f885 2311 	strb.w	r2, [r5, #785]	; 0x311
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   82022:	602b      	str	r3, [r5, #0]
   82024:	e7c8      	b.n	81fb8 <naeusart_register_handlers+0x14>
		if (port == 0) break;
   82026:	4b09      	ldr	r3, [pc, #36]	; (8204c <naeusart_register_handlers+0xa8>)
   82028:	e7d2      	b.n	81fd0 <naeusart_register_handlers+0x2c>
   8202a:	bf00      	nop
   8202c:	00083599 	.word	0x00083599
   82030:	000837a5 	.word	0x000837a5
   82034:	e000e100 	.word	0xe000e100
   82038:	00081819 	.word	0x00081819
   8203c:	0008209d 	.word	0x0008209d
   82040:	00081b05 	.word	0x00081b05
   82044:	00081841 	.word	0x00081841
   82048:	20070400 	.word	0x20070400
   8204c:	200706a0 	.word	0x200706a0

00082050 <naeusb_cdc_settings_in>:
{
   82050:	b500      	push	{lr}
    udd_g_ctrlreq.payload = respbuf;
   82052:	4a0e      	ldr	r2, [pc, #56]	; (8208c <naeusb_cdc_settings_in+0x3c>)
		respbuf[i] = 0;
   82054:	f04f 0e00 	mov.w	lr, #0
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   82058:	88d1      	ldrh	r1, [r2, #6]
            respbuf[i] = driver->cdc_settings_change;
   8205a:	480d      	ldr	r0, [pc, #52]	; (82090 <naeusb_cdc_settings_in+0x40>)
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   8205c:	2904      	cmp	r1, #4
   8205e:	bf28      	it	cs
   82060:	2104      	movcs	r1, #4
            respbuf[i] = driver->cdc_settings_change;
   82062:	4b0c      	ldr	r3, [pc, #48]	; (82094 <naeusb_cdc_settings_in+0x44>)
   82064:	f890 c29c 	ldrb.w	ip, [r0, #668]	; 0x29c
   82068:	f893 029c 	ldrb.w	r0, [r3, #668]	; 0x29c
   8206c:	4b0a      	ldr	r3, [pc, #40]	; (82098 <naeusb_cdc_settings_in+0x48>)
   8206e:	f3cc 0cc0 	ubfx	ip, ip, #3, #1
   82072:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   82076:	7058      	strb	r0, [r3, #1]
   82078:	f883 c000 	strb.w	ip, [r3]
    udd_g_ctrlreq.payload = respbuf;
   8207c:	6093      	str	r3, [r2, #8]
		respbuf[i] = 0;
   8207e:	f8a3 e002 	strh.w	lr, [r3, #2]
    udd_g_ctrlreq.payload_size = min(4, udd_g_ctrlreq.req.wLength);
   82082:	8191      	strh	r1, [r2, #12]
}
   82084:	2001      	movs	r0, #1
   82086:	f85d fb04 	ldr.w	pc, [sp], #4
   8208a:	bf00      	nop
   8208c:	2007228c 	.word	0x2007228c
   82090:	20070400 	.word	0x20070400
   82094:	200706a0 	.word	0x200706a0
   82098:	20071a18 	.word	0x20071a18

0008209c <usart_setup_in_received>:

bool usart_setup_in_received(void)
{
   8209c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    switch(udd_g_ctrlreq.req.bRequest) {
   820a0:	4d1d      	ldr	r5, [pc, #116]	; (82118 <usart_setup_in_received+0x7c>)
   820a2:	786b      	ldrb	r3, [r5, #1]
   820a4:	2b1b      	cmp	r3, #27
   820a6:	d006      	beq.n	820b6 <usart_setup_in_received+0x1a>
   820a8:	2b31      	cmp	r3, #49	; 0x31
   820aa:	d02a      	beq.n	82102 <usart_setup_in_received+0x66>
   820ac:	2b1a      	cmp	r3, #26
   820ae:	d006      	beq.n	820be <usart_setup_in_received+0x22>
        
    case REQ_USART0_DATA:						
        0;
        unsigned int cnt;
		usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
		if (!driver) return false;
   820b0:	2000      	movs	r0, #0
	case REQ_CDC_SETTINGS_EN:
        return naeusb_cdc_settings_in();
        break;
    }
    return false;
}
   820b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return ctrl_usart_in();
   820b6:	4b19      	ldr	r3, [pc, #100]	; (8211c <usart_setup_in_received+0x80>)
}
   820b8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return ctrl_usart_in();
   820bc:	4718      	bx	r3
		usart_driver *driver = get_nth_available_driver(udd_g_ctrlreq.req.wValue >> 8);
   820be:	886b      	ldrh	r3, [r5, #2]
		if (port == 0) break;
   820c0:	0a1b      	lsrs	r3, r3, #8
   820c2:	d026      	beq.n	82112 <usart_setup_in_received+0x76>
   820c4:	2b01      	cmp	r3, #1
   820c6:	d1f3      	bne.n	820b0 <usart_setup_in_received+0x14>
   820c8:	4e15      	ldr	r6, [pc, #84]	; (82120 <usart_setup_in_received+0x84>)
        unsigned int data = (udd_g_ctrlreq.req.wLength > 128) ? 128 : udd_g_ctrlreq.req.wLength;
   820ca:	88eb      	ldrh	r3, [r5, #6]
   820cc:	2b80      	cmp	r3, #128	; 0x80
   820ce:	4699      	mov	r9, r3
   820d0:	bf28      	it	cs
   820d2:	f04f 0980 	movcs.w	r9, #128	; 0x80
        for(cnt = 0; cnt < data; cnt++){
   820d6:	b1c3      	cbz	r3, 8210a <usart_setup_in_received+0x6e>
   820d8:	f8df 8048 	ldr.w	r8, [pc, #72]	; 82124 <usart_setup_in_received+0x88>
   820dc:	f8df a048 	ldr.w	sl, [pc, #72]	; 82128 <usart_setup_in_received+0x8c>
   820e0:	4644      	mov	r4, r8
    return get_from_circ_buf(&driver->rxbuf);
   820e2:	361c      	adds	r6, #28
   820e4:	eb08 0709 	add.w	r7, r8, r9
   820e8:	4630      	mov	r0, r6
   820ea:	47d0      	blx	sl
            respbuf[cnt] = usart_driver_getchar(driver);
   820ec:	f804 0b01 	strb.w	r0, [r4], #1
        for(cnt = 0; cnt < data; cnt++){
   820f0:	42a7      	cmp	r7, r4
   820f2:	d1f9      	bne.n	820e8 <usart_setup_in_received+0x4c>
        return true;
   820f4:	2001      	movs	r0, #1
        udd_g_ctrlreq.payload = respbuf;
   820f6:	f8c5 8008 	str.w	r8, [r5, #8]
        udd_g_ctrlreq.payload_size = cnt;
   820fa:	f8a5 900c 	strh.w	r9, [r5, #12]
}
   820fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        return naeusb_cdc_settings_in();
   82102:	4b0a      	ldr	r3, [pc, #40]	; (8212c <usart_setup_in_received+0x90>)
}
   82104:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        return naeusb_cdc_settings_in();
   82108:	4718      	bx	r3
        for(cnt = 0; cnt < data; cnt++){
   8210a:	4699      	mov	r9, r3
   8210c:	f8df 8014 	ldr.w	r8, [pc, #20]	; 82124 <usart_setup_in_received+0x88>
   82110:	e7f0      	b.n	820f4 <usart_setup_in_received+0x58>
		if (port == 0) break;
   82112:	4e07      	ldr	r6, [pc, #28]	; (82130 <usart_setup_in_received+0x94>)
   82114:	e7d9      	b.n	820ca <usart_setup_in_received+0x2e>
   82116:	bf00      	nop
   82118:	2007228c 	.word	0x2007228c
   8211c:	00081cc9 	.word	0x00081cc9
   82120:	200706a0 	.word	0x200706a0
   82124:	20071a18 	.word	0x20071a18
   82128:	0008016d 	.word	0x0008016d
   8212c:	00082051 	.word	0x00082051
   82130:	20070400 	.word	0x20070400

00082134 <cdc_enable>:
   82134:	b150      	cbz	r0, 8214c <cdc_enable+0x18>
   82136:	2801      	cmp	r0, #1
   82138:	d10a      	bne.n	82150 <cdc_enable+0x1c>
   8213a:	4b09      	ldr	r3, [pc, #36]	; (82160 <cdc_enable+0x2c>)
    driver->cdc_enabled = 1;
   8213c:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
}
   82140:	2001      	movs	r0, #1
    driver->cdc_enabled = 1;
   82142:	f042 0204 	orr.w	r2, r2, #4
   82146:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
}
   8214a:	4770      	bx	lr
		if (port == 0) break;
   8214c:	4b05      	ldr	r3, [pc, #20]	; (82164 <cdc_enable+0x30>)
   8214e:	e7f5      	b.n	8213c <cdc_enable+0x8>
    driver->cdc_enabled = 1;
   82150:	2200      	movs	r2, #0
   82152:	f892 329c 	ldrb.w	r3, [r2, #668]	; 0x29c
   82156:	f362 0382 	bfi	r3, r2, #2, #1
   8215a:	f882 329c 	strb.w	r3, [r2, #668]	; 0x29c
   8215e:	deff      	udf	#255	; 0xff
   82160:	200706a0 	.word	0x200706a0
   82164:	20070400 	.word	0x20070400

00082168 <cdc_disable>:
		if (port == 0) break;
   82168:	b160      	cbz	r0, 82184 <cdc_disable+0x1c>
   8216a:	2801      	cmp	r0, #1
   8216c:	d10c      	bne.n	82188 <cdc_disable+0x20>
   8216e:	4b0a      	ldr	r3, [pc, #40]	; (82198 <cdc_disable+0x30>)
    NAEUSB_CDC_IS_RUNNING = false;
   82170:	2000      	movs	r0, #0
    driver->cdc_enabled = 0;
   82172:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
    NAEUSB_CDC_IS_RUNNING = false;
   82176:	4909      	ldr	r1, [pc, #36]	; (8219c <cdc_disable+0x34>)
    driver->cdc_enabled = 0;
   82178:	f36f 0282 	bfc	r2, #2, #1
   8217c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    NAEUSB_CDC_IS_RUNNING = false;
   82180:	7008      	strb	r0, [r1, #0]
}
   82182:	4770      	bx	lr
		if (port == 0) break;
   82184:	4b06      	ldr	r3, [pc, #24]	; (821a0 <cdc_disable+0x38>)
   82186:	e7f3      	b.n	82170 <cdc_disable+0x8>
    driver->cdc_enabled = 0;
   82188:	2200      	movs	r2, #0
   8218a:	f892 329c 	ldrb.w	r3, [r2, #668]	; 0x29c
   8218e:	f362 0382 	bfi	r3, r2, #2, #1
   82192:	f882 329c 	strb.w	r3, [r2, #668]	; 0x29c
   82196:	deff      	udf	#255	; 0xff
   82198:	200706a0 	.word	0x200706a0
   8219c:	20071a9b 	.word	0x20071a9b
   821a0:	20070400 	.word	0x20070400

000821a4 <my_callback_rx_notify>:
{
   821a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		if (port == 0) break;
   821a8:	4681      	mov	r9, r0
   821aa:	b388      	cbz	r0, 82210 <my_callback_rx_notify+0x6c>
   821ac:	2801      	cmp	r0, #1
   821ae:	d131      	bne.n	82214 <my_callback_rx_notify+0x70>
   821b0:	4f1c      	ldr	r7, [pc, #112]	; (82224 <my_callback_rx_notify+0x80>)
    NAEUSB_CDC_IS_RUNNING = true;
   821b2:	2101      	movs	r1, #1
    if (driver->cdc_enabled && driver->enabled) {
   821b4:	f897 329c 	ldrb.w	r3, [r7, #668]	; 0x29c
    NAEUSB_CDC_IS_RUNNING = true;
   821b8:	4a1b      	ldr	r2, [pc, #108]	; (82228 <my_callback_rx_notify+0x84>)
    if (driver->cdc_enabled && driver->enabled) {
   821ba:	f003 0306 	and.w	r3, r3, #6
   821be:	2b06      	cmp	r3, #6
    NAEUSB_CDC_IS_RUNNING = true;
   821c0:	7011      	strb	r1, [r2, #0]
    if (driver->cdc_enabled && driver->enabled) {
   821c2:	d001      	beq.n	821c8 <my_callback_rx_notify+0x24>
}
   821c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
        iram_size_t num_char = udi_cdc_multi_get_nb_received_data(port);
   821c8:	4648      	mov	r0, r9
   821ca:	f8df a060 	ldr.w	sl, [pc, #96]	; 8222c <my_callback_rx_notify+0x88>
   821ce:	47d0      	blx	sl
        while (num_char > 0) {
   821d0:	4605      	mov	r5, r0
   821d2:	2800      	cmp	r0, #0
   821d4:	d0f6      	beq.n	821c4 <my_callback_rx_notify+0x20>
   821d6:	f8df b058 	ldr.w	fp, [pc, #88]	; 82230 <my_callback_rx_notify+0x8c>
   821da:	4e16      	ldr	r6, [pc, #88]	; (82234 <my_callback_rx_notify+0x90>)
   821dc:	f8df 8058 	ldr.w	r8, [pc, #88]	; 82238 <my_callback_rx_notify+0x94>
            num_char = (num_char > 512) ? 512 : num_char;
   821e0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
   821e4:	bf28      	it	cs
   821e6:	f44f 7500 	movcs.w	r5, #512	; 0x200
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   821ea:	4631      	mov	r1, r6
   821ec:	4648      	mov	r0, r9
   821ee:	462a      	mov	r2, r5
            for (uint16_t i = 0; i < num_char; i++) {
   821f0:	2400      	movs	r4, #0
            udi_cdc_multi_read_buf(port, uart_buf, num_char);
   821f2:	47d8      	blx	fp
                usart_driver_putchar(driver, uart_buf[i]);
   821f4:	5d31      	ldrb	r1, [r6, r4]
            for (uint16_t i = 0; i < num_char; i++) {
   821f6:	3401      	adds	r4, #1
                usart_driver_putchar(driver, uart_buf[i]);
   821f8:	4638      	mov	r0, r7
            for (uint16_t i = 0; i < num_char; i++) {
   821fa:	b2a4      	uxth	r4, r4
                usart_driver_putchar(driver, uart_buf[i]);
   821fc:	47c0      	blx	r8
            for (uint16_t i = 0; i < num_char; i++) {
   821fe:	42ac      	cmp	r4, r5
   82200:	d3f8      	bcc.n	821f4 <my_callback_rx_notify+0x50>
            num_char = udi_cdc_multi_get_nb_received_data(port);
   82202:	4648      	mov	r0, r9
   82204:	47d0      	blx	sl
        while (num_char > 0) {
   82206:	4605      	mov	r5, r0
   82208:	2800      	cmp	r0, #0
   8220a:	d1e9      	bne.n	821e0 <my_callback_rx_notify+0x3c>
}
   8220c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (port == 0) break;
   82210:	4f0a      	ldr	r7, [pc, #40]	; (8223c <my_callback_rx_notify+0x98>)
   82212:	e7ce      	b.n	821b2 <my_callback_rx_notify+0xe>
    NAEUSB_CDC_IS_RUNNING = true;
   82214:	2101      	movs	r1, #1
    if (driver->cdc_enabled && driver->enabled) {
   82216:	2300      	movs	r3, #0
    NAEUSB_CDC_IS_RUNNING = true;
   82218:	4a03      	ldr	r2, [pc, #12]	; (82228 <my_callback_rx_notify+0x84>)
   8221a:	7011      	strb	r1, [r2, #0]
    if (driver->cdc_enabled && driver->enabled) {
   8221c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
   82220:	deff      	udf	#255	; 0xff
   82222:	bf00      	nop
   82224:	200706a0 	.word	0x200706a0
   82228:	20071a9b 	.word	0x20071a9b
   8222c:	00085aa5 	.word	0x00085aa5
   82230:	00085af5 	.word	0x00085af5
   82234:	20071a9c 	.word	0x20071a9c
   82238:	00081eed 	.word	0x00081eed
   8223c:	20070400 	.word	0x20070400

00082240 <my_callback_config>:
{
   82240:	b530      	push	{r4, r5, lr}
   82242:	b083      	sub	sp, #12
		if (port == 0) break;
   82244:	b340      	cbz	r0, 82298 <my_callback_config+0x58>
   82246:	2801      	cmp	r0, #1
   82248:	d128      	bne.n	8229c <my_callback_config+0x5c>
   8224a:	4c16      	ldr	r4, [pc, #88]	; (822a4 <my_callback_config+0x64>)
    if (driver->cdc_enabled) {
   8224c:	f894 329c 	ldrb.w	r3, [r4, #668]	; 0x29c
   82250:	075a      	lsls	r2, r3, #29
   82252:	d502      	bpl.n	8225a <my_callback_config+0x1a>
        switch(cfg->bParityType) {
   82254:	794b      	ldrb	r3, [r1, #5]
   82256:	2b04      	cmp	r3, #4
   82258:	d901      	bls.n	8225e <my_callback_config+0x1e>
}
   8225a:	b003      	add	sp, #12
   8225c:	bd30      	pop	{r4, r5, pc}
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   8225e:	2300      	movs	r3, #0
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
   82260:	798a      	ldrb	r2, [r1, #6]
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   82262:	4620      	mov	r0, r4
        uint8_t dbits = ((uint32_t)cfg->bDataBits - 5) << 6;
   82264:	3a05      	subs	r2, #5
   82266:	0192      	lsls	r2, r2, #6
        configure_usart(driver, baud, stop_bits, parity_type, dbits);
   82268:	b2d2      	uxtb	r2, r2
   8226a:	6809      	ldr	r1, [r1, #0]
   8226c:	4d0e      	ldr	r5, [pc, #56]	; (822a8 <my_callback_config+0x68>)
   8226e:	9200      	str	r2, [sp, #0]
   82270:	461a      	mov	r2, r3
   82272:	47a8      	blx	r5
		if (!(usart_get_interrupt_mask(driver->usart) & UART_IER_RXRDY)) {
   82274:	4b0d      	ldr	r3, [pc, #52]	; (822ac <my_callback_config+0x6c>)
   82276:	6820      	ldr	r0, [r4, #0]
   82278:	4798      	blx	r3
   8227a:	07c3      	lsls	r3, r0, #31
   8227c:	d4ed      	bmi.n	8225a <my_callback_config+0x1a>
			usart_enable_rx(driver->usart);
   8227e:	6820      	ldr	r0, [r4, #0]
   82280:	4b0b      	ldr	r3, [pc, #44]	; (822b0 <my_callback_config+0x70>)
   82282:	4798      	blx	r3
			usart_enable_tx(driver->usart);
   82284:	6820      	ldr	r0, [r4, #0]
   82286:	4b0b      	ldr	r3, [pc, #44]	; (822b4 <my_callback_config+0x74>)
   82288:	4798      	blx	r3
			usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   8228a:	2101      	movs	r1, #1
   8228c:	6820      	ldr	r0, [r4, #0]
   8228e:	4b0a      	ldr	r3, [pc, #40]	; (822b8 <my_callback_config+0x78>)
}
   82290:	b003      	add	sp, #12
   82292:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
			usart_enable_interrupt(driver->usart, UART_IER_RXRDY);
   82296:	4718      	bx	r3
		if (port == 0) break;
   82298:	4c08      	ldr	r4, [pc, #32]	; (822bc <my_callback_config+0x7c>)
   8229a:	e7d7      	b.n	8224c <my_callback_config+0xc>
    if (driver->cdc_enabled) {
   8229c:	2300      	movs	r3, #0
   8229e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
   822a2:	deff      	udf	#255	; 0xff
   822a4:	200706a0 	.word	0x200706a0
   822a8:	00081d69 	.word	0x00081d69
   822ac:	00083141 	.word	0x00083141
   822b0:	00083129 	.word	0x00083129
   822b4:	00083119 	.word	0x00083119
   822b8:	00083139 	.word	0x00083139
   822bc:	20070400 	.word	0x20070400

000822c0 <cdc_send_to_pc>:

void cdc_send_to_pc(void)
{
   822c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   822c4:	2500      	movs	r5, #0
   822c6:	2401      	movs	r4, #1
    // if (!NAEUSB_CDC_IS_RUNNING) return; //fixes Pro streaming requiring connection to CDC
	for (uint8_t i = 0; i < 4; i++) {
		usart_driver *driver = get_nth_available_driver(i);
		if (!driver) continue;
		if (driver->cdc_enabled && driver->enabled && udi_cdc_multi_is_tx_ready(i)) {
   822c8:	f8df a060 	ldr.w	sl, [pc, #96]	; 8232c <cdc_send_to_pc+0x6c>
   822cc:	4f18      	ldr	r7, [pc, #96]	; (82330 <cdc_send_to_pc+0x70>)
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   822ce:	f8df 9064 	ldr.w	r9, [pc, #100]	; 82334 <cdc_send_to_pc+0x74>
   822d2:	f8df 8064 	ldr.w	r8, [pc, #100]	; 82338 <cdc_send_to_pc+0x78>
   822d6:	b2ee      	uxtb	r6, r5
		if (port == 0) break;
   822d8:	b14d      	cbz	r5, 822ee <cdc_send_to_pc+0x2e>
   822da:	2e01      	cmp	r6, #1
   822dc:	d023      	beq.n	82326 <cdc_send_to_pc+0x66>
	for (uint8_t i = 0; i < 4; i++) {
   822de:	2c04      	cmp	r4, #4
   822e0:	d01f      	beq.n	82322 <cdc_send_to_pc+0x62>
   822e2:	3401      	adds	r4, #1
   822e4:	3501      	adds	r5, #1
   822e6:	b2e4      	uxtb	r4, r4
   822e8:	b2ee      	uxtb	r6, r5
		if (port == 0) break;
   822ea:	2d00      	cmp	r5, #0
   822ec:	d1f5      	bne.n	822da <cdc_send_to_pc+0x1a>
   822ee:	f8df b04c 	ldr.w	fp, [pc, #76]	; 8233c <cdc_send_to_pc+0x7c>
		if (driver->cdc_enabled && driver->enabled && udi_cdc_multi_is_tx_ready(i)) {
   822f2:	f89b 329c 	ldrb.w	r3, [fp, #668]	; 0x29c
   822f6:	f003 0306 	and.w	r3, r3, #6
   822fa:	2b06      	cmp	r3, #6
   822fc:	d1f1      	bne.n	822e2 <cdc_send_to_pc+0x22>
   822fe:	4630      	mov	r0, r6
   82300:	47d0      	blx	sl
   82302:	2800      	cmp	r0, #0
   82304:	d0eb      	beq.n	822de <cdc_send_to_pc+0x1e>
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   82306:	f50b 7be2 	add.w	fp, fp, #452	; 0x1c4
   8230a:	e004      	b.n	82316 <cdc_send_to_pc+0x56>
				udi_cdc_multi_putc(i, get_from_circ_buf(&driver->rx_cdc_buf));
   8230c:	4658      	mov	r0, fp
   8230e:	47c8      	blx	r9
   82310:	4601      	mov	r1, r0
   82312:	4630      	mov	r0, r6
   82314:	47c0      	blx	r8
			while (circ_buf_has_char(&driver->rx_cdc_buf)) {
   82316:	4658      	mov	r0, fp
   82318:	47b8      	blx	r7
   8231a:	2800      	cmp	r0, #0
   8231c:	d1f6      	bne.n	8230c <cdc_send_to_pc+0x4c>
	for (uint8_t i = 0; i < 4; i++) {
   8231e:	2c04      	cmp	r4, #4
   82320:	d1df      	bne.n	822e2 <cdc_send_to_pc+0x22>
			}
		}

	}
	
}
   82322:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (port == 0) break;
   82326:	f8df b018 	ldr.w	fp, [pc, #24]	; 82340 <cdc_send_to_pc+0x80>
   8232a:	e7e2      	b.n	822f2 <cdc_send_to_pc+0x32>
   8232c:	00085bbd 	.word	0x00085bbd
   82330:	0008018d 	.word	0x0008018d
   82334:	0008016d 	.word	0x0008016d
   82338:	00085c31 	.word	0x00085c31
   8233c:	20070400 	.word	0x20070400
   82340:	200706a0 	.word	0x200706a0

00082344 <fpga_target_setup_out_received>:
	}
}

bool fpga_target_setup_out_received(void)
{
    blockendpoint_usage = bep_emem;
   82344:	2000      	movs	r0, #0
    switch(udd_g_ctrlreq.req.bRequest){
   82346:	4a29      	ldr	r2, [pc, #164]	; (823ec <fpga_target_setup_out_received+0xa8>)
    blockendpoint_usage = bep_emem;
   82348:	4929      	ldr	r1, [pc, #164]	; (823f0 <fpga_target_setup_out_received+0xac>)
    switch(udd_g_ctrlreq.req.bRequest){
   8234a:	7853      	ldrb	r3, [r2, #1]
    blockendpoint_usage = bep_emem;
   8234c:	7008      	strb	r0, [r1, #0]
    switch(udd_g_ctrlreq.req.bRequest){
   8234e:	3b10      	subs	r3, #16
   82350:	2b25      	cmp	r3, #37	; 0x25
   82352:	d818      	bhi.n	82386 <fpga_target_setup_out_received+0x42>
   82354:	e8df f003 	tbb	[pc, r3]
   82358:	2925211d 	.word	0x2925211d
   8235c:	17312d17 	.word	0x17312d17
   82360:	17171717 	.word	0x17171717
   82364:	17171717 	.word	0x17171717
   82368:	17131717 	.word	0x17131717
   8236c:	17171717 	.word	0x17171717
   82370:	17171717 	.word	0x17171717
   82374:	17171717 	.word	0x17171717
   82378:	3d173935 	.word	0x3d173935
   8237c:	1941      	.short	0x1941
		case REQ_SAM_CFG:
			0;
			uint16_t wVal = udd_g_ctrlreq.req.wValue & 0xFF;
   8237e:	7893      	ldrb	r3, [r2, #2]
			if ((wVal > 0x03) && (wVal < 0x10)) {
   82380:	3b04      	subs	r3, #4
   82382:	2b0b      	cmp	r3, #11
   82384:	d92d      	bls.n	823e2 <fpga_target_setup_out_received+0x9e>
				udd_g_ctrlreq.callback = fpga_target_sam_cfg_out;
				return true;
			} else {
				return false;
   82386:	2000      	movs	r0, #0
            return true;

        default:
            return false;
    }					
}
   82388:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_spi1util;
   8238a:	4b1a      	ldr	r3, [pc, #104]	; (823f4 <fpga_target_setup_out_received+0xb0>)
            return true;
   8238c:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_spi1util;
   8238e:	6113      	str	r3, [r2, #16]
            return true;
   82390:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   82392:	4b19      	ldr	r3, [pc, #100]	; (823f8 <fpga_target_setup_out_received+0xb4>)
            return true;
   82394:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_readmem_bulk;
   82396:	6113      	str	r3, [r2, #16]
            return true;
   82398:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   8239a:	4b18      	ldr	r3, [pc, #96]	; (823fc <fpga_target_setup_out_received+0xb8>)
            return true;
   8239c:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_writemem_bulk;
   8239e:	6113      	str	r3, [r2, #16]
            return true;
   823a0:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   823a2:	4b17      	ldr	r3, [pc, #92]	; (82400 <fpga_target_setup_out_received+0xbc>)
            return true;	
   823a4:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_readmem_ctrl;
   823a6:	6113      	str	r3, [r2, #16]
            return true;	
   823a8:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   823aa:	4b16      	ldr	r3, [pc, #88]	; (82404 <fpga_target_setup_out_received+0xc0>)
            return true;		
   823ac:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl;
   823ae:	6113      	str	r3, [r2, #16]
            return true;		
   823b0:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl_sam3u;
   823b2:	4b15      	ldr	r3, [pc, #84]	; (82408 <fpga_target_setup_out_received+0xc4>)
            return true;		
   823b4:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_writemem_ctrl_sam3u;
   823b6:	6113      	str	r3, [r2, #16]
            return true;		
   823b8:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   823ba:	4b14      	ldr	r3, [pc, #80]	; (8240c <fpga_target_setup_out_received+0xc8>)
            return true;
   823bc:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_progfpga_bulk;
   823be:	6113      	str	r3, [r2, #16]
            return true;
   823c0:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_cdce906_cb;
   823c2:	4b13      	ldr	r3, [pc, #76]	; (82410 <fpga_target_setup_out_received+0xcc>)
            return true;
   823c4:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_cdce906_cb;
   823c6:	6113      	str	r3, [r2, #16]
            return true;
   823c8:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_vccint_cb;
   823ca:	4b12      	ldr	r3, [pc, #72]	; (82414 <fpga_target_setup_out_received+0xd0>)
            return true;
   823cc:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_vccint_cb;
   823ce:	6113      	str	r3, [r2, #16]
            return true;
   823d0:	4770      	bx	lr
			udd_g_ctrlreq.callback = ctrl_progfpgaspi;
   823d2:	4b11      	ldr	r3, [pc, #68]	; (82418 <fpga_target_setup_out_received+0xd4>)
			return true;
   823d4:	2001      	movs	r0, #1
			udd_g_ctrlreq.callback = ctrl_progfpgaspi;
   823d6:	6113      	str	r3, [r2, #16]
			return true;
   823d8:	4770      	bx	lr
            udd_g_ctrlreq.callback = ctrl_fpgaioutil;
   823da:	4b10      	ldr	r3, [pc, #64]	; (8241c <fpga_target_setup_out_received+0xd8>)
            return true;
   823dc:	2001      	movs	r0, #1
            udd_g_ctrlreq.callback = ctrl_fpgaioutil;
   823de:	6113      	str	r3, [r2, #16]
            return true;
   823e0:	4770      	bx	lr
				udd_g_ctrlreq.callback = fpga_target_sam_cfg_out;
   823e2:	4b0f      	ldr	r3, [pc, #60]	; (82420 <fpga_target_setup_out_received+0xdc>)
				return true;
   823e4:	2001      	movs	r0, #1
				udd_g_ctrlreq.callback = fpga_target_sam_cfg_out;
   823e6:	6113      	str	r3, [r2, #16]
				return true;
   823e8:	4770      	bx	lr
   823ea:	bf00      	nop
   823ec:	2007228c 	.word	0x2007228c
   823f0:	20071c9d 	.word	0x20071c9d
   823f4:	000829a1 	.word	0x000829a1
   823f8:	000824b9 	.word	0x000824b9
   823fc:	00082499 	.word	0x00082499
   82400:	00082425 	.word	0x00082425
   82404:	00082451 	.word	0x00082451
   82408:	000824e9 	.word	0x000824e9
   8240c:	000827f1 	.word	0x000827f1
   82410:	00082aa1 	.word	0x00082aa1
   82414:	00082761 	.word	0x00082761
   82418:	00082a21 	.word	0x00082a21
   8241c:	00082895 	.word	0x00082895
   82420:	00082841 	.word	0x00082841

00082424 <ctrl_readmem_ctrl>:
void ctrl_readmem_ctrl(void){
   82424:	b538      	push	{r3, r4, r5, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82426:	4b06      	ldr	r3, [pc, #24]	; (82440 <ctrl_readmem_ctrl+0x1c>)
    FPGA_setlock(fpga_ctrlmem);
   82428:	4a06      	ldr	r2, [pc, #24]	; (82444 <ctrl_readmem_ctrl+0x20>)
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   8242a:	685c      	ldr	r4, [r3, #4]
    FPGA_setlock(fpga_ctrlmem);
   8242c:	2005      	movs	r0, #5
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   8242e:	681d      	ldr	r5, [r3, #0]
    FPGA_setlock(fpga_ctrlmem);
   82430:	4790      	blx	r2
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS + address;
   82432:	4a05      	ldr	r2, [pc, #20]	; (82448 <ctrl_readmem_ctrl+0x24>)
    ctrlmemread_size = buflen;
   82434:	4b05      	ldr	r3, [pc, #20]	; (8244c <ctrl_readmem_ctrl+0x28>)
    ctrlmemread_buf = (uint8_t *) PSRAM_BASE_ADDRESS + address;
   82436:	f104 44c0 	add.w	r4, r4, #1610612736	; 0x60000000
   8243a:	6014      	str	r4, [r2, #0]
    ctrlmemread_size = buflen;
   8243c:	601d      	str	r5, [r3, #0]
}
   8243e:	bd38      	pop	{r3, r4, r5, pc}
   82440:	20071514 	.word	0x20071514
   82444:	00082b21 	.word	0x00082b21
   82448:	20071ca8 	.word	0x20071ca8
   8244c:	20071cac 	.word	0x20071cac

00082450 <ctrl_writemem_ctrl>:
void ctrl_writemem_ctrl(void){
   82450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82454:	4f0d      	ldr	r7, [pc, #52]	; (8248c <ctrl_writemem_ctrl+0x3c>)
    FPGA_setlock(fpga_generic);
   82456:	2001      	movs	r0, #1
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);
   82458:	683c      	ldr	r4, [r7, #0]
    FPGA_setlock(fpga_generic);
   8245a:	4e0d      	ldr	r6, [pc, #52]	; (82490 <ctrl_writemem_ctrl+0x40>)
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   8245c:	687d      	ldr	r5, [r7, #4]
    FPGA_setlock(fpga_generic);
   8245e:	47b0      	blx	r6
    for(unsigned int i = 0; i < buflen; i++){
   82460:	b174      	cbz	r4, 82480 <ctrl_writemem_ctrl+0x30>
   82462:	eb07 0c04 	add.w	ip, r7, r4
   82466:	1fec      	subs	r4, r5, #7
   82468:	4d0a      	ldr	r5, [pc, #40]	; (82494 <ctrl_writemem_ctrl+0x44>)
   8246a:	1dfb      	adds	r3, r7, #7
        xram[i+address] = ctrlbuf_payload[i];
   8246c:	1be4      	subs	r4, r4, r7
   8246e:	f10c 0c07 	add.w	ip, ip, #7
   82472:	18e2      	adds	r2, r4, r3
   82474:	f813 0f01 	ldrb.w	r0, [r3, #1]!
   82478:	6829      	ldr	r1, [r5, #0]
    for(unsigned int i = 0; i < buflen; i++){
   8247a:	4563      	cmp	r3, ip
        xram[i+address] = ctrlbuf_payload[i];
   8247c:	5488      	strb	r0, [r1, r2]
    for(unsigned int i = 0; i < buflen; i++){
   8247e:	d1f8      	bne.n	82472 <ctrl_writemem_ctrl+0x22>
    FPGA_setlock(fpga_unlocked);
   82480:	4633      	mov	r3, r6
}
   82482:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    FPGA_setlock(fpga_unlocked);
   82486:	2000      	movs	r0, #0
   82488:	4718      	bx	r3
   8248a:	bf00      	nop
   8248c:	20071514 	.word	0x20071514
   82490:	00082b21 	.word	0x00082b21
   82494:	20070944 	.word	0x20070944

00082498 <ctrl_writemem_bulk>:
void ctrl_writemem_bulk(void){
   82498:	b508      	push	{r3, lr}
    FPGA_setlock(fpga_blockout);
   8249a:	2004      	movs	r0, #4
   8249c:	4b03      	ldr	r3, [pc, #12]	; (824ac <ctrl_writemem_bulk+0x14>)
   8249e:	4798      	blx	r3
    bulk_fpga_write_addr = *(CTRLBUFFER_WORDPTR + 1);
   824a0:	4a03      	ldr	r2, [pc, #12]	; (824b0 <ctrl_writemem_bulk+0x18>)
   824a2:	4b04      	ldr	r3, [pc, #16]	; (824b4 <ctrl_writemem_bulk+0x1c>)
   824a4:	6852      	ldr	r2, [r2, #4]
   824a6:	601a      	str	r2, [r3, #0]
}
   824a8:	bd08      	pop	{r3, pc}
   824aa:	bf00      	nop
   824ac:	00082b21 	.word	0x00082b21
   824b0:	20071514 	.word	0x20071514
   824b4:	20071ca0 	.word	0x20071ca0

000824b8 <ctrl_readmem_bulk>:
void ctrl_readmem_bulk(void){
   824b8:	b570      	push	{r4, r5, r6, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR);	
   824ba:	4b07      	ldr	r3, [pc, #28]	; (824d8 <ctrl_readmem_bulk+0x20>)
    FPGA_setlock(fpga_blockin);
   824bc:	2002      	movs	r0, #2
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   824be:	e9d3 5400 	ldrd	r5, r4, [r3]
    FPGA_setlock(fpga_blockin);
   824c2:	4b06      	ldr	r3, [pc, #24]	; (824dc <ctrl_readmem_bulk+0x24>)
   824c4:	4798      	blx	r3
    udi_vendor_bulk_in_run(
   824c6:	4629      	mov	r1, r5
   824c8:	f104 40c0 	add.w	r0, r4, #1610612736	; 0x60000000
   824cc:	4a04      	ldr	r2, [pc, #16]	; (824e0 <ctrl_readmem_bulk+0x28>)
   824ce:	4b05      	ldr	r3, [pc, #20]	; (824e4 <ctrl_readmem_bulk+0x2c>)
}
   824d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    udi_vendor_bulk_in_run(
   824d4:	4718      	bx	r3
   824d6:	bf00      	nop
   824d8:	20071514 	.word	0x20071514
   824dc:	00082b21 	.word	0x00082b21
   824e0:	000827cd 	.word	0x000827cd
   824e4:	00083655 	.word	0x00083655

000824e8 <ctrl_writemem_ctrl_sam3u>:
void ctrl_writemem_ctrl_sam3u(void){
   824e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t buflen = *(CTRLBUFFER_WORDPTR) - 4; // remove the first 4 bytes of the payload who contain the flags
   824ec:	492c      	ldr	r1, [pc, #176]	; (825a0 <ctrl_writemem_ctrl_sam3u+0xb8>)
void ctrl_writemem_ctrl_sam3u(void){
   824ee:	b083      	sub	sp, #12
    uint32_t address = *(CTRLBUFFER_WORDPTR + 1);
   824f0:	e9d1 2300 	ldrd	r2, r3, [r1]
    for(unsigned int i = 0; i < buflen; i++){
   824f4:	3a04      	subs	r2, #4
    uint32_t flags = *(CTRLBUFFER_WORDPTR + 2);
   824f6:	688e      	ldr	r6, [r1, #8]
    for(unsigned int i = 0; i < buflen; i++){
   824f8:	d004      	beq.n	82504 <ctrl_writemem_ctrl_sam3u+0x1c>
        sam3u_mem_b[i+address] = ctrlbuf_payload[i];
   824fa:	482a      	ldr	r0, [pc, #168]	; (825a4 <ctrl_writemem_ctrl_sam3u+0xbc>)
   824fc:	310c      	adds	r1, #12
   824fe:	4418      	add	r0, r3
   82500:	4b29      	ldr	r3, [pc, #164]	; (825a8 <ctrl_writemem_ctrl_sam3u+0xc0>)
   82502:	4798      	blx	r3
    if ( flags & 0x1 ){ // encryptions have been requested
   82504:	07f3      	lsls	r3, r6, #31
   82506:	d522      	bpl.n	8254e <ctrl_writemem_ctrl_sam3u+0x66>
        uint32_t seed = sam3u_mem[0]; // load the seed at addr 0
   82508:	4b26      	ldr	r3, [pc, #152]	; (825a4 <ctrl_writemem_ctrl_sam3u+0xbc>)
        for(unsigned int b = 0; b < (flags >> 16); b++){
   8250a:	0c37      	lsrs	r7, r6, #16
        uint32_t seed = sam3u_mem[0]; // load the seed at addr 0
   8250c:	f8d3 8000 	ldr.w	r8, [r3]
        for(unsigned int b = 0; b < (flags >> 16); b++){
   82510:	d01d      	beq.n	8254e <ctrl_writemem_ctrl_sam3u+0x66>
   82512:	2400      	movs	r4, #0
            if ((flags >> 1) & 0x1){ // write the key
   82514:	f3c6 0340 	ubfx	r3, r6, #1, #1
   82518:	4d24      	ldr	r5, [pc, #144]	; (825ac <ctrl_writemem_ctrl_sam3u+0xc4>)
   8251a:	f8df a094 	ldr.w	sl, [pc, #148]	; 825b0 <ctrl_writemem_ctrl_sam3u+0xc8>
   8251e:	f8df 9094 	ldr.w	r9, [pc, #148]	; 825b4 <ctrl_writemem_ctrl_sam3u+0xcc>
   82522:	f8df b094 	ldr.w	fp, [pc, #148]	; 825b8 <ctrl_writemem_ctrl_sam3u+0xd0>
   82526:	9301      	str	r3, [sp, #4]
            if ((flags >> 2) & 0x1){ // write the pts
   82528:	f3c6 0680 	ubfx	r6, r6, #2, #1
            FPGA_setlock(fpga_generic);
   8252c:	2001      	movs	r0, #1
   8252e:	47a8      	blx	r5
            if ((flags >> 1) & 0x1){ // write the key
   82530:	9b01      	ldr	r3, [sp, #4]
   82532:	b97b      	cbnz	r3, 82554 <ctrl_writemem_ctrl_sam3u+0x6c>
            if ((flags >> 2) & 0x1){ // write the pts
   82534:	bb0e      	cbnz	r6, 8257a <ctrl_writemem_ctrl_sam3u+0x92>
            FPGA_setlock(fpga_unlocked);
   82536:	2000      	movs	r0, #0
   82538:	47a8      	blx	r5
            gpio_set_pin_high(FPGA_TRIGGER_GPIO);
   8253a:	2057      	movs	r0, #87	; 0x57
   8253c:	47d0      	blx	sl
            delay_cycles(50);
   8253e:	2032      	movs	r0, #50	; 0x32
   82540:	47c8      	blx	r9
        for(unsigned int b = 0; b < (flags >> 16); b++){
   82542:	3401      	adds	r4, #1
            gpio_set_pin_low(FPGA_TRIGGER_GPIO);
   82544:	2057      	movs	r0, #87	; 0x57
   82546:	4b1d      	ldr	r3, [pc, #116]	; (825bc <ctrl_writemem_ctrl_sam3u+0xd4>)
   82548:	4798      	blx	r3
        for(unsigned int b = 0; b < (flags >> 16); b++){
   8254a:	42bc      	cmp	r4, r7
   8254c:	d1ee      	bne.n	8252c <ctrl_writemem_ctrl_sam3u+0x44>
}
   8254e:	b003      	add	sp, #12
   82550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82554:	f44f 62a0 	mov.w	r2, #1280	; 0x500
                    xram[j+0x400+0x100] = seed >> 24;
   82558:	f8db 0000 	ldr.w	r0, [fp]
   8255c:	ea4f 6c18 	mov.w	ip, r8, lsr #24
   82560:	f800 c002 	strb.w	ip, [r0, r2]
                    seed += (seed*seed) | 0x5;
   82564:	fb08 f008 	mul.w	r0, r8, r8
                for(unsigned int j = 0; j < 16; j++){
   82568:	3201      	adds	r2, #1
                    seed += (seed*seed) | 0x5;
   8256a:	f040 0005 	orr.w	r0, r0, #5
                for(unsigned int j = 0; j < 16; j++){
   8256e:	f5b2 6fa2 	cmp.w	r2, #1296	; 0x510
                    seed += (seed*seed) | 0x5;
   82572:	4480      	add	r8, r0
                for(unsigned int j = 0; j < 16; j++){
   82574:	d1f0      	bne.n	82558 <ctrl_writemem_ctrl_sam3u+0x70>
            if ((flags >> 2) & 0x1){ // write the pts
   82576:	2e00      	cmp	r6, #0
   82578:	d0dd      	beq.n	82536 <ctrl_writemem_ctrl_sam3u+0x4e>
   8257a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
                    xram[j+0x400+0x200] = seed >> 24;
   8257e:	f8db 0000 	ldr.w	r0, [fp]
   82582:	ea4f 6c18 	mov.w	ip, r8, lsr #24
   82586:	f800 c002 	strb.w	ip, [r0, r2]
                    seed += (seed*seed) | 0x5;
   8258a:	fb08 f008 	mul.w	r0, r8, r8
                for(unsigned int j = 0; j < 16; j++){
   8258e:	3201      	adds	r2, #1
                    seed += (seed*seed) | 0x5;
   82590:	f040 0005 	orr.w	r0, r0, #5
                for(unsigned int j = 0; j < 16; j++){
   82594:	f5b2 6fc2 	cmp.w	r2, #1552	; 0x610
                    seed += (seed*seed) | 0x5;
   82598:	4480      	add	r8, r0
                for(unsigned int j = 0; j < 16; j++){
   8259a:	d1f0      	bne.n	8257e <ctrl_writemem_ctrl_sam3u+0x96>
   8259c:	e7cb      	b.n	82536 <ctrl_writemem_ctrl_sam3u+0x4e>
   8259e:	bf00      	nop
   825a0:	20071514 	.word	0x20071514
   825a4:	20071cf0 	.word	0x20071cf0
   825a8:	00085e0d 	.word	0x00085e0d
   825ac:	00082b21 	.word	0x00082b21
   825b0:	00083749 	.word	0x00083749
   825b4:	200701b5 	.word	0x200701b5
   825b8:	20070944 	.word	0x20070944
   825bc:	00083765 	.word	0x00083765

000825c0 <main_vendor_bulk_out_received>:
{
   825c0:	b570      	push	{r4, r5, r6, lr}
    if (UDD_EP_TRANSFER_OK != status) {
   825c2:	b9a8      	cbnz	r0, 825f0 <main_vendor_bulk_out_received+0x30>
    if (blockendpoint_usage == bep_emem){
   825c4:	4b17      	ldr	r3, [pc, #92]	; (82624 <main_vendor_bulk_out_received+0x64>)
   825c6:	781b      	ldrb	r3, [r3, #0]
   825c8:	b9d3      	cbnz	r3, 82600 <main_vendor_bulk_out_received+0x40>
        for(unsigned int i = 0; i < nb_transfered; i++){
   825ca:	b169      	cbz	r1, 825e8 <main_vendor_bulk_out_received+0x28>
   825cc:	4b16      	ldr	r3, [pc, #88]	; (82628 <main_vendor_bulk_out_received+0x68>)
   825ce:	4e17      	ldr	r6, [pc, #92]	; (8262c <main_vendor_bulk_out_received+0x6c>)
   825d0:	4817      	ldr	r0, [pc, #92]	; (82630 <main_vendor_bulk_out_received+0x70>)
   825d2:	4419      	add	r1, r3
            xram[bulk_fpga_write_addr++] = main_buf_loopback[i];
   825d4:	6802      	ldr	r2, [r0, #0]
   825d6:	f813 cb01 	ldrb.w	ip, [r3], #1
   825da:	6834      	ldr	r4, [r6, #0]
   825dc:	1c55      	adds	r5, r2, #1
        for(unsigned int i = 0; i < nb_transfered; i++){
   825de:	4299      	cmp	r1, r3
            xram[bulk_fpga_write_addr++] = main_buf_loopback[i];
   825e0:	6005      	str	r5, [r0, #0]
   825e2:	f804 c002 	strb.w	ip, [r4, r2]
        for(unsigned int i = 0; i < nb_transfered; i++){
   825e6:	d1f5      	bne.n	825d4 <main_vendor_bulk_out_received+0x14>
        if (FPGA_lockstatus() == fpga_blockout){
   825e8:	4b12      	ldr	r3, [pc, #72]	; (82634 <main_vendor_bulk_out_received+0x74>)
   825ea:	4798      	blx	r3
   825ec:	2804      	cmp	r0, #4
   825ee:	d014      	beq.n	8261a <main_vendor_bulk_out_received+0x5a>
}
   825f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        udi_vendor_bulk_out_run(
   825f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
   825f8:	4a0f      	ldr	r2, [pc, #60]	; (82638 <main_vendor_bulk_out_received+0x78>)
   825fa:	480b      	ldr	r0, [pc, #44]	; (82628 <main_vendor_bulk_out_received+0x68>)
   825fc:	4b0f      	ldr	r3, [pc, #60]	; (8263c <main_vendor_bulk_out_received+0x7c>)
   825fe:	4718      	bx	r3
    } else if (blockendpoint_usage == bep_fpgabitstream){
   82600:	2b0a      	cmp	r3, #10
   82602:	d1f5      	bne.n	825f0 <main_vendor_bulk_out_received+0x30>
        for(unsigned int i = 0; i < nb_transfered; i++){
   82604:	2900      	cmp	r1, #0
   82606:	d0f3      	beq.n	825f0 <main_vendor_bulk_out_received+0x30>
   82608:	4d07      	ldr	r5, [pc, #28]	; (82628 <main_vendor_bulk_out_received+0x68>)
   8260a:	4e0d      	ldr	r6, [pc, #52]	; (82640 <main_vendor_bulk_out_received+0x80>)
   8260c:	186c      	adds	r4, r5, r1
            fpga_program_sendbyte(main_buf_loopback[i]);
   8260e:	f815 0b01 	ldrb.w	r0, [r5], #1
   82612:	47b0      	blx	r6
        for(unsigned int i = 0; i < nb_transfered; i++){
   82614:	42a5      	cmp	r5, r4
   82616:	d1fa      	bne.n	8260e <main_vendor_bulk_out_received+0x4e>
   82618:	e7ea      	b.n	825f0 <main_vendor_bulk_out_received+0x30>
            FPGA_setlock(fpga_unlocked);
   8261a:	4b0a      	ldr	r3, [pc, #40]	; (82644 <main_vendor_bulk_out_received+0x84>)
   8261c:	2000      	movs	r0, #0
   8261e:	4798      	blx	r3
   82620:	e7e6      	b.n	825f0 <main_vendor_bulk_out_received+0x30>
   82622:	bf00      	nop
   82624:	20071c9d 	.word	0x20071c9d
   82628:	20071594 	.word	0x20071594
   8262c:	20070944 	.word	0x20070944
   82630:	20071ca0 	.word	0x20071ca0
   82634:	00082b5d 	.word	0x00082b5d
   82638:	000825c1 	.word	0x000825c1
   8263c:	00083675 	.word	0x00083675
   82640:	00082bd9 	.word	0x00082bd9
   82644:	00082b21 	.word	0x00082b21

00082648 <fpga_target_setup_in_received>:
{
   82648:	b570      	push	{r4, r5, r6, lr}
    switch(udd_g_ctrlreq.req.bRequest){
   8264a:	4c3a      	ldr	r4, [pc, #232]	; (82734 <fpga_target_setup_in_received+0xec>)
   8264c:	7863      	ldrb	r3, [r4, #1]
   8264e:	3b12      	subs	r3, #18
   82650:	2b23      	cmp	r3, #35	; 0x23
   82652:	d813      	bhi.n	8267c <fpga_target_setup_in_received+0x34>
   82654:	e8df f003 	tbb	[pc, r3]
   82658:	2612121c 	.word	0x2612121c
   8265c:	12121212 	.word	0x12121212
   82660:	12121212 	.word	0x12121212
   82664:	12121212 	.word	0x12121212
   82668:	12121212 	.word	0x12121212
   8266c:	12121212 	.word	0x12121212
   82670:	12121212 	.word	0x12121212
   82674:	4a3e1212 	.word	0x4a3e1212
   82678:	14605812 	.word	0x14605812
                return false;
   8267c:	2000      	movs	r0, #0
}
   8267e:	bd70      	pop	{r4, r5, r6, pc}
 			if (udd_g_ctrlreq.req.wLength > sizeof(spi1util_data_buffer))
   82680:	88e3      	ldrh	r3, [r4, #6]
   82682:	2b40      	cmp	r3, #64	; 0x40
   82684:	d8fa      	bhi.n	8267c <fpga_target_setup_in_received+0x34>
			udd_g_ctrlreq.payload = spi1util_data_buffer;
   82686:	4a2c      	ldr	r2, [pc, #176]	; (82738 <fpga_target_setup_in_received+0xf0>)
			return true;
   82688:	2001      	movs	r0, #1
			udd_g_ctrlreq.payload = spi1util_data_buffer;
   8268a:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   8268c:	81a3      	strh	r3, [r4, #12]
}
   8268e:	bd70      	pop	{r4, r5, r6, pc}
            ctrlmemread_size = 0;
   82690:	2200      	movs	r2, #0
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   82692:	4b2a      	ldr	r3, [pc, #168]	; (8273c <fpga_target_setup_in_received+0xf4>)
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   82694:	492a      	ldr	r1, [pc, #168]	; (82740 <fpga_target_setup_in_received+0xf8>)
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   82696:	6818      	ldr	r0, [r3, #0]
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   82698:	6809      	ldr	r1, [r1, #0]
            ctrlmemread_size = 0;
   8269a:	601a      	str	r2, [r3, #0]
            udd_g_ctrlreq.payload_size = ctrlmemread_size;
   8269c:	81a0      	strh	r0, [r4, #12]
            udd_g_ctrlreq.payload = ctrlmemread_buf;
   8269e:	60a1      	str	r1, [r4, #8]
            return true;
   826a0:	2001      	movs	r0, #1
}
   826a2:	bd70      	pop	{r4, r5, r6, pc}
            respbuf[0] = FPGA_ISDONE();
   826a4:	4e27      	ldr	r6, [pc, #156]	; (82744 <fpga_target_setup_in_received+0xfc>)
   826a6:	2031      	movs	r0, #49	; 0x31
   826a8:	47b0      	blx	r6
   826aa:	4603      	mov	r3, r0
   826ac:	3b00      	subs	r3, #0
   826ae:	bf18      	it	ne
   826b0:	2301      	movne	r3, #1
   826b2:	4d25      	ldr	r5, [pc, #148]	; (82748 <fpga_target_setup_in_received+0x100>)
            respbuf[1] = FPGA_INITB_STATUS();
   826b4:	2032      	movs	r0, #50	; 0x32
            respbuf[0] = FPGA_ISDONE();
   826b6:	702b      	strb	r3, [r5, #0]
            respbuf[1] = FPGA_INITB_STATUS();
   826b8:	47b0      	blx	r6
            respbuf[2] = 0;
   826ba:	2100      	movs	r1, #0
            respbuf[1] = FPGA_INITB_STATUS();
   826bc:	4603      	mov	r3, r0
   826be:	1a5b      	subs	r3, r3, r1
            udd_g_ctrlreq.payload_size = 4;
   826c0:	f04f 0204 	mov.w	r2, #4
            respbuf[1] = FPGA_INITB_STATUS();
   826c4:	bf18      	it	ne
   826c6:	2301      	movne	r3, #1
            return true;
   826c8:	2001      	movs	r0, #1
            udd_g_ctrlreq.payload = respbuf;
   826ca:	60a5      	str	r5, [r4, #8]
            respbuf[2] = 0;
   826cc:	8069      	strh	r1, [r5, #2]
            udd_g_ctrlreq.payload_size = 4;
   826ce:	81a2      	strh	r2, [r4, #12]
            respbuf[1] = FPGA_INITB_STATUS();
   826d0:	706b      	strb	r3, [r5, #1]
}
   826d2:	bd70      	pop	{r4, r5, r6, pc}
            udd_g_ctrlreq.payload_size = 2;
   826d4:	2202      	movs	r2, #2
            respbuf[0] = cdce906_status;
   826d6:	481d      	ldr	r0, [pc, #116]	; (8274c <fpga_target_setup_in_received+0x104>)
            respbuf[1] = cdce906_data;
   826d8:	491d      	ldr	r1, [pc, #116]	; (82750 <fpga_target_setup_in_received+0x108>)
            respbuf[0] = cdce906_status;
   826da:	4b1b      	ldr	r3, [pc, #108]	; (82748 <fpga_target_setup_in_received+0x100>)
   826dc:	7800      	ldrb	r0, [r0, #0]
            respbuf[1] = cdce906_data;
   826de:	7809      	ldrb	r1, [r1, #0]
            respbuf[0] = cdce906_status;
   826e0:	7018      	strb	r0, [r3, #0]
            respbuf[1] = cdce906_data;
   826e2:	7059      	strb	r1, [r3, #1]
            return true;
   826e4:	2001      	movs	r0, #1
            udd_g_ctrlreq.payload = respbuf;
   826e6:	60a3      	str	r3, [r4, #8]
            udd_g_ctrlreq.payload_size = 2;
   826e8:	81a2      	strh	r2, [r4, #12]
}
   826ea:	bd70      	pop	{r4, r5, r6, pc}
            udd_g_ctrlreq.payload_size = 3;
   826ec:	2103      	movs	r1, #3
            respbuf[1] = (uint8_t)vccint_setting;
   826ee:	4b19      	ldr	r3, [pc, #100]	; (82754 <fpga_target_setup_in_received+0x10c>)
            respbuf[0] = vccint_status;
   826f0:	4819      	ldr	r0, [pc, #100]	; (82758 <fpga_target_setup_in_received+0x110>)
            respbuf[1] = (uint8_t)vccint_setting;
   826f2:	881a      	ldrh	r2, [r3, #0]
            respbuf[0] = vccint_status;
   826f4:	4b14      	ldr	r3, [pc, #80]	; (82748 <fpga_target_setup_in_received+0x100>)
   826f6:	7800      	ldrb	r0, [r0, #0]
            respbuf[1] = (uint8_t)vccint_setting;
   826f8:	705a      	strb	r2, [r3, #1]
            respbuf[2] = (uint8_t)(vccint_setting >> 8);
   826fa:	0a12      	lsrs	r2, r2, #8
            respbuf[0] = vccint_status;
   826fc:	7018      	strb	r0, [r3, #0]
            respbuf[2] = (uint8_t)(vccint_setting >> 8);
   826fe:	709a      	strb	r2, [r3, #2]
            return true;
   82700:	2001      	movs	r0, #1
            udd_g_ctrlreq.payload = respbuf;
   82702:	60a3      	str	r3, [r4, #8]
            udd_g_ctrlreq.payload_size = 3;
   82704:	81a1      	strh	r1, [r4, #12]
}
   82706:	bd70      	pop	{r4, r5, r6, pc}
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer))
   82708:	88e3      	ldrh	r3, [r4, #6]
   8270a:	2b40      	cmp	r3, #64	; 0x40
   8270c:	d8b6      	bhi.n	8267c <fpga_target_setup_in_received+0x34>
			udd_g_ctrlreq.payload = fpgaspi_data_buffer;
   8270e:	4a13      	ldr	r2, [pc, #76]	; (8275c <fpga_target_setup_in_received+0x114>)
			return true;
   82710:	2001      	movs	r0, #1
			udd_g_ctrlreq.payload = fpgaspi_data_buffer;
   82712:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = udd_g_ctrlreq.req.wLength;
   82714:	81a3      	strh	r3, [r4, #12]
}
   82716:	bd70      	pop	{r4, r5, r6, pc}
			respbuf[0] = gpio_pin_is_high(pin);
   82718:	78a0      	ldrb	r0, [r4, #2]
   8271a:	4b0a      	ldr	r3, [pc, #40]	; (82744 <fpga_target_setup_in_received+0xfc>)
   8271c:	4798      	blx	r3
   8271e:	1e03      	subs	r3, r0, #0
   82720:	bf18      	it	ne
   82722:	2301      	movne	r3, #1
			udd_g_ctrlreq.payload_size = 1;
   82724:	2101      	movs	r1, #1
			respbuf[0] = gpio_pin_is_high(pin);
   82726:	4a08      	ldr	r2, [pc, #32]	; (82748 <fpga_target_setup_in_received+0x100>)
			return true;
   82728:	4608      	mov	r0, r1
			respbuf[0] = gpio_pin_is_high(pin);
   8272a:	7013      	strb	r3, [r2, #0]
			udd_g_ctrlreq.payload = respbuf;
   8272c:	60a2      	str	r2, [r4, #8]
			udd_g_ctrlreq.payload_size = 1;
   8272e:	81a1      	strh	r1, [r4, #12]
}
   82730:	bd70      	pop	{r4, r5, r6, pc}
   82732:	bf00      	nop
   82734:	2007228c 	.word	0x2007228c
   82738:	200720f0 	.word	0x200720f0
   8273c:	20071cac 	.word	0x20071cac
   82740:	20071ca8 	.word	0x20071ca8
   82744:	0008372d 	.word	0x0008372d
   82748:	20071a18 	.word	0x20071a18
   8274c:	20071ca5 	.word	0x20071ca5
   82750:	20071ca4 	.word	0x20071ca4
   82754:	20070940 	.word	0x20070940
   82758:	20072130 	.word	0x20072130
   8275c:	20071cb0 	.word	0x20071cb0

00082760 <ctrl_vccint_cb>:
{
   82760:	b538      	push	{r3, r4, r5, lr}
    if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82762:	4b16      	ldr	r3, [pc, #88]	; (827bc <ctrl_vccint_cb+0x5c>)
   82764:	88d9      	ldrh	r1, [r3, #6]
   82766:	899a      	ldrh	r2, [r3, #12]
   82768:	428a      	cmp	r2, r1
   8276a:	d315      	bcc.n	82798 <ctrl_vccint_cb+0x38>
    if ((udd_g_ctrlreq.payload[0] ^ udd_g_ctrlreq.payload[1] ^ 0xAE) != (udd_g_ctrlreq.payload[2])){
   8276c:	689a      	ldr	r2, [r3, #8]
   8276e:	7813      	ldrb	r3, [r2, #0]
   82770:	f892 c001 	ldrb.w	ip, [r2, #1]
   82774:	7890      	ldrb	r0, [r2, #2]
   82776:	ea83 030c 	eor.w	r3, r3, ip
   8277a:	f083 03ae 	eor.w	r3, r3, #174	; 0xae
   8277e:	4298      	cmp	r0, r3
   82780:	d107      	bne.n	82792 <ctrl_vccint_cb+0x32>
    if (udd_g_ctrlreq.req.wLength < 3){
   82782:	2902      	cmp	r1, #2
   82784:	d916      	bls.n	827b4 <ctrl_vccint_cb+0x54>
   82786:	8814      	ldrh	r4, [r2, #0]
    if ((vcctemp < 600) || (vcctemp > 1200)){
   82788:	f5a4 7316 	sub.w	r3, r4, #600	; 0x258
   8278c:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   82790:	d903      	bls.n	8279a <ctrl_vccint_cb+0x3a>
        vccint_status = USB_STATUS_PARAMWRONG;
   82792:	2201      	movs	r2, #1
   82794:	4b0a      	ldr	r3, [pc, #40]	; (827c0 <ctrl_vccint_cb+0x60>)
   82796:	701a      	strb	r2, [r3, #0]
}
   82798:	bd38      	pop	{r3, r4, r5, pc}
    vccint_status = USB_STATUS_COMMERR;
   8279a:	2203      	movs	r2, #3
   8279c:	4d08      	ldr	r5, [pc, #32]	; (827c0 <ctrl_vccint_cb+0x60>)
    if (tps56520_set(vcctemp)){
   8279e:	4620      	mov	r0, r4
   827a0:	4b08      	ldr	r3, [pc, #32]	; (827c4 <ctrl_vccint_cb+0x64>)
    vccint_status = USB_STATUS_COMMERR;
   827a2:	702a      	strb	r2, [r5, #0]
    if (tps56520_set(vcctemp)){
   827a4:	4798      	blx	r3
   827a6:	2800      	cmp	r0, #0
   827a8:	d0f6      	beq.n	82798 <ctrl_vccint_cb+0x38>
        vccint_status = USB_STATUS_OK;
   827aa:	2302      	movs	r3, #2
        vccint_setting = vcctemp;
   827ac:	4a06      	ldr	r2, [pc, #24]	; (827c8 <ctrl_vccint_cb+0x68>)
        vccint_status = USB_STATUS_OK;
   827ae:	702b      	strb	r3, [r5, #0]
        vccint_setting = vcctemp;
   827b0:	8014      	strh	r4, [r2, #0]
}
   827b2:	bd38      	pop	{r3, r4, r5, pc}
        vccint_status = USB_STATUS_CSFAIL;
   827b4:	2204      	movs	r2, #4
   827b6:	4b02      	ldr	r3, [pc, #8]	; (827c0 <ctrl_vccint_cb+0x60>)
   827b8:	701a      	strb	r2, [r3, #0]
}
   827ba:	bd38      	pop	{r3, r4, r5, pc}
   827bc:	2007228c 	.word	0x2007228c
   827c0:	20072130 	.word	0x20072130
   827c4:	00082da5 	.word	0x00082da5
   827c8:	20070940 	.word	0x20070940

000827cc <main_vendor_bulk_in_received>:
    if (UDD_EP_TRANSFER_OK != status) {
   827cc:	b100      	cbz	r0, 827d0 <main_vendor_bulk_in_received+0x4>
   827ce:	4770      	bx	lr
{
   827d0:	b510      	push	{r4, lr}
    if (FPGA_lockstatus() == fpga_blockin){		
   827d2:	4b05      	ldr	r3, [pc, #20]	; (827e8 <main_vendor_bulk_in_received+0x1c>)
   827d4:	4604      	mov	r4, r0
   827d6:	4798      	blx	r3
   827d8:	2802      	cmp	r0, #2
   827da:	d000      	beq.n	827de <main_vendor_bulk_in_received+0x12>
}
   827dc:	bd10      	pop	{r4, pc}
        FPGA_setlock(fpga_unlocked);
   827de:	4620      	mov	r0, r4
}
   827e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FPGA_setlock(fpga_unlocked);
   827e4:	4b01      	ldr	r3, [pc, #4]	; (827ec <main_vendor_bulk_in_received+0x20>)
   827e6:	4718      	bx	r3
   827e8:	00082b5d 	.word	0x00082b5d
   827ec:	00082b21 	.word	0x00082b21

000827f0 <ctrl_progfpga_bulk>:
    switch(udd_g_ctrlreq.req.wValue){
   827f0:	4a0d      	ldr	r2, [pc, #52]	; (82828 <ctrl_progfpga_bulk+0x38>)
   827f2:	8853      	ldrh	r3, [r2, #2]
   827f4:	2ba1      	cmp	r3, #161	; 0xa1
   827f6:	d004      	beq.n	82802 <ctrl_progfpga_bulk+0x12>
   827f8:	2ba2      	cmp	r3, #162	; 0xa2
   827fa:	d011      	beq.n	82820 <ctrl_progfpga_bulk+0x30>
   827fc:	2ba0      	cmp	r3, #160	; 0xa0
   827fe:	d007      	beq.n	82810 <ctrl_progfpga_bulk+0x20>
   82800:	4770      	bx	lr
            fpga_program_setup2();
   82802:	4b0a      	ldr	r3, [pc, #40]	; (8282c <ctrl_progfpga_bulk+0x3c>)
void ctrl_progfpga_bulk(void){
   82804:	b510      	push	{r4, lr}
            fpga_program_setup2();
   82806:	4798      	blx	r3
            blockendpoint_usage = bep_fpgabitstream;
   82808:	220a      	movs	r2, #10
   8280a:	4b09      	ldr	r3, [pc, #36]	; (82830 <ctrl_progfpga_bulk+0x40>)
   8280c:	701a      	strb	r2, [r3, #0]
}
   8280e:	bd10      	pop	{r4, pc}
            if (udd_g_ctrlreq.req.wLength == 4) {
   82810:	88d3      	ldrh	r3, [r2, #6]
   82812:	2b04      	cmp	r3, #4
                prog_freq = *(CTRLBUFFER_WORDPTR);
   82814:	bf0a      	itet	eq
   82816:	4b07      	ldreq	r3, [pc, #28]	; (82834 <ctrl_progfpga_bulk+0x44>)
    uint32_t prog_freq = 20E6;
   82818:	4807      	ldrne	r0, [pc, #28]	; (82838 <ctrl_progfpga_bulk+0x48>)
                prog_freq = *(CTRLBUFFER_WORDPTR);
   8281a:	6818      	ldreq	r0, [r3, #0]
            fpga_program_setup1(prog_freq);			
   8281c:	4b07      	ldr	r3, [pc, #28]	; (8283c <ctrl_progfpga_bulk+0x4c>)
   8281e:	4718      	bx	r3
            blockendpoint_usage = bep_emem;
   82820:	2200      	movs	r2, #0
   82822:	4b03      	ldr	r3, [pc, #12]	; (82830 <ctrl_progfpga_bulk+0x40>)
   82824:	701a      	strb	r2, [r3, #0]
}
   82826:	4770      	bx	lr
   82828:	2007228c 	.word	0x2007228c
   8282c:	00082bcd 	.word	0x00082bcd
   82830:	20071c9d 	.word	0x20071c9d
   82834:	20071514 	.word	0x20071514
   82838:	01312d00 	.word	0x01312d00
   8283c:	00082b69 	.word	0x00082b69

00082840 <fpga_target_sam_cfg_out>:
	switch (udd_g_ctrlreq.req.wValue & 0xFF) {
   82840:	4b0f      	ldr	r3, [pc, #60]	; (82880 <fpga_target_sam_cfg_out+0x40>)
   82842:	789b      	ldrb	r3, [r3, #2]
   82844:	2b05      	cmp	r3, #5
   82846:	d004      	beq.n	82852 <fpga_target_sam_cfg_out+0x12>
   82848:	2b06      	cmp	r3, #6
   8284a:	d00c      	beq.n	82866 <fpga_target_sam_cfg_out+0x26>
   8284c:	2b04      	cmp	r3, #4
   8284e:	d005      	beq.n	8285c <fpga_target_sam_cfg_out+0x1c>
   82850:	4770      	bx	lr
	    gpio_configure_pin(PIN_PCK0, PIN_PCK0_FLAGS);
   82852:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   82856:	2036      	movs	r0, #54	; 0x36
   82858:	4b0a      	ldr	r3, [pc, #40]	; (82884 <fpga_target_sam_cfg_out+0x44>)
   8285a:	4718      	bx	r3
	    gpio_configure_pin(PIN_PCK0, PIO_OUTPUT_0);
   8285c:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82860:	2036      	movs	r0, #54	; 0x36
   82862:	4b08      	ldr	r3, [pc, #32]	; (82884 <fpga_target_sam_cfg_out+0x44>)
   82864:	4718      	bx	r3
{
   82866:	b510      	push	{r4, lr}
	    gpio_set_pin_high(FPGA_TRIGGER_GPIO);
   82868:	2057      	movs	r0, #87	; 0x57
   8286a:	4b07      	ldr	r3, [pc, #28]	; (82888 <fpga_target_sam_cfg_out+0x48>)
   8286c:	4798      	blx	r3
	    delay_cycles(250);
   8286e:	20fa      	movs	r0, #250	; 0xfa
   82870:	4b06      	ldr	r3, [pc, #24]	; (8288c <fpga_target_sam_cfg_out+0x4c>)
   82872:	4798      	blx	r3
}
   82874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	    gpio_set_pin_low(FPGA_TRIGGER_GPIO);
   82878:	2057      	movs	r0, #87	; 0x57
   8287a:	4b05      	ldr	r3, [pc, #20]	; (82890 <fpga_target_sam_cfg_out+0x50>)
   8287c:	4718      	bx	r3
   8287e:	bf00      	nop
   82880:	2007228c 	.word	0x2007228c
   82884:	000837a5 	.word	0x000837a5
   82888:	00083749 	.word	0x00083749
   8288c:	200701b5 	.word	0x200701b5
   82890:	00083765 	.word	0x00083765

00082894 <ctrl_fpgaioutil>:
    if (udd_g_ctrlreq.req.wLength != 2){
   82894:	4b3a      	ldr	r3, [pc, #232]	; (82980 <ctrl_fpgaioutil+0xec>)
   82896:	88da      	ldrh	r2, [r3, #6]
   82898:	2a02      	cmp	r2, #2
   8289a:	d000      	beq.n	8289e <ctrl_fpgaioutil+0xa>
   8289c:	4770      	bx	lr
static void ctrl_fpgaioutil(void){
   8289e:	b570      	push	{r4, r5, r6, lr}
    int pin = udd_g_ctrlreq.payload[0];
   828a0:	689a      	ldr	r2, [r3, #8]
   828a2:	7814      	ldrb	r4, [r2, #0]
	if ((pin < 0) || (pin > 95)){
   828a4:	2c5f      	cmp	r4, #95	; 0x5f
   828a6:	d807      	bhi.n	828b8 <ctrl_fpgaioutil+0x24>
	switch(udd_g_ctrlreq.req.wValue){
   828a8:	885b      	ldrh	r3, [r3, #2]
    int config = udd_g_ctrlreq.payload[1];
   828aa:	7852      	ldrb	r2, [r2, #1]
	switch(udd_g_ctrlreq.req.wValue){
   828ac:	2ba1      	cmp	r3, #161	; 0xa1
   828ae:	d013      	beq.n	828d8 <ctrl_fpgaioutil+0x44>
   828b0:	2ba2      	cmp	r3, #162	; 0xa2
   828b2:	d017      	beq.n	828e4 <ctrl_fpgaioutil+0x50>
   828b4:	2ba0      	cmp	r3, #160	; 0xa0
   828b6:	d000      	beq.n	828ba <ctrl_fpgaioutil+0x26>
}
   828b8:	bd70      	pop	{r4, r5, r6, pc}
            switch(config)
   828ba:	3a01      	subs	r2, #1
   828bc:	2a12      	cmp	r2, #18
   828be:	d80b      	bhi.n	828d8 <ctrl_fpgaioutil+0x44>
   828c0:	e8df f002 	tbb	[pc, r2]
   828c4:	0a0a3a49 	.word	0x0a0a3a49
   828c8:	0a0a0a0a 	.word	0x0a0a0a0a
   828cc:	0a0a0a0a 	.word	0x0a0a0a0a
   828d0:	410a0a0a 	.word	0x410a0a0a
   828d4:	242f      	.short	0x242f
   828d6:	19          	.byte	0x19
   828d7:	00          	.byte	0x00
            gpio_configure_pin(pin, PIO_DEFAULT);
   828d8:	4620      	mov	r0, r4
}
   828da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            gpio_configure_pin(pin, PIO_DEFAULT);
   828de:	2100      	movs	r1, #0
   828e0:	4b28      	ldr	r3, [pc, #160]	; (82984 <ctrl_fpgaioutil+0xf0>)
   828e2:	4718      	bx	r3
            if (config == 0){
   828e4:	2a00      	cmp	r2, #0
   828e6:	d03d      	beq.n	82964 <ctrl_fpgaioutil+0xd0>
            if (config == 1){
   828e8:	2a01      	cmp	r2, #1
   828ea:	d1e5      	bne.n	828b8 <ctrl_fpgaioutil+0x24>
                gpio_set_pin_high(pin);
   828ec:	4620      	mov	r0, r4
}
   828ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                gpio_set_pin_high(pin);
   828f2:	4b25      	ldr	r3, [pc, #148]	; (82988 <ctrl_fpgaioutil+0xf4>)
   828f4:	4718      	bx	r3
                    if(pin_spi1_cs > -1){
   828f6:	4e25      	ldr	r6, [pc, #148]	; (8298c <ctrl_fpgaioutil+0xf8>)
   828f8:	6830      	ldr	r0, [r6, #0]
   828fa:	2800      	cmp	r0, #0
   828fc:	da3b      	bge.n	82976 <ctrl_fpgaioutil+0xe2>
   828fe:	4d21      	ldr	r5, [pc, #132]	; (82984 <ctrl_fpgaioutil+0xf0>)
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   82900:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82904:	4620      	mov	r0, r4
   82906:	47a8      	blx	r5
                    pin_spi1_cs = pin;                    
   82908:	6034      	str	r4, [r6, #0]
}
   8290a:	bd70      	pop	{r4, r5, r6, pc}
                    if(pin_spi1_sck > -1){
   8290c:	4e20      	ldr	r6, [pc, #128]	; (82990 <ctrl_fpgaioutil+0xfc>)
   8290e:	6830      	ldr	r0, [r6, #0]
   82910:	2800      	cmp	r0, #0
   82912:	da1c      	bge.n	8294e <ctrl_fpgaioutil+0xba>
   82914:	4d1b      	ldr	r5, [pc, #108]	; (82984 <ctrl_fpgaioutil+0xf0>)
                    gpio_configure_pin(pin, PIO_OUTPUT_0);
   82916:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   8291a:	4620      	mov	r0, r4
   8291c:	47a8      	blx	r5
                    pin_spi1_sck = pin;
   8291e:	6034      	str	r4, [r6, #0]
}
   82920:	bd70      	pop	{r4, r5, r6, pc}
                    if(pin_spi1_miso > -1){
   82922:	4e1c      	ldr	r6, [pc, #112]	; (82994 <ctrl_fpgaioutil+0x100>)
   82924:	6830      	ldr	r0, [r6, #0]
   82926:	2800      	cmp	r0, #0
   82928:	da21      	bge.n	8296e <ctrl_fpgaioutil+0xda>
   8292a:	4d16      	ldr	r5, [pc, #88]	; (82984 <ctrl_fpgaioutil+0xf0>)
                    gpio_configure_pin(pin, PIO_INPUT);
   8292c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82930:	4620      	mov	r0, r4
   82932:	47a8      	blx	r5
                    pin_spi1_miso = pin;
   82934:	6034      	str	r4, [r6, #0]
}
   82936:	bd70      	pop	{r4, r5, r6, pc}
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   82938:	4620      	mov	r0, r4
}
   8293a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    gpio_configure_pin(pin, PIO_OUTPUT_1);
   8293e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82942:	4b10      	ldr	r3, [pc, #64]	; (82984 <ctrl_fpgaioutil+0xf0>)
   82944:	4718      	bx	r3
                    if(pin_spi1_mosi > -1){
   82946:	4e14      	ldr	r6, [pc, #80]	; (82998 <ctrl_fpgaioutil+0x104>)
   82948:	6830      	ldr	r0, [r6, #0]
   8294a:	2800      	cmp	r0, #0
   8294c:	dbe2      	blt.n	82914 <ctrl_fpgaioutil+0x80>
                        gpio_configure_pin(pin_spi1_sck, PIO_DEFAULT);
   8294e:	2100      	movs	r1, #0
   82950:	4d0c      	ldr	r5, [pc, #48]	; (82984 <ctrl_fpgaioutil+0xf0>)
   82952:	47a8      	blx	r5
   82954:	e7df      	b.n	82916 <ctrl_fpgaioutil+0x82>
                    gpio_configure_pin(pin, PIO_INPUT);
   82956:	4620      	mov	r0, r4
}
   82958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                    gpio_configure_pin(pin, PIO_INPUT);
   8295c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82960:	4b08      	ldr	r3, [pc, #32]	; (82984 <ctrl_fpgaioutil+0xf0>)
   82962:	4718      	bx	r3
                gpio_set_pin_low(pin);
   82964:	4620      	mov	r0, r4
}
   82966:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                gpio_set_pin_low(pin);
   8296a:	4b0c      	ldr	r3, [pc, #48]	; (8299c <ctrl_fpgaioutil+0x108>)
   8296c:	4718      	bx	r3
                        gpio_configure_pin(pin_spi1_miso, PIO_DEFAULT);
   8296e:	2100      	movs	r1, #0
   82970:	4d04      	ldr	r5, [pc, #16]	; (82984 <ctrl_fpgaioutil+0xf0>)
   82972:	47a8      	blx	r5
   82974:	e7da      	b.n	8292c <ctrl_fpgaioutil+0x98>
                        gpio_configure_pin(pin_spi1_cs, PIO_DEFAULT);
   82976:	2100      	movs	r1, #0
   82978:	4d02      	ldr	r5, [pc, #8]	; (82984 <ctrl_fpgaioutil+0xf0>)
   8297a:	47a8      	blx	r5
   8297c:	e7c0      	b.n	82900 <ctrl_fpgaioutil+0x6c>
   8297e:	bf00      	nop
   82980:	2007228c 	.word	0x2007228c
   82984:	000837a5 	.word	0x000837a5
   82988:	00083749 	.word	0x00083749
   8298c:	200701c0 	.word	0x200701c0
   82990:	200701cc 	.word	0x200701cc
   82994:	200701c4 	.word	0x200701c4
   82998:	200701c8 	.word	0x200701c8
   8299c:	00083765 	.word	0x00083765

000829a0 <ctrl_spi1util>:
static void ctrl_spi1util(void){
   829a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(udd_g_ctrlreq.req.wValue){
   829a4:	4c17      	ldr	r4, [pc, #92]	; (82a04 <ctrl_spi1util+0x64>)
   829a6:	8863      	ldrh	r3, [r4, #2]
   829a8:	3ba0      	subs	r3, #160	; 0xa0
   829aa:	2b04      	cmp	r3, #4
   829ac:	d817      	bhi.n	829de <ctrl_spi1util+0x3e>
   829ae:	e8df f003 	tbb	[pc, r3]
   829b2:	1c18      	.short	0x1c18
   829b4:	2420      	.short	0x2420
   829b6:	03          	.byte	0x03
   829b7:	00          	.byte	0x00
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   829b8:	88e3      	ldrh	r3, [r4, #6]
   829ba:	89a2      	ldrh	r2, [r4, #12]
   829bc:	429a      	cmp	r2, r3
   829be:	d30e      	bcc.n	829de <ctrl_spi1util+0x3e>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer)){
   829c0:	3b01      	subs	r3, #1
   829c2:	2b3f      	cmp	r3, #63	; 0x3f
   829c4:	d80b      	bhi.n	829de <ctrl_spi1util+0x3e>
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   829c6:	2500      	movs	r5, #0
   829c8:	4e0f      	ldr	r6, [pc, #60]	; (82a08 <ctrl_spi1util+0x68>)
   829ca:	4f10      	ldr	r7, [pc, #64]	; (82a0c <ctrl_spi1util+0x6c>)
				spi1util_data_buffer[i] = spi1util_xferbyte(udd_g_ctrlreq.payload[i]);
   829cc:	68a3      	ldr	r3, [r4, #8]
   829ce:	5d58      	ldrb	r0, [r3, r5]
   829d0:	47b8      	blx	r7
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   829d2:	88e3      	ldrh	r3, [r4, #6]
   829d4:	3501      	adds	r5, #1
   829d6:	429d      	cmp	r5, r3
				spi1util_data_buffer[i] = spi1util_xferbyte(udd_g_ctrlreq.payload[i]);
   829d8:	f806 0b01 	strb.w	r0, [r6], #1
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   829dc:	dbf6      	blt.n	829cc <ctrl_spi1util+0x2c>
}
   829de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			spi1util_init();			
   829e2:	4b0b      	ldr	r3, [pc, #44]	; (82a10 <ctrl_spi1util+0x70>)
}
   829e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_init();			
   829e8:	4718      	bx	r3
			spi1util_deinit();
   829ea:	4b0a      	ldr	r3, [pc, #40]	; (82a14 <ctrl_spi1util+0x74>)
}
   829ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_deinit();
   829f0:	4718      	bx	r3
			spi1util_cs_low();
   829f2:	4b09      	ldr	r3, [pc, #36]	; (82a18 <ctrl_spi1util+0x78>)
}
   829f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_cs_low();
   829f8:	4718      	bx	r3
			spi1util_cs_high();
   829fa:	4b08      	ldr	r3, [pc, #32]	; (82a1c <ctrl_spi1util+0x7c>)
}
   829fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			spi1util_cs_high();
   82a00:	4718      	bx	r3
   82a02:	bf00      	nop
   82a04:	2007228c 	.word	0x2007228c
   82a08:	200720f0 	.word	0x200720f0
   82a0c:	000801ed 	.word	0x000801ed
   82a10:	000801a5 	.word	0x000801a5
   82a14:	00080275 	.word	0x00080275
   82a18:	000801cd 	.word	0x000801cd
   82a1c:	000801dd 	.word	0x000801dd

00082a20 <ctrl_progfpgaspi>:
static void ctrl_progfpgaspi(void){
   82a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch(udd_g_ctrlreq.req.wValue){
   82a24:	4c17      	ldr	r4, [pc, #92]	; (82a84 <ctrl_progfpgaspi+0x64>)
   82a26:	8863      	ldrh	r3, [r4, #2]
   82a28:	3ba0      	subs	r3, #160	; 0xa0
   82a2a:	2b04      	cmp	r3, #4
   82a2c:	d817      	bhi.n	82a5e <ctrl_progfpgaspi+0x3e>
   82a2e:	e8df f003 	tbb	[pc, r3]
   82a32:	1c18      	.short	0x1c18
   82a34:	2420      	.short	0x2420
   82a36:	03          	.byte	0x03
   82a37:	00          	.byte	0x00
			if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82a38:	88e3      	ldrh	r3, [r4, #6]
   82a3a:	89a2      	ldrh	r2, [r4, #12]
   82a3c:	429a      	cmp	r2, r3
   82a3e:	d30e      	bcc.n	82a5e <ctrl_progfpgaspi+0x3e>
			if (udd_g_ctrlreq.req.wLength > sizeof(fpgaspi_data_buffer)){
   82a40:	3b01      	subs	r3, #1
   82a42:	2b3f      	cmp	r3, #63	; 0x3f
   82a44:	d80b      	bhi.n	82a5e <ctrl_progfpgaspi+0x3e>
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82a46:	2500      	movs	r5, #0
   82a48:	4e0f      	ldr	r6, [pc, #60]	; (82a88 <ctrl_progfpgaspi+0x68>)
   82a4a:	4f10      	ldr	r7, [pc, #64]	; (82a8c <ctrl_progfpgaspi+0x6c>)
				fpgaspi_data_buffer[i] = fpgaspi_xferbyte(udd_g_ctrlreq.payload[i]);
   82a4c:	68a3      	ldr	r3, [r4, #8]
   82a4e:	5d58      	ldrb	r0, [r3, r5]
   82a50:	47b8      	blx	r7
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82a52:	88e3      	ldrh	r3, [r4, #6]
   82a54:	3501      	adds	r5, #1
   82a56:	429d      	cmp	r5, r3
				fpgaspi_data_buffer[i] = fpgaspi_xferbyte(udd_g_ctrlreq.payload[i]);
   82a58:	f806 0b01 	strb.w	r0, [r6], #1
			for (int i = 0; i < udd_g_ctrlreq.req.wLength; i++){
   82a5c:	dbf6      	blt.n	82a4c <ctrl_progfpgaspi+0x2c>
}
   82a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			fpgaspi_program_init();			
   82a62:	4b0b      	ldr	r3, [pc, #44]	; (82a90 <ctrl_progfpgaspi+0x70>)
}
   82a64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_program_init();			
   82a68:	4718      	bx	r3
			fpgaspi_program_deinit();
   82a6a:	4b0a      	ldr	r3, [pc, #40]	; (82a94 <ctrl_progfpgaspi+0x74>)
}
   82a6c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_program_deinit();
   82a70:	4718      	bx	r3
			fpgaspi_cs_low();
   82a72:	4b09      	ldr	r3, [pc, #36]	; (82a98 <ctrl_progfpgaspi+0x78>)
}
   82a74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_cs_low();
   82a78:	4718      	bx	r3
			fpgaspi_cs_high();
   82a7a:	4b08      	ldr	r3, [pc, #32]	; (82a9c <ctrl_progfpgaspi+0x7c>)
}
   82a7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			fpgaspi_cs_high();
   82a80:	4718      	bx	r3
   82a82:	bf00      	nop
   82a84:	2007228c 	.word	0x2007228c
   82a88:	20071cb0 	.word	0x20071cb0
   82a8c:	00082c41 	.word	0x00082c41
   82a90:	00082be9 	.word	0x00082be9
   82a94:	00082cad 	.word	0x00082cad
   82a98:	00082c29 	.word	0x00082c29
   82a9c:	00082c35 	.word	0x00082c35

00082aa0 <ctrl_cdce906_cb>:
    if (udd_g_ctrlreq.req.wLength > udd_g_ctrlreq.payload_size){
   82aa0:	4b11      	ldr	r3, [pc, #68]	; (82ae8 <ctrl_cdce906_cb+0x48>)
   82aa2:	88da      	ldrh	r2, [r3, #6]
   82aa4:	8999      	ldrh	r1, [r3, #12]
   82aa6:	4291      	cmp	r1, r2
   82aa8:	d316      	bcc.n	82ad8 <ctrl_cdce906_cb+0x38>
    if (udd_g_ctrlreq.req.wLength < 3){
   82aaa:	2a02      	cmp	r2, #2
{
   82aac:	b510      	push	{r4, lr}
    if (udd_g_ctrlreq.req.wLength < 3){
   82aae:	d90f      	bls.n	82ad0 <ctrl_cdce906_cb+0x30>
    cdce906_status = USB_STATUS_COMMERR;
   82ab0:	2103      	movs	r1, #3
    if (udd_g_ctrlreq.payload[0] == 0x00){
   82ab2:	689b      	ldr	r3, [r3, #8]
    cdce906_status = USB_STATUS_COMMERR;
   82ab4:	4c0d      	ldr	r4, [pc, #52]	; (82aec <ctrl_cdce906_cb+0x4c>)
    if (udd_g_ctrlreq.payload[0] == 0x00){
   82ab6:	781a      	ldrb	r2, [r3, #0]
    cdce906_status = USB_STATUS_COMMERR;
   82ab8:	7021      	strb	r1, [r4, #0]
    if (udd_g_ctrlreq.payload[0] == 0x00){
   82aba:	b172      	cbz	r2, 82ada <ctrl_cdce906_cb+0x3a>
    } else if (udd_g_ctrlreq.payload[0] == 0x01){
   82abc:	2a01      	cmp	r2, #1
   82abe:	d108      	bne.n	82ad2 <ctrl_cdce906_cb+0x32>
        if (cdce906_write(udd_g_ctrlreq.payload[1], udd_g_ctrlreq.payload[2])){
   82ac0:	7899      	ldrb	r1, [r3, #2]
   82ac2:	7858      	ldrb	r0, [r3, #1]
   82ac4:	4b0a      	ldr	r3, [pc, #40]	; (82af0 <ctrl_cdce906_cb+0x50>)
   82ac6:	4798      	blx	r3
   82ac8:	b108      	cbz	r0, 82ace <ctrl_cdce906_cb+0x2e>
            cdce906_status = USB_STATUS_OK;
   82aca:	2302      	movs	r3, #2
   82acc:	7023      	strb	r3, [r4, #0]
}
   82ace:	bd10      	pop	{r4, pc}
   82ad0:	4c06      	ldr	r4, [pc, #24]	; (82aec <ctrl_cdce906_cb+0x4c>)
        cdce906_status = USB_STATUS_PARAMWRONG;
   82ad2:	2301      	movs	r3, #1
   82ad4:	7023      	strb	r3, [r4, #0]
}
   82ad6:	bd10      	pop	{r4, pc}
   82ad8:	4770      	bx	lr
        if (cdce906_read(udd_g_ctrlreq.payload[1], &cdce906_data)){
   82ada:	7858      	ldrb	r0, [r3, #1]
   82adc:	4905      	ldr	r1, [pc, #20]	; (82af4 <ctrl_cdce906_cb+0x54>)
   82ade:	4b06      	ldr	r3, [pc, #24]	; (82af8 <ctrl_cdce906_cb+0x58>)
   82ae0:	4798      	blx	r3
   82ae2:	2800      	cmp	r0, #0
   82ae4:	d0f3      	beq.n	82ace <ctrl_cdce906_cb+0x2e>
   82ae6:	e7f0      	b.n	82aca <ctrl_cdce906_cb+0x2a>
   82ae8:	2007228c 	.word	0x2007228c
   82aec:	20071ca5 	.word	0x20071ca5
   82af0:	00082e7d 	.word	0x00082e7d
   82af4:	20071ca4 	.word	0x20071ca4
   82af8:	00082edd 	.word	0x00082edd

00082afc <fpga_target_register_handlers>:

void fpga_target_register_handlers(void)
{
   82afc:	b510      	push	{r4, lr}
    naeusb_add_in_handler(fpga_target_setup_in_received);
   82afe:	4b04      	ldr	r3, [pc, #16]	; (82b10 <fpga_target_register_handlers+0x14>)
   82b00:	4804      	ldr	r0, [pc, #16]	; (82b14 <fpga_target_register_handlers+0x18>)
   82b02:	4798      	blx	r3
    naeusb_add_out_handler(fpga_target_setup_out_received);
   82b04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    naeusb_add_out_handler(fpga_target_setup_out_received);
   82b08:	4803      	ldr	r0, [pc, #12]	; (82b18 <fpga_target_register_handlers+0x1c>)
   82b0a:	4b04      	ldr	r3, [pc, #16]	; (82b1c <fpga_target_register_handlers+0x20>)
   82b0c:	4718      	bx	r3
   82b0e:	bf00      	nop
   82b10:	00081819 	.word	0x00081819
   82b14:	00082649 	.word	0x00082649
   82b18:	00082345 	.word	0x00082345
   82b1c:	00081841 	.word	0x00081841

00082b20 <FPGA_setlock>:
uint8_t volatile *xram = (uint8_t *) PSRAM_BASE_ADDRESS;

static volatile fpga_lockstatus_t _fpga_locked = fpga_unlocked;

int FPGA_setlock(fpga_lockstatus_t lockstatus)
{
   82b20:	b538      	push	{r3, r4, r5, lr}
  int ret = 0;
  cpu_irq_enter_critical();
   82b22:	4b08      	ldr	r3, [pc, #32]	; (82b44 <FPGA_setlock+0x24>)
{
   82b24:	4604      	mov	r4, r0
  cpu_irq_enter_critical();
   82b26:	4798      	blx	r3
  if (_fpga_locked == fpga_unlocked)
   82b28:	4b07      	ldr	r3, [pc, #28]	; (82b48 <FPGA_setlock+0x28>)
   82b2a:	781a      	ldrb	r2, [r3, #0]
   82b2c:	b92a      	cbnz	r2, 82b3a <FPGA_setlock+0x1a>
  {
    ret = 1;
   82b2e:	2501      	movs	r5, #1
    _fpga_locked = lockstatus;
   82b30:	701c      	strb	r4, [r3, #0]
  }
  cpu_irq_leave_critical();
   82b32:	4b06      	ldr	r3, [pc, #24]	; (82b4c <FPGA_setlock+0x2c>)
   82b34:	4798      	blx	r3
  return ret;
}
   82b36:	4628      	mov	r0, r5
   82b38:	bd38      	pop	{r3, r4, r5, pc}
  int ret = 0;
   82b3a:	2500      	movs	r5, #0
  cpu_irq_leave_critical();
   82b3c:	4b03      	ldr	r3, [pc, #12]	; (82b4c <FPGA_setlock+0x2c>)
   82b3e:	4798      	blx	r3
}
   82b40:	4628      	mov	r0, r5
   82b42:	bd38      	pop	{r3, r4, r5, pc}
   82b44:	000854b1 	.word	0x000854b1
   82b48:	20072131 	.word	0x20072131
   82b4c:	000854f1 	.word	0x000854f1

00082b50 <FPGA_releaselock>:

void FPGA_releaselock(void)
{
  _fpga_locked = fpga_unlocked;
   82b50:	2200      	movs	r2, #0
   82b52:	4b01      	ldr	r3, [pc, #4]	; (82b58 <FPGA_releaselock+0x8>)
   82b54:	701a      	strb	r2, [r3, #0]
}
   82b56:	4770      	bx	lr
   82b58:	20072131 	.word	0x20072131

00082b5c <FPGA_lockstatus>:

fpga_lockstatus_t FPGA_lockstatus(void)
{
  return _fpga_locked;
   82b5c:	4b01      	ldr	r3, [pc, #4]	; (82b64 <FPGA_lockstatus+0x8>)
   82b5e:	7818      	ldrb	r0, [r3, #0]
}
   82b60:	4770      	bx	lr
   82b62:	bf00      	nop
   82b64:	20072131 	.word	0x20072131

00082b68 <fpga_program_setup1>:
    FPGA_NPROG_HIGH();
}

/* FPGA Programming Step 1: Erase FPGA, setup SPI interface */
void fpga_program_setup1(uint32_t prog_freq)
{
   82b68:	b570      	push	{r4, r5, r6, lr}
	/* Init - set program low to erase FPGA */
	FPGA_NPROG_LOW();
   82b6a:	4b11      	ldr	r3, [pc, #68]	; (82bb0 <fpga_program_setup1+0x48>)
{
   82b6c:	b084      	sub	sp, #16
   82b6e:	4604      	mov	r4, r0
	FPGA_NPROG_LOW();
   82b70:	2033      	movs	r0, #51	; 0x33
   82b72:	4798      	blx	r3
#if (USB_DEVICE_PRODUCT_ID == 0xACE5) || (USB_DEVICE_PRODUCT_ID == 0xC610) || (USB_DEVICE_PRODUCT_ID == 0xC310) || (USB_DEVICE_PRODUCT_ID == 0xC340)
    
    usart_spi_opt_t spiopts;
    spiopts.baudrate = prog_freq;
    spiopts.char_length = US_MR_CHRL_8_BIT;
    spiopts.channel_mode = US_MR_CHMODE_NORMAL;
   82b74:	2300      	movs	r3, #0
    spiopts.char_length = US_MR_CHRL_8_BIT;
   82b76:	21c0      	movs	r1, #192	; 0xc0
    spiopts.spi_mode = SPI_MODE_0;

    sysclk_enable_peripheral_clock(FPGA_PROG_USART_ID);
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   82b78:	4d0e      	ldr	r5, [pc, #56]	; (82bb4 <fpga_program_setup1+0x4c>)
   82b7a:	4a0f      	ldr	r2, [pc, #60]	; (82bb8 <fpga_program_setup1+0x50>)
   82b7c:	2013      	movs	r0, #19
    spiopts.char_length = US_MR_CHRL_8_BIT;
   82b7e:	e9cd 4100 	strd	r4, r1, [sp]
    spiopts.spi_mode = SPI_MODE_0;
   82b82:	e9cd 3302 	strd	r3, r3, [sp, #8]
   82b86:	4790      	blx	r2
    usart_init_spi_master(FPGA_PROG_USART, &spiopts, sysclk_get_cpu_hz());
   82b88:	4a0c      	ldr	r2, [pc, #48]	; (82bbc <fpga_program_setup1+0x54>)
   82b8a:	4b0d      	ldr	r3, [pc, #52]	; (82bc0 <fpga_program_setup1+0x58>)
   82b8c:	4669      	mov	r1, sp
   82b8e:	4628      	mov	r0, r5
   82b90:	4798      	blx	r3
    FPGA_DO_SETUP();
   82b92:	4e0c      	ldr	r6, [pc, #48]	; (82bc4 <fpga_program_setup1+0x5c>)
   82b94:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82b98:	2034      	movs	r0, #52	; 0x34
   82b9a:	47b0      	blx	r6
    FPGA_CCLK_SETUP();
   82b9c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   82ba0:	2038      	movs	r0, #56	; 0x38
   82ba2:	47b0      	blx	r6

    usart_enable_tx(FPGA_PROG_USART);
   82ba4:	4628      	mov	r0, r5
   82ba6:	4b08      	ldr	r3, [pc, #32]	; (82bc8 <fpga_program_setup1+0x60>)
   82ba8:	4798      	blx	r3

	gpio_configure_pin(SPI_MOSI_GPIO, SPI_MOSI_FLAGS);
	gpio_configure_pin(SPI_SPCK_GPIO, SPI_SPCK_FLAGS);
	#endif
#endif
}
   82baa:	b004      	add	sp, #16
   82bac:	bd70      	pop	{r4, r5, r6, pc}
   82bae:	bf00      	nop
   82bb0:	00083765 	.word	0x00083765
   82bb4:	400a0000 	.word	0x400a0000
   82bb8:	00083599 	.word	0x00083599
   82bbc:	0501bd00 	.word	0x0501bd00
   82bc0:	0008304d 	.word	0x0008304d
   82bc4:	000837a5 	.word	0x000837a5
   82bc8:	00083119 	.word	0x00083119

00082bcc <fpga_program_setup2>:

/* FPGA Programming Step 2: Prepare FPGA for receiving programming data */
void fpga_program_setup2(void)
{
    FPGA_NPROG_HIGH();
   82bcc:	2033      	movs	r0, #51	; 0x33
   82bce:	4b01      	ldr	r3, [pc, #4]	; (82bd4 <fpga_program_setup2+0x8>)
   82bd0:	4718      	bx	r3
   82bd2:	bf00      	nop
   82bd4:	00083749 	.word	0x00083749

00082bd8 <fpga_program_sendbyte>:
//For debug only
//uint32_t fpga_total_bs_len;

/* FPGA Programming Step 3: Send data until done */
void fpga_program_sendbyte(uint8_t databyte)
{
   82bd8:	4601      	mov	r1, r0
#if (USB_DEVICE_PRODUCT_ID == 0xACE5) || (USB_DEVICE_PRODUCT_ID == 0xC610) || (USB_DEVICE_PRODUCT_ID == 0xC310) || (USB_DEVICE_PRODUCT_ID == 0xC340)
	//For debug only
    //fpga_total_bs_len++;
    usart_putchar(FPGA_PROG_USART, databyte);
   82bda:	4b01      	ldr	r3, [pc, #4]	; (82be0 <fpga_program_sendbyte+0x8>)
   82bdc:	4801      	ldr	r0, [pc, #4]	; (82be4 <fpga_program_sendbyte+0xc>)
   82bde:	4718      	bx	r3
   82be0:	00083149 	.word	0x00083149
   82be4:	400a0000 	.word	0x400a0000

00082be8 <fpgaspi_program_init>:
#include "fpgaspi_program.h"
#include "spi.h"

/* FPGA Programming: Init pins - assumes FPGA already programmed to use these */
void fpgaspi_program_init(void)
{
   82be8:	b510      	push	{r4, lr}
	FPGASPI_CCLK_SETUP();
   82bea:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82bee:	4c0b      	ldr	r4, [pc, #44]	; (82c1c <fpgaspi_program_init+0x34>)
   82bf0:	2038      	movs	r0, #56	; 0x38
   82bf2:	47a0      	blx	r4
	FPGASPI_DO_SETUP();
   82bf4:	f04f 5140 	mov.w	r1, #805306368	; 0x30000000
   82bf8:	2055      	movs	r0, #85	; 0x55
   82bfa:	47a0      	blx	r4
	FPGASPI_DI_SETUP();
   82bfc:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
   82c00:	2034      	movs	r0, #52	; 0x34
   82c02:	47a0      	blx	r4
	FPGASPI_CS_SETUP();
   82c04:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   82c08:	2056      	movs	r0, #86	; 0x56
   82c0a:	47a0      	blx	r4
	FPGASPI_CS_HIGH();
   82c0c:	2056      	movs	r0, #86	; 0x56
   82c0e:	4b04      	ldr	r3, [pc, #16]	; (82c20 <fpgaspi_program_init+0x38>)
   82c10:	4798      	blx	r3
	FPGASPI_CCLK_LOW();
}
   82c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	FPGASPI_CCLK_LOW();
   82c16:	2038      	movs	r0, #56	; 0x38
   82c18:	4b02      	ldr	r3, [pc, #8]	; (82c24 <fpgaspi_program_init+0x3c>)
   82c1a:	4718      	bx	r3
   82c1c:	000837a5 	.word	0x000837a5
   82c20:	00083749 	.word	0x00083749
   82c24:	00083765 	.word	0x00083765

00082c28 <fpgaspi_cs_low>:


/* SPI CS Pin Low */
void fpgaspi_cs_low(void)
{
	FPGASPI_CS_LOW();
   82c28:	2056      	movs	r0, #86	; 0x56
   82c2a:	4b01      	ldr	r3, [pc, #4]	; (82c30 <fpgaspi_cs_low+0x8>)
   82c2c:	4718      	bx	r3
   82c2e:	bf00      	nop
   82c30:	00083765 	.word	0x00083765

00082c34 <fpgaspi_cs_high>:
}

/* SPI CS Pin High */
void fpgaspi_cs_high(void)
{
	FPGASPI_CS_HIGH();
   82c34:	2056      	movs	r0, #86	; 0x56
   82c36:	4b01      	ldr	r3, [pc, #4]	; (82c3c <fpgaspi_cs_high+0x8>)
   82c38:	4718      	bx	r3
   82c3a:	bf00      	nop
   82c3c:	00083749 	.word	0x00083749

00082c40 <fpgaspi_xferbyte>:
}


/* SPI data byte transfer */
uint8_t fpgaspi_xferbyte(uint8_t databyte)
{
   82c40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   82c44:	2608      	movs	r6, #8
	uint8_t result = 0;
   82c46:	2400      	movs	r4, #0
{
   82c48:	4605      	mov	r5, r0

	for(unsigned int i=0; i < 8; i++){	
   82c4a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 82ca0 <fpgaspi_xferbyte+0x60>
   82c4e:	4f15      	ldr	r7, [pc, #84]	; (82ca4 <fpgaspi_xferbyte+0x64>)
   82c50:	f8df 8054 	ldr.w	r8, [pc, #84]	; 82ca8 <fpgaspi_xferbyte+0x68>
   82c54:	e008      	b.n	82c68 <fpgaspi_xferbyte+0x28>
		FPGASPI_CCLK_LOW();

		if (databyte & 0x80){
			FPGASPI_DO_HIGH();
			} else {
			FPGASPI_DO_LOW();
   82c56:	47b8      	blx	r7
		}
		
		FPGASPI_CCLK_HIGH();
   82c58:	2038      	movs	r0, #56	; 0x38
   82c5a:	47c0      	blx	r8
		databyte = databyte << 1;
   82c5c:	006d      	lsls	r5, r5, #1
		result = result << 1;
   82c5e:	0064      	lsls	r4, r4, #1
	for(unsigned int i=0; i < 8; i++){	
   82c60:	3e01      	subs	r6, #1
		databyte = databyte << 1;
   82c62:	b2ed      	uxtb	r5, r5
		result = result << 1;
   82c64:	b2e4      	uxtb	r4, r4
	for(unsigned int i=0; i < 8; i++){	
   82c66:	d00e      	beq.n	82c86 <fpgaspi_xferbyte+0x46>
		result |= FPGASPI_DI_STATUS() ? (1) : 0;
   82c68:	2034      	movs	r0, #52	; 0x34
   82c6a:	47c8      	blx	r9
   82c6c:	4603      	mov	r3, r0
		FPGASPI_CCLK_LOW();
   82c6e:	2038      	movs	r0, #56	; 0x38
		result |= FPGASPI_DI_STATUS() ? (1) : 0;
   82c70:	2b00      	cmp	r3, #0
   82c72:	bf18      	it	ne
   82c74:	f044 0401 	orrne.w	r4, r4, #1
		FPGASPI_CCLK_LOW();
   82c78:	47b8      	blx	r7
		if (databyte & 0x80){
   82c7a:	062b      	lsls	r3, r5, #24
			FPGASPI_DO_HIGH();
   82c7c:	f04f 0055 	mov.w	r0, #85	; 0x55
		if (databyte & 0x80){
   82c80:	d5e9      	bpl.n	82c56 <fpgaspi_xferbyte+0x16>
			FPGASPI_DO_HIGH();
   82c82:	47c0      	blx	r8
   82c84:	e7e8      	b.n	82c58 <fpgaspi_xferbyte+0x18>
	}

	result |= FPGASPI_DI_STATUS() ? (1) : 0;
   82c86:	2034      	movs	r0, #52	; 0x34
   82c88:	47c8      	blx	r9
   82c8a:	4603      	mov	r3, r0
   82c8c:	2b00      	cmp	r3, #0
   82c8e:	bf18      	it	ne
   82c90:	f044 0401 	orrne.w	r4, r4, #1

	FPGASPI_CCLK_LOW();
   82c94:	2038      	movs	r0, #56	; 0x38
	result |= FPGASPI_DI_STATUS() ? (1) : 0;
   82c96:	b264      	sxtb	r4, r4
	FPGASPI_CCLK_LOW();
   82c98:	47b8      	blx	r7

	return result;
}
   82c9a:	b2e0      	uxtb	r0, r4
   82c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   82ca0:	0008372d 	.word	0x0008372d
   82ca4:	00083765 	.word	0x00083765
   82ca8:	00083749 	.word	0x00083749

00082cac <fpgaspi_program_deinit>:


void fpgaspi_program_deinit(void)
{
   82cac:	b510      	push	{r4, lr}
	FPGASPI_CCLK_RELEASE();
   82cae:	2100      	movs	r1, #0
   82cb0:	4c05      	ldr	r4, [pc, #20]	; (82cc8 <fpgaspi_program_deinit+0x1c>)
   82cb2:	2038      	movs	r0, #56	; 0x38
   82cb4:	47a0      	blx	r4
	FPGASPI_DO_RELEASE();
   82cb6:	2100      	movs	r1, #0
   82cb8:	2055      	movs	r0, #85	; 0x55
   82cba:	47a0      	blx	r4
	FPGASPI_CS_RELEASE();
   82cbc:	4623      	mov	r3, r4
   82cbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	FPGASPI_CS_RELEASE();
   82cc2:	2100      	movs	r1, #0
   82cc4:	2056      	movs	r0, #86	; 0x56
   82cc6:	4718      	bx	r3
   82cc8:	000837a5 	.word	0x000837a5

00082ccc <tps56520_set.part.0>:
{
	return twi_probe(TWI0, TPS56520_ADDR);
}

/* Set voltage in mV for FPGA VCC_INT Voltage */
bool tps56520_set(uint16_t mv_output)
   82ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t setting = (mv_output - 600) / 10;
	
	if (!checkoddparity(setting)){
		setting |= 1<<7;
	}
	twi_package_t packet_write = {
   82cd0:	2401      	movs	r4, #1
   82cd2:	2734      	movs	r7, #52	; 0x34
	uint8_t setting = (mv_output - 600) / 10;
   82cd4:	4b2d      	ldr	r3, [pc, #180]	; (82d8c <tps56520_set.part.0+0xc0>)
   82cd6:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
   82cda:	fba3 3000 	umull	r3, r0, r3, r0
   82cde:	08c2      	lsrs	r2, r0, #3
	p = p ^ (p >> 4 | p << 4);
   82ce0:	f3c0 13c3 	ubfx	r3, r0, #7, #4
   82ce4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   82ce8:	4053      	eors	r3, r2
   82cea:	b2da      	uxtb	r2, r3
	p = p ^ (p >> 2);
   82cec:	f3c3 0385 	ubfx	r3, r3, #2, #6
   82cf0:	4053      	eors	r3, r2
	twi_package_t packet_write = {
   82cf2:	4a27      	ldr	r2, [pc, #156]	; (82d90 <tps56520_set.part.0+0xc4>)
	p = p ^ (p >> 1);
   82cf4:	ea83 0353 	eor.w	r3, r3, r3, lsr #1
bool tps56520_set(uint16_t mv_output)
   82cf8:	b08c      	sub	sp, #48	; 0x30
	twi_package_t packet_write = {
   82cfa:	6816      	ldr	r6, [r2, #0]
	uint8_t setting = (mv_output - 600) / 10;
   82cfc:	f3c0 00c7 	ubfx	r0, r0, #3, #8
	if (!checkoddparity(setting)){
   82d00:	07db      	lsls	r3, r3, #31
		setting |= 1<<7;
   82d02:	bf58      	it	pl
   82d04:	f060 007f 	ornpl	r0, r0, #127	; 0x7f
	twi_package_t packet_write = {
   82d08:	f10d 0306 	add.w	r3, sp, #6
		setting |= 1<<7;
   82d0c:	f88d 0006 	strb.w	r0, [sp, #6]
	twi_package_t packet_write = {
   82d10:	9304      	str	r3, [sp, #16]
		.chip         = TPS56520_ADDR,      // TWI slave bus address
		.buffer       = &setting, // transfer data source buffer
		.length       = 1  // transfer data size (bytes)
	};
	
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   82d12:	4820      	ldr	r0, [pc, #128]	; (82d94 <tps56520_set.part.0+0xc8>)
   82d14:	4b20      	ldr	r3, [pc, #128]	; (82d98 <tps56520_set.part.0+0xcc>)
	twi_package_t packet_write = {
   82d16:	ea4f 4816 	mov.w	r8, r6, lsr #16
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   82d1a:	a902      	add	r1, sp, #8
	twi_package_t packet_write = {
   82d1c:	f8ad 6008 	strh.w	r6, [sp, #8]
   82d20:	f88d 800a 	strb.w	r8, [sp, #10]
   82d24:	9403      	str	r4, [sp, #12]
   82d26:	9405      	str	r4, [sp, #20]
   82d28:	f88d 7018 	strb.w	r7, [sp, #24]
	if (twi_master_write(TWI0, &packet_write) != TWI_SUCCESS){
   82d2c:	4798      	blx	r3
   82d2e:	4605      	mov	r5, r0
   82d30:	b130      	cbz	r0, 82d40 <tps56520_set.part.0+0x74>
		I2C_LOCK = 0;
   82d32:	2300      	movs	r3, #0
		return false;
   82d34:	4618      	mov	r0, r3
		I2C_LOCK = 0;
   82d36:	4a19      	ldr	r2, [pc, #100]	; (82d9c <tps56520_set.part.0+0xd0>)
   82d38:	7013      	strb	r3, [r2, #0]
		I2C_LOCK = 0;
		return true;
	}
	I2C_LOCK = 0;
	return false;
   82d3a:	b00c      	add	sp, #48	; 0x30
   82d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	twi_package_t packet_read = {
   82d40:	f10d 0307 	add.w	r3, sp, #7
   82d44:	9309      	str	r3, [sp, #36]	; 0x24
	if(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS){
   82d46:	4813      	ldr	r0, [pc, #76]	; (82d94 <tps56520_set.part.0+0xc8>)
   82d48:	4b15      	ldr	r3, [pc, #84]	; (82da0 <tps56520_set.part.0+0xd4>)
   82d4a:	a907      	add	r1, sp, #28
	twi_package_t packet_read = {
   82d4c:	f8ad 601c 	strh.w	r6, [sp, #28]
   82d50:	f88d 801e 	strb.w	r8, [sp, #30]
   82d54:	9408      	str	r4, [sp, #32]
   82d56:	940a      	str	r4, [sp, #40]	; 0x28
   82d58:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
	if(twi_master_read(TWI0, &packet_read) != TWI_SUCCESS){
   82d5c:	4798      	blx	r3
   82d5e:	4603      	mov	r3, r0
   82d60:	b968      	cbnz	r0, 82d7e <tps56520_set.part.0+0xb2>
	if (volt_read == setting){
   82d62:	f89d 2006 	ldrb.w	r2, [sp, #6]
   82d66:	f89d 1007 	ldrb.w	r1, [sp, #7]
   82d6a:	4291      	cmp	r1, r2
		return true;
   82d6c:	bf0b      	itete	eq
   82d6e:	4620      	moveq	r0, r4
	return false;
   82d70:	4618      	movne	r0, r3
		I2C_LOCK = 0;
   82d72:	4a0a      	ldreq	r2, [pc, #40]	; (82d9c <tps56520_set.part.0+0xd0>)
	I2C_LOCK = 0;
   82d74:	4a09      	ldrne	r2, [pc, #36]	; (82d9c <tps56520_set.part.0+0xd0>)
   82d76:	7013      	strb	r3, [r2, #0]
   82d78:	b00c      	add	sp, #48	; 0x30
   82d7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return false;
   82d7e:	4628      	mov	r0, r5
		I2C_LOCK = 0;
   82d80:	4b06      	ldr	r3, [pc, #24]	; (82d9c <tps56520_set.part.0+0xd0>)
   82d82:	701d      	strb	r5, [r3, #0]
   82d84:	b00c      	add	sp, #48	; 0x30
   82d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82d8a:	bf00      	nop
   82d8c:	cccccccd 	.word	0xcccccccd
   82d90:	0008cb18 	.word	0x0008cb18
   82d94:	4008c000 	.word	0x4008c000
   82d98:	00083bc9 	.word	0x00083bc9
   82d9c:	20072133 	.word	0x20072133
   82da0:	00083af1 	.word	0x00083af1

00082da4 <tps56520_set>:
	if (I2C_LOCK) return false;
   82da4:	4a0e      	ldr	r2, [pc, #56]	; (82de0 <tps56520_set+0x3c>)
   82da6:	7811      	ldrb	r1, [r2, #0]
   82da8:	b9b9      	cbnz	r1, 82dda <tps56520_set+0x36>
{
   82daa:	b500      	push	{lr}
	I2C_LOCK = 1;
   82dac:	f04f 0e01 	mov.w	lr, #1
   82db0:	f001 0cff 	and.w	ip, r1, #255	; 0xff
	if ((mv_output < 600) || (mv_output > 1800)){
   82db4:	f5a0 7116 	sub.w	r1, r0, #600	; 0x258
   82db8:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
	I2C_LOCK = 1;
   82dbc:	f882 e000 	strb.w	lr, [r2]
	if ((mv_output < 600) || (mv_output > 1800)){
   82dc0:	d806      	bhi.n	82dd0 <tps56520_set+0x2c>
	if (mv_output > 1200){
   82dc2:	f5b0 6f96 	cmp.w	r0, #1200	; 0x4b0
   82dc6:	d803      	bhi.n	82dd0 <tps56520_set+0x2c>
   82dc8:	4b06      	ldr	r3, [pc, #24]	; (82de4 <tps56520_set+0x40>)
   82dca:	f85d eb04 	ldr.w	lr, [sp], #4
   82dce:	4718      	bx	r3
		I2C_LOCK = 0;
   82dd0:	f882 c000 	strb.w	ip, [r2]
   82dd4:	2000      	movs	r0, #0
   82dd6:	f85d fb04 	ldr.w	pc, [sp], #4
   82dda:	2000      	movs	r0, #0
   82ddc:	4770      	bx	lr
   82dde:	bf00      	nop
   82de0:	20072133 	.word	0x20072133
   82de4:	00082ccd 	.word	0x00082ccd

00082de8 <cdce906_init>:

volatile uint8_t I2C_LOCK = 0;

/* Init the CDCE906 chip, set offline */
bool cdce906_init(void)
{
   82de8:	b570      	push	{r4, r5, r6, lr}
	//gpio_configure_pin(PIN_CDCE_SDA, PIN_CDCE_SDA_FLAGS);
	//gpio_configure_pin(PIN_CDCE_SCL, PIN_CDCE_SCL_FLAGS);
	
	twi_master_options_t opt = {
   82dea:	f24c 3250 	movw	r2, #50000	; 0xc350
   82dee:	2569      	movs	r5, #105	; 0x69
{
   82df0:	b08a      	sub	sp, #40	; 0x28
	p_opt->master_clk = sysclk_get_peripheral_hz();
   82df2:	491c      	ldr	r1, [pc, #112]	; (82e64 <cdce906_init+0x7c>)
	twi_master_options_t opt = {
   82df4:	e9cd 2503 	strd	r2, r5, [sp, #12]
   82df8:	4b1b      	ldr	r3, [pc, #108]	; (82e68 <cdce906_init+0x80>)
   82dfa:	2016      	movs	r0, #22
   82dfc:	9102      	str	r1, [sp, #8]
   82dfe:	4798      	blx	r3
	return (twi_master_init(p_twi, p_opt));
   82e00:	4b1a      	ldr	r3, [pc, #104]	; (82e6c <cdce906_init+0x84>)
   82e02:	481b      	ldr	r0, [pc, #108]	; (82e70 <cdce906_init+0x88>)
   82e04:	a902      	add	r1, sp, #8
   82e06:	4798      	blx	r3
		.chip  = CDCE906_ADDR
	};
	
	twi_master_setup(TWI0, &opt);
	
	uint8_t data = 0;
   82e08:	2000      	movs	r0, #0
	}
}

bool cdce906_read(uint8_t addr, uint8_t * data)
{
	if (I2C_LOCK) {
   82e0a:	4c1a      	ldr	r4, [pc, #104]	; (82e74 <cdce906_init+0x8c>)
	uint8_t data = 0;
   82e0c:	f88d 0007 	strb.w	r0, [sp, #7]
	if (I2C_LOCK) {
   82e10:	7823      	ldrb	r3, [r4, #0]
   82e12:	b10b      	cbz	r3, 82e18 <cdce906_init+0x30>
}
   82e14:	b00a      	add	sp, #40	; 0x28
   82e16:	bd70      	pop	{r4, r5, r6, pc}
		return false;
	}
	I2C_LOCK = 1;
   82e18:	f003 06ff 	and.w	r6, r3, #255	; 0xff
	twi_package_t packet_read = {
   82e1c:	2280      	movs	r2, #128	; 0x80
	I2C_LOCK = 1;
   82e1e:	2301      	movs	r3, #1
	twi_package_t packet_read = {
   82e20:	9605      	str	r6, [sp, #20]
	I2C_LOCK = 1;
   82e22:	7023      	strb	r3, [r4, #0]
	twi_package_t packet_read = {
   82e24:	f88d 2014 	strb.w	r2, [sp, #20]
   82e28:	9306      	str	r3, [sp, #24]
   82e2a:	9308      	str	r3, [sp, #32]
   82e2c:	f10d 0207 	add.w	r2, sp, #7
		.chip         = CDCE906_ADDR,      // TWI slave bus address
		.buffer       = data,        // transfer data destination buffer
		.length       = 1,                    // transfer data size (bytes)
	};
	
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   82e30:	4b11      	ldr	r3, [pc, #68]	; (82e78 <cdce906_init+0x90>)
   82e32:	480f      	ldr	r0, [pc, #60]	; (82e70 <cdce906_init+0x88>)
   82e34:	a905      	add	r1, sp, #20
	twi_package_t packet_read = {
   82e36:	9609      	str	r6, [sp, #36]	; 0x24
   82e38:	9207      	str	r2, [sp, #28]
   82e3a:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   82e3e:	4798      	blx	r3
   82e40:	4603      	mov	r3, r0
   82e42:	b118      	cbz	r0, 82e4c <cdce906_init+0x64>
		return false;
   82e44:	4630      	mov	r0, r6
		I2C_LOCK = 0;
		return 1;
	} else {
		I2C_LOCK = 0;
   82e46:	7026      	strb	r6, [r4, #0]
}
   82e48:	b00a      	add	sp, #40	; 0x28
   82e4a:	bd70      	pop	{r4, r5, r6, pc}
	if ((data & 0x0F) == 0x01){
   82e4c:	f89d 0007 	ldrb.w	r0, [sp, #7]
		I2C_LOCK = 0;
   82e50:	7023      	strb	r3, [r4, #0]
	if ((data & 0x0F) == 0x01){
   82e52:	f000 000f 	and.w	r0, r0, #15
   82e56:	f1a0 0001 	sub.w	r0, r0, #1
   82e5a:	fab0 f080 	clz	r0, r0
   82e5e:	0940      	lsrs	r0, r0, #5
}
   82e60:	b00a      	add	sp, #40	; 0x28
   82e62:	bd70      	pop	{r4, r5, r6, pc}
   82e64:	0501bd00 	.word	0x0501bd00
   82e68:	00083599 	.word	0x00083599
   82e6c:	00083a99 	.word	0x00083a99
   82e70:	4008c000 	.word	0x4008c000
   82e74:	20072133 	.word	0x20072133
   82e78:	00083af1 	.word	0x00083af1

00082e7c <cdce906_write>:
{
   82e7c:	b570      	push	{r4, r5, r6, lr}
	if (I2C_LOCK) {
   82e7e:	4d14      	ldr	r5, [pc, #80]	; (82ed0 <cdce906_write+0x54>)
{
   82e80:	b088      	sub	sp, #32
	if (I2C_LOCK) {
   82e82:	782b      	ldrb	r3, [r5, #0]
{
   82e84:	f88d 1007 	strb.w	r1, [sp, #7]
	if (I2C_LOCK) {
   82e88:	b113      	cbz	r3, 82e90 <cdce906_write+0x14>
		return false;
   82e8a:	2000      	movs	r0, #0
}
   82e8c:	b008      	add	sp, #32
   82e8e:	bd70      	pop	{r4, r5, r6, pc}
	I2C_LOCK = 1;
   82e90:	2401      	movs	r4, #1
	twi_package_t packet_write = {
   82e92:	2269      	movs	r2, #105	; 0x69
   82e94:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   82e98:	f060 007f 	orn	r0, r0, #127	; 0x7f
   82e9c:	f10d 0307 	add.w	r3, sp, #7
   82ea0:	9603      	str	r6, [sp, #12]
   82ea2:	9305      	str	r3, [sp, #20]
   82ea4:	f88d 000c 	strb.w	r0, [sp, #12]
	if (twi_master_write(TWI0, &packet_write) == TWI_SUCCESS){
   82ea8:	4b0a      	ldr	r3, [pc, #40]	; (82ed4 <cdce906_write+0x58>)
   82eaa:	480b      	ldr	r0, [pc, #44]	; (82ed8 <cdce906_write+0x5c>)
   82eac:	a903      	add	r1, sp, #12
	twi_package_t packet_write = {
   82eae:	9607      	str	r6, [sp, #28]
	I2C_LOCK = 1;
   82eb0:	702c      	strb	r4, [r5, #0]
	twi_package_t packet_write = {
   82eb2:	9404      	str	r4, [sp, #16]
   82eb4:	9406      	str	r4, [sp, #24]
   82eb6:	f88d 201c 	strb.w	r2, [sp, #28]
	if (twi_master_write(TWI0, &packet_write) == TWI_SUCCESS){
   82eba:	4798      	blx	r3
   82ebc:	4603      	mov	r3, r0
   82ebe:	b918      	cbnz	r0, 82ec8 <cdce906_write+0x4c>
		return true;
   82ec0:	4620      	mov	r0, r4
		I2C_LOCK = 0;
   82ec2:	702b      	strb	r3, [r5, #0]
}
   82ec4:	b008      	add	sp, #32
   82ec6:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   82ec8:	4630      	mov	r0, r6
		I2C_LOCK = 0;
   82eca:	702e      	strb	r6, [r5, #0]
}
   82ecc:	b008      	add	sp, #32
   82ece:	bd70      	pop	{r4, r5, r6, pc}
   82ed0:	20072133 	.word	0x20072133
   82ed4:	00083bc9 	.word	0x00083bc9
   82ed8:	4008c000 	.word	0x4008c000

00082edc <cdce906_read>:
{
   82edc:	b570      	push	{r4, r5, r6, lr}
	if (I2C_LOCK) {
   82ede:	4d12      	ldr	r5, [pc, #72]	; (82f28 <cdce906_read+0x4c>)
{
   82ee0:	b086      	sub	sp, #24
	if (I2C_LOCK) {
   82ee2:	782b      	ldrb	r3, [r5, #0]
   82ee4:	b113      	cbz	r3, 82eec <cdce906_read+0x10>
		return false;
   82ee6:	2000      	movs	r0, #0
		return 0;
	}	
   82ee8:	b006      	add	sp, #24
   82eea:	bd70      	pop	{r4, r5, r6, pc}
	I2C_LOCK = 1;
   82eec:	2401      	movs	r4, #1
	twi_package_t packet_read = {
   82eee:	2269      	movs	r2, #105	; 0x69
   82ef0:	f003 06ff 	and.w	r6, r3, #255	; 0xff
   82ef4:	f060 007f 	orn	r0, r0, #127	; 0x7f
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   82ef8:	4b0c      	ldr	r3, [pc, #48]	; (82f2c <cdce906_read+0x50>)
	twi_package_t packet_read = {
   82efa:	9103      	str	r1, [sp, #12]
   82efc:	9601      	str	r6, [sp, #4]
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   82efe:	a901      	add	r1, sp, #4
	twi_package_t packet_read = {
   82f00:	f88d 0004 	strb.w	r0, [sp, #4]
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   82f04:	480a      	ldr	r0, [pc, #40]	; (82f30 <cdce906_read+0x54>)
	twi_package_t packet_read = {
   82f06:	9605      	str	r6, [sp, #20]
	I2C_LOCK = 1;
   82f08:	702c      	strb	r4, [r5, #0]
	twi_package_t packet_read = {
   82f0a:	9402      	str	r4, [sp, #8]
   82f0c:	9404      	str	r4, [sp, #16]
   82f0e:	f88d 2014 	strb.w	r2, [sp, #20]
	if(twi_master_read(TWI0, &packet_read) == TWI_SUCCESS){
   82f12:	4798      	blx	r3
   82f14:	4603      	mov	r3, r0
   82f16:	b918      	cbnz	r0, 82f20 <cdce906_read+0x44>
		return 1;
   82f18:	4620      	mov	r0, r4
		I2C_LOCK = 0;
   82f1a:	702b      	strb	r3, [r5, #0]
   82f1c:	b006      	add	sp, #24
   82f1e:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   82f20:	4630      	mov	r0, r6
		I2C_LOCK = 0;
   82f22:	702e      	strb	r6, [r5, #0]
   82f24:	b006      	add	sp, #24
   82f26:	bd70      	pop	{r4, r5, r6, pc}
   82f28:	20072133 	.word	0x20072133
   82f2c:	00083af1 	.word	0x00083af1
   82f30:	4008c000 	.word	0x4008c000

00082f34 <flash_read_unique_id>:
 * \param ul_size Data buffer size in DWORD.
 *
 * \return 0 if successful; otherwise returns an error code.
 */
uint32_t flash_read_unique_id(uint32_t *pul_data, uint32_t ul_size)
{
   82f34:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t uid_buf[4];
	uint32_t ul_idx;

	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   82f36:	2604      	movs	r6, #4
{
   82f38:	b087      	sub	sp, #28
   82f3a:	4604      	mov	r4, r0
   82f3c:	460d      	mov	r5, r1
	if (FLASH_RC_OK != efc_perform_read_sequence(EFC, EFC_FCMD_STUI,
   82f3e:	220f      	movs	r2, #15
   82f40:	210e      	movs	r1, #14
   82f42:	480c      	ldr	r0, [pc, #48]	; (82f74 <flash_read_unique_id+0x40>)
   82f44:	4f0c      	ldr	r7, [pc, #48]	; (82f78 <flash_read_unique_id+0x44>)
   82f46:	ab02      	add	r3, sp, #8
   82f48:	9600      	str	r6, [sp, #0]
   82f4a:	47b8      	blx	r7
   82f4c:	b970      	cbnz	r0, 82f6c <flash_read_unique_id+0x38>
			EFC_FCMD_SPUI, uid_buf, 4)) {
		return FLASH_RC_ERROR;
	}

	if (ul_size > 4) {
   82f4e:	2d04      	cmp	r5, #4
   82f50:	4626      	mov	r6, r4
   82f52:	462a      	mov	r2, r5
   82f54:	4604      	mov	r4, r0
   82f56:	bf28      	it	cs
   82f58:	2204      	movcs	r2, #4
		/* Only 4 dword to store unique ID */
		ul_size = 4;
	}

	for (ul_idx = 0; ul_idx < ul_size; ul_idx++) {
   82f5a:	b125      	cbz	r5, 82f66 <flash_read_unique_id+0x32>
		pul_data[ul_idx] = uid_buf[ul_idx];
   82f5c:	4630      	mov	r0, r6
   82f5e:	4b07      	ldr	r3, [pc, #28]	; (82f7c <flash_read_unique_id+0x48>)
   82f60:	a902      	add	r1, sp, #8
   82f62:	0092      	lsls	r2, r2, #2
   82f64:	4798      	blx	r3
	}

	return FLASH_RC_OK;
}
   82f66:	4620      	mov	r0, r4
   82f68:	b007      	add	sp, #28
   82f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return FLASH_RC_ERROR;
   82f6c:	2410      	movs	r4, #16
}
   82f6e:	4620      	mov	r0, r4
   82f70:	b007      	add	sp, #28
   82f72:	bdf0      	pop	{r4, r5, r6, r7, pc}
   82f74:	400e0a00 	.word	0x400e0a00
   82f78:	20070111 	.word	0x20070111
   82f7c:	00085e0d 	.word	0x00085e0d

00082f80 <usart_set_async_baudrate>:
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   82f80:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
{
   82f84:	4684      	mov	ip, r0
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   82f86:	ea4f 1001 	mov.w	r0, r1, lsl #4
   82f8a:	d312      	bcc.n	82fb2 <usart_set_async_baudrate+0x32>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   82f8c:	0843      	lsrs	r3, r0, #1
   82f8e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   82f92:	fbb2 f2f0 	udiv	r2, r2, r0
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82f96:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	cd = cd_fp >> 3;
   82f9a:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82f9c:	1e58      	subs	r0, r3, #1
   82f9e:	4288      	cmp	r0, r1
   82fa0:	d813      	bhi.n	82fca <usart_set_async_baudrate+0x4a>
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   82fa2:	0412      	lsls	r2, r2, #16
   82fa4:	f402 22e0 	and.w	r2, r2, #458752	; 0x70000
   82fa8:	431a      	orrs	r2, r3

	return 0;
   82faa:	2000      	movs	r0, #0
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   82fac:	f8cc 2020 	str.w	r2, [ip, #32]
	return 0;
   82fb0:	4770      	bx	lr
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   82fb2:	00c9      	lsls	r1, r1, #3
   82fb4:	084b      	lsrs	r3, r1, #1
   82fb6:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
   82fba:	fbb2 f2f1 	udiv	r2, r2, r1
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82fbe:	f64f 71fe 	movw	r1, #65534	; 0xfffe
	cd = cd_fp >> 3;
   82fc2:	08d3      	lsrs	r3, r2, #3
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   82fc4:	1e58      	subs	r0, r3, #1
   82fc6:	4288      	cmp	r0, r1
   82fc8:	d901      	bls.n	82fce <usart_set_async_baudrate+0x4e>
		return 1;
   82fca:	2001      	movs	r0, #1
}
   82fcc:	4770      	bx	lr
		p_usart->US_MR |= US_MR_OVER;
   82fce:	f8dc 1004 	ldr.w	r1, [ip, #4]
   82fd2:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   82fd6:	f8cc 1004 	str.w	r1, [ip, #4]
   82fda:	e7e2      	b.n	82fa2 <usart_set_async_baudrate+0x22>

00082fdc <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   82fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   82fe0:	f44f 7c80 	mov.w	ip, #256	; 0x100
	p_usart->US_MR = 0;
   82fe4:	2300      	movs	r3, #0
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   82fe6:	f04f 0888 	mov.w	r8, #136	; 0x88
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   82fea:	f04f 0e24 	mov.w	lr, #36	; 0x24
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   82fee:	f44f 2700 	mov.w	r7, #524288	; 0x80000
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   82ff2:	f8df 904c 	ldr.w	r9, [pc, #76]	; 83040 <usart_init_rs232+0x64>
	ul_reg_val = 0;
   82ff6:	4e13      	ldr	r6, [pc, #76]	; (83044 <usart_init_rs232+0x68>)
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   82ff8:	f8c0 90e4 	str.w	r9, [r0, #228]	; 0xe4
	ul_reg_val = 0;
   82ffc:	6033      	str	r3, [r6, #0]
	p_usart->US_MR = 0;
   82ffe:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   83000:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   83002:	6283      	str	r3, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   83004:	f8c0 8000 	str.w	r8, [r0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   83008:	f8c0 e000 	str.w	lr, [r0]
	p_usart->US_CR = US_CR_RSTSTA;
   8300c:	f8c0 c000 	str.w	ip, [r0]
	p_usart->US_CR = US_CR_RTSDIS;
   83010:	6007      	str	r7, [r0, #0]
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   83012:	b191      	cbz	r1, 8303a <usart_init_rs232+0x5e>
   83014:	460d      	mov	r5, r1
   83016:	4b0c      	ldr	r3, [pc, #48]	; (83048 <usart_init_rs232+0x6c>)
   83018:	6809      	ldr	r1, [r1, #0]
   8301a:	4604      	mov	r4, r0
   8301c:	4798      	blx	r3
   8301e:	b960      	cbnz	r0, 8303a <usart_init_rs232+0x5e>
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   83020:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   83024:	4313      	orrs	r3, r2
   83026:	692a      	ldr	r2, [r5, #16]
   83028:	4313      	orrs	r3, r2
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   8302a:	68ea      	ldr	r2, [r5, #12]
   8302c:	4313      	orrs	r3, r2
	p_usart->US_MR |= ul_reg_val;
   8302e:	6862      	ldr	r2, [r4, #4]
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   83030:	6033      	str	r3, [r6, #0]
	p_usart->US_MR |= ul_reg_val;
   83032:	4313      	orrs	r3, r2
   83034:	6063      	str	r3, [r4, #4]
}
   83036:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   8303a:	2001      	movs	r0, #1
}
   8303c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   83040:	55534100 	.word	0x55534100
   83044:	20072138 	.word	0x20072138
   83048:	00082f81 	.word	0x00082f81

0008304c <usart_init_spi_master>:
{
   8304c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   83050:	f04f 0c24 	mov.w	ip, #36	; 0x24
	p_usart->US_MR = 0;
   83054:	2400      	movs	r4, #0
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   83056:	f04f 0e88 	mov.w	lr, #136	; 0x88
	p_usart->US_CR = US_CR_RSTSTA;
   8305a:	f44f 7780 	mov.w	r7, #256	; 0x100
	p_usart->US_CR = US_CR_RTSDIS;
   8305e:	f44f 2600 	mov.w	r6, #524288	; 0x80000
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   83062:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 83110 <usart_init_spi_master+0xc4>
	ul_reg_val = 0;
   83066:	4d2b      	ldr	r5, [pc, #172]	; (83114 <usart_init_spi_master+0xc8>)
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   83068:	f8c0 80e4 	str.w	r8, [r0, #228]	; 0xe4
	ul_reg_val = 0;
   8306c:	602c      	str	r4, [r5, #0]
	p_usart->US_MR = 0;
   8306e:	6044      	str	r4, [r0, #4]
	p_usart->US_RTOR = 0;
   83070:	6244      	str	r4, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   83072:	6284      	str	r4, [r0, #40]	; 0x28
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   83074:	f8c0 e000 	str.w	lr, [r0]
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   83078:	f8c0 c000 	str.w	ip, [r0]
	p_usart->US_CR = US_CR_RSTSTA;
   8307c:	6007      	str	r7, [r0, #0]
	p_usart->US_CR = US_CR_RTSDIS;
   8307e:	6006      	str	r6, [r0, #0]
	if (!p_usart_opt || (p_usart_opt->spi_mode > SPI_MODE_3) ||
   83080:	b1f1      	cbz	r1, 830c0 <usart_init_spi_master+0x74>
   83082:	4603      	mov	r3, r0
   83084:	6888      	ldr	r0, [r1, #8]
   83086:	2803      	cmp	r0, #3
   83088:	d81a      	bhi.n	830c0 <usart_init_spi_master+0x74>
			usart_set_spi_master_baudrate(p_usart, p_usart_opt->baudrate,
   8308a:	6808      	ldr	r0, [r1, #0]
	cd = (ul_mck + baudrate / 2) / baudrate;
   8308c:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   83090:	fbb2 f2f0 	udiv	r2, r2, r0
	if (cd < MIN_CD_VALUE_SPI || cd > MAX_CD_VALUE) {
   83094:	f64f 70fb 	movw	r0, #65531	; 0xfffb
   83098:	1f14      	subs	r4, r2, #4
   8309a:	4284      	cmp	r4, r0
   8309c:	d810      	bhi.n	830c0 <usart_init_spi_master+0x74>
	p_usart->US_BRGR = cd << US_BRGR_CD_Pos;
   8309e:	621a      	str	r2, [r3, #32]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   830a0:	684a      	ldr	r2, [r1, #4]
	switch (p_usart_opt->spi_mode) {
   830a2:	e9d1 0402 	ldrd	r0, r4, [r1, #8]
	ul_reg_val |= US_MR_USART_MODE_SPI_MASTER | US_MR_CLKO |
   830a6:	ea42 0104 	orr.w	r1, r2, r4
   830aa:	f441 2280 	orr.w	r2, r1, #262144	; 0x40000
   830ae:	f042 020e 	orr.w	r2, r2, #14
   830b2:	602a      	str	r2, [r5, #0]
	switch (p_usart_opt->spi_mode) {
   830b4:	2803      	cmp	r0, #3
   830b6:	d80d      	bhi.n	830d4 <usart_init_spi_master+0x88>
   830b8:	e8df f000 	tbb	[pc, r0]
   830bc:	121a2005 	.word	0x121a2005
		return 1;
   830c0:	2001      	movs	r0, #1
}
   830c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ul_reg_val &= ~US_MR_CPOL;
   830c6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
   830ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   830ce:	f442 7287 	orr.w	r2, r2, #270	; 0x10e
   830d2:	602a      	str	r2, [r5, #0]
	p_usart->US_MR |= ul_reg_val;
   830d4:	6859      	ldr	r1, [r3, #4]
	return 0;
   830d6:	2000      	movs	r0, #0
	p_usart->US_MR |= ul_reg_val;
   830d8:	430a      	orrs	r2, r1
   830da:	605a      	str	r2, [r3, #4]
}
   830dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ul_reg_val |= US_MR_CPOL;
   830e0:	f421 7280 	bic.w	r2, r1, #256	; 0x100
   830e4:	f442 22a0 	orr.w	r2, r2, #327680	; 0x50000
   830e8:	f042 020e 	orr.w	r2, r2, #14
   830ec:	602a      	str	r2, [r5, #0]
		break;
   830ee:	e7f1      	b.n	830d4 <usart_init_spi_master+0x88>
		ul_reg_val |= US_MR_CPOL;
   830f0:	f441 22a0 	orr.w	r2, r1, #327680	; 0x50000
   830f4:	f442 7287 	orr.w	r2, r2, #270	; 0x10e
   830f8:	602a      	str	r2, [r5, #0]
		break;
   830fa:	e7eb      	b.n	830d4 <usart_init_spi_master+0x88>
		ul_reg_val &= ~US_MR_CPOL;
   830fc:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
   83100:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   83104:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
   83108:	f042 020e 	orr.w	r2, r2, #14
   8310c:	602a      	str	r2, [r5, #0]
		break;
   8310e:	e7e1      	b.n	830d4 <usart_init_spi_master+0x88>
   83110:	55534100 	.word	0x55534100
   83114:	20072134 	.word	0x20072134

00083118 <usart_enable_tx>:
	p_usart->US_CR = US_CR_TXEN;
   83118:	2340      	movs	r3, #64	; 0x40
   8311a:	6003      	str	r3, [r0, #0]
}
   8311c:	4770      	bx	lr
   8311e:	bf00      	nop

00083120 <usart_disable_tx>:
	p_usart->US_CR = US_CR_TXDIS;
   83120:	2380      	movs	r3, #128	; 0x80
   83122:	6003      	str	r3, [r0, #0]
}
   83124:	4770      	bx	lr
   83126:	bf00      	nop

00083128 <usart_enable_rx>:
	p_usart->US_CR = US_CR_RXEN;
   83128:	2310      	movs	r3, #16
   8312a:	6003      	str	r3, [r0, #0]
}
   8312c:	4770      	bx	lr
   8312e:	bf00      	nop

00083130 <usart_disable_rx>:
	p_usart->US_CR = US_CR_RXDIS;
   83130:	2320      	movs	r3, #32
   83132:	6003      	str	r3, [r0, #0]
}
   83134:	4770      	bx	lr
   83136:	bf00      	nop

00083138 <usart_enable_interrupt>:
	p_usart->US_IER = ul_sources;
   83138:	6081      	str	r1, [r0, #8]
}
   8313a:	4770      	bx	lr

0008313c <usart_disable_interrupt>:
	p_usart->US_IDR = ul_sources;
   8313c:	60c1      	str	r1, [r0, #12]
}
   8313e:	4770      	bx	lr

00083140 <usart_get_interrupt_mask>:
	return p_usart->US_IMR;
   83140:	6900      	ldr	r0, [r0, #16]
}
   83142:	4770      	bx	lr

00083144 <usart_get_status>:
	return p_usart->US_CSR;
   83144:	6940      	ldr	r0, [r0, #20]
}
   83146:	4770      	bx	lr

00083148 <usart_putchar>:
	while (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   83148:	6943      	ldr	r3, [r0, #20]
   8314a:	079b      	lsls	r3, r3, #30
   8314c:	d5fc      	bpl.n	83148 <usart_putchar>
	p_usart->US_THR = US_THR_TXCHR(c);
   8314e:	f3c1 0108 	ubfx	r1, r1, #0, #9
   83152:	61c1      	str	r1, [r0, #28]
}
   83154:	2000      	movs	r0, #0
   83156:	4770      	bx	lr

00083158 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   83158:	4a31      	ldr	r2, [pc, #196]	; (83220 <SystemCoreClockUpdate+0xc8>)
   8315a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8315c:	f003 0303 	and.w	r3, r3, #3
   83160:	2b01      	cmp	r3, #1
   83162:	d02c      	beq.n	831be <SystemCoreClockUpdate+0x66>
   83164:	3b02      	subs	r3, #2
   83166:	2b01      	cmp	r3, #1
   83168:	d81e      	bhi.n	831a8 <SystemCoreClockUpdate+0x50>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8316a:	6a13      	ldr	r3, [r2, #32]
   8316c:	01d9      	lsls	r1, r3, #7
   8316e:	d538      	bpl.n	831e2 <SystemCoreClockUpdate+0x8a>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   83170:	482c      	ldr	r0, [pc, #176]	; (83224 <SystemCoreClockUpdate+0xcc>)
   83172:	4b2d      	ldr	r3, [pc, #180]	; (83228 <SystemCoreClockUpdate+0xd0>)
   83174:	6003      	str	r3, [r0, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   83176:	4a2a      	ldr	r2, [pc, #168]	; (83220 <SystemCoreClockUpdate+0xc8>)
   83178:	6b13      	ldr	r3, [r2, #48]	; 0x30
   8317a:	f003 0303 	and.w	r3, r3, #3
   8317e:	2b02      	cmp	r3, #2
   83180:	d03c      	beq.n	831fc <SystemCoreClockUpdate+0xa4>
   83182:	4b2a      	ldr	r3, [pc, #168]	; (8322c <SystemCoreClockUpdate+0xd4>)
			SystemCoreClock = SYS_UTMIPLL / 2U;
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   83184:	4926      	ldr	r1, [pc, #152]	; (83220 <SystemCoreClockUpdate+0xc8>)
   83186:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   83188:	f002 0270 	and.w	r2, r2, #112	; 0x70
   8318c:	2a70      	cmp	r2, #112	; 0x70
   8318e:	d005      	beq.n	8319c <SystemCoreClockUpdate+0x44>
		SystemCoreClock /= 3U;
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   83190:	6b0a      	ldr	r2, [r1, #48]	; 0x30
   83192:	f3c2 1202 	ubfx	r2, r2, #4, #3
   83196:	40d3      	lsrs	r3, r2
   83198:	6003      	str	r3, [r0, #0]
			                          PMC_MCKR_PRES_Pos);
	}
}
   8319a:	4770      	bx	lr
		SystemCoreClock /= 3U;
   8319c:	4a24      	ldr	r2, [pc, #144]	; (83230 <SystemCoreClockUpdate+0xd8>)
   8319e:	fba2 2303 	umull	r2, r3, r2, r3
   831a2:	085b      	lsrs	r3, r3, #1
   831a4:	6003      	str	r3, [r0, #0]
}
   831a6:	4770      	bx	lr
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   831a8:	4b22      	ldr	r3, [pc, #136]	; (83234 <SystemCoreClockUpdate+0xdc>)
   831aa:	481e      	ldr	r0, [pc, #120]	; (83224 <SystemCoreClockUpdate+0xcc>)
   831ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   831ae:	f013 0f80 	tst.w	r3, #128	; 0x80
   831b2:	bf14      	ite	ne
   831b4:	f44f 4300 	movne.w	r3, #32768	; 0x8000
   831b8:	f44f 43fa 	moveq.w	r3, #32000	; 0x7d00
   831bc:	e7e2      	b.n	83184 <SystemCoreClockUpdate+0x2c>
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   831be:	6a13      	ldr	r3, [r2, #32]
   831c0:	01db      	lsls	r3, r3, #7
   831c2:	d40b      	bmi.n	831dc <SystemCoreClockUpdate+0x84>
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   831c4:	6a12      	ldr	r2, [r2, #32]
   831c6:	f002 0270 	and.w	r2, r2, #112	; 0x70
   831ca:	2a10      	cmp	r2, #16
   831cc:	d021      	beq.n	83212 <SystemCoreClockUpdate+0xba>
   831ce:	4b16      	ldr	r3, [pc, #88]	; (83228 <SystemCoreClockUpdate+0xd0>)
   831d0:	4919      	ldr	r1, [pc, #100]	; (83238 <SystemCoreClockUpdate+0xe0>)
   831d2:	4814      	ldr	r0, [pc, #80]	; (83224 <SystemCoreClockUpdate+0xcc>)
   831d4:	2a20      	cmp	r2, #32
   831d6:	bf18      	it	ne
   831d8:	460b      	movne	r3, r1
   831da:	e7d3      	b.n	83184 <SystemCoreClockUpdate+0x2c>
   831dc:	4b12      	ldr	r3, [pc, #72]	; (83228 <SystemCoreClockUpdate+0xd0>)
   831de:	4811      	ldr	r0, [pc, #68]	; (83224 <SystemCoreClockUpdate+0xcc>)
   831e0:	e7d0      	b.n	83184 <SystemCoreClockUpdate+0x2c>
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   831e2:	4b15      	ldr	r3, [pc, #84]	; (83238 <SystemCoreClockUpdate+0xe0>)
   831e4:	480f      	ldr	r0, [pc, #60]	; (83224 <SystemCoreClockUpdate+0xcc>)
   831e6:	6003      	str	r3, [r0, #0]
			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   831e8:	6a13      	ldr	r3, [r2, #32]
   831ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
   831ee:	2b10      	cmp	r3, #16
   831f0:	d012      	beq.n	83218 <SystemCoreClockUpdate+0xc0>
   831f2:	2b20      	cmp	r3, #32
   831f4:	d1bf      	bne.n	83176 <SystemCoreClockUpdate+0x1e>
				SystemCoreClock *= 3U;
   831f6:	4b0c      	ldr	r3, [pc, #48]	; (83228 <SystemCoreClockUpdate+0xd0>)
   831f8:	6003      	str	r3, [r0, #0]
				break;
   831fa:	e7bc      	b.n	83176 <SystemCoreClockUpdate+0x1e>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   831fc:	6a91      	ldr	r1, [r2, #40]	; 0x28
   831fe:	6803      	ldr	r3, [r0, #0]
   83200:	f3c1 410a 	ubfx	r1, r1, #16, #11
   83204:	fb01 3303 	mla	r3, r1, r3, r3
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   83208:	6a92      	ldr	r2, [r2, #40]	; 0x28
   8320a:	b2d2      	uxtb	r2, r2
   8320c:	fbb3 f3f2 	udiv	r3, r3, r2
   83210:	e7b8      	b.n	83184 <SystemCoreClockUpdate+0x2c>
   83212:	4b0a      	ldr	r3, [pc, #40]	; (8323c <SystemCoreClockUpdate+0xe4>)
   83214:	4803      	ldr	r0, [pc, #12]	; (83224 <SystemCoreClockUpdate+0xcc>)
   83216:	e7b5      	b.n	83184 <SystemCoreClockUpdate+0x2c>
				SystemCoreClock *= 2U;
   83218:	4b08      	ldr	r3, [pc, #32]	; (8323c <SystemCoreClockUpdate+0xe4>)
   8321a:	6003      	str	r3, [r0, #0]
				break;
   8321c:	e7ab      	b.n	83176 <SystemCoreClockUpdate+0x1e>
   8321e:	bf00      	nop
   83220:	400e0600 	.word	0x400e0600
   83224:	20070948 	.word	0x20070948
   83228:	00b71b00 	.word	0x00b71b00
   8322c:	0e4e1c00 	.word	0x0e4e1c00
   83230:	aaaaaaab 	.word	0xaaaaaaab
   83234:	400e1a00 	.word	0x400e1a00
   83238:	003d0900 	.word	0x003d0900
   8323c:	007a1200 	.word	0x007a1200

00083240 <smc_set_setup_timing>:
 * \param ul_setup_timing Setup timing for NWE, NCS, NRD.
 */
void smc_set_setup_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_setup_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_SETUP = ul_setup_timing;
   83240:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83244:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83248:	670a      	str	r2, [r1, #112]	; 0x70
}
   8324a:	4770      	bx	lr

0008324c <smc_set_pulse_timing>:
 * \param ul_pulse_timing Pulse timing for NWE,NCS,NRD.
 */
void smc_set_pulse_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_pulse_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_PULSE = ul_pulse_timing;
   8324c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83250:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83254:	674a      	str	r2, [r1, #116]	; 0x74
}
   83256:	4770      	bx	lr

00083258 <smc_set_cycle_timing>:
 * \param ul_cycle_timing Cycle timing for NWE and NRD.
 */
void smc_set_cycle_timing(Smc *p_smc, uint32_t ul_cs,
		uint32_t ul_cycle_timing)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_CYCLE = ul_cycle_timing;
   83258:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8325c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   83260:	678a      	str	r2, [r1, #120]	; 0x78
}
   83262:	4770      	bx	lr

00083264 <smc_set_mode>:
 * \param ul_cs Chip select number to be set.
 * \param ul_mode SMC mode.
 */
void smc_set_mode(Smc *p_smc, uint32_t ul_cs, uint32_t ul_mode)
{
	p_smc->SMC_CS_NUMBER[ul_cs].SMC_MODE = ul_mode;
   83264:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   83268:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   8326c:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
}
   83270:	4770      	bx	lr
   83272:	bf00      	nop

00083274 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   83274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   83276:	4b12      	ldr	r3, [pc, #72]	; (832c0 <pio_handler_process+0x4c>)
{
   83278:	4604      	mov	r4, r0
   8327a:	460e      	mov	r6, r1
	status = pio_get_interrupt_status(p_pio);
   8327c:	4798      	blx	r3
	status &= pio_get_interrupt_mask(p_pio);
   8327e:	4b11      	ldr	r3, [pc, #68]	; (832c4 <pio_handler_process+0x50>)
	status = pio_get_interrupt_status(p_pio);
   83280:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   83282:	4620      	mov	r0, r4
   83284:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   83286:	4005      	ands	r5, r0
   83288:	d019      	beq.n	832be <pio_handler_process+0x4a>
   8328a:	4c0f      	ldr	r4, [pc, #60]	; (832c8 <pio_handler_process+0x54>)
   8328c:	f104 0760 	add.w	r7, r4, #96	; 0x60
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   83290:	6823      	ldr	r3, [r4, #0]
   83292:	42b3      	cmp	r3, r6
   83294:	d005      	beq.n	832a2 <pio_handler_process+0x2e>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   83296:	42bc      	cmp	r4, r7
   83298:	d011      	beq.n	832be <pio_handler_process+0x4a>
			if (gs_interrupt_sources[i].id == ul_id) {
   8329a:	6923      	ldr	r3, [r4, #16]
		while (status != 0) {
   8329c:	3410      	adds	r4, #16
			if (gs_interrupt_sources[i].id == ul_id) {
   8329e:	42b3      	cmp	r3, r6
   832a0:	d1f9      	bne.n	83296 <pio_handler_process+0x22>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   832a2:	6861      	ldr	r1, [r4, #4]
   832a4:	4229      	tst	r1, r5
   832a6:	d0f6      	beq.n	83296 <pio_handler_process+0x22>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   832a8:	68e3      	ldr	r3, [r4, #12]
   832aa:	4630      	mov	r0, r6
   832ac:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
   832ae:	6863      	ldr	r3, [r4, #4]
			if (i >= MAX_INTERRUPT_SOURCES) {
   832b0:	42bc      	cmp	r4, r7
					status &= ~(gs_interrupt_sources[i].mask);
   832b2:	ea25 0503 	bic.w	r5, r5, r3
			if (i >= MAX_INTERRUPT_SOURCES) {
   832b6:	d002      	beq.n	832be <pio_handler_process+0x4a>
		while (status != 0) {
   832b8:	3410      	adds	r4, #16
   832ba:	2d00      	cmp	r5, #0
   832bc:	d1e8      	bne.n	83290 <pio_handler_process+0x1c>
		if (pio_capture_handler) {
			pio_capture_handler(p_pio);
		}
	}
#endif
}
   832be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   832c0:	00083725 	.word	0x00083725
   832c4:	00083729 	.word	0x00083729
   832c8:	2007213c 	.word	0x2007213c

000832cc <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
   832cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
   832d0:	4f1d      	ldr	r7, [pc, #116]	; (83348 <pio_handler_set+0x7c>)
   832d2:	683e      	ldr	r6, [r7, #0]
   832d4:	2e06      	cmp	r6, #6
   832d6:	d828      	bhi.n	8332a <pio_handler_set+0x5e>
   832d8:	460d      	mov	r5, r1
   832da:	4611      	mov	r1, r2
   832dc:	461a      	mov	r2, r3
   832de:	4b1b      	ldr	r3, [pc, #108]	; (8334c <pio_handler_set+0x80>)
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
   832e0:	f04f 0e00 	mov.w	lr, #0
   832e4:	469c      	mov	ip, r3
   832e6:	f106 0801 	add.w	r8, r6, #1
   832ea:	e004      	b.n	832f6 <pio_handler_set+0x2a>
   832ec:	4576      	cmp	r6, lr
   832ee:	f10c 0c10 	add.w	ip, ip, #16
   832f2:	d01d      	beq.n	83330 <pio_handler_set+0x64>
   832f4:	46a6      	mov	lr, r4
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
   832f6:	f8dc 9000 	ldr.w	r9, [ip]
   832fa:	f10e 0401 	add.w	r4, lr, #1
   832fe:	45a9      	cmp	r9, r5
   83300:	d1f4      	bne.n	832ec <pio_handler_set+0x20>
   83302:	f8dc 9004 	ldr.w	r9, [ip, #4]
   83306:	4589      	cmp	r9, r1
   83308:	d1f0      	bne.n	832ec <pio_handler_set+0x20>

	/* Define new source */
	pSource->id = ul_id;
	pSource->mask = ul_mask;
	pSource->attr = ul_attr;
	pSource->handler = p_handler;
   8330a:	9e08      	ldr	r6, [sp, #32]
	pSource->id = ul_id;
   8330c:	eb03 140e 	add.w	r4, r3, lr, lsl #4
	pSource->attr = ul_attr;
   83310:	e9c4 1201 	strd	r1, r2, [r4, #4]
	pSource->handler = p_handler;
   83314:	60e6      	str	r6, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
   83316:	45f0      	cmp	r8, lr
	pSource->id = ul_id;
   83318:	ea4f 140e 	mov.w	r4, lr, lsl #4
   8331c:	511d      	str	r5, [r3, r4]
	if (i == gs_ul_nb_sources + 1) {
   8331e:	d00f      	beq.n	83340 <pio_handler_set+0x74>
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
   83320:	4b0b      	ldr	r3, [pc, #44]	; (83350 <pio_handler_set+0x84>)
   83322:	4798      	blx	r3

	return 0;
   83324:	2000      	movs	r0, #0
}
   83326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 1;
   8332a:	2001      	movs	r0, #1
}
   8332c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	pSource->id = ul_id;
   83330:	eb03 1406 	add.w	r4, r3, r6, lsl #4
   83334:	0136      	lsls	r6, r6, #4
   83336:	519d      	str	r5, [r3, r6]
	pSource->attr = ul_attr;
   83338:	e9c4 1201 	strd	r1, r2, [r4, #4]
	pSource->handler = p_handler;
   8333c:	9b08      	ldr	r3, [sp, #32]
   8333e:	60e3      	str	r3, [r4, #12]
		gs_ul_nb_sources++;
   83340:	f8c7 8000 	str.w	r8, [r7]
   83344:	e7ec      	b.n	83320 <pio_handler_set+0x54>
   83346:	bf00      	nop
   83348:	200721ac 	.word	0x200721ac
   8334c:	2007213c 	.word	0x2007213c
   83350:	000836f9 	.word	0x000836f9

00083354 <PIOA_Handler>:
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
	pio_handler_process(PIOA, ID_PIOA);
   83354:	210b      	movs	r1, #11
   83356:	4801      	ldr	r0, [pc, #4]	; (8335c <PIOA_Handler+0x8>)
   83358:	4b01      	ldr	r3, [pc, #4]	; (83360 <PIOA_Handler+0xc>)
   8335a:	4718      	bx	r3
   8335c:	400e0e00 	.word	0x400e0e00
   83360:	00083275 	.word	0x00083275

00083364 <PIOB_Handler>:
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
    pio_handler_process(PIOB, ID_PIOB);
   83364:	210c      	movs	r1, #12
   83366:	4801      	ldr	r0, [pc, #4]	; (8336c <PIOB_Handler+0x8>)
   83368:	4b01      	ldr	r3, [pc, #4]	; (83370 <PIOB_Handler+0xc>)
   8336a:	4718      	bx	r3
   8336c:	400e1000 	.word	0x400e1000
   83370:	00083275 	.word	0x00083275

00083374 <PIOC_Handler>:
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
	pio_handler_process(PIOC, ID_PIOC);
   83374:	210d      	movs	r1, #13
   83376:	4801      	ldr	r0, [pc, #4]	; (8337c <PIOC_Handler+0x8>)
   83378:	4b01      	ldr	r3, [pc, #4]	; (83380 <PIOC_Handler+0xc>)
   8337a:	4718      	bx	r3
   8337c:	400e1200 	.word	0x400e1200
   83380:	00083275 	.word	0x00083275

00083384 <PIOD_Handler>:
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
	pio_handler_process(PIOD, ID_PIOD);
   83384:	210e      	movs	r1, #14
   83386:	4801      	ldr	r0, [pc, #4]	; (8338c <PIOD_Handler+0x8>)
   83388:	4b01      	ldr	r3, [pc, #4]	; (83390 <PIOD_Handler+0xc>)
   8338a:	4718      	bx	r3
   8338c:	400e1400 	.word	0x400e1400
   83390:	00083275 	.word	0x00083275

00083394 <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   83394:	3801      	subs	r0, #1
   83396:	2802      	cmp	r0, #2
   83398:	d81a      	bhi.n	833d0 <_write+0x3c>
		return -1;
	}

	for (; len != 0; --len) {
   8339a:	b1da      	cbz	r2, 833d4 <_write+0x40>
{
   8339c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   833a0:	460d      	mov	r5, r1
	for (; len != 0; --len) {
   833a2:	4614      	mov	r4, r2
   833a4:	4f0c      	ldr	r7, [pc, #48]	; (833d8 <_write+0x44>)
   833a6:	f8df 8034 	ldr.w	r8, [pc, #52]	; 833dc <_write+0x48>
   833aa:	1c56      	adds	r6, r2, #1
   833ac:	e001      	b.n	833b2 <_write+0x1e>
   833ae:	3c01      	subs	r4, #1
   833b0:	d00b      	beq.n	833ca <_write+0x36>
		if (ptr_put(stdio_base, *ptr++) < 0) {
   833b2:	6838      	ldr	r0, [r7, #0]
   833b4:	f8d8 3000 	ldr.w	r3, [r8]
   833b8:	f815 1b01 	ldrb.w	r1, [r5], #1
   833bc:	4798      	blx	r3
   833be:	2800      	cmp	r0, #0
   833c0:	eba6 0204 	sub.w	r2, r6, r4
   833c4:	daf3      	bge.n	833ae <_write+0x1a>
		return -1;
   833c6:	f04f 32ff 	mov.w	r2, #4294967295
			return -1;
		}
		++nChars;
	}
	return nChars;
}
   833ca:	4610      	mov	r0, r2
   833cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   833d0:	f04f 32ff 	mov.w	r2, #4294967295
}
   833d4:	4610      	mov	r0, r2
   833d6:	4770      	bx	lr
   833d8:	200721b4 	.word	0x200721b4
   833dc:	200721b0 	.word	0x200721b0

000833e0 <sysclk_enable_usb>:
		pmc_enable_upll_clock();
		pmc_switch_udpck_to_upllck(CONFIG_USBCLK_DIV - 1);
		pmc_enable_udpck();
		return;
	}
}
   833e0:	4770      	bx	lr
   833e2:	bf00      	nop

000833e4 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   833e4:	b570      	push	{r4, r5, r6, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   833e6:	480f      	ldr	r0, [pc, #60]	; (83424 <sysclk_init+0x40>)
   833e8:	4d0f      	ldr	r5, [pc, #60]	; (83428 <sysclk_init+0x44>)
   833ea:	47a8      	blx	r5
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   833ec:	213e      	movs	r1, #62	; 0x3e
   833ee:	2000      	movs	r0, #0
   833f0:	4b0e      	ldr	r3, [pc, #56]	; (8342c <sysclk_init+0x48>)
   833f2:	4798      	blx	r3
		break;
   833f4:	4c0e      	ldr	r4, [pc, #56]	; (83430 <sysclk_init+0x4c>)
		return pmc_osc_is_ready_mainck();
   833f6:	47a0      	blx	r4
   833f8:	2800      	cmp	r0, #0
   833fa:	d0fc      	beq.n	833f6 <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   833fc:	4b0d      	ldr	r3, [pc, #52]	; (83434 <sysclk_init+0x50>)
   833fe:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   83400:	4b0d      	ldr	r3, [pc, #52]	; (83438 <sysclk_init+0x54>)
   83402:	4a0e      	ldr	r2, [pc, #56]	; (8343c <sysclk_init+0x58>)
   83404:	4c0e      	ldr	r4, [pc, #56]	; (83440 <sysclk_init+0x5c>)
   83406:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   83408:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8340a:	2800      	cmp	r0, #0
   8340c:	d0fc      	beq.n	83408 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   8340e:	4b0d      	ldr	r3, [pc, #52]	; (83444 <sysclk_init+0x60>)
   83410:	2010      	movs	r0, #16
   83412:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   83414:	4b0c      	ldr	r3, [pc, #48]	; (83448 <sysclk_init+0x64>)
   83416:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   83418:	462b      	mov	r3, r5

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = 1;
#endif
}
   8341a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	system_init_flash(sysclk_get_cpu_hz());
   8341e:	4801      	ldr	r0, [pc, #4]	; (83424 <sysclk_init+0x40>)
   83420:	4718      	bx	r3
   83422:	bf00      	nop
   83424:	0501bd00 	.word	0x0501bd00
   83428:	2007008d 	.word	0x2007008d
   8342c:	00083505 	.word	0x00083505
   83430:	00083555 	.word	0x00083555
   83434:	00083565 	.word	0x00083565
   83438:	400e0600 	.word	0x400e0600
   8343c:	200d3f01 	.word	0x200d3f01
   83440:	00083575 	.word	0x00083575
   83444:	000834a9 	.word	0x000834a9
   83448:	00083159 	.word	0x00083159

0008344c <pmc_switch_mck_to_mainck>:
 */
uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   8344c:	4915      	ldr	r1, [pc, #84]	; (834a4 <pmc_switch_mck_to_mainck+0x58>)
   8344e:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83450:	f023 0303 	bic.w	r3, r3, #3
   83454:	f043 0301 	orr.w	r3, r3, #1
   83458:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_MAIN_CLK;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8345a:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   8345c:	071b      	lsls	r3, r3, #28
   8345e:	bf58      	it	pl
   83460:	f44f 6300 	movpl.w	r3, #2048	; 0x800
   83464:	d502      	bpl.n	8346c <pmc_switch_mck_to_mainck+0x20>
   83466:	e004      	b.n	83472 <pmc_switch_mck_to_mainck+0x26>
			--ul_timeout) {
		if (ul_timeout == 0) {
   83468:	3b01      	subs	r3, #1
   8346a:	d016      	beq.n	8349a <pmc_switch_mck_to_mainck+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8346c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8346e:	0712      	lsls	r2, r2, #28
   83470:	d5fa      	bpl.n	83468 <pmc_switch_mck_to_mainck+0x1c>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   83472:	490c      	ldr	r1, [pc, #48]	; (834a4 <pmc_switch_mck_to_mainck+0x58>)
   83474:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   83476:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   8347a:	4303      	orrs	r3, r0
   8347c:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8347e:	6e88      	ldr	r0, [r1, #104]	; 0x68
   83480:	f010 0008 	ands.w	r0, r0, #8
   83484:	bf08      	it	eq
   83486:	f44f 6300 	moveq.w	r3, #2048	; 0x800
   8348a:	d002      	beq.n	83492 <pmc_switch_mck_to_mainck+0x46>
   8348c:	e007      	b.n	8349e <pmc_switch_mck_to_mainck+0x52>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8348e:	3b01      	subs	r3, #1
   83490:	d003      	beq.n	8349a <pmc_switch_mck_to_mainck+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   83492:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   83494:	0712      	lsls	r2, r2, #28
   83496:	d5fa      	bpl.n	8348e <pmc_switch_mck_to_mainck+0x42>
			return 1;
		}
	}

	return 0;
}
   83498:	4770      	bx	lr
			return 1;
   8349a:	2001      	movs	r0, #1
   8349c:	4770      	bx	lr
	return 0;
   8349e:	2000      	movs	r0, #0
   834a0:	4770      	bx	lr
   834a2:	bf00      	nop
   834a4:	400e0600 	.word	0x400e0600

000834a8 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   834a8:	4915      	ldr	r1, [pc, #84]	; (83500 <pmc_switch_mck_to_pllack+0x58>)
   834aa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   834ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   834b0:	4303      	orrs	r3, r0
   834b2:	630b      	str	r3, [r1, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   834b4:	6e8b      	ldr	r3, [r1, #104]	; 0x68
   834b6:	071b      	lsls	r3, r3, #28
   834b8:	bf58      	it	pl
   834ba:	f44f 6300 	movpl.w	r3, #2048	; 0x800
   834be:	d502      	bpl.n	834c6 <pmc_switch_mck_to_pllack+0x1e>
   834c0:	e004      	b.n	834cc <pmc_switch_mck_to_pllack+0x24>
			--ul_timeout) {
		if (ul_timeout == 0) {
   834c2:	3b01      	subs	r3, #1
   834c4:	d017      	beq.n	834f6 <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   834c6:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   834c8:	0710      	lsls	r0, r2, #28
   834ca:	d5fa      	bpl.n	834c2 <pmc_switch_mck_to_pllack+0x1a>
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   834cc:	490c      	ldr	r1, [pc, #48]	; (83500 <pmc_switch_mck_to_pllack+0x58>)
   834ce:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   834d0:	f023 0303 	bic.w	r3, r3, #3
   834d4:	f043 0302 	orr.w	r3, r3, #2
   834d8:	630b      	str	r3, [r1, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   834da:	6e88      	ldr	r0, [r1, #104]	; 0x68
   834dc:	f010 0008 	ands.w	r0, r0, #8
   834e0:	bf08      	it	eq
   834e2:	f44f 6300 	moveq.w	r3, #2048	; 0x800
   834e6:	d002      	beq.n	834ee <pmc_switch_mck_to_pllack+0x46>
   834e8:	e007      	b.n	834fa <pmc_switch_mck_to_pllack+0x52>
			--ul_timeout) {
		if (ul_timeout == 0) {
   834ea:	3b01      	subs	r3, #1
   834ec:	d003      	beq.n	834f6 <pmc_switch_mck_to_pllack+0x4e>
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   834ee:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   834f0:	0712      	lsls	r2, r2, #28
   834f2:	d5fa      	bpl.n	834ea <pmc_switch_mck_to_pllack+0x42>
			return 1;
		}
	}

	return 0;
}
   834f4:	4770      	bx	lr
			return 1;
   834f6:	2001      	movs	r0, #1
   834f8:	4770      	bx	lr
	return 0;
   834fa:	2000      	movs	r0, #0
   834fc:	4770      	bx	lr
   834fe:	bf00      	nop
   83500:	400e0600 	.word	0x400e0600

00083504 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   83504:	b138      	cbz	r0, 83516 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83506:	4910      	ldr	r1, [pc, #64]	; (83548 <pmc_switch_mainck_to_xtal+0x44>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   83508:	4a10      	ldr	r2, [pc, #64]	; (8354c <pmc_switch_mainck_to_xtal+0x48>)
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8350a:	6a08      	ldr	r0, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   8350c:	4b10      	ldr	r3, [pc, #64]	; (83550 <pmc_switch_mainck_to_xtal+0x4c>)
   8350e:	4002      	ands	r2, r0
   83510:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   83512:	620b      	str	r3, [r1, #32]
   83514:	4770      	bx	lr
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83516:	4a0c      	ldr	r2, [pc, #48]	; (83548 <pmc_switch_mainck_to_xtal+0x44>)
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   83518:	0209      	lsls	r1, r1, #8
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8351a:	6a10      	ldr	r0, [r2, #32]
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   8351c:	b28b      	uxth	r3, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8351e:	f420 115c 	bic.w	r1, r0, #3604480	; 0x370000
   83522:	f021 0103 	bic.w	r1, r1, #3
   83526:	430b      	orrs	r3, r1
   83528:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8352c:	f043 0301 	orr.w	r3, r3, #1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   83530:	6213      	str	r3, [r2, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   83532:	6e93      	ldr	r3, [r2, #104]	; 0x68
   83534:	07db      	lsls	r3, r3, #31
   83536:	d5fc      	bpl.n	83532 <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   83538:	6a13      	ldr	r3, [r2, #32]
   8353a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8353e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   83542:	6213      	str	r3, [r2, #32]
	}
}
   83544:	4770      	bx	lr
   83546:	bf00      	nop
   83548:	400e0600 	.word	0x400e0600
   8354c:	fec8fffc 	.word	0xfec8fffc
   83550:	01370002 	.word	0x01370002

00083554 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   83554:	4b02      	ldr	r3, [pc, #8]	; (83560 <pmc_osc_is_ready_mainck+0xc>)
   83556:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83558:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8355c:	4770      	bx	lr
   8355e:	bf00      	nop
   83560:	400e0600 	.word	0x400e0600

00083564 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   83564:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   83568:	4b01      	ldr	r3, [pc, #4]	; (83570 <pmc_disable_pllack+0xc>)
   8356a:	629a      	str	r2, [r3, #40]	; 0x28
#endif
}
   8356c:	4770      	bx	lr
   8356e:	bf00      	nop
   83570:	400e0600 	.word	0x400e0600

00083574 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   83574:	4b02      	ldr	r3, [pc, #8]	; (83580 <pmc_is_locked_pllack+0xc>)
   83576:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   83578:	f000 0002 	and.w	r0, r0, #2
   8357c:	4770      	bx	lr
   8357e:	bf00      	nop
   83580:	400e0600 	.word	0x400e0600

00083584 <pmc_enable_upll_clock>:
/**
 * \brief Enable UPLL clock.
 */
void pmc_enable_upll_clock(void)
{
	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
   83584:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
   83588:	4a02      	ldr	r2, [pc, #8]	; (83594 <pmc_enable_upll_clock+0x10>)
   8358a:	61d3      	str	r3, [r2, #28]

	/* Wait UTMI PLL Lock Status */
	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
   8358c:	6e93      	ldr	r3, [r2, #104]	; 0x68
   8358e:	065b      	lsls	r3, r3, #25
   83590:	d5fc      	bpl.n	8358c <pmc_enable_upll_clock+0x8>
}
   83592:	4770      	bx	lr
   83594:	400e0600 	.word	0x400e0600

00083598 <pmc_enable_periph_clk>:
 *
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
   83598:	4602      	mov	r2, r0
#if defined(REG_PMC_PCR) && !SAMG55
	uint32_t pcr;
	PMC->PMC_PCR = ul_id & 0x7F;
   8359a:	4b06      	ldr	r3, [pc, #24]	; (835b4 <pmc_enable_periph_clk+0x1c>)
   8359c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
   835a0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   835a4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
#endif
	}

	return 0;
#endif /* defined(REG_PMC_PCR) && !SAMG55 */
}
   835a8:	2000      	movs	r0, #0
	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
   835aa:	f042 2210 	orr.w	r2, r2, #268439552	; 0x10001000
	PMC->PMC_PCR = pcr;
   835ae:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
}
   835b2:	4770      	bx	lr
   835b4:	400e0600 	.word	0x400e0600

000835b8 <pmc_enable_pck>:
 *
 * \param ul_id Id of the programmable clock.
 */
void pmc_enable_pck(uint32_t ul_id)
{
	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
   835b8:	f44f 7380 	mov.w	r3, #256	; 0x100
   835bc:	4a01      	ldr	r2, [pc, #4]	; (835c4 <pmc_enable_pck+0xc>)
   835be:	4083      	lsls	r3, r0
   835c0:	6013      	str	r3, [r2, #0]
}
   835c2:	4770      	bx	lr
   835c4:	400e0600 	.word	0x400e0600

000835c8 <pmc_set_fast_startup_input>:
 * \param ul_inputs Wake up inputs to enable.
 */
void pmc_set_fast_startup_input(uint32_t ul_inputs)
{
	ul_inputs &= PMC_FAST_STARTUP_Msk;
	PMC->PMC_FSMR |= ul_inputs;
   835c8:	4b03      	ldr	r3, [pc, #12]	; (835d8 <pmc_set_fast_startup_input+0x10>)
	ul_inputs &= PMC_FAST_STARTUP_Msk;
   835ca:	f3c0 0012 	ubfx	r0, r0, #0, #19
	PMC->PMC_FSMR |= ul_inputs;
   835ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
   835d0:	4310      	orrs	r0, r2
   835d2:	6718      	str	r0, [r3, #112]	; 0x70
}
   835d4:	4770      	bx	lr
   835d6:	bf00      	nop
   835d8:	400e0600 	.word	0x400e0600

000835dc <udi_vendor_getsetting>:
	return false; // Not supported request
}

uint8_t udi_vendor_getsetting(void)
{
	return udi_vendor_alternate_setting;
   835dc:	4b01      	ldr	r3, [pc, #4]	; (835e4 <udi_vendor_getsetting+0x8>)
}
   835de:	7818      	ldrb	r0, [r3, #0]
   835e0:	4770      	bx	lr
   835e2:	bf00      	nop
   835e4:	200721b8 	.word	0x200721b8

000835e8 <udi_vendor_disable>:
	if (0 == udi_vendor_alternate_setting) {
   835e8:	4b02      	ldr	r3, [pc, #8]	; (835f4 <udi_vendor_disable+0xc>)
   835ea:	781b      	ldrb	r3, [r3, #0]
   835ec:	b103      	cbz	r3, 835f0 <udi_vendor_disable+0x8>
}
   835ee:	4770      	bx	lr
		UDI_VENDOR_DISABLE_EXT();
   835f0:	4b01      	ldr	r3, [pc, #4]	; (835f8 <udi_vendor_disable+0x10>)
   835f2:	4718      	bx	r3
   835f4:	200721b8 	.word	0x200721b8
   835f8:	000818c5 	.word	0x000818c5

000835fc <udi_vendor_setup>:
	if (Udd_setup_is_in()) {
   835fc:	4b08      	ldr	r3, [pc, #32]	; (83620 <udi_vendor_setup+0x24>)
   835fe:	f993 2000 	ldrsb.w	r2, [r3]
   83602:	781b      	ldrb	r3, [r3, #0]
   83604:	2a00      	cmp	r2, #0
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83606:	f003 0360 	and.w	r3, r3, #96	; 0x60
	if (Udd_setup_is_in()) {
   8360a:	db03      	blt.n	83614 <udi_vendor_setup+0x18>
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   8360c:	2b40      	cmp	r3, #64	; 0x40
   8360e:	d005      	beq.n	8361c <udi_vendor_setup+0x20>
}
   83610:	2000      	movs	r0, #0
   83612:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_VENDOR) {
   83614:	2b40      	cmp	r3, #64	; 0x40
   83616:	d1fb      	bne.n	83610 <udi_vendor_setup+0x14>
			return UDI_VENDOR_SETUP_IN_RECEIVED();
   83618:	4b02      	ldr	r3, [pc, #8]	; (83624 <udi_vendor_setup+0x28>)
   8361a:	4718      	bx	r3
			return UDI_VENDOR_SETUP_OUT_RECEIVED();
   8361c:	4b02      	ldr	r3, [pc, #8]	; (83628 <udi_vendor_setup+0x2c>)
   8361e:	4718      	bx	r3
   83620:	2007228c 	.word	0x2007228c
   83624:	00081921 	.word	0x00081921
   83628:	000818d1 	.word	0x000818d1

0008362c <udi_vendor_enable>:
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   8362c:	4b06      	ldr	r3, [pc, #24]	; (83648 <udi_vendor_enable+0x1c>)
{
   8362e:	b510      	push	{r4, lr}
	udi_vendor_alternate_setting = udc_get_interface_desc()->bAlternateSetting;
   83630:	4798      	blx	r3
   83632:	4a06      	ldr	r2, [pc, #24]	; (8364c <udi_vendor_enable+0x20>)
   83634:	78c3      	ldrb	r3, [r0, #3]
   83636:	7013      	strb	r3, [r2, #0]
	if (0 == udi_vendor_alternate_setting) {
   83638:	b10b      	cbz	r3, 8363e <udi_vendor_enable+0x12>
}
   8363a:	2001      	movs	r0, #1
   8363c:	bd10      	pop	{r4, pc}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   8363e:	4b04      	ldr	r3, [pc, #16]	; (83650 <udi_vendor_enable+0x24>)
}
   83640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if (!UDI_VENDOR_ENABLE_EXT()) {
   83644:	4718      	bx	r3
   83646:	bf00      	nop
   83648:	00081169 	.word	0x00081169
   8364c:	200721b8 	.word	0x200721b8
   83650:	0008189d 	.word	0x0008189d

00083654 <udi_vendor_bulk_in_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_in_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   83654:	b530      	push	{r4, r5, lr}
   83656:	4684      	mov	ip, r0
   83658:	4615      	mov	r5, r2
   8365a:	b083      	sub	sp, #12
   8365c:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_IN,
   8365e:	4662      	mov	r2, ip
   83660:	2100      	movs	r1, #0
   83662:	4c03      	ldr	r4, [pc, #12]	; (83670 <udi_vendor_bulk_in_run+0x1c>)
   83664:	9500      	str	r5, [sp, #0]
   83666:	2081      	movs	r0, #129	; 0x81
   83668:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   8366a:	b003      	add	sp, #12
   8366c:	bd30      	pop	{r4, r5, pc}
   8366e:	bf00      	nop
   83670:	0008456d 	.word	0x0008456d

00083674 <udi_vendor_bulk_out_run>:
 *
 * \return \c 1 if function was successfully done, otherwise \c 0.
 */
bool udi_vendor_bulk_out_run(uint8_t * buf, iram_size_t buf_size,
		udd_callback_trans_t callback)
{
   83674:	b530      	push	{r4, r5, lr}
   83676:	4684      	mov	ip, r0
   83678:	4615      	mov	r5, r2
   8367a:	b083      	sub	sp, #12
   8367c:	460b      	mov	r3, r1
	return udd_ep_run(UDI_VENDOR_EP_BULK_OUT,
   8367e:	4662      	mov	r2, ip
   83680:	2100      	movs	r1, #0
   83682:	4c03      	ldr	r4, [pc, #12]	; (83690 <udi_vendor_bulk_out_run+0x1c>)
   83684:	9500      	str	r5, [sp, #0]
   83686:	2002      	movs	r0, #2
   83688:	47a0      	blx	r4
			false,
			buf,
			buf_size,
			callback);
}
   8368a:	b003      	add	sp, #12
   8368c:	bd30      	pop	{r4, r5, pc}
   8368e:	bf00      	nop
   83690:	0008456d 	.word	0x0008456d

00083694 <efc_perform_command>:
 *
 * \return 0 if successful, otherwise returns an error code.
 */
uint32_t efc_perform_command(Efc *p_efc, uint32_t ul_command,
		uint32_t ul_argument)
{
   83694:	b538      	push	{r3, r4, r5, lr}
	uint32_t result;
	irqflags_t flags;

	/* Unique ID commands are not supported. */
	if (ul_command == EFC_FCMD_STUI || ul_command == EFC_FCMD_SPUI) {
   83696:	f1a1 030e 	sub.w	r3, r1, #14
   8369a:	2b01      	cmp	r3, #1
   8369c:	d917      	bls.n	836ce <efc_perform_command+0x3a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8369e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   836a2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   836a4:	f3bf 8f5f 	dmb	sy
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = cpu_irq_is_enabled();
	cpu_irq_disable();
   836a8:	2300      	movs	r3, #0
   836aa:	4c0a      	ldr	r4, [pc, #40]	; (836d4 <efc_perform_command+0x40>)

	flags = cpu_irq_save();
	/* Use RAM Function. */
	result = efc_perform_fcr(p_efc,
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
			EEFC_FCR_FCMD(ul_command));
   836ac:	b2c9      	uxtb	r1, r1
   836ae:	7023      	strb	r3, [r4, #0]
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(ul_argument) |
   836b0:	4b09      	ldr	r3, [pc, #36]	; (836d8 <efc_perform_command+0x44>)
   836b2:	ea03 2202 	and.w	r2, r3, r2, lsl #8
   836b6:	4311      	orrs	r1, r2
	result = efc_perform_fcr(p_efc,
   836b8:	4b08      	ldr	r3, [pc, #32]	; (836dc <efc_perform_command+0x48>)
   836ba:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
   836be:	4798      	blx	r3
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
   836c0:	b925      	cbnz	r5, 836cc <efc_perform_command+0x38>
		cpu_irq_enable();
   836c2:	2301      	movs	r3, #1
   836c4:	7023      	strb	r3, [r4, #0]
   836c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   836ca:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return result;
}
   836cc:	bd38      	pop	{r3, r4, r5, pc}
		return EFC_RC_NOT_SUPPORT;
   836ce:	f04f 30ff 	mov.w	r0, #4294967295
}
   836d2:	bd38      	pop	{r3, r4, r5, pc}
   836d4:	20070b04 	.word	0x20070b04
   836d8:	00ffff00 	.word	0x00ffff00
   836dc:	2007019d 	.word	0x2007019d

000836e0 <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
   836e0:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
   836e4:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
		ul_reg = p_pio->PIO_ODSR;
   836e8:	bf0c      	ite	eq
   836ea:	6b83      	ldreq	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
   836ec:	6bc3      	ldrne	r3, [r0, #60]	; 0x3c
	}

	if ((ul_reg & ul_mask) == 0) {
   836ee:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
   836f0:	bf14      	ite	ne
   836f2:	2001      	movne	r0, #1
   836f4:	2000      	moveq	r0, #0
   836f6:	4770      	bx	lr

000836f8 <pio_configure_interrupt>:
 */
void pio_configure_interrupt(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_attr)
{
	/* Configure additional interrupt mode registers. */
	if (ul_attr & PIO_IT_AIME) {
   836f8:	06d3      	lsls	r3, r2, #27
   836fa:	d50e      	bpl.n	8371a <pio_configure_interrupt+0x22>
		/* Enable additional interrupt mode. */
		p_pio->PIO_AIMER = ul_mask;

		/* If bit field of the selected pin is 1, set as
		   Rising Edge/High level detection event. */
		if (ul_attr & PIO_IT_RE_OR_HL) {
   836fc:	0693      	lsls	r3, r2, #26
		p_pio->PIO_AIMER = ul_mask;
   836fe:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
			/* Rising Edge or High Level */
			p_pio->PIO_REHLSR = ul_mask;
   83702:	bf4c      	ite	mi
   83704:	f8c0 10d4 	strmi.w	r1, [r0, #212]	; 0xd4
		} else {
			/* Falling Edge or Low Level */
			p_pio->PIO_FELLSR = ul_mask;
   83708:	f8c0 10d0 	strpl.w	r1, [r0, #208]	; 0xd0
		}

		/* If bit field of the selected pin is 1, set as
		   edge detection source. */
		if (ul_attr & PIO_IT_EDGE) {
   8370c:	0653      	lsls	r3, r2, #25
			/* Edge select */
			p_pio->PIO_ESR = ul_mask;
   8370e:	bf4c      	ite	mi
   83710:	f8c0 10c0 	strmi.w	r1, [r0, #192]	; 0xc0
		} else {
			/* Level select */
			p_pio->PIO_LSR = ul_mask;
   83714:	f8c0 10c4 	strpl.w	r1, [r0, #196]	; 0xc4
   83718:	4770      	bx	lr
		}
	} else {
		/* Disable additional interrupt mode. */
		p_pio->PIO_AIMDR = ul_mask;
   8371a:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
	}
}
   8371e:	4770      	bx	lr

00083720 <pio_enable_interrupt>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_enable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IER = ul_mask;
   83720:	6401      	str	r1, [r0, #64]	; 0x40
}
   83722:	4770      	bx	lr

00083724 <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   83724:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   83726:	4770      	bx	lr

00083728 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   83728:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8372a:	4770      	bx	lr

0008372c <pio_get_pin_value>:
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8372c:	0943      	lsrs	r3, r0, #5
   8372e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83732:	f203 7307 	addw	r3, r3, #1799	; 0x707
   83736:	025b      	lsls	r3, r3, #9
	return (p_pio->PIO_PDSR >> (ul_pin & 0x1F)) & 1;
   83738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   8373a:	f000 001f 	and.w	r0, r0, #31
   8373e:	fa23 f000 	lsr.w	r0, r3, r0
}
   83742:	f000 0001 	and.w	r0, r0, #1
   83746:	4770      	bx	lr

00083748 <pio_set_pin_high>:
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   83748:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   8374a:	0943      	lsrs	r3, r0, #5
   8374c:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83750:	f203 7307 	addw	r3, r3, #1799	; 0x707
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   83754:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83758:	025b      	lsls	r3, r3, #9
	p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8375a:	fa02 f000 	lsl.w	r0, r2, r0
   8375e:	6318      	str	r0, [r3, #48]	; 0x30
}
   83760:	4770      	bx	lr
   83762:	bf00      	nop

00083764 <pio_set_pin_low>:
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   83764:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83766:	0943      	lsrs	r3, r0, #5
   83768:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   8376c:	f203 7307 	addw	r3, r3, #1799	; 0x707
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   83770:	f000 001f 	and.w	r0, r0, #31
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83774:	025b      	lsls	r3, r3, #9
	p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   83776:	fa02 f000 	lsl.w	r0, r2, r0
   8377a:	6358      	str	r0, [r3, #52]	; 0x34
}
   8377c:	4770      	bx	lr
   8377e:	bf00      	nop

00083780 <pio_toggle_pin>:
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   83780:	2201      	movs	r2, #1
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   83782:	0943      	lsrs	r3, r0, #5
   83784:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
   83788:	f203 7307 	addw	r3, r3, #1799	; 0x707
   8378c:	025b      	lsls	r3, r3, #9
	if (p_pio->PIO_ODSR & (1 << (ul_pin & 0x1F))) {
   8378e:	6b99      	ldr	r1, [r3, #56]	; 0x38
   83790:	f000 001f 	and.w	r0, r0, #31
   83794:	fa02 f000 	lsl.w	r0, r2, r0
   83798:	4201      	tst	r1, r0
		p_pio->PIO_CODR = 1 << (ul_pin & 0x1F);
   8379a:	bf14      	ite	ne
   8379c:	6358      	strne	r0, [r3, #52]	; 0x34
		p_pio->PIO_SODR = 1 << (ul_pin & 0x1F);
   8379e:	6318      	streq	r0, [r3, #48]	; 0x30
}
   837a0:	4770      	bx	lr
   837a2:	bf00      	nop

000837a4 <pio_configure_pin>:
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   837a4:	0943      	lsrs	r3, r0, #5
   837a6:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
	switch (ul_flags & PIO_TYPE_Msk) {
   837aa:	f001 42f0 	and.w	r2, r1, #2013265920	; 0x78000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   837ae:	f203 7307 	addw	r3, r3, #1799	; 0x707
	switch (ul_flags & PIO_TYPE_Msk) {
   837b2:	f1b2 5f20 	cmp.w	r2, #671088640	; 0x28000000
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   837b6:	ea4f 2343 	mov.w	r3, r3, lsl #9
	switch (ul_flags & PIO_TYPE_Msk) {
   837ba:	d035      	beq.n	83828 <pio_configure_pin+0x84>
{
   837bc:	b410      	push	{r4}
	switch (ul_flags & PIO_TYPE_Msk) {
   837be:	d816      	bhi.n	837ee <pio_configure_pin+0x4a>
   837c0:	f1b2 6f00 	cmp.w	r2, #134217728	; 0x8000000
   837c4:	d01b      	beq.n	837fe <pio_configure_pin+0x5a>
   837c6:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
   837ca:	d115      	bne.n	837f8 <pio_configure_pin+0x54>
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   837cc:	f04f 0c01 	mov.w	ip, #1
   837d0:	f000 001f 	and.w	r0, r0, #31
   837d4:	fa0c f200 	lsl.w	r2, ip, r0
	p_pio->PIO_IDR = ul_mask;
   837d8:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   837da:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   837dc:	4310      	orrs	r0, r2
   837de:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   837e0:	ea11 000c 	ands.w	r0, r1, ip
	p_pio->PIO_PDR = ul_mask;
   837e4:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
   837e6:	d01b      	beq.n	83820 <pio_configure_pin+0x7c>
		p_pio->PIO_PUER = ul_mask;
   837e8:	665a      	str	r2, [r3, #100]	; 0x64
}
   837ea:	bc10      	pop	{r4}
   837ec:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
   837ee:	f001 42e0 	and.w	r2, r1, #1879048192	; 0x70000000
   837f2:	f1b2 5f40 	cmp.w	r2, #805306368	; 0x30000000
   837f6:	d02f      	beq.n	83858 <pio_configure_pin+0xb4>
   837f8:	2000      	movs	r0, #0
}
   837fa:	bc10      	pop	{r4}
   837fc:	4770      	bx	lr
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   837fe:	f04f 0c01 	mov.w	ip, #1
   83802:	f000 001f 	and.w	r0, r0, #31
   83806:	fa0c f200 	lsl.w	r2, ip, r0
	p_pio->PIO_IDR = ul_mask;
   8380a:	645a      	str	r2, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   8380c:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   8380e:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   83810:	4020      	ands	r0, r4
   83812:	ea20 0002 	bic.w	r0, r0, r2
   83816:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   83818:	ea11 000c 	ands.w	r0, r1, ip
	p_pio->PIO_PDR = ul_mask;
   8381c:	605a      	str	r2, [r3, #4]
	if (ul_pull_up_enable) {
   8381e:	d1e3      	bne.n	837e8 <pio_configure_pin+0x44>
		p_pio->PIO_PUDR = ul_mask;
   83820:	661a      	str	r2, [r3, #96]	; 0x60
	return 1;
   83822:	4660      	mov	r0, ip
}
   83824:	bc10      	pop	{r4}
   83826:	4770      	bx	lr
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   83828:	2201      	movs	r2, #1
   8382a:	f000 001f 	and.w	r0, r0, #31
   8382e:	4082      	lsls	r2, r0
	if (ul_pull_up_enable) {
   83830:	07c8      	lsls	r0, r1, #31
	p_pio->PIO_IDR = ul_mask;
   83832:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   83834:	bf4c      	ite	mi
   83836:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83838:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   8383a:	f011 0f0a 	tst.w	r1, #10
		p_pio->PIO_IFER = ul_mask;
   8383e:	bf14      	ite	ne
   83840:	621a      	strne	r2, [r3, #32]
		p_pio->PIO_IFDR = ul_mask;
   83842:	625a      	streq	r2, [r3, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   83844:	0788      	lsls	r0, r1, #30
   83846:	d422      	bmi.n	8388e <pio_configure_pin+0xea>
		if (ul_attribute & PIO_DEBOUNCE) {
   83848:	0708      	lsls	r0, r1, #28
			p_pio->PIO_DIFSR = ul_mask;
   8384a:	bf48      	it	mi
   8384c:	f8c3 2084 	strmi.w	r2, [r3, #132]	; 0x84
	return 1;
   83850:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   83852:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   83854:	601a      	str	r2, [r3, #0]
}
   83856:	4770      	bx	lr
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83858:	2201      	movs	r2, #1
   8385a:	f000 001f 	and.w	r0, r0, #31
   8385e:	4082      	lsls	r2, r0
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83860:	f001 5c60 	and.w	ip, r1, #939524096	; 0x38000000
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   83864:	f3c1 0480 	ubfx	r4, r1, #2, #1
	if (ul_pull_up_enable) {
   83868:	07c9      	lsls	r1, r1, #31
	p_pio->PIO_IDR = ul_mask;
   8386a:	645a      	str	r2, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   8386c:	bf4c      	ite	mi
   8386e:	665a      	strmi	r2, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83870:	661a      	strpl	r2, [r3, #96]	; 0x60
	if (ul_multidrive_enable) {
   83872:	b954      	cbnz	r4, 8388a <pio_configure_pin+0xe6>
		p_pio->PIO_MDDR = ul_mask;
   83874:	655a      	str	r2, [r3, #84]	; 0x54
	if (ul_default_level) {
   83876:	f1bc 5f60 	cmp.w	ip, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
   8387a:	bf0c      	ite	eq
   8387c:	631a      	streq	r2, [r3, #48]	; 0x30
		p_pio->PIO_CODR = ul_mask;
   8387e:	635a      	strne	r2, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   83880:	611a      	str	r2, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   83882:	601a      	str	r2, [r3, #0]
	return 1;
   83884:	2001      	movs	r0, #1
}
   83886:	bc10      	pop	{r4}
   83888:	4770      	bx	lr
		p_pio->PIO_MDER = ul_mask;
   8388a:	651a      	str	r2, [r3, #80]	; 0x50
   8388c:	e7f3      	b.n	83876 <pio_configure_pin+0xd2>
		p_pio->PIO_SCIFSR = ul_mask;
   8388e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	return 1;
   83892:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   83894:	615a      	str	r2, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   83896:	601a      	str	r2, [r3, #0]
}
   83898:	4770      	bx	lr
   8389a:	bf00      	nop

0008389c <pio_configure_pin_group>:
{
   8389c:	4603      	mov	r3, r0
	switch (ul_flags & PIO_TYPE_Msk) {
   8389e:	f002 40f0 	and.w	r0, r2, #2013265920	; 0x78000000
   838a2:	f1b0 5f20 	cmp.w	r0, #671088640	; 0x28000000
   838a6:	d029      	beq.n	838fc <pio_configure_pin_group+0x60>
{
   838a8:	b410      	push	{r4}
	switch (ul_flags & PIO_TYPE_Msk) {
   838aa:	d810      	bhi.n	838ce <pio_configure_pin_group+0x32>
   838ac:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
   838b0:	d015      	beq.n	838de <pio_configure_pin_group+0x42>
   838b2:	f1b0 5f80 	cmp.w	r0, #268435456	; 0x10000000
   838b6:	d10f      	bne.n	838d8 <pio_configure_pin_group+0x3c>
	p_pio->PIO_IDR = ul_mask;
   838b8:	6459      	str	r1, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   838ba:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   838bc:	4308      	orrs	r0, r1
   838be:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   838c0:	f012 0001 	ands.w	r0, r2, #1
	p_pio->PIO_PDR = ul_mask;
   838c4:	6059      	str	r1, [r3, #4]
	if (ul_pull_up_enable) {
   838c6:	d015      	beq.n	838f4 <pio_configure_pin_group+0x58>
		p_pio->PIO_PUER = ul_mask;
   838c8:	6659      	str	r1, [r3, #100]	; 0x64
}
   838ca:	bc10      	pop	{r4}
   838cc:	4770      	bx	lr
	switch (ul_flags & PIO_TYPE_Msk) {
   838ce:	f002 40e0 	and.w	r0, r2, #1879048192	; 0x70000000
   838d2:	f1b0 5f40 	cmp.w	r0, #805306368	; 0x30000000
   838d6:	d025      	beq.n	83924 <pio_configure_pin_group+0x88>
   838d8:	2000      	movs	r0, #0
}
   838da:	bc10      	pop	{r4}
   838dc:	4770      	bx	lr
	p_pio->PIO_IDR = ul_mask;
   838de:	6459      	str	r1, [r3, #68]	; 0x44
		ul_sr = p_pio->PIO_ABSR;
   838e0:	6f18      	ldr	r0, [r3, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   838e2:	6f1c      	ldr	r4, [r3, #112]	; 0x70
   838e4:	4020      	ands	r0, r4
   838e6:	ea20 0001 	bic.w	r0, r0, r1
   838ea:	6718      	str	r0, [r3, #112]	; 0x70
	if (ul_pull_up_enable) {
   838ec:	f012 0001 	ands.w	r0, r2, #1
	p_pio->PIO_PDR = ul_mask;
   838f0:	6059      	str	r1, [r3, #4]
	if (ul_pull_up_enable) {
   838f2:	d1e9      	bne.n	838c8 <pio_configure_pin_group+0x2c>
		p_pio->PIO_PUDR = ul_mask;
   838f4:	6619      	str	r1, [r3, #96]	; 0x60
	return 1;
   838f6:	2001      	movs	r0, #1
}
   838f8:	bc10      	pop	{r4}
   838fa:	4770      	bx	lr
	if (ul_pull_up_enable) {
   838fc:	07d0      	lsls	r0, r2, #31
	p_pio->PIO_IDR = ul_mask;
   838fe:	6459      	str	r1, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   83900:	bf4c      	ite	mi
   83902:	6659      	strmi	r1, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83904:	6619      	strpl	r1, [r3, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   83906:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8390a:	bf14      	ite	ne
   8390c:	6219      	strne	r1, [r3, #32]
		p_pio->PIO_IFDR = ul_mask;
   8390e:	6259      	streq	r1, [r3, #36]	; 0x24
	if (ul_attribute & PIO_DEGLITCH) {
   83910:	0790      	lsls	r0, r2, #30
   83912:	d41e      	bmi.n	83952 <pio_configure_pin_group+0xb6>
		if (ul_attribute & PIO_DEBOUNCE) {
   83914:	0710      	lsls	r0, r2, #28
			p_pio->PIO_DIFSR = ul_mask;
   83916:	bf48      	it	mi
   83918:	f8c3 1084 	strmi.w	r1, [r3, #132]	; 0x84
	return 1;
   8391c:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   8391e:	6159      	str	r1, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   83920:	6019      	str	r1, [r3, #0]
}
   83922:	4770      	bx	lr
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   83924:	f002 5060 	and.w	r0, r2, #939524096	; 0x38000000
		pio_set_output(p_pio, ul_mask,
   83928:	f3c2 0480 	ubfx	r4, r2, #2, #1
	if (ul_pull_up_enable) {
   8392c:	07d2      	lsls	r2, r2, #31
	p_pio->PIO_IDR = ul_mask;
   8392e:	6459      	str	r1, [r3, #68]	; 0x44
		p_pio->PIO_PUER = ul_mask;
   83930:	bf4c      	ite	mi
   83932:	6659      	strmi	r1, [r3, #100]	; 0x64
		p_pio->PIO_PUDR = ul_mask;
   83934:	6619      	strpl	r1, [r3, #96]	; 0x60
	if (ul_multidrive_enable) {
   83936:	b954      	cbnz	r4, 8394e <pio_configure_pin_group+0xb2>
		p_pio->PIO_MDDR = ul_mask;
   83938:	6559      	str	r1, [r3, #84]	; 0x54
	if (ul_default_level) {
   8393a:	f1b0 5f60 	cmp.w	r0, #939524096	; 0x38000000
		p_pio->PIO_SODR = ul_mask;
   8393e:	bf0c      	ite	eq
   83940:	6319      	streq	r1, [r3, #48]	; 0x30
		p_pio->PIO_CODR = ul_mask;
   83942:	6359      	strne	r1, [r3, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
   83944:	6119      	str	r1, [r3, #16]
	p_pio->PIO_PER = ul_mask;
   83946:	6019      	str	r1, [r3, #0]
	return 1;
   83948:	2001      	movs	r0, #1
}
   8394a:	bc10      	pop	{r4}
   8394c:	4770      	bx	lr
		p_pio->PIO_MDER = ul_mask;
   8394e:	6519      	str	r1, [r3, #80]	; 0x50
   83950:	e7f3      	b.n	8393a <pio_configure_pin_group+0x9e>
		p_pio->PIO_SCIFSR = ul_mask;
   83952:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
	return 1;
   83956:	2001      	movs	r0, #1
	p_pio->PIO_ODR = ul_mask;
   83958:	6159      	str	r1, [r3, #20]
	p_pio->PIO_PER = ul_mask;
   8395a:	6019      	str	r1, [r3, #0]
}
   8395c:	4770      	bx	lr
   8395e:	bf00      	nop

00083960 <Dummy_Handler>:
/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
	while (1) {
   83960:	e7fe      	b.n	83960 <Dummy_Handler>
   83962:	bf00      	nop

00083964 <Reset_Handler>:

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   83964:	4917      	ldr	r1, [pc, #92]	; (839c4 <Reset_Handler+0x60>)
   83966:	4818      	ldr	r0, [pc, #96]	; (839c8 <Reset_Handler+0x64>)
{
   83968:	b508      	push	{r3, lr}
	if (pSrc != pDest) {
   8396a:	4281      	cmp	r1, r0
   8396c:	d009      	beq.n	83982 <Reset_Handler+0x1e>
		for (; pDest < &_erelocate;) {
   8396e:	4a17      	ldr	r2, [pc, #92]	; (839cc <Reset_Handler+0x68>)
   83970:	4290      	cmp	r0, r2
   83972:	d206      	bcs.n	83982 <Reset_Handler+0x1e>
			*pDest++ = *pSrc++;
   83974:	3a01      	subs	r2, #1
   83976:	1a12      	subs	r2, r2, r0
   83978:	f022 0203 	bic.w	r2, r2, #3
   8397c:	4b14      	ldr	r3, [pc, #80]	; (839d0 <Reset_Handler+0x6c>)
   8397e:	3204      	adds	r2, #4
   83980:	4798      	blx	r3
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   83982:	4814      	ldr	r0, [pc, #80]	; (839d4 <Reset_Handler+0x70>)
   83984:	4a14      	ldr	r2, [pc, #80]	; (839d8 <Reset_Handler+0x74>)
   83986:	4290      	cmp	r0, r2
   83988:	d207      	bcs.n	8399a <Reset_Handler+0x36>
		*pDest++ = 0;
   8398a:	3a01      	subs	r2, #1
   8398c:	1a12      	subs	r2, r2, r0
   8398e:	f022 0203 	bic.w	r2, r2, #3
   83992:	2100      	movs	r1, #0
   83994:	4b11      	ldr	r3, [pc, #68]	; (839dc <Reset_Handler+0x78>)
   83996:	3204      	adds	r2, #4
   83998:	4798      	blx	r3
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8399a:	4b11      	ldr	r3, [pc, #68]	; (839e0 <Reset_Handler+0x7c>)
   8399c:	4911      	ldr	r1, [pc, #68]	; (839e4 <Reset_Handler+0x80>)
   8399e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   839a2:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   839a6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   839aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   839ae:	608a      	str	r2, [r1, #8]
	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   839b0:	d203      	bcs.n	839ba <Reset_Handler+0x56>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   839b2:	688b      	ldr	r3, [r1, #8]
   839b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
   839b8:	608b      	str	r3, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   839ba:	4b0b      	ldr	r3, [pc, #44]	; (839e8 <Reset_Handler+0x84>)
   839bc:	4798      	blx	r3

	/* Branch to main function */
	main();
   839be:	4b0b      	ldr	r3, [pc, #44]	; (839ec <Reset_Handler+0x88>)
   839c0:	4798      	blx	r3

	/* Infinite loop */
	while (1);
   839c2:	e7fe      	b.n	839c2 <Reset_Handler+0x5e>
   839c4:	0008cf84 	.word	0x0008cf84
   839c8:	20070000 	.word	0x20070000
   839cc:	200714e0 	.word	0x200714e0
   839d0:	00085e0d 	.word	0x00085e0d
   839d4:	200714e0 	.word	0x200714e0
   839d8:	20073358 	.word	0x20073358
   839dc:	00085ef9 	.word	0x00085ef9
   839e0:	00080000 	.word	0x00080000
   839e4:	e000ed00 	.word	0xe000ed00
   839e8:	00085dc5 	.word	0x00085dc5
   839ec:	0008059d 	.word	0x0008059d

000839f0 <twi_set_speed.part.0>:
	if (ul_speed > I2C_FAST_MODE_SPEED) {
		return FAIL;
	}

	/* Low level time not less than 1.3us of I2C Fast Mode. */
	if (ul_speed > LOW_LEVEL_TIME_LIMIT) {
   839f0:	4b26      	ldr	r3, [pc, #152]	; (83a8c <twi_set_speed.part.0+0x9c>)
   839f2:	4299      	cmp	r1, r3
   839f4:	d92b      	bls.n	83a4e <twi_set_speed.part.0+0x5e>
uint32_t twi_set_speed(Twi *p_twi, uint32_t ul_speed, uint32_t ul_mck)
   839f6:	b410      	push	{r4}
		/* Low level of time fixed for 1.3us. */
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   839f8:	4c25      	ldr	r4, [pc, #148]	; (83a90 <twi_set_speed.part.0+0xa0>)
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   839fa:	4b26      	ldr	r3, [pc, #152]	; (83a94 <twi_set_speed.part.0+0xa4>)
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   839fc:	440c      	add	r4, r1
   839fe:	00a1      	lsls	r1, r4, #2
   83a00:	fbb2 f1f1 	udiv	r1, r2, r1
		cldiv = ul_mck / (LOW_LEVEL_TIME_LIMIT * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   83a04:	fba3 2302 	umull	r2, r3, r3, r2
   83a08:	0b9b      	lsrs	r3, r3, #14
   83a0a:	3b04      	subs	r3, #4
		
		/* cldiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83a0c:	2bff      	cmp	r3, #255	; 0xff
	uint32_t ckdiv = 0;
   83a0e:	f04f 0200 	mov.w	r2, #0
		chdiv = ul_mck / ((ul_speed + (ul_speed - LOW_LEVEL_TIME_LIMIT)) * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   83a12:	f1a1 0104 	sub.w	r1, r1, #4
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83a16:	d935      	bls.n	83a84 <twi_set_speed.part.0+0x94>
			/* Increase clock divider */
			ckdiv++;
			/* Divide cldiv value */
			cldiv /= TWI_CLK_DIVIDER;
   83a18:	085b      	lsrs	r3, r3, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83a1a:	2bff      	cmp	r3, #255	; 0xff
			ckdiv++;
   83a1c:	f102 0201 	add.w	r2, r2, #1
		while ((cldiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83a20:	d910      	bls.n	83a44 <twi_set_speed.part.0+0x54>
   83a22:	2a07      	cmp	r2, #7
   83a24:	d1f8      	bne.n	83a18 <twi_set_speed.part.0+0x28>
		}
		/* chdiv must fit in 8 bits, ckdiv must fit in 3 bits */
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83a26:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
			chdiv /= TWI_CLK_DIVIDER;
		}

		/* set clock waveform generator register */
		p_twi->TWI_CWGR =
				TWI_CWGR_CLDIV(cldiv) | TWI_CWGR_CHDIV(chdiv) |
   83a2a:	0209      	lsls	r1, r1, #8
   83a2c:	b2db      	uxtb	r3, r3
   83a2e:	b289      	uxth	r1, r1
   83a30:	4313      	orrs	r3, r2
   83a32:	430b      	orrs	r3, r1
		p_twi->TWI_CWGR =
   83a34:	6103      	str	r3, [r0, #16]
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
				TWI_CWGR_CKDIV(ckdiv);
	}

	return PASS;
}
   83a36:	bc10      	pop	{r4}
   83a38:	2000      	movs	r0, #0
   83a3a:	4770      	bx	lr
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83a3c:	2a07      	cmp	r2, #7
   83a3e:	d0f2      	beq.n	83a26 <twi_set_speed.part.0+0x36>
			chdiv /= TWI_CLK_DIVIDER;
   83a40:	0849      	lsrs	r1, r1, #1
			ckdiv++;
   83a42:	3201      	adds	r2, #1
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83a44:	29ff      	cmp	r1, #255	; 0xff
				TWI_CWGR_CKDIV(ckdiv);		
   83a46:	bf98      	it	ls
   83a48:	0412      	lslls	r2, r2, #16
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83a4a:	d8f7      	bhi.n	83a3c <twi_set_speed.part.0+0x4c>
   83a4c:	e7ed      	b.n	83a2a <twi_set_speed.part.0+0x3a>
		c_lh_div = ul_mck / (ul_speed * TWI_CLK_DIVIDER) - TWI_CLK_CALC_ARGU;
   83a4e:	004b      	lsls	r3, r1, #1
   83a50:	fbb2 f3f3 	udiv	r3, r2, r3
   83a54:	3b04      	subs	r3, #4
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83a56:	2bff      	cmp	r3, #255	; 0xff
	uint32_t ckdiv = 0;
   83a58:	f04f 0200 	mov.w	r2, #0
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83a5c:	d908      	bls.n	83a70 <twi_set_speed.part.0+0x80>
			c_lh_div /= TWI_CLK_DIVIDER;
   83a5e:	085b      	lsrs	r3, r3, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83a60:	2bff      	cmp	r3, #255	; 0xff
			ckdiv++;
   83a62:	f102 0201 	add.w	r2, r2, #1
		while ((c_lh_div > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83a66:	d90b      	bls.n	83a80 <twi_set_speed.part.0+0x90>
   83a68:	2a07      	cmp	r2, #7
   83a6a:	d1f8      	bne.n	83a5e <twi_set_speed.part.0+0x6e>
   83a6c:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
				TWI_CWGR_CLDIV(c_lh_div) | TWI_CWGR_CHDIV(c_lh_div) |
   83a70:	b2d9      	uxtb	r1, r3
   83a72:	021b      	lsls	r3, r3, #8
   83a74:	430a      	orrs	r2, r1
   83a76:	b29b      	uxth	r3, r3
   83a78:	4313      	orrs	r3, r2
		p_twi->TWI_CWGR =
   83a7a:	6103      	str	r3, [r0, #16]
}
   83a7c:	2000      	movs	r0, #0
   83a7e:	4770      	bx	lr
				TWI_CWGR_CKDIV(ckdiv);
   83a80:	0412      	lsls	r2, r2, #16
   83a82:	e7f5      	b.n	83a70 <twi_set_speed.part.0+0x80>
		while ((chdiv > TWI_CLK_DIV_MAX) && (ckdiv < TWI_CLK_DIV_MIN)) {
   83a84:	29ff      	cmp	r1, #255	; 0xff
   83a86:	d8db      	bhi.n	83a40 <twi_set_speed.part.0+0x50>
   83a88:	e7cf      	b.n	83a2a <twi_set_speed.part.0+0x3a>
   83a8a:	bf00      	nop
   83a8c:	0005dc00 	.word	0x0005dc00
   83a90:	7ffd1200 	.word	0x7ffd1200
   83a94:	057619f1 	.word	0x057619f1

00083a98 <twi_master_init>:
{
   83a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	p_twi->TWI_IDR = ~0UL;
   83a9a:	f04f 3eff 	mov.w	lr, #4294967295
 * \param p_twi Pointer to a TWI instance.
 */
void twi_reset(Twi *p_twi)
{
	/* Set SWRST bit to reset TWI peripheral */
	p_twi->TWI_CR = TWI_CR_SWRST;
   83a9e:	f04f 0c80 	mov.w	ip, #128	; 0x80
	p_twi->TWI_CR = TWI_CR_MSDIS;
   83aa2:	2708      	movs	r7, #8
	p_twi->TWI_CR = TWI_CR_SVDIS;
   83aa4:	2620      	movs	r6, #32
	p_twi->TWI_CR = TWI_CR_MSEN;
   83aa6:	2204      	movs	r2, #4
{
   83aa8:	460d      	mov	r5, r1
	p_twi->TWI_IDR = ~0UL;
   83aaa:	f8c0 e028 	str.w	lr, [r0, #40]	; 0x28
	p_twi->TWI_SR;
   83aae:	6a01      	ldr	r1, [r0, #32]
	p_twi->TWI_CR = TWI_CR_SWRST;
   83ab0:	f8c0 c000 	str.w	ip, [r0]
	p_twi->TWI_RHR;
   83ab4:	6b01      	ldr	r1, [r0, #48]	; 0x30
	p_twi->TWI_CR = TWI_CR_MSDIS;
   83ab6:	6007      	str	r7, [r0, #0]
	p_twi->TWI_CR = TWI_CR_SVDIS;
   83ab8:	6006      	str	r6, [r0, #0]
	p_twi->TWI_CR = TWI_CR_MSEN;
   83aba:	6002      	str	r2, [r0, #0]
	if (ul_speed > I2C_FAST_MODE_SPEED) {
   83abc:	4b0a      	ldr	r3, [pc, #40]	; (83ae8 <twi_master_init+0x50>)
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   83abe:	6869      	ldr	r1, [r5, #4]
{
   83ac0:	4604      	mov	r4, r0
	if (ul_speed > I2C_FAST_MODE_SPEED) {
   83ac2:	4299      	cmp	r1, r3
   83ac4:	d80d      	bhi.n	83ae2 <twi_master_init+0x4a>
   83ac6:	682a      	ldr	r2, [r5, #0]
   83ac8:	4b08      	ldr	r3, [pc, #32]	; (83aec <twi_master_init+0x54>)
   83aca:	4798      	blx	r3
	if (twi_set_speed(p_twi, p_opt->speed, p_opt->master_clk) == FAIL) {
   83acc:	f1a0 0001 	sub.w	r0, r0, #1
   83ad0:	fab0 f080 	clz	r0, r0
   83ad4:	0940      	lsrs	r0, r0, #5
	if (p_opt->smbus == 1) {
   83ad6:	7a6b      	ldrb	r3, [r5, #9]
   83ad8:	2b01      	cmp	r3, #1
		p_twi->TWI_CR = TWI_CR_QUICK;
   83ada:	bf04      	itt	eq
   83adc:	2340      	moveq	r3, #64	; 0x40
   83ade:	6023      	streq	r3, [r4, #0]
}
   83ae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		status = TWI_INVALID_ARGUMENT;
   83ae2:	2001      	movs	r0, #1
   83ae4:	e7f7      	b.n	83ad6 <twi_master_init+0x3e>
   83ae6:	bf00      	nop
   83ae8:	00061a80 	.word	0x00061a80
   83aec:	000839f1 	.word	0x000839f1

00083af0 <twi_master_read>:
{
   83af0:	4684      	mov	ip, r0
	uint32_t cnt = p_packet->length;
   83af2:	68c8      	ldr	r0, [r1, #12]
	if (cnt == 0) {
   83af4:	2800      	cmp	r0, #0
   83af6:	d061      	beq.n	83bbc <twi_master_read+0xcc>
{
   83af8:	b470      	push	{r4, r5, r6}
	p_twi->TWI_MMR = 0;
   83afa:	2500      	movs	r5, #0
	uint8_t *buffer = p_packet->buffer;
   83afc:	688c      	ldr	r4, [r1, #8]
	p_twi->TWI_MMR = 0;
   83afe:	f8cc 5004 	str.w	r5, [ip, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   83b02:	7c0b      	ldrb	r3, [r1, #16]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   83b04:	684a      	ldr	r2, [r1, #4]
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   83b06:	041b      	lsls	r3, r3, #16
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   83b08:	0212      	lsls	r2, r2, #8
   83b0a:	f402 7240 	and.w	r2, r2, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_MREAD | TWI_MMR_DADR(p_packet->chip) |
   83b0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
   83b12:	4313      	orrs	r3, r2
   83b14:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
   83b18:	f8cc 3004 	str.w	r3, [ip, #4]
	p_twi->TWI_IADR = 0;
   83b1c:	f8cc 500c 	str.w	r5, [ip, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   83b20:	684a      	ldr	r2, [r1, #4]
	if (len == 0)
   83b22:	2a00      	cmp	r2, #0
   83b24:	d03a      	beq.n	83b9c <twi_master_read+0xac>
	if (len > 1) {
   83b26:	2a01      	cmp	r2, #1
	val = addr[0];
   83b28:	780b      	ldrb	r3, [r1, #0]
	if (len > 1) {
   83b2a:	dd02      	ble.n	83b32 <twi_master_read+0x42>
		val |= addr[1];
   83b2c:	880b      	ldrh	r3, [r1, #0]
   83b2e:	ba5b      	rev16	r3, r3
   83b30:	b29b      	uxth	r3, r3
	if (len > 2) {
   83b32:	2a02      	cmp	r2, #2
   83b34:	dd02      	ble.n	83b3c <twi_master_read+0x4c>
		val |= addr[2];
   83b36:	788a      	ldrb	r2, [r1, #2]
   83b38:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	if (cnt == 1) {
   83b3c:	2801      	cmp	r0, #1
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   83b3e:	f8cc 300c 	str.w	r3, [ip, #12]
		p_twi->TWI_CR = TWI_CR_START | TWI_CR_STOP;
   83b42:	bf0b      	itete	eq
   83b44:	2303      	moveq	r3, #3
		p_twi->TWI_CR = TWI_CR_START;
   83b46:	2301      	movne	r3, #1
		stop_sent = 1;
   83b48:	4605      	moveq	r5, r0
		stop_sent = 0;
   83b4a:	2500      	movne	r5, #0
   83b4c:	f241 3288 	movw	r2, #5000	; 0x1388
			p_twi->TWI_CR = TWI_CR_STOP;
   83b50:	2602      	movs	r6, #2
		p_twi->TWI_CR = TWI_CR_START;
   83b52:	f8cc 3000 	str.w	r3, [ip]
		status = p_twi->TWI_SR;
   83b56:	f8dc 3020 	ldr.w	r3, [ip, #32]
		if (status & TWI_SR_NACK) {
   83b5a:	05d9      	lsls	r1, r3, #23
   83b5c:	d413      	bmi.n	83b86 <twi_master_read+0x96>
		if (!timeout--) {
   83b5e:	1e51      	subs	r1, r2, #1
   83b60:	b372      	cbz	r2, 83bc0 <twi_master_read+0xd0>
		if (cnt == 1  && !stop_sent) {
   83b62:	2801      	cmp	r0, #1
   83b64:	d01c      	beq.n	83ba0 <twi_master_read+0xb0>
		if (!(status & TWI_SR_RXRDY)) {
   83b66:	079b      	lsls	r3, r3, #30
   83b68:	d521      	bpl.n	83bae <twi_master_read+0xbe>
		*buffer++ = p_twi->TWI_RHR;
   83b6a:	4623      	mov	r3, r4
   83b6c:	f8dc 2030 	ldr.w	r2, [ip, #48]	; 0x30
	while (cnt > 0) {
   83b70:	3801      	subs	r0, #1
		*buffer++ = p_twi->TWI_RHR;
   83b72:	f803 2b01 	strb.w	r2, [r3], #1
	while (cnt > 0) {
   83b76:	d009      	beq.n	83b8c <twi_master_read+0x9c>
		timeout = TWI_TIMEOUT;
   83b78:	f241 3288 	movw	r2, #5000	; 0x1388
   83b7c:	461c      	mov	r4, r3
		status = p_twi->TWI_SR;
   83b7e:	f8dc 3020 	ldr.w	r3, [ip, #32]
		if (status & TWI_SR_NACK) {
   83b82:	05d9      	lsls	r1, r3, #23
   83b84:	d5eb      	bpl.n	83b5e <twi_master_read+0x6e>
			return TWI_RECEIVE_NACK;
   83b86:	2005      	movs	r0, #5
}
   83b88:	bc70      	pop	{r4, r5, r6}
   83b8a:	4770      	bx	lr
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   83b8c:	f8dc 3020 	ldr.w	r3, [ip, #32]
   83b90:	07da      	lsls	r2, r3, #31
   83b92:	d5fb      	bpl.n	83b8c <twi_master_read+0x9c>
}
   83b94:	bc70      	pop	{r4, r5, r6}
	p_twi->TWI_SR;
   83b96:	f8dc 3020 	ldr.w	r3, [ip, #32]
}
   83b9a:	4770      	bx	lr
		return 0;
   83b9c:	4613      	mov	r3, r2
   83b9e:	e7cd      	b.n	83b3c <twi_master_read+0x4c>
		if (cnt == 1  && !stop_sent) {
   83ba0:	b90d      	cbnz	r5, 83ba6 <twi_master_read+0xb6>
			p_twi->TWI_CR = TWI_CR_STOP;
   83ba2:	f8cc 6000 	str.w	r6, [ip]
		if (!(status & TWI_SR_RXRDY)) {
   83ba6:	079b      	lsls	r3, r3, #30
   83ba8:	d505      	bpl.n	83bb6 <twi_master_read+0xc6>
   83baa:	2501      	movs	r5, #1
   83bac:	e7dd      	b.n	83b6a <twi_master_read+0x7a>
   83bae:	4623      	mov	r3, r4
   83bb0:	460a      	mov	r2, r1
		timeout = TWI_TIMEOUT;
   83bb2:	461c      	mov	r4, r3
   83bb4:	e7e3      	b.n	83b7e <twi_master_read+0x8e>
		if (!(status & TWI_SR_RXRDY)) {
   83bb6:	460a      	mov	r2, r1
   83bb8:	2501      	movs	r5, #1
   83bba:	e7cc      	b.n	83b56 <twi_master_read+0x66>
		return TWI_INVALID_ARGUMENT;
   83bbc:	2001      	movs	r0, #1
}
   83bbe:	4770      	bx	lr
			return TWI_ERROR_TIMEOUT;
   83bc0:	2009      	movs	r0, #9
}
   83bc2:	bc70      	pop	{r4, r5, r6}
   83bc4:	4770      	bx	lr
   83bc6:	bf00      	nop

00083bc8 <twi_master_write>:
	uint32_t cnt = p_packet->length;
   83bc8:	68ca      	ldr	r2, [r1, #12]
	if (cnt == 0) {
   83bca:	2a00      	cmp	r2, #0
   83bcc:	d03c      	beq.n	83c48 <twi_master_write+0x80>
{
   83bce:	b430      	push	{r4, r5}
   83bd0:	4603      	mov	r3, r0
	p_twi->TWI_MMR = 0;
   83bd2:	2500      	movs	r5, #0
	uint8_t *buffer = p_packet->buffer;
   83bd4:	6888      	ldr	r0, [r1, #8]
	p_twi->TWI_MMR = 0;
   83bd6:	605d      	str	r5, [r3, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   83bd8:	7c0c      	ldrb	r4, [r1, #16]
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   83bda:	f8d1 c004 	ldr.w	ip, [r1, #4]
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   83bde:	0424      	lsls	r4, r4, #16
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   83be0:	ea4f 2c0c 	mov.w	ip, ip, lsl #8
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   83be4:	f404 04fe 	and.w	r4, r4, #8323072	; 0x7f0000
			((p_packet->addr_length << TWI_MMR_IADRSZ_Pos) &
   83be8:	f40c 7c40 	and.w	ip, ip, #768	; 0x300
	p_twi->TWI_MMR = TWI_MMR_DADR(p_packet->chip) |
   83bec:	ea44 040c 	orr.w	r4, r4, ip
   83bf0:	605c      	str	r4, [r3, #4]
	p_twi->TWI_IADR = 0;
   83bf2:	60dd      	str	r5, [r3, #12]
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   83bf4:	684d      	ldr	r5, [r1, #4]
	if (len == 0)
   83bf6:	b32d      	cbz	r5, 83c44 <twi_master_write+0x7c>
	if (len > 1) {
   83bf8:	2d01      	cmp	r5, #1
	val = addr[0];
   83bfa:	780c      	ldrb	r4, [r1, #0]
	if (len > 1) {
   83bfc:	dd02      	ble.n	83c04 <twi_master_write+0x3c>
		val |= addr[1];
   83bfe:	880c      	ldrh	r4, [r1, #0]
   83c00:	ba64      	rev16	r4, r4
   83c02:	b2a4      	uxth	r4, r4
	if (len > 2) {
   83c04:	2d02      	cmp	r5, #2
   83c06:	dd02      	ble.n	83c0e <twi_master_write+0x46>
		val |= addr[2];
   83c08:	7889      	ldrb	r1, [r1, #2]
   83c0a:	ea41 2404 	orr.w	r4, r1, r4, lsl #8
	p_twi->TWI_IADR = twi_mk_addr(p_packet->addr, p_packet->addr_length);
   83c0e:	60dc      	str	r4, [r3, #12]
	while (cnt > 0) {
   83c10:	1881      	adds	r1, r0, r2
   83c12:	e007      	b.n	83c24 <twi_master_write+0x5c>
		status = p_twi->TWI_SR;
   83c14:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   83c16:	05d4      	lsls	r4, r2, #23
   83c18:	d411      	bmi.n	83c3e <twi_master_write+0x76>
		if (!(status & TWI_SR_TXRDY)) {
   83c1a:	0755      	lsls	r5, r2, #29
		p_twi->TWI_THR = *buffer++;
   83c1c:	bf44      	itt	mi
   83c1e:	f810 2b01 	ldrbmi.w	r2, [r0], #1
   83c22:	635a      	strmi	r2, [r3, #52]	; 0x34
	while (cnt > 0) {
   83c24:	4288      	cmp	r0, r1
   83c26:	d1f5      	bne.n	83c14 <twi_master_write+0x4c>
   83c28:	f241 3189 	movw	r1, #5001	; 0x1389
   83c2c:	e003      	b.n	83c36 <twi_master_write+0x6e>
		if (status & TWI_SR_TXRDY) {
   83c2e:	0754      	lsls	r4, r2, #29
   83c30:	d40c      	bmi.n	83c4c <twi_master_write+0x84>
		if (timeout++ > TWI_TIMEOUT)
   83c32:	3901      	subs	r1, #1
   83c34:	d011      	beq.n	83c5a <twi_master_write+0x92>
		status = p_twi->TWI_SR;
   83c36:	6a1a      	ldr	r2, [r3, #32]
		if (status & TWI_SR_NACK) {
   83c38:	f412 7080 	ands.w	r0, r2, #256	; 0x100
   83c3c:	d0f7      	beq.n	83c2e <twi_master_write+0x66>
			return TWI_RECEIVE_NACK;
   83c3e:	2005      	movs	r0, #5
}
   83c40:	bc30      	pop	{r4, r5}
   83c42:	4770      	bx	lr
		return 0;
   83c44:	462c      	mov	r4, r5
   83c46:	e7e2      	b.n	83c0e <twi_master_write+0x46>
		return TWI_INVALID_ARGUMENT;
   83c48:	2001      	movs	r0, #1
}
   83c4a:	4770      	bx	lr
	p_twi->TWI_CR = TWI_CR_STOP;
   83c4c:	2202      	movs	r2, #2
   83c4e:	601a      	str	r2, [r3, #0]
	while (!(p_twi->TWI_SR & TWI_SR_TXCOMP)) {
   83c50:	6a1a      	ldr	r2, [r3, #32]
   83c52:	07d2      	lsls	r2, r2, #31
   83c54:	d5fc      	bpl.n	83c50 <twi_master_write+0x88>
}
   83c56:	bc30      	pop	{r4, r5}
   83c58:	4770      	bx	lr
			return TWI_ERROR_TIMEOUT;
   83c5a:	2009      	movs	r0, #9
   83c5c:	e7f0      	b.n	83c40 <twi_master_write+0x78>
   83c5e:	bf00      	nop

00083c60 <pmc_is_wakeup_clocks_restored>:
	}
}

bool pmc_is_wakeup_clocks_restored(void)
{
	return !b_is_sleep_clock_used;
   83c60:	4b02      	ldr	r3, [pc, #8]	; (83c6c <pmc_is_wakeup_clocks_restored+0xc>)
   83c62:	7818      	ldrb	r0, [r3, #0]
}
   83c64:	f080 0001 	eor.w	r0, r0, #1
   83c68:	4770      	bx	lr
   83c6a:	bf00      	nop
   83c6c:	200721b9 	.word	0x200721b9

00083c70 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   83c70:	4a0c      	ldr	r2, [pc, #48]	; (83ca4 <_sbrk+0x34>)
{
   83c72:	4603      	mov	r3, r0
	if (heap == NULL) {
   83c74:	6810      	ldr	r0, [r2, #0]
	int ramend = (int)&__ram_end__;
   83c76:	490c      	ldr	r1, [pc, #48]	; (83ca8 <_sbrk+0x38>)
	if (heap == NULL) {
   83c78:	b130      	cbz	r0, 83c88 <_sbrk+0x18>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
   83c7a:	4403      	add	r3, r0
   83c7c:	428b      	cmp	r3, r1
		return (caddr_t) -1;	
   83c7e:	bfcc      	ite	gt
   83c80:	f04f 30ff 	movgt.w	r0, #4294967295
	}

	heap += incr;
   83c84:	6013      	strle	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
   83c86:	4770      	bx	lr
{
   83c88:	b410      	push	{r4}
		heap = (unsigned char *)&_end;
   83c8a:	4c08      	ldr	r4, [pc, #32]	; (83cac <_sbrk+0x3c>)
	if (((int)prev_heap + incr) > ramend) {
   83c8c:	4423      	add	r3, r4
   83c8e:	428b      	cmp	r3, r1
		heap = (unsigned char *)&_end;
   83c90:	6014      	str	r4, [r2, #0]
	heap += incr;
   83c92:	bfd8      	it	le
   83c94:	6013      	strle	r3, [r2, #0]
		heap = (unsigned char *)&_end;
   83c96:	4620      	mov	r0, r4
		return (caddr_t) -1;	
   83c98:	bfc8      	it	gt
   83c9a:	f04f 30ff 	movgt.w	r0, #4294967295
}
   83c9e:	bc10      	pop	{r4}
   83ca0:	4770      	bx	lr
   83ca2:	bf00      	nop
   83ca4:	200721bc 	.word	0x200721bc
   83ca8:	20087ffc 	.word	0x20087ffc
   83cac:	20074858 	.word	0x20074858

00083cb0 <_close>:
}

extern int _close(int file)
{
	return -1;
}
   83cb0:	f04f 30ff 	mov.w	r0, #4294967295
   83cb4:	4770      	bx	lr
   83cb6:	bf00      	nop

00083cb8 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   83cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000

	return 0;
}
   83cbc:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
   83cbe:	604b      	str	r3, [r1, #4]
}
   83cc0:	4770      	bx	lr
   83cc2:	bf00      	nop

00083cc4 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   83cc4:	2001      	movs	r0, #1
   83cc6:	4770      	bx	lr

00083cc8 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   83cc8:	2000      	movs	r0, #0
   83cca:	4770      	bx	lr

00083ccc <_exit>:

extern void _exit(int status)
{
	asm("BKPT #0");
   83ccc:	be00      	bkpt	0x0000
	for (;;);
   83cce:	e7fe      	b.n	83cce <_exit+0x2>

00083cd0 <_kill>:
}

extern void _kill(int pid, int sig)
{
	return;
}
   83cd0:	4770      	bx	lr
   83cd2:	bf00      	nop

00083cd4 <_getpid>:

extern int _getpid(void)
{
	return -1;
}
   83cd4:	f04f 30ff 	mov.w	r0, #4294967295
   83cd8:	4770      	bx	lr
   83cda:	bf00      	nop

00083cdc <udd_ep_finish_job>:
}


static void udd_ep_finish_job(udd_ep_job_t * ptr_job, bool b_abort, uint8_t ep_num)
{
	if (ptr_job->busy == false) {
   83cdc:	f890 c014 	ldrb.w	ip, [r0, #20]
{
   83ce0:	4603      	mov	r3, r0
	if (ptr_job->busy == false) {
   83ce2:	f01c 0f01 	tst.w	ip, #1
   83ce6:	d014      	beq.n	83d12 <udd_ep_finish_job+0x36>
{
   83ce8:	b410      	push	{r4}
		return; // No on-going job
	}
	dbg_print("(JobE%x:%d) ", (ptr_job-udd_ep_job)+1, b_abort);
	ptr_job->busy = false;
	if (NULL == ptr_job->call_trans) {
   83cea:	6804      	ldr	r4, [r0, #0]
	ptr_job->busy = false;
   83cec:	f36f 0c00 	bfc	ip, #0, #1
   83cf0:	f880 c014 	strb.w	ip, [r0, #20]
	if (NULL == ptr_job->call_trans) {
   83cf4:	b15c      	cbz	r4, 83d0e <udd_ep_finish_job+0x32>
		return; // No callback linked to job
	}
	if (Is_udd_endpoint_in(ep_num)) {
		ep_num |= USB_EP_DIR_IN;
   83cf6:	4608      	mov	r0, r1
	if (Is_udd_endpoint_in(ep_num)) {
   83cf8:	4906      	ldr	r1, [pc, #24]	; (83d14 <udd_ep_finish_job+0x38>)
   83cfa:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
   83cfe:	05c9      	lsls	r1, r1, #23
		ep_num |= USB_EP_DIR_IN;
   83d00:	bf48      	it	mi
   83d02:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   83d06:	6899      	ldr	r1, [r3, #8]
   83d08:	4623      	mov	r3, r4
			UDD_EP_TRANSFER_OK, ptr_job->buf_size, ep_num);
}
   83d0a:	bc10      	pop	{r4}
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   83d0c:	4718      	bx	r3
}
   83d0e:	bc10      	pop	{r4}
   83d10:	4770      	bx	lr
   83d12:	4770      	bx	lr
   83d14:	400ac100 	.word	0x400ac100

00083d18 <udd_ep_trans_done>:

#ifdef UDD_EP_DMA_SUPPORTED
static void udd_ep_trans_done(udd_ep_id_t ep)
{
   83d18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	irqflags_t flags;

	// Get job corresponding at endpoint
	ptr_job = &udd_ep_job[ep - 1];

	if (!ptr_job->busy) {
   83d1c:	4d5e      	ldr	r5, [pc, #376]	; (83e98 <udd_ep_trans_done+0x180>)
	ptr_job = &udd_ep_job[ep - 1];
   83d1e:	f100 3eff 	add.w	lr, r0, #4294967295
	if (!ptr_job->busy) {
   83d22:	eb0e 034e 	add.w	r3, lr, lr, lsl #1
   83d26:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   83d2a:	7d19      	ldrb	r1, [r3, #20]
   83d2c:	07ca      	lsls	r2, r1, #31
   83d2e:	d57c      	bpl.n	83e2a <udd_ep_trans_done+0x112>
		return; // No job is running, then ignore it (system error)
	}

	if (ptr_job->buf_cnt != ptr_job->buf_size) {
   83d30:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
   83d34:	42a1      	cmp	r1, r4
   83d36:	4602      	mov	r2, r0
   83d38:	ea4f 004e 	mov.w	r0, lr, lsl #1
   83d3c:	d04c      	beq.n	83dd8 <udd_ep_trans_done+0xc0>
		// Need to send or receiv other data
		next_trans = ptr_job->buf_size - ptr_job->buf_cnt;
   83d3e:	1a64      	subs	r4, r4, r1

		if (UDD_ENDPOINT_MAX_TRANS < next_trans) {
   83d40:	f5b4 3f80 	cmp.w	r4, #65536	; 0x10000
   83d44:	d818      	bhi.n	83d78 <udd_ep_trans_done+0x60>
			// Set 0 to tranfer the maximum
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(0);
		} else {
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
		}
		if (Is_udd_endpoint_in(ep)) {
   83d46:	4f55      	ldr	r7, [pc, #340]	; (83e9c <udd_ep_trans_done+0x184>)
			udd_dma_ctrl = UOTGHS_DEVDMACONTROL_BUFF_LENGTH(next_trans);
   83d48:	0426      	lsls	r6, r4, #16
		if (Is_udd_endpoint_in(ep)) {
   83d4a:	f857 c022 	ldr.w	ip, [r7, r2, lsl #2]
   83d4e:	f41c 7f80 	tst.w	ip, #256	; 0x100
   83d52:	d06c      	beq.n	83e2e <udd_ep_trans_done+0x116>
			if (0 != (next_trans % udd_get_endpoint_size(ep))) {
   83d54:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   83d58:	f3c7 1c02 	ubfx	ip, r7, #4, #3
   83d5c:	2708      	movs	r7, #8
   83d5e:	fa07 f70c 	lsl.w	r7, r7, ip
   83d62:	3f01      	subs	r7, #1
   83d64:	4227      	tst	r7, r4
   83d66:	f000 8093 	beq.w	83e90 <udd_ep_trans_done+0x178>
				// Enable short packet option
				// else the DMA transfer is accepted
				// and interrupt DMA valid but nothing is sent.
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_B_EN;
				// No need to request another ZLP
				ptr_job->b_shortpacket = false;
   83d6a:	7d1f      	ldrb	r7, [r3, #20]
			}
		}

		// Start USB DMA to fill or read fifo of the selected endpoint
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   83d6c:	f046 0629 	orr.w	r6, r6, #41	; 0x29
				ptr_job->b_shortpacket = false;
   83d70:	f36f 0741 	bfc	r7, #1, #1
   83d74:	751f      	strb	r7, [r3, #20]
   83d76:	e009      	b.n	83d8c <udd_ep_trans_done+0x74>
		if (Is_udd_endpoint_in(ep)) {
   83d78:	4b48      	ldr	r3, [pc, #288]	; (83e9c <udd_ep_trans_done+0x184>)
   83d7a:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
   83d7e:	05e4      	lsls	r4, r4, #23
   83d80:	d55e      	bpl.n	83e40 <udd_ep_trans_done+0x128>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   83d82:	2621      	movs	r6, #33	; 0x21
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   83d84:	f44f 3480 	mov.w	r4, #65536	; 0x10000
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   83d88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
		udd_endpoint_dma_set_addr(ep, (uint32_t) & ptr_job->buf[ptr_job->buf_cnt]);
   83d8c:	eb00 0c0e 	add.w	ip, r0, lr
   83d90:	eb05 0ccc 	add.w	ip, r5, ip, lsl #3
   83d94:	f8dc 3004 	ldr.w	r3, [ip, #4]
   83d98:	4419      	add	r1, r3
   83d9a:	4b41      	ldr	r3, [pc, #260]	; (83ea0 <udd_ep_trans_done+0x188>)
   83d9c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   83da0:	6059      	str	r1, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83da2:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83da6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83da8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83dac:	f04f 0800 	mov.w	r8, #0
   83db0:	493c      	ldr	r1, [pc, #240]	; (83ea4 <udd_ep_trans_done+0x18c>)
   83db2:	f881 8000 	strb.w	r8, [r1]


		// Disable IRQs to have a short sequence
		// between read of EOT_STA and DMA enable
		flags = cpu_irq_save();
		if (!(udd_endpoint_dma_get_status(ep)
   83db6:	f8d3 800c 	ldr.w	r8, [r3, #12]
   83dba:	f018 0f10 	tst.w	r8, #16
   83dbe:	d049      	beq.n	83e54 <udd_ep_trans_done+0x13c>
	if (cpu_irq_is_enabled_flags(flags))
   83dc0:	b927      	cbnz	r7, 83dcc <udd_ep_trans_done+0xb4>
		cpu_irq_enable();
   83dc2:	2301      	movs	r3, #1
   83dc4:	700b      	strb	r3, [r1, #0]
   83dc6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83dca:	b662      	cpsie	i
		cpu_irq_restore(flags);

		// Here a ZLP has been recieved
		// and the DMA transfer must be not started.
		// It is the end of transfer
		ptr_job->buf_size = ptr_job->buf_cnt;
   83dcc:	eb00 030e 	add.w	r3, r0, lr
   83dd0:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   83dd4:	68d9      	ldr	r1, [r3, #12]
   83dd6:	6099      	str	r1, [r3, #8]
	}
	if (Is_udd_endpoint_in(ep)) {
   83dd8:	4b30      	ldr	r3, [pc, #192]	; (83e9c <udd_ep_trans_done+0x184>)
   83dda:	0091      	lsls	r1, r2, #2
   83ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   83de0:	05df      	lsls	r7, r3, #23
   83de2:	d506      	bpl.n	83df2 <udd_ep_trans_done+0xda>
		if (ptr_job->b_shortpacket) {
   83de4:	eb00 030e 	add.w	r3, r0, lr
   83de8:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   83dec:	7d1b      	ldrb	r3, [r3, #20]
   83dee:	079e      	lsls	r6, r3, #30
   83df0:	d407      	bmi.n	83e02 <udd_ep_trans_done+0xea>
	ptr_job = &udd_ep_job[ep - 1];
   83df2:	4470      	add	r0, lr
			return;
		}
	}
	dbg_print("dmaE ");
	// Call callback to signal end of transfer
	udd_ep_finish_job(ptr_job, false, ep);
   83df4:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   83df8:	2100      	movs	r1, #0
}
   83dfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	udd_ep_finish_job(ptr_job, false, ep);
   83dfe:	4b2a      	ldr	r3, [pc, #168]	; (83ea8 <udd_ep_trans_done+0x190>)
   83e00:	4718      	bx	r3
			udd_ack_in_send(ep);
   83e02:	2301      	movs	r3, #1
   83e04:	4c29      	ldr	r4, [pc, #164]	; (83eac <udd_ep_trans_done+0x194>)
			if (Is_udd_write_enabled(ep)) {
   83e06:	482a      	ldr	r0, [pc, #168]	; (83eb0 <udd_ep_trans_done+0x198>)
			udd_ack_in_send(ep);
   83e08:	510b      	str	r3, [r1, r4]
			if (Is_udd_write_enabled(ep)) {
   83e0a:	5808      	ldr	r0, [r1, r0]
			udd_enable_in_send_interrupt(ep);
   83e0c:	4c29      	ldr	r4, [pc, #164]	; (83eb4 <udd_ep_trans_done+0x19c>)
			if (Is_udd_write_enabled(ep)) {
   83e0e:	03c5      	lsls	r5, r0, #15
				udd_raise_in_send(ep);
   83e10:	bf48      	it	mi
   83e12:	4829      	ldrmi	r0, [pc, #164]	; (83eb8 <udd_ep_trans_done+0x1a0>)
			udd_enable_in_send_interrupt(ep);
   83e14:	f04f 0501 	mov.w	r5, #1
				udd_raise_in_send(ep);
   83e18:	bf48      	it	mi
   83e1a:	500b      	strmi	r3, [r1, r0]
			udd_enable_endpoint_interrupt(ep);
   83e1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   83e20:	4826      	ldr	r0, [pc, #152]	; (83ebc <udd_ep_trans_done+0x1a4>)
   83e22:	fa03 f202 	lsl.w	r2, r3, r2
			udd_enable_in_send_interrupt(ep);
   83e26:	510d      	str	r5, [r1, r4]
			udd_enable_endpoint_interrupt(ep);
   83e28:	6182      	str	r2, [r0, #24]
}
   83e2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   83e2e:	f857 3022 	ldr.w	r3, [r7, r2, lsl #2]
   83e32:	f3c3 23c1 	ubfx	r3, r3, #11, #2
   83e36:	2b01      	cmp	r3, #1
   83e38:	d022      	beq.n	83e80 <udd_ep_trans_done+0x168>
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   83e3a:	f046 0635 	orr.w	r6, r6, #53	; 0x35
   83e3e:	e7a5      	b.n	83d8c <udd_ep_trans_done+0x74>
			if ((USB_EP_TYPE_ISOCHRONOUS != udd_get_endpoint_type(ep))
   83e40:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
   83e44:	f3c4 24c1 	ubfx	r4, r4, #11, #2
   83e48:	2c01      	cmp	r4, #1
   83e4a:	d09a      	beq.n	83d82 <udd_ep_trans_done+0x6a>
   83e4c:	2635      	movs	r6, #53	; 0x35
			next_trans = UDD_ENDPOINT_MAX_TRANS;
   83e4e:	f44f 3480 	mov.w	r4, #65536	; 0x10000
				udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_TR_IT
   83e52:	e79b      	b.n	83d8c <udd_ep_trans_done+0x74>
			udd_enable_endpoint_dma_interrupt(ep);
   83e54:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
			udd_endpoint_dma_set_control(ep, udd_dma_ctrl);
   83e58:	609e      	str	r6, [r3, #8]
			ptr_job->buf_cnt += next_trans;
   83e5a:	f8dc 300c 	ldr.w	r3, [ip, #12]
			ptr_job->buf_load = next_trans;
   83e5e:	f8cc 4010 	str.w	r4, [ip, #16]
			ptr_job->buf_cnt += next_trans;
   83e62:	441c      	add	r4, r3
			udd_enable_endpoint_dma_interrupt(ep);
   83e64:	4b15      	ldr	r3, [pc, #84]	; (83ebc <udd_ep_trans_done+0x1a4>)
   83e66:	fa00 f00e 	lsl.w	r0, r0, lr
			ptr_job->buf_cnt += next_trans;
   83e6a:	f8cc 400c 	str.w	r4, [ip, #12]
			udd_enable_endpoint_dma_interrupt(ep);
   83e6e:	6198      	str	r0, [r3, #24]
	if (cpu_irq_is_enabled_flags(flags))
   83e70:	2f00      	cmp	r7, #0
   83e72:	d1da      	bne.n	83e2a <udd_ep_trans_done+0x112>
		cpu_irq_enable();
   83e74:	2301      	movs	r3, #1
   83e76:	700b      	strb	r3, [r1, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   83e78:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83e7c:	b662      	cpsie	i
}
   83e7e:	e7d4      	b.n	83e2a <udd_ep_trans_done+0x112>
					|| (next_trans <= (iram_size_t) udd_get_endpoint_size(ep))) {
   83e80:	2308      	movs	r3, #8
   83e82:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
   83e86:	f3c7 1702 	ubfx	r7, r7, #4, #3
   83e8a:	40bb      	lsls	r3, r7
   83e8c:	42a3      	cmp	r3, r4
   83e8e:	d2d4      	bcs.n	83e3a <udd_ep_trans_done+0x122>
		udd_dma_ctrl |= UOTGHS_DEVDMACONTROL_END_BUFFIT |
   83e90:	f046 0621 	orr.w	r6, r6, #33	; 0x21
   83e94:	e77a      	b.n	83d8c <udd_ep_trans_done+0x74>
   83e96:	bf00      	nop
   83e98:	200721cc 	.word	0x200721cc
   83e9c:	400ac100 	.word	0x400ac100
   83ea0:	400ac300 	.word	0x400ac300
   83ea4:	20070b04 	.word	0x20070b04
   83ea8:	00083cdd 	.word	0x00083cdd
   83eac:	400ac160 	.word	0x400ac160
   83eb0:	400ac130 	.word	0x400ac130
   83eb4:	400ac1f0 	.word	0x400ac1f0
   83eb8:	400ac190 	.word	0x400ac190
   83ebc:	400ac000 	.word	0x400ac000

00083ec0 <udd_ctrl_in_sent>:
{
   83ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83ec4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83ec8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83eca:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83ece:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   83ed0:	2301      	movs	r3, #1
   83ed2:	4d56      	ldr	r5, [pc, #344]	; (8402c <udd_ctrl_in_sent+0x16c>)
   83ed4:	4956      	ldr	r1, [pc, #344]	; (84030 <udd_ctrl_in_sent+0x170>)
   83ed6:	7028      	strb	r0, [r5, #0]
   83ed8:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   83edc:	b91a      	cbnz	r2, 83ee6 <udd_ctrl_in_sent+0x26>
		cpu_irq_enable();
   83ede:	702b      	strb	r3, [r5, #0]
   83ee0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83ee4:	b662      	cpsie	i
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   83ee6:	f8df 814c 	ldr.w	r8, [pc, #332]	; 84034 <udd_ctrl_in_sent+0x174>
   83eea:	f898 3000 	ldrb.w	r3, [r8]
   83eee:	2b03      	cmp	r3, #3
   83ef0:	d05c      	beq.n	83fac <udd_ctrl_in_sent+0xec>
	nb_remain = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   83ef2:	4f51      	ldr	r7, [pc, #324]	; (84038 <udd_ctrl_in_sent+0x178>)
   83ef4:	4e51      	ldr	r6, [pc, #324]	; (8403c <udd_ctrl_in_sent+0x17c>)
   83ef6:	883a      	ldrh	r2, [r7, #0]
   83ef8:	89b4      	ldrh	r4, [r6, #12]
   83efa:	1aa4      	subs	r4, r4, r2
   83efc:	b2a4      	uxth	r4, r4
	if (0 == nb_remain) {
   83efe:	2c00      	cmp	r4, #0
   83f00:	d032      	beq.n	83f68 <udd_ctrl_in_sent+0xa8>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83f02:	4613      	mov	r3, r2
   83f04:	f8df 9138 	ldr.w	r9, [pc, #312]	; 84040 <udd_ctrl_in_sent+0x180>
	if (nb_remain >= USB_DEVICE_EP_CTRL_SIZE) {
   83f08:	2c3f      	cmp	r4, #63	; 0x3f
		b_shortpacket = false;
   83f0a:	bf86      	itte	hi
   83f0c:	2200      	movhi	r2, #0
		nb_remain = USB_DEVICE_EP_CTRL_SIZE;
   83f0e:	2440      	movhi	r4, #64	; 0x40
		b_shortpacket = true;
   83f10:	2201      	movls	r2, #1
   83f12:	f889 2000 	strb.w	r2, [r9]
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83f16:	68b2      	ldr	r2, [r6, #8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83f18:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83f1c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83f1e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83f22:	2100      	movs	r1, #0
   83f24:	7029      	strb	r1, [r5, #0]
	if (Is_udd_out_received(0)) {
   83f26:	4942      	ldr	r1, [pc, #264]	; (84030 <udd_ctrl_in_sent+0x170>)
   83f28:	f8d1 1130 	ldr.w	r1, [r1, #304]	; 0x130
   83f2c:	0789      	lsls	r1, r1, #30
   83f2e:	d432      	bmi.n	83f96 <udd_ctrl_in_sent+0xd6>
	for (i = 0; i < nb_remain; i++) {
   83f30:	b154      	cbz	r4, 83f48 <udd_ctrl_in_sent+0x88>
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83f32:	441a      	add	r2, r3
	ptr_dest = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   83f34:	4b43      	ldr	r3, [pc, #268]	; (84044 <udd_ctrl_in_sent+0x184>)
		*ptr_dest++ = *ptr_src++;
   83f36:	4618      	mov	r0, r3
   83f38:	3301      	adds	r3, #1
   83f3a:	f812 cb01 	ldrb.w	ip, [r2], #1
	for (i = 0; i < nb_remain; i++) {
   83f3e:	b2d9      	uxtb	r1, r3
   83f40:	42a1      	cmp	r1, r4
		*ptr_dest++ = *ptr_src++;
   83f42:	f880 c000 	strb.w	ip, [r0]
	for (i = 0; i < nb_remain; i++) {
   83f46:	d3f6      	bcc.n	83f36 <udd_ctrl_in_sent+0x76>
	udd_ctrl_payload_buf_cnt += nb_remain;
   83f48:	883b      	ldrh	r3, [r7, #0]
	udd_ack_in_send(0);
   83f4a:	4a39      	ldr	r2, [pc, #228]	; (84030 <udd_ctrl_in_sent+0x170>)
	udd_ctrl_payload_buf_cnt += nb_remain;
   83f4c:	441c      	add	r4, r3
	udd_ack_in_send(0);
   83f4e:	2301      	movs	r3, #1
	udd_ctrl_payload_buf_cnt += nb_remain;
   83f50:	803c      	strh	r4, [r7, #0]
	udd_ack_in_send(0);
   83f52:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	udd_enable_in_send_interrupt(0);
   83f56:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   83f5a:	b91e      	cbnz	r6, 83f64 <udd_ctrl_in_sent+0xa4>
		cpu_irq_enable();
   83f5c:	702b      	strb	r3, [r5, #0]
   83f5e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83f62:	b662      	cpsie	i
}
   83f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83f68:	4937      	ldr	r1, [pc, #220]	; (84048 <udd_ctrl_in_sent+0x188>)
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   83f6a:	88f0      	ldrh	r0, [r6, #6]
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83f6c:	880b      	ldrh	r3, [r1, #0]
   83f6e:	4413      	add	r3, r2
   83f70:	b29b      	uxth	r3, r3
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   83f72:	4298      	cmp	r0, r3
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   83f74:	800b      	strh	r3, [r1, #0]
		if ((udd_g_ctrlreq.req.wLength == udd_ctrl_prev_payload_buf_cnt)
   83f76:	d03c      	beq.n	83ff2 <udd_ctrl_in_sent+0x132>
					|| b_shortpacket) {
   83f78:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 84040 <udd_ctrl_in_sent+0x180>
   83f7c:	f899 a000 	ldrb.w	sl, [r9]
   83f80:	f1ba 0f00 	cmp.w	sl, #0
   83f84:	d135      	bne.n	83ff2 <udd_ctrl_in_sent+0x132>
		if ((!udd_g_ctrlreq.over_under_run)
   83f86:	6973      	ldr	r3, [r6, #20]
   83f88:	b383      	cbz	r3, 83fec <udd_ctrl_in_sent+0x12c>
				|| (!udd_g_ctrlreq.over_under_run())) {
   83f8a:	4798      	blx	r3
   83f8c:	2800      	cmp	r0, #0
   83f8e:	d148      	bne.n	84022 <udd_ctrl_in_sent+0x162>
		b_shortpacket = true;
   83f90:	2201      	movs	r2, #1
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83f92:	883b      	ldrh	r3, [r7, #0]
   83f94:	e7bd      	b.n	83f12 <udd_ctrl_in_sent+0x52>
	if (cpu_irq_is_enabled_flags(flags))
   83f96:	b926      	cbnz	r6, 83fa2 <udd_ctrl_in_sent+0xe2>
		cpu_irq_enable();
   83f98:	2301      	movs	r3, #1
   83f9a:	702b      	strb	r3, [r5, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   83f9c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83fa0:	b662      	cpsie	i
		udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83fa2:	2304      	movs	r3, #4
   83fa4:	f888 3000 	strb.w	r3, [r8]
}
   83fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (udd_g_ctrlreq.callback) {
   83fac:	4e23      	ldr	r6, [pc, #140]	; (8403c <udd_ctrl_in_sent+0x17c>)
   83fae:	6933      	ldr	r3, [r6, #16]
   83fb0:	b103      	cbz	r3, 83fb4 <udd_ctrl_in_sent+0xf4>
		udd_g_ctrlreq.callback();
   83fb2:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83fb4:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83fb8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83fba:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   83fbe:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   83fc0:	2301      	movs	r3, #1
   83fc2:	491b      	ldr	r1, [pc, #108]	; (84030 <udd_ctrl_in_sent+0x170>)
   83fc4:	7028      	strb	r0, [r5, #0]
   83fc6:	f8c1 3220 	str.w	r3, [r1, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   83fca:	b91a      	cbnz	r2, 83fd4 <udd_ctrl_in_sent+0x114>
		cpu_irq_enable();
   83fcc:	702b      	strb	r3, [r5, #0]
   83fce:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   83fd2:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   83fd4:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   83fd6:	2102      	movs	r1, #2
   83fd8:	4a15      	ldr	r2, [pc, #84]	; (84030 <udd_ctrl_in_sent+0x170>)
   83fda:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
	udd_g_ctrlreq.over_under_run = NULL;
   83fde:	e9c6 3304 	strd	r3, r3, [r6, #16]
	udd_g_ctrlreq.payload_size = 0;
   83fe2:	81b3      	strh	r3, [r6, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   83fe4:	f888 3000 	strb.w	r3, [r8]
}
   83fe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ptr_src = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   83fec:	4613      	mov	r3, r2
		b_shortpacket = true;
   83fee:	2201      	movs	r2, #1
   83ff0:	e78f      	b.n	83f12 <udd_ctrl_in_sent+0x52>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP;
   83ff2:	2304      	movs	r3, #4
   83ff4:	f888 3000 	strb.w	r3, [r8]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   83ff8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   83ffc:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   83ffe:	f3bf 8f5f 	dmb	sy
	udd_ack_nak_in(0);
   84002:	2210      	movs	r2, #16
	cpu_irq_disable();
   84004:	2000      	movs	r0, #0
   84006:	4b0a      	ldr	r3, [pc, #40]	; (84030 <udd_ctrl_in_sent+0x170>)
   84008:	7028      	strb	r0, [r5, #0]
   8400a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	udd_enable_nak_in_interrupt(0);
   8400e:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   84012:	2900      	cmp	r1, #0
   84014:	d1a6      	bne.n	83f64 <udd_ctrl_in_sent+0xa4>
		cpu_irq_enable();
   84016:	2301      	movs	r3, #1
   84018:	702b      	strb	r3, [r5, #0]
   8401a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8401e:	b662      	cpsie	i
}
   84020:	e7a0      	b.n	83f64 <udd_ctrl_in_sent+0xa4>
			udd_ctrl_payload_buf_cnt = 0;
   84022:	803c      	strh	r4, [r7, #0]
			nb_remain = udd_g_ctrlreq.payload_size;
   84024:	4653      	mov	r3, sl
   84026:	89b4      	ldrh	r4, [r6, #12]
   84028:	e76e      	b.n	83f08 <udd_ctrl_in_sent+0x48>
   8402a:	bf00      	nop
   8402c:	20070b04 	.word	0x20070b04
   84030:	400ac000 	.word	0x400ac000
   84034:	200721c8 	.word	0x200721c8
   84038:	200721c4 	.word	0x200721c4
   8403c:	2007228c 	.word	0x2007228c
   84040:	200721c0 	.word	0x200721c0
   84044:	20180000 	.word	0x20180000
   84048:	200721c6 	.word	0x200721c6

0008404c <udd_enable>:
{
   8404c:	b538      	push	{r3, r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8404e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84052:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84054:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84058:	2200      	movs	r2, #0
   8405a:	4c50      	ldr	r4, [pc, #320]	; (8419c <udd_enable+0x150>)
	pmc_enable_periph_clk(ID_UOTGHS);
   8405c:	4b50      	ldr	r3, [pc, #320]	; (841a0 <udd_enable+0x154>)
   8405e:	2028      	movs	r0, #40	; 0x28
   84060:	7022      	strb	r2, [r4, #0]
   84062:	4798      	blx	r3
	sysclk_enable_usb();
   84064:	4b4f      	ldr	r3, [pc, #316]	; (841a4 <udd_enable+0x158>)
   84066:	4798      	blx	r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   84068:	f04f 0c50 	mov.w	ip, #80	; 0x50
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8406c:	f44f 7180 	mov.w	r1, #256	; 0x100
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   84070:	4b4d      	ldr	r3, [pc, #308]	; (841a8 <udd_enable+0x15c>)
	pmc_set_fast_startup_input(PMC_FSMR_USBAL);
   84072:	4a4e      	ldr	r2, [pc, #312]	; (841ac <udd_enable+0x160>)
   84074:	f883 c328 	strb.w	ip, [r3, #808]	; 0x328
   84078:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   8407c:	6059      	str	r1, [r3, #4]
   8407e:	4790      	blx	r2
	otg_disable_id_pin();
   84080:	4b4b      	ldr	r3, [pc, #300]	; (841b0 <udd_enable+0x164>)
   84082:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84086:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   8408a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_force_device_mode();
   8408e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84092:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   84096:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
   8409a:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   8409e:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
   840a2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable_pad();
   840a6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   840aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   840ae:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_enable();
   840b2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   840b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
   840ba:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_low_speed_disable();
   840be:	681a      	ldr	r2, [r3, #0]
   840c0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
   840c4:	601a      	str	r2, [r3, #0]
	udd_high_speed_enable();
   840c6:	681a      	ldr	r2, [r3, #0]
   840c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
   840cc:	601a      	str	r2, [r3, #0]
	otg_unfreeze_clock();
   840ce:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   840d2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   840d6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   840da:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   840de:	0450      	lsls	r0, r2, #17
   840e0:	d5fb      	bpl.n	840da <udd_enable+0x8e>
   840e2:	2300      	movs	r3, #0
   840e4:	4833      	ldr	r0, [pc, #204]	; (841b4 <udd_enable+0x168>)
		udd_ep_job[i].stall_requested = false;
   840e6:	eb03 0243 	add.w	r2, r3, r3, lsl #1
   840ea:	eb00 02c2 	add.w	r2, r0, r2, lsl #3
		udd_ep_job[i].busy = false;
   840ee:	7d11      	ldrb	r1, [r2, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   840f0:	3301      	adds	r3, #1
		udd_ep_job[i].busy = false;
   840f2:	f021 0105 	bic.w	r1, r1, #5
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   840f6:	2b08      	cmp	r3, #8
		udd_ep_job[i].busy = false;
   840f8:	7511      	strb	r1, [r2, #20]
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   840fa:	d1f4      	bne.n	840e6 <udd_enable+0x9a>
	otg_ack_vbus_transition();
   840fc:	2202      	movs	r2, #2
   840fe:	4b2c      	ldr	r3, [pc, #176]	; (841b0 <udd_enable+0x164>)
   84100:	f8c3 2808 	str.w	r2, [r3, #2056]	; 0x808
	if (Is_otg_vbus_high()) {
   84104:	f8d3 1804 	ldr.w	r1, [r3, #2052]	; 0x804
   84108:	0509      	lsls	r1, r1, #20
		otg_raise_vbus_transition();
   8410a:	bf48      	it	mi
   8410c:	f8c3 280c 	strmi.w	r2, [r3, #2060]	; 0x80c
	otg_enable_vbus_interrupt();
   84110:	4b27      	ldr	r3, [pc, #156]	; (841b0 <udd_enable+0x164>)
	if (!udd_b_sleep_initialized) {
   84112:	4929      	ldr	r1, [pc, #164]	; (841b8 <udd_enable+0x16c>)
	otg_enable_vbus_interrupt();
   84114:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84118:	f042 0202 	orr.w	r2, r2, #2
   8411c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	otg_freeze_clock();
   84120:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84124:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   84128:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (!udd_b_sleep_initialized) {
   8412c:	780b      	ldrb	r3, [r1, #0]
   8412e:	b9ab      	cbnz	r3, 8415c <udd_enable+0x110>
		udd_b_sleep_initialized = true;
   84130:	2001      	movs	r0, #1
		udd_b_idle = false;
   84132:	4a22      	ldr	r2, [pc, #136]	; (841bc <udd_enable+0x170>)
		udd_b_sleep_initialized = true;
   84134:	7008      	strb	r0, [r1, #0]
		udd_b_idle = false;
   84136:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84138:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   8413c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8413e:	f3bf 8f5f 	dmb	sy
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
   84142:	4a1f      	ldr	r2, [pc, #124]	; (841c0 <udd_enable+0x174>)
   84144:	7023      	strb	r3, [r4, #0]
   84146:	78d3      	ldrb	r3, [r2, #3]
   84148:	4403      	add	r3, r0
   8414a:	70d3      	strb	r3, [r2, #3]
	if (cpu_irq_is_enabled_flags(flags))
   8414c:	b161      	cbz	r1, 84168 <udd_enable+0x11c>
   8414e:	b925      	cbnz	r5, 8415a <udd_enable+0x10e>
		cpu_irq_enable();
   84150:	2301      	movs	r3, #1
   84152:	7023      	strb	r3, [r4, #0]
   84154:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84158:	b662      	cpsie	i
}
   8415a:	bd38      	pop	{r3, r4, r5, pc}
	if (!b_idle && udd_b_idle) {
   8415c:	4b17      	ldr	r3, [pc, #92]	; (841bc <udd_enable+0x170>)
   8415e:	781a      	ldrb	r2, [r3, #0]
   84160:	b93a      	cbnz	r2, 84172 <udd_enable+0x126>
	udd_b_idle = b_idle;
   84162:	2200      	movs	r2, #0
   84164:	701a      	strb	r2, [r3, #0]
}
   84166:	e7f2      	b.n	8414e <udd_enable+0x102>
   84168:	7020      	strb	r0, [r4, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   8416a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8416e:	b662      	cpsie	i
}
   84170:	e7ed      	b.n	8414e <udd_enable+0x102>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84172:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84176:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84178:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8417c:	f04f 0c00 	mov.w	ip, #0
	Assert(sleepmgr_locks[mode]);

	// Enter a critical section
	flags = cpu_irq_save();

	--sleepmgr_locks[mode];
   84180:	490f      	ldr	r1, [pc, #60]	; (841c0 <udd_enable+0x174>)
   84182:	788a      	ldrb	r2, [r1, #2]
   84184:	3a01      	subs	r2, #1
   84186:	708a      	strb	r2, [r1, #2]
   84188:	f884 c000 	strb.w	ip, [r4]
	if (cpu_irq_is_enabled_flags(flags))
   8418c:	2800      	cmp	r0, #0
   8418e:	d1e8      	bne.n	84162 <udd_enable+0x116>
		cpu_irq_enable();
   84190:	2201      	movs	r2, #1
   84192:	7022      	strb	r2, [r4, #0]
   84194:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84198:	b662      	cpsie	i
}
   8419a:	e7e2      	b.n	84162 <udd_enable+0x116>
   8419c:	20070b04 	.word	0x20070b04
   841a0:	00083599 	.word	0x00083599
   841a4:	000833e1 	.word	0x000833e1
   841a8:	e000e100 	.word	0xe000e100
   841ac:	000835c9 	.word	0x000835c9
   841b0:	400ac000 	.word	0x400ac000
   841b4:	200721cc 	.word	0x200721cc
   841b8:	200721c2 	.word	0x200721c2
   841bc:	200721c1 	.word	0x200721c1
   841c0:	20073308 	.word	0x20073308

000841c4 <udd_attach>:
{
   841c4:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   841c6:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   841ca:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   841cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   841d0:	2100      	movs	r1, #0
	if (b_idle && !udd_b_idle) {
   841d2:	4a22      	ldr	r2, [pc, #136]	; (8425c <udd_attach+0x98>)
   841d4:	4d22      	ldr	r5, [pc, #136]	; (84260 <udd_attach+0x9c>)
   841d6:	7813      	ldrb	r3, [r2, #0]
   841d8:	7029      	strb	r1, [r5, #0]
   841da:	b363      	cbz	r3, 84236 <udd_attach+0x72>
	udd_b_idle = b_idle;
   841dc:	2101      	movs	r1, #1
	otg_unfreeze_clock();
   841de:	4b21      	ldr	r3, [pc, #132]	; (84264 <udd_attach+0xa0>)
	udd_b_idle = b_idle;
   841e0:	7011      	strb	r1, [r2, #0]
	otg_unfreeze_clock();
   841e2:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   841e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   841ea:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	while (!Is_otg_clock_usable());
   841ee:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   841f2:	0452      	lsls	r2, r2, #17
   841f4:	d5fb      	bpl.n	841ee <udd_attach+0x2a>
	udd_attach_device();
   841f6:	681a      	ldr	r2, [r3, #0]
	udd_enable_reset_interrupt();
   841f8:	2708      	movs	r7, #8
	udd_attach_device();
   841fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   841fe:	601a      	str	r2, [r3, #0]
	udd_enable_suspend_interrupt();
   84200:	2101      	movs	r1, #1
	udd_enable_wake_up_interrupt();
   84202:	2210      	movs	r2, #16
	udd_enable_sof_interrupt();
   84204:	2404      	movs	r4, #4
	udd_enable_msof_interrupt();
   84206:	2002      	movs	r0, #2
	udd_enable_reset_interrupt();
   84208:	619f      	str	r7, [r3, #24]
	udd_enable_suspend_interrupt();
   8420a:	6199      	str	r1, [r3, #24]
	udd_enable_wake_up_interrupt();
   8420c:	619a      	str	r2, [r3, #24]
	udd_enable_sof_interrupt();
   8420e:	619c      	str	r4, [r3, #24]
	udd_enable_msof_interrupt();
   84210:	6198      	str	r0, [r3, #24]
	udd_ack_reset();
   84212:	609f      	str	r7, [r3, #8]
	udd_ack_sof();
   84214:	609c      	str	r4, [r3, #8]
	udd_ack_msof();
   84216:	6098      	str	r0, [r3, #8]
	udd_raise_suspend();
   84218:	60d9      	str	r1, [r3, #12]
	udd_ack_wake_up();
   8421a:	609a      	str	r2, [r3, #8]
	otg_freeze_clock();
   8421c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84220:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   84224:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (cpu_irq_is_enabled_flags(flags))
   84228:	b91e      	cbnz	r6, 84232 <udd_attach+0x6e>
		cpu_irq_enable();
   8422a:	7029      	strb	r1, [r5, #0]
   8422c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84230:	b662      	cpsie	i
}
   84232:	bcf0      	pop	{r4, r5, r6, r7}
   84234:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84236:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   8423a:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8423c:	f3bf 8f5f 	dmb	sy
	++sleepmgr_locks[mode];
   84240:	4909      	ldr	r1, [pc, #36]	; (84268 <udd_attach+0xa4>)
	cpu_irq_disable();
   84242:	702b      	strb	r3, [r5, #0]
   84244:	788b      	ldrb	r3, [r1, #2]
   84246:	3301      	adds	r3, #1
   84248:	708b      	strb	r3, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   8424a:	2800      	cmp	r0, #0
   8424c:	d1c6      	bne.n	841dc <udd_attach+0x18>
		cpu_irq_enable();
   8424e:	2301      	movs	r3, #1
   84250:	702b      	strb	r3, [r5, #0]
   84252:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84256:	b662      	cpsie	i
}
   84258:	e7c0      	b.n	841dc <udd_attach+0x18>
   8425a:	bf00      	nop
   8425c:	200721c1 	.word	0x200721c1
   84260:	20070b04 	.word	0x20070b04
   84264:	400ac000 	.word	0x400ac000
   84268:	20073308 	.word	0x20073308

0008426c <udd_detach>:
	otg_unfreeze_clock();
   8426c:	4b17      	ldr	r3, [pc, #92]	; (842cc <udd_detach+0x60>)
	if (!b_idle && udd_b_idle) {
   8426e:	4918      	ldr	r1, [pc, #96]	; (842d0 <udd_detach+0x64>)
	otg_unfreeze_clock();
   84270:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84274:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   84278:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	udd_detach_device();
   8427c:	681a      	ldr	r2, [r3, #0]
   8427e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   84282:	601a      	str	r2, [r3, #0]
	otg_freeze_clock();
   84284:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84288:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   8428c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
	if (!b_idle && udd_b_idle) {
   84290:	780b      	ldrb	r3, [r1, #0]
   84292:	b913      	cbnz	r3, 8429a <udd_detach+0x2e>
	udd_b_idle = b_idle;
   84294:	2300      	movs	r3, #0
   84296:	700b      	strb	r3, [r1, #0]
   84298:	4770      	bx	lr
{
   8429a:	b410      	push	{r4}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8429c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   842a0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   842a2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   842a6:	f04f 0c00 	mov.w	ip, #0
	--sleepmgr_locks[mode];
   842aa:	4a0a      	ldr	r2, [pc, #40]	; (842d4 <udd_detach+0x68>)
   842ac:	480a      	ldr	r0, [pc, #40]	; (842d8 <udd_detach+0x6c>)
   842ae:	7893      	ldrb	r3, [r2, #2]
   842b0:	3b01      	subs	r3, #1
   842b2:	7093      	strb	r3, [r2, #2]
   842b4:	f880 c000 	strb.w	ip, [r0]
	if (cpu_irq_is_enabled_flags(flags))
   842b8:	b924      	cbnz	r4, 842c4 <udd_detach+0x58>
		cpu_irq_enable();
   842ba:	2301      	movs	r3, #1
   842bc:	7003      	strb	r3, [r0, #0]
   842be:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   842c2:	b662      	cpsie	i
	udd_b_idle = b_idle;
   842c4:	2300      	movs	r3, #0
   842c6:	700b      	strb	r3, [r1, #0]
}
   842c8:	bc10      	pop	{r4}
   842ca:	4770      	bx	lr
   842cc:	400ac000 	.word	0x400ac000
   842d0:	200721c1 	.word	0x200721c1
   842d4:	20073308 	.word	0x20073308
   842d8:	20070b04 	.word	0x20070b04

000842dc <udd_is_high_speed>:
	return !Is_udd_full_speed_mode();
   842dc:	4b03      	ldr	r3, [pc, #12]	; (842ec <udd_is_high_speed+0x10>)
   842de:	f8d3 0804 	ldr.w	r0, [r3, #2052]	; 0x804
}
   842e2:	f410 5040 	ands.w	r0, r0, #12288	; 0x3000
   842e6:	bf18      	it	ne
   842e8:	2001      	movne	r0, #1
   842ea:	4770      	bx	lr
   842ec:	400ac000 	.word	0x400ac000

000842f0 <udd_set_address>:
	udd_disable_address();
   842f0:	4b08      	ldr	r3, [pc, #32]	; (84314 <udd_set_address+0x24>)
	udd_configure_address(address);
   842f2:	f000 007f 	and.w	r0, r0, #127	; 0x7f
	udd_disable_address();
   842f6:	681a      	ldr	r2, [r3, #0]
   842f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   842fc:	601a      	str	r2, [r3, #0]
	udd_configure_address(address);
   842fe:	681a      	ldr	r2, [r3, #0]
   84300:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84304:	4302      	orrs	r2, r0
   84306:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   84308:	681a      	ldr	r2, [r3, #0]
   8430a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8430e:	601a      	str	r2, [r3, #0]
}
   84310:	4770      	bx	lr
   84312:	bf00      	nop
   84314:	400ac000 	.word	0x400ac000

00084318 <udd_getaddress>:
	return udd_get_configured_address();
   84318:	4b02      	ldr	r3, [pc, #8]	; (84324 <udd_getaddress+0xc>)
   8431a:	6818      	ldr	r0, [r3, #0]
}
   8431c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   84320:	4770      	bx	lr
   84322:	bf00      	nop
   84324:	400ac000 	.word	0x400ac000

00084328 <udd_get_frame_number>:
	return udd_frame_number();
   84328:	4b02      	ldr	r3, [pc, #8]	; (84334 <udd_get_frame_number+0xc>)
   8432a:	6a18      	ldr	r0, [r3, #32]
}
   8432c:	f3c0 00ca 	ubfx	r0, r0, #3, #11
   84330:	4770      	bx	lr
   84332:	bf00      	nop
   84334:	400ac000 	.word	0x400ac000

00084338 <udd_get_micro_frame_number>:
	return udd_micro_frame_number();
   84338:	4b02      	ldr	r3, [pc, #8]	; (84344 <udd_get_micro_frame_number+0xc>)
   8433a:	6a18      	ldr	r0, [r3, #32]
}
   8433c:	f3c0 000d 	ubfx	r0, r0, #0, #14
   84340:	4770      	bx	lr
   84342:	bf00      	nop
   84344:	400ac000 	.word	0x400ac000

00084348 <udd_set_setup_payload>:
	udd_g_ctrlreq.payload = payload;
   84348:	4b01      	ldr	r3, [pc, #4]	; (84350 <udd_set_setup_payload+0x8>)
   8434a:	6098      	str	r0, [r3, #8]
	udd_g_ctrlreq.payload_size = payload_size;
   8434c:	8199      	strh	r1, [r3, #12]
}
   8434e:	4770      	bx	lr
   84350:	2007228c 	.word	0x2007228c

00084354 <udd_ep_free>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84354:	f000 020f 	and.w	r2, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   84358:	2a08      	cmp	r2, #8
   8435a:	d900      	bls.n	8435e <udd_ep_free+0xa>
   8435c:	4770      	bx	lr
	udd_disable_endpoint(ep_index);
   8435e:	2101      	movs	r1, #1
{
   84360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_disable_endpoint(ep_index);
   84362:	4f0e      	ldr	r7, [pc, #56]	; (8439c <udd_ep_free+0x48>)
   84364:	fa01 fc02 	lsl.w	ip, r1, r2
   84368:	69fb      	ldr	r3, [r7, #28]
	udd_unallocate_memory(ep_index);
   8436a:	4d0d      	ldr	r5, [pc, #52]	; (843a0 <udd_ep_free+0x4c>)
	udd_disable_endpoint(ep_index);
   8436c:	ea23 030c 	bic.w	r3, r3, ip
   84370:	61fb      	str	r3, [r7, #28]
	udd_unallocate_memory(ep_index);
   84372:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   84376:	1e50      	subs	r0, r2, #1
   84378:	4c0a      	ldr	r4, [pc, #40]	; (843a4 <udd_ep_free+0x50>)
   8437a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   8437e:	eb04 04c0 	add.w	r4, r4, r0, lsl #3
	udd_unallocate_memory(ep_index);
   84382:	f023 0302 	bic.w	r3, r3, #2
   84386:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   8438a:	4620      	mov	r0, r4
   8438c:	4e06      	ldr	r6, [pc, #24]	; (843a8 <udd_ep_free+0x54>)
   8438e:	47b0      	blx	r6
	udd_ep_job[ep_index - 1].stall_requested = false;
   84390:	7d23      	ldrb	r3, [r4, #20]
   84392:	f36f 0382 	bfc	r3, #2, #1
   84396:	7523      	strb	r3, [r4, #20]
}
   84398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8439a:	bf00      	nop
   8439c:	400ac000 	.word	0x400ac000
   843a0:	400ac100 	.word	0x400ac100
   843a4:	200721cc 	.word	0x200721cc
   843a8:	00083cdd 	.word	0x00083cdd

000843ac <udd_ep_is_halted>:
	return Is_udd_endpoint_stall_requested(ep_index);
   843ac:	4b03      	ldr	r3, [pc, #12]	; (843bc <udd_ep_is_halted+0x10>)
   843ae:	f000 000f 	and.w	r0, r0, #15
   843b2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}
   843b6:	f3c0 40c0 	ubfx	r0, r0, #19, #1
   843ba:	4770      	bx	lr
   843bc:	400ac1c0 	.word	0x400ac1c0

000843c0 <udd_ep_set_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   843c0:	f000 030f 	and.w	r3, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index) {
   843c4:	2b08      	cmp	r3, #8
   843c6:	d834      	bhi.n	84432 <udd_ep_set_halt+0x72>
	if (Is_udd_endpoint_stall_requested(ep_index) // Endpoint stalled
   843c8:	4a2f      	ldr	r2, [pc, #188]	; (84488 <udd_ep_set_halt+0xc8>)
   843ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   843ce:	0311      	lsls	r1, r2, #12
   843d0:	d431      	bmi.n	84436 <udd_ep_set_halt+0x76>
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   843d2:	492e      	ldr	r1, [pc, #184]	; (8448c <udd_ep_set_halt+0xcc>)
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   843d4:	1e5a      	subs	r2, r3, #1
			|| ptr_job->stall_requested) { // Endpoint stall is requested
   843d6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   843da:	eb01 0cc2 	add.w	ip, r1, r2, lsl #3
   843de:	f89c 1014 	ldrb.w	r1, [ip, #20]
   843e2:	f011 0204 	ands.w	r2, r1, #4
   843e6:	d126      	bne.n	84436 <udd_ep_set_halt+0x76>
	if (ptr_job->busy == true) {
   843e8:	f011 0101 	ands.w	r1, r1, #1
   843ec:	d121      	bne.n	84432 <udd_ep_set_halt+0x72>
{
   843ee:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   843f0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   843f4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   843f6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   843fa:	4c25      	ldr	r4, [pc, #148]	; (84490 <udd_ep_set_halt+0xd0>)
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   843fc:	0602      	lsls	r2, r0, #24
   843fe:	7021      	strb	r1, [r4, #0]
   84400:	d41b      	bmi.n	8443a <udd_ep_set_halt+0x7a>
	udd_disable_endpoint_bank_autoswitch(ep_index);
   84402:	4924      	ldr	r1, [pc, #144]	; (84494 <udd_ep_set_halt+0xd4>)
	udd_ack_stall(ep_index);
   84404:	2040      	movs	r0, #64	; 0x40
	udd_disable_endpoint_bank_autoswitch(ep_index);
   84406:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
   8440a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   8440e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   84412:	f44f 2100 	mov.w	r1, #524288	; 0x80000
	udd_ack_stall(ep_index);
   84416:	4a20      	ldr	r2, [pc, #128]	; (84498 <udd_ep_set_halt+0xd8>)
   84418:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
	udd_enable_stall_handshake(ep_index);
   8441c:	3290      	adds	r2, #144	; 0x90
   8441e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	if (cpu_irq_is_enabled_flags(flags))
   84422:	bb6d      	cbnz	r5, 84480 <udd_ep_set_halt+0xc0>
		cpu_irq_enable();
   84424:	2001      	movs	r0, #1
   84426:	7020      	strb	r0, [r4, #0]
   84428:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8442c:	b662      	cpsie	i
}
   8442e:	bcf0      	pop	{r4, r5, r6, r7}
   84430:	4770      	bx	lr
		return false;
   84432:	2000      	movs	r0, #0
   84434:	4770      	bx	lr
		return true; // Already STALL
   84436:	2001      	movs	r0, #1
}
   84438:	4770      	bx	lr
	if ((ep & USB_EP_DIR_IN) && (0 != udd_nb_busy_bank(ep_index))) {
   8443a:	4a18      	ldr	r2, [pc, #96]	; (8449c <udd_ep_set_halt+0xdc>)
   8443c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   84440:	f412 5f40 	tst.w	r2, #12288	; 0x3000
   84444:	d0dd      	beq.n	84402 <udd_ep_set_halt+0x42>
		udd_disable_in_send_interrupt(ep_index);
   84446:	2001      	movs	r0, #1
		ptr_job->stall_requested = true;
   84448:	f89c 2014 	ldrb.w	r2, [ip, #20]
		udd_disable_in_send_interrupt(ep_index);
   8444c:	4914      	ldr	r1, [pc, #80]	; (844a0 <udd_ep_set_halt+0xe0>)
		ptr_job->stall_requested = true;
   8444e:	f042 0204 	orr.w	r2, r2, #4
   84452:	f88c 2014 	strb.w	r2, [ip, #20]
		udd_enable_bank_interrupt(ep_index);
   84456:	f44f 5280 	mov.w	r2, #4096	; 0x1000
		udd_enable_endpoint_bank_autoswitch(ep_index);
   8445a:	4e0e      	ldr	r6, [pc, #56]	; (84494 <udd_ep_set_halt+0xd4>)
		udd_disable_in_send_interrupt(ep_index);
   8445c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   84460:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
		udd_enable_bank_interrupt(ep_index);
   84464:	f8df c03c 	ldr.w	ip, [pc, #60]	; 844a4 <udd_ep_set_halt+0xe4>
		udd_enable_endpoint_interrupt(ep_index);
   84468:	4f0f      	ldr	r7, [pc, #60]	; (844a8 <udd_ep_set_halt+0xe8>)
		udd_enable_endpoint_bank_autoswitch(ep_index);
   8446a:	f441 7100 	orr.w	r1, r1, #512	; 0x200
   8446e:	f846 1023 	str.w	r1, [r6, r3, lsl #2]
		udd_enable_bank_interrupt(ep_index);
   84472:	f84c 2023 	str.w	r2, [ip, r3, lsl #2]
		udd_enable_endpoint_interrupt(ep_index);
   84476:	fa02 f303 	lsl.w	r3, r2, r3
   8447a:	61bb      	str	r3, [r7, #24]
	if (cpu_irq_is_enabled_flags(flags))
   8447c:	2d00      	cmp	r5, #0
   8447e:	d0d2      	beq.n	84426 <udd_ep_set_halt+0x66>
}
   84480:	bcf0      	pop	{r4, r5, r6, r7}
		return true; // Already STALL
   84482:	2001      	movs	r0, #1
}
   84484:	4770      	bx	lr
   84486:	bf00      	nop
   84488:	400ac1c0 	.word	0x400ac1c0
   8448c:	200721cc 	.word	0x200721cc
   84490:	20070b04 	.word	0x20070b04
   84494:	400ac100 	.word	0x400ac100
   84498:	400ac160 	.word	0x400ac160
   8449c:	400ac130 	.word	0x400ac130
   844a0:	400ac220 	.word	0x400ac220
   844a4:	400ac1f0 	.word	0x400ac1f0
   844a8:	400ac000 	.word	0x400ac000

000844ac <udd_ep_clear_halt>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   844ac:	f000 000f 	and.w	r0, r0, #15
	if (USB_DEVICE_MAX_EP < ep_index)
   844b0:	2808      	cmp	r0, #8
   844b2:	d84b      	bhi.n	8454c <udd_ep_clear_halt+0xa0>
{
   844b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	udd_ep_job_t *ptr_job = &udd_ep_job[ep_index - 1];
   844b6:	1e41      	subs	r1, r0, #1
	if (ptr_job->stall_requested) {
   844b8:	4c25      	ldr	r4, [pc, #148]	; (84550 <udd_ep_clear_halt+0xa4>)
   844ba:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   844be:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   844c2:	7d15      	ldrb	r5, [r2, #20]
   844c4:	004b      	lsls	r3, r1, #1
   844c6:	076d      	lsls	r5, r5, #29
   844c8:	d524      	bpl.n	84514 <udd_ep_clear_halt+0x68>
		udd_disable_bank_interrupt(ep_index);
   844ca:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		ptr_job->stall_requested = false;
   844ce:	7d16      	ldrb	r6, [r2, #20]
		udd_disable_bank_interrupt(ep_index);
   844d0:	4f20      	ldr	r7, [pc, #128]	; (84554 <udd_ep_clear_halt+0xa8>)
		ptr_job->stall_requested = false;
   844d2:	f36f 0682 	bfc	r6, #2, #1
		udd_disable_endpoint_interrupt(ep_index);
   844d6:	f8df e080 	ldr.w	lr, [pc, #128]	; 84558 <udd_ep_clear_halt+0xac>
		ptr_job->stall_requested = false;
   844da:	7516      	strb	r6, [r2, #20]
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   844dc:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8455c <udd_ep_clear_halt+0xb0>
		udd_disable_bank_interrupt(ep_index);
   844e0:	f847 5020 	str.w	r5, [r7, r0, lsl #2]
		udd_disable_endpoint_interrupt(ep_index);
   844e4:	4085      	lsls	r5, r0
   844e6:	f8ce 5014 	str.w	r5, [lr, #20]
		udd_disable_bank_interrupt(ep_index);
   844ea:	eb07 0680 	add.w	r6, r7, r0, lsl #2
   844ee:	0082      	lsls	r2, r0, #2
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   844f0:	f85c 0020 	ldr.w	r0, [ip, r0, lsl #2]
   844f4:	0307      	lsls	r7, r0, #12
   844f6:	d415      	bmi.n	84524 <udd_ep_clear_halt+0x78>
		if (ptr_job->busy == true) {
   844f8:	440b      	add	r3, r1
   844fa:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   844fe:	7d11      	ldrb	r1, [r2, #20]
   84500:	00db      	lsls	r3, r3, #3
   84502:	07c8      	lsls	r0, r1, #31
   84504:	d504      	bpl.n	84510 <udd_ep_clear_halt+0x64>
			ptr_job->busy = false;
   84506:	f36f 0100 	bfc	r1, #0, #1
			ptr_job->call_nohalt();
   8450a:	58e3      	ldr	r3, [r4, r3]
			ptr_job->busy = false;
   8450c:	7511      	strb	r1, [r2, #20]
			ptr_job->call_nohalt();
   8450e:	4798      	blx	r3
	return true;
   84510:	2001      	movs	r0, #1
}
   84512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (Is_udd_endpoint_stall_requested(ep_index)) {
   84514:	4d11      	ldr	r5, [pc, #68]	; (8455c <udd_ep_clear_halt+0xb0>)
   84516:	0082      	lsls	r2, r0, #2
   84518:	f855 0020 	ldr.w	r0, [r5, r0, lsl #2]
   8451c:	0300      	lsls	r0, r0, #12
   8451e:	d5f7      	bpl.n	84510 <udd_ep_clear_halt+0x64>
		udd_disable_bank_interrupt(ep_index);
   84520:	4e0c      	ldr	r6, [pc, #48]	; (84554 <udd_ep_clear_halt+0xa8>)
   84522:	4416      	add	r6, r2
		if (Is_udd_stall(ep_index)) {
   84524:	480e      	ldr	r0, [pc, #56]	; (84560 <udd_ep_clear_halt+0xb4>)
   84526:	5810      	ldr	r0, [r2, r0]
   84528:	0645      	lsls	r5, r0, #25
   8452a:	d506      	bpl.n	8453a <udd_ep_clear_halt+0x8e>
			udd_ack_stall(ep_index);
   8452c:	2740      	movs	r7, #64	; 0x40
			udd_reset_data_toggle(ep_index);
   8452e:	f44f 2580 	mov.w	r5, #262144	; 0x40000
			udd_ack_stall(ep_index);
   84532:	480c      	ldr	r0, [pc, #48]	; (84564 <udd_ep_clear_halt+0xb8>)
   84534:	5017      	str	r7, [r2, r0]
			udd_reset_data_toggle(ep_index);
   84536:	3090      	adds	r0, #144	; 0x90
   84538:	5015      	str	r5, [r2, r0]
		udd_disable_stall_handshake(ep_index);
   8453a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
		udd_enable_endpoint_bank_autoswitch(ep_index);
   8453e:	4d0a      	ldr	r5, [pc, #40]	; (84568 <udd_ep_clear_halt+0xbc>)
		udd_disable_stall_handshake(ep_index);
   84540:	6030      	str	r0, [r6, #0]
		udd_enable_endpoint_bank_autoswitch(ep_index);
   84542:	5950      	ldr	r0, [r2, r5]
   84544:	f440 7000 	orr.w	r0, r0, #512	; 0x200
   84548:	5150      	str	r0, [r2, r5]
	if (b_stall_cleared) {
   8454a:	e7d5      	b.n	844f8 <udd_ep_clear_halt+0x4c>
		return false;
   8454c:	2000      	movs	r0, #0
}
   8454e:	4770      	bx	lr
   84550:	200721cc 	.word	0x200721cc
   84554:	400ac220 	.word	0x400ac220
   84558:	400ac000 	.word	0x400ac000
   8455c:	400ac1c0 	.word	0x400ac1c0
   84560:	400ac130 	.word	0x400ac130
   84564:	400ac160 	.word	0x400ac160
   84568:	400ac100 	.word	0x400ac100

0008456c <udd_ep_run>:
{
   8456c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84570:	f000 000f 	and.w	r0, r0, #15
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
   84574:	4d43      	ldr	r5, [pc, #268]	; (84684 <udd_ep_run+0x118>)
	if (USB_DEVICE_MAX_EP < ep) {
   84576:	2808      	cmp	r0, #8
	bool b_dir_in = Is_udd_endpoint_in(ep & USB_EP_ADDR_MASK);
   84578:	f855 8020 	ldr.w	r8, [r5, r0, lsl #2]
	if (USB_DEVICE_MAX_EP < ep) {
   8457c:	d874      	bhi.n	84668 <udd_ep_run+0xfc>
	if ((!Is_udd_endpoint_enabled(ep))
   8457e:	2601      	movs	r6, #1
   84580:	4c41      	ldr	r4, [pc, #260]	; (84688 <udd_ep_run+0x11c>)
   84582:	fa06 f700 	lsl.w	r7, r6, r0
   84586:	69e4      	ldr	r4, [r4, #28]
   84588:	4227      	tst	r7, r4
   8458a:	d06d      	beq.n	84668 <udd_ep_run+0xfc>
			|| Is_udd_endpoint_stall_requested(ep)
   8458c:	4c3f      	ldr	r4, [pc, #252]	; (8468c <udd_ep_run+0x120>)
   8458e:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
   84592:	0324      	lsls	r4, r4, #12
   84594:	d468      	bmi.n	84668 <udd_ep_run+0xfc>
	ptr_job = &udd_ep_job[ep - 1];
   84596:	f100 3cff 	add.w	ip, r0, #4294967295
			|| ptr_job->stall_requested) {
   8459a:	4f3d      	ldr	r7, [pc, #244]	; (84690 <udd_ep_run+0x124>)
   8459c:	eb0c 0e4c 	add.w	lr, ip, ip, lsl #1
   845a0:	eb07 0ece 	add.w	lr, r7, lr, lsl #3
   845a4:	f89e 4014 	ldrb.w	r4, [lr, #20]
   845a8:	fa0c fa06 	lsl.w	sl, ip, r6
   845ac:	f014 0b04 	ands.w	fp, r4, #4
   845b0:	d15a      	bne.n	84668 <udd_ep_run+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   845b2:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   845b6:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   845b8:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   845bc:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 84694 <udd_ep_run+0x128>
   845c0:	f889 b000 	strb.w	fp, [r9]
	if (ptr_job->busy == true) {
   845c4:	f89e b014 	ldrb.w	fp, [lr, #20]
   845c8:	f01b 0f01 	tst.w	fp, #1
   845cc:	d14b      	bne.n	84666 <udd_ep_run+0xfa>
	ptr_job->busy = true;
   845ce:	f89e b014 	ldrb.w	fp, [lr, #20]
   845d2:	f04b 0b01 	orr.w	fp, fp, #1
   845d6:	f88e b014 	strb.w	fp, [lr, #20]
	if (cpu_irq_is_enabled_flags(flags))
   845da:	b924      	cbnz	r4, 845e6 <udd_ep_run+0x7a>
		cpu_irq_enable();
   845dc:	f889 6000 	strb.w	r6, [r9]
   845e0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   845e4:	b662      	cpsie	i
	ptr_job->buf_cnt = 0;
   845e6:	2600      	movs	r6, #0
	ptr_job->call_trans = callback;
   845e8:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
	ptr_job->buf = buf;
   845ec:	eb0a 040c 	add.w	r4, sl, ip
	ptr_job->call_trans = callback;
   845f0:	f847 e034 	str.w	lr, [r7, r4, lsl #3]
	ptr_job->buf = buf;
   845f4:	eb07 04c4 	add.w	r4, r7, r4, lsl #3
	ptr_job->buf_size = buf_size;
   845f8:	e9c4 2301 	strd	r2, r3, [r4, #4]
	ptr_job->buf_load = 0;
   845fc:	e9c4 6603 	strd	r6, r6, [r4, #12]
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   84600:	b911      	cbnz	r1, 84608 <udd_ep_run+0x9c>
   84602:	fab3 f183 	clz	r1, r3
   84606:	0949      	lsrs	r1, r1, #5
   84608:	44e2      	add	sl, ip
   8460a:	eb07 07ca 	add.w	r7, r7, sl, lsl #3
   8460e:	7d3b      	ldrb	r3, [r7, #20]
	if (!Is_udd_endpoint_dma_supported(ep)) {
   84610:	fa5f fc8c 	uxtb.w	ip, ip
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   84614:	f361 0341 	bfi	r3, r1, #1, #1
	if (!Is_udd_endpoint_dma_supported(ep)) {
   84618:	f1bc 0f05 	cmp.w	ip, #5
	ptr_job->b_shortpacket = b_shortpacket || (buf_size == 0);
   8461c:	753b      	strb	r3, [r7, #20]
	if (!Is_udd_endpoint_dma_supported(ep)) {
   8461e:	d926      	bls.n	8466e <udd_ep_run+0x102>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84620:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84624:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84626:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8462a:	2100      	movs	r1, #0
		udd_enable_endpoint_interrupt(ep);
   8462c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   84630:	f889 1000 	strb.w	r1, [r9]
   84634:	4914      	ldr	r1, [pc, #80]	; (84688 <udd_ep_run+0x11c>)
   84636:	4083      	lsls	r3, r0
		if (b_dir_in) {
   84638:	f418 7f80 	tst.w	r8, #256	; 0x100
		udd_enable_endpoint_interrupt(ep);
   8463c:	618b      	str	r3, [r1, #24]
			udd_enable_in_send_interrupt(ep);
   8463e:	bf14      	ite	ne
   84640:	2101      	movne	r1, #1
			udd_enable_out_received_interrupt(ep);
   84642:	2102      	moveq	r1, #2
			udd_disable_endpoint_bank_autoswitch(ep);
   84644:	f855 3020 	ldr.w	r3, [r5, r0, lsl #2]
   84648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   8464c:	f845 3020 	str.w	r3, [r5, r0, lsl #2]
			udd_enable_out_received_interrupt(ep);
   84650:	4b11      	ldr	r3, [pc, #68]	; (84698 <udd_ep_run+0x12c>)
   84652:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
		cpu_irq_enable();
   84656:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
   84658:	b93a      	cbnz	r2, 8466a <udd_ep_run+0xfe>
		cpu_irq_enable();
   8465a:	f889 0000 	strb.w	r0, [r9]
   8465e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84662:	b662      	cpsie	i
}
   84664:	e001      	b.n	8466a <udd_ep_run+0xfe>
	if (cpu_irq_is_enabled_flags(flags))
   84666:	b134      	cbz	r4, 84676 <udd_ep_run+0x10a>
		return false;
   84668:	2000      	movs	r0, #0
}
   8466a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	udd_ep_trans_done(ep);
   8466e:	4b0b      	ldr	r3, [pc, #44]	; (8469c <udd_ep_run+0x130>)
   84670:	4798      	blx	r3
	return true;
   84672:	2001      	movs	r0, #1
   84674:	e7f9      	b.n	8466a <udd_ep_run+0xfe>
		cpu_irq_enable();
   84676:	f889 6000 	strb.w	r6, [r9]
  __ASM volatile ("dmb 0xF":::"memory");
   8467a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8467e:	b662      	cpsie	i
		return false; // Job already on going
   84680:	4620      	mov	r0, r4
}
   84682:	e7f2      	b.n	8466a <udd_ep_run+0xfe>
   84684:	400ac100 	.word	0x400ac100
   84688:	400ac000 	.word	0x400ac000
   8468c:	400ac1c0 	.word	0x400ac1c0
   84690:	200721cc 	.word	0x200721cc
   84694:	20070b04 	.word	0x20070b04
   84698:	400ac1f0 	.word	0x400ac1f0
   8469c:	00083d19 	.word	0x00083d19

000846a0 <udd_ep_alloc>:
	ep = ep & USB_EP_ADDR_MASK;
   846a0:	f000 030f 	and.w	r3, r0, #15
	if (ep > USB_DEVICE_MAX_EP) {
   846a4:	2b08      	cmp	r3, #8
   846a6:	f200 80da 	bhi.w	8485e <udd_ep_alloc+0x1be>
{
   846aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (Is_udd_endpoint_enabled(ep)) {
   846ae:	4c74      	ldr	r4, [pc, #464]	; (84880 <udd_ep_alloc+0x1e0>)
{
   846b0:	b085      	sub	sp, #20
	if (Is_udd_endpoint_enabled(ep)) {
   846b2:	69e5      	ldr	r5, [r4, #28]
   846b4:	2401      	movs	r4, #1
   846b6:	409c      	lsls	r4, r3
   846b8:	4025      	ands	r5, r4
   846ba:	f040 80cc 	bne.w	84856 <udd_ep_alloc+0x1b6>
	switch (bmAttributes & USB_EP_TYPE_MASK) {
   846be:	f001 0403 	and.w	r4, r1, #3
   846c2:	3c01      	subs	r4, #1
   846c4:	b2e4      	uxtb	r4, r4
   846c6:	2c02      	cmp	r4, #2
   846c8:	f200 80c5 	bhi.w	84856 <udd_ep_alloc+0x1b6>
   846cc:	4e6d      	ldr	r6, [pc, #436]	; (84884 <udd_ep_alloc+0x1e4>)
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   846ce:	4f6e      	ldr	r7, [pc, #440]	; (84888 <udd_ep_alloc+0x1e8>)
   846d0:	5d34      	ldrb	r4, [r6, r4]
	if (ep > 2) nb_bank = 1;
   846d2:	2b02      	cmp	r3, #2
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   846d4:	ea4f 21c1 	mov.w	r1, r1, lsl #11
	switch (nb_bank) {
   846d8:	bf98      	it	ls
   846da:	f104 36ff 	addls.w	r6, r4, #4294967295
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   846de:	f401 5cc0 	and.w	ip, r1, #6144	; 0x1800
   846e2:	f857 1023 	ldr.w	r1, [r7, r3, lsl #2]
   846e6:	bf96      	itet	ls
   846e8:	b2f6      	uxtbls	r6, r6
   846ea:	462e      	movhi	r6, r5
   846ec:	00b6      	lslls	r6, r6, #2
   846ee:	f421 51cb 	bic.w	r1, r1, #6496	; 0x1960
   846f2:	f010 0f80 	tst.w	r0, #128	; 0x80
   846f6:	bf18      	it	ne
   846f8:	f44f 7580 	movne.w	r5, #256	; 0x100
   846fc:	f021 011c 	bic.w	r1, r1, #28
   84700:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   84704:	461c      	mov	r4, r3
   84706:	ea41 010c 	orr.w	r1, r1, ip
   8470a:	eb07 0e83 	add.w	lr, r7, r3, lsl #2
   8470e:	f0c0 80a8 	bcc.w	84862 <udd_ep_alloc+0x1c2>
   84712:	2270      	movs	r2, #112	; 0x70
	ep_allocated = 1 << ep;
   84714:	f04f 0801 	mov.w	r8, #1
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   84718:	4331      	orrs	r1, r6
   8471a:	430d      	orrs	r5, r1
   8471c:	432a      	orrs	r2, r5
   8471e:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   84722:	0701      	lsls	r1, r0, #28
	ep_allocated = 1 << ep;
   84724:	fa08 f703 	lsl.w	r7, r8, r3
   84728:	b2be      	uxth	r6, r7
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8472a:	d41b      	bmi.n	84764 <udd_ep_alloc+0xc4>
   8472c:	2208      	movs	r2, #8
		if (Is_udd_endpoint_enabled(i)) {
   8472e:	469c      	mov	ip, r3
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   84730:	4956      	ldr	r1, [pc, #344]	; (8488c <udd_ep_alloc+0x1ec>)
		if (Is_udd_endpoint_enabled(i)) {
   84732:	4f53      	ldr	r7, [pc, #332]	; (84880 <udd_ep_alloc+0x1e0>)
   84734:	69fb      	ldr	r3, [r7, #28]
   84736:	fa08 f002 	lsl.w	r0, r8, r2
   8473a:	4203      	tst	r3, r0
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   8473c:	f102 32ff 	add.w	r2, r2, #4294967295
   84740:	b2d5      	uxtb	r5, r2
		if (Is_udd_endpoint_enabled(i)) {
   84742:	d009      	beq.n	84758 <udd_ep_alloc+0xb8>
			udd_disable_endpoint(i);
   84744:	69fb      	ldr	r3, [r7, #28]
			ep_allocated |= 1 << i;
   84746:	4306      	orrs	r6, r0
			udd_disable_endpoint(i);
   84748:	ea23 0000 	bic.w	r0, r3, r0
   8474c:	61f8      	str	r0, [r7, #28]
			udd_unallocate_memory(i);
   8474e:	6808      	ldr	r0, [r1, #0]
			ep_allocated |= 1 << i;
   84750:	b2b6      	uxth	r6, r6
			udd_unallocate_memory(i);
   84752:	f020 0002 	bic.w	r0, r0, #2
   84756:	6008      	str	r0, [r1, #0]
	for (i = USB_DEVICE_MAX_EP; i > ep; i--) {
   84758:	4565      	cmp	r5, ip
   8475a:	f1a1 0104 	sub.w	r1, r1, #4
   8475e:	d8e9      	bhi.n	84734 <udd_ep_alloc+0x94>
		if (ep_allocated & (1 << i)) {
   84760:	4663      	mov	r3, ip
   84762:	4637      	mov	r7, r6
   84764:	f8df 9128 	ldr.w	r9, [pc, #296]	; 84890 <udd_ep_alloc+0x1f0>
   84768:	eb03 0643 	add.w	r6, r3, r3, lsl #1
   8476c:	4675      	mov	r5, lr
			udd_enable_endpoint(i);
   8476e:	f8df 8110 	ldr.w	r8, [pc, #272]	; 84880 <udd_ep_alloc+0x1e0>
   84772:	eb09 06c6 	add.w	r6, r9, r6, lsl #3
   84776:	b2db      	uxtb	r3, r3
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   84778:	9703      	str	r7, [sp, #12]
   8477a:	e029      	b.n	847d0 <udd_ep_alloc+0x130>
					&& !Is_udd_endpoint_in(i)) {
   8477c:	682a      	ldr	r2, [r5, #0]
   8477e:	05d2      	lsls	r2, r2, #23
   84780:	d456      	bmi.n	84830 <udd_ep_alloc+0x190>
					ptr_job->buf_cnt -= ptr_job->buf_load;
   84782:	e956 7203 	ldrd	r7, r2, [r6, #-12]
   84786:	1aba      	subs	r2, r7, r2
   84788:	f846 2c0c 	str.w	r2, [r6, #-12]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   8478c:	f8d5 c000 	ldr.w	ip, [r5]
   84790:	f856 7c14 	ldr.w	r7, [r6, #-20]
   84794:	f41c 7f80 	tst.w	ip, #256	; 0x100
   84798:	bf18      	it	ne
   8479a:	f043 0080 	orrne.w	r0, r3, #128	; 0x80
						ptr_job->b_shortpacket,
   8479e:	4471      	add	r1, lr
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   847a0:	f856 3c10 	ldr.w	r3, [r6, #-16]
						ptr_job->b_shortpacket,
   847a4:	eb09 01c1 	add.w	r1, r9, r1, lsl #3
   847a8:	7d09      	ldrb	r1, [r1, #20]
				b_restart = udd_ep_run(Is_udd_endpoint_in(i) ?
   847aa:	1a9b      	subs	r3, r3, r2
   847ac:	443a      	add	r2, r7
   847ae:	f856 7c18 	ldr.w	r7, [r6, #-24]
   847b2:	f3c1 0140 	ubfx	r1, r1, #1, #1
   847b6:	9700      	str	r7, [sp, #0]
   847b8:	4f36      	ldr	r7, [pc, #216]	; (84894 <udd_ep_alloc+0x1f4>)
   847ba:	47b8      	blx	r7
				if (!b_restart) {
   847bc:	2800      	cmp	r0, #0
   847be:	d04a      	beq.n	84856 <udd_ep_alloc+0x1b6>
	for (i = ep; i <= USB_DEVICE_MAX_EP; i++) {
   847c0:	3401      	adds	r4, #1
   847c2:	b2e3      	uxtb	r3, r4
   847c4:	2b09      	cmp	r3, #9
   847c6:	f105 0504 	add.w	r5, r5, #4
   847ca:	f106 0618 	add.w	r6, r6, #24
   847ce:	d053      	beq.n	84878 <udd_ep_alloc+0x1d8>
		if (ep_allocated & (1 << i)) {
   847d0:	9a03      	ldr	r2, [sp, #12]
   847d2:	4618      	mov	r0, r3
   847d4:	4122      	asrs	r2, r4
   847d6:	07d2      	lsls	r2, r2, #31
   847d8:	d5f2      	bpl.n	847c0 <udd_ep_alloc+0x120>
			udd_ep_job_t *ptr_job = &udd_ep_job[i - 1];
   847da:	1e61      	subs	r1, r4, #1
			bool b_restart = ptr_job->busy;
   847dc:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
   847e0:	eb09 0ccc 	add.w	ip, r9, ip, lsl #3
   847e4:	f89c a014 	ldrb.w	sl, [ip, #20]
			udd_enable_endpoint(i);
   847e8:	2201      	movs	r2, #1
			ptr_job->busy = false;
   847ea:	46d3      	mov	fp, sl
   847ec:	f36f 0b00 	bfc	fp, #0, #1
   847f0:	f88c b014 	strb.w	fp, [ip, #20]
			udd_allocate_memory(i);
   847f4:	f8d5 b000 	ldr.w	fp, [r5]
			udd_enable_endpoint(i);
   847f8:	40a2      	lsls	r2, r4
			udd_allocate_memory(i);
   847fa:	f04b 0b02 	orr.w	fp, fp, #2
   847fe:	f8c5 b000 	str.w	fp, [r5]
			udd_enable_endpoint(i);
   84802:	f8d8 b01c 	ldr.w	fp, [r8, #28]
			bool b_restart = ptr_job->busy;
   84806:	f00a 0a01 	and.w	sl, sl, #1
			udd_enable_endpoint(i);
   8480a:	ea42 020b 	orr.w	r2, r2, fp
   8480e:	f8c8 201c 	str.w	r2, [r8, #28]
			if ((!Is_udd_endpoint_configured(i)) && (1)) { //this is dumb
   84812:	6b2a      	ldr	r2, [r5, #48]	; 0x30
			bool b_restart = ptr_job->busy;
   84814:	ea4f 0e41 	mov.w	lr, r1, lsl #1
			if ((!Is_udd_endpoint_configured(i)) && (1)) { //this is dumb
   84818:	0357      	lsls	r7, r2, #13
   8481a:	d50c      	bpl.n	84836 <udd_ep_alloc+0x196>
			udd_enable_endpoint_bank_autoswitch(i);
   8481c:	682a      	ldr	r2, [r5, #0]
   8481e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
   84822:	602a      	str	r2, [r5, #0]
			if (b_restart) {
   84824:	f1ba 0f00 	cmp.w	sl, #0
   84828:	d0ca      	beq.n	847c0 <udd_ep_alloc+0x120>
				if (!Is_udd_endpoint_dma_supported(i)
   8482a:	1e5a      	subs	r2, r3, #1
   8482c:	2a05      	cmp	r2, #5
   8482e:	d8a5      	bhi.n	8477c <udd_ep_alloc+0xdc>
						&ptr_job->buf[ptr_job->buf_cnt],
   84830:	f856 2c0c 	ldr.w	r2, [r6, #-12]
   84834:	e7aa      	b.n	8478c <udd_ep_alloc+0xec>
				if (NULL == ptr_job->call_trans) {
   84836:	f8dc 3000 	ldr.w	r3, [ip]
   8483a:	b163      	cbz	r3, 84856 <udd_ep_alloc+0x1b6>
				if (Is_udd_endpoint_in(i)) {
   8483c:	682a      	ldr	r2, [r5, #0]
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   8483e:	4471      	add	r1, lr
				if (Is_udd_endpoint_in(i)) {
   84840:	05d4      	lsls	r4, r2, #23
					i |= USB_EP_DIR_IN;
   84842:	bf48      	it	mi
   84844:	f040 0080 	orrmi.w	r0, r0, #128	; 0x80
				ptr_job->call_trans(UDD_EP_TRANSFER_ABORT,
   84848:	eb09 09c1 	add.w	r9, r9, r1, lsl #3
   8484c:	4602      	mov	r2, r0
   8484e:	f8d9 100c 	ldr.w	r1, [r9, #12]
   84852:	2001      	movs	r0, #1
   84854:	4798      	blx	r3
				return false;
   84856:	2000      	movs	r0, #0
}
   84858:	b005      	add	sp, #20
   8485a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   8485e:	2000      	movs	r0, #0
}
   84860:	4770      	bx	lr
	udd_configure_endpoint(ep, bmAttributes, (b_dir_in ? 1 : 0),
   84862:	2a08      	cmp	r2, #8
   84864:	bf38      	it	cc
   84866:	2208      	movcc	r2, #8
   84868:	0052      	lsls	r2, r2, #1
   8486a:	3a01      	subs	r2, #1
   8486c:	fab2 f282 	clz	r2, r2
   84870:	f1c2 021c 	rsb	r2, r2, #28
   84874:	0112      	lsls	r2, r2, #4
   84876:	e74d      	b.n	84714 <udd_ep_alloc+0x74>
	return true;
   84878:	2001      	movs	r0, #1
}
   8487a:	b005      	add	sp, #20
   8487c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84880:	400ac000 	.word	0x400ac000
   84884:	0008cb54 	.word	0x0008cb54
   84888:	400ac100 	.word	0x400ac100
   8488c:	400ac120 	.word	0x400ac120
   84890:	200721cc 	.word	0x200721cc
   84894:	0008456d 	.word	0x0008456d

00084898 <udd_ep_abort>:
	uint8_t ep_index = ep & USB_EP_ADDR_MASK;
   84898:	f000 020f 	and.w	r2, r0, #15
	if (!Is_udd_endpoint_dma_supported(ep_index)) {
   8489c:	f102 3cff 	add.w	ip, r2, #4294967295
   848a0:	fa5f f38c 	uxtb.w	r3, ip
   848a4:	2b05      	cmp	r3, #5
{
   848a6:	b570      	push	{r4, r5, r6, lr}
	if (!Is_udd_endpoint_dma_supported(ep_index)) {
   848a8:	d919      	bls.n	848de <udd_ep_abort+0x46>
		udd_disable_endpoint_interrupt(ep_index);
   848aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		udd_disable_out_received_interrupt(ep_index);
   848ae:	2502      	movs	r5, #2
		udd_disable_in_send_interrupt(ep_index);
   848b0:	2401      	movs	r4, #1
		udd_disable_out_received_interrupt(ep_index);
   848b2:	4920      	ldr	r1, [pc, #128]	; (84934 <udd_ep_abort+0x9c>)
		udd_disable_endpoint_interrupt(ep_index);
   848b4:	4e20      	ldr	r6, [pc, #128]	; (84938 <udd_ep_abort+0xa0>)
   848b6:	4093      	lsls	r3, r2
   848b8:	6173      	str	r3, [r6, #20]
		udd_disable_out_received_interrupt(ep_index);
   848ba:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
		udd_disable_in_send_interrupt(ep_index);
   848be:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
	udd_disable_endpoint_interrupt(ep_index);
   848c2:	491d      	ldr	r1, [pc, #116]	; (84938 <udd_ep_abort+0xa0>)
   848c4:	614b      	str	r3, [r1, #20]
	if (ep & USB_EP_DIR_IN) {
   848c6:	0601      	lsls	r1, r0, #24
   848c8:	d41b      	bmi.n	84902 <udd_ep_abort+0x6a>
}
   848ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	udd_ep_finish_job(&udd_ep_job[ep - 1], true, ep);
   848ce:	481b      	ldr	r0, [pc, #108]	; (8493c <udd_ep_abort+0xa4>)
   848d0:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   848d4:	2101      	movs	r1, #1
   848d6:	4b1a      	ldr	r3, [pc, #104]	; (84940 <udd_ep_abort+0xa8>)
   848d8:	eb00 00cc 	add.w	r0, r0, ip, lsl #3
   848dc:	4718      	bx	r3
		udd_disable_endpoint_dma_interrupt(ep_index);
   848de:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
		udd_endpoint_dma_set_control(ep_index, 0);
   848e2:	2500      	movs	r5, #0
		udd_disable_endpoint_interrupt(ep_index);
   848e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
		udd_endpoint_dma_set_control(ep_index, 0);
   848e8:	4916      	ldr	r1, [pc, #88]	; (84944 <udd_ep_abort+0xac>)
		udd_disable_endpoint_dma_interrupt(ep_index);
   848ea:	4e13      	ldr	r6, [pc, #76]	; (84938 <udd_ep_abort+0xa0>)
		udd_endpoint_dma_set_control(ep_index, 0);
   848ec:	eb01 1102 	add.w	r1, r1, r2, lsl #4
		udd_disable_endpoint_dma_interrupt(ep_index);
   848f0:	fa04 f40c 	lsl.w	r4, r4, ip
   848f4:	6174      	str	r4, [r6, #20]
		udd_endpoint_dma_set_control(ep_index, 0);
   848f6:	608d      	str	r5, [r1, #8]
	udd_disable_endpoint_interrupt(ep_index);
   848f8:	490f      	ldr	r1, [pc, #60]	; (84938 <udd_ep_abort+0xa0>)
		udd_disable_endpoint_interrupt(ep_index);
   848fa:	4093      	lsls	r3, r2
	udd_disable_endpoint_interrupt(ep_index);
   848fc:	614b      	str	r3, [r1, #20]
	if (ep & USB_EP_DIR_IN) {
   848fe:	0601      	lsls	r1, r0, #24
   84900:	d5e3      	bpl.n	848ca <udd_ep_abort+0x32>
		while(udd_nb_busy_bank(ep_index)) {
   84902:	4b11      	ldr	r3, [pc, #68]	; (84948 <udd_ep_abort+0xb0>)
   84904:	0095      	lsls	r5, r2, #2
   84906:	eb03 0e82 	add.w	lr, r3, r2, lsl #2
   8490a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
   8490e:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   84912:	d0da      	beq.n	848ca <udd_ep_abort+0x32>
			udd_kill_last_in_bank(ep_index);
   84914:	f44f 5400 	mov.w	r4, #8192	; 0x2000
   84918:	480c      	ldr	r0, [pc, #48]	; (8494c <udd_ep_abort+0xb4>)
			while(Is_udd_kill_last(ep_index));
   8491a:	490d      	ldr	r1, [pc, #52]	; (84950 <udd_ep_abort+0xb8>)
			udd_kill_last_in_bank(ep_index);
   8491c:	4428      	add	r0, r5
			while(Is_udd_kill_last(ep_index));
   8491e:	4429      	add	r1, r5
			udd_kill_last_in_bank(ep_index);
   84920:	6004      	str	r4, [r0, #0]
			while(Is_udd_kill_last(ep_index));
   84922:	680b      	ldr	r3, [r1, #0]
   84924:	049b      	lsls	r3, r3, #18
   84926:	d4fc      	bmi.n	84922 <udd_ep_abort+0x8a>
		while(udd_nb_busy_bank(ep_index)) {
   84928:	f8de 3000 	ldr.w	r3, [lr]
   8492c:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   84930:	d1f6      	bne.n	84920 <udd_ep_abort+0x88>
   84932:	e7ca      	b.n	848ca <udd_ep_abort+0x32>
   84934:	400ac220 	.word	0x400ac220
   84938:	400ac000 	.word	0x400ac000
   8493c:	200721cc 	.word	0x200721cc
   84940:	00083cdd 	.word	0x00083cdd
   84944:	400ac300 	.word	0x400ac300
   84948:	400ac130 	.word	0x400ac130
   8494c:	400ac1f0 	.word	0x400ac1f0
   84950:	400ac1c0 	.word	0x400ac1c0

00084954 <UOTGHS_Handler>:
{
   84954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   84958:	4bb1      	ldr	r3, [pc, #708]	; (84c20 <UOTGHS_Handler+0x2cc>)
{
   8495a:	b083      	sub	sp, #12
	if (!pmc_is_wakeup_clocks_restored() && !Is_udd_suspend()) {
   8495c:	4798      	blx	r3
   8495e:	b928      	cbnz	r0, 8496c <UOTGHS_Handler+0x18>
   84960:	4bb0      	ldr	r3, [pc, #704]	; (84c24 <UOTGHS_Handler+0x2d0>)
   84962:	685b      	ldr	r3, [r3, #4]
   84964:	f013 0301 	ands.w	r3, r3, #1
   84968:	f000 80b8 	beq.w	84adc <UOTGHS_Handler+0x188>
	if (Is_udd_sof()) {
   8496c:	4aad      	ldr	r2, [pc, #692]	; (84c24 <UOTGHS_Handler+0x2d0>)
   8496e:	6853      	ldr	r3, [r2, #4]
   84970:	075f      	lsls	r7, r3, #29
   84972:	f100 80a0 	bmi.w	84ab6 <UOTGHS_Handler+0x162>
	if (Is_udd_msof()) {
   84976:	6853      	ldr	r3, [r2, #4]
   84978:	f013 0302 	ands.w	r3, r3, #2
   8497c:	f040 80a7 	bne.w	84ace <UOTGHS_Handler+0x17a>
	if (!Is_udd_endpoint_interrupt(0)) {
   84980:	6851      	ldr	r1, [r2, #4]
   84982:	04ce      	lsls	r6, r1, #19
   84984:	d523      	bpl.n	849ce <UOTGHS_Handler+0x7a>
	udd_disable_nak_out_interrupt(0);
   84986:	2108      	movs	r1, #8
	udd_disable_nak_in_interrupt(0);
   84988:	2010      	movs	r0, #16
   8498a:	f8c2 0220 	str.w	r0, [r2, #544]	; 0x220
	udd_disable_nak_out_interrupt(0);
   8498e:	f8c2 1220 	str.w	r1, [r2, #544]	; 0x220
	if (Is_udd_setup_received(0)) {
   84992:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   84996:	074d      	lsls	r5, r1, #29
   84998:	f100 8181 	bmi.w	84c9e <UOTGHS_Handler+0x34a>
	if (Is_udd_in_send(0) && Is_udd_in_send_interrupt_enabled(0)) {
   8499c:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   849a0:	07cc      	lsls	r4, r1, #31
   849a2:	d504      	bpl.n	849ae <UOTGHS_Handler+0x5a>
   849a4:	f8d2 21c0 	ldr.w	r2, [r2, #448]	; 0x1c0
   849a8:	07d0      	lsls	r0, r2, #31
   849aa:	f100 832c 	bmi.w	85006 <UOTGHS_Handler+0x6b2>
	if (Is_udd_out_received(0)) {
   849ae:	4a9d      	ldr	r2, [pc, #628]	; (84c24 <UOTGHS_Handler+0x2d0>)
   849b0:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   849b4:	0789      	lsls	r1, r1, #30
   849b6:	f100 8221 	bmi.w	84dfc <UOTGHS_Handler+0x4a8>
	if (Is_udd_nak_out(0)) {
   849ba:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   849be:	070f      	lsls	r7, r1, #28
   849c0:	f100 8249 	bmi.w	84e56 <UOTGHS_Handler+0x502>
	if (Is_udd_nak_in(0)) {
   849c4:	f8d2 1130 	ldr.w	r1, [r2, #304]	; 0x130
   849c8:	06cd      	lsls	r5, r1, #27
   849ca:	f100 819b 	bmi.w	84d04 <UOTGHS_Handler+0x3b0>
{
	udd_ep_id_t ep;
	udd_ep_job_t *ptr_job;

	// For each endpoint different of control endpoint (0)
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   849ce:	4e96      	ldr	r6, [pc, #600]	; (84c28 <UOTGHS_Handler+0x2d4>)
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   849d0:	2101      	movs	r1, #1
   849d2:	4635      	mov	r5, r6
   849d4:	4634      	mov	r4, r6
   849d6:	f04f 0e04 	mov.w	lr, #4
		// Get job corresponding at endpoint
		ptr_job = &udd_ep_job[ep - 1];

#ifdef UDD_EP_DMA_SUPPORTED
		// Check DMA event
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   849da:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
		}
#endif
#ifdef UDD_EP_FIFO_SUPPORTED
		// Check RXRDY and TXEMPTY event for none DMA endpoints
		if (!Is_udd_endpoint_dma_supported(ep)
				&& Is_udd_endpoint_interrupt_enabled(ep)) {
   849de:	f44f 5a80 	mov.w	sl, #4096	; 0x1000
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   849e2:	4f92      	ldr	r7, [pc, #584]	; (84c2c <UOTGHS_Handler+0x2d8>)
   849e4:	4a92      	ldr	r2, [pc, #584]	; (84c30 <UOTGHS_Handler+0x2dc>)
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   849e6:	f8df 823c 	ldr.w	r8, [pc, #572]	; 84c24 <UOTGHS_Handler+0x2d0>
   849ea:	e029      	b.n	84a40 <UOTGHS_Handler+0xec>
				&& Is_udd_endpoint_interrupt_enabled(ep)) {
   849ec:	fa0a fc01 	lsl.w	ip, sl, r1
				return true;
			}
		}
#endif // UDD_EP_FIFO_SUPPORTED
		// Check empty bank interrupt event
		if (Is_udd_endpoint_interrupt_enabled(ep)) {
   849f0:	f8d8 b010 	ldr.w	fp, [r8, #16]
   849f4:	ea1b 0f0c 	tst.w	fp, ip
   849f8:	d014      	beq.n	84a24 <UOTGHS_Handler+0xd0>
			dbg_print("bg%x: ", ep);
			if (Is_udd_in_send_interrupt_enabled(ep)
   849fa:	f8d7 b000 	ldr.w	fp, [r7]
   849fe:	f01b 0f01 	tst.w	fp, #1
   84a02:	d005      	beq.n	84a10 <UOTGHS_Handler+0xbc>
					&& Is_udd_in_send(ep)) {
   84a04:	f8d2 b000 	ldr.w	fp, [r2]
   84a08:	f01b 0f01 	tst.w	fp, #1
   84a0c:	f040 83a8 	bne.w	85160 <UOTGHS_Handler+0x80c>
				udd_ack_in_send(ep);
				udd_ack_fifocon(ep);
				udd_ep_finish_job(ptr_job, false, ep);
				return true;
			}
			if (Is_udd_bank_interrupt_enabled(ep)
   84a10:	6838      	ldr	r0, [r7, #0]
   84a12:	04c0      	lsls	r0, r0, #19
   84a14:	d506      	bpl.n	84a24 <UOTGHS_Handler+0xd0>
					&& (0 == udd_nb_busy_bank(ep))) {
   84a16:	6810      	ldr	r0, [r2, #0]
   84a18:	f410 5f40 	tst.w	r0, #12288	; 0x3000
   84a1c:	f3c0 3b01 	ubfx	fp, r0, #12, #2
   84a20:	f000 83af 	beq.w	85182 <UOTGHS_Handler+0x82e>
	for (ep = 1; ep <= USB_DEVICE_MAX_EP; ep++) {
   84a24:	3301      	adds	r3, #1
   84a26:	2b08      	cmp	r3, #8
   84a28:	f10e 0e04 	add.w	lr, lr, #4
   84a2c:	f102 0204 	add.w	r2, r2, #4
   84a30:	f107 0704 	add.w	r7, r7, #4
   84a34:	f104 0418 	add.w	r4, r4, #24
   84a38:	f101 0101 	add.w	r1, r1, #1
   84a3c:	f000 80a5 	beq.w	84b8a <UOTGHS_Handler+0x236>
		if (Is_udd_endpoint_dma_interrupt_enabled(ep)
   84a40:	f8d8 b010 	ldr.w	fp, [r8, #16]
   84a44:	fa09 fc03 	lsl.w	ip, r9, r3
   84a48:	ea1b 0f0c 	tst.w	fp, ip
   84a4c:	b2c8      	uxtb	r0, r1
   84a4e:	d005      	beq.n	84a5c <UOTGHS_Handler+0x108>
				&& Is_udd_endpoint_dma_interrupt(ep)) {
   84a50:	f8d8 b004 	ldr.w	fp, [r8, #4]
   84a54:	ea1c 0f0b 	tst.w	ip, fp
   84a58:	f040 8316 	bne.w	85088 <UOTGHS_Handler+0x734>
		if (!Is_udd_endpoint_dma_supported(ep)
   84a5c:	2b05      	cmp	r3, #5
   84a5e:	d9c5      	bls.n	849ec <UOTGHS_Handler+0x98>
				&& Is_udd_endpoint_interrupt_enabled(ep)) {
   84a60:	f8d8 b010 	ldr.w	fp, [r8, #16]
   84a64:	fa0a fc01 	lsl.w	ip, sl, r1
   84a68:	ea1b 0f0c 	tst.w	fp, ip
   84a6c:	d0c0      	beq.n	849f0 <UOTGHS_Handler+0x9c>
			if (Is_udd_out_received(ep)
   84a6e:	f8d2 b000 	ldr.w	fp, [r2]
   84a72:	f01b 0f02 	tst.w	fp, #2
   84a76:	d005      	beq.n	84a84 <UOTGHS_Handler+0x130>
				&& Is_udd_out_received_interrupt_enabled(ep)) {
   84a78:	f8d7 b000 	ldr.w	fp, [r7]
   84a7c:	f01b 0f02 	tst.w	fp, #2
   84a80:	f040 8156 	bne.w	84d30 <UOTGHS_Handler+0x3dc>
			if (Is_udd_in_send(ep)
   84a84:	f8d2 b000 	ldr.w	fp, [r2]
   84a88:	f01b 0f01 	tst.w	fp, #1
   84a8c:	d12e      	bne.n	84aec <UOTGHS_Handler+0x198>
			if (Is_udd_overflow(ep)
   84a8e:	f8d2 b000 	ldr.w	fp, [r2]
   84a92:	f01b 0f20 	tst.w	fp, #32
   84a96:	d109      	bne.n	84aac <UOTGHS_Handler+0x158>
					|| Is_udd_underflow(ep)
   84a98:	f8d2 b000 	ldr.w	fp, [r2]
   84a9c:	f01b 0f04 	tst.w	fp, #4
   84aa0:	d104      	bne.n	84aac <UOTGHS_Handler+0x158>
					|| Is_udd_crc_error(ep)) {
   84aa2:	f8d2 b000 	ldr.w	fp, [r2]
   84aa6:	f01b 0f40 	tst.w	fp, #64	; 0x40
   84aaa:	d0a1      	beq.n	849f0 <UOTGHS_Handler+0x9c>
				udd_ep_abort(ep);
   84aac:	4b61      	ldr	r3, [pc, #388]	; (84c34 <UOTGHS_Handler+0x2e0>)
}
   84aae:	b003      	add	sp, #12
   84ab0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				udd_ep_abort(ep);
   84ab4:	4718      	bx	r3
		udd_ack_sof();
   84ab6:	2304      	movs	r3, #4
   84ab8:	6093      	str	r3, [r2, #8]
		if (Is_udd_full_speed_mode()) {
   84aba:	f8d2 3804 	ldr.w	r3, [r2, #2052]	; 0x804
   84abe:	f413 5f40 	tst.w	r3, #12288	; 0x3000
   84ac2:	d05f      	beq.n	84b84 <UOTGHS_Handler+0x230>
		UDC_SOF_EVENT();
   84ac4:	4b5c      	ldr	r3, [pc, #368]	; (84c38 <UOTGHS_Handler+0x2e4>)
}
   84ac6:	b003      	add	sp, #12
   84ac8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udc_sof_notify();
   84acc:	4718      	bx	r3
		udd_ack_msof();
   84ace:	2102      	movs	r1, #2
		udc_sof_notify();
   84ad0:	4b5a      	ldr	r3, [pc, #360]	; (84c3c <UOTGHS_Handler+0x2e8>)
		udd_ack_msof();
   84ad2:	6091      	str	r1, [r2, #8]
}
   84ad4:	b003      	add	sp, #12
   84ad6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udc_sof_notify();
   84ada:	4718      	bx	r3
  __ASM volatile ("cpsid i" : : : "memory");
   84adc:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84ade:	f3bf 8f5f 	dmb	sy
		cpu_irq_disable();
   84ae2:	4a57      	ldr	r2, [pc, #348]	; (84c40 <UOTGHS_Handler+0x2ec>)
   84ae4:	7013      	strb	r3, [r2, #0]
}
   84ae6:	b003      	add	sp, #12
   84ae8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					&& Is_udd_in_send_interrupt_enabled(ep)) {
   84aec:	f8d7 b000 	ldr.w	fp, [r7]
   84af0:	f01b 0f01 	tst.w	fp, #1
   84af4:	d0cb      	beq.n	84a8e <UOTGHS_Handler+0x13a>
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84af6:	2708      	movs	r7, #8
   84af8:	4a52      	ldr	r2, [pc, #328]	; (84c44 <UOTGHS_Handler+0x2f0>)
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   84afa:	eb03 0843 	add.w	r8, r3, r3, lsl #1
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84afe:	f85e 2002 	ldr.w	r2, [lr, r2]
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   84b02:	eb05 08c8 	add.w	r8, r5, r8, lsl #3
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84b06:	f3c2 1202 	ubfx	r2, r2, #4, #3
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
   84b0a:	f8d8 900c 	ldr.w	r9, [r8, #12]
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84b0e:	4097      	lsls	r7, r2
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
   84b10:	f8d8 2008 	ldr.w	r2, [r8, #8]
	uint8_t *ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   84b14:	005e      	lsls	r6, r3, #1
	if (ptr_job->buf_cnt >= ptr_job->buf_size && !ptr_job->b_shortpacket) {
   84b16:	4591      	cmp	r9, r2
   84b18:	d305      	bcc.n	84b26 <UOTGHS_Handler+0x1d2>
   84b1a:	f898 2014 	ldrb.w	r2, [r8, #20]
   84b1e:	f012 0202 	ands.w	r2, r2, #2
   84b22:	f000 83fe 	beq.w	85322 <UOTGHS_Handler+0x9ce>
		udd_ack_in_send(ep);
   84b26:	2401      	movs	r4, #1
   84b28:	4a47      	ldr	r2, [pc, #284]	; (84c48 <UOTGHS_Handler+0x2f4>)
		ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   84b2a:	18f0      	adds	r0, r6, r3
   84b2c:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
		udd_ack_in_send(ep);
   84b30:	f84e 4002 	str.w	r4, [lr, r2]
		nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   84b34:	e9d0 2402 	ldrd	r2, r4, [r0, #8]
   84b38:	1b12      	subs	r2, r2, r4
		nb_data = min(nb_remain, pkt_size);
   84b3a:	42ba      	cmp	r2, r7
   84b3c:	bf28      	it	cs
   84b3e:	463a      	movcs	r2, r7
   84b40:	4616      	mov	r6, r2
		ptr_src = &ptr_job->buf[ptr_job->buf_cnt];
   84b42:	6842      	ldr	r2, [r0, #4]
   84b44:	4422      	add	r2, r4
		ptr_job->buf_cnt += nb_data;
   84b46:	4434      	add	r4, r6
		ptr_job->buf_load = nb_data;
   84b48:	e9c0 4603 	strd	r4, r6, [r0, #12]
		for (i = 0; i < nb_data; i++) {
   84b4c:	2e00      	cmp	r6, #0
   84b4e:	f000 8407 	beq.w	85360 <UOTGHS_Handler+0xa0c>
   84b52:	483e      	ldr	r0, [pc, #248]	; (84c4c <UOTGHS_Handler+0x2f8>)
	uint8_t *ptr_dst = (uint8_t *) & udd_get_endpoint_fifo_access(ep, 8);
   84b54:	03c9      	lsls	r1, r1, #15
   84b56:	4408      	add	r0, r1
   84b58:	1994      	adds	r4, r2, r6
			*ptr_dst++ = *ptr_src++;
   84b5a:	f812 1b01 	ldrb.w	r1, [r2], #1
		for (i = 0; i < nb_data; i++) {
   84b5e:	42a2      	cmp	r2, r4
			*ptr_dst++ = *ptr_src++;
   84b60:	f800 1f01 	strb.w	r1, [r0, #1]!
		for (i = 0; i < nb_data; i++) {
   84b64:	d1f9      	bne.n	84b5a <UOTGHS_Handler+0x206>
		udd_ack_fifocon(ep);
   84b66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   84b6a:	4a39      	ldr	r2, [pc, #228]	; (84c50 <UOTGHS_Handler+0x2fc>)
		if (nb_data < pkt_size) {
   84b6c:	42b7      	cmp	r7, r6
		udd_ack_fifocon(ep);
   84b6e:	f84e 1002 	str.w	r1, [lr, r2]
		if (nb_data < pkt_size) {
   84b72:	d9b8      	bls.n	84ae6 <UOTGHS_Handler+0x192>
			ptr_job->b_shortpacket = false;
   84b74:	2218      	movs	r2, #24
   84b76:	fb02 5303 	mla	r3, r2, r3, r5
   84b7a:	7d1a      	ldrb	r2, [r3, #20]
   84b7c:	f36f 0241 	bfc	r2, #1, #1
   84b80:	751a      	strb	r2, [r3, #20]
   84b82:	e7b0      	b.n	84ae6 <UOTGHS_Handler+0x192>
			udc_sof_notify();
   84b84:	4b2d      	ldr	r3, [pc, #180]	; (84c3c <UOTGHS_Handler+0x2e8>)
   84b86:	4798      	blx	r3
   84b88:	e79c      	b.n	84ac4 <UOTGHS_Handler+0x170>
	if (Is_udd_reset()) {
   84b8a:	4926      	ldr	r1, [pc, #152]	; (84c24 <UOTGHS_Handler+0x2d0>)
   84b8c:	684a      	ldr	r2, [r1, #4]
   84b8e:	f012 0208 	ands.w	r2, r2, #8
   84b92:	f040 81c5 	bne.w	84f20 <UOTGHS_Handler+0x5cc>
	if (Is_udd_suspend_interrupt_enabled() && Is_udd_suspend()) {
   84b96:	690b      	ldr	r3, [r1, #16]
   84b98:	07df      	lsls	r7, r3, #31
   84b9a:	d51e      	bpl.n	84bda <UOTGHS_Handler+0x286>
   84b9c:	684b      	ldr	r3, [r1, #4]
   84b9e:	07de      	lsls	r6, r3, #31
   84ba0:	d51b      	bpl.n	84bda <UOTGHS_Handler+0x286>
		udd_enable_wake_up_interrupt();
   84ba2:	2010      	movs	r0, #16
		udd_disable_suspend_interrupt();
   84ba4:	2401      	movs	r4, #1
		otg_unfreeze_clock();
   84ba6:	f8d1 3800 	ldr.w	r3, [r1, #2048]	; 0x800
   84baa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
   84bae:	f8c1 3800 	str.w	r3, [r1, #2048]	; 0x800
		udd_disable_suspend_interrupt();
   84bb2:	614c      	str	r4, [r1, #20]
		udd_enable_wake_up_interrupt();
   84bb4:	6188      	str	r0, [r1, #24]
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   84bb6:	f8d1 0800 	ldr.w	r0, [r1, #2048]	; 0x800
	if (!b_idle && udd_b_idle) {
   84bba:	4b26      	ldr	r3, [pc, #152]	; (84c54 <UOTGHS_Handler+0x300>)
		otg_freeze_clock(); // Mandatory to exit of sleep mode after a wakeup event
   84bbc:	f440 4080 	orr.w	r0, r0, #16384	; 0x4000
   84bc0:	f8c1 0800 	str.w	r0, [r1, #2048]	; 0x800
	if (!b_idle && udd_b_idle) {
   84bc4:	7819      	ldrb	r1, [r3, #0]
   84bc6:	2900      	cmp	r1, #0
   84bc8:	f040 8342 	bne.w	85250 <UOTGHS_Handler+0x8fc>
	udd_b_idle = b_idle;
   84bcc:	2100      	movs	r1, #0
		UDC_SUSPEND_EVENT();
   84bce:	4a22      	ldr	r2, [pc, #136]	; (84c58 <UOTGHS_Handler+0x304>)
	udd_b_idle = b_idle;
   84bd0:	7019      	strb	r1, [r3, #0]
}
   84bd2:	b003      	add	sp, #12
   84bd4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		UDC_RESUME_EVENT();
   84bd8:	4710      	bx	r2
	if (Is_udd_wake_up_interrupt_enabled() && Is_udd_wake_up()) {
   84bda:	4b12      	ldr	r3, [pc, #72]	; (84c24 <UOTGHS_Handler+0x2d0>)
   84bdc:	691a      	ldr	r2, [r3, #16]
   84bde:	06d5      	lsls	r5, r2, #27
   84be0:	d53e      	bpl.n	84c60 <UOTGHS_Handler+0x30c>
   84be2:	685a      	ldr	r2, [r3, #4]
   84be4:	06d4      	lsls	r4, r2, #27
   84be6:	d53b      	bpl.n	84c60 <UOTGHS_Handler+0x30c>
		otg_unfreeze_clock();
   84be8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84bec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   84bf0:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		while (!Is_otg_clock_usable()) {
   84bf4:	e002      	b.n	84bfc <UOTGHS_Handler+0x2a8>
			if (Is_udd_suspend()) {
   84bf6:	685a      	ldr	r2, [r3, #4]
   84bf8:	07d0      	lsls	r0, r2, #31
   84bfa:	d403      	bmi.n	84c04 <UOTGHS_Handler+0x2b0>
		while (!Is_otg_clock_usable()) {
   84bfc:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   84c00:	0451      	lsls	r1, r2, #17
   84c02:	d5f8      	bpl.n	84bf6 <UOTGHS_Handler+0x2a2>
		udd_disable_wake_up_interrupt();
   84c04:	2010      	movs	r0, #16
		udd_enable_suspend_interrupt();
   84c06:	2101      	movs	r1, #1
		udd_disable_wake_up_interrupt();
   84c08:	4a06      	ldr	r2, [pc, #24]	; (84c24 <UOTGHS_Handler+0x2d0>)
	if (b_idle && !udd_b_idle) {
   84c0a:	4b12      	ldr	r3, [pc, #72]	; (84c54 <UOTGHS_Handler+0x300>)
		udd_disable_wake_up_interrupt();
   84c0c:	6150      	str	r0, [r2, #20]
		udd_enable_suspend_interrupt();
   84c0e:	6191      	str	r1, [r2, #24]
	if (b_idle && !udd_b_idle) {
   84c10:	781a      	ldrb	r2, [r3, #0]
   84c12:	2a00      	cmp	r2, #0
   84c14:	f000 82d7 	beq.w	851c6 <UOTGHS_Handler+0x872>
	udd_b_idle = b_idle;
   84c18:	2101      	movs	r1, #1
		UDC_RESUME_EVENT();
   84c1a:	4a10      	ldr	r2, [pc, #64]	; (84c5c <UOTGHS_Handler+0x308>)
   84c1c:	e7d8      	b.n	84bd0 <UOTGHS_Handler+0x27c>
   84c1e:	bf00      	nop
   84c20:	00083c61 	.word	0x00083c61
   84c24:	400ac000 	.word	0x400ac000
   84c28:	200721cc 	.word	0x200721cc
   84c2c:	400ac1c4 	.word	0x400ac1c4
   84c30:	400ac134 	.word	0x400ac134
   84c34:	00084899 	.word	0x00084899
   84c38:	00081879 	.word	0x00081879
   84c3c:	000811c1 	.word	0x000811c1
   84c40:	20070b04 	.word	0x20070b04
   84c44:	400ac100 	.word	0x400ac100
   84c48:	400ac160 	.word	0x400ac160
   84c4c:	2017ffff 	.word	0x2017ffff
   84c50:	400ac220 	.word	0x400ac220
   84c54:	200721c1 	.word	0x200721c1
   84c58:	00081869 	.word	0x00081869
   84c5c:	00081871 	.word	0x00081871
	if (Is_otg_vbus_transition()) {
   84c60:	4ba0      	ldr	r3, [pc, #640]	; (84ee4 <UOTGHS_Handler+0x590>)
   84c62:	f8d3 2804 	ldr.w	r2, [r3, #2052]	; 0x804
   84c66:	0792      	lsls	r2, r2, #30
   84c68:	f57f af3d 	bpl.w	84ae6 <UOTGHS_Handler+0x192>
		otg_ack_vbus_transition();
   84c6c:	2102      	movs	r1, #2
		otg_unfreeze_clock();
   84c6e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84c72:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
   84c76:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		otg_ack_vbus_transition();
   84c7a:	f8c3 1808 	str.w	r1, [r3, #2056]	; 0x808
		otg_freeze_clock();
   84c7e:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
   84c82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
   84c86:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
		if (Is_otg_vbus_high()) {
   84c8a:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
   84c8e:	051b      	lsls	r3, r3, #20
   84c90:	f140 81f5 	bpl.w	8507e <UOTGHS_Handler+0x72a>
			udd_attach();
   84c94:	4b94      	ldr	r3, [pc, #592]	; (84ee8 <UOTGHS_Handler+0x594>)
}
   84c96:	b003      	add	sp, #12
   84c98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			udd_attach();
   84c9c:	4718      	bx	r3
	if (UDD_EPCTRL_SETUP != udd_ep_control_state) {
   84c9e:	4d93      	ldr	r5, [pc, #588]	; (84eec <UOTGHS_Handler+0x598>)
   84ca0:	782b      	ldrb	r3, [r5, #0]
   84ca2:	b1eb      	cbz	r3, 84ce0 <UOTGHS_Handler+0x38c>
	if (udd_g_ctrlreq.callback) {
   84ca4:	4c92      	ldr	r4, [pc, #584]	; (84ef0 <UOTGHS_Handler+0x59c>)
   84ca6:	6923      	ldr	r3, [r4, #16]
   84ca8:	b103      	cbz	r3, 84cac <UOTGHS_Handler+0x358>
		udd_g_ctrlreq.callback();
   84caa:	4798      	blx	r3
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84cac:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84cb0:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84cb2:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84cb6:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   84cb8:	2201      	movs	r2, #1
   84cba:	4b8e      	ldr	r3, [pc, #568]	; (84ef4 <UOTGHS_Handler+0x5a0>)
   84cbc:	7018      	strb	r0, [r3, #0]
   84cbe:	4889      	ldr	r0, [pc, #548]	; (84ee4 <UOTGHS_Handler+0x590>)
   84cc0:	f8c0 2220 	str.w	r2, [r0, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   84cc4:	b919      	cbnz	r1, 84cce <UOTGHS_Handler+0x37a>
		cpu_irq_enable();
   84cc6:	701a      	strb	r2, [r3, #0]
   84cc8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84ccc:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   84cce:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   84cd0:	2102      	movs	r1, #2
   84cd2:	4a84      	ldr	r2, [pc, #528]	; (84ee4 <UOTGHS_Handler+0x590>)
   84cd4:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
	udd_g_ctrlreq.over_under_run = NULL;
   84cd8:	e9c4 3304 	strd	r3, r3, [r4, #16]
	udd_g_ctrlreq.payload_size = 0;
   84cdc:	81a3      	strh	r3, [r4, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84cde:	702b      	strb	r3, [r5, #0]
	if (8 != udd_byte_count(0)) {
   84ce0:	4a80      	ldr	r2, [pc, #512]	; (84ee4 <UOTGHS_Handler+0x590>)
   84ce2:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   84ce6:	f3c3 530a 	ubfx	r3, r3, #20, #11
   84cea:	2b08      	cmp	r3, #8
   84cec:	f000 80c1 	beq.w	84e72 <UOTGHS_Handler+0x51e>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84cf0:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   84cf2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
		udd_ack_setup_received(0);
   84cf6:	2304      	movs	r3, #4
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84cf8:	7028      	strb	r0, [r5, #0]
	udd_enable_stall_handshake(0);
   84cfa:	f8c2 11f0 	str.w	r1, [r2, #496]	; 0x1f0
		udd_ack_setup_received(0);
   84cfe:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
		return; // Error data number doesn't correspond to SETUP packet
   84d02:	e6f0      	b.n	84ae6 <UOTGHS_Handler+0x192>
		udd_ack_nak_in(0);
   84d04:	2310      	movs	r3, #16
   84d06:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	if (Is_udd_out_received(0))
   84d0a:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   84d0e:	f013 0302 	ands.w	r3, r3, #2
   84d12:	f47f aee8 	bne.w	84ae6 <UOTGHS_Handler+0x192>
	if (UDD_EPCTRL_DATA_OUT == udd_ep_control_state) {
   84d16:	4875      	ldr	r0, [pc, #468]	; (84eec <UOTGHS_Handler+0x598>)
   84d18:	7801      	ldrb	r1, [r0, #0]
   84d1a:	2901      	cmp	r1, #1
   84d1c:	f000 82ab 	beq.w	85276 <UOTGHS_Handler+0x922>
	} else if (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP == udd_ep_control_state) {
   84d20:	2904      	cmp	r1, #4
   84d22:	f47f aee0 	bne.w	84ae6 <UOTGHS_Handler+0x192>
		udd_enable_stall_handshake(0);
   84d26:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   84d2a:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
   84d2e:	e6da      	b.n	84ae6 <UOTGHS_Handler+0x192>
	udd_ack_out_received(ep);
   84d30:	f04f 0b02 	mov.w	fp, #2
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84d34:	f04f 0808 	mov.w	r8, #8
   84d38:	4e6f      	ldr	r6, [pc, #444]	; (84ef8 <UOTGHS_Handler+0x5a4>)
	udd_ack_out_received(ep);
   84d3a:	f8df a1c0 	ldr.w	sl, [pc, #448]	; 84efc <UOTGHS_Handler+0x5a8>
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84d3e:	f85e 6006 	ldr.w	r6, [lr, r6]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   84d42:	eb03 0743 	add.w	r7, r3, r3, lsl #1
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84d46:	f3c6 1602 	ubfx	r6, r6, #4, #3
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   84d4a:	eb05 07c7 	add.w	r7, r5, r7, lsl #3
	uint32_t pkt_size = udd_get_endpoint_size(ep);
   84d4e:	fa08 f806 	lsl.w	r8, r8, r6
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   84d52:	e9d7 6902 	ldrd	r6, r9, [r7, #8]
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
   84d56:	687f      	ldr	r7, [r7, #4]
	udd_ack_out_received(ep);
   84d58:	f84e b00a 	str.w	fp, [lr, sl]
	nb_data = udd_byte_count(ep);
   84d5c:	6812      	ldr	r2, [r2, #0]
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   84d5e:	eba6 0b09 	sub.w	fp, r6, r9
	nb_data = udd_byte_count(ep);
   84d62:	f3c2 5a0a 	ubfx	sl, r2, #20, #11
	if (nb_data < pkt_size) {
   84d66:	45d0      	cmp	r8, sl
	uint32_t nb_remain = ptr_job->buf_size - ptr_job->buf_cnt;
   84d68:	ea4f 0643 	mov.w	r6, r3, lsl #1
	if (nb_data < pkt_size) {
   84d6c:	f200 82bb 	bhi.w	852e6 <UOTGHS_Handler+0x992>
		if (nb_data >= nb_remain) {
   84d70:	45d3      	cmp	fp, sl
   84d72:	f200 82fb 	bhi.w	8536c <UOTGHS_Handler+0xa18>
	bool b_full = false, b_short = false;
   84d76:	f04f 0800 	mov.w	r8, #0
		ptr_job->buf_cnt += nb_data;
   84d7a:	f04f 0a18 	mov.w	sl, #24
   84d7e:	fb0a 5a03 	mla	sl, sl, r3, r5
   84d82:	f8da 200c 	ldr.w	r2, [sl, #12]
		ptr_job->buf_load = nb_data;
   84d86:	f8ca b010 	str.w	fp, [sl, #16]
		ptr_job->buf_cnt += nb_data;
   84d8a:	445a      	add	r2, fp
   84d8c:	f8ca 200c 	str.w	r2, [sl, #12]
		for (i = 0; i < nb_data; i++) {
   84d90:	f1bb 0f00 	cmp.w	fp, #0
   84d94:	f000 82be 	beq.w	85314 <UOTGHS_Handler+0x9c0>
   84d98:	2201      	movs	r2, #1
   84d9a:	46da      	mov	sl, fp
   84d9c:	9201      	str	r2, [sp, #4]
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(ep, 8);
   84d9e:	03c9      	lsls	r1, r1, #15
	uint8_t *ptr_dst = &ptr_job->buf[ptr_job->buf_cnt];
   84da0:	444f      	add	r7, r9
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(ep, 8);
   84da2:	f101 5900 	add.w	r9, r1, #536870912	; 0x20000000
   84da6:	f509 19c0 	add.w	r9, r9, #1572864	; 0x180000
   84daa:	1e79      	subs	r1, r7, #1
			*ptr_dst++ = *ptr_src++;
   84dac:	460a      	mov	r2, r1
		for (i = 0; i < nb_data; i++) {
   84dae:	3202      	adds	r2, #2
			*ptr_dst++ = *ptr_src++;
   84db0:	f819 bb01 	ldrb.w	fp, [r9], #1
		for (i = 0; i < nb_data; i++) {
   84db4:	1bd2      	subs	r2, r2, r7
   84db6:	4552      	cmp	r2, sl
			*ptr_dst++ = *ptr_src++;
   84db8:	f801 bf01 	strb.w	fp, [r1, #1]!
		for (i = 0; i < nb_data; i++) {
   84dbc:	d3f6      	bcc.n	84dac <UOTGHS_Handler+0x458>
	udd_ack_fifocon(ep);
   84dbe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   84dc2:	4a4f      	ldr	r2, [pc, #316]	; (84f00 <UOTGHS_Handler+0x5ac>)
   84dc4:	f84e 1002 	str.w	r1, [lr, r2]
   84dc8:	4496      	add	lr, r2
	if (b_full || b_short) {
   84dca:	9a01      	ldr	r2, [sp, #4]
   84dcc:	b91a      	cbnz	r2, 84dd6 <UOTGHS_Handler+0x482>
   84dce:	f1b8 0f00 	cmp.w	r8, #0
   84dd2:	f43f ae88 	beq.w	84ae6 <UOTGHS_Handler+0x192>
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   84dd6:	4433      	add	r3, r6
   84dd8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
		udd_disable_out_received_interrupt(ep);
   84ddc:	2302      	movs	r3, #2
		udd_ep_finish_job(ptr_job, false, ep);
   84dde:	4602      	mov	r2, r0
   84de0:	2100      	movs	r1, #0
   84de2:	4620      	mov	r0, r4
		udd_disable_out_received_interrupt(ep);
   84de4:	f8ce 3000 	str.w	r3, [lr]
		udd_disable_endpoint_interrupt(ep);
   84de8:	4b3e      	ldr	r3, [pc, #248]	; (84ee4 <UOTGHS_Handler+0x590>)
   84dea:	f8c3 c014 	str.w	ip, [r3, #20]
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   84dee:	68eb      	ldr	r3, [r5, #12]
   84df0:	60ab      	str	r3, [r5, #8]
		udd_ep_finish_job(ptr_job, false, ep);
   84df2:	4b44      	ldr	r3, [pc, #272]	; (84f04 <UOTGHS_Handler+0x5b0>)
}
   84df4:	b003      	add	sp, #12
   84df6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udd_ep_finish_job(ptr_job, false, ep);
   84dfa:	4718      	bx	r3
	if (UDD_EPCTRL_DATA_OUT != udd_ep_control_state) {
   84dfc:	4d3b      	ldr	r5, [pc, #236]	; (84eec <UOTGHS_Handler+0x598>)
   84dfe:	782b      	ldrb	r3, [r5, #0]
   84e00:	2b01      	cmp	r3, #1
   84e02:	f000 8105 	beq.w	85010 <UOTGHS_Handler+0x6bc>
		if ((UDD_EPCTRL_DATA_IN == udd_ep_control_state)
   84e06:	2b02      	cmp	r3, #2
   84e08:	f000 8154 	beq.w	850b4 <UOTGHS_Handler+0x760>
				|| (UDD_EPCTRL_HANDSHAKE_WAIT_OUT_ZLP ==
   84e0c:	2b04      	cmp	r3, #4
   84e0e:	f000 8151 	beq.w	850b4 <UOTGHS_Handler+0x760>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84e12:	2105      	movs	r1, #5
	udd_enable_stall_handshake(0);
   84e14:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   84e18:	4c35      	ldr	r4, [pc, #212]	; (84ef0 <UOTGHS_Handler+0x59c>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   84e1a:	7029      	strb	r1, [r5, #0]
	udd_enable_stall_handshake(0);
   84e1c:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84e20:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84e24:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84e26:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84e2a:	2000      	movs	r0, #0
	udd_disable_in_send_interrupt(0);
   84e2c:	2201      	movs	r2, #1
   84e2e:	4b31      	ldr	r3, [pc, #196]	; (84ef4 <UOTGHS_Handler+0x5a0>)
   84e30:	7018      	strb	r0, [r3, #0]
   84e32:	482c      	ldr	r0, [pc, #176]	; (84ee4 <UOTGHS_Handler+0x590>)
   84e34:	f8c0 2220 	str.w	r2, [r0, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   84e38:	b919      	cbnz	r1, 84e42 <UOTGHS_Handler+0x4ee>
		cpu_irq_enable();
   84e3a:	701a      	strb	r2, [r3, #0]
   84e3c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84e40:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   84e42:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   84e44:	2102      	movs	r1, #2
   84e46:	4a27      	ldr	r2, [pc, #156]	; (84ee4 <UOTGHS_Handler+0x590>)
   84e48:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
	udd_g_ctrlreq.over_under_run = NULL;
   84e4c:	e9c4 3304 	strd	r3, r3, [r4, #16]
	udd_g_ctrlreq.payload_size = 0;
   84e50:	81a3      	strh	r3, [r4, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84e52:	702b      	strb	r3, [r5, #0]
   84e54:	e647      	b.n	84ae6 <UOTGHS_Handler+0x192>
		udd_ack_nak_out(0);
   84e56:	2308      	movs	r3, #8
   84e58:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	if (Is_udd_in_send(0))
   84e5c:	f8d2 3130 	ldr.w	r3, [r2, #304]	; 0x130
   84e60:	07de      	lsls	r6, r3, #31
   84e62:	f53f ae40 	bmi.w	84ae6 <UOTGHS_Handler+0x192>
	if (UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP == udd_ep_control_state) {
   84e66:	4b21      	ldr	r3, [pc, #132]	; (84eec <UOTGHS_Handler+0x598>)
   84e68:	781b      	ldrb	r3, [r3, #0]
   84e6a:	2b03      	cmp	r3, #3
   84e6c:	f47f ae3b 	bne.w	84ae6 <UOTGHS_Handler+0x192>
   84e70:	e759      	b.n	84d26 <UOTGHS_Handler+0x3d2>
   84e72:	4a25      	ldr	r2, [pc, #148]	; (84f08 <UOTGHS_Handler+0x5b4>)
	uint8_t *ptr = (uint8_t *) & udd_get_endpoint_fifo_access(0,8);
   84e74:	4b25      	ldr	r3, [pc, #148]	; (84f0c <UOTGHS_Handler+0x5b8>)
	for (i = 0; i < 8; i++) {
   84e76:	4826      	ldr	r0, [pc, #152]	; (84f10 <UOTGHS_Handler+0x5bc>)
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   84e78:	4619      	mov	r1, r3
   84e7a:	3301      	adds	r3, #1
   84e7c:	7809      	ldrb	r1, [r1, #0]
	for (i = 0; i < 8; i++) {
   84e7e:	4283      	cmp	r3, r0
		((uint8_t*) &udd_g_ctrlreq.req)[i] = *ptr++;
   84e80:	f802 1f01 	strb.w	r1, [r2, #1]!
	for (i = 0; i < 8; i++) {
   84e84:	d1f8      	bne.n	84e78 <UOTGHS_Handler+0x524>
	if (udc_process_setup() == false) {
   84e86:	4b23      	ldr	r3, [pc, #140]	; (84f14 <UOTGHS_Handler+0x5c0>)
   84e88:	4798      	blx	r3
   84e8a:	2800      	cmp	r0, #0
   84e8c:	f000 8119 	beq.w	850c2 <UOTGHS_Handler+0x76e>
	udd_ack_setup_received(0);
   84e90:	2104      	movs	r1, #4
   84e92:	4b14      	ldr	r3, [pc, #80]	; (84ee4 <UOTGHS_Handler+0x590>)
	if (Udd_setup_is_in()) {
   84e94:	4a16      	ldr	r2, [pc, #88]	; (84ef0 <UOTGHS_Handler+0x59c>)
	udd_ack_setup_received(0);
   84e96:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	if (Udd_setup_is_in()) {
   84e9a:	f992 1000 	ldrsb.w	r1, [r2]
   84e9e:	2900      	cmp	r1, #0
   84ea0:	f2c0 81a4 	blt.w	851ec <UOTGHS_Handler+0x898>
		if (0 == udd_g_ctrlreq.req.wLength) {
   84ea4:	88d2      	ldrh	r2, [r2, #6]
   84ea6:	2a00      	cmp	r2, #0
   84ea8:	f000 81ff 	beq.w	852aa <UOTGHS_Handler+0x956>
		udd_ctrl_prev_payload_buf_cnt = 0;
   84eac:	2200      	movs	r2, #0
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   84eae:	2401      	movs	r4, #1
		udd_ack_nak_in(0);
   84eb0:	2110      	movs	r1, #16
		udd_ctrl_prev_payload_buf_cnt = 0;
   84eb2:	4819      	ldr	r0, [pc, #100]	; (84f18 <UOTGHS_Handler+0x5c4>)
		udd_ep_control_state = UDD_EPCTRL_DATA_OUT;
   84eb4:	702c      	strb	r4, [r5, #0]
		udd_ctrl_prev_payload_buf_cnt = 0;
   84eb6:	8002      	strh	r2, [r0, #0]
		udd_ctrl_payload_buf_cnt = 0;
   84eb8:	4818      	ldr	r0, [pc, #96]	; (84f1c <UOTGHS_Handler+0x5c8>)
   84eba:	8002      	strh	r2, [r0, #0]
		udd_ack_nak_in(0);
   84ebc:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84ec0:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84ec4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84ec6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84eca:	480a      	ldr	r0, [pc, #40]	; (84ef4 <UOTGHS_Handler+0x5a0>)
   84ecc:	7002      	strb	r2, [r0, #0]
		udd_enable_nak_in_interrupt(0);
   84ece:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   84ed2:	2d00      	cmp	r5, #0
   84ed4:	f47f ae07 	bne.w	84ae6 <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   84ed8:	7004      	strb	r4, [r0, #0]
   84eda:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84ede:	b662      	cpsie	i
   84ee0:	e601      	b.n	84ae6 <UOTGHS_Handler+0x192>
   84ee2:	bf00      	nop
   84ee4:	400ac000 	.word	0x400ac000
   84ee8:	000841c5 	.word	0x000841c5
   84eec:	200721c8 	.word	0x200721c8
   84ef0:	2007228c 	.word	0x2007228c
   84ef4:	20070b04 	.word	0x20070b04
   84ef8:	400ac100 	.word	0x400ac100
   84efc:	400ac160 	.word	0x400ac160
   84f00:	400ac220 	.word	0x400ac220
   84f04:	00083cdd 	.word	0x00083cdd
   84f08:	2007228b 	.word	0x2007228b
   84f0c:	20180000 	.word	0x20180000
   84f10:	20180008 	.word	0x20180008
   84f14:	000811fd 	.word	0x000811fd
   84f18:	200721c6 	.word	0x200721c6
   84f1c:	200721c4 	.word	0x200721c4
		udd_ack_reset();
   84f20:	2401      	movs	r4, #1
   84f22:	4fb8      	ldr	r7, [pc, #736]	; (85204 <UOTGHS_Handler+0x8b0>)
   84f24:	608b      	str	r3, [r1, #8]
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   84f26:	1e63      	subs	r3, r4, #1
	if (ptr_job->busy == false) {
   84f28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   84f2c:	eb05 03c3 	add.w	r3, r5, r3, lsl #3
   84f30:	7d19      	ldrb	r1, [r3, #20]
   84f32:	b2e2      	uxtb	r2, r4
   84f34:	07c8      	lsls	r0, r1, #31
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84f36:	f104 0401 	add.w	r4, r4, #1
	if (ptr_job->busy == false) {
   84f3a:	d50c      	bpl.n	84f56 <UOTGHS_Handler+0x602>
	ptr_job->busy = false;
   84f3c:	f36f 0100 	bfc	r1, #0, #1
   84f40:	7519      	strb	r1, [r3, #20]
	if (NULL == ptr_job->call_trans) {
   84f42:	6833      	ldr	r3, [r6, #0]
   84f44:	b13b      	cbz	r3, 84f56 <UOTGHS_Handler+0x602>
	if (Is_udd_endpoint_in(ep_num)) {
   84f46:	6839      	ldr	r1, [r7, #0]
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   84f48:	2001      	movs	r0, #1
	if (Is_udd_endpoint_in(ep_num)) {
   84f4a:	05c9      	lsls	r1, r1, #23
		ep_num |= USB_EP_DIR_IN;
   84f4c:	bf48      	it	mi
   84f4e:	f042 0280 	orrmi.w	r2, r2, #128	; 0x80
	ptr_job->call_trans((b_abort) ? UDD_EP_TRANSFER_ABORT :
   84f52:	68b1      	ldr	r1, [r6, #8]
   84f54:	4798      	blx	r3
	for (i = 0; i < USB_DEVICE_MAX_EP; i++) {
   84f56:	2c09      	cmp	r4, #9
   84f58:	f106 0618 	add.w	r6, r6, #24
   84f5c:	f107 0704 	add.w	r7, r7, #4
   84f60:	d1e1      	bne.n	84f26 <UOTGHS_Handler+0x5d2>
		udc_reset();
   84f62:	4ba9      	ldr	r3, [pc, #676]	; (85208 <UOTGHS_Handler+0x8b4>)
   84f64:	4798      	blx	r3
	udd_configure_address(0);
   84f66:	4ba9      	ldr	r3, [pc, #676]	; (8520c <UOTGHS_Handler+0x8b8>)
   84f68:	681a      	ldr	r2, [r3, #0]
   84f6a:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   84f6e:	601a      	str	r2, [r3, #0]
	udd_enable_address();
   84f70:	681a      	ldr	r2, [r3, #0]
   84f72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   84f76:	601a      	str	r2, [r3, #0]
	udd_configure_endpoint(0,
   84f78:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   84f7c:	f422 52cb 	bic.w	r2, r2, #6496	; 0x1960
   84f80:	f022 021c 	bic.w	r2, r2, #28
   84f84:	f042 0230 	orr.w	r2, r2, #48	; 0x30
   84f88:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_allocate_memory(0);
   84f8c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   84f90:	f042 0202 	orr.w	r2, r2, #2
   84f94:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	udd_enable_endpoint(0);
   84f98:	69da      	ldr	r2, [r3, #28]
   84f9a:	f042 0201 	orr.w	r2, r2, #1
   84f9e:	61da      	str	r2, [r3, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84fa0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84fa4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84fa6:	f3bf 8f5f 	dmb	sy
	udd_enable_setup_received_interrupt(0);
   84faa:	2004      	movs	r0, #4
	cpu_irq_disable();
   84fac:	2500      	movs	r5, #0
   84fae:	4a98      	ldr	r2, [pc, #608]	; (85210 <UOTGHS_Handler+0x8bc>)
	udd_enable_out_received_interrupt(0);
   84fb0:	2402      	movs	r4, #2
   84fb2:	7015      	strb	r5, [r2, #0]
	udd_enable_setup_received_interrupt(0);
   84fb4:	f8c3 01f0 	str.w	r0, [r3, #496]	; 0x1f0
	udd_enable_endpoint_interrupt(0);
   84fb8:	f44f 5080 	mov.w	r0, #4096	; 0x1000
	udd_enable_out_received_interrupt(0);
   84fbc:	f8c3 41f0 	str.w	r4, [r3, #496]	; 0x1f0
	udd_enable_endpoint_interrupt(0);
   84fc0:	6198      	str	r0, [r3, #24]
	if (cpu_irq_is_enabled_flags(flags))
   84fc2:	b921      	cbnz	r1, 84fce <UOTGHS_Handler+0x67a>
		cpu_irq_enable();
   84fc4:	2301      	movs	r3, #1
   84fc6:	7013      	strb	r3, [r2, #0]
   84fc8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84fcc:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   84fce:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   84fd2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   84fd4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   84fd8:	2400      	movs	r4, #0
	udd_disable_in_send_interrupt(0);
   84fda:	2301      	movs	r3, #1
   84fdc:	488b      	ldr	r0, [pc, #556]	; (8520c <UOTGHS_Handler+0x8b8>)
   84fde:	7014      	strb	r4, [r2, #0]
   84fe0:	f8c0 3220 	str.w	r3, [r0, #544]	; 0x220
	if (cpu_irq_is_enabled_flags(flags))
   84fe4:	b919      	cbnz	r1, 84fee <UOTGHS_Handler+0x69a>
		cpu_irq_enable();
   84fe6:	7013      	strb	r3, [r2, #0]
   84fe8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   84fec:	b662      	cpsie	i
	udd_g_ctrlreq.callback = NULL;
   84fee:	2300      	movs	r3, #0
	udd_ack_out_received(0);
   84ff0:	2402      	movs	r4, #2
	udd_g_ctrlreq.callback = NULL;
   84ff2:	4a88      	ldr	r2, [pc, #544]	; (85214 <UOTGHS_Handler+0x8c0>)
	udd_ack_out_received(0);
   84ff4:	4885      	ldr	r0, [pc, #532]	; (8520c <UOTGHS_Handler+0x8b8>)
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   84ff6:	4988      	ldr	r1, [pc, #544]	; (85218 <UOTGHS_Handler+0x8c4>)
	udd_g_ctrlreq.callback = NULL;
   84ff8:	6113      	str	r3, [r2, #16]
	udd_ack_out_received(0);
   84ffa:	f8c0 4160 	str.w	r4, [r0, #352]	; 0x160
	udd_g_ctrlreq.over_under_run = NULL;
   84ffe:	6153      	str	r3, [r2, #20]
	udd_g_ctrlreq.payload_size = 0;
   85000:	8193      	strh	r3, [r2, #12]
	udd_ep_control_state = UDD_EPCTRL_SETUP;
   85002:	700b      	strb	r3, [r1, #0]
		goto udd_interrupt_end;
   85004:	e56f      	b.n	84ae6 <UOTGHS_Handler+0x192>
		udd_ctrl_in_sent();
   85006:	4b85      	ldr	r3, [pc, #532]	; (8521c <UOTGHS_Handler+0x8c8>)
}
   85008:	b003      	add	sp, #12
   8500a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udd_ctrl_in_sent();
   8500e:	4718      	bx	r3
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   85010:	4f83      	ldr	r7, [pc, #524]	; (85220 <UOTGHS_Handler+0x8cc>)
	nb_data = udd_byte_count(0);
   85012:	f8d2 6130 	ldr.w	r6, [r2, #304]	; 0x130
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   85016:	4c7f      	ldr	r4, [pc, #508]	; (85214 <UOTGHS_Handler+0x8c0>)
   85018:	883b      	ldrh	r3, [r7, #0]
   8501a:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
	nb_data = udd_byte_count(0);
   8501e:	f3c6 560a 	ubfx	r6, r6, #20, #11
	if (udd_g_ctrlreq.payload_size < (udd_ctrl_payload_buf_cnt + nb_data)) {
   85022:	199a      	adds	r2, r3, r6
   85024:	4594      	cmp	ip, r2
	udd_ctrl_payload_buf_cnt += nb_data;
   85026:	bfac      	ite	ge
   85028:	fa1f fc82 	uxthge.w	ip, r2
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   8502c:	ebac 0603 	sublt.w	r6, ip, r3
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85030:	68a2      	ldr	r2, [r4, #8]
		nb_data = udd_g_ctrlreq.payload_size - udd_ctrl_payload_buf_cnt;
   85032:	bfb8      	it	lt
   85034:	b2b6      	uxthlt	r6, r6
	uint8_t *ptr_dest = udd_g_ctrlreq.payload + udd_ctrl_payload_buf_cnt;
   85036:	441a      	add	r2, r3
	for (i = 0; i < nb_data; i++) {
   85038:	2e00      	cmp	r6, #0
   8503a:	f000 8151 	beq.w	852e0 <UOTGHS_Handler+0x98c>
	uint8_t *ptr_src = (uint8_t *) & udd_get_endpoint_fifo_access(0, 8);
   8503e:	4b79      	ldr	r3, [pc, #484]	; (85224 <UOTGHS_Handler+0x8d0>)
		*ptr_dest++ = *ptr_src++;
   85040:	4618      	mov	r0, r3
   85042:	3301      	adds	r3, #1
   85044:	7800      	ldrb	r0, [r0, #0]
	for (i = 0; i < nb_data; i++) {
   85046:	b2d9      	uxtb	r1, r3
   85048:	42b1      	cmp	r1, r6
		*ptr_dest++ = *ptr_src++;
   8504a:	f802 0b01 	strb.w	r0, [r2], #1
	for (i = 0; i < nb_data; i++) {
   8504e:	d3f7      	bcc.n	85040 <UOTGHS_Handler+0x6ec>
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   85050:	2e40      	cmp	r6, #64	; 0x40
	udd_ctrl_payload_buf_cnt += nb_data;
   85052:	f8a7 c000 	strh.w	ip, [r7]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   85056:	d05f      	beq.n	85118 <UOTGHS_Handler+0x7c4>
		if (NULL != udd_g_ctrlreq.over_under_run) {
   85058:	6963      	ldr	r3, [r4, #20]
		udd_g_ctrlreq.payload_size = udd_ctrl_payload_buf_cnt;
   8505a:	f8a4 c00c 	strh.w	ip, [r4, #12]
		if (NULL != udd_g_ctrlreq.over_under_run) {
   8505e:	2b00      	cmp	r3, #0
   85060:	d03a      	beq.n	850d8 <UOTGHS_Handler+0x784>
			if (!udd_g_ctrlreq.over_under_run()) {
   85062:	4798      	blx	r3
   85064:	2800      	cmp	r0, #0
   85066:	d137      	bne.n	850d8 <UOTGHS_Handler+0x784>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   85068:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   8506a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
			udd_ack_out_received(0);
   8506e:	2202      	movs	r2, #2
	udd_enable_stall_handshake(0);
   85070:	4b66      	ldr	r3, [pc, #408]	; (8520c <UOTGHS_Handler+0x8b8>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   85072:	7028      	strb	r0, [r5, #0]
	udd_enable_stall_handshake(0);
   85074:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
			udd_ack_out_received(0);
   85078:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
			return;
   8507c:	e533      	b.n	84ae6 <UOTGHS_Handler+0x192>
			udd_detach();
   8507e:	4b6a      	ldr	r3, [pc, #424]	; (85228 <UOTGHS_Handler+0x8d4>)
}
   85080:	b003      	add	sp, #12
   85082:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			udd_detach();
   85086:	4718      	bx	r3
			if (udd_endpoint_dma_get_status(ep)
   85088:	4a68      	ldr	r2, [pc, #416]	; (8522c <UOTGHS_Handler+0x8d8>)
   8508a:	eb02 1101 	add.w	r1, r2, r1, lsl #4
   8508e:	68ca      	ldr	r2, [r1, #12]
   85090:	07d4      	lsls	r4, r2, #31
   85092:	f53f ad28 	bmi.w	84ae6 <UOTGHS_Handler+0x192>
			udd_disable_endpoint_dma_interrupt(ep);
   85096:	f8c8 c014 	str.w	ip, [r8, #20]
			nb_remaining = (udd_endpoint_dma_get_status(ep) &
   8509a:	68ca      	ldr	r2, [r1, #12]
			if (nb_remaining) {
   8509c:	0c12      	lsrs	r2, r2, #16
   8509e:	d007      	beq.n	850b0 <UOTGHS_Handler+0x75c>
				ptr_job->buf_cnt -= nb_remaining;
   850a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   850a4:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
   850a8:	68eb      	ldr	r3, [r5, #12]
   850aa:	1a9a      	subs	r2, r3, r2
				ptr_job->buf_size = ptr_job->buf_cnt;
   850ac:	e9c5 2202 	strd	r2, r2, [r5, #8]
			udd_ep_trans_done(ep);
   850b0:	4b5f      	ldr	r3, [pc, #380]	; (85230 <UOTGHS_Handler+0x8dc>)
   850b2:	e4fc      	b.n	84aae <UOTGHS_Handler+0x15a>
	if (udd_g_ctrlreq.callback) {
   850b4:	4c57      	ldr	r4, [pc, #348]	; (85214 <UOTGHS_Handler+0x8c0>)
   850b6:	6923      	ldr	r3, [r4, #16]
   850b8:	2b00      	cmp	r3, #0
   850ba:	f43f aeb1 	beq.w	84e20 <UOTGHS_Handler+0x4cc>
		udd_g_ctrlreq.callback();
   850be:	4798      	blx	r3
   850c0:	e6ae      	b.n	84e20 <UOTGHS_Handler+0x4cc>
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   850c2:	2005      	movs	r0, #5
	udd_enable_stall_handshake(0);
   850c4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
		udd_ack_setup_received(0);
   850c8:	2204      	movs	r2, #4
	udd_enable_stall_handshake(0);
   850ca:	4b50      	ldr	r3, [pc, #320]	; (8520c <UOTGHS_Handler+0x8b8>)
	udd_ep_control_state = UDD_EPCTRL_STALL_REQ;
   850cc:	7028      	strb	r0, [r5, #0]
	udd_enable_stall_handshake(0);
   850ce:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
		udd_ack_setup_received(0);
   850d2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
		return;
   850d6:	e506      	b.n	84ae6 <UOTGHS_Handler+0x192>
		udd_ack_out_received(0);
   850d8:	2102      	movs	r1, #2
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   850da:	2203      	movs	r2, #3
		udd_ack_out_received(0);
   850dc:	4b4b      	ldr	r3, [pc, #300]	; (8520c <UOTGHS_Handler+0x8b8>)
   850de:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   850e2:	702a      	strb	r2, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   850e4:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   850e8:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   850ea:	f3bf 8f5f 	dmb	sy
	udd_ack_in_send(0);
   850ee:	2201      	movs	r2, #1
	udd_ack_nak_out(0);
   850f0:	2108      	movs	r1, #8
	cpu_irq_disable();
   850f2:	2500      	movs	r5, #0
   850f4:	4846      	ldr	r0, [pc, #280]	; (85210 <UOTGHS_Handler+0x8bc>)
   850f6:	7005      	strb	r5, [r0, #0]
	udd_ack_in_send(0);
   850f8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
	udd_enable_in_send_interrupt(0);
   850fc:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	udd_ack_nak_out(0);
   85100:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	udd_enable_nak_out_interrupt(0);
   85104:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   85108:	2c00      	cmp	r4, #0
   8510a:	f47f acec 	bne.w	84ae6 <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   8510e:	7002      	strb	r2, [r0, #0]
   85110:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85114:	b662      	cpsie	i
   85116:	e4e6      	b.n	84ae6 <UOTGHS_Handler+0x192>
					(udd_ctrl_prev_payload_buf_cnt +
   85118:	4e46      	ldr	r6, [pc, #280]	; (85234 <UOTGHS_Handler+0x8e0>)
			|| (udd_g_ctrlreq.req.wLength <=
   8511a:	88e2      	ldrh	r2, [r4, #6]
					(udd_ctrl_prev_payload_buf_cnt +
   8511c:	8833      	ldrh	r3, [r6, #0]
   8511e:	4463      	add	r3, ip
			|| (udd_g_ctrlreq.req.wLength <=
   85120:	429a      	cmp	r2, r3
   85122:	dd99      	ble.n	85058 <UOTGHS_Handler+0x704>
	if (udd_g_ctrlreq.payload_size == udd_ctrl_payload_buf_cnt) {
   85124:	89a3      	ldrh	r3, [r4, #12]
   85126:	4563      	cmp	r3, ip
   85128:	f000 80e5 	beq.w	852f6 <UOTGHS_Handler+0x9a2>
	udd_ack_out_received(0);
   8512c:	2102      	movs	r1, #2
	udd_ack_nak_in(0);
   8512e:	2210      	movs	r2, #16
	udd_ack_out_received(0);
   85130:	4b36      	ldr	r3, [pc, #216]	; (8520c <UOTGHS_Handler+0x8b8>)
   85132:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	udd_ack_nak_in(0);
   85136:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8513a:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   8513e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85140:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85144:	2400      	movs	r4, #0
   85146:	4932      	ldr	r1, [pc, #200]	; (85210 <UOTGHS_Handler+0x8bc>)
   85148:	700c      	strb	r4, [r1, #0]
	udd_enable_nak_in_interrupt(0);
   8514a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   8514e:	2800      	cmp	r0, #0
   85150:	f47f acc9 	bne.w	84ae6 <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   85154:	2301      	movs	r3, #1
   85156:	700b      	strb	r3, [r1, #0]
   85158:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8515c:	b662      	cpsie	i
   8515e:	e4c2      	b.n	84ae6 <UOTGHS_Handler+0x192>
				udd_disable_in_send_interrupt(ep);
   85160:	2501      	movs	r5, #1
				udd_ack_fifocon(ep);
   85162:	f44f 4680 	mov.w	r6, #16384	; 0x4000
				udd_disable_in_send_interrupt(ep);
   85166:	4b34      	ldr	r3, [pc, #208]	; (85238 <UOTGHS_Handler+0x8e4>)
				udd_ep_finish_job(ptr_job, false, ep);
   85168:	4602      	mov	r2, r0
				udd_ack_in_send(ep);
   8516a:	4f34      	ldr	r7, [pc, #208]	; (8523c <UOTGHS_Handler+0x8e8>)
				udd_ep_finish_job(ptr_job, false, ep);
   8516c:	4620      	mov	r0, r4
   8516e:	4c34      	ldr	r4, [pc, #208]	; (85240 <UOTGHS_Handler+0x8ec>)
				udd_disable_in_send_interrupt(ep);
   85170:	f84e 5003 	str.w	r5, [lr, r3]
				udd_ep_finish_job(ptr_job, false, ep);
   85174:	2100      	movs	r1, #0
				udd_ack_in_send(ep);
   85176:	f84e 5007 	str.w	r5, [lr, r7]
				udd_ack_fifocon(ep);
   8517a:	f84e 6003 	str.w	r6, [lr, r3]
		udd_ep_finish_job(ptr_job, false, ep);
   8517e:	4623      	mov	r3, r4
   85180:	e638      	b.n	84df4 <UOTGHS_Handler+0x4a0>
				dbg_print("EoT ");
				// End of background transfer on IN endpoint
				udd_disable_bank_interrupt(ep);
   85182:	f44f 5280 	mov.w	r2, #4096	; 0x1000

				Assert(ptr_job->stall_requested);
				// A stall has been requested during backgound transfer
				ptr_job->stall_requested = false;
				udd_disable_endpoint_bank_autoswitch(ep);
				udd_enable_stall_handshake(ep);
   85186:	f44f 2000 	mov.w	r0, #524288	; 0x80000
				udd_reset_data_toggle(ep);
   8518a:	f44f 2180 	mov.w	r1, #262144	; 0x40000
				ptr_job->stall_requested = false;
   8518e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   85192:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
				udd_disable_bank_interrupt(ep);
   85196:	4b28      	ldr	r3, [pc, #160]	; (85238 <UOTGHS_Handler+0x8e4>)
   85198:	f84e 2003 	str.w	r2, [lr, r3]
				udd_disable_endpoint_interrupt(ep);
   8519c:	f5a3 7308 	sub.w	r3, r3, #544	; 0x220
   851a0:	f8c3 c014 	str.w	ip, [r3, #20]
				ptr_job->stall_requested = false;
   851a4:	7d2b      	ldrb	r3, [r5, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   851a6:	4a27      	ldr	r2, [pc, #156]	; (85244 <UOTGHS_Handler+0x8f0>)
				ptr_job->stall_requested = false;
   851a8:	f36b 0382 	bfi	r3, fp, #2, #1
   851ac:	752b      	strb	r3, [r5, #20]
				udd_disable_endpoint_bank_autoswitch(ep);
   851ae:	f85e 3002 	ldr.w	r3, [lr, r2]
   851b2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   851b6:	f84e 3002 	str.w	r3, [lr, r2]
				udd_enable_stall_handshake(ep);
   851ba:	4b23      	ldr	r3, [pc, #140]	; (85248 <UOTGHS_Handler+0x8f4>)
   851bc:	f84e 0003 	str.w	r0, [lr, r3]
				udd_reset_data_toggle(ep);
   851c0:	f84e 1003 	str.w	r1, [lr, r3]
				return true;
   851c4:	e48f      	b.n	84ae6 <UOTGHS_Handler+0x192>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   851c6:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   851ca:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   851cc:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   851d0:	4c0f      	ldr	r4, [pc, #60]	; (85210 <UOTGHS_Handler+0x8bc>)
	++sleepmgr_locks[mode];
   851d2:	481e      	ldr	r0, [pc, #120]	; (8524c <UOTGHS_Handler+0x8f8>)
   851d4:	7022      	strb	r2, [r4, #0]
   851d6:	7882      	ldrb	r2, [r0, #2]
   851d8:	440a      	add	r2, r1
   851da:	7082      	strb	r2, [r0, #2]
	if (cpu_irq_is_enabled_flags(flags))
   851dc:	2d00      	cmp	r5, #0
   851de:	f47f ad1b 	bne.w	84c18 <UOTGHS_Handler+0x2c4>
		cpu_irq_enable();
   851e2:	7021      	strb	r1, [r4, #0]
   851e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   851e8:	b662      	cpsie	i
}
   851ea:	e515      	b.n	84c18 <UOTGHS_Handler+0x2c4>
		udd_ctrl_prev_payload_buf_cnt = 0;
   851ec:	2300      	movs	r3, #0
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   851ee:	2102      	movs	r1, #2
		udd_ctrl_prev_payload_buf_cnt = 0;
   851f0:	4c10      	ldr	r4, [pc, #64]	; (85234 <UOTGHS_Handler+0x8e0>)
		udd_ctrl_payload_buf_cnt = 0;
   851f2:	480b      	ldr	r0, [pc, #44]	; (85220 <UOTGHS_Handler+0x8cc>)
		udd_ctrl_in_sent(); // Send first data transfer
   851f4:	4a09      	ldr	r2, [pc, #36]	; (8521c <UOTGHS_Handler+0x8c8>)
		udd_ctrl_prev_payload_buf_cnt = 0;
   851f6:	8023      	strh	r3, [r4, #0]
		udd_ctrl_payload_buf_cnt = 0;
   851f8:	8003      	strh	r3, [r0, #0]
		udd_ep_control_state = UDD_EPCTRL_DATA_IN;
   851fa:	7029      	strb	r1, [r5, #0]
}
   851fc:	b003      	add	sp, #12
   851fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		udd_ctrl_in_sent(); // Send first data transfer
   85202:	4710      	bx	r2
   85204:	400ac104 	.word	0x400ac104
   85208:	0008117d 	.word	0x0008117d
   8520c:	400ac000 	.word	0x400ac000
   85210:	20070b04 	.word	0x20070b04
   85214:	2007228c 	.word	0x2007228c
   85218:	200721c8 	.word	0x200721c8
   8521c:	00083ec1 	.word	0x00083ec1
   85220:	200721c4 	.word	0x200721c4
   85224:	20180000 	.word	0x20180000
   85228:	0008426d 	.word	0x0008426d
   8522c:	400ac300 	.word	0x400ac300
   85230:	00083d19 	.word	0x00083d19
   85234:	200721c6 	.word	0x200721c6
   85238:	400ac220 	.word	0x400ac220
   8523c:	400ac160 	.word	0x400ac160
   85240:	00083cdd 	.word	0x00083cdd
   85244:	400ac100 	.word	0x400ac100
   85248:	400ac1f0 	.word	0x400ac1f0
   8524c:	20073308 	.word	0x20073308
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85250:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85254:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85256:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   8525a:	4854      	ldr	r0, [pc, #336]	; (853ac <UOTGHS_Handler+0xa58>)
	--sleepmgr_locks[mode];
   8525c:	4954      	ldr	r1, [pc, #336]	; (853b0 <UOTGHS_Handler+0xa5c>)
   8525e:	7002      	strb	r2, [r0, #0]
   85260:	788a      	ldrb	r2, [r1, #2]
   85262:	3a01      	subs	r2, #1
   85264:	708a      	strb	r2, [r1, #2]
	if (cpu_irq_is_enabled_flags(flags))
   85266:	2d00      	cmp	r5, #0
   85268:	f47f acb0 	bne.w	84bcc <UOTGHS_Handler+0x278>
		cpu_irq_enable();
   8526c:	7004      	strb	r4, [r0, #0]
   8526e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85272:	b662      	cpsie	i
}
   85274:	e4aa      	b.n	84bcc <UOTGHS_Handler+0x278>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   85276:	2403      	movs	r4, #3
   85278:	7004      	strb	r4, [r0, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   8527a:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   8527e:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85280:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85284:	4849      	ldr	r0, [pc, #292]	; (853ac <UOTGHS_Handler+0xa58>)
   85286:	7003      	strb	r3, [r0, #0]
	udd_ack_nak_out(0);
   85288:	2308      	movs	r3, #8
	udd_ack_in_send(0);
   8528a:	f8c2 1160 	str.w	r1, [r2, #352]	; 0x160
	udd_enable_in_send_interrupt(0);
   8528e:	f8c2 11f0 	str.w	r1, [r2, #496]	; 0x1f0
	udd_ack_nak_out(0);
   85292:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
	udd_enable_nak_out_interrupt(0);
   85296:	f8c2 31f0 	str.w	r3, [r2, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   8529a:	2c00      	cmp	r4, #0
   8529c:	f47f ac23 	bne.w	84ae6 <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   852a0:	7001      	strb	r1, [r0, #0]
   852a2:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   852a6:	b662      	cpsie	i
   852a8:	e41d      	b.n	84ae6 <UOTGHS_Handler+0x192>
	udd_ep_control_state = UDD_EPCTRL_HANDSHAKE_WAIT_IN_ZLP;
   852aa:	2103      	movs	r1, #3
   852ac:	7029      	strb	r1, [r5, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   852ae:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   852b2:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   852b4:	f3bf 8f5f 	dmb	sy
	udd_ack_in_send(0);
   852b8:	2101      	movs	r1, #1
	udd_ack_nak_out(0);
   852ba:	2008      	movs	r0, #8
	cpu_irq_disable();
   852bc:	4c3b      	ldr	r4, [pc, #236]	; (853ac <UOTGHS_Handler+0xa58>)
   852be:	7022      	strb	r2, [r4, #0]
	udd_ack_in_send(0);
   852c0:	f8c3 1160 	str.w	r1, [r3, #352]	; 0x160
	udd_enable_in_send_interrupt(0);
   852c4:	f8c3 11f0 	str.w	r1, [r3, #496]	; 0x1f0
	udd_ack_nak_out(0);
   852c8:	f8c3 0160 	str.w	r0, [r3, #352]	; 0x160
	udd_enable_nak_out_interrupt(0);
   852cc:	f8c3 01f0 	str.w	r0, [r3, #496]	; 0x1f0
	if (cpu_irq_is_enabled_flags(flags))
   852d0:	2d00      	cmp	r5, #0
   852d2:	f47f ac08 	bne.w	84ae6 <UOTGHS_Handler+0x192>
		cpu_irq_enable();
   852d6:	7021      	strb	r1, [r4, #0]
   852d8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   852dc:	b662      	cpsie	i
   852de:	e402      	b.n	84ae6 <UOTGHS_Handler+0x192>
	udd_ctrl_payload_buf_cnt += nb_data;
   852e0:	f8a7 c000 	strh.w	ip, [r7]
	if ((USB_DEVICE_EP_CTRL_SIZE != nb_data)
   852e4:	e6b8      	b.n	85058 <UOTGHS_Handler+0x704>
	if (nb_data > 0) {
   852e6:	f1ba 0f00 	cmp.w	sl, #0
   852ea:	d013      	beq.n	85314 <UOTGHS_Handler+0x9c0>
		if (nb_data >= nb_remain) {
   852ec:	45d3      	cmp	fp, sl
   852ee:	d84d      	bhi.n	8538c <UOTGHS_Handler+0xa38>
		b_short = true;
   852f0:	f04f 0801 	mov.w	r8, #1
   852f4:	e541      	b.n	84d7a <UOTGHS_Handler+0x426>
		if (!udd_g_ctrlreq.over_under_run) {
   852f6:	6963      	ldr	r3, [r4, #20]
   852f8:	2b00      	cmp	r3, #0
   852fa:	f43f aeb5 	beq.w	85068 <UOTGHS_Handler+0x714>
		if (!udd_g_ctrlreq.over_under_run()) {
   852fe:	4798      	blx	r3
   85300:	2800      	cmp	r0, #0
   85302:	f43f aeb1 	beq.w	85068 <UOTGHS_Handler+0x714>
		udd_ctrl_payload_buf_cnt = 0;
   85306:	2200      	movs	r2, #0
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   85308:	8833      	ldrh	r3, [r6, #0]
   8530a:	8839      	ldrh	r1, [r7, #0]
		udd_ctrl_payload_buf_cnt = 0;
   8530c:	803a      	strh	r2, [r7, #0]
		udd_ctrl_prev_payload_buf_cnt += udd_ctrl_payload_buf_cnt;
   8530e:	440b      	add	r3, r1
   85310:	8033      	strh	r3, [r6, #0]
		udd_ctrl_payload_buf_cnt = 0;
   85312:	e70b      	b.n	8512c <UOTGHS_Handler+0x7d8>
	udd_ack_fifocon(ep);
   85314:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   85318:	4a26      	ldr	r2, [pc, #152]	; (853b4 <UOTGHS_Handler+0xa60>)
   8531a:	f84e 1002 	str.w	r1, [lr, r2]
   8531e:	4496      	add	lr, r2
   85320:	e559      	b.n	84dd6 <UOTGHS_Handler+0x482>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85322:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85326:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85328:	f3bf 8f5f 	dmb	sy
		udd_disable_in_send_interrupt(ep);
   8532c:	2601      	movs	r6, #1
	cpu_irq_disable();
   8532e:	491f      	ldr	r1, [pc, #124]	; (853ac <UOTGHS_Handler+0xa58>)
   85330:	700a      	strb	r2, [r1, #0]
   85332:	4a20      	ldr	r2, [pc, #128]	; (853b4 <UOTGHS_Handler+0xa60>)
   85334:	f84e 6002 	str.w	r6, [lr, r2]
		udd_disable_endpoint_interrupt(ep);
   85338:	f5a2 7208 	sub.w	r2, r2, #544	; 0x220
   8533c:	f8c2 c014 	str.w	ip, [r2, #20]
	if (cpu_irq_is_enabled_flags(flags))
   85340:	b91f      	cbnz	r7, 8534a <UOTGHS_Handler+0x9f6>
		cpu_irq_enable();
   85342:	700e      	strb	r6, [r1, #0]
   85344:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85348:	b662      	cpsie	i
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   8534a:	2618      	movs	r6, #24
   8534c:	fb06 5303 	mla	r3, r6, r3, r5
		udd_ep_finish_job(ptr_job, false, ep);
   85350:	4602      	mov	r2, r0
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   85352:	68dd      	ldr	r5, [r3, #12]
		udd_ep_finish_job(ptr_job, false, ep);
   85354:	4620      	mov	r0, r4
   85356:	4c18      	ldr	r4, [pc, #96]	; (853b8 <UOTGHS_Handler+0xa64>)
		ptr_job->buf_size = ptr_job->buf_cnt; // buf_size is passed to callback as XFR count
   85358:	609d      	str	r5, [r3, #8]
		udd_ep_finish_job(ptr_job, false, ep);
   8535a:	2100      	movs	r1, #0
   8535c:	4623      	mov	r3, r4
   8535e:	e549      	b.n	84df4 <UOTGHS_Handler+0x4a0>
		udd_ack_fifocon(ep);
   85360:	f44f 4180 	mov.w	r1, #16384	; 0x4000
   85364:	4a13      	ldr	r2, [pc, #76]	; (853b4 <UOTGHS_Handler+0xa60>)
   85366:	f84e 1002 	str.w	r1, [lr, r2]
		if (nb_data < pkt_size) {
   8536a:	e403      	b.n	84b74 <UOTGHS_Handler+0x220>
		ptr_job->buf_cnt += nb_data;
   8536c:	f04f 0b18 	mov.w	fp, #24
	bool b_full = false, b_short = false;
   85370:	f04f 0800 	mov.w	r8, #0
		ptr_job->buf_cnt += nb_data;
   85374:	fb0b 5b03 	mla	fp, fp, r3, r5
   85378:	f8db 200c 	ldr.w	r2, [fp, #12]
		ptr_job->buf_load = nb_data;
   8537c:	f8cb a010 	str.w	sl, [fp, #16]
		ptr_job->buf_cnt += nb_data;
   85380:	4452      	add	r2, sl
   85382:	f8cb 200c 	str.w	r2, [fp, #12]
	bool b_full = false, b_short = false;
   85386:	f8cd 8004 	str.w	r8, [sp, #4]
   8538a:	e508      	b.n	84d9e <UOTGHS_Handler+0x44a>
		ptr_job->buf_cnt += nb_data;
   8538c:	f04f 0b18 	mov.w	fp, #24
	bool b_full = false, b_short = false;
   85390:	2200      	movs	r2, #0
		ptr_job->buf_cnt += nb_data;
   85392:	fb0b 5b03 	mla	fp, fp, r3, r5
	bool b_full = false, b_short = false;
   85396:	9201      	str	r2, [sp, #4]
		ptr_job->buf_cnt += nb_data;
   85398:	f8db 200c 	ldr.w	r2, [fp, #12]
		b_short = true;
   8539c:	f04f 0801 	mov.w	r8, #1
		ptr_job->buf_cnt += nb_data;
   853a0:	4452      	add	r2, sl
		ptr_job->buf_load = nb_data;
   853a2:	f8cb a010 	str.w	sl, [fp, #16]
		ptr_job->buf_cnt += nb_data;
   853a6:	f8cb 200c 	str.w	r2, [fp, #12]
		for (i = 0; i < nb_data; i++) {
   853aa:	e4f8      	b.n	84d9e <UOTGHS_Handler+0x44a>
   853ac:	20070b04 	.word	0x20070b04
   853b0:	20073308 	.word	0x20073308
   853b4:	400ac220 	.word	0x400ac220
   853b8:	00083cdd 	.word	0x00083cdd

000853bc <udd_test_mode_j>:
	udd_enable_hs_test_mode();
   853bc:	4a05      	ldr	r2, [pc, #20]	; (853d4 <udd_test_mode_j+0x18>)
   853be:	6813      	ldr	r3, [r2, #0]
   853c0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   853c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   853c8:	6013      	str	r3, [r2, #0]
	udd_enable_hs_test_mode_j();
   853ca:	6813      	ldr	r3, [r2, #0]
   853cc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   853d0:	6013      	str	r3, [r2, #0]
}
   853d2:	4770      	bx	lr
   853d4:	400ac000 	.word	0x400ac000

000853d8 <udd_test_mode_k>:
	udd_enable_hs_test_mode();
   853d8:	4a05      	ldr	r2, [pc, #20]	; (853f0 <udd_test_mode_k+0x18>)
   853da:	6813      	ldr	r3, [r2, #0]
   853dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   853e0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   853e4:	6013      	str	r3, [r2, #0]
	udd_enable_hs_test_mode_k();
   853e6:	6813      	ldr	r3, [r2, #0]
   853e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   853ec:	6013      	str	r3, [r2, #0]
}
   853ee:	4770      	bx	lr
   853f0:	400ac000 	.word	0x400ac000

000853f4 <udd_test_mode_se0_nak>:
	udd_enable_hs_test_mode();
   853f4:	4a03      	ldr	r2, [pc, #12]	; (85404 <udd_test_mode_se0_nak+0x10>)
   853f6:	6813      	ldr	r3, [r2, #0]
   853f8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
   853fc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85400:	6013      	str	r3, [r2, #0]
}
   85402:	4770      	bx	lr
   85404:	400ac000 	.word	0x400ac000

00085408 <udd_test_mode_packet>:
{
   85408:	b410      	push	{r4}
   8540a:	b08f      	sub	sp, #60	; 0x3c
	const uint8_t test_packet[] = {
   8540c:	46ec      	mov	ip, sp
   8540e:	4c25      	ldr	r4, [pc, #148]	; (854a4 <udd_test_mode_packet+0x9c>)
   85410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   85412:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   85416:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   85418:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   8541c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   8541e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   85422:	e894 0003 	ldmia.w	r4, {r0, r1}
	ptr_src = test_packet;
   85426:	466b      	mov	r3, sp
	udd_disable_endpoint(0);
   85428:	4a1f      	ldr	r2, [pc, #124]	; (854a8 <udd_test_mode_packet+0xa0>)
	const uint8_t test_packet[] = {
   8542a:	f84c 0b04 	str.w	r0, [ip], #4
   8542e:	f88c 1000 	strb.w	r1, [ip]
	udd_disable_endpoint(0);
   85432:	69d1      	ldr	r1, [r2, #28]
   85434:	f1c3 5000 	rsb	r0, r3, #536870912	; 0x20000000
   85438:	f021 0101 	bic.w	r1, r1, #1
   8543c:	61d1      	str	r1, [r2, #28]
	udd_configure_endpoint(0, USB_EP_TYPE_BULK, 1,
   8543e:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   85442:	f10d 0c35 	add.w	ip, sp, #53	; 0x35
   85446:	f421 51cb 	bic.w	r1, r1, #6496	; 0x1960
   8544a:	f021 011c 	bic.w	r1, r1, #28
   8544e:	f441 5189 	orr.w	r1, r1, #4384	; 0x1120
   85452:	f041 0110 	orr.w	r1, r1, #16
   85456:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	udd_allocate_memory(0);
   8545a:	f8d2 1100 	ldr.w	r1, [r2, #256]	; 0x100
   8545e:	f500 10c0 	add.w	r0, r0, #1572864	; 0x180000
   85462:	f041 0102 	orr.w	r1, r1, #2
   85466:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
	udd_enable_endpoint(0);
   8546a:	69d1      	ldr	r1, [r2, #28]
   8546c:	f041 0101 	orr.w	r1, r1, #1
   85470:	61d1      	str	r1, [r2, #28]
	udd_enable_hs_test_mode();
   85472:	6811      	ldr	r1, [r2, #0]
   85474:	f421 6140 	bic.w	r1, r1, #3072	; 0xc00
   85478:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
   8547c:	6011      	str	r1, [r2, #0]
	udd_enable_hs_test_mode_packet();
   8547e:	6811      	ldr	r1, [r2, #0]
   85480:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
   85484:	6011      	str	r1, [r2, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   85486:	181a      	adds	r2, r3, r0
		*ptr_dest++ = *ptr_src++;
   85488:	f813 1b01 	ldrb.w	r1, [r3], #1
	for (i = 0; i < sizeof(test_packet); i++) {
   8548c:	4563      	cmp	r3, ip
		*ptr_dest++ = *ptr_src++;
   8548e:	7011      	strb	r1, [r2, #0]
	for (i = 0; i < sizeof(test_packet); i++) {
   85490:	d1f9      	bne.n	85486 <udd_test_mode_packet+0x7e>
	udd_ack_fifocon(0);
   85492:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   85496:	4b04      	ldr	r3, [pc, #16]	; (854a8 <udd_test_mode_packet+0xa0>)
   85498:	f8c3 2220 	str.w	r2, [r3, #544]	; 0x220
}
   8549c:	b00f      	add	sp, #60	; 0x3c
   8549e:	bc10      	pop	{r4}
   854a0:	4770      	bx	lr
   854a2:	bf00      	nop
   854a4:	0008cb1c 	.word	0x0008cb1c
   854a8:	400ac000 	.word	0x400ac000

000854ac <board_init>:
#include "ioport.h"

void board_init(void)
{

}
   854ac:	4770      	bx	lr
   854ae:	bf00      	nop

000854b0 <cpu_irq_enter_critical>:
volatile bool g_interrupt_enabled = true;
#endif

void cpu_irq_enter_critical(void)
{
	if (cpu_irq_critical_section_counter == 0) {
   854b0:	4b0c      	ldr	r3, [pc, #48]	; (854e4 <cpu_irq_enter_critical+0x34>)
   854b2:	681a      	ldr	r2, [r3, #0]
   854b4:	b922      	cbnz	r2, 854c0 <cpu_irq_enter_critical+0x10>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   854b6:	f3ef 8110 	mrs	r1, PRIMASK
		if (cpu_irq_is_enabled()) {
   854ba:	b129      	cbz	r1, 854c8 <cpu_irq_enter_critical+0x18>
			cpu_irq_disable();
			cpu_irq_prev_interrupt_state = true;
		} else {
			/* Make sure the to save the prev state as false */
			cpu_irq_prev_interrupt_state = false;
   854bc:	490a      	ldr	r1, [pc, #40]	; (854e8 <cpu_irq_enter_critical+0x38>)
   854be:	700a      	strb	r2, [r1, #0]
		}

	}

	cpu_irq_critical_section_counter++;
   854c0:	681a      	ldr	r2, [r3, #0]
   854c2:	3201      	adds	r2, #1
   854c4:	601a      	str	r2, [r3, #0]
   854c6:	4770      	bx	lr
{
   854c8:	b410      	push	{r4}
  __ASM volatile ("cpsid i" : : : "memory");
   854ca:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   854cc:	f3bf 8f5f 	dmb	sy
			cpu_irq_prev_interrupt_state = true;
   854d0:	2001      	movs	r0, #1
			cpu_irq_disable();
   854d2:	4c06      	ldr	r4, [pc, #24]	; (854ec <cpu_irq_enter_critical+0x3c>)
			cpu_irq_prev_interrupt_state = true;
   854d4:	4a04      	ldr	r2, [pc, #16]	; (854e8 <cpu_irq_enter_critical+0x38>)
			cpu_irq_disable();
   854d6:	7021      	strb	r1, [r4, #0]
			cpu_irq_prev_interrupt_state = true;
   854d8:	7010      	strb	r0, [r2, #0]
	cpu_irq_critical_section_counter++;
   854da:	681a      	ldr	r2, [r3, #0]
   854dc:	3201      	adds	r2, #1
   854de:	601a      	str	r2, [r3, #0]
}
   854e0:	bc10      	pop	{r4}
   854e2:	4770      	bx	lr
   854e4:	200722a4 	.word	0x200722a4
   854e8:	200722a8 	.word	0x200722a8
   854ec:	20070b04 	.word	0x20070b04

000854f0 <cpu_irq_leave_critical>:
void cpu_irq_leave_critical(void)
{
	/* Check if the user is trying to leave a critical section when not in a critical section */
	Assert(cpu_irq_critical_section_counter > 0);

	cpu_irq_critical_section_counter--;
   854f0:	4b07      	ldr	r3, [pc, #28]	; (85510 <cpu_irq_leave_critical+0x20>)
   854f2:	681a      	ldr	r2, [r3, #0]
   854f4:	3a01      	subs	r2, #1
   854f6:	601a      	str	r2, [r3, #0]

	/* Only enable global interrupts when the counter reaches 0 and the state of the global interrupt flag
	   was enabled when entering critical state */
	if ((cpu_irq_critical_section_counter == 0) && (cpu_irq_prev_interrupt_state)) {
   854f8:	681b      	ldr	r3, [r3, #0]
   854fa:	b943      	cbnz	r3, 8550e <cpu_irq_leave_critical+0x1e>
   854fc:	4b05      	ldr	r3, [pc, #20]	; (85514 <cpu_irq_leave_critical+0x24>)
   854fe:	781b      	ldrb	r3, [r3, #0]
   85500:	b12b      	cbz	r3, 8550e <cpu_irq_leave_critical+0x1e>
		cpu_irq_enable();
   85502:	2201      	movs	r2, #1
   85504:	4b04      	ldr	r3, [pc, #16]	; (85518 <cpu_irq_leave_critical+0x28>)
   85506:	701a      	strb	r2, [r3, #0]
   85508:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8550c:	b662      	cpsie	i
	}
}
   8550e:	4770      	bx	lr
   85510:	200722a4 	.word	0x200722a4
   85514:	200722a8 	.word	0x200722a8
   85518:	20070b04 	.word	0x20070b04

0008551c <udi_cdc_comm_disable>:
}

void udi_cdc_comm_disable(void)
{
	Assert(udi_cdc_nb_comm_enabled != 0);
	udi_cdc_nb_comm_enabled--;
   8551c:	4a02      	ldr	r2, [pc, #8]	; (85528 <udi_cdc_comm_disable+0xc>)
   8551e:	7813      	ldrb	r3, [r2, #0]
   85520:	3b01      	subs	r3, #1
   85522:	b2db      	uxtb	r3, r3
   85524:	7013      	strb	r3, [r2, #0]
}
   85526:	4770      	bx	lr
   85528:	200722be 	.word	0x200722be

0008552c <udi_cdc_comm_setup>:

static uint8_t udi_cdc_setup_to_port(void)
{
	uint8_t port;

	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   8552c:	4b20      	ldr	r3, [pc, #128]	; (855b0 <udi_cdc_comm_setup+0x84>)
   8552e:	791a      	ldrb	r2, [r3, #4]
	if (Udd_setup_is_in()) {
   85530:	f993 0000 	ldrsb.w	r0, [r3]
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   85534:	f1a2 0103 	sub.w	r1, r2, #3
   85538:	fab1 f181 	clz	r1, r1
	if (Udd_setup_is_in()) {
   8553c:	781a      	ldrb	r2, [r3, #0]
   8553e:	2800      	cmp	r0, #0
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   85540:	ea4f 1151 	mov.w	r1, r1, lsr #5
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   85544:	f002 0260 	and.w	r2, r2, #96	; 0x60
	if (Udd_setup_is_in()) {
   85548:	db03      	blt.n	85552 <udi_cdc_comm_setup+0x26>
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   8554a:	2a20      	cmp	r2, #32
   8554c:	d014      	beq.n	85578 <udi_cdc_comm_setup+0x4c>
	return false;  // request Not supported
   8554e:	2000      	movs	r0, #0
}
   85550:	4770      	bx	lr
		if (Udd_setup_type() == USB_REQ_TYPE_CLASS) {
   85552:	2a20      	cmp	r2, #32
   85554:	d1fb      	bne.n	8554e <udi_cdc_comm_setup+0x22>
			switch (udd_g_ctrlreq.req.bRequest) {
   85556:	785a      	ldrb	r2, [r3, #1]
   85558:	2a21      	cmp	r2, #33	; 0x21
   8555a:	d1f8      	bne.n	8554e <udi_cdc_comm_setup+0x22>
				if (sizeof(usb_cdc_line_coding_t) !=
   8555c:	f8b3 c006 	ldrh.w	ip, [r3, #6]
   85560:	f1bc 0f07 	cmp.w	ip, #7
   85564:	d1f3      	bne.n	8554e <udi_cdc_comm_setup+0x22>
						(uint8_t *) &
   85566:	4813      	ldr	r0, [pc, #76]	; (855b4 <udi_cdc_comm_setup+0x88>)
   85568:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
   8556c:	4402      	add	r2, r0
				udd_g_ctrlreq.payload =
   8556e:	609a      	str	r2, [r3, #8]
				return true;
   85570:	2001      	movs	r0, #1
				udd_g_ctrlreq.payload_size =
   85572:	f8a3 c00c 	strh.w	ip, [r3, #12]
				return true;
   85576:	4770      	bx	lr
			switch (udd_g_ctrlreq.req.bRequest) {
   85578:	7858      	ldrb	r0, [r3, #1]
   8557a:	2820      	cmp	r0, #32
   8557c:	d005      	beq.n	8558a <udi_cdc_comm_setup+0x5e>
   8557e:	f1a0 0022 	sub.w	r0, r0, #34	; 0x22
   85582:	fab0 f080 	clz	r0, r0
   85586:	0940      	lsrs	r0, r0, #5
   85588:	4770      	bx	lr
				if (sizeof(usb_cdc_line_coding_t) !=
   8558a:	f8b3 c006 	ldrh.w	ip, [r3, #6]
   8558e:	f1bc 0f07 	cmp.w	ip, #7
   85592:	d1dc      	bne.n	8554e <udi_cdc_comm_setup+0x22>
						(uint8_t *) &
   85594:	4807      	ldr	r0, [pc, #28]	; (855b4 <udi_cdc_comm_setup+0x88>)
{
   85596:	b410      	push	{r4}
						(uint8_t *) &
   85598:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
				udd_g_ctrlreq.callback =
   8559c:	4c06      	ldr	r4, [pc, #24]	; (855b8 <udi_cdc_comm_setup+0x8c>)
						(uint8_t *) &
   8559e:	4402      	add	r2, r0
				udd_g_ctrlreq.callback =
   855a0:	611c      	str	r4, [r3, #16]
				udd_g_ctrlreq.payload =
   855a2:	609a      	str	r2, [r3, #8]
				udd_g_ctrlreq.payload_size =
   855a4:	f8a3 c00c 	strh.w	ip, [r3, #12]
				return true;
   855a8:	2001      	movs	r0, #1
}
   855aa:	bc10      	pop	{r4}
   855ac:	4770      	bx	lr
   855ae:	bf00      	nop
   855b0:	2007228c 	.word	0x2007228c
   855b4:	200722b0 	.word	0x200722b0
   855b8:	000855c5 	.word	0x000855c5

000855bc <udi_cdc_data_setup>:
}
   855bc:	2000      	movs	r0, #0
   855be:	4770      	bx	lr

000855c0 <udi_cdc_getsetting>:
}
   855c0:	2000      	movs	r0, #0
   855c2:	4770      	bx	lr

000855c4 <udi_cdc_line_coding_received>:
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   855c4:	4b06      	ldr	r3, [pc, #24]	; (855e0 <udi_cdc_line_coding_received+0x1c>)
static void udi_cdc_line_coding_received(void)
{
	uint8_t port = udi_cdc_setup_to_port();
	UNUSED(port);

	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   855c6:	4907      	ldr	r1, [pc, #28]	; (855e4 <udi_cdc_line_coding_received+0x20>)
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   855c8:	7918      	ldrb	r0, [r3, #4]
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   855ca:	4b07      	ldr	r3, [pc, #28]	; (855e8 <udi_cdc_line_coding_received+0x24>)
	switch (udd_g_ctrlreq.req.wIndex & 0xFF) {
   855cc:	f1a0 0003 	sub.w	r0, r0, #3
   855d0:	fab0 f080 	clz	r0, r0
   855d4:	0940      	lsrs	r0, r0, #5
	UDI_CDC_SET_CODING_EXT(port, (&udi_cdc_line_coding[port]));
   855d6:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   855da:	4411      	add	r1, r2
   855dc:	4718      	bx	r3
   855de:	bf00      	nop
   855e0:	2007228c 	.word	0x2007228c
   855e4:	200722b0 	.word	0x200722b0
   855e8:	00082241 	.word	0x00082241

000855ec <udi_cdc_comm_enable>:
{
   855ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (udi_cdc_nb_comm_enabled > UDI_CDC_PORT_NB) {
   855ee:	4d1e      	ldr	r5, [pc, #120]	; (85668 <udi_cdc_comm_enable+0x7c>)
	udi_cdc_state[port] = CPU_TO_LE16(0);
   855f0:	2200      	movs	r2, #0
	if (udi_cdc_nb_comm_enabled > UDI_CDC_PORT_NB) {
   855f2:	782b      	ldrb	r3, [r5, #0]
	uid_cdc_state_msg[port].header.bmRequestType =
   855f4:	f242 06a1 	movw	r6, #8353	; 0x20a1
	if (udi_cdc_nb_comm_enabled > UDI_CDC_PORT_NB) {
   855f8:	2b02      	cmp	r3, #2
		udi_cdc_nb_comm_enabled = 0;
   855fa:	bf84      	itt	hi
   855fc:	2300      	movhi	r3, #0
   855fe:	702b      	strbhi	r3, [r5, #0]
	port = udi_cdc_nb_comm_enabled;
   85600:	782c      	ldrb	r4, [r5, #0]
	udi_cdc_state[port] = CPU_TO_LE16(0);
   85602:	481a      	ldr	r0, [pc, #104]	; (8566c <udi_cdc_comm_enable+0x80>)
	port = udi_cdc_nb_comm_enabled;
   85604:	b2e4      	uxtb	r4, r4
	switch (port) {
   85606:	2c01      	cmp	r4, #1
	udi_cdc_state[port] = CPU_TO_LE16(0);
   85608:	f820 2014 	strh.w	r2, [r0, r4, lsl #1]
	uid_cdc_state_msg[port].header.bmRequestType =
   8560c:	4b18      	ldr	r3, [pc, #96]	; (85670 <udi_cdc_comm_enable+0x84>)
	switch (port) {
   8560e:	bf14      	ite	ne
   85610:	2001      	movne	r0, #1
   85612:	2003      	moveq	r0, #3
	uid_cdc_state_msg[port].header.bmRequestType =
   85614:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   85618:	f823 6011 	strh.w	r6, [r3, r1, lsl #1]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   8561c:	f04f 0c02 	mov.w	ip, #2
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   85620:	f04f 0e08 	mov.w	lr, #8
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   85624:	f06f 073d 	mvn.w	r7, #61	; 0x3d
   85628:	2601      	movs	r6, #1
	uid_cdc_state_msg[port].header.bmRequestType =
   8562a:	eb03 0341 	add.w	r3, r3, r1, lsl #1
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   8562e:	4911      	ldr	r1, [pc, #68]	; (85674 <udi_cdc_comm_enable+0x88>)
	uid_cdc_state_msg[port].header.wIndex = LE16(iface_comm_num);
   85630:	8098      	strh	r0, [r3, #4]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   85632:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   85636:	540a      	strb	r2, [r1, r0]
   85638:	4401      	add	r1, r0
	uid_cdc_state_msg[port].header.wValue = LE16(0);
   8563a:	805a      	strh	r2, [r3, #2]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   8563c:	4620      	mov	r0, r4
	uid_cdc_state_msg[port].value = CPU_TO_LE16(0);
   8563e:	811a      	strh	r2, [r3, #8]
	uid_cdc_state_msg[port].header.wLength = LE16(2);
   85640:	f8a3 c006 	strh.w	ip, [r3, #6]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   85644:	70ca      	strb	r2, [r1, #3]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   85646:	4b0c      	ldr	r3, [pc, #48]	; (85678 <udi_cdc_comm_enable+0x8c>)
	udi_cdc_line_coding[port].bCharFormat = UDI_CDC_DEFAULT_STOPBITS;
   85648:	710a      	strb	r2, [r1, #4]
	udi_cdc_line_coding[port].bParityType = UDI_CDC_DEFAULT_PARITY;
   8564a:	714a      	strb	r2, [r1, #5]
	udi_cdc_line_coding[port].dwDTERate = CPU_TO_LE32(UDI_CDC_DEFAULT_RATE);
   8564c:	704f      	strb	r7, [r1, #1]
   8564e:	708e      	strb	r6, [r1, #2]
	udi_cdc_line_coding[port].bDataBits = UDI_CDC_DEFAULT_DATABITS;
   85650:	f881 e006 	strb.w	lr, [r1, #6]
	UDI_CDC_SET_CODING_EXT(port,(&udi_cdc_line_coding[port]));
   85654:	4798      	blx	r3
	if (!UDI_CDC_ENABLE_EXT(port)) {
   85656:	4620      	mov	r0, r4
   85658:	4b08      	ldr	r3, [pc, #32]	; (8567c <udi_cdc_comm_enable+0x90>)
   8565a:	4798      	blx	r3
   8565c:	b118      	cbz	r0, 85666 <udi_cdc_comm_enable+0x7a>
	udi_cdc_nb_comm_enabled++;
   8565e:	782b      	ldrb	r3, [r5, #0]
   85660:	4433      	add	r3, r6
   85662:	b2db      	uxtb	r3, r3
   85664:	702b      	strb	r3, [r5, #0]
}
   85666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85668:	200722be 	.word	0x200722be
   8566c:	20072ad4 	.word	0x20072ad4
   85670:	200732f0 	.word	0x200732f0
   85674:	200722b0 	.word	0x200722b0
   85678:	00082241 	.word	0x00082241
   8567c:	00082135 	.word	0x00082135

00085680 <udi_cdc_data_disable>:
{
   85680:	b508      	push	{r3, lr}
	udi_cdc_nb_data_enabled--;
   85682:	4a06      	ldr	r2, [pc, #24]	; (8569c <udi_cdc_data_disable+0x1c>)
	UDI_CDC_DISABLE_EXT(port);
   85684:	4906      	ldr	r1, [pc, #24]	; (856a0 <udi_cdc_data_disable+0x20>)
	udi_cdc_nb_data_enabled--;
   85686:	7813      	ldrb	r3, [r2, #0]
   85688:	3b01      	subs	r3, #1
   8568a:	b2db      	uxtb	r3, r3
   8568c:	7013      	strb	r3, [r2, #0]
	port = udi_cdc_nb_data_enabled;
   8568e:	7810      	ldrb	r0, [r2, #0]
	UDI_CDC_DISABLE_EXT(port);
   85690:	4788      	blx	r1
	udi_cdc_data_running = false;
   85692:	2200      	movs	r2, #0
   85694:	4b03      	ldr	r3, [pc, #12]	; (856a4 <udi_cdc_data_disable+0x24>)
   85696:	701a      	strb	r2, [r3, #0]
}
   85698:	bd08      	pop	{r3, pc}
   8569a:	bf00      	nop
   8569c:	200722bf 	.word	0x200722bf
   856a0:	00082169 	.word	0x00082169
   856a4:	200722ac 	.word	0x200722ac

000856a8 <udi_cdc_tx_send>:
	udi_cdc_tx_send(port);
}


static void udi_cdc_tx_send(uint8_t port)
{
   856a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	if (udi_cdc_tx_trans_ongoing[port]) {
   856ac:	4e4b      	ldr	r6, [pc, #300]	; (857dc <udi_cdc_tx_send+0x134>)
{
   856ae:	b085      	sub	sp, #20
	if (udi_cdc_tx_trans_ongoing[port]) {
   856b0:	5c33      	ldrb	r3, [r6, r0]
   856b2:	b113      	cbz	r3, 856ba <udi_cdc_tx_send+0x12>
	udd_ep_run( ep,
			b_short_packet,
			udi_cdc_tx_buf[port][buf_sel_trans],
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
			udi_cdc_data_sent);
}
   856b4:	b005      	add	sp, #20
   856b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (udd_is_high_speed()) {
   856ba:	f8df 9124 	ldr.w	r9, [pc, #292]	; 857e0 <udi_cdc_tx_send+0x138>
   856be:	4604      	mov	r4, r0
   856c0:	47c8      	blx	r9
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   856c2:	f8df a120 	ldr.w	sl, [pc, #288]	; 857e4 <udi_cdc_tx_send+0x13c>
   856c6:	f83a 5014 	ldrh.w	r5, [sl, r4, lsl #1]
	if (udd_is_high_speed()) {
   856ca:	2800      	cmp	r0, #0
   856cc:	d04f      	beq.n	8576e <udi_cdc_tx_send+0xc6>
		if (udi_cdc_tx_sof_num[port] == udd_get_micro_frame_number()) {
   856ce:	4b46      	ldr	r3, [pc, #280]	; (857e8 <udi_cdc_tx_send+0x140>)
   856d0:	4798      	blx	r3
   856d2:	4285      	cmp	r5, r0
   856d4:	d0ee      	beq.n	856b4 <udi_cdc_tx_send+0xc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   856d6:	f3ef 8310 	mrs	r3, PRIMASK
   856da:	9302      	str	r3, [sp, #8]
  __ASM volatile ("cpsid i" : : : "memory");
   856dc:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   856de:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   856e2:	2300      	movs	r3, #0
   856e4:	4a41      	ldr	r2, [pc, #260]	; (857ec <udi_cdc_tx_send+0x144>)
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   856e6:	4942      	ldr	r1, [pc, #264]	; (857f0 <udi_cdc_tx_send+0x148>)
   856e8:	7013      	strb	r3, [r2, #0]
   856ea:	5d0d      	ldrb	r5, [r1, r4]
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   856ec:	f8df b104 	ldr.w	fp, [pc, #260]	; 857f4 <udi_cdc_tx_send+0x14c>
	buf_sel_trans = udi_cdc_tx_buf_sel[port];
   856f0:	b2ed      	uxtb	r5, r5
	if (udi_cdc_tx_buf_nb[port][buf_sel_trans] == 0) {
   856f2:	eb05 0344 	add.w	r3, r5, r4, lsl #1
   856f6:	f83b 3013 	ldrh.w	r3, [fp, r3, lsl #1]
   856fa:	46a8      	mov	r8, r5
   856fc:	0067      	lsls	r7, r4, #1
   856fe:	2b00      	cmp	r3, #0
   85700:	d043      	beq.n	8578a <udi_cdc_tx_send+0xe2>
   85702:	4b3d      	ldr	r3, [pc, #244]	; (857f8 <udi_cdc_tx_send+0x150>)
	sof_zlp_counter = 0;
   85704:	2000      	movs	r0, #0
   85706:	8018      	strh	r0, [r3, #0]
	if (!udi_cdc_tx_both_buf_to_send[port]) {
   85708:	4b3c      	ldr	r3, [pc, #240]	; (857fc <udi_cdc_tx_send+0x154>)
   8570a:	5d1b      	ldrb	r3, [r3, r4]
   8570c:	2b00      	cmp	r3, #0
   8570e:	d033      	beq.n	85778 <udi_cdc_tx_send+0xd0>
		buf_sel_trans = (buf_sel_trans==0)?1:0;
   85710:	fab5 f885 	clz	r8, r5
   85714:	ea4f 1858 	mov.w	r8, r8, lsr #5
	udi_cdc_tx_trans_ongoing[port] = true;
   85718:	2301      	movs	r3, #1
	if (cpu_irq_is_enabled_flags(flags))
   8571a:	9902      	ldr	r1, [sp, #8]
   8571c:	5533      	strb	r3, [r6, r4]
   8571e:	b919      	cbnz	r1, 85728 <udi_cdc_tx_send+0x80>
		cpu_irq_enable();
   85720:	7013      	strb	r3, [r2, #0]
   85722:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85726:	b662      	cpsie	i
	b_short_packet = (udi_cdc_tx_buf_nb[port][buf_sel_trans] != UDI_CDC_TX_BUFFERS);
   85728:	eb07 0508 	add.w	r5, r7, r8
   8572c:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
   85730:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   85734:	bf14      	ite	ne
   85736:	2601      	movne	r6, #1
   85738:	2600      	moveq	r6, #0
	if (b_short_packet) {
   8573a:	d022      	beq.n	85782 <udi_cdc_tx_send+0xda>
		if (udd_is_high_speed()) {
   8573c:	47c8      	blx	r9
   8573e:	2800      	cmp	r0, #0
   85740:	d044      	beq.n	857cc <udi_cdc_tx_send+0x124>
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   85742:	4b29      	ldr	r3, [pc, #164]	; (857e8 <udi_cdc_tx_send+0x140>)
   85744:	4798      	blx	r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   85746:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
			udi_cdc_tx_sof_num[port] = udd_get_micro_frame_number();
   8574a:	f82a 0014 	strh.w	r0, [sl, r4, lsl #1]
	udd_ep_run( ep,
   8574e:	482c      	ldr	r0, [pc, #176]	; (85800 <udi_cdc_tx_send+0x158>)
			udi_cdc_tx_buf[port][buf_sel_trans],
   85750:	4a2c      	ldr	r2, [pc, #176]	; (85804 <udi_cdc_tx_send+0x15c>)
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_IN, ~)
   85752:	2c01      	cmp	r4, #1
			udi_cdc_tx_buf[port][buf_sel_trans],
   85754:	4447      	add	r7, r8
	udd_ep_run( ep,
   85756:	9000      	str	r0, [sp, #0]
   85758:	4631      	mov	r1, r6
   8575a:	bf14      	ite	ne
   8575c:	2083      	movne	r0, #131	; 0x83
   8575e:	2085      	moveq	r0, #133	; 0x85
   85760:	4c29      	ldr	r4, [pc, #164]	; (85808 <udi_cdc_tx_send+0x160>)
   85762:	eb02 2247 	add.w	r2, r2, r7, lsl #9
   85766:	47a0      	blx	r4
}
   85768:	b005      	add	sp, #20
   8576a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (udi_cdc_tx_sof_num[port] == udd_get_frame_number()) {
   8576e:	4b27      	ldr	r3, [pc, #156]	; (8580c <udi_cdc_tx_send+0x164>)
   85770:	4798      	blx	r3
   85772:	4285      	cmp	r5, r0
   85774:	d1af      	bne.n	856d6 <udi_cdc_tx_send+0x2e>
   85776:	e79d      	b.n	856b4 <udi_cdc_tx_send+0xc>
		udi_cdc_tx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   85778:	fab5 f585 	clz	r5, r5
   8577c:	096d      	lsrs	r5, r5, #5
   8577e:	550d      	strb	r5, [r1, r4]
   85780:	e7ca      	b.n	85718 <udi_cdc_tx_send+0x70>
		udi_cdc_tx_sof_num[port] = 0; // Force next transfer without wait SOF
   85782:	2200      	movs	r2, #0
   85784:	f82a 2014 	strh.w	r2, [sl, r4, lsl #1]
   85788:	e7e1      	b.n	8574e <udi_cdc_tx_send+0xa6>
		sof_zlp_counter++;
   8578a:	4b1b      	ldr	r3, [pc, #108]	; (857f8 <udi_cdc_tx_send+0x150>)
   8578c:	8818      	ldrh	r0, [r3, #0]
   8578e:	9303      	str	r3, [sp, #12]
   85790:	3001      	adds	r0, #1
   85792:	8018      	strh	r0, [r3, #0]
		if (((!udd_is_high_speed()) && (sof_zlp_counter < 100))
   85794:	47c8      	blx	r9
   85796:	9b03      	ldr	r3, [sp, #12]
   85798:	4a14      	ldr	r2, [pc, #80]	; (857ec <udi_cdc_tx_send+0x144>)
   8579a:	b910      	cbnz	r0, 857a2 <udi_cdc_tx_send+0xfa>
   8579c:	8818      	ldrh	r0, [r3, #0]
   8579e:	2863      	cmp	r0, #99	; 0x63
   857a0:	d90a      	bls.n	857b8 <udi_cdc_tx_send+0x110>
   857a2:	9303      	str	r3, [sp, #12]
				|| (udd_is_high_speed() && (sof_zlp_counter < 800))) {
   857a4:	47c8      	blx	r9
   857a6:	4a11      	ldr	r2, [pc, #68]	; (857ec <udi_cdc_tx_send+0x144>)
   857a8:	4911      	ldr	r1, [pc, #68]	; (857f0 <udi_cdc_tx_send+0x148>)
   857aa:	9b03      	ldr	r3, [sp, #12]
   857ac:	2800      	cmp	r0, #0
   857ae:	d0a9      	beq.n	85704 <udi_cdc_tx_send+0x5c>
   857b0:	8818      	ldrh	r0, [r3, #0]
   857b2:	f5b0 7f48 	cmp.w	r0, #800	; 0x320
   857b6:	d2a5      	bcs.n	85704 <udi_cdc_tx_send+0x5c>
	if (cpu_irq_is_enabled_flags(flags))
   857b8:	9b02      	ldr	r3, [sp, #8]
   857ba:	2b00      	cmp	r3, #0
   857bc:	f47f af7a 	bne.w	856b4 <udi_cdc_tx_send+0xc>
		cpu_irq_enable();
   857c0:	2301      	movs	r3, #1
   857c2:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   857c4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   857c8:	b662      	cpsie	i
}
   857ca:	e773      	b.n	856b4 <udi_cdc_tx_send+0xc>
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   857cc:	4b0f      	ldr	r3, [pc, #60]	; (8580c <udi_cdc_tx_send+0x164>)
   857ce:	4798      	blx	r3
			udi_cdc_tx_buf_nb[port][buf_sel_trans],
   857d0:	f83b 3015 	ldrh.w	r3, [fp, r5, lsl #1]
			udi_cdc_tx_sof_num[port] = udd_get_frame_number();
   857d4:	f82a 0014 	strh.w	r0, [sl, r4, lsl #1]
   857d8:	e7b9      	b.n	8574e <udi_cdc_tx_send+0xa6>
   857da:	bf00      	nop
   857dc:	200732ec 	.word	0x200732ec
   857e0:	000842dd 	.word	0x000842dd
   857e4:	200732e8 	.word	0x200732e8
   857e8:	00084339 	.word	0x00084339
   857ec:	20070b04 	.word	0x20070b04
   857f0:	200732e4 	.word	0x200732e4
   857f4:	200732dc 	.word	0x200732dc
   857f8:	200722aa 	.word	0x200722aa
   857fc:	20072ad8 	.word	0x20072ad8
   85800:	00085811 	.word	0x00085811
   85804:	20072adc 	.word	0x20072adc
   85808:	0008456d 	.word	0x0008456d
   8580c:	00084329 	.word	0x00084329

00085810 <udi_cdc_data_sent>:
	if (UDD_EP_TRANSFER_OK != status) {
   85810:	b100      	cbz	r0, 85814 <udi_cdc_data_sent+0x4>
   85812:	4770      	bx	lr
   85814:	4603      	mov	r3, r0
	switch (ep) {
   85816:	f1a2 0085 	sub.w	r0, r2, #133	; 0x85
   8581a:	fab0 f080 	clz	r0, r0
{
   8581e:	b470      	push	{r4, r5, r6}
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   85820:	4a09      	ldr	r2, [pc, #36]	; (85848 <udi_cdc_data_sent+0x38>)
	switch (ep) {
   85822:	0940      	lsrs	r0, r0, #5
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   85824:	f812 c000 	ldrb.w	ip, [r2, r0]
   85828:	0042      	lsls	r2, r0, #1
   8582a:	f1bc 0f00 	cmp.w	ip, #0
   8582e:	bf08      	it	eq
   85830:	3201      	addeq	r2, #1
   85832:	4c06      	ldr	r4, [pc, #24]	; (8584c <udi_cdc_data_sent+0x3c>)
	udi_cdc_tx_both_buf_to_send[port] = false;
   85834:	4e06      	ldr	r6, [pc, #24]	; (85850 <udi_cdc_data_sent+0x40>)
	udi_cdc_tx_trans_ongoing[port] = false;
   85836:	4d07      	ldr	r5, [pc, #28]	; (85854 <udi_cdc_data_sent+0x44>)
	udi_cdc_tx_both_buf_to_send[port] = false;
   85838:	5433      	strb	r3, [r6, r0]
	udi_cdc_tx_buf_nb[port][(udi_cdc_tx_buf_sel[port]==0)?1:0] = 0;
   8583a:	f824 3012 	strh.w	r3, [r4, r2, lsl #1]
	udi_cdc_tx_trans_ongoing[port] = false;
   8583e:	542b      	strb	r3, [r5, r0]
	udi_cdc_tx_send(port);
   85840:	4905      	ldr	r1, [pc, #20]	; (85858 <udi_cdc_data_sent+0x48>)
}
   85842:	bc70      	pop	{r4, r5, r6}
	udi_cdc_tx_send(port);
   85844:	4708      	bx	r1
   85846:	bf00      	nop
   85848:	200732e4 	.word	0x200732e4
   8584c:	200732dc 	.word	0x200732dc
   85850:	20072ad8 	.word	0x20072ad8
   85854:	200732ec 	.word	0x200732ec
   85858:	000856a9 	.word	0x000856a9

0008585c <udi_cdc_data_sof_notify>:
{
   8585c:	b510      	push	{r4, lr}
	udi_cdc_tx_send(port_notify);
   8585e:	4c06      	ldr	r4, [pc, #24]	; (85878 <udi_cdc_data_sof_notify+0x1c>)
   85860:	4b06      	ldr	r3, [pc, #24]	; (8587c <udi_cdc_data_sof_notify+0x20>)
   85862:	7820      	ldrb	r0, [r4, #0]
   85864:	4798      	blx	r3
	port_notify++;
   85866:	7823      	ldrb	r3, [r4, #0]
   85868:	3301      	adds	r3, #1
   8586a:	b2db      	uxtb	r3, r3
	if (port_notify >= UDI_CDC_PORT_NB) {
   8586c:	2b01      	cmp	r3, #1
		port_notify = 0;
   8586e:	bf88      	it	hi
   85870:	2300      	movhi	r3, #0
   85872:	7023      	strb	r3, [r4, #0]
}
   85874:	bd10      	pop	{r4, pc}
   85876:	bf00      	nop
   85878:	200722a9 	.word	0x200722a9
   8587c:	000856a9 	.word	0x000856a9

00085880 <udi_cdc_rx_start>:
{
   85880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   85884:	4604      	mov	r4, r0
   85886:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85888:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   8588c:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   8588e:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85892:	2200      	movs	r2, #0
   85894:	4b34      	ldr	r3, [pc, #208]	; (85968 <udi_cdc_rx_start+0xe8>)
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   85896:	4935      	ldr	r1, [pc, #212]	; (8596c <udi_cdc_rx_start+0xec>)
	if (udi_cdc_rx_trans_ongoing[port] ||
   85898:	4e35      	ldr	r6, [pc, #212]	; (85970 <udi_cdc_rx_start+0xf0>)
   8589a:	701a      	strb	r2, [r3, #0]
	buf_sel_trans = udi_cdc_rx_buf_sel[port];
   8589c:	5d0d      	ldrb	r5, [r1, r4]
	if (udi_cdc_rx_trans_ongoing[port] ||
   8589e:	5d32      	ldrb	r2, [r6, r4]
   858a0:	2a00      	cmp	r2, #0
   858a2:	d14f      	bne.n	85944 <udi_cdc_rx_start+0xc4>
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   858a4:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 85974 <udi_cdc_rx_start+0xf4>
   858a8:	b2ed      	uxtb	r5, r5
   858aa:	f002 08ff 	and.w	r8, r2, #255	; 0xff
   858ae:	4a32      	ldr	r2, [pc, #200]	; (85978 <udi_cdc_rx_start+0xf8>)
   858b0:	eb05 0744 	add.w	r7, r5, r4, lsl #1
   858b4:	f832 e014 	ldrh.w	lr, [r2, r4, lsl #1]
   858b8:	f839 c017 	ldrh.w	ip, [r9, r7, lsl #1]
   858bc:	fa1f fe8e 	uxth.w	lr, lr
   858c0:	fa1f fc8c 	uxth.w	ip, ip
	if (udi_cdc_rx_trans_ongoing[port] ||
   858c4:	45e6      	cmp	lr, ip
		(udi_cdc_rx_pos[port] < udi_cdc_rx_buf_nb[port][buf_sel_trans])) {
   858c6:	ea4f 0744 	mov.w	r7, r4, lsl #1
	if (udi_cdc_rx_trans_ongoing[port] ||
   858ca:	d33b      	bcc.n	85944 <udi_cdc_rx_start+0xc4>
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   858cc:	fab5 fc85 	clz	ip, r5
	udi_cdc_rx_trans_ongoing[port] = true;
   858d0:	f04f 0e01 	mov.w	lr, #1
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   858d4:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
	udi_cdc_rx_pos[port] = 0;
   858d8:	f822 8014 	strh.w	r8, [r2, r4, lsl #1]
	udi_cdc_rx_buf_sel[port] = (buf_sel_trans==0)?1:0;
   858dc:	f801 c004 	strb.w	ip, [r1, r4]
	udi_cdc_rx_trans_ongoing[port] = true;
   858e0:	f806 e004 	strb.w	lr, [r6, r4]
	if (cpu_irq_is_enabled_flags(flags))
   858e4:	b920      	cbnz	r0, 858f0 <udi_cdc_rx_start+0x70>
		cpu_irq_enable();
   858e6:	f883 e000 	strb.w	lr, [r3]
   858ea:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   858ee:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   858f0:	f3ef 8610 	mrs	r6, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   858f4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   858f6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   858fa:	2000      	movs	r0, #0
   858fc:	7018      	strb	r0, [r3, #0]

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   858fe:	f832 2014 	ldrh.w	r2, [r2, r4, lsl #1]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   85902:	5d08      	ldrb	r0, [r1, r4]
	pos = udi_cdc_rx_pos[port];
   85904:	b291      	uxth	r1, r2
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   85906:	183a      	adds	r2, r7, r0
   85908:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
   8590c:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   8590e:	b926      	cbnz	r6, 8591a <udi_cdc_rx_start+0x9a>
		cpu_irq_enable();
   85910:	2001      	movs	r0, #1
   85912:	7018      	strb	r0, [r3, #0]
   85914:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85918:	b662      	cpsie	i
	if (udi_cdc_multi_is_rx_ready(port)) {
   8591a:	4291      	cmp	r1, r2
   8591c:	d11f      	bne.n	8595e <udi_cdc_rx_start+0xde>
	return udd_ep_run(ep,
   8591e:	4817      	ldr	r0, [pc, #92]	; (8597c <udi_cdc_rx_start+0xfc>)
			udi_cdc_rx_buf[port][buf_sel_trans],
   85920:	4a17      	ldr	r2, [pc, #92]	; (85980 <udi_cdc_rx_start+0x100>)
	MREPEAT(UDI_CDC_PORT_NB, UDI_CDC_PORT_TO_DATA_EP_OUT, ~)
   85922:	2c01      	cmp	r4, #1
			udi_cdc_rx_buf[port][buf_sel_trans],
   85924:	443d      	add	r5, r7
	return udd_ep_run(ep,
   85926:	9000      	str	r0, [sp, #0]
   85928:	f44f 7300 	mov.w	r3, #512	; 0x200
   8592c:	f04f 0101 	mov.w	r1, #1
   85930:	bf14      	ite	ne
   85932:	2004      	movne	r0, #4
   85934:	2006      	moveq	r0, #6
   85936:	4c13      	ldr	r4, [pc, #76]	; (85984 <udi_cdc_rx_start+0x104>)
   85938:	eb02 2245 	add.w	r2, r2, r5, lsl #9
   8593c:	47a0      	blx	r4
}
   8593e:	b003      	add	sp, #12
   85940:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cpu_irq_is_enabled_flags(flags))
   85944:	b938      	cbnz	r0, 85956 <udi_cdc_rx_start+0xd6>
		cpu_irq_enable();
   85946:	2201      	movs	r2, #1
   85948:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   8594a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   8594e:	b662      	cpsie	i
   85950:	b003      	add	sp, #12
   85952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return false;
   85956:	2000      	movs	r0, #0
}
   85958:	b003      	add	sp, #12
   8595a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		UDI_CDC_RX_NOTIFY(port);
   8595e:	4620      	mov	r0, r4
   85960:	4b09      	ldr	r3, [pc, #36]	; (85988 <udi_cdc_rx_start+0x108>)
   85962:	4798      	blx	r3
   85964:	e7db      	b.n	8591e <udi_cdc_rx_start+0x9e>
   85966:	bf00      	nop
   85968:	20070b04 	.word	0x20070b04
   8596c:	20072ac8 	.word	0x20072ac8
   85970:	20072ad0 	.word	0x20072ad0
   85974:	20072ac0 	.word	0x20072ac0
   85978:	20072acc 	.word	0x20072acc
   8597c:	00085a2d 	.word	0x00085a2d
   85980:	200722c0 	.word	0x200722c0
   85984:	0008456d 	.word	0x0008456d
   85988:	000821a5 	.word	0x000821a5

0008598c <udi_cdc_data_enable>:
{
   8598c:	b570      	push	{r4, r5, r6, lr}
	if (udi_cdc_nb_data_enabled > UDI_CDC_PORT_NB) {
   8598e:	4e1a      	ldr	r6, [pc, #104]	; (859f8 <udi_cdc_data_enable+0x6c>)
	udi_cdc_tx_trans_ongoing[port] = false;
   85990:	2500      	movs	r5, #0
	if (udi_cdc_nb_data_enabled > UDI_CDC_PORT_NB) {
   85992:	7833      	ldrb	r3, [r6, #0]
	udi_cdc_tx_trans_ongoing[port] = false;
   85994:	4919      	ldr	r1, [pc, #100]	; (859fc <udi_cdc_data_enable+0x70>)
	if (udi_cdc_nb_data_enabled > UDI_CDC_PORT_NB) {
   85996:	2b02      	cmp	r3, #2
		udi_cdc_nb_data_enabled = 0;
   85998:	bf84      	itt	hi
   8599a:	2300      	movhi	r3, #0
   8599c:	7033      	strbhi	r3, [r6, #0]
	port = udi_cdc_nb_data_enabled;
   8599e:	7834      	ldrb	r4, [r6, #0]
	udi_cdc_tx_both_buf_to_send[port] = false;
   859a0:	4b17      	ldr	r3, [pc, #92]	; (85a00 <udi_cdc_data_enable+0x74>)
	udi_cdc_tx_buf_nb[port][0] = 0;
   859a2:	4818      	ldr	r0, [pc, #96]	; (85a04 <udi_cdc_data_enable+0x78>)
	port = udi_cdc_nb_data_enabled;
   859a4:	b2e4      	uxtb	r4, r4
	udi_cdc_tx_buf_nb[port][0] = 0;
   859a6:	f840 5024 	str.w	r5, [r0, r4, lsl #2]
	udi_cdc_tx_buf_sel[port] = 0;
   859aa:	4a17      	ldr	r2, [pc, #92]	; (85a08 <udi_cdc_data_enable+0x7c>)
	udi_cdc_tx_trans_ongoing[port] = false;
   859ac:	550d      	strb	r5, [r1, r4]
	udi_cdc_tx_both_buf_to_send[port] = false;
   859ae:	551d      	strb	r5, [r3, r4]
	udi_cdc_tx_sof_num[port] = 0;
   859b0:	4b16      	ldr	r3, [pc, #88]	; (85a0c <udi_cdc_data_enable+0x80>)
	udi_cdc_tx_send(port);
   859b2:	4620      	mov	r0, r4
	udi_cdc_tx_buf_sel[port] = 0;
   859b4:	5515      	strb	r5, [r2, r4]
	udi_cdc_tx_sof_num[port] = 0;
   859b6:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
	udi_cdc_tx_send(port);
   859ba:	4b15      	ldr	r3, [pc, #84]	; (85a10 <udi_cdc_data_enable+0x84>)
   859bc:	4798      	blx	r3
	udi_cdc_rx_trans_ongoing[port] = false;
   859be:	4a15      	ldr	r2, [pc, #84]	; (85a14 <udi_cdc_data_enable+0x88>)
	udi_cdc_rx_buf_nb[port][0] = 0;
   859c0:	4b15      	ldr	r3, [pc, #84]	; (85a18 <udi_cdc_data_enable+0x8c>)
	udi_cdc_rx_trans_ongoing[port] = false;
   859c2:	5515      	strb	r5, [r2, r4]
	udi_cdc_rx_buf_sel[port] = 0;
   859c4:	4a15      	ldr	r2, [pc, #84]	; (85a1c <udi_cdc_data_enable+0x90>)
	if (!udi_cdc_rx_start(port)) {
   859c6:	4620      	mov	r0, r4
	udi_cdc_rx_buf_sel[port] = 0;
   859c8:	5515      	strb	r5, [r2, r4]
	udi_cdc_rx_buf_nb[port][0] = 0;
   859ca:	f823 5024 	strh.w	r5, [r3, r4, lsl #2]
	udi_cdc_rx_buf_nb[port][1] = 0;
   859ce:	eb03 0284 	add.w	r2, r3, r4, lsl #2
	udi_cdc_rx_pos[port] = 0;
   859d2:	4b13      	ldr	r3, [pc, #76]	; (85a20 <udi_cdc_data_enable+0x94>)
	udi_cdc_rx_buf_nb[port][1] = 0;
   859d4:	8055      	strh	r5, [r2, #2]
	udi_cdc_rx_pos[port] = 0;
   859d6:	f823 5014 	strh.w	r5, [r3, r4, lsl #1]
	if (!udi_cdc_rx_start(port)) {
   859da:	4b12      	ldr	r3, [pc, #72]	; (85a24 <udi_cdc_data_enable+0x98>)
   859dc:	4798      	blx	r3
   859de:	b130      	cbz	r0, 859ee <udi_cdc_data_enable+0x62>
	udi_cdc_nb_data_enabled++;
   859e0:	7833      	ldrb	r3, [r6, #0]
   859e2:	3301      	adds	r3, #1
   859e4:	b2db      	uxtb	r3, r3
   859e6:	7033      	strb	r3, [r6, #0]
	if (udi_cdc_nb_data_enabled == UDI_CDC_PORT_NB) {
   859e8:	7833      	ldrb	r3, [r6, #0]
   859ea:	2b02      	cmp	r3, #2
   859ec:	d000      	beq.n	859f0 <udi_cdc_data_enable+0x64>
}
   859ee:	bd70      	pop	{r4, r5, r6, pc}
		udi_cdc_data_running = true;
   859f0:	2201      	movs	r2, #1
   859f2:	4b0d      	ldr	r3, [pc, #52]	; (85a28 <udi_cdc_data_enable+0x9c>)
   859f4:	701a      	strb	r2, [r3, #0]
}
   859f6:	bd70      	pop	{r4, r5, r6, pc}
   859f8:	200722bf 	.word	0x200722bf
   859fc:	200732ec 	.word	0x200732ec
   85a00:	20072ad8 	.word	0x20072ad8
   85a04:	200732dc 	.word	0x200732dc
   85a08:	200732e4 	.word	0x200732e4
   85a0c:	200732e8 	.word	0x200732e8
   85a10:	000856a9 	.word	0x000856a9
   85a14:	20072ad0 	.word	0x20072ad0
   85a18:	20072ac0 	.word	0x20072ac0
   85a1c:	20072ac8 	.word	0x20072ac8
   85a20:	20072acc 	.word	0x20072acc
   85a24:	00085881 	.word	0x00085881
   85a28:	200722ac 	.word	0x200722ac

00085a2c <udi_cdc_data_received>:
	if (UDD_EP_TRANSFER_OK != status) {
   85a2c:	bb50      	cbnz	r0, 85a84 <udi_cdc_data_received+0x58>
{
   85a2e:	b510      	push	{r4, lr}
   85a30:	4686      	mov	lr, r0
	switch (ep) {
   85a32:	f1a2 0006 	sub.w	r0, r2, #6
   85a36:	fab0 f080 	clz	r0, r0
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   85a3a:	4b13      	ldr	r3, [pc, #76]	; (85a88 <udi_cdc_data_received+0x5c>)
	switch (ep) {
   85a3c:	0940      	lsrs	r0, r0, #5
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   85a3e:	5c1b      	ldrb	r3, [r3, r0]
{
   85a40:	b082      	sub	sp, #8
	buf_sel_trans = (udi_cdc_rx_buf_sel[port]==0)?1:0;
   85a42:	fab3 f383 	clz	r3, r3
   85a46:	095b      	lsrs	r3, r3, #5
	if (!n) {
   85a48:	b169      	cbz	r1, 85a66 <udi_cdc_data_received+0x3a>
	udi_cdc_rx_buf_nb[port][buf_sel_trans] = n;
   85a4a:	4a10      	ldr	r2, [pc, #64]	; (85a8c <udi_cdc_data_received+0x60>)
   85a4c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
   85a50:	b289      	uxth	r1, r1
   85a52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	udi_cdc_rx_trans_ongoing[port] = false;
   85a56:	4a0e      	ldr	r2, [pc, #56]	; (85a90 <udi_cdc_data_received+0x64>)
	udi_cdc_rx_start(port);
   85a58:	4b0e      	ldr	r3, [pc, #56]	; (85a94 <udi_cdc_data_received+0x68>)
	udi_cdc_rx_trans_ongoing[port] = false;
   85a5a:	f802 e000 	strb.w	lr, [r2, r0]
}
   85a5e:	b002      	add	sp, #8
   85a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	udi_cdc_rx_start(port);
   85a64:	4718      	bx	r3
				udi_cdc_rx_buf[port][buf_sel_trans],
   85a66:	4c0c      	ldr	r4, [pc, #48]	; (85a98 <udi_cdc_data_received+0x6c>)
		udd_ep_run( ep,
   85a68:	490c      	ldr	r1, [pc, #48]	; (85a9c <udi_cdc_data_received+0x70>)
				udi_cdc_rx_buf[port][buf_sel_trans],
   85a6a:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
		udd_ep_run( ep,
   85a6e:	9100      	str	r1, [sp, #0]
   85a70:	4610      	mov	r0, r2
   85a72:	f44f 7300 	mov.w	r3, #512	; 0x200
   85a76:	eb04 224c 	add.w	r2, r4, ip, lsl #9
   85a7a:	2101      	movs	r1, #1
   85a7c:	4c08      	ldr	r4, [pc, #32]	; (85aa0 <udi_cdc_data_received+0x74>)
   85a7e:	47a0      	blx	r4
}
   85a80:	b002      	add	sp, #8
   85a82:	bd10      	pop	{r4, pc}
   85a84:	4770      	bx	lr
   85a86:	bf00      	nop
   85a88:	20072ac8 	.word	0x20072ac8
   85a8c:	20072ac0 	.word	0x20072ac0
   85a90:	20072ad0 	.word	0x20072ad0
   85a94:	00085881 	.word	0x00085881
   85a98:	200722c0 	.word	0x200722c0
   85a9c:	00085a2d 	.word	0x00085a2d
   85aa0:	0008456d 	.word	0x0008456d

00085aa4 <udi_cdc_multi_get_nb_received_data>:
{
   85aa4:	b430      	push	{r4, r5}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85aa6:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85aaa:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85aac:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85ab0:	f04f 0c00 	mov.w	ip, #0
   85ab4:	490b      	ldr	r1, [pc, #44]	; (85ae4 <udi_cdc_multi_get_nb_received_data+0x40>)
	pos = udi_cdc_rx_pos[port];
   85ab6:	4b0c      	ldr	r3, [pc, #48]	; (85ae8 <udi_cdc_multi_get_nb_received_data+0x44>)
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   85ab8:	4a0c      	ldr	r2, [pc, #48]	; (85aec <udi_cdc_multi_get_nb_received_data+0x48>)
   85aba:	f881 c000 	strb.w	ip, [r1]
	pos = udi_cdc_rx_pos[port];
   85abe:	f833 3010 	ldrh.w	r3, [r3, r0, lsl #1]
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   85ac2:	5c12      	ldrb	r2, [r2, r0]
   85ac4:	4d0a      	ldr	r5, [pc, #40]	; (85af0 <udi_cdc_multi_get_nb_received_data+0x4c>)
   85ac6:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   85aca:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
	pos = udi_cdc_rx_pos[port];
   85ace:	b29b      	uxth	r3, r3
	nb_received = udi_cdc_rx_buf_nb[port][udi_cdc_rx_buf_sel[port]] - pos;
   85ad0:	b280      	uxth	r0, r0
   85ad2:	1ac0      	subs	r0, r0, r3
	if (cpu_irq_is_enabled_flags(flags))
   85ad4:	b924      	cbnz	r4, 85ae0 <udi_cdc_multi_get_nb_received_data+0x3c>
		cpu_irq_enable();
   85ad6:	2301      	movs	r3, #1
   85ad8:	700b      	strb	r3, [r1, #0]
   85ada:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85ade:	b662      	cpsie	i
	cpu_irq_restore(flags);
	return nb_received;
}
   85ae0:	bc30      	pop	{r4, r5}
   85ae2:	4770      	bx	lr
   85ae4:	20070b04 	.word	0x20070b04
   85ae8:	20072acc 	.word	0x20072acc
   85aec:	20072ac8 	.word	0x20072ac8
   85af0:	20072ac0 	.word	0x20072ac0

00085af4 <udi_cdc_multi_read_buf>:
{
	return udi_cdc_multi_getc(0);
}

iram_size_t udi_cdc_multi_read_buf(uint8_t port, void* buf, iram_size_t size)
{
   85af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85af8:	ea4f 0840 	mov.w	r8, r0, lsl #1
   85afc:	46c2      	mov	sl, r8
   85afe:	4617      	mov	r7, r2
   85b00:	460b      	mov	r3, r1
   85b02:	4680      	mov	r8, r0
   85b04:	4e25      	ldr	r6, [pc, #148]	; (85b9c <udi_cdc_multi_read_buf+0xa8>)
   85b06:	4d26      	ldr	r5, [pc, #152]	; (85ba0 <udi_cdc_multi_read_buf+0xac>)
   85b08:	f8df b098 	ldr.w	fp, [pc, #152]	; 85ba4 <udi_cdc_multi_read_buf+0xb0>
   85b0c:	f8df 9098 	ldr.w	r9, [pc, #152]	; 85ba8 <udi_cdc_multi_read_buf+0xb4>
   85b10:	b083      	sub	sp, #12
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85b12:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85b16:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85b18:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85b1c:	2200      	movs	r2, #0
   85b1e:	7032      	strb	r2, [r6, #0]
#endif

udi_cdc_read_buf_loop_wait:
	// Check available data
	flags = cpu_irq_save();
	pos = udi_cdc_rx_pos[port];
   85b20:	f835 0018 	ldrh.w	r0, [r5, r8, lsl #1]
	buf_sel = udi_cdc_rx_buf_sel[port];
   85b24:	f81b 1008 	ldrb.w	r1, [fp, r8]
	pos = udi_cdc_rx_pos[port];
   85b28:	b280      	uxth	r0, r0
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   85b2a:	eb0a 0201 	add.w	r2, sl, r1
   85b2e:	f839 2012 	ldrh.w	r2, [r9, r2, lsl #1]
	buf_sel = udi_cdc_rx_buf_sel[port];
   85b32:	b2c9      	uxtb	r1, r1
	again = pos >= udi_cdc_rx_buf_nb[port][buf_sel];
   85b34:	b292      	uxth	r2, r2
	if (cpu_irq_is_enabled_flags(flags))
   85b36:	b924      	cbnz	r4, 85b42 <udi_cdc_multi_read_buf+0x4e>
		cpu_irq_enable();
   85b38:	2401      	movs	r4, #1
   85b3a:	7034      	strb	r4, [r6, #0]
   85b3c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85b40:	b662      	cpsie	i
	cpu_irq_restore(flags);
	while (again) {
   85b42:	4282      	cmp	r2, r0
		if (!udi_cdc_data_running) {
   85b44:	4c19      	ldr	r4, [pc, #100]	; (85bac <udi_cdc_multi_read_buf+0xb8>)
	while (again) {
   85b46:	d806      	bhi.n	85b56 <udi_cdc_multi_read_buf+0x62>
		if (!udi_cdc_data_running) {
   85b48:	7822      	ldrb	r2, [r4, #0]
   85b4a:	2a00      	cmp	r2, #0
   85b4c:	d1e1      	bne.n	85b12 <udi_cdc_multi_read_buf+0x1e>

	if (size) {
		goto udi_cdc_read_buf_loop_wait;
	}
	return 0;
}
   85b4e:	4638      	mov	r0, r7
   85b50:	b003      	add	sp, #12
   85b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   85b56:	4451      	add	r1, sl
   85b58:	f839 4011 	ldrh.w	r4, [r9, r1, lsl #1]
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85b5c:	4a14      	ldr	r2, [pc, #80]	; (85bb0 <udi_cdc_multi_read_buf+0xbc>)
	copy_nb = udi_cdc_rx_buf_nb[port][buf_sel] - pos;
   85b5e:	b2a4      	uxth	r4, r4
   85b60:	1a24      	subs	r4, r4, r0
	if (copy_nb>size) {
   85b62:	42bc      	cmp	r4, r7
   85b64:	bf28      	it	cs
   85b66:	463c      	movcs	r4, r7
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85b68:	eb00 2141 	add.w	r1, r0, r1, lsl #9
   85b6c:	4618      	mov	r0, r3
	ptr_buf += copy_nb;
   85b6e:	4423      	add	r3, r4
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85b70:	4411      	add	r1, r2
	ptr_buf += copy_nb;
   85b72:	9301      	str	r3, [sp, #4]
	memcpy(ptr_buf, &udi_cdc_rx_buf[port][buf_sel][pos], copy_nb);
   85b74:	4622      	mov	r2, r4
   85b76:	4b0f      	ldr	r3, [pc, #60]	; (85bb4 <udi_cdc_multi_read_buf+0xc0>)
   85b78:	4798      	blx	r3
	udi_cdc_rx_pos[port] += copy_nb;
   85b7a:	f835 2018 	ldrh.w	r2, [r5, r8, lsl #1]
	size -= copy_nb;
   85b7e:	1b3f      	subs	r7, r7, r4
	udi_cdc_rx_pos[port] += copy_nb;
   85b80:	4414      	add	r4, r2
   85b82:	b2a4      	uxth	r4, r4
	udi_cdc_rx_start(port);
   85b84:	4b0c      	ldr	r3, [pc, #48]	; (85bb8 <udi_cdc_multi_read_buf+0xc4>)
   85b86:	4640      	mov	r0, r8
	udi_cdc_rx_pos[port] += copy_nb;
   85b88:	f825 4018 	strh.w	r4, [r5, r8, lsl #1]
	udi_cdc_rx_start(port);
   85b8c:	4798      	blx	r3
	if (size) {
   85b8e:	9b01      	ldr	r3, [sp, #4]
   85b90:	2f00      	cmp	r7, #0
   85b92:	d1be      	bne.n	85b12 <udi_cdc_multi_read_buf+0x1e>
}
   85b94:	4638      	mov	r0, r7
   85b96:	b003      	add	sp, #12
   85b98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85b9c:	20070b04 	.word	0x20070b04
   85ba0:	20072acc 	.word	0x20072acc
   85ba4:	20072ac8 	.word	0x20072ac8
   85ba8:	20072ac0 	.word	0x20072ac0
   85bac:	200722ac 	.word	0x200722ac
   85bb0:	200722c0 	.word	0x200722c0
   85bb4:	00085e0d 	.word	0x00085e0d
   85bb8:	00085881 	.word	0x00085881

00085bbc <udi_cdc_multi_is_tx_ready>:
{
	return udi_cdc_multi_get_free_tx_buffer(0);
}

bool udi_cdc_multi_is_tx_ready(uint8_t port)
{
   85bbc:	4603      	mov	r3, r0
   85bbe:	b4f0      	push	{r4, r5, r6, r7}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85bc0:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85bc4:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85bc6:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85bca:	2100      	movs	r1, #0
   85bcc:	4d13      	ldr	r5, [pc, #76]	; (85c1c <udi_cdc_multi_is_tx_ready+0x60>)
	buf_sel = udi_cdc_tx_buf_sel[port];
   85bce:	4e14      	ldr	r6, [pc, #80]	; (85c20 <udi_cdc_multi_is_tx_ready+0x64>)
   85bd0:	7029      	strb	r1, [r5, #0]
   85bd2:	5cf2      	ldrb	r2, [r6, r3]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   85bd4:	4813      	ldr	r0, [pc, #76]	; (85c24 <udi_cdc_multi_is_tx_ready+0x68>)
   85bd6:	eb02 0c43 	add.w	ip, r2, r3, lsl #1
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   85bda:	f830 001c 	ldrh.w	r0, [r0, ip, lsl #1]
   85bde:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   85be2:	d008      	beq.n	85bf6 <udi_cdc_multi_is_tx_ready+0x3a>
   85be4:	2001      	movs	r0, #1
	if (cpu_irq_is_enabled_flags(flags))
   85be6:	b924      	cbnz	r4, 85bf2 <udi_cdc_multi_is_tx_ready+0x36>
		cpu_irq_enable();
   85be8:	2301      	movs	r3, #1
   85bea:	702b      	strb	r3, [r5, #0]
   85bec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85bf0:	b662      	cpsie	i
	return (udi_cdc_multi_get_free_tx_buffer(port) != 0);
}
   85bf2:	bcf0      	pop	{r4, r5, r6, r7}
   85bf4:	4770      	bx	lr
		if ((!udi_cdc_tx_trans_ongoing[port])
   85bf6:	480c      	ldr	r0, [pc, #48]	; (85c28 <udi_cdc_multi_is_tx_ready+0x6c>)
   85bf8:	5cc7      	ldrb	r7, [r0, r3]
   85bfa:	f007 00ff 	and.w	r0, r7, #255	; 0xff
   85bfe:	b95f      	cbnz	r7, 85c18 <udi_cdc_multi_is_tx_ready+0x5c>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   85c00:	490a      	ldr	r1, [pc, #40]	; (85c2c <udi_cdc_multi_is_tx_ready+0x70>)
   85c02:	5ccf      	ldrb	r7, [r1, r3]
   85c04:	2f00      	cmp	r7, #0
   85c06:	d1ee      	bne.n	85be6 <udi_cdc_multi_is_tx_ready+0x2a>
			udi_cdc_tx_both_buf_to_send[port] = true;
   85c08:	b2d2      	uxtb	r2, r2
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85c0a:	fab2 f282 	clz	r2, r2
			udi_cdc_tx_both_buf_to_send[port] = true;
   85c0e:	2001      	movs	r0, #1
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85c10:	0952      	lsrs	r2, r2, #5
			udi_cdc_tx_both_buf_to_send[port] = true;
   85c12:	54c8      	strb	r0, [r1, r3]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85c14:	54f2      	strb	r2, [r6, r3]
			buf_sel_nb = 0;
   85c16:	e7e6      	b.n	85be6 <udi_cdc_multi_is_tx_ready+0x2a>
   85c18:	4608      	mov	r0, r1
   85c1a:	e7e4      	b.n	85be6 <udi_cdc_multi_is_tx_ready+0x2a>
   85c1c:	20070b04 	.word	0x20070b04
   85c20:	200732e4 	.word	0x200732e4
   85c24:	200732dc 	.word	0x200732dc
   85c28:	200732ec 	.word	0x200732ec
   85c2c:	20072ad8 	.word	0x20072ad8

00085c30 <udi_cdc_multi_putc>:
{
	return udi_cdc_multi_is_tx_ready(0);
}

int udi_cdc_multi_putc(uint8_t port, int value)
{
   85c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

#if UDI_CDC_PORT_NB == 1 // To optimize code
	port = 0;
#endif

	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   85c34:	4b39      	ldr	r3, [pc, #228]	; (85d1c <udi_cdc_multi_putc+0xec>)
   85c36:	ebc0 06c0 	rsb	r6, r0, r0, lsl #3
   85c3a:	4433      	add	r3, r6
   85c3c:	799b      	ldrb	r3, [r3, #6]
   85c3e:	f04f 0801 	mov.w	r8, #1
   85c42:	f1a3 0309 	sub.w	r3, r3, #9
   85c46:	fab3 f383 	clz	r3, r3
	cpu_irq_disable();
   85c4a:	f04f 0e00 	mov.w	lr, #0
   85c4e:	4a34      	ldr	r2, [pc, #208]	; (85d20 <udi_cdc_multi_putc+0xf0>)
   85c50:	4d34      	ldr	r5, [pc, #208]	; (85d24 <udi_cdc_multi_putc+0xf4>)
   85c52:	4c35      	ldr	r4, [pc, #212]	; (85d28 <udi_cdc_multi_putc+0xf8>)
		if ((!udi_cdc_tx_trans_ongoing[port])
   85c54:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 85d2c <udi_cdc_multi_putc+0xfc>
	}

	// Write value
	flags = cpu_irq_save();
	buf_sel = udi_cdc_tx_buf_sel[port];
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   85c58:	f8df b0d4 	ldr.w	fp, [pc, #212]	; 85d30 <udi_cdc_multi_putc+0x100>
{
   85c5c:	b083      	sub	sp, #12
	b_databit_9 = (9 == udi_cdc_line_coding[port].bDataBits);
   85c5e:	095b      	lsrs	r3, r3, #5
   85c60:	fa00 fc08 	lsl.w	ip, r0, r8
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85c64:	f3ef 8710 	mrs	r7, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   85c68:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85c6a:	f3bf 8f5f 	dmb	sy
   85c6e:	f882 e000 	strb.w	lr, [r2]
	buf_sel = udi_cdc_tx_buf_sel[port];
   85c72:	5c2e      	ldrb	r6, [r5, r0]
	buf_sel_nb = udi_cdc_tx_buf_nb[port][buf_sel];
   85c74:	eb0c 0a06 	add.w	sl, ip, r6
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   85c78:	f834 a01a 	ldrh.w	sl, [r4, sl, lsl #1]
	buf_sel = udi_cdc_tx_buf_sel[port];
   85c7c:	b2f6      	uxtb	r6, r6
	if (buf_sel_nb == UDI_CDC_TX_BUFFERS) {
   85c7e:	f5ba 7f00 	cmp.w	sl, #512	; 0x200
   85c82:	d024      	beq.n	85cce <udi_cdc_multi_putc+0x9e>
	if (cpu_irq_is_enabled_flags(flags))
   85c84:	b927      	cbnz	r7, 85c90 <udi_cdc_multi_putc+0x60>
		cpu_irq_enable();
   85c86:	f882 8000 	strb.w	r8, [r2]
   85c8a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85c8e:	b662      	cpsie	i
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
   85c90:	f3ef 8610 	mrs	r6, PRIMASK
   85c94:	9601      	str	r6, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
   85c96:	b672      	cpsid	i
  __ASM volatile ("dmb 0xF":::"memory");
   85c98:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
   85c9c:	f882 e000 	strb.w	lr, [r2]
	buf_sel = udi_cdc_tx_buf_sel[port];
   85ca0:	5c2e      	ldrb	r6, [r5, r0]
	udi_cdc_tx_buf[port][buf_sel][udi_cdc_tx_buf_nb[port][buf_sel]++] = value;
   85ca2:	4466      	add	r6, ip
   85ca4:	f834 7016 	ldrh.w	r7, [r4, r6, lsl #1]
   85ca8:	eb0b 2a46 	add.w	sl, fp, r6, lsl #9
   85cac:	f80a 1007 	strb.w	r1, [sl, r7]
   85cb0:	3701      	adds	r7, #1
   85cb2:	f824 7016 	strh.w	r7, [r4, r6, lsl #1]
	if (cpu_irq_is_enabled_flags(flags))
   85cb6:	9e01      	ldr	r6, [sp, #4]
   85cb8:	b11e      	cbz	r6, 85cc2 <udi_cdc_multi_putc+0x92>
	cpu_irq_restore(flags);

	if (b_databit_9) {
   85cba:	b363      	cbz	r3, 85d16 <udi_cdc_multi_putc+0xe6>
		// Send MSB
		b_databit_9 = false;
   85cbc:	2300      	movs	r3, #0
		value = value >> 8;
   85cbe:	1209      	asrs	r1, r1, #8
		goto udi_cdc_putc_process_one_byte;
   85cc0:	e7d0      	b.n	85c64 <udi_cdc_multi_putc+0x34>
		cpu_irq_enable();
   85cc2:	f882 8000 	strb.w	r8, [r2]
   85cc6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85cca:	b662      	cpsie	i
}
   85ccc:	e7f5      	b.n	85cba <udi_cdc_multi_putc+0x8a>
		if ((!udi_cdc_tx_trans_ongoing[port])
   85cce:	f819 a000 	ldrb.w	sl, [r9, r0]
   85cd2:	f1ba 0f00 	cmp.w	sl, #0
   85cd6:	d106      	bne.n	85ce6 <udi_cdc_multi_putc+0xb6>
			&& (!udi_cdc_tx_both_buf_to_send[port])) {
   85cd8:	f8df a058 	ldr.w	sl, [pc, #88]	; 85d34 <udi_cdc_multi_putc+0x104>
   85cdc:	f81a a000 	ldrb.w	sl, [sl, r0]
   85ce0:	f1ba 0f00 	cmp.w	sl, #0
   85ce4:	d006      	beq.n	85cf4 <udi_cdc_multi_putc+0xc4>
	if (cpu_irq_is_enabled_flags(flags))
   85ce6:	b187      	cbz	r7, 85d0a <udi_cdc_multi_putc+0xda>
			return false;
   85ce8:	2000      	movs	r0, #0
		if (!udi_cdc_data_running) {
   85cea:	4b13      	ldr	r3, [pc, #76]	; (85d38 <udi_cdc_multi_putc+0x108>)
   85cec:	781b      	ldrb	r3, [r3, #0]
	}
	return true;
}
   85cee:	b003      	add	sp, #12
   85cf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85cf4:	fab6 f686 	clz	r6, r6
			udi_cdc_tx_both_buf_to_send[port] = true;
   85cf8:	f8df a038 	ldr.w	sl, [pc, #56]	; 85d34 <udi_cdc_multi_putc+0x104>
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85cfc:	0976      	lsrs	r6, r6, #5
			udi_cdc_tx_both_buf_to_send[port] = true;
   85cfe:	f80a 8000 	strb.w	r8, [sl, r0]
			udi_cdc_tx_buf_sel[port] = (buf_sel == 0)? 1 : 0;
   85d02:	542e      	strb	r6, [r5, r0]
   85d04:	2f00      	cmp	r7, #0
   85d06:	d0be      	beq.n	85c86 <udi_cdc_multi_putc+0x56>
   85d08:	e7c2      	b.n	85c90 <udi_cdc_multi_putc+0x60>
		cpu_irq_enable();
   85d0a:	2301      	movs	r3, #1
   85d0c:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   85d0e:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
   85d12:	b662      	cpsie	i
	return retval;
   85d14:	e7e8      	b.n	85ce8 <udi_cdc_multi_putc+0xb8>
	return true;
   85d16:	2001      	movs	r0, #1
   85d18:	e7e9      	b.n	85cee <udi_cdc_multi_putc+0xbe>
   85d1a:	bf00      	nop
   85d1c:	200722b0 	.word	0x200722b0
   85d20:	20070b04 	.word	0x20070b04
   85d24:	200732e4 	.word	0x200732e4
   85d28:	200732dc 	.word	0x200732dc
   85d2c:	200732ec 	.word	0x200732ec
   85d30:	20072adc 	.word	0x20072adc
   85d34:	20072ad8 	.word	0x20072ad8
   85d38:	200722ac 	.word	0x200722ac

00085d3c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   85d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int nChars = 0;

	if (file != 0) {
   85d40:	b9a0      	cbnz	r0, 85d6c <_read+0x30>
		return -1;
	}

	for (; len > 0; --len) {
   85d42:	2a00      	cmp	r2, #0
   85d44:	4690      	mov	r8, r2
   85d46:	dd0d      	ble.n	85d64 <_read+0x28>
   85d48:	460c      	mov	r4, r1
   85d4a:	4f0a      	ldr	r7, [pc, #40]	; (85d74 <_read+0x38>)
   85d4c:	4e0a      	ldr	r6, [pc, #40]	; (85d78 <_read+0x3c>)
   85d4e:	188d      	adds	r5, r1, r2
		ptr_get(stdio_base, ptr);
   85d50:	4621      	mov	r1, r4
   85d52:	6838      	ldr	r0, [r7, #0]
   85d54:	6833      	ldr	r3, [r6, #0]
		ptr++;
   85d56:	3401      	adds	r4, #1
		ptr_get(stdio_base, ptr);
   85d58:	4798      	blx	r3
	for (; len > 0; --len) {
   85d5a:	42ac      	cmp	r4, r5
   85d5c:	d1f8      	bne.n	85d50 <_read+0x14>
		nChars++;
	}
	return nChars;
}
   85d5e:	4640      	mov	r0, r8
   85d60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int nChars = 0;
   85d64:	4680      	mov	r8, r0
}
   85d66:	4640      	mov	r0, r8
   85d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -1;
   85d6c:	f04f 38ff 	mov.w	r8, #4294967295
   85d70:	e7f5      	b.n	85d5e <_read+0x22>
   85d72:	bf00      	nop
   85d74:	200721b4 	.word	0x200721b4
   85d78:	20073304 	.word	0x20073304

00085d7c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   85d7c:	b410      	push	{r4}

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   85d7e:	f04f 33ff 	mov.w	r3, #4294967295
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   85d82:	2402      	movs	r4, #2
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   85d84:	ea4f 1c81 	mov.w	ip, r1, lsl #6
   85d88:	eb00 1181 	add.w	r1, r0, r1, lsl #6
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   85d8c:	f840 400c 	str.w	r4, [r0, ip]
	tc_channel->TC_IDR = 0xFFFFFFFF;
   85d90:	628b      	str	r3, [r1, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   85d92:	6a0b      	ldr	r3, [r1, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   85d94:	604a      	str	r2, [r1, #4]
}
   85d96:	bc10      	pop	{r4}
   85d98:	4770      	bx	lr
   85d9a:	bf00      	nop

00085d9c <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   85d9c:	2305      	movs	r3, #5
   85d9e:	0189      	lsls	r1, r1, #6
   85da0:	5043      	str	r3, [r0, r1]
}
   85da2:	4770      	bx	lr

00085da4 <tc_write_ra>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RA = ul_value;
   85da4:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   85da8:	6142      	str	r2, [r0, #20]
}
   85daa:	4770      	bx	lr

00085dac <tc_write_rc>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_RC = ul_value;
   85dac:	eb00 1081 	add.w	r0, r0, r1, lsl #6
   85db0:	61c2      	str	r2, [r0, #28]
}
   85db2:	4770      	bx	lr

00085db4 <tc_enable_interrupt>:

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   85db4:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	tc_channel->TC_IER = ul_sources;
   85db8:	6242      	str	r2, [r0, #36]	; 0x24
}
   85dba:	4770      	bx	lr

00085dbc <tc_get_status>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
			
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   85dbc:	eb00 1081 	add.w	r0, r0, r1, lsl #6
	return tc_channel->TC_SR;
   85dc0:	6a00      	ldr	r0, [r0, #32]
}
   85dc2:	4770      	bx	lr

00085dc4 <__libc_init_array>:
   85dc4:	b570      	push	{r4, r5, r6, lr}
   85dc6:	4e0d      	ldr	r6, [pc, #52]	; (85dfc <__libc_init_array+0x38>)
   85dc8:	4d0d      	ldr	r5, [pc, #52]	; (85e00 <__libc_init_array+0x3c>)
   85dca:	1b76      	subs	r6, r6, r5
   85dcc:	10b6      	asrs	r6, r6, #2
   85dce:	d006      	beq.n	85dde <__libc_init_array+0x1a>
   85dd0:	2400      	movs	r4, #0
   85dd2:	f855 3b04 	ldr.w	r3, [r5], #4
   85dd6:	3401      	adds	r4, #1
   85dd8:	4798      	blx	r3
   85dda:	42a6      	cmp	r6, r4
   85ddc:	d1f9      	bne.n	85dd2 <__libc_init_array+0xe>
   85dde:	4e09      	ldr	r6, [pc, #36]	; (85e04 <__libc_init_array+0x40>)
   85de0:	4d09      	ldr	r5, [pc, #36]	; (85e08 <__libc_init_array+0x44>)
   85de2:	f007 f8b9 	bl	8cf58 <_init>
   85de6:	1b76      	subs	r6, r6, r5
   85de8:	10b6      	asrs	r6, r6, #2
   85dea:	d006      	beq.n	85dfa <__libc_init_array+0x36>
   85dec:	2400      	movs	r4, #0
   85dee:	f855 3b04 	ldr.w	r3, [r5], #4
   85df2:	3401      	adds	r4, #1
   85df4:	4798      	blx	r3
   85df6:	42a6      	cmp	r6, r4
   85df8:	d1f9      	bne.n	85dee <__libc_init_array+0x2a>
   85dfa:	bd70      	pop	{r4, r5, r6, pc}
   85dfc:	0008cf64 	.word	0x0008cf64
   85e00:	0008cf64 	.word	0x0008cf64
   85e04:	0008cf6c 	.word	0x0008cf6c
   85e08:	0008cf64 	.word	0x0008cf64

00085e0c <memcpy>:
   85e0c:	4684      	mov	ip, r0
   85e0e:	ea41 0300 	orr.w	r3, r1, r0
   85e12:	f013 0303 	ands.w	r3, r3, #3
   85e16:	d149      	bne.n	85eac <memcpy+0xa0>
   85e18:	3a40      	subs	r2, #64	; 0x40
   85e1a:	d323      	bcc.n	85e64 <memcpy+0x58>
   85e1c:	680b      	ldr	r3, [r1, #0]
   85e1e:	6003      	str	r3, [r0, #0]
   85e20:	684b      	ldr	r3, [r1, #4]
   85e22:	6043      	str	r3, [r0, #4]
   85e24:	688b      	ldr	r3, [r1, #8]
   85e26:	6083      	str	r3, [r0, #8]
   85e28:	68cb      	ldr	r3, [r1, #12]
   85e2a:	60c3      	str	r3, [r0, #12]
   85e2c:	690b      	ldr	r3, [r1, #16]
   85e2e:	6103      	str	r3, [r0, #16]
   85e30:	694b      	ldr	r3, [r1, #20]
   85e32:	6143      	str	r3, [r0, #20]
   85e34:	698b      	ldr	r3, [r1, #24]
   85e36:	6183      	str	r3, [r0, #24]
   85e38:	69cb      	ldr	r3, [r1, #28]
   85e3a:	61c3      	str	r3, [r0, #28]
   85e3c:	6a0b      	ldr	r3, [r1, #32]
   85e3e:	6203      	str	r3, [r0, #32]
   85e40:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   85e42:	6243      	str	r3, [r0, #36]	; 0x24
   85e44:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   85e46:	6283      	str	r3, [r0, #40]	; 0x28
   85e48:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   85e4a:	62c3      	str	r3, [r0, #44]	; 0x2c
   85e4c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   85e4e:	6303      	str	r3, [r0, #48]	; 0x30
   85e50:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   85e52:	6343      	str	r3, [r0, #52]	; 0x34
   85e54:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   85e56:	6383      	str	r3, [r0, #56]	; 0x38
   85e58:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   85e5a:	63c3      	str	r3, [r0, #60]	; 0x3c
   85e5c:	3040      	adds	r0, #64	; 0x40
   85e5e:	3140      	adds	r1, #64	; 0x40
   85e60:	3a40      	subs	r2, #64	; 0x40
   85e62:	d2db      	bcs.n	85e1c <memcpy+0x10>
   85e64:	3230      	adds	r2, #48	; 0x30
   85e66:	d30b      	bcc.n	85e80 <memcpy+0x74>
   85e68:	680b      	ldr	r3, [r1, #0]
   85e6a:	6003      	str	r3, [r0, #0]
   85e6c:	684b      	ldr	r3, [r1, #4]
   85e6e:	6043      	str	r3, [r0, #4]
   85e70:	688b      	ldr	r3, [r1, #8]
   85e72:	6083      	str	r3, [r0, #8]
   85e74:	68cb      	ldr	r3, [r1, #12]
   85e76:	60c3      	str	r3, [r0, #12]
   85e78:	3010      	adds	r0, #16
   85e7a:	3110      	adds	r1, #16
   85e7c:	3a10      	subs	r2, #16
   85e7e:	d2f3      	bcs.n	85e68 <memcpy+0x5c>
   85e80:	320c      	adds	r2, #12
   85e82:	d305      	bcc.n	85e90 <memcpy+0x84>
   85e84:	f851 3b04 	ldr.w	r3, [r1], #4
   85e88:	f840 3b04 	str.w	r3, [r0], #4
   85e8c:	3a04      	subs	r2, #4
   85e8e:	d2f9      	bcs.n	85e84 <memcpy+0x78>
   85e90:	3204      	adds	r2, #4
   85e92:	d008      	beq.n	85ea6 <memcpy+0x9a>
   85e94:	07d2      	lsls	r2, r2, #31
   85e96:	bf1c      	itt	ne
   85e98:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85e9c:	f800 3b01 	strbne.w	r3, [r0], #1
   85ea0:	d301      	bcc.n	85ea6 <memcpy+0x9a>
   85ea2:	880b      	ldrh	r3, [r1, #0]
   85ea4:	8003      	strh	r3, [r0, #0]
   85ea6:	4660      	mov	r0, ip
   85ea8:	4770      	bx	lr
   85eaa:	bf00      	nop
   85eac:	2a08      	cmp	r2, #8
   85eae:	d313      	bcc.n	85ed8 <memcpy+0xcc>
   85eb0:	078b      	lsls	r3, r1, #30
   85eb2:	d0b1      	beq.n	85e18 <memcpy+0xc>
   85eb4:	f010 0303 	ands.w	r3, r0, #3
   85eb8:	d0ae      	beq.n	85e18 <memcpy+0xc>
   85eba:	f1c3 0304 	rsb	r3, r3, #4
   85ebe:	1ad2      	subs	r2, r2, r3
   85ec0:	07db      	lsls	r3, r3, #31
   85ec2:	bf1c      	itt	ne
   85ec4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   85ec8:	f800 3b01 	strbne.w	r3, [r0], #1
   85ecc:	d3a4      	bcc.n	85e18 <memcpy+0xc>
   85ece:	f831 3b02 	ldrh.w	r3, [r1], #2
   85ed2:	f820 3b02 	strh.w	r3, [r0], #2
   85ed6:	e79f      	b.n	85e18 <memcpy+0xc>
   85ed8:	3a04      	subs	r2, #4
   85eda:	d3d9      	bcc.n	85e90 <memcpy+0x84>
   85edc:	3a01      	subs	r2, #1
   85ede:	f811 3b01 	ldrb.w	r3, [r1], #1
   85ee2:	f800 3b01 	strb.w	r3, [r0], #1
   85ee6:	d2f9      	bcs.n	85edc <memcpy+0xd0>
   85ee8:	780b      	ldrb	r3, [r1, #0]
   85eea:	7003      	strb	r3, [r0, #0]
   85eec:	784b      	ldrb	r3, [r1, #1]
   85eee:	7043      	strb	r3, [r0, #1]
   85ef0:	788b      	ldrb	r3, [r1, #2]
   85ef2:	7083      	strb	r3, [r0, #2]
   85ef4:	4660      	mov	r0, ip
   85ef6:	4770      	bx	lr

00085ef8 <memset>:
   85ef8:	0783      	lsls	r3, r0, #30
   85efa:	b530      	push	{r4, r5, lr}
   85efc:	d048      	beq.n	85f90 <memset+0x98>
   85efe:	1e54      	subs	r4, r2, #1
   85f00:	2a00      	cmp	r2, #0
   85f02:	d03f      	beq.n	85f84 <memset+0x8c>
   85f04:	4603      	mov	r3, r0
   85f06:	b2ca      	uxtb	r2, r1
   85f08:	e001      	b.n	85f0e <memset+0x16>
   85f0a:	3c01      	subs	r4, #1
   85f0c:	d33a      	bcc.n	85f84 <memset+0x8c>
   85f0e:	f803 2b01 	strb.w	r2, [r3], #1
   85f12:	079d      	lsls	r5, r3, #30
   85f14:	d1f9      	bne.n	85f0a <memset+0x12>
   85f16:	2c03      	cmp	r4, #3
   85f18:	d92d      	bls.n	85f76 <memset+0x7e>
   85f1a:	b2cd      	uxtb	r5, r1
   85f1c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   85f20:	2c0f      	cmp	r4, #15
   85f22:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   85f26:	d936      	bls.n	85f96 <memset+0x9e>
   85f28:	f1a4 0210 	sub.w	r2, r4, #16
   85f2c:	f022 0c0f 	bic.w	ip, r2, #15
   85f30:	f103 0e20 	add.w	lr, r3, #32
   85f34:	44e6      	add	lr, ip
   85f36:	ea4f 1c12 	mov.w	ip, r2, lsr #4
   85f3a:	f103 0210 	add.w	r2, r3, #16
   85f3e:	e942 5504 	strd	r5, r5, [r2, #-16]
   85f42:	e942 5502 	strd	r5, r5, [r2, #-8]
   85f46:	3210      	adds	r2, #16
   85f48:	4572      	cmp	r2, lr
   85f4a:	d1f8      	bne.n	85f3e <memset+0x46>
   85f4c:	f10c 0201 	add.w	r2, ip, #1
   85f50:	f014 0f0c 	tst.w	r4, #12
   85f54:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   85f58:	f004 0c0f 	and.w	ip, r4, #15
   85f5c:	d013      	beq.n	85f86 <memset+0x8e>
   85f5e:	f1ac 0304 	sub.w	r3, ip, #4
   85f62:	f023 0303 	bic.w	r3, r3, #3
   85f66:	3304      	adds	r3, #4
   85f68:	4413      	add	r3, r2
   85f6a:	f842 5b04 	str.w	r5, [r2], #4
   85f6e:	4293      	cmp	r3, r2
   85f70:	d1fb      	bne.n	85f6a <memset+0x72>
   85f72:	f00c 0403 	and.w	r4, ip, #3
   85f76:	b12c      	cbz	r4, 85f84 <memset+0x8c>
   85f78:	b2ca      	uxtb	r2, r1
   85f7a:	441c      	add	r4, r3
   85f7c:	f803 2b01 	strb.w	r2, [r3], #1
   85f80:	429c      	cmp	r4, r3
   85f82:	d1fb      	bne.n	85f7c <memset+0x84>
   85f84:	bd30      	pop	{r4, r5, pc}
   85f86:	4664      	mov	r4, ip
   85f88:	4613      	mov	r3, r2
   85f8a:	2c00      	cmp	r4, #0
   85f8c:	d1f4      	bne.n	85f78 <memset+0x80>
   85f8e:	e7f9      	b.n	85f84 <memset+0x8c>
   85f90:	4603      	mov	r3, r0
   85f92:	4614      	mov	r4, r2
   85f94:	e7bf      	b.n	85f16 <memset+0x1e>
   85f96:	461a      	mov	r2, r3
   85f98:	46a4      	mov	ip, r4
   85f9a:	e7e0      	b.n	85f5e <memset+0x66>

00085f9c <sprintf>:
   85f9c:	b40e      	push	{r1, r2, r3}
   85f9e:	b530      	push	{r4, r5, lr}
   85fa0:	4604      	mov	r4, r0
   85fa2:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   85fa6:	b09c      	sub	sp, #112	; 0x70
   85fa8:	4a0b      	ldr	r2, [pc, #44]	; (85fd8 <sprintf+0x3c>)
   85faa:	ab1f      	add	r3, sp, #124	; 0x7c
   85fac:	490b      	ldr	r1, [pc, #44]	; (85fdc <sprintf+0x40>)
   85fae:	9205      	str	r2, [sp, #20]
   85fb0:	f853 2b04 	ldr.w	r2, [r3], #4
   85fb4:	6808      	ldr	r0, [r1, #0]
   85fb6:	a902      	add	r1, sp, #8
   85fb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
   85fbc:	9507      	str	r5, [sp, #28]
   85fbe:	9504      	str	r5, [sp, #16]
   85fc0:	9406      	str	r4, [sp, #24]
   85fc2:	f000 f86f 	bl	860a4 <_svfprintf_r>
   85fc6:	2200      	movs	r2, #0
   85fc8:	9b02      	ldr	r3, [sp, #8]
   85fca:	701a      	strb	r2, [r3, #0]
   85fcc:	b01c      	add	sp, #112	; 0x70
   85fce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   85fd2:	b003      	add	sp, #12
   85fd4:	4770      	bx	lr
   85fd6:	bf00      	nop
   85fd8:	ffff0208 	.word	0xffff0208
   85fdc:	20070b30 	.word	0x20070b30

00085fe0 <strlen>:
   85fe0:	f020 0103 	bic.w	r1, r0, #3
   85fe4:	f010 0003 	ands.w	r0, r0, #3
   85fe8:	f1c0 0000 	rsb	r0, r0, #0
   85fec:	f851 3b04 	ldr.w	r3, [r1], #4
   85ff0:	f100 0c04 	add.w	ip, r0, #4
   85ff4:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   85ff8:	f06f 0200 	mvn.w	r2, #0
   85ffc:	bf1c      	itt	ne
   85ffe:	fa22 f20c 	lsrne.w	r2, r2, ip
   86002:	4313      	orrne	r3, r2
   86004:	f04f 0c01 	mov.w	ip, #1
   86008:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8600c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   86010:	eba3 020c 	sub.w	r2, r3, ip
   86014:	ea22 0203 	bic.w	r2, r2, r3
   86018:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8601c:	bf04      	itt	eq
   8601e:	f851 3b04 	ldreq.w	r3, [r1], #4
   86022:	3004      	addeq	r0, #4
   86024:	d0f4      	beq.n	86010 <strlen+0x30>
   86026:	f1c2 0100 	rsb	r1, r2, #0
   8602a:	ea02 0201 	and.w	r2, r2, r1
   8602e:	fab2 f282 	clz	r2, r2
   86032:	f1c2 021f 	rsb	r2, r2, #31
   86036:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
   8603a:	4770      	bx	lr

0008603c <strncpy>:
   8603c:	b530      	push	{r4, r5, lr}
   8603e:	ea40 0401 	orr.w	r4, r0, r1
   86042:	07a3      	lsls	r3, r4, #30
   86044:	d122      	bne.n	8608c <strncpy+0x50>
   86046:	2a03      	cmp	r2, #3
   86048:	d920      	bls.n	8608c <strncpy+0x50>
   8604a:	460b      	mov	r3, r1
   8604c:	4684      	mov	ip, r0
   8604e:	4619      	mov	r1, r3
   86050:	f853 5b04 	ldr.w	r5, [r3], #4
   86054:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   86058:	ea24 0405 	bic.w	r4, r4, r5
   8605c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   86060:	d115      	bne.n	8608e <strncpy+0x52>
   86062:	3a04      	subs	r2, #4
   86064:	2a03      	cmp	r2, #3
   86066:	4619      	mov	r1, r3
   86068:	f84c 5b04 	str.w	r5, [ip], #4
   8606c:	d8ef      	bhi.n	8604e <strncpy+0x12>
   8606e:	f101 3eff 	add.w	lr, r1, #4294967295
   86072:	b152      	cbz	r2, 8608a <strncpy+0x4e>
   86074:	4663      	mov	r3, ip
   86076:	f81e 1f01 	ldrb.w	r1, [lr, #1]!
   8607a:	1e54      	subs	r4, r2, #1
   8607c:	f803 1b01 	strb.w	r1, [r3], #1
   86080:	b141      	cbz	r1, 86094 <strncpy+0x58>
   86082:	4622      	mov	r2, r4
   86084:	469c      	mov	ip, r3
   86086:	2a00      	cmp	r2, #0
   86088:	d1f4      	bne.n	86074 <strncpy+0x38>
   8608a:	bd30      	pop	{r4, r5, pc}
   8608c:	4684      	mov	ip, r0
   8608e:	f101 3eff 	add.w	lr, r1, #4294967295
   86092:	e7ee      	b.n	86072 <strncpy+0x36>
   86094:	4462      	add	r2, ip
   86096:	2c00      	cmp	r4, #0
   86098:	d0f7      	beq.n	8608a <strncpy+0x4e>
   8609a:	f803 1b01 	strb.w	r1, [r3], #1
   8609e:	4293      	cmp	r3, r2
   860a0:	d1fb      	bne.n	8609a <strncpy+0x5e>
   860a2:	bd30      	pop	{r4, r5, pc}

000860a4 <_svfprintf_r>:
   860a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   860a8:	b0d5      	sub	sp, #340	; 0x154
   860aa:	460c      	mov	r4, r1
   860ac:	910c      	str	r1, [sp, #48]	; 0x30
   860ae:	4691      	mov	r9, r2
   860b0:	930e      	str	r3, [sp, #56]	; 0x38
   860b2:	900a      	str	r0, [sp, #40]	; 0x28
   860b4:	f002 febc 	bl	88e30 <_localeconv_r>
   860b8:	6803      	ldr	r3, [r0, #0]
   860ba:	4618      	mov	r0, r3
   860bc:	9317      	str	r3, [sp, #92]	; 0x5c
   860be:	f7ff ff8f 	bl	85fe0 <strlen>
   860c2:	89a3      	ldrh	r3, [r4, #12]
   860c4:	9016      	str	r0, [sp, #88]	; 0x58
   860c6:	0619      	lsls	r1, r3, #24
   860c8:	d503      	bpl.n	860d2 <_svfprintf_r+0x2e>
   860ca:	6923      	ldr	r3, [r4, #16]
   860cc:	2b00      	cmp	r3, #0
   860ce:	f000 878f 	beq.w	86ff0 <_svfprintf_r+0xf4c>
   860d2:	2400      	movs	r4, #0
   860d4:	ab2b      	add	r3, sp, #172	; 0xac
   860d6:	4622      	mov	r2, r4
   860d8:	4698      	mov	r8, r3
   860da:	464d      	mov	r5, r9
   860dc:	e9cd 4429 	strd	r4, r4, [sp, #164]	; 0xa4
   860e0:	9328      	str	r3, [sp, #160]	; 0xa0
   860e2:	9412      	str	r4, [sp, #72]	; 0x48
   860e4:	2300      	movs	r3, #0
   860e6:	2400      	movs	r4, #0
   860e8:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   860ec:	782b      	ldrb	r3, [r5, #0]
   860ee:	e9cd 2219 	strd	r2, r2, [sp, #100]	; 0x64
   860f2:	e9cd 221b 	strd	r2, r2, [sp, #108]	; 0x6c
   860f6:	9218      	str	r2, [sp, #96]	; 0x60
   860f8:	9208      	str	r2, [sp, #32]
   860fa:	2b00      	cmp	r3, #0
   860fc:	f000 81ce 	beq.w	8649c <_svfprintf_r+0x3f8>
   86100:	46aa      	mov	sl, r5
   86102:	e004      	b.n	8610e <_svfprintf_r+0x6a>
   86104:	f81a 3f01 	ldrb.w	r3, [sl, #1]!
   86108:	2b00      	cmp	r3, #0
   8610a:	f000 8109 	beq.w	86320 <_svfprintf_r+0x27c>
   8610e:	2b25      	cmp	r3, #37	; 0x25
   86110:	d1f8      	bne.n	86104 <_svfprintf_r+0x60>
   86112:	ebba 0605 	subs.w	r6, sl, r5
   86116:	f040 8107 	bne.w	86328 <_svfprintf_r+0x284>
   8611a:	f89a 3000 	ldrb.w	r3, [sl]
   8611e:	2b00      	cmp	r3, #0
   86120:	f000 81bc 	beq.w	8649c <_svfprintf_r+0x3f8>
   86124:	2300      	movs	r3, #0
   86126:	f04f 32ff 	mov.w	r2, #4294967295
   8612a:	f04f 092b 	mov.w	r9, #43	; 0x2b
   8612e:	2420      	movs	r4, #32
   86130:	461f      	mov	r7, r3
   86132:	f89a 6001 	ldrb.w	r6, [sl, #1]
   86136:	9207      	str	r2, [sp, #28]
   86138:	f10a 0a01 	add.w	sl, sl, #1
   8613c:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   86140:	9309      	str	r3, [sp, #36]	; 0x24
   86142:	f10a 0a01 	add.w	sl, sl, #1
   86146:	f1a6 0320 	sub.w	r3, r6, #32
   8614a:	2b5a      	cmp	r3, #90	; 0x5a
   8614c:	f200 8120 	bhi.w	86390 <_svfprintf_r+0x2ec>
   86150:	e8df f013 	tbh	[pc, r3, lsl #1]
   86154:	011e02ca 	.word	0x011e02ca
   86158:	02c5011e 	.word	0x02c5011e
   8615c:	011e011e 	.word	0x011e011e
   86160:	02a3011e 	.word	0x02a3011e
   86164:	011e011e 	.word	0x011e011e
   86168:	02f3006a 	.word	0x02f3006a
   8616c:	0247011e 	.word	0x0247011e
   86170:	011e02d9 	.word	0x011e02d9
   86174:	005b02d4 	.word	0x005b02d4
   86178:	005b005b 	.word	0x005b005b
   8617c:	005b005b 	.word	0x005b005b
   86180:	005b005b 	.word	0x005b005b
   86184:	005b005b 	.word	0x005b005b
   86188:	011e011e 	.word	0x011e011e
   8618c:	011e011e 	.word	0x011e011e
   86190:	011e011e 	.word	0x011e011e
   86194:	01b0011e 	.word	0x01b0011e
   86198:	020b011e 	.word	0x020b011e
   8619c:	01b0007a 	.word	0x01b0007a
   861a0:	01b001b0 	.word	0x01b001b0
   861a4:	011e011e 	.word	0x011e011e
   861a8:	011e011e 	.word	0x011e011e
   861ac:	011e029e 	.word	0x011e029e
   861b0:	00b6011e 	.word	0x00b6011e
   861b4:	011e011e 	.word	0x011e011e
   861b8:	0219011e 	.word	0x0219011e
   861bc:	024c011e 	.word	0x024c011e
   861c0:	011e011e 	.word	0x011e011e
   861c4:	011e073f 	.word	0x011e073f
   861c8:	011e011e 	.word	0x011e011e
   861cc:	011e011e 	.word	0x011e011e
   861d0:	011e011e 	.word	0x011e011e
   861d4:	01b0011e 	.word	0x01b0011e
   861d8:	020b011e 	.word	0x020b011e
   861dc:	01b0007c 	.word	0x01b0007c
   861e0:	01b001b0 	.word	0x01b001b0
   861e4:	007c0291 	.word	0x007c0291
   861e8:	011e0075 	.word	0x011e0075
   861ec:	011e0284 	.word	0x011e0284
   861f0:	00b80270 	.word	0x00b80270
   861f4:	0075025e 	.word	0x0075025e
   861f8:	0219011e 	.word	0x0219011e
   861fc:	071c0072 	.word	0x071c0072
   86200:	011e011e 	.word	0x011e011e
   86204:	011e071f 	.word	0x011e071f
   86208:	0072      	.short	0x0072
   8620a:	2200      	movs	r2, #0
   8620c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86210:	f81a 6b01 	ldrb.w	r6, [sl], #1
   86214:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   86218:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   8621c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86220:	2b09      	cmp	r3, #9
   86222:	d9f5      	bls.n	86210 <_svfprintf_r+0x16c>
   86224:	9209      	str	r2, [sp, #36]	; 0x24
   86226:	e78e      	b.n	86146 <_svfprintf_r+0xa2>
   86228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8622a:	f853 2b04 	ldr.w	r2, [r3], #4
   8622e:	2a00      	cmp	r2, #0
   86230:	9209      	str	r2, [sp, #36]	; 0x24
   86232:	930e      	str	r3, [sp, #56]	; 0x38
   86234:	f2c0 81d2 	blt.w	865dc <_svfprintf_r+0x538>
   86238:	f89a 6000 	ldrb.w	r6, [sl]
   8623c:	e781      	b.n	86142 <_svfprintf_r+0x9e>
   8623e:	f89a 6000 	ldrb.w	r6, [sl]
   86242:	f047 0720 	orr.w	r7, r7, #32
   86246:	e77c      	b.n	86142 <_svfprintf_r+0x9e>
   86248:	f047 0710 	orr.w	r7, r7, #16
   8624c:	06ba      	lsls	r2, r7, #26
   8624e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86250:	f140 817d 	bpl.w	8654e <_svfprintf_r+0x4aa>
   86254:	3307      	adds	r3, #7
   86256:	f023 0307 	bic.w	r3, r3, #7
   8625a:	461a      	mov	r2, r3
   8625c:	685b      	ldr	r3, [r3, #4]
   8625e:	f852 4b08 	ldr.w	r4, [r2], #8
   86262:	4699      	mov	r9, r3
   86264:	920e      	str	r2, [sp, #56]	; 0x38
   86266:	2b00      	cmp	r3, #0
   86268:	f2c0 857f 	blt.w	86d6a <_svfprintf_r+0xcc6>
   8626c:	9b07      	ldr	r3, [sp, #28]
   8626e:	3301      	adds	r3, #1
   86270:	f001 8039 	beq.w	872e6 <_svfprintf_r+0x1242>
   86274:	ea54 0309 	orrs.w	r3, r4, r9
   86278:	f027 0b80 	bic.w	fp, r7, #128	; 0x80
   8627c:	f000 8505 	beq.w	86c8a <_svfprintf_r+0xbe6>
   86280:	2c0a      	cmp	r4, #10
   86282:	f179 0300 	sbcs.w	r3, r9, #0
   86286:	f080 8793 	bcs.w	871b0 <_svfprintf_r+0x110c>
   8628a:	2301      	movs	r3, #1
   8628c:	465f      	mov	r7, fp
   8628e:	3430      	adds	r4, #48	; 0x30
   86290:	f88d 414f 	strb.w	r4, [sp, #335]	; 0x14f
   86294:	930b      	str	r3, [sp, #44]	; 0x2c
   86296:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   8629a:	9a07      	ldr	r2, [sp, #28]
   8629c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8629e:	2300      	movs	r3, #0
   862a0:	428a      	cmp	r2, r1
   862a2:	bfb8      	it	lt
   862a4:	460a      	movlt	r2, r1
   862a6:	9206      	str	r2, [sp, #24]
   862a8:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   862ac:	930d      	str	r3, [sp, #52]	; 0x34
   862ae:	930f      	str	r3, [sp, #60]	; 0x3c
   862b0:	9313      	str	r3, [sp, #76]	; 0x4c
   862b2:	9310      	str	r3, [sp, #64]	; 0x40
   862b4:	2a00      	cmp	r2, #0
   862b6:	d07c      	beq.n	863b2 <_svfprintf_r+0x30e>
   862b8:	9b06      	ldr	r3, [sp, #24]
   862ba:	3301      	adds	r3, #1
   862bc:	9306      	str	r3, [sp, #24]
   862be:	e078      	b.n	863b2 <_svfprintf_r+0x30e>
   862c0:	f047 0710 	orr.w	r7, r7, #16
   862c4:	f017 0920 	ands.w	r9, r7, #32
   862c8:	f000 8132 	beq.w	86530 <_svfprintf_r+0x48c>
   862cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   862ce:	3307      	adds	r3, #7
   862d0:	f023 0307 	bic.w	r3, r3, #7
   862d4:	f8d3 9004 	ldr.w	r9, [r3, #4]
   862d8:	f853 4b08 	ldr.w	r4, [r3], #8
   862dc:	930e      	str	r3, [sp, #56]	; 0x38
   862de:	2300      	movs	r3, #0
   862e0:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   862e4:	2200      	movs	r2, #0
   862e6:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   862ea:	9a07      	ldr	r2, [sp, #28]
   862ec:	1c51      	adds	r1, r2, #1
   862ee:	f000 822a 	beq.w	86746 <_svfprintf_r+0x6a2>
   862f2:	ea54 0109 	orrs.w	r1, r4, r9
   862f6:	f02b 0780 	bic.w	r7, fp, #128	; 0x80
   862fa:	f040 8223 	bne.w	86744 <_svfprintf_r+0x6a0>
   862fe:	2a00      	cmp	r2, #0
   86300:	f041 802b 	bne.w	8735a <_svfprintf_r+0x12b6>
   86304:	2b00      	cmp	r3, #0
   86306:	f040 84c5 	bne.w	86c94 <_svfprintf_r+0xbf0>
   8630a:	f01b 0301 	ands.w	r3, fp, #1
   8630e:	930b      	str	r3, [sp, #44]	; 0x2c
   86310:	f000 8554 	beq.w	86dbc <_svfprintf_r+0xd18>
   86314:	2330      	movs	r3, #48	; 0x30
   86316:	f20d 154f 	addw	r5, sp, #335	; 0x14f
   8631a:	f88d 314f 	strb.w	r3, [sp, #335]	; 0x14f
   8631e:	e7bc      	b.n	8629a <_svfprintf_r+0x1f6>
   86320:	ebba 0605 	subs.w	r6, sl, r5
   86324:	f000 80ba 	beq.w	8649c <_svfprintf_r+0x3f8>
   86328:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   8632a:	e9c8 5600 	strd	r5, r6, [r8]
   8632e:	4433      	add	r3, r6
   86330:	932a      	str	r3, [sp, #168]	; 0xa8
   86332:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86334:	3301      	adds	r3, #1
   86336:	2b07      	cmp	r3, #7
   86338:	9329      	str	r3, [sp, #164]	; 0xa4
   8633a:	dc05      	bgt.n	86348 <_svfprintf_r+0x2a4>
   8633c:	f108 0808 	add.w	r8, r8, #8
   86340:	9b08      	ldr	r3, [sp, #32]
   86342:	4433      	add	r3, r6
   86344:	9308      	str	r3, [sp, #32]
   86346:	e6e8      	b.n	8611a <_svfprintf_r+0x76>
   86348:	990c      	ldr	r1, [sp, #48]	; 0x30
   8634a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8634c:	aa28      	add	r2, sp, #160	; 0xa0
   8634e:	f003 fc69 	bl	89c24 <__ssprint_r>
   86352:	b980      	cbnz	r0, 86376 <_svfprintf_r+0x2d2>
   86354:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86358:	e7f2      	b.n	86340 <_svfprintf_r+0x29c>
   8635a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8635c:	980a      	ldr	r0, [sp, #40]	; 0x28
   8635e:	aa28      	add	r2, sp, #160	; 0xa0
   86360:	f003 fc60 	bl	89c24 <__ssprint_r>
   86364:	2800      	cmp	r0, #0
   86366:	f000 808a 	beq.w	8647e <_svfprintf_r+0x3da>
   8636a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8636c:	b11b      	cbz	r3, 86376 <_svfprintf_r+0x2d2>
   8636e:	990d      	ldr	r1, [sp, #52]	; 0x34
   86370:	980a      	ldr	r0, [sp, #40]	; 0x28
   86372:	f002 fc5d 	bl	88c30 <_free_r>
   86376:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86378:	899b      	ldrh	r3, [r3, #12]
   8637a:	f013 0f40 	tst.w	r3, #64	; 0x40
   8637e:	9b08      	ldr	r3, [sp, #32]
   86380:	bf18      	it	ne
   86382:	f04f 33ff 	movne.w	r3, #4294967295
   86386:	9308      	str	r3, [sp, #32]
   86388:	9808      	ldr	r0, [sp, #32]
   8638a:	b055      	add	sp, #340	; 0x154
   8638c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86390:	2e00      	cmp	r6, #0
   86392:	f000 8083 	beq.w	8649c <_svfprintf_r+0x3f8>
   86396:	2301      	movs	r3, #1
   86398:	2200      	movs	r2, #0
   8639a:	f88d 60ec 	strb.w	r6, [sp, #236]	; 0xec
   8639e:	9306      	str	r3, [sp, #24]
   863a0:	ad3b      	add	r5, sp, #236	; 0xec
   863a2:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   863a6:	930b      	str	r3, [sp, #44]	; 0x2c
   863a8:	920d      	str	r2, [sp, #52]	; 0x34
   863aa:	9207      	str	r2, [sp, #28]
   863ac:	920f      	str	r2, [sp, #60]	; 0x3c
   863ae:	9213      	str	r2, [sp, #76]	; 0x4c
   863b0:	9210      	str	r2, [sp, #64]	; 0x40
   863b2:	f017 0302 	ands.w	r3, r7, #2
   863b6:	d002      	beq.n	863be <_svfprintf_r+0x31a>
   863b8:	9906      	ldr	r1, [sp, #24]
   863ba:	3102      	adds	r1, #2
   863bc:	9106      	str	r1, [sp, #24]
   863be:	f017 0b84 	ands.w	fp, r7, #132	; 0x84
   863c2:	d107      	bne.n	863d4 <_svfprintf_r+0x330>
   863c4:	9909      	ldr	r1, [sp, #36]	; 0x24
   863c6:	9806      	ldr	r0, [sp, #24]
   863c8:	eba1 0900 	sub.w	r9, r1, r0
   863cc:	f1b9 0f00 	cmp.w	r9, #0
   863d0:	f300 8336 	bgt.w	86a40 <_svfprintf_r+0x99c>
   863d4:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   863d6:	b182      	cbz	r2, 863fa <_svfprintf_r+0x356>
   863d8:	2201      	movs	r2, #1
   863da:	f8c8 2004 	str.w	r2, [r8, #4]
   863de:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   863e0:	3401      	adds	r4, #1
   863e2:	3201      	adds	r2, #1
   863e4:	f10d 0183 	add.w	r1, sp, #131	; 0x83
   863e8:	2a07      	cmp	r2, #7
   863ea:	942a      	str	r4, [sp, #168]	; 0xa8
   863ec:	9229      	str	r2, [sp, #164]	; 0xa4
   863ee:	f8c8 1000 	str.w	r1, [r8]
   863f2:	f300 8369 	bgt.w	86ac8 <_svfprintf_r+0xa24>
   863f6:	f108 0808 	add.w	r8, r8, #8
   863fa:	b17b      	cbz	r3, 8641c <_svfprintf_r+0x378>
   863fc:	2302      	movs	r3, #2
   863fe:	f8c8 3004 	str.w	r3, [r8, #4]
   86402:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86404:	3402      	adds	r4, #2
   86406:	3301      	adds	r3, #1
   86408:	aa21      	add	r2, sp, #132	; 0x84
   8640a:	2b07      	cmp	r3, #7
   8640c:	942a      	str	r4, [sp, #168]	; 0xa8
   8640e:	9329      	str	r3, [sp, #164]	; 0xa4
   86410:	f8c8 2000 	str.w	r2, [r8]
   86414:	f300 836c 	bgt.w	86af0 <_svfprintf_r+0xa4c>
   86418:	f108 0808 	add.w	r8, r8, #8
   8641c:	f1bb 0f80 	cmp.w	fp, #128	; 0x80
   86420:	f000 822e 	beq.w	86880 <_svfprintf_r+0x7dc>
   86424:	9b07      	ldr	r3, [sp, #28]
   86426:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86428:	eba3 0b02 	sub.w	fp, r3, r2
   8642c:	f1bb 0f00 	cmp.w	fp, #0
   86430:	f300 8271 	bgt.w	86916 <_svfprintf_r+0x872>
   86434:	05fb      	lsls	r3, r7, #23
   86436:	f100 81c5 	bmi.w	867c4 <_svfprintf_r+0x720>
   8643a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8643c:	f8c8 5000 	str.w	r5, [r8]
   86440:	441c      	add	r4, r3
   86442:	f8c8 3004 	str.w	r3, [r8, #4]
   86446:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86448:	942a      	str	r4, [sp, #168]	; 0xa8
   8644a:	3301      	adds	r3, #1
   8644c:	2b07      	cmp	r3, #7
   8644e:	9329      	str	r3, [sp, #164]	; 0xa4
   86450:	f300 82ea 	bgt.w	86a28 <_svfprintf_r+0x984>
   86454:	f108 0808 	add.w	r8, r8, #8
   86458:	077b      	lsls	r3, r7, #29
   8645a:	d505      	bpl.n	86468 <_svfprintf_r+0x3c4>
   8645c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8645e:	9a06      	ldr	r2, [sp, #24]
   86460:	1a9d      	subs	r5, r3, r2
   86462:	2d00      	cmp	r5, #0
   86464:	f300 8350 	bgt.w	86b08 <_svfprintf_r+0xa64>
   86468:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
   8646c:	9906      	ldr	r1, [sp, #24]
   8646e:	428a      	cmp	r2, r1
   86470:	bfac      	ite	ge
   86472:	189b      	addge	r3, r3, r2
   86474:	185b      	addlt	r3, r3, r1
   86476:	9308      	str	r3, [sp, #32]
   86478:	2c00      	cmp	r4, #0
   8647a:	f47f af6e 	bne.w	8635a <_svfprintf_r+0x2b6>
   8647e:	2300      	movs	r3, #0
   86480:	9329      	str	r3, [sp, #164]	; 0xa4
   86482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   86484:	b11b      	cbz	r3, 8648e <_svfprintf_r+0x3ea>
   86486:	990d      	ldr	r1, [sp, #52]	; 0x34
   86488:	980a      	ldr	r0, [sp, #40]	; 0x28
   8648a:	f002 fbd1 	bl	88c30 <_free_r>
   8648e:	4655      	mov	r5, sl
   86490:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86494:	782b      	ldrb	r3, [r5, #0]
   86496:	2b00      	cmp	r3, #0
   86498:	f47f ae32 	bne.w	86100 <_svfprintf_r+0x5c>
   8649c:	9b2a      	ldr	r3, [sp, #168]	; 0xa8
   8649e:	2b00      	cmp	r3, #0
   864a0:	f43f af69 	beq.w	86376 <_svfprintf_r+0x2d2>
   864a4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   864a6:	980a      	ldr	r0, [sp, #40]	; 0x28
   864a8:	4621      	mov	r1, r4
   864aa:	aa28      	add	r2, sp, #160	; 0xa0
   864ac:	f003 fbba 	bl	89c24 <__ssprint_r>
   864b0:	89a3      	ldrh	r3, [r4, #12]
   864b2:	e762      	b.n	8637a <_svfprintf_r+0x2d6>
   864b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   864b6:	3307      	adds	r3, #7
   864b8:	f023 0207 	bic.w	r2, r3, #7
   864bc:	e8f2 3402 	ldrd	r3, r4, [r2], #8
   864c0:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
   864c4:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   864c8:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
   864cc:	4699      	mov	r9, r3
   864ce:	4618      	mov	r0, r3
   864d0:	920e      	str	r2, [sp, #56]	; 0x38
   864d2:	4621      	mov	r1, r4
   864d4:	f04f 32ff 	mov.w	r2, #4294967295
   864d8:	4bb6      	ldr	r3, [pc, #728]	; (867b4 <_svfprintf_r+0x710>)
   864da:	f006 f94b 	bl	8c774 <__aeabi_dcmpun>
   864de:	2800      	cmp	r0, #0
   864e0:	f040 8496 	bne.w	86e10 <_svfprintf_r+0xd6c>
   864e4:	4648      	mov	r0, r9
   864e6:	4621      	mov	r1, r4
   864e8:	f04f 32ff 	mov.w	r2, #4294967295
   864ec:	4bb1      	ldr	r3, [pc, #708]	; (867b4 <_svfprintf_r+0x710>)
   864ee:	f006 f923 	bl	8c738 <__aeabi_dcmple>
   864f2:	2800      	cmp	r0, #0
   864f4:	f040 848c 	bne.w	86e10 <_svfprintf_r+0xd6c>
   864f8:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   864fc:	2200      	movs	r2, #0
   864fe:	2300      	movs	r3, #0
   86500:	f006 f910 	bl	8c724 <__aeabi_dcmplt>
   86504:	2800      	cmp	r0, #0
   86506:	f040 87a6 	bne.w	87456 <_svfprintf_r+0x13b2>
   8650a:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   8650e:	2100      	movs	r1, #0
   86510:	2003      	movs	r0, #3
   86512:	4da9      	ldr	r5, [pc, #676]	; (867b8 <_svfprintf_r+0x714>)
   86514:	4ba9      	ldr	r3, [pc, #676]	; (867bc <_svfprintf_r+0x718>)
   86516:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   8651a:	910d      	str	r1, [sp, #52]	; 0x34
   8651c:	9006      	str	r0, [sp, #24]
   8651e:	2e47      	cmp	r6, #71	; 0x47
   86520:	bfc8      	it	gt
   86522:	461d      	movgt	r5, r3
   86524:	9107      	str	r1, [sp, #28]
   86526:	900b      	str	r0, [sp, #44]	; 0x2c
   86528:	910f      	str	r1, [sp, #60]	; 0x3c
   8652a:	9113      	str	r1, [sp, #76]	; 0x4c
   8652c:	9110      	str	r1, [sp, #64]	; 0x40
   8652e:	e6c1      	b.n	862b4 <_svfprintf_r+0x210>
   86530:	f017 0310 	ands.w	r3, r7, #16
   86534:	f040 8462 	bne.w	86dfc <_svfprintf_r+0xd58>
   86538:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   8653c:	f000 877b 	beq.w	87436 <_svfprintf_r+0x1392>
   86540:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86542:	4699      	mov	r9, r3
   86544:	f852 4b04 	ldr.w	r4, [r2], #4
   86548:	920e      	str	r2, [sp, #56]	; 0x38
   8654a:	b2a4      	uxth	r4, r4
   8654c:	e6c7      	b.n	862de <_svfprintf_r+0x23a>
   8654e:	f853 4b04 	ldr.w	r4, [r3], #4
   86552:	930e      	str	r3, [sp, #56]	; 0x38
   86554:	06fb      	lsls	r3, r7, #27
   86556:	f100 8441 	bmi.w	86ddc <_svfprintf_r+0xd38>
   8655a:	067d      	lsls	r5, r7, #25
   8655c:	f140 843b 	bpl.w	86dd6 <_svfprintf_r+0xd32>
   86560:	f344 39c0 	sbfx	r9, r4, #15, #1
   86564:	464b      	mov	r3, r9
   86566:	b224      	sxth	r4, r4
   86568:	e67d      	b.n	86266 <_svfprintf_r+0x1c2>
   8656a:	2001      	movs	r0, #1
   8656c:	2200      	movs	r2, #0
   8656e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86570:	9006      	str	r0, [sp, #24]
   86572:	f853 1b04 	ldr.w	r1, [r3], #4
   86576:	ad3b      	add	r5, sp, #236	; 0xec
   86578:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   8657c:	f88d 10ec 	strb.w	r1, [sp, #236]	; 0xec
   86580:	930e      	str	r3, [sp, #56]	; 0x38
   86582:	900b      	str	r0, [sp, #44]	; 0x2c
   86584:	e710      	b.n	863a8 <_svfprintf_r+0x304>
   86586:	f04f 0900 	mov.w	r9, #0
   8658a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   8658c:	9b07      	ldr	r3, [sp, #28]
   8658e:	f854 5b04 	ldr.w	r5, [r4], #4
   86592:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   86596:	2d00      	cmp	r5, #0
   86598:	f000 86ee 	beq.w	87378 <_svfprintf_r+0x12d4>
   8659c:	1c5a      	adds	r2, r3, #1
   8659e:	f000 8560 	beq.w	87062 <_svfprintf_r+0xfbe>
   865a2:	461a      	mov	r2, r3
   865a4:	4649      	mov	r1, r9
   865a6:	4628      	mov	r0, r5
   865a8:	f002 fefa 	bl	893a0 <memchr>
   865ac:	900d      	str	r0, [sp, #52]	; 0x34
   865ae:	2800      	cmp	r0, #0
   865b0:	f001 809e 	beq.w	876f0 <_svfprintf_r+0x164c>
   865b4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   865b6:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   865ba:	1b5b      	subs	r3, r3, r5
   865bc:	930b      	str	r3, [sp, #44]	; 0x2c
   865be:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   865c2:	f8cd 901c 	str.w	r9, [sp, #28]
   865c6:	940e      	str	r4, [sp, #56]	; 0x38
   865c8:	9306      	str	r3, [sp, #24]
   865ca:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   865ce:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   865d2:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   865d6:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   865da:	e66b      	b.n	862b4 <_svfprintf_r+0x210>
   865dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   865de:	425b      	negs	r3, r3
   865e0:	9309      	str	r3, [sp, #36]	; 0x24
   865e2:	f89a 6000 	ldrb.w	r6, [sl]
   865e6:	f047 0704 	orr.w	r7, r7, #4
   865ea:	e5aa      	b.n	86142 <_svfprintf_r+0x9e>
   865ec:	f047 0b10 	orr.w	fp, r7, #16
   865f0:	f01b 0920 	ands.w	r9, fp, #32
   865f4:	f000 83aa 	beq.w	86d4c <_svfprintf_r+0xca8>
   865f8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   865fa:	3307      	adds	r3, #7
   865fc:	f023 0307 	bic.w	r3, r3, #7
   86600:	461a      	mov	r2, r3
   86602:	f852 4b08 	ldr.w	r4, [r2], #8
   86606:	f8d3 9004 	ldr.w	r9, [r3, #4]
   8660a:	920e      	str	r2, [sp, #56]	; 0x38
   8660c:	2301      	movs	r3, #1
   8660e:	e669      	b.n	862e4 <_svfprintf_r+0x240>
   86610:	2230      	movs	r2, #48	; 0x30
   86612:	2678      	movs	r6, #120	; 0x78
   86614:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86616:	f88d 2084 	strb.w	r2, [sp, #132]	; 0x84
   8661a:	f853 4b04 	ldr.w	r4, [r3], #4
   8661e:	4a68      	ldr	r2, [pc, #416]	; (867c0 <_svfprintf_r+0x71c>)
   86620:	930e      	str	r3, [sp, #56]	; 0x38
   86622:	f04f 0900 	mov.w	r9, #0
   86626:	2302      	movs	r3, #2
   86628:	f047 0b02 	orr.w	fp, r7, #2
   8662c:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   86630:	9218      	str	r2, [sp, #96]	; 0x60
   86632:	e657      	b.n	862e4 <_svfprintf_r+0x240>
   86634:	06bd      	lsls	r5, r7, #26
   86636:	f100 83d6 	bmi.w	86de6 <_svfprintf_r+0xd42>
   8663a:	06fc      	lsls	r4, r7, #27
   8663c:	f100 8693 	bmi.w	87366 <_svfprintf_r+0x12c2>
   86640:	0678      	lsls	r0, r7, #25
   86642:	f100 875d 	bmi.w	87500 <_svfprintf_r+0x145c>
   86646:	05b9      	lsls	r1, r7, #22
   86648:	f140 868d 	bpl.w	87366 <_svfprintf_r+0x12c2>
   8664c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8664e:	9908      	ldr	r1, [sp, #32]
   86650:	f853 2b04 	ldr.w	r2, [r3], #4
   86654:	4655      	mov	r5, sl
   86656:	7011      	strb	r1, [r2, #0]
   86658:	930e      	str	r3, [sp, #56]	; 0x38
   8665a:	e71b      	b.n	86494 <_svfprintf_r+0x3f0>
   8665c:	f89a 6000 	ldrb.w	r6, [sl]
   86660:	2e6c      	cmp	r6, #108	; 0x6c
   86662:	bf03      	ittte	eq
   86664:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   86668:	f047 0720 	orreq.w	r7, r7, #32
   8666c:	f10a 0a01 	addeq.w	sl, sl, #1
   86670:	f047 0710 	orrne.w	r7, r7, #16
   86674:	e565      	b.n	86142 <_svfprintf_r+0x9e>
   86676:	f89a 6000 	ldrb.w	r6, [sl]
   8667a:	2e68      	cmp	r6, #104	; 0x68
   8667c:	bf03      	ittte	eq
   8667e:	f89a 6001 	ldrbeq.w	r6, [sl, #1]
   86682:	f447 7700 	orreq.w	r7, r7, #512	; 0x200
   86686:	f10a 0a01 	addeq.w	sl, sl, #1
   8668a:	f047 0740 	orrne.w	r7, r7, #64	; 0x40
   8668e:	e558      	b.n	86142 <_svfprintf_r+0x9e>
   86690:	f89a 6000 	ldrb.w	r6, [sl]
   86694:	f047 0708 	orr.w	r7, r7, #8
   86698:	e553      	b.n	86142 <_svfprintf_r+0x9e>
   8669a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   8669c:	4630      	mov	r0, r6
   8669e:	f002 fbc7 	bl	88e30 <_localeconv_r>
   866a2:	6843      	ldr	r3, [r0, #4]
   866a4:	4618      	mov	r0, r3
   866a6:	931b      	str	r3, [sp, #108]	; 0x6c
   866a8:	f7ff fc9a 	bl	85fe0 <strlen>
   866ac:	4603      	mov	r3, r0
   866ae:	4630      	mov	r0, r6
   866b0:	931c      	str	r3, [sp, #112]	; 0x70
   866b2:	461e      	mov	r6, r3
   866b4:	f002 fbbc 	bl	88e30 <_localeconv_r>
   866b8:	6883      	ldr	r3, [r0, #8]
   866ba:	9319      	str	r3, [sp, #100]	; 0x64
   866bc:	2e00      	cmp	r6, #0
   866be:	f43f adbb 	beq.w	86238 <_svfprintf_r+0x194>
   866c2:	9b19      	ldr	r3, [sp, #100]	; 0x64
   866c4:	2b00      	cmp	r3, #0
   866c6:	f43f adb7 	beq.w	86238 <_svfprintf_r+0x194>
   866ca:	9b19      	ldr	r3, [sp, #100]	; 0x64
   866cc:	781b      	ldrb	r3, [r3, #0]
   866ce:	2b00      	cmp	r3, #0
   866d0:	f43f adb2 	beq.w	86238 <_svfprintf_r+0x194>
   866d4:	f89a 6000 	ldrb.w	r6, [sl]
   866d8:	f447 6780 	orr.w	r7, r7, #1024	; 0x400
   866dc:	e531      	b.n	86142 <_svfprintf_r+0x9e>
   866de:	f89a 6000 	ldrb.w	r6, [sl]
   866e2:	f047 0701 	orr.w	r7, r7, #1
   866e6:	e52c      	b.n	86142 <_svfprintf_r+0x9e>
   866e8:	f89d 3083 	ldrb.w	r3, [sp, #131]	; 0x83
   866ec:	2b00      	cmp	r3, #0
   866ee:	f47f ada3 	bne.w	86238 <_svfprintf_r+0x194>
   866f2:	f89a 6000 	ldrb.w	r6, [sl]
   866f6:	f88d 4083 	strb.w	r4, [sp, #131]	; 0x83
   866fa:	e522      	b.n	86142 <_svfprintf_r+0x9e>
   866fc:	f89a 6000 	ldrb.w	r6, [sl]
   86700:	f047 0780 	orr.w	r7, r7, #128	; 0x80
   86704:	e51d      	b.n	86142 <_svfprintf_r+0x9e>
   86706:	4652      	mov	r2, sl
   86708:	f812 6b01 	ldrb.w	r6, [r2], #1
   8670c:	2e2a      	cmp	r6, #42	; 0x2a
   8670e:	f001 81eb 	beq.w	87ae8 <_svfprintf_r+0x1a44>
   86712:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86716:	2b09      	cmp	r3, #9
   86718:	4692      	mov	sl, r2
   8671a:	bf98      	it	ls
   8671c:	2200      	movls	r2, #0
   8671e:	f201 8003 	bhi.w	87728 <_svfprintf_r+0x1684>
   86722:	f81a 6b01 	ldrb.w	r6, [sl], #1
   86726:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   8672a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
   8672e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
   86732:	2b09      	cmp	r3, #9
   86734:	d9f5      	bls.n	86722 <_svfprintf_r+0x67e>
   86736:	9207      	str	r2, [sp, #28]
   86738:	e505      	b.n	86146 <_svfprintf_r+0xa2>
   8673a:	f89a 6000 	ldrb.w	r6, [sl]
   8673e:	f88d 9083 	strb.w	r9, [sp, #131]	; 0x83
   86742:	e4fe      	b.n	86142 <_svfprintf_r+0x9e>
   86744:	46bb      	mov	fp, r7
   86746:	2b01      	cmp	r3, #1
   86748:	f43f ad9a 	beq.w	86280 <_svfprintf_r+0x1dc>
   8674c:	2b02      	cmp	r3, #2
   8674e:	ad54      	add	r5, sp, #336	; 0x150
   86750:	d112      	bne.n	86778 <_svfprintf_r+0x6d4>
   86752:	9a18      	ldr	r2, [sp, #96]	; 0x60
   86754:	f004 030f 	and.w	r3, r4, #15
   86758:	5cd3      	ldrb	r3, [r2, r3]
   8675a:	0924      	lsrs	r4, r4, #4
   8675c:	ea44 7409 	orr.w	r4, r4, r9, lsl #28
   86760:	ea4f 1919 	mov.w	r9, r9, lsr #4
   86764:	f805 3d01 	strb.w	r3, [r5, #-1]!
   86768:	ea54 0309 	orrs.w	r3, r4, r9
   8676c:	d1f2      	bne.n	86754 <_svfprintf_r+0x6b0>
   8676e:	ab54      	add	r3, sp, #336	; 0x150
   86770:	1b5b      	subs	r3, r3, r5
   86772:	465f      	mov	r7, fp
   86774:	930b      	str	r3, [sp, #44]	; 0x2c
   86776:	e590      	b.n	8629a <_svfprintf_r+0x1f6>
   86778:	f004 0307 	and.w	r3, r4, #7
   8677c:	08e4      	lsrs	r4, r4, #3
   8677e:	ea44 7449 	orr.w	r4, r4, r9, lsl #29
   86782:	ea4f 09d9 	mov.w	r9, r9, lsr #3
   86786:	3330      	adds	r3, #48	; 0x30
   86788:	ea54 0109 	orrs.w	r1, r4, r9
   8678c:	462a      	mov	r2, r5
   8678e:	f805 3d01 	strb.w	r3, [r5, #-1]!
   86792:	d1f1      	bne.n	86778 <_svfprintf_r+0x6d4>
   86794:	f01b 0f01 	tst.w	fp, #1
   86798:	d0e9      	beq.n	8676e <_svfprintf_r+0x6ca>
   8679a:	2b30      	cmp	r3, #48	; 0x30
   8679c:	d0e7      	beq.n	8676e <_svfprintf_r+0x6ca>
   8679e:	2330      	movs	r3, #48	; 0x30
   867a0:	3a02      	subs	r2, #2
   867a2:	f805 3c01 	strb.w	r3, [r5, #-1]
   867a6:	ab54      	add	r3, sp, #336	; 0x150
   867a8:	1a9b      	subs	r3, r3, r2
   867aa:	465f      	mov	r7, fp
   867ac:	4615      	mov	r5, r2
   867ae:	930b      	str	r3, [sp, #44]	; 0x2c
   867b0:	e573      	b.n	8629a <_svfprintf_r+0x1f6>
   867b2:	bf00      	nop
   867b4:	7fefffff 	.word	0x7fefffff
   867b8:	0008cb5c 	.word	0x0008cb5c
   867bc:	0008cb60 	.word	0x0008cb60
   867c0:	0008cb6c 	.word	0x0008cb6c
   867c4:	2e65      	cmp	r6, #101	; 0x65
   867c6:	f340 80e9 	ble.w	8699c <_svfprintf_r+0x8f8>
   867ca:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   867ce:	2200      	movs	r2, #0
   867d0:	2300      	movs	r3, #0
   867d2:	f005 ff9d 	bl	8c710 <__aeabi_dcmpeq>
   867d6:	2800      	cmp	r0, #0
   867d8:	f000 81d2 	beq.w	86b80 <_svfprintf_r+0xadc>
   867dc:	2301      	movs	r3, #1
   867de:	f8c8 3004 	str.w	r3, [r8, #4]
   867e2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   867e4:	4abf      	ldr	r2, [pc, #764]	; (86ae4 <_svfprintf_r+0xa40>)
   867e6:	3301      	adds	r3, #1
   867e8:	3401      	adds	r4, #1
   867ea:	2b07      	cmp	r3, #7
   867ec:	942a      	str	r4, [sp, #168]	; 0xa8
   867ee:	9329      	str	r3, [sp, #164]	; 0xa4
   867f0:	f8c8 2000 	str.w	r2, [r8]
   867f4:	f300 857a 	bgt.w	872ec <_svfprintf_r+0x1248>
   867f8:	f108 0808 	add.w	r8, r8, #8
   867fc:	9b22      	ldr	r3, [sp, #136]	; 0x88
   867fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86800:	4293      	cmp	r3, r2
   86802:	f280 82d7 	bge.w	86db4 <_svfprintf_r+0xd10>
   86806:	9b16      	ldr	r3, [sp, #88]	; 0x58
   86808:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   8680a:	441c      	add	r4, r3
   8680c:	e9c8 2300 	strd	r2, r3, [r8]
   86810:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86812:	942a      	str	r4, [sp, #168]	; 0xa8
   86814:	3301      	adds	r3, #1
   86816:	2b07      	cmp	r3, #7
   86818:	9329      	str	r3, [sp, #164]	; 0xa4
   8681a:	f300 83dd 	bgt.w	86fd8 <_svfprintf_r+0xf34>
   8681e:	f108 0808 	add.w	r8, r8, #8
   86822:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86824:	1e5d      	subs	r5, r3, #1
   86826:	2d00      	cmp	r5, #0
   86828:	f77f ae16 	ble.w	86458 <_svfprintf_r+0x3b4>
   8682c:	2d10      	cmp	r5, #16
   8682e:	f341 8141 	ble.w	87ab4 <_svfprintf_r+0x1a10>
   86832:	f8df 92b4 	ldr.w	r9, [pc, #692]	; 86ae8 <_svfprintf_r+0xa44>
   86836:	4622      	mov	r2, r4
   86838:	4649      	mov	r1, r9
   8683a:	2610      	movs	r6, #16
   8683c:	46b9      	mov	r9, r7
   8683e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86840:	460f      	mov	r7, r1
   86842:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   86846:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86848:	e005      	b.n	86856 <_svfprintf_r+0x7b2>
   8684a:	f108 0808 	add.w	r8, r8, #8
   8684e:	3d10      	subs	r5, #16
   86850:	2d10      	cmp	r5, #16
   86852:	f340 8558 	ble.w	87306 <_svfprintf_r+0x1262>
   86856:	3301      	adds	r3, #1
   86858:	3210      	adds	r2, #16
   8685a:	2b07      	cmp	r3, #7
   8685c:	e9c8 7600 	strd	r7, r6, [r8]
   86860:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   86864:	ddf1      	ble.n	8684a <_svfprintf_r+0x7a6>
   86866:	4621      	mov	r1, r4
   86868:	4658      	mov	r0, fp
   8686a:	aa28      	add	r2, sp, #160	; 0xa0
   8686c:	f003 f9da 	bl	89c24 <__ssprint_r>
   86870:	2800      	cmp	r0, #0
   86872:	f47f ad7a 	bne.w	8636a <_svfprintf_r+0x2c6>
   86876:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   8687a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8687e:	e7e6      	b.n	8684e <_svfprintf_r+0x7aa>
   86880:	9b09      	ldr	r3, [sp, #36]	; 0x24
   86882:	9a06      	ldr	r2, [sp, #24]
   86884:	eba3 0b02 	sub.w	fp, r3, r2
   86888:	f1bb 0f00 	cmp.w	fp, #0
   8688c:	f77f adca 	ble.w	86424 <_svfprintf_r+0x380>
   86890:	f1bb 0f10 	cmp.w	fp, #16
   86894:	f341 8005 	ble.w	878a2 <_svfprintf_r+0x17fe>
   86898:	f8df 924c 	ldr.w	r9, [pc, #588]	; 86ae8 <_svfprintf_r+0xa44>
   8689c:	4641      	mov	r1, r8
   8689e:	4620      	mov	r0, r4
   868a0:	46a8      	mov	r8, r5
   868a2:	464c      	mov	r4, r9
   868a4:	2310      	movs	r3, #16
   868a6:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   868a8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   868aa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   868ae:	e006      	b.n	868be <_svfprintf_r+0x81a>
   868b0:	f1ab 0b10 	sub.w	fp, fp, #16
   868b4:	f1bb 0f10 	cmp.w	fp, #16
   868b8:	f101 0108 	add.w	r1, r1, #8
   868bc:	dd19      	ble.n	868f2 <_svfprintf_r+0x84e>
   868be:	3201      	adds	r2, #1
   868c0:	3010      	adds	r0, #16
   868c2:	2a07      	cmp	r2, #7
   868c4:	e9c1 4300 	strd	r4, r3, [r1]
   868c8:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   868cc:	ddf0      	ble.n	868b0 <_svfprintf_r+0x80c>
   868ce:	4629      	mov	r1, r5
   868d0:	4648      	mov	r0, r9
   868d2:	aa28      	add	r2, sp, #160	; 0xa0
   868d4:	f003 f9a6 	bl	89c24 <__ssprint_r>
   868d8:	2800      	cmp	r0, #0
   868da:	f47f ad46 	bne.w	8636a <_svfprintf_r+0x2c6>
   868de:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   868e2:	f1ab 0b10 	sub.w	fp, fp, #16
   868e6:	f1bb 0f10 	cmp.w	fp, #16
   868ea:	f04f 0310 	mov.w	r3, #16
   868ee:	a92b      	add	r1, sp, #172	; 0xac
   868f0:	dce5      	bgt.n	868be <_svfprintf_r+0x81a>
   868f2:	4645      	mov	r5, r8
   868f4:	46a1      	mov	r9, r4
   868f6:	4688      	mov	r8, r1
   868f8:	4604      	mov	r4, r0
   868fa:	3201      	adds	r2, #1
   868fc:	445c      	add	r4, fp
   868fe:	2a07      	cmp	r2, #7
   86900:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   86904:	f8c8 9000 	str.w	r9, [r8]
   86908:	f8c8 b004 	str.w	fp, [r8, #4]
   8690c:	f300 8518 	bgt.w	87340 <_svfprintf_r+0x129c>
   86910:	f108 0808 	add.w	r8, r8, #8
   86914:	e586      	b.n	86424 <_svfprintf_r+0x380>
   86916:	f1bb 0f10 	cmp.w	fp, #16
   8691a:	f340 8597 	ble.w	8744c <_svfprintf_r+0x13a8>
   8691e:	f8df 91c8 	ldr.w	r9, [pc, #456]	; 86ae8 <_svfprintf_r+0xa44>
   86922:	4641      	mov	r1, r8
   86924:	4620      	mov	r0, r4
   86926:	46a8      	mov	r8, r5
   86928:	464c      	mov	r4, r9
   8692a:	2310      	movs	r3, #16
   8692c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   8692e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   86930:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   86934:	e006      	b.n	86944 <_svfprintf_r+0x8a0>
   86936:	f1ab 0b10 	sub.w	fp, fp, #16
   8693a:	f1bb 0f10 	cmp.w	fp, #16
   8693e:	f101 0108 	add.w	r1, r1, #8
   86942:	dd19      	ble.n	86978 <_svfprintf_r+0x8d4>
   86944:	3201      	adds	r2, #1
   86946:	3010      	adds	r0, #16
   86948:	2a07      	cmp	r2, #7
   8694a:	e9c1 4300 	strd	r4, r3, [r1]
   8694e:	e9cd 2029 	strd	r2, r0, [sp, #164]	; 0xa4
   86952:	ddf0      	ble.n	86936 <_svfprintf_r+0x892>
   86954:	4629      	mov	r1, r5
   86956:	4648      	mov	r0, r9
   86958:	aa28      	add	r2, sp, #160	; 0xa0
   8695a:	f003 f963 	bl	89c24 <__ssprint_r>
   8695e:	2800      	cmp	r0, #0
   86960:	f47f ad03 	bne.w	8636a <_svfprintf_r+0x2c6>
   86964:	e9dd 2029 	ldrd	r2, r0, [sp, #164]	; 0xa4
   86968:	f1ab 0b10 	sub.w	fp, fp, #16
   8696c:	f1bb 0f10 	cmp.w	fp, #16
   86970:	f04f 0310 	mov.w	r3, #16
   86974:	a92b      	add	r1, sp, #172	; 0xac
   86976:	dce5      	bgt.n	86944 <_svfprintf_r+0x8a0>
   86978:	4645      	mov	r5, r8
   8697a:	46a1      	mov	r9, r4
   8697c:	4688      	mov	r8, r1
   8697e:	4604      	mov	r4, r0
   86980:	3201      	adds	r2, #1
   86982:	445c      	add	r4, fp
   86984:	2a07      	cmp	r2, #7
   86986:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   8698a:	f8c8 9000 	str.w	r9, [r8]
   8698e:	f8c8 b004 	str.w	fp, [r8, #4]
   86992:	f300 81ce 	bgt.w	86d32 <_svfprintf_r+0xc8e>
   86996:	f108 0808 	add.w	r8, r8, #8
   8699a:	e54b      	b.n	86434 <_svfprintf_r+0x390>
   8699c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8699e:	2b01      	cmp	r3, #1
   869a0:	f340 817e 	ble.w	86ca0 <_svfprintf_r+0xbfc>
   869a4:	2301      	movs	r3, #1
   869a6:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   869a8:	3401      	adds	r4, #1
   869aa:	441e      	add	r6, r3
   869ac:	2e07      	cmp	r6, #7
   869ae:	f8c8 5000 	str.w	r5, [r8]
   869b2:	942a      	str	r4, [sp, #168]	; 0xa8
   869b4:	f8c8 3004 	str.w	r3, [r8, #4]
   869b8:	9629      	str	r6, [sp, #164]	; 0xa4
   869ba:	f300 81e1 	bgt.w	86d80 <_svfprintf_r+0xcdc>
   869be:	f108 0808 	add.w	r8, r8, #8
   869c2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   869c4:	3601      	adds	r6, #1
   869c6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   869c8:	441c      	add	r4, r3
   869ca:	2e07      	cmp	r6, #7
   869cc:	e9c8 2300 	strd	r2, r3, [r8]
   869d0:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   869d4:	f300 81e1 	bgt.w	86d9a <_svfprintf_r+0xcf6>
   869d8:	f108 0808 	add.w	r8, r8, #8
   869dc:	2200      	movs	r2, #0
   869de:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   869e2:	2300      	movs	r3, #0
   869e4:	f005 fe94 	bl	8c710 <__aeabi_dcmpeq>
   869e8:	2800      	cmp	r0, #0
   869ea:	f040 8176 	bne.w	86cda <_svfprintf_r+0xc36>
   869ee:	9b12      	ldr	r3, [sp, #72]	; 0x48
   869f0:	3601      	adds	r6, #1
   869f2:	3b01      	subs	r3, #1
   869f4:	3501      	adds	r5, #1
   869f6:	441c      	add	r4, r3
   869f8:	2e07      	cmp	r6, #7
   869fa:	f8c8 5000 	str.w	r5, [r8]
   869fe:	9629      	str	r6, [sp, #164]	; 0xa4
   86a00:	f8c8 3004 	str.w	r3, [r8, #4]
   86a04:	942a      	str	r4, [sp, #168]	; 0xa8
   86a06:	f300 815b 	bgt.w	86cc0 <_svfprintf_r+0xc1c>
   86a0a:	f108 0808 	add.w	r8, r8, #8
   86a0e:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   86a10:	3601      	adds	r6, #1
   86a12:	441c      	add	r4, r3
   86a14:	f8c8 3004 	str.w	r3, [r8, #4]
   86a18:	2e07      	cmp	r6, #7
   86a1a:	ab24      	add	r3, sp, #144	; 0x90
   86a1c:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   86a20:	f8c8 3000 	str.w	r3, [r8]
   86a24:	f77f ad16 	ble.w	86454 <_svfprintf_r+0x3b0>
   86a28:	990c      	ldr	r1, [sp, #48]	; 0x30
   86a2a:	980a      	ldr	r0, [sp, #40]	; 0x28
   86a2c:	aa28      	add	r2, sp, #160	; 0xa0
   86a2e:	f003 f8f9 	bl	89c24 <__ssprint_r>
   86a32:	2800      	cmp	r0, #0
   86a34:	f47f ac99 	bne.w	8636a <_svfprintf_r+0x2c6>
   86a38:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86a3a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86a3e:	e50b      	b.n	86458 <_svfprintf_r+0x3b4>
   86a40:	f1b9 0f10 	cmp.w	r9, #16
   86a44:	f340 8650 	ble.w	876e8 <_svfprintf_r+0x1644>
   86a48:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   86a4c:	4640      	mov	r0, r8
   86a4e:	e9cd 361d 	strd	r3, r6, [sp, #116]	; 0x74
   86a52:	46b8      	mov	r8, r7
   86a54:	2410      	movs	r4, #16
   86a56:	464f      	mov	r7, r9
   86a58:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   86a5a:	46a9      	mov	r9, r5
   86a5c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   86a5e:	e004      	b.n	86a6a <_svfprintf_r+0x9c6>
   86a60:	3f10      	subs	r7, #16
   86a62:	2f10      	cmp	r7, #16
   86a64:	f100 0008 	add.w	r0, r0, #8
   86a68:	dd16      	ble.n	86a98 <_svfprintf_r+0x9f4>
   86a6a:	3201      	adds	r2, #1
   86a6c:	4b1f      	ldr	r3, [pc, #124]	; (86aec <_svfprintf_r+0xa48>)
   86a6e:	3110      	adds	r1, #16
   86a70:	2a07      	cmp	r2, #7
   86a72:	e9c0 3400 	strd	r3, r4, [r0]
   86a76:	e9cd 2129 	strd	r2, r1, [sp, #164]	; 0xa4
   86a7a:	ddf1      	ble.n	86a60 <_svfprintf_r+0x9bc>
   86a7c:	4631      	mov	r1, r6
   86a7e:	4628      	mov	r0, r5
   86a80:	aa28      	add	r2, sp, #160	; 0xa0
   86a82:	f003 f8cf 	bl	89c24 <__ssprint_r>
   86a86:	2800      	cmp	r0, #0
   86a88:	f47f ac6f 	bne.w	8636a <_svfprintf_r+0x2c6>
   86a8c:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   86a90:	3f10      	subs	r7, #16
   86a92:	2f10      	cmp	r7, #16
   86a94:	a82b      	add	r0, sp, #172	; 0xac
   86a96:	dce8      	bgt.n	86a6a <_svfprintf_r+0x9c6>
   86a98:	464d      	mov	r5, r9
   86a9a:	e9dd 361d 	ldrd	r3, r6, [sp, #116]	; 0x74
   86a9e:	46b9      	mov	r9, r7
   86aa0:	4647      	mov	r7, r8
   86aa2:	4680      	mov	r8, r0
   86aa4:	eb09 0401 	add.w	r4, r9, r1
   86aa8:	3201      	adds	r2, #1
   86aaa:	4910      	ldr	r1, [pc, #64]	; (86aec <_svfprintf_r+0xa48>)
   86aac:	2a07      	cmp	r2, #7
   86aae:	e9cd 2429 	strd	r2, r4, [sp, #164]	; 0xa4
   86ab2:	f8c8 9004 	str.w	r9, [r8, #4]
   86ab6:	f8c8 1000 	str.w	r1, [r8]
   86aba:	f300 83c3 	bgt.w	87244 <_svfprintf_r+0x11a0>
   86abe:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86ac2:	f108 0808 	add.w	r8, r8, #8
   86ac6:	e486      	b.n	863d6 <_svfprintf_r+0x332>
   86ac8:	990c      	ldr	r1, [sp, #48]	; 0x30
   86aca:	980a      	ldr	r0, [sp, #40]	; 0x28
   86acc:	aa28      	add	r2, sp, #160	; 0xa0
   86ace:	931d      	str	r3, [sp, #116]	; 0x74
   86ad0:	f003 f8a8 	bl	89c24 <__ssprint_r>
   86ad4:	2800      	cmp	r0, #0
   86ad6:	f47f ac48 	bne.w	8636a <_svfprintf_r+0x2c6>
   86ada:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86adc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   86ade:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86ae2:	e48a      	b.n	863fa <_svfprintf_r+0x356>
   86ae4:	0008cb9c 	.word	0x0008cb9c
   86ae8:	0008cbb0 	.word	0x0008cbb0
   86aec:	0008cba0 	.word	0x0008cba0
   86af0:	990c      	ldr	r1, [sp, #48]	; 0x30
   86af2:	980a      	ldr	r0, [sp, #40]	; 0x28
   86af4:	aa28      	add	r2, sp, #160	; 0xa0
   86af6:	f003 f895 	bl	89c24 <__ssprint_r>
   86afa:	2800      	cmp	r0, #0
   86afc:	f47f ac35 	bne.w	8636a <_svfprintf_r+0x2c6>
   86b00:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86b02:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86b06:	e489      	b.n	8641c <_svfprintf_r+0x378>
   86b08:	2d10      	cmp	r5, #16
   86b0a:	f340 86c4 	ble.w	87896 <_svfprintf_r+0x17f2>
   86b0e:	2610      	movs	r6, #16
   86b10:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86b12:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   86b14:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   86b18:	e004      	b.n	86b24 <_svfprintf_r+0xa80>
   86b1a:	3d10      	subs	r5, #16
   86b1c:	2d10      	cmp	r5, #16
   86b1e:	f108 0808 	add.w	r8, r8, #8
   86b22:	dd17      	ble.n	86b54 <_svfprintf_r+0xab0>
   86b24:	3301      	adds	r3, #1
   86b26:	4ab8      	ldr	r2, [pc, #736]	; (86e08 <_svfprintf_r+0xd64>)
   86b28:	3410      	adds	r4, #16
   86b2a:	2b07      	cmp	r3, #7
   86b2c:	e9c8 2600 	strd	r2, r6, [r8]
   86b30:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   86b34:	ddf1      	ble.n	86b1a <_svfprintf_r+0xa76>
   86b36:	4649      	mov	r1, r9
   86b38:	4638      	mov	r0, r7
   86b3a:	aa28      	add	r2, sp, #160	; 0xa0
   86b3c:	f003 f872 	bl	89c24 <__ssprint_r>
   86b40:	2800      	cmp	r0, #0
   86b42:	f47f ac12 	bne.w	8636a <_svfprintf_r+0x2c6>
   86b46:	e9dd 3429 	ldrd	r3, r4, [sp, #164]	; 0xa4
   86b4a:	3d10      	subs	r5, #16
   86b4c:	2d10      	cmp	r5, #16
   86b4e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86b52:	dce7      	bgt.n	86b24 <_svfprintf_r+0xa80>
   86b54:	3301      	adds	r3, #1
   86b56:	4aac      	ldr	r2, [pc, #688]	; (86e08 <_svfprintf_r+0xd64>)
   86b58:	442c      	add	r4, r5
   86b5a:	2b07      	cmp	r3, #7
   86b5c:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   86b60:	f8c8 5004 	str.w	r5, [r8, #4]
   86b64:	f8c8 2000 	str.w	r2, [r8]
   86b68:	f77f ac7e 	ble.w	86468 <_svfprintf_r+0x3c4>
   86b6c:	990c      	ldr	r1, [sp, #48]	; 0x30
   86b6e:	980a      	ldr	r0, [sp, #40]	; 0x28
   86b70:	aa28      	add	r2, sp, #160	; 0xa0
   86b72:	f003 f857 	bl	89c24 <__ssprint_r>
   86b76:	2800      	cmp	r0, #0
   86b78:	f47f abf7 	bne.w	8636a <_svfprintf_r+0x2c6>
   86b7c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86b7e:	e473      	b.n	86468 <_svfprintf_r+0x3c4>
   86b80:	9922      	ldr	r1, [sp, #136]	; 0x88
   86b82:	2900      	cmp	r1, #0
   86b84:	f340 836f 	ble.w	87266 <_svfprintf_r+0x11c2>
   86b88:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   86b8c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86b8e:	4599      	cmp	r9, r3
   86b90:	bfa8      	it	ge
   86b92:	4699      	movge	r9, r3
   86b94:	f1b9 0f00 	cmp.w	r9, #0
   86b98:	dd0b      	ble.n	86bb2 <_svfprintf_r+0xb0e>
   86b9a:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86b9c:	444c      	add	r4, r9
   86b9e:	3301      	adds	r3, #1
   86ba0:	2b07      	cmp	r3, #7
   86ba2:	e9c8 5900 	strd	r5, r9, [r8]
   86ba6:	942a      	str	r4, [sp, #168]	; 0xa8
   86ba8:	9329      	str	r3, [sp, #164]	; 0xa4
   86baa:	f300 851d 	bgt.w	875e8 <_svfprintf_r+0x1544>
   86bae:	f108 0808 	add.w	r8, r8, #8
   86bb2:	9e10      	ldr	r6, [sp, #64]	; 0x40
   86bb4:	f1b9 0f00 	cmp.w	r9, #0
   86bb8:	bfa8      	it	ge
   86bba:	eba6 0609 	subge.w	r6, r6, r9
   86bbe:	2e00      	cmp	r6, #0
   86bc0:	f300 8225 	bgt.w	8700e <_svfprintf_r+0xf6a>
   86bc4:	f8dd b040 	ldr.w	fp, [sp, #64]	; 0x40
   86bc8:	0578      	lsls	r0, r7, #21
   86bca:	44ab      	add	fp, r5
   86bcc:	f100 825f 	bmi.w	8708e <_svfprintf_r+0xfea>
   86bd0:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86bd2:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86bd4:	4293      	cmp	r3, r2
   86bd6:	db02      	blt.n	86bde <_svfprintf_r+0xb3a>
   86bd8:	07f9      	lsls	r1, r7, #31
   86bda:	f140 8476 	bpl.w	874ca <_svfprintf_r+0x1426>
   86bde:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86be0:	9917      	ldr	r1, [sp, #92]	; 0x5c
   86be2:	4414      	add	r4, r2
   86be4:	e9c8 1200 	strd	r1, r2, [r8]
   86be8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   86bea:	942a      	str	r4, [sp, #168]	; 0xa8
   86bec:	3201      	adds	r2, #1
   86bee:	2a07      	cmp	r2, #7
   86bf0:	9229      	str	r2, [sp, #164]	; 0xa4
   86bf2:	f300 8513 	bgt.w	8761c <_svfprintf_r+0x1578>
   86bf6:	f108 0808 	add.w	r8, r8, #8
   86bfa:	9a12      	ldr	r2, [sp, #72]	; 0x48
   86bfc:	18ae      	adds	r6, r5, r2
   86bfe:	eba6 060b 	sub.w	r6, r6, fp
   86c02:	1ad5      	subs	r5, r2, r3
   86c04:	42ae      	cmp	r6, r5
   86c06:	bfa8      	it	ge
   86c08:	462e      	movge	r6, r5
   86c0a:	2e00      	cmp	r6, #0
   86c0c:	dd0d      	ble.n	86c2a <_svfprintf_r+0xb86>
   86c0e:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86c10:	4434      	add	r4, r6
   86c12:	3301      	adds	r3, #1
   86c14:	2b07      	cmp	r3, #7
   86c16:	f8c8 b000 	str.w	fp, [r8]
   86c1a:	f8c8 6004 	str.w	r6, [r8, #4]
   86c1e:	942a      	str	r4, [sp, #168]	; 0xa8
   86c20:	9329      	str	r3, [sp, #164]	; 0xa4
   86c22:	f300 8571 	bgt.w	87708 <_svfprintf_r+0x1664>
   86c26:	f108 0808 	add.w	r8, r8, #8
   86c2a:	2e00      	cmp	r6, #0
   86c2c:	bfa8      	it	ge
   86c2e:	1bad      	subge	r5, r5, r6
   86c30:	2d00      	cmp	r5, #0
   86c32:	f77f ac11 	ble.w	86458 <_svfprintf_r+0x3b4>
   86c36:	2d10      	cmp	r5, #16
   86c38:	f340 873c 	ble.w	87ab4 <_svfprintf_r+0x1a10>
   86c3c:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 86e0c <_svfprintf_r+0xd68>
   86c40:	4622      	mov	r2, r4
   86c42:	4649      	mov	r1, r9
   86c44:	2610      	movs	r6, #16
   86c46:	46b9      	mov	r9, r7
   86c48:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   86c4a:	460f      	mov	r7, r1
   86c4c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   86c50:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   86c52:	e005      	b.n	86c60 <_svfprintf_r+0xbbc>
   86c54:	f108 0808 	add.w	r8, r8, #8
   86c58:	3d10      	subs	r5, #16
   86c5a:	2d10      	cmp	r5, #16
   86c5c:	f340 8353 	ble.w	87306 <_svfprintf_r+0x1262>
   86c60:	3301      	adds	r3, #1
   86c62:	3210      	adds	r2, #16
   86c64:	2b07      	cmp	r3, #7
   86c66:	e9c8 7600 	strd	r7, r6, [r8]
   86c6a:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   86c6e:	ddf1      	ble.n	86c54 <_svfprintf_r+0xbb0>
   86c70:	4621      	mov	r1, r4
   86c72:	4658      	mov	r0, fp
   86c74:	aa28      	add	r2, sp, #160	; 0xa0
   86c76:	f002 ffd5 	bl	89c24 <__ssprint_r>
   86c7a:	2800      	cmp	r0, #0
   86c7c:	f47f ab75 	bne.w	8636a <_svfprintf_r+0x2c6>
   86c80:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   86c84:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86c88:	e7e6      	b.n	86c58 <_svfprintf_r+0xbb4>
   86c8a:	9b07      	ldr	r3, [sp, #28]
   86c8c:	2b00      	cmp	r3, #0
   86c8e:	f47f aafc 	bne.w	8628a <_svfprintf_r+0x1e6>
   86c92:	465f      	mov	r7, fp
   86c94:	2300      	movs	r3, #0
   86c96:	ad54      	add	r5, sp, #336	; 0x150
   86c98:	9307      	str	r3, [sp, #28]
   86c9a:	930b      	str	r3, [sp, #44]	; 0x2c
   86c9c:	f7ff bafd 	b.w	8629a <_svfprintf_r+0x1f6>
   86ca0:	07fa      	lsls	r2, r7, #31
   86ca2:	f53f ae7f 	bmi.w	869a4 <_svfprintf_r+0x900>
   86ca6:	2301      	movs	r3, #1
   86ca8:	9e29      	ldr	r6, [sp, #164]	; 0xa4
   86caa:	3401      	adds	r4, #1
   86cac:	441e      	add	r6, r3
   86cae:	2e07      	cmp	r6, #7
   86cb0:	f8c8 5000 	str.w	r5, [r8]
   86cb4:	942a      	str	r4, [sp, #168]	; 0xa8
   86cb6:	f8c8 3004 	str.w	r3, [r8, #4]
   86cba:	9629      	str	r6, [sp, #164]	; 0xa4
   86cbc:	f77f aea5 	ble.w	86a0a <_svfprintf_r+0x966>
   86cc0:	990c      	ldr	r1, [sp, #48]	; 0x30
   86cc2:	980a      	ldr	r0, [sp, #40]	; 0x28
   86cc4:	aa28      	add	r2, sp, #160	; 0xa0
   86cc6:	f002 ffad 	bl	89c24 <__ssprint_r>
   86cca:	2800      	cmp	r0, #0
   86ccc:	f47f ab4d 	bne.w	8636a <_svfprintf_r+0x2c6>
   86cd0:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   86cd4:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86cd8:	e699      	b.n	86a0e <_svfprintf_r+0x96a>
   86cda:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86cdc:	1e5d      	subs	r5, r3, #1
   86cde:	2d00      	cmp	r5, #0
   86ce0:	f77f ae95 	ble.w	86a0e <_svfprintf_r+0x96a>
   86ce4:	2d10      	cmp	r5, #16
   86ce6:	f340 86df 	ble.w	87aa8 <_svfprintf_r+0x1a04>
   86cea:	4622      	mov	r2, r4
   86cec:	9707      	str	r7, [sp, #28]
   86cee:	f04f 0b10 	mov.w	fp, #16
   86cf2:	f8df 9118 	ldr.w	r9, [pc, #280]	; 86e0c <_svfprintf_r+0xd68>
   86cf6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   86cf8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   86cfa:	e005      	b.n	86d08 <_svfprintf_r+0xc64>
   86cfc:	f108 0808 	add.w	r8, r8, #8
   86d00:	3d10      	subs	r5, #16
   86d02:	2d10      	cmp	r5, #16
   86d04:	f340 837f 	ble.w	87406 <_svfprintf_r+0x1362>
   86d08:	3601      	adds	r6, #1
   86d0a:	3210      	adds	r2, #16
   86d0c:	2e07      	cmp	r6, #7
   86d0e:	e9c8 9b00 	strd	r9, fp, [r8]
   86d12:	e9cd 6229 	strd	r6, r2, [sp, #164]	; 0xa4
   86d16:	ddf1      	ble.n	86cfc <_svfprintf_r+0xc58>
   86d18:	4639      	mov	r1, r7
   86d1a:	4620      	mov	r0, r4
   86d1c:	aa28      	add	r2, sp, #160	; 0xa0
   86d1e:	f002 ff81 	bl	89c24 <__ssprint_r>
   86d22:	2800      	cmp	r0, #0
   86d24:	f47f ab21 	bne.w	8636a <_svfprintf_r+0x2c6>
   86d28:	e9dd 6229 	ldrd	r6, r2, [sp, #164]	; 0xa4
   86d2c:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86d30:	e7e6      	b.n	86d00 <_svfprintf_r+0xc5c>
   86d32:	990c      	ldr	r1, [sp, #48]	; 0x30
   86d34:	980a      	ldr	r0, [sp, #40]	; 0x28
   86d36:	aa28      	add	r2, sp, #160	; 0xa0
   86d38:	f002 ff74 	bl	89c24 <__ssprint_r>
   86d3c:	2800      	cmp	r0, #0
   86d3e:	f47f ab14 	bne.w	8636a <_svfprintf_r+0x2c6>
   86d42:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86d44:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86d48:	f7ff bb74 	b.w	86434 <_svfprintf_r+0x390>
   86d4c:	f01b 0310 	ands.w	r3, fp, #16
   86d50:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   86d52:	d13a      	bne.n	86dca <_svfprintf_r+0xd26>
   86d54:	f01b 0140 	ands.w	r1, fp, #64	; 0x40
   86d58:	d033      	beq.n	86dc2 <_svfprintf_r+0xd1e>
   86d5a:	f852 4b04 	ldr.w	r4, [r2], #4
   86d5e:	4699      	mov	r9, r3
   86d60:	920e      	str	r2, [sp, #56]	; 0x38
   86d62:	2301      	movs	r3, #1
   86d64:	b2a4      	uxth	r4, r4
   86d66:	f7ff babd 	b.w	862e4 <_svfprintf_r+0x240>
   86d6a:	232d      	movs	r3, #45	; 0x2d
   86d6c:	4264      	negs	r4, r4
   86d6e:	f88d 3083 	strb.w	r3, [sp, #131]	; 0x83
   86d72:	46bb      	mov	fp, r7
   86d74:	f04f 0301 	mov.w	r3, #1
   86d78:	eb69 0949 	sbc.w	r9, r9, r9, lsl #1
   86d7c:	f7ff bab5 	b.w	862ea <_svfprintf_r+0x246>
   86d80:	990c      	ldr	r1, [sp, #48]	; 0x30
   86d82:	980a      	ldr	r0, [sp, #40]	; 0x28
   86d84:	aa28      	add	r2, sp, #160	; 0xa0
   86d86:	f002 ff4d 	bl	89c24 <__ssprint_r>
   86d8a:	2800      	cmp	r0, #0
   86d8c:	f47f aaed 	bne.w	8636a <_svfprintf_r+0x2c6>
   86d90:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   86d94:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86d98:	e613      	b.n	869c2 <_svfprintf_r+0x91e>
   86d9a:	990c      	ldr	r1, [sp, #48]	; 0x30
   86d9c:	980a      	ldr	r0, [sp, #40]	; 0x28
   86d9e:	aa28      	add	r2, sp, #160	; 0xa0
   86da0:	f002 ff40 	bl	89c24 <__ssprint_r>
   86da4:	2800      	cmp	r0, #0
   86da6:	f47f aae0 	bne.w	8636a <_svfprintf_r+0x2c6>
   86daa:	e9dd 6429 	ldrd	r6, r4, [sp, #164]	; 0xa4
   86dae:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86db2:	e613      	b.n	869dc <_svfprintf_r+0x938>
   86db4:	07fd      	lsls	r5, r7, #31
   86db6:	f57f ab4f 	bpl.w	86458 <_svfprintf_r+0x3b4>
   86dba:	e524      	b.n	86806 <_svfprintf_r+0x762>
   86dbc:	ad54      	add	r5, sp, #336	; 0x150
   86dbe:	f7ff ba6c 	b.w	8629a <_svfprintf_r+0x1f6>
   86dc2:	f41b 7900 	ands.w	r9, fp, #512	; 0x200
   86dc6:	f040 838a 	bne.w	874de <_svfprintf_r+0x143a>
   86dca:	f852 4b04 	ldr.w	r4, [r2], #4
   86dce:	2301      	movs	r3, #1
   86dd0:	920e      	str	r2, [sp, #56]	; 0x38
   86dd2:	f7ff ba87 	b.w	862e4 <_svfprintf_r+0x240>
   86dd6:	05b8      	lsls	r0, r7, #22
   86dd8:	f100 839b 	bmi.w	87512 <_svfprintf_r+0x146e>
   86ddc:	ea4f 79e4 	mov.w	r9, r4, asr #31
   86de0:	464b      	mov	r3, r9
   86de2:	f7ff ba40 	b.w	86266 <_svfprintf_r+0x1c2>
   86de6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86de8:	9808      	ldr	r0, [sp, #32]
   86dea:	f853 1b04 	ldr.w	r1, [r3], #4
   86dee:	17c2      	asrs	r2, r0, #31
   86df0:	4655      	mov	r5, sl
   86df2:	e9c1 0200 	strd	r0, r2, [r1]
   86df6:	930e      	str	r3, [sp, #56]	; 0x38
   86df8:	f7ff bb4c 	b.w	86494 <_svfprintf_r+0x3f0>
   86dfc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86dfe:	f853 4b04 	ldr.w	r4, [r3], #4
   86e02:	930e      	str	r3, [sp, #56]	; 0x38
   86e04:	f7ff ba6b 	b.w	862de <_svfprintf_r+0x23a>
   86e08:	0008cba0 	.word	0x0008cba0
   86e0c:	0008cbb0 	.word	0x0008cbb0
   86e10:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   86e14:	4602      	mov	r2, r0
   86e16:	460b      	mov	r3, r1
   86e18:	f005 fcac 	bl	8c774 <__aeabi_dcmpun>
   86e1c:	2800      	cmp	r0, #0
   86e1e:	f040 85e9 	bne.w	879f4 <_svfprintf_r+0x1950>
   86e22:	2e61      	cmp	r6, #97	; 0x61
   86e24:	f000 857d 	beq.w	87922 <_svfprintf_r+0x187e>
   86e28:	2e41      	cmp	r6, #65	; 0x41
   86e2a:	f000 848b 	beq.w	87744 <_svfprintf_r+0x16a0>
   86e2e:	9b07      	ldr	r3, [sp, #28]
   86e30:	3301      	adds	r3, #1
   86e32:	f000 838f 	beq.w	87554 <_svfprintf_r+0x14b0>
   86e36:	f026 0320 	bic.w	r3, r6, #32
   86e3a:	2b47      	cmp	r3, #71	; 0x47
   86e3c:	9306      	str	r3, [sp, #24]
   86e3e:	f000 858f 	beq.w	87960 <_svfprintf_r+0x18bc>
   86e42:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   86e46:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   86e4a:	930f      	str	r3, [sp, #60]	; 0x3c
   86e4c:	4613      	mov	r3, r2
   86e4e:	2b00      	cmp	r3, #0
   86e50:	f2c0 85b0 	blt.w	879b4 <_svfprintf_r+0x1910>
   86e54:	930b      	str	r3, [sp, #44]	; 0x2c
   86e56:	2300      	movs	r3, #0
   86e58:	468b      	mov	fp, r1
   86e5a:	931d      	str	r3, [sp, #116]	; 0x74
   86e5c:	930d      	str	r3, [sp, #52]	; 0x34
   86e5e:	9b06      	ldr	r3, [sp, #24]
   86e60:	2b46      	cmp	r3, #70	; 0x46
   86e62:	f000 83e9 	beq.w	87638 <_svfprintf_r+0x1594>
   86e66:	2b45      	cmp	r3, #69	; 0x45
   86e68:	f000 8546 	beq.w	878f8 <_svfprintf_r+0x1854>
   86e6c:	9907      	ldr	r1, [sp, #28]
   86e6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86e70:	9101      	str	r1, [sp, #4]
   86e72:	2102      	movs	r1, #2
   86e74:	9100      	str	r1, [sp, #0]
   86e76:	a926      	add	r1, sp, #152	; 0x98
   86e78:	9104      	str	r1, [sp, #16]
   86e7a:	a923      	add	r1, sp, #140	; 0x8c
   86e7c:	9103      	str	r1, [sp, #12]
   86e7e:	a922      	add	r1, sp, #136	; 0x88
   86e80:	465a      	mov	r2, fp
   86e82:	980a      	ldr	r0, [sp, #40]	; 0x28
   86e84:	9102      	str	r1, [sp, #8]
   86e86:	f000 ff07 	bl	87c98 <_dtoa_r>
   86e8a:	9b06      	ldr	r3, [sp, #24]
   86e8c:	4605      	mov	r5, r0
   86e8e:	2b47      	cmp	r3, #71	; 0x47
   86e90:	f040 863a 	bne.w	87b08 <_svfprintf_r+0x1a64>
   86e94:	f017 0f01 	tst.w	r7, #1
   86e98:	46b9      	mov	r9, r7
   86e9a:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   86e9c:	f040 84fe 	bne.w	8789c <_svfprintf_r+0x17f8>
   86ea0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   86ea2:	1b5b      	subs	r3, r3, r5
   86ea4:	9312      	str	r3, [sp, #72]	; 0x48
   86ea6:	9b06      	ldr	r3, [sp, #24]
   86ea8:	2b47      	cmp	r3, #71	; 0x47
   86eaa:	f000 836e 	beq.w	8758a <_svfprintf_r+0x14e6>
   86eae:	9b06      	ldr	r3, [sp, #24]
   86eb0:	2b46      	cmp	r3, #70	; 0x46
   86eb2:	f000 83f0 	beq.w	87696 <_svfprintf_r+0x15f2>
   86eb6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   86eb8:	9310      	str	r3, [sp, #64]	; 0x40
   86eba:	9b10      	ldr	r3, [sp, #64]	; 0x40
   86ebc:	9a06      	ldr	r2, [sp, #24]
   86ebe:	3b01      	subs	r3, #1
   86ec0:	2a41      	cmp	r2, #65	; 0x41
   86ec2:	9322      	str	r3, [sp, #136]	; 0x88
   86ec4:	f000 85bb 	beq.w	87a3e <_svfprintf_r+0x199a>
   86ec8:	2100      	movs	r1, #0
   86eca:	b2f2      	uxtb	r2, r6
   86ecc:	2b00      	cmp	r3, #0
   86ece:	f88d 2090 	strb.w	r2, [sp, #144]	; 0x90
   86ed2:	bfb6      	itet	lt
   86ed4:	222d      	movlt	r2, #45	; 0x2d
   86ed6:	222b      	movge	r2, #43	; 0x2b
   86ed8:	9b10      	ldrlt	r3, [sp, #64]	; 0x40
   86eda:	f88d 2091 	strb.w	r2, [sp, #145]	; 0x91
   86ede:	bfb8      	it	lt
   86ee0:	f1c3 0301 	rsblt	r3, r3, #1
   86ee4:	2b09      	cmp	r3, #9
   86ee6:	f340 859b 	ble.w	87a20 <_svfprintf_r+0x197c>
   86eea:	f10d 0c9f 	add.w	ip, sp, #159	; 0x9f
   86eee:	4662      	mov	r2, ip
   86ef0:	4fb6      	ldr	r7, [pc, #728]	; (871cc <_svfprintf_r+0x1128>)
   86ef2:	461c      	mov	r4, r3
   86ef4:	4610      	mov	r0, r2
   86ef6:	fb87 1203 	smull	r1, r2, r7, r3
   86efa:	17d9      	asrs	r1, r3, #31
   86efc:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   86f00:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   86f04:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   86f08:	3230      	adds	r2, #48	; 0x30
   86f0a:	2c63      	cmp	r4, #99	; 0x63
   86f0c:	f800 2c01 	strb.w	r2, [r0, #-1]
   86f10:	460b      	mov	r3, r1
   86f12:	f100 32ff 	add.w	r2, r0, #4294967295
   86f16:	dcec      	bgt.n	86ef2 <_svfprintf_r+0xe4e>
   86f18:	3330      	adds	r3, #48	; 0x30
   86f1a:	1e81      	subs	r1, r0, #2
   86f1c:	b2db      	uxtb	r3, r3
   86f1e:	458c      	cmp	ip, r1
   86f20:	f802 3c01 	strb.w	r3, [r2, #-1]
   86f24:	f240 85f9 	bls.w	87b1a <_svfprintf_r+0x1a76>
   86f28:	f10d 0192 	add.w	r1, sp, #146	; 0x92
   86f2c:	e001      	b.n	86f32 <_svfprintf_r+0xe8e>
   86f2e:	f812 3b01 	ldrb.w	r3, [r2], #1
   86f32:	4594      	cmp	ip, r2
   86f34:	f801 3b01 	strb.w	r3, [r1], #1
   86f38:	d1f9      	bne.n	86f2e <_svfprintf_r+0xe8a>
   86f3a:	f10d 03a1 	add.w	r3, sp, #161	; 0xa1
   86f3e:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   86f42:	1a1b      	subs	r3, r3, r0
   86f44:	4413      	add	r3, r2
   86f46:	aa24      	add	r2, sp, #144	; 0x90
   86f48:	1a9b      	subs	r3, r3, r2
   86f4a:	931a      	str	r3, [sp, #104]	; 0x68
   86f4c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   86f4e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   86f50:	2b01      	cmp	r3, #1
   86f52:	441a      	add	r2, r3
   86f54:	920b      	str	r2, [sp, #44]	; 0x2c
   86f56:	f340 8581 	ble.w	87a5c <_svfprintf_r+0x19b8>
   86f5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   86f5c:	9a16      	ldr	r2, [sp, #88]	; 0x58
   86f5e:	4413      	add	r3, r2
   86f60:	930b      	str	r3, [sp, #44]	; 0x2c
   86f62:	2300      	movs	r3, #0
   86f64:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   86f66:	f429 6780 	bic.w	r7, r9, #1024	; 0x400
   86f6a:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
   86f6e:	f447 7780 	orr.w	r7, r7, #256	; 0x100
   86f72:	930f      	str	r3, [sp, #60]	; 0x3c
   86f74:	9206      	str	r2, [sp, #24]
   86f76:	9313      	str	r3, [sp, #76]	; 0x4c
   86f78:	9310      	str	r3, [sp, #64]	; 0x40
   86f7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   86f7c:	2b00      	cmp	r3, #0
   86f7e:	f040 832c 	bne.w	875da <_svfprintf_r+0x1536>
   86f82:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   86f86:	9307      	str	r3, [sp, #28]
   86f88:	f7ff b994 	b.w	862b4 <_svfprintf_r+0x210>
   86f8c:	46bb      	mov	fp, r7
   86f8e:	f7ff bb2f 	b.w	865f0 <_svfprintf_r+0x54c>
   86f92:	4b8f      	ldr	r3, [pc, #572]	; (871d0 <_svfprintf_r+0x112c>)
   86f94:	9318      	str	r3, [sp, #96]	; 0x60
   86f96:	f017 0920 	ands.w	r9, r7, #32
   86f9a:	f000 80f5 	beq.w	87188 <_svfprintf_r+0x10e4>
   86f9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   86fa0:	3307      	adds	r3, #7
   86fa2:	f023 0307 	bic.w	r3, r3, #7
   86fa6:	f8d3 9004 	ldr.w	r9, [r3, #4]
   86faa:	f853 4b08 	ldr.w	r4, [r3], #8
   86fae:	930e      	str	r3, [sp, #56]	; 0x38
   86fb0:	07f8      	lsls	r0, r7, #31
   86fb2:	d509      	bpl.n	86fc8 <_svfprintf_r+0xf24>
   86fb4:	ea54 0309 	orrs.w	r3, r4, r9
   86fb8:	d006      	beq.n	86fc8 <_svfprintf_r+0xf24>
   86fba:	2330      	movs	r3, #48	; 0x30
   86fbc:	f88d 6085 	strb.w	r6, [sp, #133]	; 0x85
   86fc0:	f047 0702 	orr.w	r7, r7, #2
   86fc4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   86fc8:	2302      	movs	r3, #2
   86fca:	f427 6b80 	bic.w	fp, r7, #1024	; 0x400
   86fce:	f7ff b989 	b.w	862e4 <_svfprintf_r+0x240>
   86fd2:	4b80      	ldr	r3, [pc, #512]	; (871d4 <_svfprintf_r+0x1130>)
   86fd4:	9318      	str	r3, [sp, #96]	; 0x60
   86fd6:	e7de      	b.n	86f96 <_svfprintf_r+0xef2>
   86fd8:	990c      	ldr	r1, [sp, #48]	; 0x30
   86fda:	980a      	ldr	r0, [sp, #40]	; 0x28
   86fdc:	aa28      	add	r2, sp, #160	; 0xa0
   86fde:	f002 fe21 	bl	89c24 <__ssprint_r>
   86fe2:	2800      	cmp	r0, #0
   86fe4:	f47f a9c1 	bne.w	8636a <_svfprintf_r+0x2c6>
   86fe8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   86fea:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   86fee:	e418      	b.n	86822 <_svfprintf_r+0x77e>
   86ff0:	2140      	movs	r1, #64	; 0x40
   86ff2:	980a      	ldr	r0, [sp, #40]	; 0x28
   86ff4:	f001 ff28 	bl	88e48 <_malloc_r>
   86ff8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   86ffa:	6018      	str	r0, [r3, #0]
   86ffc:	6118      	str	r0, [r3, #16]
   86ffe:	2800      	cmp	r0, #0
   87000:	f000 8597 	beq.w	87b32 <_svfprintf_r+0x1a8e>
   87004:	2340      	movs	r3, #64	; 0x40
   87006:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   87008:	6153      	str	r3, [r2, #20]
   8700a:	f7ff b862 	b.w	860d2 <_svfprintf_r+0x2e>
   8700e:	2e10      	cmp	r6, #16
   87010:	f340 8576 	ble.w	87b00 <_svfprintf_r+0x1a5c>
   87014:	f8df 91c0 	ldr.w	r9, [pc, #448]	; 871d8 <_svfprintf_r+0x1134>
   87018:	4642      	mov	r2, r8
   8701a:	4648      	mov	r0, r9
   8701c:	4621      	mov	r1, r4
   8701e:	46a8      	mov	r8, r5
   87020:	46b9      	mov	r9, r7
   87022:	f04f 0b10 	mov.w	fp, #16
   87026:	4607      	mov	r7, r0
   87028:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8702a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8702c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   8702e:	e004      	b.n	8703a <_svfprintf_r+0xf96>
   87030:	3208      	adds	r2, #8
   87032:	3e10      	subs	r6, #16
   87034:	2e10      	cmp	r6, #16
   87036:	f340 8213 	ble.w	87460 <_svfprintf_r+0x13bc>
   8703a:	3301      	adds	r3, #1
   8703c:	3110      	adds	r1, #16
   8703e:	2b07      	cmp	r3, #7
   87040:	e9c2 7b00 	strd	r7, fp, [r2]
   87044:	e9cd 3129 	strd	r3, r1, [sp, #164]	; 0xa4
   87048:	ddf2      	ble.n	87030 <_svfprintf_r+0xf8c>
   8704a:	4629      	mov	r1, r5
   8704c:	4620      	mov	r0, r4
   8704e:	aa28      	add	r2, sp, #160	; 0xa0
   87050:	f002 fde8 	bl	89c24 <__ssprint_r>
   87054:	2800      	cmp	r0, #0
   87056:	f47f a988 	bne.w	8636a <_svfprintf_r+0x2c6>
   8705a:	e9dd 3129 	ldrd	r3, r1, [sp, #164]	; 0xa4
   8705e:	aa2b      	add	r2, sp, #172	; 0xac
   87060:	e7e7      	b.n	87032 <_svfprintf_r+0xf8e>
   87062:	4628      	mov	r0, r5
   87064:	f8cd 901c 	str.w	r9, [sp, #28]
   87068:	940e      	str	r4, [sp, #56]	; 0x38
   8706a:	f7fe ffb9 	bl	85fe0 <strlen>
   8706e:	ea20 73e0 	bic.w	r3, r0, r0, asr #31
   87072:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   87076:	900b      	str	r0, [sp, #44]	; 0x2c
   87078:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
   8707c:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   87080:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   87084:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
   87088:	9306      	str	r3, [sp, #24]
   8708a:	f7ff b913 	b.w	862b4 <_svfprintf_r+0x210>
   8708e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87090:	4642      	mov	r2, r8
   87092:	f8dd 804c 	ldr.w	r8, [sp, #76]	; 0x4c
   87096:	18eb      	adds	r3, r5, r3
   87098:	465e      	mov	r6, fp
   8709a:	9307      	str	r3, [sp, #28]
   8709c:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   870a0:	9710      	str	r7, [sp, #64]	; 0x40
   870a2:	4621      	mov	r1, r4
   870a4:	9f19      	ldr	r7, [sp, #100]	; 0x64
   870a6:	f8dd 9070 	ldr.w	r9, [sp, #112]	; 0x70
   870aa:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
   870ae:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   870b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   870b4:	9513      	str	r5, [sp, #76]	; 0x4c
   870b6:	f1b8 0f00 	cmp.w	r8, #0
   870ba:	d02e      	beq.n	8711a <_svfprintf_r+0x1076>
   870bc:	bb83      	cbnz	r3, 87120 <_svfprintf_r+0x107c>
   870be:	3f01      	subs	r7, #1
   870c0:	f108 38ff 	add.w	r8, r8, #4294967295
   870c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
   870c6:	4449      	add	r1, r9
   870c8:	e9c2 3900 	strd	r3, r9, [r2]
   870cc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   870ce:	912a      	str	r1, [sp, #168]	; 0xa8
   870d0:	3301      	adds	r3, #1
   870d2:	2b07      	cmp	r3, #7
   870d4:	9329      	str	r3, [sp, #164]	; 0xa4
   870d6:	dc60      	bgt.n	8719a <_svfprintf_r+0x10f6>
   870d8:	3208      	adds	r2, #8
   870da:	9b07      	ldr	r3, [sp, #28]
   870dc:	7838      	ldrb	r0, [r7, #0]
   870de:	1b9b      	subs	r3, r3, r6
   870e0:	4283      	cmp	r3, r0
   870e2:	bfa8      	it	ge
   870e4:	4603      	movge	r3, r0
   870e6:	2b00      	cmp	r3, #0
   870e8:	461c      	mov	r4, r3
   870ea:	dd0b      	ble.n	87104 <_svfprintf_r+0x1060>
   870ec:	9829      	ldr	r0, [sp, #164]	; 0xa4
   870ee:	4419      	add	r1, r3
   870f0:	3001      	adds	r0, #1
   870f2:	2807      	cmp	r0, #7
   870f4:	e9c2 6300 	strd	r6, r3, [r2]
   870f8:	912a      	str	r1, [sp, #168]	; 0xa8
   870fa:	9029      	str	r0, [sp, #164]	; 0xa4
   870fc:	f300 8114 	bgt.w	87328 <_svfprintf_r+0x1284>
   87100:	7838      	ldrb	r0, [r7, #0]
   87102:	3208      	adds	r2, #8
   87104:	2c00      	cmp	r4, #0
   87106:	bfb4      	ite	lt
   87108:	4605      	movlt	r5, r0
   8710a:	1b05      	subge	r5, r0, r4
   8710c:	2d00      	cmp	r5, #0
   8710e:	dc0b      	bgt.n	87128 <_svfprintf_r+0x1084>
   87110:	4406      	add	r6, r0
   87112:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87114:	f1b8 0f00 	cmp.w	r8, #0
   87118:	d1d0      	bne.n	870bc <_svfprintf_r+0x1018>
   8711a:	2b00      	cmp	r3, #0
   8711c:	f000 8226 	beq.w	8756c <_svfprintf_r+0x14c8>
   87120:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   87122:	3b01      	subs	r3, #1
   87124:	930f      	str	r3, [sp, #60]	; 0x3c
   87126:	e7cd      	b.n	870c4 <_svfprintf_r+0x1020>
   87128:	2d10      	cmp	r5, #16
   8712a:	f340 849d 	ble.w	87a68 <_svfprintf_r+0x19c4>
   8712e:	2410      	movs	r4, #16
   87130:	9829      	ldr	r0, [sp, #164]	; 0xa4
   87132:	e004      	b.n	8713e <_svfprintf_r+0x109a>
   87134:	3d10      	subs	r5, #16
   87136:	2d10      	cmp	r5, #16
   87138:	f102 0208 	add.w	r2, r2, #8
   8713c:	dd16      	ble.n	8716c <_svfprintf_r+0x10c8>
   8713e:	3001      	adds	r0, #1
   87140:	4b25      	ldr	r3, [pc, #148]	; (871d8 <_svfprintf_r+0x1134>)
   87142:	3110      	adds	r1, #16
   87144:	2807      	cmp	r0, #7
   87146:	e9c2 3400 	strd	r3, r4, [r2]
   8714a:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   8714e:	ddf1      	ble.n	87134 <_svfprintf_r+0x1090>
   87150:	4659      	mov	r1, fp
   87152:	4650      	mov	r0, sl
   87154:	aa28      	add	r2, sp, #160	; 0xa0
   87156:	f002 fd65 	bl	89c24 <__ssprint_r>
   8715a:	2800      	cmp	r0, #0
   8715c:	f47f a905 	bne.w	8636a <_svfprintf_r+0x2c6>
   87160:	e9dd 0129 	ldrd	r0, r1, [sp, #164]	; 0xa4
   87164:	3d10      	subs	r5, #16
   87166:	2d10      	cmp	r5, #16
   87168:	aa2b      	add	r2, sp, #172	; 0xac
   8716a:	dce8      	bgt.n	8713e <_svfprintf_r+0x109a>
   8716c:	3001      	adds	r0, #1
   8716e:	4b1a      	ldr	r3, [pc, #104]	; (871d8 <_svfprintf_r+0x1134>)
   87170:	4429      	add	r1, r5
   87172:	2807      	cmp	r0, #7
   87174:	e9cd 0129 	strd	r0, r1, [sp, #164]	; 0xa4
   87178:	6055      	str	r5, [r2, #4]
   8717a:	6013      	str	r3, [r2, #0]
   8717c:	f300 8241 	bgt.w	87602 <_svfprintf_r+0x155e>
   87180:	7838      	ldrb	r0, [r7, #0]
   87182:	3208      	adds	r2, #8
   87184:	4406      	add	r6, r0
   87186:	e7c4      	b.n	87112 <_svfprintf_r+0x106e>
   87188:	f017 0310 	ands.w	r3, r7, #16
   8718c:	f000 80a0 	beq.w	872d0 <_svfprintf_r+0x122c>
   87190:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87192:	f853 4b04 	ldr.w	r4, [r3], #4
   87196:	930e      	str	r3, [sp, #56]	; 0x38
   87198:	e70a      	b.n	86fb0 <_svfprintf_r+0xf0c>
   8719a:	4659      	mov	r1, fp
   8719c:	4650      	mov	r0, sl
   8719e:	aa28      	add	r2, sp, #160	; 0xa0
   871a0:	f002 fd40 	bl	89c24 <__ssprint_r>
   871a4:	2800      	cmp	r0, #0
   871a6:	f47f a8e0 	bne.w	8636a <_svfprintf_r+0x2c6>
   871aa:	992a      	ldr	r1, [sp, #168]	; 0xa8
   871ac:	aa2b      	add	r2, sp, #172	; 0xac
   871ae:	e794      	b.n	870da <_svfprintf_r+0x1036>
   871b0:	2300      	movs	r3, #0
   871b2:	f40b 6280 	and.w	r2, fp, #1024	; 0x400
   871b6:	9606      	str	r6, [sp, #24]
   871b8:	f8cd a02c 	str.w	sl, [sp, #44]	; 0x2c
   871bc:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   871c0:	4692      	mov	sl, r2
   871c2:	461e      	mov	r6, r3
   871c4:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
   871c8:	af54      	add	r7, sp, #336	; 0x150
   871ca:	e014      	b.n	871f6 <_svfprintf_r+0x1152>
   871cc:	66666667 	.word	0x66666667
   871d0:	0008cb6c 	.word	0x0008cb6c
   871d4:	0008cb80 	.word	0x0008cb80
   871d8:	0008cbb0 	.word	0x0008cbb0
   871dc:	2300      	movs	r3, #0
   871de:	4620      	mov	r0, r4
   871e0:	4649      	mov	r1, r9
   871e2:	220a      	movs	r2, #10
   871e4:	f005 fb04 	bl	8c7f0 <__aeabi_uldivmod>
   871e8:	2c0a      	cmp	r4, #10
   871ea:	f179 0300 	sbcs.w	r3, r9, #0
   871ee:	d31b      	bcc.n	87228 <_svfprintf_r+0x1184>
   871f0:	4604      	mov	r4, r0
   871f2:	4689      	mov	r9, r1
   871f4:	462f      	mov	r7, r5
   871f6:	4620      	mov	r0, r4
   871f8:	220a      	movs	r2, #10
   871fa:	2300      	movs	r3, #0
   871fc:	4649      	mov	r1, r9
   871fe:	f005 faf7 	bl	8c7f0 <__aeabi_uldivmod>
   87202:	3230      	adds	r2, #48	; 0x30
   87204:	1e7d      	subs	r5, r7, #1
   87206:	3601      	adds	r6, #1
   87208:	f807 2c01 	strb.w	r2, [r7, #-1]
   8720c:	f1ba 0f00 	cmp.w	sl, #0
   87210:	d0e4      	beq.n	871dc <_svfprintf_r+0x1138>
   87212:	f898 3000 	ldrb.w	r3, [r8]
   87216:	429e      	cmp	r6, r3
   87218:	d1e0      	bne.n	871dc <_svfprintf_r+0x1138>
   8721a:	2eff      	cmp	r6, #255	; 0xff
   8721c:	d0de      	beq.n	871dc <_svfprintf_r+0x1138>
   8721e:	2c0a      	cmp	r4, #10
   87220:	f179 0300 	sbcs.w	r3, r9, #0
   87224:	f080 8130 	bcs.w	87488 <_svfprintf_r+0x13e4>
   87228:	ab54      	add	r3, sp, #336	; 0x150
   8722a:	1b5b      	subs	r3, r3, r5
   8722c:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   87230:	f8cd 8064 	str.w	r8, [sp, #100]	; 0x64
   87234:	9612      	str	r6, [sp, #72]	; 0x48
   87236:	465f      	mov	r7, fp
   87238:	9e06      	ldr	r6, [sp, #24]
   8723a:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   8723e:	930b      	str	r3, [sp, #44]	; 0x2c
   87240:	f7ff b82b 	b.w	8629a <_svfprintf_r+0x1f6>
   87244:	990c      	ldr	r1, [sp, #48]	; 0x30
   87246:	980a      	ldr	r0, [sp, #40]	; 0x28
   87248:	aa28      	add	r2, sp, #160	; 0xa0
   8724a:	931d      	str	r3, [sp, #116]	; 0x74
   8724c:	f002 fcea 	bl	89c24 <__ssprint_r>
   87250:	2800      	cmp	r0, #0
   87252:	f47f a88a 	bne.w	8636a <_svfprintf_r+0x2c6>
   87256:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   8725a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8725c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
   8725e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87262:	f7ff b8b8 	b.w	863d6 <_svfprintf_r+0x332>
   87266:	2301      	movs	r3, #1
   87268:	f8c8 3004 	str.w	r3, [r8, #4]
   8726c:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   8726e:	4abc      	ldr	r2, [pc, #752]	; (87560 <_svfprintf_r+0x14bc>)
   87270:	3301      	adds	r3, #1
   87272:	3401      	adds	r4, #1
   87274:	2b07      	cmp	r3, #7
   87276:	942a      	str	r4, [sp, #168]	; 0xa8
   87278:	9329      	str	r3, [sp, #164]	; 0xa4
   8727a:	f8c8 2000 	str.w	r2, [r8]
   8727e:	f300 8117 	bgt.w	874b0 <_svfprintf_r+0x140c>
   87282:	f108 0808 	add.w	r8, r8, #8
   87286:	2900      	cmp	r1, #0
   87288:	f040 8086 	bne.w	87398 <_svfprintf_r+0x12f4>
   8728c:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8728e:	f007 0301 	and.w	r3, r7, #1
   87292:	4313      	orrs	r3, r2
   87294:	f43f a8e0 	beq.w	86458 <_svfprintf_r+0x3b4>
   87298:	9b16      	ldr	r3, [sp, #88]	; 0x58
   8729a:	9917      	ldr	r1, [sp, #92]	; 0x5c
   8729c:	191a      	adds	r2, r3, r4
   8729e:	e9c8 1300 	strd	r1, r3, [r8]
   872a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   872a4:	922a      	str	r2, [sp, #168]	; 0xa8
   872a6:	3301      	adds	r3, #1
   872a8:	2b07      	cmp	r3, #7
   872aa:	9329      	str	r3, [sp, #164]	; 0xa4
   872ac:	f300 8137 	bgt.w	8751e <_svfprintf_r+0x147a>
   872b0:	f108 0808 	add.w	r8, r8, #8
   872b4:	9912      	ldr	r1, [sp, #72]	; 0x48
   872b6:	3301      	adds	r3, #1
   872b8:	188c      	adds	r4, r1, r2
   872ba:	2b07      	cmp	r3, #7
   872bc:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   872c0:	f8c8 5000 	str.w	r5, [r8]
   872c4:	f8c8 1004 	str.w	r1, [r8, #4]
   872c8:	f77f a8c4 	ble.w	86454 <_svfprintf_r+0x3b0>
   872cc:	f7ff bbac 	b.w	86a28 <_svfprintf_r+0x984>
   872d0:	f017 0240 	ands.w	r2, r7, #64	; 0x40
   872d4:	f000 80a5 	beq.w	87422 <_svfprintf_r+0x137e>
   872d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   872da:	4699      	mov	r9, r3
   872dc:	f852 4b04 	ldr.w	r4, [r2], #4
   872e0:	920e      	str	r2, [sp, #56]	; 0x38
   872e2:	b2a4      	uxth	r4, r4
   872e4:	e664      	b.n	86fb0 <_svfprintf_r+0xf0c>
   872e6:	46bb      	mov	fp, r7
   872e8:	f7fe bfca 	b.w	86280 <_svfprintf_r+0x1dc>
   872ec:	990c      	ldr	r1, [sp, #48]	; 0x30
   872ee:	980a      	ldr	r0, [sp, #40]	; 0x28
   872f0:	aa28      	add	r2, sp, #160	; 0xa0
   872f2:	f002 fc97 	bl	89c24 <__ssprint_r>
   872f6:	2800      	cmp	r0, #0
   872f8:	f47f a837 	bne.w	8636a <_svfprintf_r+0x2c6>
   872fc:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   872fe:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87302:	f7ff ba7b 	b.w	867fc <_svfprintf_r+0x758>
   87306:	4614      	mov	r4, r2
   87308:	463a      	mov	r2, r7
   8730a:	464f      	mov	r7, r9
   8730c:	4691      	mov	r9, r2
   8730e:	3301      	adds	r3, #1
   87310:	442c      	add	r4, r5
   87312:	2b07      	cmp	r3, #7
   87314:	f8c8 9000 	str.w	r9, [r8]
   87318:	f8c8 5004 	str.w	r5, [r8, #4]
   8731c:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   87320:	f77f a898 	ble.w	86454 <_svfprintf_r+0x3b0>
   87324:	f7ff bb80 	b.w	86a28 <_svfprintf_r+0x984>
   87328:	4659      	mov	r1, fp
   8732a:	4650      	mov	r0, sl
   8732c:	aa28      	add	r2, sp, #160	; 0xa0
   8732e:	f002 fc79 	bl	89c24 <__ssprint_r>
   87332:	2800      	cmp	r0, #0
   87334:	f47f a819 	bne.w	8636a <_svfprintf_r+0x2c6>
   87338:	7838      	ldrb	r0, [r7, #0]
   8733a:	992a      	ldr	r1, [sp, #168]	; 0xa8
   8733c:	aa2b      	add	r2, sp, #172	; 0xac
   8733e:	e6e1      	b.n	87104 <_svfprintf_r+0x1060>
   87340:	990c      	ldr	r1, [sp, #48]	; 0x30
   87342:	980a      	ldr	r0, [sp, #40]	; 0x28
   87344:	aa28      	add	r2, sp, #160	; 0xa0
   87346:	f002 fc6d 	bl	89c24 <__ssprint_r>
   8734a:	2800      	cmp	r0, #0
   8734c:	f47f a80d 	bne.w	8636a <_svfprintf_r+0x2c6>
   87350:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87352:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87356:	f7ff b865 	b.w	86424 <_svfprintf_r+0x380>
   8735a:	2b01      	cmp	r3, #1
   8735c:	46bb      	mov	fp, r7
   8735e:	f47f a9f5 	bne.w	8674c <_svfprintf_r+0x6a8>
   87362:	f7fe bf92 	b.w	8628a <_svfprintf_r+0x1e6>
   87366:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87368:	9908      	ldr	r1, [sp, #32]
   8736a:	f853 2b04 	ldr.w	r2, [r3], #4
   8736e:	4655      	mov	r5, sl
   87370:	6011      	str	r1, [r2, #0]
   87372:	930e      	str	r3, [sp, #56]	; 0x38
   87374:	f7ff b88e 	b.w	86494 <_svfprintf_r+0x3f0>
   87378:	2b06      	cmp	r3, #6
   8737a:	4629      	mov	r1, r5
   8737c:	bf28      	it	cs
   8737e:	2306      	movcs	r3, #6
   87380:	462a      	mov	r2, r5
   87382:	9507      	str	r5, [sp, #28]
   87384:	950d      	str	r5, [sp, #52]	; 0x34
   87386:	9306      	str	r3, [sp, #24]
   87388:	4d76      	ldr	r5, [pc, #472]	; (87564 <_svfprintf_r+0x14c0>)
   8738a:	940e      	str	r4, [sp, #56]	; 0x38
   8738c:	930b      	str	r3, [sp, #44]	; 0x2c
   8738e:	910f      	str	r1, [sp, #60]	; 0x3c
   87390:	9113      	str	r1, [sp, #76]	; 0x4c
   87392:	9110      	str	r1, [sp, #64]	; 0x40
   87394:	f7fe bf8e 	b.w	862b4 <_svfprintf_r+0x210>
   87398:	9b16      	ldr	r3, [sp, #88]	; 0x58
   8739a:	9817      	ldr	r0, [sp, #92]	; 0x5c
   8739c:	191a      	adds	r2, r3, r4
   8739e:	e9c8 0300 	strd	r0, r3, [r8]
   873a2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   873a4:	922a      	str	r2, [sp, #168]	; 0xa8
   873a6:	3301      	adds	r3, #1
   873a8:	2b07      	cmp	r3, #7
   873aa:	9329      	str	r3, [sp, #164]	; 0xa4
   873ac:	f300 80b7 	bgt.w	8751e <_svfprintf_r+0x147a>
   873b0:	f108 0808 	add.w	r8, r8, #8
   873b4:	2900      	cmp	r1, #0
   873b6:	f6bf af7d 	bge.w	872b4 <_svfprintf_r+0x1210>
   873ba:	424e      	negs	r6, r1
   873bc:	3110      	adds	r1, #16
   873be:	f280 83a9 	bge.w	87b14 <_svfprintf_r+0x1a70>
   873c2:	4641      	mov	r1, r8
   873c4:	2410      	movs	r4, #16
   873c6:	46a8      	mov	r8, r5
   873c8:	f8df 919c 	ldr.w	r9, [pc, #412]	; 87568 <_svfprintf_r+0x14c4>
   873cc:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   873d0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   873d2:	e004      	b.n	873de <_svfprintf_r+0x133a>
   873d4:	3108      	adds	r1, #8
   873d6:	3e10      	subs	r6, #16
   873d8:	2e10      	cmp	r6, #16
   873da:	f340 82a7 	ble.w	8792c <_svfprintf_r+0x1888>
   873de:	3301      	adds	r3, #1
   873e0:	3210      	adds	r2, #16
   873e2:	2b07      	cmp	r3, #7
   873e4:	e9c1 9400 	strd	r9, r4, [r1]
   873e8:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   873ec:	ddf2      	ble.n	873d4 <_svfprintf_r+0x1330>
   873ee:	4629      	mov	r1, r5
   873f0:	4658      	mov	r0, fp
   873f2:	aa28      	add	r2, sp, #160	; 0xa0
   873f4:	f002 fc16 	bl	89c24 <__ssprint_r>
   873f8:	2800      	cmp	r0, #0
   873fa:	f47e afb6 	bne.w	8636a <_svfprintf_r+0x2c6>
   873fe:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   87402:	a92b      	add	r1, sp, #172	; 0xac
   87404:	e7e7      	b.n	873d6 <_svfprintf_r+0x1332>
   87406:	4614      	mov	r4, r2
   87408:	9f07      	ldr	r7, [sp, #28]
   8740a:	3601      	adds	r6, #1
   8740c:	442c      	add	r4, r5
   8740e:	2e07      	cmp	r6, #7
   87410:	e9cd 6429 	strd	r6, r4, [sp, #164]	; 0xa4
   87414:	f8c8 9000 	str.w	r9, [r8]
   87418:	f8c8 5004 	str.w	r5, [r8, #4]
   8741c:	f77f aaf5 	ble.w	86a0a <_svfprintf_r+0x966>
   87420:	e44e      	b.n	86cc0 <_svfprintf_r+0xc1c>
   87422:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   87426:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87428:	d066      	beq.n	874f8 <_svfprintf_r+0x1454>
   8742a:	f853 4b04 	ldr.w	r4, [r3], #4
   8742e:	4691      	mov	r9, r2
   87430:	930e      	str	r3, [sp, #56]	; 0x38
   87432:	b2e4      	uxtb	r4, r4
   87434:	e5bc      	b.n	86fb0 <_svfprintf_r+0xf0c>
   87436:	f417 7900 	ands.w	r9, r7, #512	; 0x200
   8743a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   8743c:	d057      	beq.n	874ee <_svfprintf_r+0x144a>
   8743e:	f853 4b04 	ldr.w	r4, [r3], #4
   87442:	4691      	mov	r9, r2
   87444:	930e      	str	r3, [sp, #56]	; 0x38
   87446:	b2e4      	uxtb	r4, r4
   87448:	f7fe bf49 	b.w	862de <_svfprintf_r+0x23a>
   8744c:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   8744e:	f8df 9118 	ldr.w	r9, [pc, #280]	; 87568 <_svfprintf_r+0x14c4>
   87452:	f7ff ba95 	b.w	86980 <_svfprintf_r+0x8dc>
   87456:	222d      	movs	r2, #45	; 0x2d
   87458:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   8745c:	f7ff b857 	b.w	8650e <_svfprintf_r+0x46a>
   87460:	4645      	mov	r5, r8
   87462:	4690      	mov	r8, r2
   87464:	463a      	mov	r2, r7
   87466:	460c      	mov	r4, r1
   87468:	464f      	mov	r7, r9
   8746a:	4691      	mov	r9, r2
   8746c:	3301      	adds	r3, #1
   8746e:	4434      	add	r4, r6
   87470:	2b07      	cmp	r3, #7
   87472:	e9cd 3429 	strd	r3, r4, [sp, #164]	; 0xa4
   87476:	f8c8 9000 	str.w	r9, [r8]
   8747a:	f8c8 6004 	str.w	r6, [r8, #4]
   8747e:	dc5c      	bgt.n	8753a <_svfprintf_r+0x1496>
   87480:	f108 0808 	add.w	r8, r8, #8
   87484:	f7ff bb9e 	b.w	86bc4 <_svfprintf_r+0xb20>
   87488:	9b1c      	ldr	r3, [sp, #112]	; 0x70
   8748a:	991b      	ldr	r1, [sp, #108]	; 0x6c
   8748c:	1aed      	subs	r5, r5, r3
   8748e:	461a      	mov	r2, r3
   87490:	4628      	mov	r0, r5
   87492:	f7fe fdd3 	bl	8603c <strncpy>
   87496:	f898 3001 	ldrb.w	r3, [r8, #1]
   8749a:	b10b      	cbz	r3, 874a0 <_svfprintf_r+0x13fc>
   8749c:	f108 0801 	add.w	r8, r8, #1
   874a0:	4620      	mov	r0, r4
   874a2:	4649      	mov	r1, r9
   874a4:	220a      	movs	r2, #10
   874a6:	2300      	movs	r3, #0
   874a8:	2600      	movs	r6, #0
   874aa:	f005 f9a1 	bl	8c7f0 <__aeabi_uldivmod>
   874ae:	e69f      	b.n	871f0 <_svfprintf_r+0x114c>
   874b0:	990c      	ldr	r1, [sp, #48]	; 0x30
   874b2:	980a      	ldr	r0, [sp, #40]	; 0x28
   874b4:	aa28      	add	r2, sp, #160	; 0xa0
   874b6:	f002 fbb5 	bl	89c24 <__ssprint_r>
   874ba:	2800      	cmp	r0, #0
   874bc:	f47e af55 	bne.w	8636a <_svfprintf_r+0x2c6>
   874c0:	9922      	ldr	r1, [sp, #136]	; 0x88
   874c2:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   874c4:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   874c8:	e6dd      	b.n	87286 <_svfprintf_r+0x11e2>
   874ca:	9a12      	ldr	r2, [sp, #72]	; 0x48
   874cc:	18ae      	adds	r6, r5, r2
   874ce:	eba6 060b 	sub.w	r6, r6, fp
   874d2:	1ad5      	subs	r5, r2, r3
   874d4:	42ae      	cmp	r6, r5
   874d6:	bfa8      	it	ge
   874d8:	462e      	movge	r6, r5
   874da:	f7ff bba6 	b.w	86c2a <_svfprintf_r+0xb86>
   874de:	f852 4b04 	ldr.w	r4, [r2], #4
   874e2:	4689      	mov	r9, r1
   874e4:	2301      	movs	r3, #1
   874e6:	920e      	str	r2, [sp, #56]	; 0x38
   874e8:	b2e4      	uxtb	r4, r4
   874ea:	f7fe befb 	b.w	862e4 <_svfprintf_r+0x240>
   874ee:	f853 4b04 	ldr.w	r4, [r3], #4
   874f2:	930e      	str	r3, [sp, #56]	; 0x38
   874f4:	f7fe bef3 	b.w	862de <_svfprintf_r+0x23a>
   874f8:	f853 4b04 	ldr.w	r4, [r3], #4
   874fc:	930e      	str	r3, [sp, #56]	; 0x38
   874fe:	e557      	b.n	86fb0 <_svfprintf_r+0xf0c>
   87500:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87502:	9908      	ldr	r1, [sp, #32]
   87504:	f853 2b04 	ldr.w	r2, [r3], #4
   87508:	4655      	mov	r5, sl
   8750a:	8011      	strh	r1, [r2, #0]
   8750c:	930e      	str	r3, [sp, #56]	; 0x38
   8750e:	f7fe bfc1 	b.w	86494 <_svfprintf_r+0x3f0>
   87512:	f344 19c0 	sbfx	r9, r4, #7, #1
   87516:	464b      	mov	r3, r9
   87518:	b264      	sxtb	r4, r4
   8751a:	f7fe bea4 	b.w	86266 <_svfprintf_r+0x1c2>
   8751e:	990c      	ldr	r1, [sp, #48]	; 0x30
   87520:	980a      	ldr	r0, [sp, #40]	; 0x28
   87522:	aa28      	add	r2, sp, #160	; 0xa0
   87524:	f002 fb7e 	bl	89c24 <__ssprint_r>
   87528:	2800      	cmp	r0, #0
   8752a:	f47e af1e 	bne.w	8636a <_svfprintf_r+0x2c6>
   8752e:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   87532:	9922      	ldr	r1, [sp, #136]	; 0x88
   87534:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87538:	e73c      	b.n	873b4 <_svfprintf_r+0x1310>
   8753a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8753c:	980a      	ldr	r0, [sp, #40]	; 0x28
   8753e:	aa28      	add	r2, sp, #160	; 0xa0
   87540:	f002 fb70 	bl	89c24 <__ssprint_r>
   87544:	2800      	cmp	r0, #0
   87546:	f47e af10 	bne.w	8636a <_svfprintf_r+0x2c6>
   8754a:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8754c:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87550:	f7ff bb38 	b.w	86bc4 <_svfprintf_r+0xb20>
   87554:	2306      	movs	r3, #6
   87556:	9307      	str	r3, [sp, #28]
   87558:	f026 0320 	bic.w	r3, r6, #32
   8755c:	9306      	str	r3, [sp, #24]
   8755e:	e470      	b.n	86e42 <_svfprintf_r+0xd9e>
   87560:	0008cb9c 	.word	0x0008cb9c
   87564:	0008cb94 	.word	0x0008cb94
   87568:	0008cbb0 	.word	0x0008cbb0
   8756c:	e9dd 3512 	ldrd	r3, r5, [sp, #72]	; 0x48
   87570:	18eb      	adds	r3, r5, r3
   87572:	429e      	cmp	r6, r3
   87574:	46b3      	mov	fp, r6
   87576:	9719      	str	r7, [sp, #100]	; 0x64
   87578:	4690      	mov	r8, r2
   8757a:	460c      	mov	r4, r1
   8757c:	bf28      	it	cs
   8757e:	469b      	movcs	fp, r3
   87580:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   87584:	9f10      	ldr	r7, [sp, #64]	; 0x40
   87586:	f7ff bb23 	b.w	86bd0 <_svfprintf_r+0xb2c>
   8758a:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8758c:	1cda      	adds	r2, r3, #3
   8758e:	9310      	str	r3, [sp, #64]	; 0x40
   87590:	db02      	blt.n	87598 <_svfprintf_r+0x14f4>
   87592:	9a07      	ldr	r2, [sp, #28]
   87594:	4293      	cmp	r3, r2
   87596:	dd04      	ble.n	875a2 <_svfprintf_r+0x14fe>
   87598:	3e02      	subs	r6, #2
   8759a:	f026 0320 	bic.w	r3, r6, #32
   8759e:	9306      	str	r3, [sp, #24]
   875a0:	e48b      	b.n	86eba <_svfprintf_r+0xe16>
   875a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   875a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
   875a6:	4293      	cmp	r3, r2
   875a8:	f2c0 80c2 	blt.w	87730 <_svfprintf_r+0x168c>
   875ac:	f019 0f01 	tst.w	r9, #1
   875b0:	f000 821d 	beq.w	879ee <_svfprintf_r+0x194a>
   875b4:	9a16      	ldr	r2, [sp, #88]	; 0x58
   875b6:	4413      	add	r3, r2
   875b8:	930b      	str	r3, [sp, #44]	; 0x2c
   875ba:	f419 6f80 	tst.w	r9, #1024	; 0x400
   875be:	f000 8214 	beq.w	879ea <_svfprintf_r+0x1946>
   875c2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   875c4:	2667      	movs	r6, #103	; 0x67
   875c6:	2b00      	cmp	r3, #0
   875c8:	dc76      	bgt.n	876b8 <_svfprintf_r+0x1614>
   875ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   875cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   875d0:	9306      	str	r3, [sp, #24]
   875d2:	2300      	movs	r3, #0
   875d4:	930f      	str	r3, [sp, #60]	; 0x3c
   875d6:	9313      	str	r3, [sp, #76]	; 0x4c
   875d8:	e4cf      	b.n	86f7a <_svfprintf_r+0xed6>
   875da:	222d      	movs	r2, #45	; 0x2d
   875dc:	2300      	movs	r3, #0
   875de:	f88d 2083 	strb.w	r2, [sp, #131]	; 0x83
   875e2:	9307      	str	r3, [sp, #28]
   875e4:	f7fe be68 	b.w	862b8 <_svfprintf_r+0x214>
   875e8:	990c      	ldr	r1, [sp, #48]	; 0x30
   875ea:	980a      	ldr	r0, [sp, #40]	; 0x28
   875ec:	aa28      	add	r2, sp, #160	; 0xa0
   875ee:	f002 fb19 	bl	89c24 <__ssprint_r>
   875f2:	2800      	cmp	r0, #0
   875f4:	f47e aeb9 	bne.w	8636a <_svfprintf_r+0x2c6>
   875f8:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   875fa:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   875fe:	f7ff bad8 	b.w	86bb2 <_svfprintf_r+0xb0e>
   87602:	4659      	mov	r1, fp
   87604:	4650      	mov	r0, sl
   87606:	aa28      	add	r2, sp, #160	; 0xa0
   87608:	f002 fb0c 	bl	89c24 <__ssprint_r>
   8760c:	2800      	cmp	r0, #0
   8760e:	f47e aeac 	bne.w	8636a <_svfprintf_r+0x2c6>
   87612:	7838      	ldrb	r0, [r7, #0]
   87614:	992a      	ldr	r1, [sp, #168]	; 0xa8
   87616:	aa2b      	add	r2, sp, #172	; 0xac
   87618:	4406      	add	r6, r0
   8761a:	e57a      	b.n	87112 <_svfprintf_r+0x106e>
   8761c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8761e:	980a      	ldr	r0, [sp, #40]	; 0x28
   87620:	aa28      	add	r2, sp, #160	; 0xa0
   87622:	f002 faff 	bl	89c24 <__ssprint_r>
   87626:	2800      	cmp	r0, #0
   87628:	f47e ae9f 	bne.w	8636a <_svfprintf_r+0x2c6>
   8762c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8762e:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   87630:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87634:	f7ff bae1 	b.w	86bfa <_svfprintf_r+0xb56>
   87638:	9907      	ldr	r1, [sp, #28]
   8763a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8763c:	9101      	str	r1, [sp, #4]
   8763e:	2103      	movs	r1, #3
   87640:	9100      	str	r1, [sp, #0]
   87642:	a926      	add	r1, sp, #152	; 0x98
   87644:	9104      	str	r1, [sp, #16]
   87646:	a923      	add	r1, sp, #140	; 0x8c
   87648:	9103      	str	r1, [sp, #12]
   8764a:	a922      	add	r1, sp, #136	; 0x88
   8764c:	465a      	mov	r2, fp
   8764e:	980a      	ldr	r0, [sp, #40]	; 0x28
   87650:	9102      	str	r1, [sp, #8]
   87652:	f000 fb21 	bl	87c98 <_dtoa_r>
   87656:	7803      	ldrb	r3, [r0, #0]
   87658:	4605      	mov	r5, r0
   8765a:	2b30      	cmp	r3, #48	; 0x30
   8765c:	f000 8216 	beq.w	87a8c <_svfprintf_r+0x19e8>
   87660:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87662:	9a07      	ldr	r2, [sp, #28]
   87664:	46b9      	mov	r9, r7
   87666:	4413      	add	r3, r2
   87668:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   8766a:	18ec      	adds	r4, r5, r3
   8766c:	4658      	mov	r0, fp
   8766e:	2200      	movs	r2, #0
   87670:	2300      	movs	r3, #0
   87672:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87674:	f005 f84c 	bl	8c710 <__aeabi_dcmpeq>
   87678:	b108      	cbz	r0, 8767e <_svfprintf_r+0x15da>
   8767a:	4623      	mov	r3, r4
   8767c:	e411      	b.n	86ea2 <_svfprintf_r+0xdfe>
   8767e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87680:	42a3      	cmp	r3, r4
   87682:	f4bf ac0e 	bcs.w	86ea2 <_svfprintf_r+0xdfe>
   87686:	2130      	movs	r1, #48	; 0x30
   87688:	1c5a      	adds	r2, r3, #1
   8768a:	9226      	str	r2, [sp, #152]	; 0x98
   8768c:	7019      	strb	r1, [r3, #0]
   8768e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87690:	429c      	cmp	r4, r3
   87692:	d8f9      	bhi.n	87688 <_svfprintf_r+0x15e4>
   87694:	e405      	b.n	86ea2 <_svfprintf_r+0xdfe>
   87696:	9a22      	ldr	r2, [sp, #136]	; 0x88
   87698:	2a00      	cmp	r2, #0
   8769a:	9210      	str	r2, [sp, #64]	; 0x40
   8769c:	f340 820e 	ble.w	87abc <_svfprintf_r+0x1a18>
   876a0:	9907      	ldr	r1, [sp, #28]
   876a2:	f009 0301 	and.w	r3, r9, #1
   876a6:	430b      	orrs	r3, r1
   876a8:	f040 817e 	bne.w	879a8 <_svfprintf_r+0x1904>
   876ac:	2666      	movs	r6, #102	; 0x66
   876ae:	9b10      	ldr	r3, [sp, #64]	; 0x40
   876b0:	930b      	str	r3, [sp, #44]	; 0x2c
   876b2:	f419 6f80 	tst.w	r9, #1024	; 0x400
   876b6:	d088      	beq.n	875ca <_svfprintf_r+0x1526>
   876b8:	9919      	ldr	r1, [sp, #100]	; 0x64
   876ba:	780b      	ldrb	r3, [r1, #0]
   876bc:	2bff      	cmp	r3, #255	; 0xff
   876be:	f000 8225 	beq.w	87b0c <_svfprintf_r+0x1a68>
   876c2:	2400      	movs	r4, #0
   876c4:	9a10      	ldr	r2, [sp, #64]	; 0x40
   876c6:	4620      	mov	r0, r4
   876c8:	e004      	b.n	876d4 <_svfprintf_r+0x1630>
   876ca:	3001      	adds	r0, #1
   876cc:	3101      	adds	r1, #1
   876ce:	2bff      	cmp	r3, #255	; 0xff
   876d0:	f000 8159 	beq.w	87986 <_svfprintf_r+0x18e2>
   876d4:	4293      	cmp	r3, r2
   876d6:	f280 8156 	bge.w	87986 <_svfprintf_r+0x18e2>
   876da:	1ad2      	subs	r2, r2, r3
   876dc:	784b      	ldrb	r3, [r1, #1]
   876de:	2b00      	cmp	r3, #0
   876e0:	d1f3      	bne.n	876ca <_svfprintf_r+0x1626>
   876e2:	780b      	ldrb	r3, [r1, #0]
   876e4:	3401      	adds	r4, #1
   876e6:	e7f2      	b.n	876ce <_svfprintf_r+0x162a>
   876e8:	e9dd 2129 	ldrd	r2, r1, [sp, #164]	; 0xa4
   876ec:	f7ff b9da 	b.w	86aa4 <_svfprintf_r+0xa00>
   876f0:	9b07      	ldr	r3, [sp, #28]
   876f2:	f89d 2083 	ldrb.w	r2, [sp, #131]	; 0x83
   876f6:	940e      	str	r4, [sp, #56]	; 0x38
   876f8:	9306      	str	r3, [sp, #24]
   876fa:	930b      	str	r3, [sp, #44]	; 0x2c
   876fc:	9007      	str	r0, [sp, #28]
   876fe:	900f      	str	r0, [sp, #60]	; 0x3c
   87700:	9013      	str	r0, [sp, #76]	; 0x4c
   87702:	9010      	str	r0, [sp, #64]	; 0x40
   87704:	f7fe bdd6 	b.w	862b4 <_svfprintf_r+0x210>
   87708:	990c      	ldr	r1, [sp, #48]	; 0x30
   8770a:	980a      	ldr	r0, [sp, #40]	; 0x28
   8770c:	aa28      	add	r2, sp, #160	; 0xa0
   8770e:	f002 fa89 	bl	89c24 <__ssprint_r>
   87712:	2800      	cmp	r0, #0
   87714:	f47e ae29 	bne.w	8636a <_svfprintf_r+0x2c6>
   87718:	9d22      	ldr	r5, [sp, #136]	; 0x88
   8771a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8771c:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
   8771e:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   87722:	1b5d      	subs	r5, r3, r5
   87724:	f7ff ba81 	b.w	86c2a <_svfprintf_r+0xb86>
   87728:	2300      	movs	r3, #0
   8772a:	9307      	str	r3, [sp, #28]
   8772c:	f7fe bd0b 	b.w	86146 <_svfprintf_r+0xa2>
   87730:	9b12      	ldr	r3, [sp, #72]	; 0x48
   87732:	9a16      	ldr	r2, [sp, #88]	; 0x58
   87734:	189a      	adds	r2, r3, r2
   87736:	9b10      	ldr	r3, [sp, #64]	; 0x40
   87738:	920b      	str	r2, [sp, #44]	; 0x2c
   8773a:	2b00      	cmp	r3, #0
   8773c:	f340 8185 	ble.w	87a4a <_svfprintf_r+0x19a6>
   87740:	2667      	movs	r6, #103	; 0x67
   87742:	e7b6      	b.n	876b2 <_svfprintf_r+0x160e>
   87744:	2330      	movs	r3, #48	; 0x30
   87746:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   8774a:	2358      	movs	r3, #88	; 0x58
   8774c:	f88d 3085 	strb.w	r3, [sp, #133]	; 0x85
   87750:	9b07      	ldr	r3, [sp, #28]
   87752:	f047 0402 	orr.w	r4, r7, #2
   87756:	2b63      	cmp	r3, #99	; 0x63
   87758:	f300 80c4 	bgt.w	878e4 <_svfprintf_r+0x1840>
   8775c:	2300      	movs	r3, #0
   8775e:	ad3b      	add	r5, sp, #236	; 0xec
   87760:	930d      	str	r3, [sp, #52]	; 0x34
   87762:	f447 7381 	orr.w	r3, r7, #258	; 0x102
   87766:	930f      	str	r3, [sp, #60]	; 0x3c
   87768:	e9dd 1214 	ldrd	r1, r2, [sp, #80]	; 0x50
   8776c:	4613      	mov	r3, r2
   8776e:	2b00      	cmp	r3, #0
   87770:	4627      	mov	r7, r4
   87772:	f2c0 8084 	blt.w	8787e <_svfprintf_r+0x17da>
   87776:	930b      	str	r3, [sp, #44]	; 0x2c
   87778:	2300      	movs	r3, #0
   8777a:	468b      	mov	fp, r1
   8777c:	931d      	str	r3, [sp, #116]	; 0x74
   8777e:	f026 0320 	bic.w	r3, r6, #32
   87782:	9306      	str	r3, [sp, #24]
   87784:	2e61      	cmp	r6, #97	; 0x61
   87786:	f000 8118 	beq.w	879ba <_svfprintf_r+0x1916>
   8778a:	2e41      	cmp	r6, #65	; 0x41
   8778c:	f47f ab67 	bne.w	86e5e <_svfprintf_r+0xdba>
   87790:	aa22      	add	r2, sp, #136	; 0x88
   87792:	4658      	mov	r0, fp
   87794:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87796:	f002 f9fb 	bl	89b90 <frexp>
   8779a:	2200      	movs	r2, #0
   8779c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   877a0:	f004 fd4e 	bl	8c240 <__aeabi_dmul>
   877a4:	4602      	mov	r2, r0
   877a6:	460b      	mov	r3, r1
   877a8:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   877ac:	2200      	movs	r2, #0
   877ae:	2300      	movs	r3, #0
   877b0:	f004 ffae 	bl	8c710 <__aeabi_dcmpeq>
   877b4:	b108      	cbz	r0, 877ba <_svfprintf_r+0x1716>
   877b6:	2301      	movs	r3, #1
   877b8:	9322      	str	r3, [sp, #136]	; 0x88
   877ba:	4bad      	ldr	r3, [pc, #692]	; (87a70 <_svfprintf_r+0x19cc>)
   877bc:	930b      	str	r3, [sp, #44]	; 0x2c
   877be:	9b07      	ldr	r3, [sp, #28]
   877c0:	e9cd a612 	strd	sl, r6, [sp, #72]	; 0x48
   877c4:	e9cd 781e 	strd	r7, r8, [sp, #120]	; 0x78
   877c8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
   877cc:	46ab      	mov	fp, r5
   877ce:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
   877d2:	f103 39ff 	add.w	r9, r3, #4294967295
   877d6:	9510      	str	r5, [sp, #64]	; 0x40
   877d8:	e006      	b.n	877e8 <_svfprintf_r+0x1744>
   877da:	2200      	movs	r2, #0
   877dc:	2300      	movs	r3, #0
   877de:	f109 39ff 	add.w	r9, r9, #4294967295
   877e2:	f004 ff95 	bl	8c710 <__aeabi_dcmpeq>
   877e6:	b9e8      	cbnz	r0, 87824 <_svfprintf_r+0x1780>
   877e8:	2200      	movs	r2, #0
   877ea:	4ba2      	ldr	r3, [pc, #648]	; (87a74 <_svfprintf_r+0x19d0>)
   877ec:	4630      	mov	r0, r6
   877ee:	4639      	mov	r1, r7
   877f0:	f004 fd26 	bl	8c240 <__aeabi_dmul>
   877f4:	460f      	mov	r7, r1
   877f6:	4606      	mov	r6, r0
   877f8:	f004 ffd2 	bl	8c7a0 <__aeabi_d2iz>
   877fc:	4604      	mov	r4, r0
   877fe:	f004 fcb5 	bl	8c16c <__aeabi_i2d>
   87802:	460b      	mov	r3, r1
   87804:	4602      	mov	r2, r0
   87806:	4639      	mov	r1, r7
   87808:	4630      	mov	r0, r6
   8780a:	f004 fb61 	bl	8bed0 <__aeabi_dsub>
   8780e:	f81a 3004 	ldrb.w	r3, [sl, r4]
   87812:	f1b9 3fff 	cmp.w	r9, #4294967295
   87816:	46d8      	mov	r8, fp
   87818:	464d      	mov	r5, r9
   8781a:	4606      	mov	r6, r0
   8781c:	460f      	mov	r7, r1
   8781e:	f80b 3b01 	strb.w	r3, [fp], #1
   87822:	d1da      	bne.n	877da <_svfprintf_r+0x1736>
   87824:	4630      	mov	r0, r6
   87826:	4639      	mov	r1, r7
   87828:	2200      	movs	r2, #0
   8782a:	4b93      	ldr	r3, [pc, #588]	; (87a78 <_svfprintf_r+0x19d4>)
   8782c:	46a9      	mov	r9, r5
   8782e:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
   87832:	9d10      	ldr	r5, [sp, #64]	; 0x40
   87834:	f8cd 8048 	str.w	r8, [sp, #72]	; 0x48
   87838:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8783c:	f8dd 807c 	ldr.w	r8, [sp, #124]	; 0x7c
   87840:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   87842:	9f1e      	ldr	r7, [sp, #120]	; 0x78
   87844:	f004 ff8c 	bl	8c760 <__aeabi_dcmpgt>
   87848:	bb80      	cbnz	r0, 878ac <_svfprintf_r+0x1808>
   8784a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   8784e:	2200      	movs	r2, #0
   87850:	4b89      	ldr	r3, [pc, #548]	; (87a78 <_svfprintf_r+0x19d4>)
   87852:	f004 ff5d 	bl	8c710 <__aeabi_dcmpeq>
   87856:	b108      	cbz	r0, 8785c <_svfprintf_r+0x17b8>
   87858:	07e1      	lsls	r1, r4, #31
   8785a:	d427      	bmi.n	878ac <_svfprintf_r+0x1808>
   8785c:	464b      	mov	r3, r9
   8785e:	2b00      	cmp	r3, #0
   87860:	db06      	blt.n	87870 <_svfprintf_r+0x17cc>
   87862:	2230      	movs	r2, #48	; 0x30
   87864:	3301      	adds	r3, #1
   87866:	445b      	add	r3, fp
   87868:	f80b 2b01 	strb.w	r2, [fp], #1
   8786c:	455b      	cmp	r3, fp
   8786e:	d1fb      	bne.n	87868 <_svfprintf_r+0x17c4>
   87870:	ebab 0305 	sub.w	r3, fp, r5
   87874:	46b9      	mov	r9, r7
   87876:	9312      	str	r3, [sp, #72]	; 0x48
   87878:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   8787a:	f7ff bb14 	b.w	86ea6 <_svfprintf_r+0xe02>
   8787e:	f026 0320 	bic.w	r3, r6, #32
   87882:	9306      	str	r3, [sp, #24]
   87884:	222d      	movs	r2, #45	; 0x2d
   87886:	e9dd 3414 	ldrd	r3, r4, [sp, #80]	; 0x50
   8788a:	469b      	mov	fp, r3
   8788c:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
   87890:	921d      	str	r2, [sp, #116]	; 0x74
   87892:	930b      	str	r3, [sp, #44]	; 0x2c
   87894:	e776      	b.n	87784 <_svfprintf_r+0x16e0>
   87896:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87898:	f7ff b95c 	b.w	86b54 <_svfprintf_r+0xab0>
   8789c:	9b07      	ldr	r3, [sp, #28]
   8789e:	18ec      	adds	r4, r5, r3
   878a0:	e6e4      	b.n	8766c <_svfprintf_r+0x15c8>
   878a2:	9a29      	ldr	r2, [sp, #164]	; 0xa4
   878a4:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 87a7c <_svfprintf_r+0x19d8>
   878a8:	f7ff b827 	b.w	868fa <_svfprintf_r+0x856>
   878ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
   878ae:	9326      	str	r3, [sp, #152]	; 0x98
   878b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   878b2:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   878b6:	7bd9      	ldrb	r1, [r3, #15]
   878b8:	465b      	mov	r3, fp
   878ba:	428a      	cmp	r2, r1
   878bc:	d109      	bne.n	878d2 <_svfprintf_r+0x182e>
   878be:	2030      	movs	r0, #48	; 0x30
   878c0:	f803 0c01 	strb.w	r0, [r3, #-1]
   878c4:	9b26      	ldr	r3, [sp, #152]	; 0x98
   878c6:	1e5a      	subs	r2, r3, #1
   878c8:	9226      	str	r2, [sp, #152]	; 0x98
   878ca:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   878ce:	4291      	cmp	r1, r2
   878d0:	d0f6      	beq.n	878c0 <_svfprintf_r+0x181c>
   878d2:	2a39      	cmp	r2, #57	; 0x39
   878d4:	bf0b      	itete	eq
   878d6:	9a0b      	ldreq	r2, [sp, #44]	; 0x2c
   878d8:	3201      	addne	r2, #1
   878da:	7a92      	ldrbeq	r2, [r2, #10]
   878dc:	b2d2      	uxtbne	r2, r2
   878de:	f803 2c01 	strb.w	r2, [r3, #-1]
   878e2:	e7c5      	b.n	87870 <_svfprintf_r+0x17cc>
   878e4:	980a      	ldr	r0, [sp, #40]	; 0x28
   878e6:	1c59      	adds	r1, r3, #1
   878e8:	f001 faae 	bl	88e48 <_malloc_r>
   878ec:	4605      	mov	r5, r0
   878ee:	2800      	cmp	r0, #0
   878f0:	f000 8117 	beq.w	87b22 <_svfprintf_r+0x1a7e>
   878f4:	900d      	str	r0, [sp, #52]	; 0x34
   878f6:	e734      	b.n	87762 <_svfprintf_r+0x16be>
   878f8:	2102      	movs	r1, #2
   878fa:	9100      	str	r1, [sp, #0]
   878fc:	9907      	ldr	r1, [sp, #28]
   878fe:	465a      	mov	r2, fp
   87900:	1c4c      	adds	r4, r1, #1
   87902:	a926      	add	r1, sp, #152	; 0x98
   87904:	9104      	str	r1, [sp, #16]
   87906:	a923      	add	r1, sp, #140	; 0x8c
   87908:	9103      	str	r1, [sp, #12]
   8790a:	a922      	add	r1, sp, #136	; 0x88
   8790c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   8790e:	980a      	ldr	r0, [sp, #40]	; 0x28
   87910:	9401      	str	r4, [sp, #4]
   87912:	9102      	str	r1, [sp, #8]
   87914:	f000 f9c0 	bl	87c98 <_dtoa_r>
   87918:	4605      	mov	r5, r0
   8791a:	46b9      	mov	r9, r7
   8791c:	442c      	add	r4, r5
   8791e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   87920:	e6a4      	b.n	8766c <_svfprintf_r+0x15c8>
   87922:	2330      	movs	r3, #48	; 0x30
   87924:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   87928:	2378      	movs	r3, #120	; 0x78
   8792a:	e70f      	b.n	8774c <_svfprintf_r+0x16a8>
   8792c:	4645      	mov	r5, r8
   8792e:	4688      	mov	r8, r1
   87930:	3301      	adds	r3, #1
   87932:	4432      	add	r2, r6
   87934:	2b07      	cmp	r3, #7
   87936:	e9cd 3229 	strd	r3, r2, [sp, #164]	; 0xa4
   8793a:	f8c8 9000 	str.w	r9, [r8]
   8793e:	f8c8 6004 	str.w	r6, [r8, #4]
   87942:	f77f acb5 	ble.w	872b0 <_svfprintf_r+0x120c>
   87946:	990c      	ldr	r1, [sp, #48]	; 0x30
   87948:	980a      	ldr	r0, [sp, #40]	; 0x28
   8794a:	aa28      	add	r2, sp, #160	; 0xa0
   8794c:	f002 f96a 	bl	89c24 <__ssprint_r>
   87950:	2800      	cmp	r0, #0
   87952:	f47e ad0a 	bne.w	8636a <_svfprintf_r+0x2c6>
   87956:	e9dd 3229 	ldrd	r3, r2, [sp, #164]	; 0xa4
   8795a:	f10d 08ac 	add.w	r8, sp, #172	; 0xac
   8795e:	e4a9      	b.n	872b4 <_svfprintf_r+0x1210>
   87960:	9b07      	ldr	r3, [sp, #28]
   87962:	2b00      	cmp	r3, #0
   87964:	bf08      	it	eq
   87966:	2301      	moveq	r3, #1
   87968:	9307      	str	r3, [sp, #28]
   8796a:	f447 7380 	orr.w	r3, r7, #256	; 0x100
   8796e:	930f      	str	r3, [sp, #60]	; 0x3c
   87970:	9b15      	ldr	r3, [sp, #84]	; 0x54
   87972:	2b00      	cmp	r3, #0
   87974:	f2c0 80b6 	blt.w	87ae4 <_svfprintf_r+0x1a40>
   87978:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
   8797c:	900d      	str	r0, [sp, #52]	; 0x34
   8797e:	930b      	str	r3, [sp, #44]	; 0x2c
   87980:	901d      	str	r0, [sp, #116]	; 0x74
   87982:	f7ff ba73 	b.w	86e6c <_svfprintf_r+0xdc8>
   87986:	9119      	str	r1, [sp, #100]	; 0x64
   87988:	9210      	str	r2, [sp, #64]	; 0x40
   8798a:	9013      	str	r0, [sp, #76]	; 0x4c
   8798c:	940f      	str	r4, [sp, #60]	; 0x3c
   8798e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   87990:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   87992:	991c      	ldr	r1, [sp, #112]	; 0x70
   87994:	4413      	add	r3, r2
   87996:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   87998:	fb01 2303 	mla	r3, r1, r3, r2
   8799c:	930b      	str	r3, [sp, #44]	; 0x2c
   8799e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   879a2:	9306      	str	r3, [sp, #24]
   879a4:	f7ff bae9 	b.w	86f7a <_svfprintf_r+0xed6>
   879a8:	9b16      	ldr	r3, [sp, #88]	; 0x58
   879aa:	2666      	movs	r6, #102	; 0x66
   879ac:	18d3      	adds	r3, r2, r3
   879ae:	4419      	add	r1, r3
   879b0:	910b      	str	r1, [sp, #44]	; 0x2c
   879b2:	e67e      	b.n	876b2 <_svfprintf_r+0x160e>
   879b4:	2300      	movs	r3, #0
   879b6:	930d      	str	r3, [sp, #52]	; 0x34
   879b8:	e764      	b.n	87884 <_svfprintf_r+0x17e0>
   879ba:	aa22      	add	r2, sp, #136	; 0x88
   879bc:	4658      	mov	r0, fp
   879be:	990b      	ldr	r1, [sp, #44]	; 0x2c
   879c0:	f002 f8e6 	bl	89b90 <frexp>
   879c4:	2200      	movs	r2, #0
   879c6:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
   879ca:	f004 fc39 	bl	8c240 <__aeabi_dmul>
   879ce:	4602      	mov	r2, r0
   879d0:	460b      	mov	r3, r1
   879d2:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   879d6:	2200      	movs	r2, #0
   879d8:	2300      	movs	r3, #0
   879da:	f004 fe99 	bl	8c710 <__aeabi_dcmpeq>
   879de:	b108      	cbz	r0, 879e4 <_svfprintf_r+0x1940>
   879e0:	2301      	movs	r3, #1
   879e2:	9322      	str	r3, [sp, #136]	; 0x88
   879e4:	4b26      	ldr	r3, [pc, #152]	; (87a80 <_svfprintf_r+0x19dc>)
   879e6:	930b      	str	r3, [sp, #44]	; 0x2c
   879e8:	e6e9      	b.n	877be <_svfprintf_r+0x171a>
   879ea:	2667      	movs	r6, #103	; 0x67
   879ec:	e5ed      	b.n	875ca <_svfprintf_r+0x1526>
   879ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
   879f0:	930b      	str	r3, [sp, #44]	; 0x2c
   879f2:	e5e2      	b.n	875ba <_svfprintf_r+0x1516>
   879f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
   879f6:	2003      	movs	r0, #3
   879f8:	2b00      	cmp	r3, #0
   879fa:	bfb8      	it	lt
   879fc:	222d      	movlt	r2, #45	; 0x2d
   879fe:	f04f 0300 	mov.w	r3, #0
   87a02:	bfa8      	it	ge
   87a04:	f89d 2083 	ldrbge.w	r2, [sp, #131]	; 0x83
   87a08:	4619      	mov	r1, r3
   87a0a:	930d      	str	r3, [sp, #52]	; 0x34
   87a0c:	4d1d      	ldr	r5, [pc, #116]	; (87a84 <_svfprintf_r+0x19e0>)
   87a0e:	4b1e      	ldr	r3, [pc, #120]	; (87a88 <_svfprintf_r+0x19e4>)
   87a10:	bfb8      	it	lt
   87a12:	f88d 2083 	strblt.w	r2, [sp, #131]	; 0x83
   87a16:	f027 0780 	bic.w	r7, r7, #128	; 0x80
   87a1a:	9006      	str	r0, [sp, #24]
   87a1c:	f7fe bd7f 	b.w	8651e <_svfprintf_r+0x47a>
   87a20:	2900      	cmp	r1, #0
   87a22:	d144      	bne.n	87aae <_svfprintf_r+0x1a0a>
   87a24:	2230      	movs	r2, #48	; 0x30
   87a26:	f88d 2092 	strb.w	r2, [sp, #146]	; 0x92
   87a2a:	f10d 0293 	add.w	r2, sp, #147	; 0x93
   87a2e:	3330      	adds	r3, #48	; 0x30
   87a30:	f802 3b01 	strb.w	r3, [r2], #1
   87a34:	ab24      	add	r3, sp, #144	; 0x90
   87a36:	1ad3      	subs	r3, r2, r3
   87a38:	931a      	str	r3, [sp, #104]	; 0x68
   87a3a:	f7ff ba87 	b.w	86f4c <_svfprintf_r+0xea8>
   87a3e:	f106 020f 	add.w	r2, r6, #15
   87a42:	2101      	movs	r1, #1
   87a44:	b2d2      	uxtb	r2, r2
   87a46:	f7ff ba41 	b.w	86ecc <_svfprintf_r+0xe28>
   87a4a:	f1c3 0301 	rsb	r3, r3, #1
   87a4e:	441a      	add	r2, r3
   87a50:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   87a54:	2667      	movs	r6, #103	; 0x67
   87a56:	920b      	str	r2, [sp, #44]	; 0x2c
   87a58:	9306      	str	r3, [sp, #24]
   87a5a:	e5ba      	b.n	875d2 <_svfprintf_r+0x152e>
   87a5c:	f019 0f01 	tst.w	r9, #1
   87a60:	f43f aa7f 	beq.w	86f62 <_svfprintf_r+0xebe>
   87a64:	f7ff ba79 	b.w	86f5a <_svfprintf_r+0xeb6>
   87a68:	9829      	ldr	r0, [sp, #164]	; 0xa4
   87a6a:	f7ff bb7f 	b.w	8716c <_svfprintf_r+0x10c8>
   87a6e:	bf00      	nop
   87a70:	0008cb80 	.word	0x0008cb80
   87a74:	40300000 	.word	0x40300000
   87a78:	3fe00000 	.word	0x3fe00000
   87a7c:	0008cbb0 	.word	0x0008cbb0
   87a80:	0008cb6c 	.word	0x0008cb6c
   87a84:	0008cb64 	.word	0x0008cb64
   87a88:	0008cb68 	.word	0x0008cb68
   87a8c:	4658      	mov	r0, fp
   87a8e:	2200      	movs	r2, #0
   87a90:	2300      	movs	r3, #0
   87a92:	990b      	ldr	r1, [sp, #44]	; 0x2c
   87a94:	f004 fe3c 	bl	8c710 <__aeabi_dcmpeq>
   87a98:	2800      	cmp	r0, #0
   87a9a:	f47f ade1 	bne.w	87660 <_svfprintf_r+0x15bc>
   87a9e:	9b07      	ldr	r3, [sp, #28]
   87aa0:	f1c3 0301 	rsb	r3, r3, #1
   87aa4:	9322      	str	r3, [sp, #136]	; 0x88
   87aa6:	e5dc      	b.n	87662 <_svfprintf_r+0x15be>
   87aa8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 87b44 <_svfprintf_r+0x1aa0>
   87aac:	e4ad      	b.n	8740a <_svfprintf_r+0x1366>
   87aae:	f10d 0292 	add.w	r2, sp, #146	; 0x92
   87ab2:	e7bc      	b.n	87a2e <_svfprintf_r+0x198a>
   87ab4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87ab6:	f8df 908c 	ldr.w	r9, [pc, #140]	; 87b44 <_svfprintf_r+0x1aa0>
   87aba:	e428      	b.n	8730e <_svfprintf_r+0x126a>
   87abc:	9a07      	ldr	r2, [sp, #28]
   87abe:	f009 0901 	and.w	r9, r9, #1
   87ac2:	ea59 0302 	orrs.w	r3, r9, r2
   87ac6:	d104      	bne.n	87ad2 <_svfprintf_r+0x1a2e>
   87ac8:	2301      	movs	r3, #1
   87aca:	2666      	movs	r6, #102	; 0x66
   87acc:	9306      	str	r3, [sp, #24]
   87ace:	930b      	str	r3, [sp, #44]	; 0x2c
   87ad0:	e57f      	b.n	875d2 <_svfprintf_r+0x152e>
   87ad2:	9b16      	ldr	r3, [sp, #88]	; 0x58
   87ad4:	2666      	movs	r6, #102	; 0x66
   87ad6:	3301      	adds	r3, #1
   87ad8:	441a      	add	r2, r3
   87ada:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   87ade:	920b      	str	r2, [sp, #44]	; 0x2c
   87ae0:	9306      	str	r3, [sp, #24]
   87ae2:	e576      	b.n	875d2 <_svfprintf_r+0x152e>
   87ae4:	900d      	str	r0, [sp, #52]	; 0x34
   87ae6:	e6cd      	b.n	87884 <_svfprintf_r+0x17e0>
   87ae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87aea:	f89a 6001 	ldrb.w	r6, [sl, #1]
   87aee:	4692      	mov	sl, r2
   87af0:	f853 2b04 	ldr.w	r2, [r3], #4
   87af4:	930e      	str	r3, [sp, #56]	; 0x38
   87af6:	ea42 73e2 	orr.w	r3, r2, r2, asr #31
   87afa:	9307      	str	r3, [sp, #28]
   87afc:	f7fe bb21 	b.w	86142 <_svfprintf_r+0x9e>
   87b00:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   87b02:	f8df 9040 	ldr.w	r9, [pc, #64]	; 87b44 <_svfprintf_r+0x1aa0>
   87b06:	e4b1      	b.n	8746c <_svfprintf_r+0x13c8>
   87b08:	9c07      	ldr	r4, [sp, #28]
   87b0a:	e706      	b.n	8791a <_svfprintf_r+0x1876>
   87b0c:	2300      	movs	r3, #0
   87b0e:	930f      	str	r3, [sp, #60]	; 0x3c
   87b10:	9313      	str	r3, [sp, #76]	; 0x4c
   87b12:	e73c      	b.n	8798e <_svfprintf_r+0x18ea>
   87b14:	f8df 902c 	ldr.w	r9, [pc, #44]	; 87b44 <_svfprintf_r+0x1aa0>
   87b18:	e70a      	b.n	87930 <_svfprintf_r+0x188c>
   87b1a:	2302      	movs	r3, #2
   87b1c:	931a      	str	r3, [sp, #104]	; 0x68
   87b1e:	f7ff ba15 	b.w	86f4c <_svfprintf_r+0xea8>
   87b22:	990c      	ldr	r1, [sp, #48]	; 0x30
   87b24:	898b      	ldrh	r3, [r1, #12]
   87b26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
   87b2a:	4613      	mov	r3, r2
   87b2c:	818a      	strh	r2, [r1, #12]
   87b2e:	f7fe bc24 	b.w	8637a <_svfprintf_r+0x2d6>
   87b32:	f04f 32ff 	mov.w	r2, #4294967295
   87b36:	230c      	movs	r3, #12
   87b38:	9208      	str	r2, [sp, #32]
   87b3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   87b3c:	6013      	str	r3, [r2, #0]
   87b3e:	f7fe bc23 	b.w	86388 <_svfprintf_r+0x2e4>
   87b42:	bf00      	nop
   87b44:	0008cbb0 	.word	0x0008cbb0

00087b48 <register_fini>:
   87b48:	4b02      	ldr	r3, [pc, #8]	; (87b54 <register_fini+0xc>)
   87b4a:	b113      	cbz	r3, 87b52 <register_fini+0xa>
   87b4c:	4802      	ldr	r0, [pc, #8]	; (87b58 <register_fini+0x10>)
   87b4e:	f000 b805 	b.w	87b5c <atexit>
   87b52:	4770      	bx	lr
   87b54:	00000000 	.word	0x00000000
   87b58:	00088b65 	.word	0x00088b65

00087b5c <atexit>:
   87b5c:	2300      	movs	r3, #0
   87b5e:	4601      	mov	r1, r0
   87b60:	461a      	mov	r2, r3
   87b62:	4618      	mov	r0, r3
   87b64:	f002 b8dc 	b.w	89d20 <__register_exitproc>

00087b68 <quorem>:
   87b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87b6c:	6903      	ldr	r3, [r0, #16]
   87b6e:	690c      	ldr	r4, [r1, #16]
   87b70:	b085      	sub	sp, #20
   87b72:	42a3      	cmp	r3, r4
   87b74:	f2c0 8089 	blt.w	87c8a <quorem+0x122>
   87b78:	3c01      	subs	r4, #1
   87b7a:	f101 0514 	add.w	r5, r1, #20
   87b7e:	00a3      	lsls	r3, r4, #2
   87b80:	f100 0814 	add.w	r8, r0, #20
   87b84:	9301      	str	r3, [sp, #4]
   87b86:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
   87b8a:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   87b8e:	3301      	adds	r3, #1
   87b90:	468a      	mov	sl, r1
   87b92:	429a      	cmp	r2, r3
   87b94:	eb08 0184 	add.w	r1, r8, r4, lsl #2
   87b98:	4681      	mov	r9, r0
   87b9a:	fbb2 f6f3 	udiv	r6, r2, r3
   87b9e:	eb05 0784 	add.w	r7, r5, r4, lsl #2
   87ba2:	9102      	str	r1, [sp, #8]
   87ba4:	d33a      	bcc.n	87c1c <quorem+0xb4>
   87ba6:	2100      	movs	r1, #0
   87ba8:	46ae      	mov	lr, r5
   87baa:	4640      	mov	r0, r8
   87bac:	460a      	mov	r2, r1
   87bae:	46a3      	mov	fp, r4
   87bb0:	9503      	str	r5, [sp, #12]
   87bb2:	f85e 5b04 	ldr.w	r5, [lr], #4
   87bb6:	6804      	ldr	r4, [r0, #0]
   87bb8:	b2ab      	uxth	r3, r5
   87bba:	fb06 1303 	mla	r3, r6, r3, r1
   87bbe:	0c2d      	lsrs	r5, r5, #16
   87bc0:	0c19      	lsrs	r1, r3, #16
   87bc2:	fb06 1105 	mla	r1, r6, r5, r1
   87bc6:	b29b      	uxth	r3, r3
   87bc8:	1ad2      	subs	r2, r2, r3
   87bca:	fa1f fc84 	uxth.w	ip, r4
   87bce:	4494      	add	ip, r2
   87bd0:	b28a      	uxth	r2, r1
   87bd2:	ebc2 4214 	rsb	r2, r2, r4, lsr #16
   87bd6:	eb02 422c 	add.w	r2, r2, ip, asr #16
   87bda:	fa1f fc8c 	uxth.w	ip, ip
   87bde:	ea4c 4302 	orr.w	r3, ip, r2, lsl #16
   87be2:	4577      	cmp	r7, lr
   87be4:	f840 3b04 	str.w	r3, [r0], #4
   87be8:	ea4f 4111 	mov.w	r1, r1, lsr #16
   87bec:	ea4f 4222 	mov.w	r2, r2, asr #16
   87bf0:	d2df      	bcs.n	87bb2 <quorem+0x4a>
   87bf2:	9b01      	ldr	r3, [sp, #4]
   87bf4:	465c      	mov	r4, fp
   87bf6:	f858 3003 	ldr.w	r3, [r8, r3]
   87bfa:	9d03      	ldr	r5, [sp, #12]
   87bfc:	b973      	cbnz	r3, 87c1c <quorem+0xb4>
   87bfe:	9b02      	ldr	r3, [sp, #8]
   87c00:	3b04      	subs	r3, #4
   87c02:	4598      	cmp	r8, r3
   87c04:	d304      	bcc.n	87c10 <quorem+0xa8>
   87c06:	e007      	b.n	87c18 <quorem+0xb0>
   87c08:	4598      	cmp	r8, r3
   87c0a:	f104 34ff 	add.w	r4, r4, #4294967295
   87c0e:	d203      	bcs.n	87c18 <quorem+0xb0>
   87c10:	f853 2904 	ldr.w	r2, [r3], #-4
   87c14:	2a00      	cmp	r2, #0
   87c16:	d0f7      	beq.n	87c08 <quorem+0xa0>
   87c18:	f8c9 4010 	str.w	r4, [r9, #16]
   87c1c:	4651      	mov	r1, sl
   87c1e:	4648      	mov	r0, r9
   87c20:	f001 fe8e 	bl	89940 <__mcmp>
   87c24:	2800      	cmp	r0, #0
   87c26:	db2c      	blt.n	87c82 <quorem+0x11a>
   87c28:	4640      	mov	r0, r8
   87c2a:	2300      	movs	r3, #0
   87c2c:	3601      	adds	r6, #1
   87c2e:	f855 1b04 	ldr.w	r1, [r5], #4
   87c32:	f8d0 c000 	ldr.w	ip, [r0]
   87c36:	b28a      	uxth	r2, r1
   87c38:	1a9a      	subs	r2, r3, r2
   87c3a:	fa1f fe8c 	uxth.w	lr, ip
   87c3e:	0c0b      	lsrs	r3, r1, #16
   87c40:	4472      	add	r2, lr
   87c42:	ebc3 431c 	rsb	r3, r3, ip, lsr #16
   87c46:	eb03 4322 	add.w	r3, r3, r2, asr #16
   87c4a:	b292      	uxth	r2, r2
   87c4c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   87c50:	42af      	cmp	r7, r5
   87c52:	f840 2b04 	str.w	r2, [r0], #4
   87c56:	ea4f 4323 	mov.w	r3, r3, asr #16
   87c5a:	d2e8      	bcs.n	87c2e <quorem+0xc6>
   87c5c:	f858 2024 	ldr.w	r2, [r8, r4, lsl #2]
   87c60:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   87c64:	b96a      	cbnz	r2, 87c82 <quorem+0x11a>
   87c66:	3b04      	subs	r3, #4
   87c68:	4598      	cmp	r8, r3
   87c6a:	d304      	bcc.n	87c76 <quorem+0x10e>
   87c6c:	e007      	b.n	87c7e <quorem+0x116>
   87c6e:	4598      	cmp	r8, r3
   87c70:	f104 34ff 	add.w	r4, r4, #4294967295
   87c74:	d203      	bcs.n	87c7e <quorem+0x116>
   87c76:	f853 2904 	ldr.w	r2, [r3], #-4
   87c7a:	2a00      	cmp	r2, #0
   87c7c:	d0f7      	beq.n	87c6e <quorem+0x106>
   87c7e:	f8c9 4010 	str.w	r4, [r9, #16]
   87c82:	4630      	mov	r0, r6
   87c84:	b005      	add	sp, #20
   87c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87c8a:	2000      	movs	r0, #0
   87c8c:	b005      	add	sp, #20
   87c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87c92:	bf00      	nop
   87c94:	0000      	movs	r0, r0
   87c96:	0000      	movs	r0, r0

00087c98 <_dtoa_r>:
   87c98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87c9c:	4690      	mov	r8, r2
   87c9e:	4699      	mov	r9, r3
   87ca0:	6c01      	ldr	r1, [r0, #64]	; 0x40
   87ca2:	b099      	sub	sp, #100	; 0x64
   87ca4:	4604      	mov	r4, r0
   87ca6:	e9cd 8904 	strd	r8, r9, [sp, #16]
   87caa:	9d25      	ldr	r5, [sp, #148]	; 0x94
   87cac:	b141      	cbz	r1, 87cc0 <_dtoa_r+0x28>
   87cae:	2301      	movs	r3, #1
   87cb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
   87cb2:	4093      	lsls	r3, r2
   87cb4:	608b      	str	r3, [r1, #8]
   87cb6:	604a      	str	r2, [r1, #4]
   87cb8:	f001 fbec 	bl	89494 <_Bfree>
   87cbc:	2300      	movs	r3, #0
   87cbe:	6423      	str	r3, [r4, #64]	; 0x40
   87cc0:	f1b9 0a00 	subs.w	sl, r9, #0
   87cc4:	bfb4      	ite	lt
   87cc6:	2301      	movlt	r3, #1
   87cc8:	2300      	movge	r3, #0
   87cca:	602b      	str	r3, [r5, #0]
   87ccc:	4b76      	ldr	r3, [pc, #472]	; (87ea8 <_dtoa_r+0x210>)
   87cce:	bfbc      	itt	lt
   87cd0:	f02a 4a00 	biclt.w	sl, sl, #2147483648	; 0x80000000
   87cd4:	f8cd a014 	strlt.w	sl, [sp, #20]
   87cd8:	ea33 030a 	bics.w	r3, r3, sl
   87cdc:	f000 80aa 	beq.w	87e34 <_dtoa_r+0x19c>
   87ce0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   87ce4:	4610      	mov	r0, r2
   87ce6:	4619      	mov	r1, r3
   87ce8:	2200      	movs	r2, #0
   87cea:	2300      	movs	r3, #0
   87cec:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
   87cf0:	f004 fd0e 	bl	8c710 <__aeabi_dcmpeq>
   87cf4:	4607      	mov	r7, r0
   87cf6:	b170      	cbz	r0, 87d16 <_dtoa_r+0x7e>
   87cf8:	2301      	movs	r3, #1
   87cfa:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87cfc:	6013      	str	r3, [r2, #0]
   87cfe:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87d00:	2b00      	cmp	r3, #0
   87d02:	f000 82e6 	beq.w	882d2 <_dtoa_r+0x63a>
   87d06:	4869      	ldr	r0, [pc, #420]	; (87eac <_dtoa_r+0x214>)
   87d08:	6018      	str	r0, [r3, #0]
   87d0a:	1e43      	subs	r3, r0, #1
   87d0c:	9303      	str	r3, [sp, #12]
   87d0e:	9803      	ldr	r0, [sp, #12]
   87d10:	b019      	add	sp, #100	; 0x64
   87d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87d16:	ab16      	add	r3, sp, #88	; 0x58
   87d18:	9301      	str	r3, [sp, #4]
   87d1a:	ab17      	add	r3, sp, #92	; 0x5c
   87d1c:	9300      	str	r3, [sp, #0]
   87d1e:	4620      	mov	r0, r4
   87d20:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   87d24:	f001 fed2 	bl	89acc <__d2b>
   87d28:	ea5f 561a 	movs.w	r6, sl, lsr #20
   87d2c:	4605      	mov	r5, r0
   87d2e:	f040 8097 	bne.w	87e60 <_dtoa_r+0x1c8>
   87d32:	e9dd 7616 	ldrd	r7, r6, [sp, #88]	; 0x58
   87d36:	443e      	add	r6, r7
   87d38:	f206 4032 	addw	r0, r6, #1074	; 0x432
   87d3c:	2820      	cmp	r0, #32
   87d3e:	f340 83b7 	ble.w	884b0 <_dtoa_r+0x818>
   87d42:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
   87d46:	fa0a fa00 	lsl.w	sl, sl, r0
   87d4a:	f206 4012 	addw	r0, r6, #1042	; 0x412
   87d4e:	fa28 f000 	lsr.w	r0, r8, r0
   87d52:	ea4a 0000 	orr.w	r0, sl, r0
   87d56:	f004 f9f9 	bl	8c14c <__aeabi_ui2d>
   87d5a:	2301      	movs	r3, #1
   87d5c:	3e01      	subs	r6, #1
   87d5e:	930f      	str	r3, [sp, #60]	; 0x3c
   87d60:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   87d64:	2200      	movs	r2, #0
   87d66:	4b52      	ldr	r3, [pc, #328]	; (87eb0 <_dtoa_r+0x218>)
   87d68:	f004 f8b2 	bl	8bed0 <__aeabi_dsub>
   87d6c:	a348      	add	r3, pc, #288	; (adr r3, 87e90 <_dtoa_r+0x1f8>)
   87d6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   87d72:	f004 fa65 	bl	8c240 <__aeabi_dmul>
   87d76:	a348      	add	r3, pc, #288	; (adr r3, 87e98 <_dtoa_r+0x200>)
   87d78:	e9d3 2300 	ldrd	r2, r3, [r3]
   87d7c:	f004 f8aa 	bl	8bed4 <__adddf3>
   87d80:	4680      	mov	r8, r0
   87d82:	4630      	mov	r0, r6
   87d84:	4689      	mov	r9, r1
   87d86:	f004 f9f1 	bl	8c16c <__aeabi_i2d>
   87d8a:	a345      	add	r3, pc, #276	; (adr r3, 87ea0 <_dtoa_r+0x208>)
   87d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
   87d90:	f004 fa56 	bl	8c240 <__aeabi_dmul>
   87d94:	4602      	mov	r2, r0
   87d96:	460b      	mov	r3, r1
   87d98:	4640      	mov	r0, r8
   87d9a:	4649      	mov	r1, r9
   87d9c:	f004 f89a 	bl	8bed4 <__adddf3>
   87da0:	4680      	mov	r8, r0
   87da2:	4689      	mov	r9, r1
   87da4:	f004 fcfc 	bl	8c7a0 <__aeabi_d2iz>
   87da8:	2200      	movs	r2, #0
   87daa:	4683      	mov	fp, r0
   87dac:	2300      	movs	r3, #0
   87dae:	4640      	mov	r0, r8
   87db0:	4649      	mov	r1, r9
   87db2:	f004 fcb7 	bl	8c724 <__aeabi_dcmplt>
   87db6:	2800      	cmp	r0, #0
   87db8:	f040 827e 	bne.w	882b8 <_dtoa_r+0x620>
   87dbc:	f1bb 0f16 	cmp.w	fp, #22
   87dc0:	f200 826d 	bhi.w	8829e <_dtoa_r+0x606>
   87dc4:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   87dc8:	4b3a      	ldr	r3, [pc, #232]	; (87eb4 <_dtoa_r+0x21c>)
   87dca:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
   87dce:	e9d3 2300 	ldrd	r2, r3, [r3]
   87dd2:	f004 fca7 	bl	8c724 <__aeabi_dcmplt>
   87dd6:	2800      	cmp	r0, #0
   87dd8:	d072      	beq.n	87ec0 <_dtoa_r+0x228>
   87dda:	2300      	movs	r3, #0
   87ddc:	1bbe      	subs	r6, r7, r6
   87dde:	930e      	str	r3, [sp, #56]	; 0x38
   87de0:	1e73      	subs	r3, r6, #1
   87de2:	f10b 3bff 	add.w	fp, fp, #4294967295
   87de6:	9306      	str	r3, [sp, #24]
   87de8:	f100 8260 	bmi.w	882ac <_dtoa_r+0x614>
   87dec:	2300      	movs	r3, #0
   87dee:	9309      	str	r3, [sp, #36]	; 0x24
   87df0:	f1bb 0f00 	cmp.w	fp, #0
   87df4:	da6b      	bge.n	87ece <_dtoa_r+0x236>
   87df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   87df8:	f8cd b01c 	str.w	fp, [sp, #28]
   87dfc:	eba3 030b 	sub.w	r3, r3, fp
   87e00:	9309      	str	r3, [sp, #36]	; 0x24
   87e02:	f1cb 0300 	rsb	r3, fp, #0
   87e06:	930d      	str	r3, [sp, #52]	; 0x34
   87e08:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87e0a:	f04f 0b00 	mov.w	fp, #0
   87e0e:	2b09      	cmp	r3, #9
   87e10:	d866      	bhi.n	87ee0 <_dtoa_r+0x248>
   87e12:	2b05      	cmp	r3, #5
   87e14:	f340 834a 	ble.w	884ac <_dtoa_r+0x814>
   87e18:	2600      	movs	r6, #0
   87e1a:	3b04      	subs	r3, #4
   87e1c:	9322      	str	r3, [sp, #136]	; 0x88
   87e1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87e20:	3b02      	subs	r3, #2
   87e22:	2b03      	cmp	r3, #3
   87e24:	f200 866c 	bhi.w	88b00 <_dtoa_r+0xe68>
   87e28:	e8df f013 	tbh	[pc, r3, lsl #1]
   87e2c:	045e0461 	.word	0x045e0461
   87e30:	04380455 	.word	0x04380455
   87e34:	f242 730f 	movw	r3, #9999	; 0x270f
   87e38:	9a24      	ldr	r2, [sp, #144]	; 0x90
   87e3a:	f3ca 0a13 	ubfx	sl, sl, #0, #20
   87e3e:	6013      	str	r3, [r2, #0]
   87e40:	ea5a 0308 	orrs.w	r3, sl, r8
   87e44:	d11a      	bne.n	87e7c <_dtoa_r+0x1e4>
   87e46:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87e48:	2b00      	cmp	r3, #0
   87e4a:	f000 8668 	beq.w	88b1e <_dtoa_r+0xe86>
   87e4e:	4b1a      	ldr	r3, [pc, #104]	; (87eb8 <_dtoa_r+0x220>)
   87e50:	9303      	str	r3, [sp, #12]
   87e52:	3308      	adds	r3, #8
   87e54:	9a26      	ldr	r2, [sp, #152]	; 0x98
   87e56:	9803      	ldr	r0, [sp, #12]
   87e58:	6013      	str	r3, [r2, #0]
   87e5a:	b019      	add	sp, #100	; 0x64
   87e5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87e60:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	; 0x28
   87e64:	f3c2 0313 	ubfx	r3, r2, #0, #20
   87e68:	4608      	mov	r0, r1
   87e6a:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   87e6e:	970f      	str	r7, [sp, #60]	; 0x3c
   87e70:	f2a6 36ff 	subw	r6, r6, #1023	; 0x3ff
   87e74:	9f16      	ldr	r7, [sp, #88]	; 0x58
   87e76:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   87e7a:	e773      	b.n	87d64 <_dtoa_r+0xcc>
   87e7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   87e7e:	2b00      	cmp	r3, #0
   87e80:	f040 83ef 	bne.w	88662 <_dtoa_r+0x9ca>
   87e84:	4b0d      	ldr	r3, [pc, #52]	; (87ebc <_dtoa_r+0x224>)
   87e86:	9303      	str	r3, [sp, #12]
   87e88:	e741      	b.n	87d0e <_dtoa_r+0x76>
   87e8a:	bf00      	nop
   87e8c:	f3af 8000 	nop.w
   87e90:	636f4361 	.word	0x636f4361
   87e94:	3fd287a7 	.word	0x3fd287a7
   87e98:	8b60c8b3 	.word	0x8b60c8b3
   87e9c:	3fc68a28 	.word	0x3fc68a28
   87ea0:	509f79fb 	.word	0x509f79fb
   87ea4:	3fd34413 	.word	0x3fd34413
   87ea8:	7ff00000 	.word	0x7ff00000
   87eac:	0008cb9d 	.word	0x0008cb9d
   87eb0:	3ff80000 	.word	0x3ff80000
   87eb4:	0008cd10 	.word	0x0008cd10
   87eb8:	0008cbc4 	.word	0x0008cbc4
   87ebc:	0008cbc0 	.word	0x0008cbc0
   87ec0:	1bbe      	subs	r6, r7, r6
   87ec2:	1e73      	subs	r3, r6, #1
   87ec4:	9306      	str	r3, [sp, #24]
   87ec6:	f100 848a 	bmi.w	887de <_dtoa_r+0xb46>
   87eca:	900e      	str	r0, [sp, #56]	; 0x38
   87ecc:	9009      	str	r0, [sp, #36]	; 0x24
   87ece:	9b06      	ldr	r3, [sp, #24]
   87ed0:	445b      	add	r3, fp
   87ed2:	e9cd 3b06 	strd	r3, fp, [sp, #24]
   87ed6:	2300      	movs	r3, #0
   87ed8:	930d      	str	r3, [sp, #52]	; 0x34
   87eda:	9b22      	ldr	r3, [sp, #136]	; 0x88
   87edc:	2b09      	cmp	r3, #9
   87ede:	d998      	bls.n	87e12 <_dtoa_r+0x17a>
   87ee0:	2300      	movs	r3, #0
   87ee2:	9322      	str	r3, [sp, #136]	; 0x88
   87ee4:	f04f 33ff 	mov.w	r3, #4294967295
   87ee8:	2601      	movs	r6, #1
   87eea:	9308      	str	r3, [sp, #32]
   87eec:	2300      	movs	r3, #0
   87eee:	960c      	str	r6, [sp, #48]	; 0x30
   87ef0:	9323      	str	r3, [sp, #140]	; 0x8c
   87ef2:	2100      	movs	r1, #0
   87ef4:	9b08      	ldr	r3, [sp, #32]
   87ef6:	6461      	str	r1, [r4, #68]	; 0x44
   87ef8:	9312      	str	r3, [sp, #72]	; 0x48
   87efa:	4620      	mov	r0, r4
   87efc:	f001 faa4 	bl	89448 <_Balloc>
   87f00:	9003      	str	r0, [sp, #12]
   87f02:	2800      	cmp	r0, #0
   87f04:	f000 8604 	beq.w	88b10 <_dtoa_r+0xe78>
   87f08:	9b03      	ldr	r3, [sp, #12]
   87f0a:	6423      	str	r3, [r4, #64]	; 0x40
   87f0c:	9b08      	ldr	r3, [sp, #32]
   87f0e:	2b0e      	cmp	r3, #14
   87f10:	f200 8114 	bhi.w	8813c <_dtoa_r+0x4a4>
   87f14:	2e00      	cmp	r6, #0
   87f16:	f000 8111 	beq.w	8813c <_dtoa_r+0x4a4>
   87f1a:	9907      	ldr	r1, [sp, #28]
   87f1c:	2900      	cmp	r1, #0
   87f1e:	f340 8460 	ble.w	887e2 <_dtoa_r+0xb4a>
   87f22:	4baf      	ldr	r3, [pc, #700]	; (881e0 <_dtoa_r+0x548>)
   87f24:	f001 020f 	and.w	r2, r1, #15
   87f28:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87f2c:	460a      	mov	r2, r1
   87f2e:	e9d3 6700 	ldrd	r6, r7, [r3]
   87f32:	ea4f 1821 	mov.w	r8, r1, asr #4
   87f36:	05d1      	lsls	r1, r2, #23
   87f38:	f140 8417 	bpl.w	8876a <_dtoa_r+0xad2>
   87f3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   87f40:	4ba8      	ldr	r3, [pc, #672]	; (881e4 <_dtoa_r+0x54c>)
   87f42:	f04f 0a03 	mov.w	sl, #3
   87f46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   87f4a:	f004 faa3 	bl	8c494 <__aeabi_ddiv>
   87f4e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87f52:	f008 080f 	and.w	r8, r8, #15
   87f56:	f1b8 0f00 	cmp.w	r8, #0
   87f5a:	d013      	beq.n	87f84 <_dtoa_r+0x2ec>
   87f5c:	f8df 9284 	ldr.w	r9, [pc, #644]	; 881e4 <_dtoa_r+0x54c>
   87f60:	f018 0f01 	tst.w	r8, #1
   87f64:	d009      	beq.n	87f7a <_dtoa_r+0x2e2>
   87f66:	e9d9 2300 	ldrd	r2, r3, [r9]
   87f6a:	4630      	mov	r0, r6
   87f6c:	4639      	mov	r1, r7
   87f6e:	f004 f967 	bl	8c240 <__aeabi_dmul>
   87f72:	4606      	mov	r6, r0
   87f74:	460f      	mov	r7, r1
   87f76:	f10a 0a01 	add.w	sl, sl, #1
   87f7a:	ea5f 0868 	movs.w	r8, r8, asr #1
   87f7e:	f109 0908 	add.w	r9, r9, #8
   87f82:	d1ed      	bne.n	87f60 <_dtoa_r+0x2c8>
   87f84:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   87f88:	4632      	mov	r2, r6
   87f8a:	463b      	mov	r3, r7
   87f8c:	f004 fa82 	bl	8c494 <__aeabi_ddiv>
   87f90:	4680      	mov	r8, r0
   87f92:	4689      	mov	r9, r1
   87f94:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   87f96:	b143      	cbz	r3, 87faa <_dtoa_r+0x312>
   87f98:	2200      	movs	r2, #0
   87f9a:	4640      	mov	r0, r8
   87f9c:	4649      	mov	r1, r9
   87f9e:	4b92      	ldr	r3, [pc, #584]	; (881e8 <_dtoa_r+0x550>)
   87fa0:	f004 fbc0 	bl	8c724 <__aeabi_dcmplt>
   87fa4:	2800      	cmp	r0, #0
   87fa6:	f040 8535 	bne.w	88a14 <_dtoa_r+0xd7c>
   87faa:	4650      	mov	r0, sl
   87fac:	f004 f8de 	bl	8c16c <__aeabi_i2d>
   87fb0:	4642      	mov	r2, r8
   87fb2:	464b      	mov	r3, r9
   87fb4:	f004 f944 	bl	8c240 <__aeabi_dmul>
   87fb8:	4b8c      	ldr	r3, [pc, #560]	; (881ec <_dtoa_r+0x554>)
   87fba:	2200      	movs	r2, #0
   87fbc:	f003 ff8a 	bl	8bed4 <__adddf3>
   87fc0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   87fc4:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   87fc8:	9311      	str	r3, [sp, #68]	; 0x44
   87fca:	9b08      	ldr	r3, [sp, #32]
   87fcc:	2b00      	cmp	r3, #0
   87fce:	f000 8097 	beq.w	88100 <_dtoa_r+0x468>
   87fd2:	9b07      	ldr	r3, [sp, #28]
   87fd4:	9314      	str	r3, [sp, #80]	; 0x50
   87fd6:	9b08      	ldr	r3, [sp, #32]
   87fd8:	9313      	str	r3, [sp, #76]	; 0x4c
   87fda:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   87fdc:	2b00      	cmp	r3, #0
   87fde:	f000 84a9 	beq.w	88934 <_dtoa_r+0xc9c>
   87fe2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   87fe4:	4b7e      	ldr	r3, [pc, #504]	; (881e0 <_dtoa_r+0x548>)
   87fe6:	2000      	movs	r0, #0
   87fe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   87fec:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   87ff0:	497f      	ldr	r1, [pc, #508]	; (881f0 <_dtoa_r+0x558>)
   87ff2:	f004 fa4f 	bl	8c494 <__aeabi_ddiv>
   87ff6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   87ffa:	f003 ff69 	bl	8bed0 <__aeabi_dsub>
   87ffe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88002:	4649      	mov	r1, r9
   88004:	4640      	mov	r0, r8
   88006:	f004 fbcb 	bl	8c7a0 <__aeabi_d2iz>
   8800a:	4607      	mov	r7, r0
   8800c:	f004 f8ae 	bl	8c16c <__aeabi_i2d>
   88010:	4602      	mov	r2, r0
   88012:	460b      	mov	r3, r1
   88014:	4640      	mov	r0, r8
   88016:	4649      	mov	r1, r9
   88018:	f003 ff5a 	bl	8bed0 <__aeabi_dsub>
   8801c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   88020:	9e03      	ldr	r6, [sp, #12]
   88022:	3730      	adds	r7, #48	; 0x30
   88024:	f806 7b01 	strb.w	r7, [r6], #1
   88028:	4680      	mov	r8, r0
   8802a:	4689      	mov	r9, r1
   8802c:	f004 fb7a 	bl	8c724 <__aeabi_dcmplt>
   88030:	2800      	cmp	r0, #0
   88032:	f040 852e 	bne.w	88a92 <_dtoa_r+0xdfa>
   88036:	f8cd b054 	str.w	fp, [sp, #84]	; 0x54
   8803a:	2700      	movs	r7, #0
   8803c:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   88040:	9510      	str	r5, [sp, #64]	; 0x40
   88042:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   88044:	9413      	str	r4, [sp, #76]	; 0x4c
   88046:	e02a      	b.n	8809e <_dtoa_r+0x406>
   88048:	3701      	adds	r7, #1
   8804a:	42af      	cmp	r7, r5
   8804c:	f280 852e 	bge.w	88aac <_dtoa_r+0xe14>
   88050:	4650      	mov	r0, sl
   88052:	4659      	mov	r1, fp
   88054:	2200      	movs	r2, #0
   88056:	4b67      	ldr	r3, [pc, #412]	; (881f4 <_dtoa_r+0x55c>)
   88058:	f004 f8f2 	bl	8c240 <__aeabi_dmul>
   8805c:	2200      	movs	r2, #0
   8805e:	4b65      	ldr	r3, [pc, #404]	; (881f4 <_dtoa_r+0x55c>)
   88060:	4682      	mov	sl, r0
   88062:	468b      	mov	fp, r1
   88064:	4640      	mov	r0, r8
   88066:	4649      	mov	r1, r9
   88068:	f004 f8ea 	bl	8c240 <__aeabi_dmul>
   8806c:	4689      	mov	r9, r1
   8806e:	4680      	mov	r8, r0
   88070:	f004 fb96 	bl	8c7a0 <__aeabi_d2iz>
   88074:	4604      	mov	r4, r0
   88076:	f004 f879 	bl	8c16c <__aeabi_i2d>
   8807a:	4602      	mov	r2, r0
   8807c:	460b      	mov	r3, r1
   8807e:	4640      	mov	r0, r8
   88080:	4649      	mov	r1, r9
   88082:	f003 ff25 	bl	8bed0 <__aeabi_dsub>
   88086:	3430      	adds	r4, #48	; 0x30
   88088:	4652      	mov	r2, sl
   8808a:	465b      	mov	r3, fp
   8808c:	f806 4b01 	strb.w	r4, [r6], #1
   88090:	4680      	mov	r8, r0
   88092:	4689      	mov	r9, r1
   88094:	f004 fb46 	bl	8c724 <__aeabi_dcmplt>
   88098:	2800      	cmp	r0, #0
   8809a:	f040 84f8 	bne.w	88a8e <_dtoa_r+0xdf6>
   8809e:	4642      	mov	r2, r8
   880a0:	464b      	mov	r3, r9
   880a2:	2000      	movs	r0, #0
   880a4:	4950      	ldr	r1, [pc, #320]	; (881e8 <_dtoa_r+0x550>)
   880a6:	f003 ff13 	bl	8bed0 <__aeabi_dsub>
   880aa:	4652      	mov	r2, sl
   880ac:	465b      	mov	r3, fp
   880ae:	f004 fb39 	bl	8c724 <__aeabi_dcmplt>
   880b2:	2800      	cmp	r0, #0
   880b4:	d0c8      	beq.n	88048 <_dtoa_r+0x3b0>
   880b6:	e9dd 4313 	ldrd	r4, r3, [sp, #76]	; 0x4c
   880ba:	9d10      	ldr	r5, [sp, #64]	; 0x40
   880bc:	9a03      	ldr	r2, [sp, #12]
   880be:	9307      	str	r3, [sp, #28]
   880c0:	e002      	b.n	880c8 <_dtoa_r+0x430>
   880c2:	4296      	cmp	r6, r2
   880c4:	f000 84cd 	beq.w	88a62 <_dtoa_r+0xdca>
   880c8:	46b2      	mov	sl, r6
   880ca:	f816 3d01 	ldrb.w	r3, [r6, #-1]!
   880ce:	2b39      	cmp	r3, #57	; 0x39
   880d0:	d0f7      	beq.n	880c2 <_dtoa_r+0x42a>
   880d2:	3301      	adds	r3, #1
   880d4:	b2db      	uxtb	r3, r3
   880d6:	7033      	strb	r3, [r6, #0]
   880d8:	9b07      	ldr	r3, [sp, #28]
   880da:	3301      	adds	r3, #1
   880dc:	9307      	str	r3, [sp, #28]
   880de:	e1c8      	b.n	88472 <_dtoa_r+0x7da>
   880e0:	4650      	mov	r0, sl
   880e2:	f004 f843 	bl	8c16c <__aeabi_i2d>
   880e6:	4642      	mov	r2, r8
   880e8:	464b      	mov	r3, r9
   880ea:	f004 f8a9 	bl	8c240 <__aeabi_dmul>
   880ee:	4b3f      	ldr	r3, [pc, #252]	; (881ec <_dtoa_r+0x554>)
   880f0:	2200      	movs	r2, #0
   880f2:	f003 feef 	bl	8bed4 <__adddf3>
   880f6:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   880fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   880fe:	9311      	str	r3, [sp, #68]	; 0x44
   88100:	4640      	mov	r0, r8
   88102:	4649      	mov	r1, r9
   88104:	2200      	movs	r2, #0
   88106:	4b3c      	ldr	r3, [pc, #240]	; (881f8 <_dtoa_r+0x560>)
   88108:	f003 fee2 	bl	8bed0 <__aeabi_dsub>
   8810c:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   88110:	464b      	mov	r3, r9
   88112:	4642      	mov	r2, r8
   88114:	4606      	mov	r6, r0
   88116:	460f      	mov	r7, r1
   88118:	f004 fb22 	bl	8c760 <__aeabi_dcmpgt>
   8811c:	4681      	mov	r9, r0
   8811e:	2800      	cmp	r0, #0
   88120:	f040 84af 	bne.w	88a82 <_dtoa_r+0xdea>
   88124:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   88128:	4602      	mov	r2, r0
   8812a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   8812e:	4630      	mov	r0, r6
   88130:	4639      	mov	r1, r7
   88132:	f004 faf7 	bl	8c724 <__aeabi_dcmplt>
   88136:	2800      	cmp	r0, #0
   88138:	f040 8348 	bne.w	887cc <_dtoa_r+0xb34>
   8813c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   8813e:	2b00      	cmp	r3, #0
   88140:	f2c0 808c 	blt.w	8825c <_dtoa_r+0x5c4>
   88144:	9a07      	ldr	r2, [sp, #28]
   88146:	2a0e      	cmp	r2, #14
   88148:	f300 8088 	bgt.w	8825c <_dtoa_r+0x5c4>
   8814c:	4b24      	ldr	r3, [pc, #144]	; (881e0 <_dtoa_r+0x548>)
   8814e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   88152:	e9d3 ab00 	ldrd	sl, fp, [r3]
   88156:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   88158:	2b00      	cmp	r3, #0
   8815a:	da1b      	bge.n	88194 <_dtoa_r+0x4fc>
   8815c:	9b08      	ldr	r3, [sp, #32]
   8815e:	2b00      	cmp	r3, #0
   88160:	dc18      	bgt.n	88194 <_dtoa_r+0x4fc>
   88162:	f040 8331 	bne.w	887c8 <_dtoa_r+0xb30>
   88166:	2200      	movs	r2, #0
   88168:	4b23      	ldr	r3, [pc, #140]	; (881f8 <_dtoa_r+0x560>)
   8816a:	4650      	mov	r0, sl
   8816c:	4659      	mov	r1, fp
   8816e:	f004 f867 	bl	8c240 <__aeabi_dmul>
   88172:	4602      	mov	r2, r0
   88174:	460b      	mov	r3, r1
   88176:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   8817a:	f004 fadd 	bl	8c738 <__aeabi_dcmple>
   8817e:	f8dd 9020 	ldr.w	r9, [sp, #32]
   88182:	464e      	mov	r6, r9
   88184:	2800      	cmp	r0, #0
   88186:	f000 82ca 	beq.w	8871e <_dtoa_r+0xa86>
   8818a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   8818c:	f8dd 800c 	ldr.w	r8, [sp, #12]
   88190:	43df      	mvns	r7, r3
   88192:	e2cc      	b.n	8872e <_dtoa_r+0xa96>
   88194:	4652      	mov	r2, sl
   88196:	e9dd 780a 	ldrd	r7, r8, [sp, #40]	; 0x28
   8819a:	465b      	mov	r3, fp
   8819c:	4638      	mov	r0, r7
   8819e:	4641      	mov	r1, r8
   881a0:	f004 f978 	bl	8c494 <__aeabi_ddiv>
   881a4:	f004 fafc 	bl	8c7a0 <__aeabi_d2iz>
   881a8:	4681      	mov	r9, r0
   881aa:	9009      	str	r0, [sp, #36]	; 0x24
   881ac:	f003 ffde 	bl	8c16c <__aeabi_i2d>
   881b0:	4652      	mov	r2, sl
   881b2:	465b      	mov	r3, fp
   881b4:	f004 f844 	bl	8c240 <__aeabi_dmul>
   881b8:	9e03      	ldr	r6, [sp, #12]
   881ba:	460b      	mov	r3, r1
   881bc:	4602      	mov	r2, r0
   881be:	4641      	mov	r1, r8
   881c0:	4638      	mov	r0, r7
   881c2:	f003 fe85 	bl	8bed0 <__aeabi_dsub>
   881c6:	f109 0330 	add.w	r3, r9, #48	; 0x30
   881ca:	f806 3b01 	strb.w	r3, [r6], #1
   881ce:	9b08      	ldr	r3, [sp, #32]
   881d0:	2b01      	cmp	r3, #1
   881d2:	f000 835f 	beq.w	88894 <_dtoa_r+0xbfc>
   881d6:	9406      	str	r4, [sp, #24]
   881d8:	2701      	movs	r7, #1
   881da:	461c      	mov	r4, r3
   881dc:	9504      	str	r5, [sp, #16]
   881de:	e02a      	b.n	88236 <_dtoa_r+0x59e>
   881e0:	0008cd10 	.word	0x0008cd10
   881e4:	0008cce8 	.word	0x0008cce8
   881e8:	3ff00000 	.word	0x3ff00000
   881ec:	401c0000 	.word	0x401c0000
   881f0:	3fe00000 	.word	0x3fe00000
   881f4:	40240000 	.word	0x40240000
   881f8:	40140000 	.word	0x40140000
   881fc:	4652      	mov	r2, sl
   881fe:	465b      	mov	r3, fp
   88200:	4640      	mov	r0, r8
   88202:	4649      	mov	r1, r9
   88204:	f004 f946 	bl	8c494 <__aeabi_ddiv>
   88208:	f004 faca 	bl	8c7a0 <__aeabi_d2iz>
   8820c:	4605      	mov	r5, r0
   8820e:	f003 ffad 	bl	8c16c <__aeabi_i2d>
   88212:	4652      	mov	r2, sl
   88214:	465b      	mov	r3, fp
   88216:	f004 f813 	bl	8c240 <__aeabi_dmul>
   8821a:	3701      	adds	r7, #1
   8821c:	460b      	mov	r3, r1
   8821e:	4602      	mov	r2, r0
   88220:	4649      	mov	r1, r9
   88222:	4640      	mov	r0, r8
   88224:	f003 fe54 	bl	8bed0 <__aeabi_dsub>
   88228:	f105 0330 	add.w	r3, r5, #48	; 0x30
   8822c:	42a7      	cmp	r7, r4
   8822e:	f806 3b01 	strb.w	r3, [r6], #1
   88232:	f000 832c 	beq.w	8888e <_dtoa_r+0xbf6>
   88236:	2200      	movs	r2, #0
   88238:	4bab      	ldr	r3, [pc, #684]	; (884e8 <_dtoa_r+0x850>)
   8823a:	f004 f801 	bl	8c240 <__aeabi_dmul>
   8823e:	2200      	movs	r2, #0
   88240:	2300      	movs	r3, #0
   88242:	4680      	mov	r8, r0
   88244:	4689      	mov	r9, r1
   88246:	f004 fa63 	bl	8c710 <__aeabi_dcmpeq>
   8824a:	2800      	cmp	r0, #0
   8824c:	d0d6      	beq.n	881fc <_dtoa_r+0x564>
   8824e:	9d04      	ldr	r5, [sp, #16]
   88250:	9c06      	ldr	r4, [sp, #24]
   88252:	9b07      	ldr	r3, [sp, #28]
   88254:	46b2      	mov	sl, r6
   88256:	3301      	adds	r3, #1
   88258:	9307      	str	r3, [sp, #28]
   8825a:	e10a      	b.n	88472 <_dtoa_r+0x7da>
   8825c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8825e:	2a00      	cmp	r2, #0
   88260:	d03d      	beq.n	882de <_dtoa_r+0x646>
   88262:	9a22      	ldr	r2, [sp, #136]	; 0x88
   88264:	2a01      	cmp	r2, #1
   88266:	f340 829f 	ble.w	887a8 <_dtoa_r+0xb10>
   8826a:	9b08      	ldr	r3, [sp, #32]
   8826c:	f103 38ff 	add.w	r8, r3, #4294967295
   88270:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88272:	4543      	cmp	r3, r8
   88274:	f2c0 8270 	blt.w	88758 <_dtoa_r+0xac0>
   88278:	eba3 0808 	sub.w	r8, r3, r8
   8827c:	9b08      	ldr	r3, [sp, #32]
   8827e:	2b00      	cmp	r3, #0
   88280:	f2c0 8340 	blt.w	88904 <_dtoa_r+0xc6c>
   88284:	9a06      	ldr	r2, [sp, #24]
   88286:	441a      	add	r2, r3
   88288:	9206      	str	r2, [sp, #24]
   8828a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8828c:	4617      	mov	r7, r2
   8828e:	441a      	add	r2, r3
   88290:	9209      	str	r2, [sp, #36]	; 0x24
   88292:	2101      	movs	r1, #1
   88294:	4620      	mov	r0, r4
   88296:	f001 f9a5 	bl	895e4 <__i2b>
   8829a:	4606      	mov	r6, r0
   8829c:	e023      	b.n	882e6 <_dtoa_r+0x64e>
   8829e:	2301      	movs	r3, #1
   882a0:	1bbe      	subs	r6, r7, r6
   882a2:	930e      	str	r3, [sp, #56]	; 0x38
   882a4:	1e73      	subs	r3, r6, #1
   882a6:	9306      	str	r3, [sp, #24]
   882a8:	f57f ada0 	bpl.w	87dec <_dtoa_r+0x154>
   882ac:	f1c6 0301 	rsb	r3, r6, #1
   882b0:	9309      	str	r3, [sp, #36]	; 0x24
   882b2:	2300      	movs	r3, #0
   882b4:	9306      	str	r3, [sp, #24]
   882b6:	e59b      	b.n	87df0 <_dtoa_r+0x158>
   882b8:	4658      	mov	r0, fp
   882ba:	f003 ff57 	bl	8c16c <__aeabi_i2d>
   882be:	4642      	mov	r2, r8
   882c0:	464b      	mov	r3, r9
   882c2:	f004 fa25 	bl	8c710 <__aeabi_dcmpeq>
   882c6:	2800      	cmp	r0, #0
   882c8:	f47f ad78 	bne.w	87dbc <_dtoa_r+0x124>
   882cc:	f10b 3bff 	add.w	fp, fp, #4294967295
   882d0:	e574      	b.n	87dbc <_dtoa_r+0x124>
   882d2:	4b86      	ldr	r3, [pc, #536]	; (884ec <_dtoa_r+0x854>)
   882d4:	9303      	str	r3, [sp, #12]
   882d6:	9803      	ldr	r0, [sp, #12]
   882d8:	b019      	add	sp, #100	; 0x64
   882da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   882de:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   882e2:	9f09      	ldr	r7, [sp, #36]	; 0x24
   882e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   882e6:	2f00      	cmp	r7, #0
   882e8:	dd0c      	ble.n	88304 <_dtoa_r+0x66c>
   882ea:	9906      	ldr	r1, [sp, #24]
   882ec:	2900      	cmp	r1, #0
   882ee:	460b      	mov	r3, r1
   882f0:	dd08      	ble.n	88304 <_dtoa_r+0x66c>
   882f2:	42b9      	cmp	r1, r7
   882f4:	bfa8      	it	ge
   882f6:	463b      	movge	r3, r7
   882f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
   882fa:	1aff      	subs	r7, r7, r3
   882fc:	1ad2      	subs	r2, r2, r3
   882fe:	1acb      	subs	r3, r1, r3
   88300:	9209      	str	r2, [sp, #36]	; 0x24
   88302:	9306      	str	r3, [sp, #24]
   88304:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   88306:	b1e3      	cbz	r3, 88342 <_dtoa_r+0x6aa>
   88308:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8830a:	2b00      	cmp	r3, #0
   8830c:	f000 8260 	beq.w	887d0 <_dtoa_r+0xb38>
   88310:	f1b8 0f00 	cmp.w	r8, #0
   88314:	dd10      	ble.n	88338 <_dtoa_r+0x6a0>
   88316:	4631      	mov	r1, r6
   88318:	4642      	mov	r2, r8
   8831a:	4620      	mov	r0, r4
   8831c:	f001 fa3e 	bl	8979c <__pow5mult>
   88320:	4606      	mov	r6, r0
   88322:	462a      	mov	r2, r5
   88324:	4631      	mov	r1, r6
   88326:	4620      	mov	r0, r4
   88328:	f001 f98a 	bl	89640 <__multiply>
   8832c:	4603      	mov	r3, r0
   8832e:	4629      	mov	r1, r5
   88330:	4620      	mov	r0, r4
   88332:	461d      	mov	r5, r3
   88334:	f001 f8ae 	bl	89494 <_Bfree>
   88338:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8833a:	ebb3 0208 	subs.w	r2, r3, r8
   8833e:	f040 82db 	bne.w	888f8 <_dtoa_r+0xc60>
   88342:	2101      	movs	r1, #1
   88344:	4620      	mov	r0, r4
   88346:	f001 f94d 	bl	895e4 <__i2b>
   8834a:	f1bb 0f00 	cmp.w	fp, #0
   8834e:	4681      	mov	r9, r0
   88350:	f300 80b3 	bgt.w	884ba <_dtoa_r+0x822>
   88354:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88356:	2b01      	cmp	r3, #1
   88358:	f340 8188 	ble.w	8866c <_dtoa_r+0x9d4>
   8835c:	f04f 0a00 	mov.w	sl, #0
   88360:	2001      	movs	r0, #1
   88362:	f1bb 0f00 	cmp.w	fp, #0
   88366:	f040 80b4 	bne.w	884d2 <_dtoa_r+0x83a>
   8836a:	9a06      	ldr	r2, [sp, #24]
   8836c:	4410      	add	r0, r2
   8836e:	f010 001f 	ands.w	r0, r0, #31
   88372:	f000 8092 	beq.w	8849a <_dtoa_r+0x802>
   88376:	f1c0 0320 	rsb	r3, r0, #32
   8837a:	2b04      	cmp	r3, #4
   8837c:	f340 83d3 	ble.w	88b26 <_dtoa_r+0xe8e>
   88380:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88382:	f1c0 001c 	rsb	r0, r0, #28
   88386:	4403      	add	r3, r0
   88388:	4402      	add	r2, r0
   8838a:	9309      	str	r3, [sp, #36]	; 0x24
   8838c:	4407      	add	r7, r0
   8838e:	9206      	str	r2, [sp, #24]
   88390:	9b09      	ldr	r3, [sp, #36]	; 0x24
   88392:	2b00      	cmp	r3, #0
   88394:	dd05      	ble.n	883a2 <_dtoa_r+0x70a>
   88396:	4629      	mov	r1, r5
   88398:	461a      	mov	r2, r3
   8839a:	4620      	mov	r0, r4
   8839c:	f001 fa5a 	bl	89854 <__lshift>
   883a0:	4605      	mov	r5, r0
   883a2:	9b06      	ldr	r3, [sp, #24]
   883a4:	2b00      	cmp	r3, #0
   883a6:	dd05      	ble.n	883b4 <_dtoa_r+0x71c>
   883a8:	4649      	mov	r1, r9
   883aa:	461a      	mov	r2, r3
   883ac:	4620      	mov	r0, r4
   883ae:	f001 fa51 	bl	89854 <__lshift>
   883b2:	4681      	mov	r9, r0
   883b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   883b6:	2b00      	cmp	r3, #0
   883b8:	f040 8138 	bne.w	8862c <_dtoa_r+0x994>
   883bc:	9b08      	ldr	r3, [sp, #32]
   883be:	2b00      	cmp	r3, #0
   883c0:	f340 811e 	ble.w	88600 <_dtoa_r+0x968>
   883c4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   883c6:	2b00      	cmp	r3, #0
   883c8:	f040 809f 	bne.w	8850a <_dtoa_r+0x872>
   883cc:	9b07      	ldr	r3, [sp, #28]
   883ce:	3301      	adds	r3, #1
   883d0:	9307      	str	r3, [sp, #28]
   883d2:	2701      	movs	r7, #1
   883d4:	f8dd 800c 	ldr.w	r8, [sp, #12]
   883d8:	f8dd a020 	ldr.w	sl, [sp, #32]
   883dc:	e007      	b.n	883ee <_dtoa_r+0x756>
   883de:	4629      	mov	r1, r5
   883e0:	2300      	movs	r3, #0
   883e2:	220a      	movs	r2, #10
   883e4:	4620      	mov	r0, r4
   883e6:	f001 f85f 	bl	894a8 <__multadd>
   883ea:	4605      	mov	r5, r0
   883ec:	3701      	adds	r7, #1
   883ee:	4649      	mov	r1, r9
   883f0:	4628      	mov	r0, r5
   883f2:	f7ff fbb9 	bl	87b68 <quorem>
   883f6:	4557      	cmp	r7, sl
   883f8:	f100 0330 	add.w	r3, r0, #48	; 0x30
   883fc:	f808 3b01 	strb.w	r3, [r8], #1
   88400:	dbed      	blt.n	883de <_dtoa_r+0x746>
   88402:	9a08      	ldr	r2, [sp, #32]
   88404:	2700      	movs	r7, #0
   88406:	2a00      	cmp	r2, #0
   88408:	bfcc      	ite	gt
   8840a:	4693      	movgt	fp, r2
   8840c:	f04f 0b01 	movle.w	fp, #1
   88410:	9a03      	ldr	r2, [sp, #12]
   88412:	4493      	add	fp, r2
   88414:	4629      	mov	r1, r5
   88416:	2201      	movs	r2, #1
   88418:	4620      	mov	r0, r4
   8841a:	9304      	str	r3, [sp, #16]
   8841c:	f001 fa1a 	bl	89854 <__lshift>
   88420:	4649      	mov	r1, r9
   88422:	4605      	mov	r5, r0
   88424:	f001 fa8c 	bl	89940 <__mcmp>
   88428:	2800      	cmp	r0, #0
   8842a:	f340 81ab 	ble.w	88784 <_dtoa_r+0xaec>
   8842e:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
   88432:	9a03      	ldr	r2, [sp, #12]
   88434:	f10b 3bff 	add.w	fp, fp, #4294967295
   88438:	e004      	b.n	88444 <_dtoa_r+0x7ac>
   8843a:	455a      	cmp	r2, fp
   8843c:	f000 81ad 	beq.w	8879a <_dtoa_r+0xb02>
   88440:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   88444:	2b39      	cmp	r3, #57	; 0x39
   88446:	f10b 0a01 	add.w	sl, fp, #1
   8844a:	d0f6      	beq.n	8843a <_dtoa_r+0x7a2>
   8844c:	3301      	adds	r3, #1
   8844e:	f88b 3000 	strb.w	r3, [fp]
   88452:	4649      	mov	r1, r9
   88454:	4620      	mov	r0, r4
   88456:	f001 f81d 	bl	89494 <_Bfree>
   8845a:	b156      	cbz	r6, 88472 <_dtoa_r+0x7da>
   8845c:	b12f      	cbz	r7, 8846a <_dtoa_r+0x7d2>
   8845e:	42b7      	cmp	r7, r6
   88460:	d003      	beq.n	8846a <_dtoa_r+0x7d2>
   88462:	4639      	mov	r1, r7
   88464:	4620      	mov	r0, r4
   88466:	f001 f815 	bl	89494 <_Bfree>
   8846a:	4631      	mov	r1, r6
   8846c:	4620      	mov	r0, r4
   8846e:	f001 f811 	bl	89494 <_Bfree>
   88472:	4629      	mov	r1, r5
   88474:	4620      	mov	r0, r4
   88476:	f001 f80d 	bl	89494 <_Bfree>
   8847a:	2300      	movs	r3, #0
   8847c:	9a07      	ldr	r2, [sp, #28]
   8847e:	f88a 3000 	strb.w	r3, [sl]
   88482:	9b24      	ldr	r3, [sp, #144]	; 0x90
   88484:	601a      	str	r2, [r3, #0]
   88486:	9b26      	ldr	r3, [sp, #152]	; 0x98
   88488:	2b00      	cmp	r3, #0
   8848a:	f43f ac40 	beq.w	87d0e <_dtoa_r+0x76>
   8848e:	9803      	ldr	r0, [sp, #12]
   88490:	f8c3 a000 	str.w	sl, [r3]
   88494:	b019      	add	sp, #100	; 0x64
   88496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8849a:	201c      	movs	r0, #28
   8849c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8849e:	4407      	add	r7, r0
   884a0:	4403      	add	r3, r0
   884a2:	9309      	str	r3, [sp, #36]	; 0x24
   884a4:	9b06      	ldr	r3, [sp, #24]
   884a6:	4403      	add	r3, r0
   884a8:	9306      	str	r3, [sp, #24]
   884aa:	e771      	b.n	88390 <_dtoa_r+0x6f8>
   884ac:	2601      	movs	r6, #1
   884ae:	e4b6      	b.n	87e1e <_dtoa_r+0x186>
   884b0:	f1c0 0020 	rsb	r0, r0, #32
   884b4:	fa08 f000 	lsl.w	r0, r8, r0
   884b8:	e44d      	b.n	87d56 <_dtoa_r+0xbe>
   884ba:	4601      	mov	r1, r0
   884bc:	465a      	mov	r2, fp
   884be:	4620      	mov	r0, r4
   884c0:	f001 f96c 	bl	8979c <__pow5mult>
   884c4:	9b22      	ldr	r3, [sp, #136]	; 0x88
   884c6:	4681      	mov	r9, r0
   884c8:	2b01      	cmp	r3, #1
   884ca:	f340 81b6 	ble.w	8883a <_dtoa_r+0xba2>
   884ce:	f04f 0a00 	mov.w	sl, #0
   884d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   884d6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
   884da:	6918      	ldr	r0, [r3, #16]
   884dc:	f001 f836 	bl	8954c <__hi0bits>
   884e0:	f1c0 0020 	rsb	r0, r0, #32
   884e4:	e741      	b.n	8836a <_dtoa_r+0x6d2>
   884e6:	bf00      	nop
   884e8:	40240000 	.word	0x40240000
   884ec:	0008cb9c 	.word	0x0008cb9c
   884f0:	4631      	mov	r1, r6
   884f2:	2300      	movs	r3, #0
   884f4:	220a      	movs	r2, #10
   884f6:	4620      	mov	r0, r4
   884f8:	f000 ffd6 	bl	894a8 <__multadd>
   884fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
   884fe:	4606      	mov	r6, r0
   88500:	2b00      	cmp	r3, #0
   88502:	f340 82e9 	ble.w	88ad8 <_dtoa_r+0xe40>
   88506:	e9cd 8307 	strd	r8, r3, [sp, #28]
   8850a:	2f00      	cmp	r7, #0
   8850c:	f300 811d 	bgt.w	8874a <_dtoa_r+0xab2>
   88510:	f1ba 0f00 	cmp.w	sl, #0
   88514:	f040 81d9 	bne.w	888ca <_dtoa_r+0xc32>
   88518:	46b0      	mov	r8, r6
   8851a:	9b04      	ldr	r3, [sp, #16]
   8851c:	9908      	ldr	r1, [sp, #32]
   8851e:	f003 0201 	and.w	r2, r3, #1
   88522:	9b03      	ldr	r3, [sp, #12]
   88524:	920a      	str	r2, [sp, #40]	; 0x28
   88526:	461f      	mov	r7, r3
   88528:	3b01      	subs	r3, #1
   8852a:	4419      	add	r1, r3
   8852c:	9b22      	ldr	r3, [sp, #136]	; 0x88
   8852e:	9108      	str	r1, [sp, #32]
   88530:	4313      	orrs	r3, r2
   88532:	9309      	str	r3, [sp, #36]	; 0x24
   88534:	4649      	mov	r1, r9
   88536:	4628      	mov	r0, r5
   88538:	f7ff fb16 	bl	87b68 <quorem>
   8853c:	4631      	mov	r1, r6
   8853e:	4683      	mov	fp, r0
   88540:	4628      	mov	r0, r5
   88542:	f001 f9fd 	bl	89940 <__mcmp>
   88546:	4642      	mov	r2, r8
   88548:	4649      	mov	r1, r9
   8854a:	4682      	mov	sl, r0
   8854c:	4620      	mov	r0, r4
   8854e:	f001 fa17 	bl	89980 <__mdiff>
   88552:	68c2      	ldr	r2, [r0, #12]
   88554:	4601      	mov	r1, r0
   88556:	f10b 0330 	add.w	r3, fp, #48	; 0x30
   8855a:	2a00      	cmp	r2, #0
   8855c:	d143      	bne.n	885e6 <_dtoa_r+0x94e>
   8855e:	9004      	str	r0, [sp, #16]
   88560:	4628      	mov	r0, r5
   88562:	9306      	str	r3, [sp, #24]
   88564:	f001 f9ec 	bl	89940 <__mcmp>
   88568:	4602      	mov	r2, r0
   8856a:	9904      	ldr	r1, [sp, #16]
   8856c:	4620      	mov	r0, r4
   8856e:	9204      	str	r2, [sp, #16]
   88570:	f000 ff90 	bl	89494 <_Bfree>
   88574:	9a04      	ldr	r2, [sp, #16]
   88576:	9b06      	ldr	r3, [sp, #24]
   88578:	b91a      	cbnz	r2, 88582 <_dtoa_r+0x8ea>
   8857a:	9909      	ldr	r1, [sp, #36]	; 0x24
   8857c:	2900      	cmp	r1, #0
   8857e:	f000 829b 	beq.w	88ab8 <_dtoa_r+0xe20>
   88582:	f1ba 0f00 	cmp.w	sl, #0
   88586:	f2c0 8164 	blt.w	88852 <_dtoa_r+0xbba>
   8858a:	9922      	ldr	r1, [sp, #136]	; 0x88
   8858c:	ea4a 0a01 	orr.w	sl, sl, r1
   88590:	990a      	ldr	r1, [sp, #40]	; 0x28
   88592:	ea51 010a 	orrs.w	r1, r1, sl
   88596:	f000 815c 	beq.w	88852 <_dtoa_r+0xbba>
   8859a:	2a00      	cmp	r2, #0
   8859c:	f300 81b6 	bgt.w	8890c <_dtoa_r+0xc74>
   885a0:	9a08      	ldr	r2, [sp, #32]
   885a2:	f107 0a01 	add.w	sl, r7, #1
   885a6:	4297      	cmp	r7, r2
   885a8:	46d3      	mov	fp, sl
   885aa:	703b      	strb	r3, [r7, #0]
   885ac:	f000 81b4 	beq.w	88918 <_dtoa_r+0xc80>
   885b0:	4629      	mov	r1, r5
   885b2:	2300      	movs	r3, #0
   885b4:	220a      	movs	r2, #10
   885b6:	4620      	mov	r0, r4
   885b8:	f000 ff76 	bl	894a8 <__multadd>
   885bc:	4546      	cmp	r6, r8
   885be:	4605      	mov	r5, r0
   885c0:	4631      	mov	r1, r6
   885c2:	f04f 0300 	mov.w	r3, #0
   885c6:	f04f 020a 	mov.w	r2, #10
   885ca:	4620      	mov	r0, r4
   885cc:	d012      	beq.n	885f4 <_dtoa_r+0x95c>
   885ce:	f000 ff6b 	bl	894a8 <__multadd>
   885d2:	4641      	mov	r1, r8
   885d4:	4606      	mov	r6, r0
   885d6:	2300      	movs	r3, #0
   885d8:	220a      	movs	r2, #10
   885da:	4620      	mov	r0, r4
   885dc:	f000 ff64 	bl	894a8 <__multadd>
   885e0:	4657      	mov	r7, sl
   885e2:	4680      	mov	r8, r0
   885e4:	e7a6      	b.n	88534 <_dtoa_r+0x89c>
   885e6:	4620      	mov	r0, r4
   885e8:	9304      	str	r3, [sp, #16]
   885ea:	f000 ff53 	bl	89494 <_Bfree>
   885ee:	2201      	movs	r2, #1
   885f0:	9b04      	ldr	r3, [sp, #16]
   885f2:	e7c6      	b.n	88582 <_dtoa_r+0x8ea>
   885f4:	f000 ff58 	bl	894a8 <__multadd>
   885f8:	4657      	mov	r7, sl
   885fa:	4606      	mov	r6, r0
   885fc:	4680      	mov	r8, r0
   885fe:	e799      	b.n	88534 <_dtoa_r+0x89c>
   88600:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88602:	2b02      	cmp	r3, #2
   88604:	dc7a      	bgt.n	886fc <_dtoa_r+0xa64>
   88606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88608:	2b00      	cmp	r3, #0
   8860a:	f47f af7e 	bne.w	8850a <_dtoa_r+0x872>
   8860e:	9b07      	ldr	r3, [sp, #28]
   88610:	4649      	mov	r1, r9
   88612:	3301      	adds	r3, #1
   88614:	4628      	mov	r0, r5
   88616:	9307      	str	r3, [sp, #28]
   88618:	f7ff faa6 	bl	87b68 <quorem>
   8861c:	f8dd b00c 	ldr.w	fp, [sp, #12]
   88620:	f100 0330 	add.w	r3, r0, #48	; 0x30
   88624:	2700      	movs	r7, #0
   88626:	f80b 3b01 	strb.w	r3, [fp], #1
   8862a:	e6f3      	b.n	88414 <_dtoa_r+0x77c>
   8862c:	4649      	mov	r1, r9
   8862e:	4628      	mov	r0, r5
   88630:	f001 f986 	bl	89940 <__mcmp>
   88634:	2800      	cmp	r0, #0
   88636:	f6bf aec1 	bge.w	883bc <_dtoa_r+0x724>
   8863a:	4629      	mov	r1, r5
   8863c:	2300      	movs	r3, #0
   8863e:	220a      	movs	r2, #10
   88640:	4620      	mov	r0, r4
   88642:	f000 ff31 	bl	894a8 <__multadd>
   88646:	9b07      	ldr	r3, [sp, #28]
   88648:	4605      	mov	r5, r0
   8864a:	f103 38ff 	add.w	r8, r3, #4294967295
   8864e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   88650:	2b00      	cmp	r3, #0
   88652:	f47f af4d 	bne.w	884f0 <_dtoa_r+0x858>
   88656:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88658:	2b00      	cmp	r3, #0
   8865a:	f340 8234 	ble.w	88ac6 <_dtoa_r+0xe2e>
   8865e:	9308      	str	r3, [sp, #32]
   88660:	e6b7      	b.n	883d2 <_dtoa_r+0x73a>
   88662:	4bb0      	ldr	r3, [pc, #704]	; (88924 <_dtoa_r+0xc8c>)
   88664:	9303      	str	r3, [sp, #12]
   88666:	3303      	adds	r3, #3
   88668:	f7ff bbf4 	b.w	87e54 <_dtoa_r+0x1bc>
   8866c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   88670:	2900      	cmp	r1, #0
   88672:	f47f ae73 	bne.w	8835c <_dtoa_r+0x6c4>
   88676:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8867a:	2b00      	cmp	r3, #0
   8867c:	f47f ae6e 	bne.w	8835c <_dtoa_r+0x6c4>
   88680:	4ba9      	ldr	r3, [pc, #676]	; (88928 <_dtoa_r+0xc90>)
   88682:	4013      	ands	r3, r2
   88684:	2b00      	cmp	r3, #0
   88686:	f000 8200 	beq.w	88a8a <_dtoa_r+0xdf2>
   8868a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   8868c:	f04f 0a01 	mov.w	sl, #1
   88690:	3301      	adds	r3, #1
   88692:	9309      	str	r3, [sp, #36]	; 0x24
   88694:	9b06      	ldr	r3, [sp, #24]
   88696:	3301      	adds	r3, #1
   88698:	9306      	str	r3, [sp, #24]
   8869a:	e661      	b.n	88360 <_dtoa_r+0x6c8>
   8869c:	2301      	movs	r3, #1
   8869e:	930c      	str	r3, [sp, #48]	; 0x30
   886a0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   886a2:	9a07      	ldr	r2, [sp, #28]
   886a4:	4413      	add	r3, r2
   886a6:	9312      	str	r3, [sp, #72]	; 0x48
   886a8:	3301      	adds	r3, #1
   886aa:	2b01      	cmp	r3, #1
   886ac:	461f      	mov	r7, r3
   886ae:	bfb8      	it	lt
   886b0:	2701      	movlt	r7, #1
   886b2:	9308      	str	r3, [sp, #32]
   886b4:	2100      	movs	r1, #0
   886b6:	2f17      	cmp	r7, #23
   886b8:	6461      	str	r1, [r4, #68]	; 0x44
   886ba:	f77f ac1e 	ble.w	87efa <_dtoa_r+0x262>
   886be:	2201      	movs	r2, #1
   886c0:	2304      	movs	r3, #4
   886c2:	005b      	lsls	r3, r3, #1
   886c4:	f103 0014 	add.w	r0, r3, #20
   886c8:	42b8      	cmp	r0, r7
   886ca:	4611      	mov	r1, r2
   886cc:	f102 0201 	add.w	r2, r2, #1
   886d0:	d9f7      	bls.n	886c2 <_dtoa_r+0xa2a>
   886d2:	6461      	str	r1, [r4, #68]	; 0x44
   886d4:	e411      	b.n	87efa <_dtoa_r+0x262>
   886d6:	2301      	movs	r3, #1
   886d8:	930c      	str	r3, [sp, #48]	; 0x30
   886da:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   886dc:	2b00      	cmp	r3, #0
   886de:	dd4c      	ble.n	8877a <_dtoa_r+0xae2>
   886e0:	461f      	mov	r7, r3
   886e2:	9312      	str	r3, [sp, #72]	; 0x48
   886e4:	9308      	str	r3, [sp, #32]
   886e6:	e7e5      	b.n	886b4 <_dtoa_r+0xa1c>
   886e8:	2300      	movs	r3, #0
   886ea:	930c      	str	r3, [sp, #48]	; 0x30
   886ec:	e7d8      	b.n	886a0 <_dtoa_r+0xa08>
   886ee:	2300      	movs	r3, #0
   886f0:	930c      	str	r3, [sp, #48]	; 0x30
   886f2:	e7f2      	b.n	886da <_dtoa_r+0xa42>
   886f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
   886f6:	f8cd 801c 	str.w	r8, [sp, #28]
   886fa:	9308      	str	r3, [sp, #32]
   886fc:	9b08      	ldr	r3, [sp, #32]
   886fe:	2b00      	cmp	r3, #0
   88700:	f47f ad43 	bne.w	8818a <_dtoa_r+0x4f2>
   88704:	4649      	mov	r1, r9
   88706:	2205      	movs	r2, #5
   88708:	4620      	mov	r0, r4
   8870a:	f000 fecd 	bl	894a8 <__multadd>
   8870e:	4681      	mov	r9, r0
   88710:	4628      	mov	r0, r5
   88712:	4649      	mov	r1, r9
   88714:	f001 f914 	bl	89940 <__mcmp>
   88718:	2800      	cmp	r0, #0
   8871a:	f77f ad36 	ble.w	8818a <_dtoa_r+0x4f2>
   8871e:	2331      	movs	r3, #49	; 0x31
   88720:	9803      	ldr	r0, [sp, #12]
   88722:	9f07      	ldr	r7, [sp, #28]
   88724:	4680      	mov	r8, r0
   88726:	f800 3b01 	strb.w	r3, [r0], #1
   8872a:	3701      	adds	r7, #1
   8872c:	9003      	str	r0, [sp, #12]
   8872e:	4649      	mov	r1, r9
   88730:	4620      	mov	r0, r4
   88732:	f000 feaf 	bl	89494 <_Bfree>
   88736:	1c7b      	adds	r3, r7, #1
   88738:	f8dd a00c 	ldr.w	sl, [sp, #12]
   8873c:	9307      	str	r3, [sp, #28]
   8873e:	f8cd 800c 	str.w	r8, [sp, #12]
   88742:	2e00      	cmp	r6, #0
   88744:	f47f ae91 	bne.w	8846a <_dtoa_r+0x7d2>
   88748:	e693      	b.n	88472 <_dtoa_r+0x7da>
   8874a:	4631      	mov	r1, r6
   8874c:	463a      	mov	r2, r7
   8874e:	4620      	mov	r0, r4
   88750:	f001 f880 	bl	89854 <__lshift>
   88754:	4606      	mov	r6, r0
   88756:	e6db      	b.n	88510 <_dtoa_r+0x878>
   88758:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   8875a:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
   8875e:	eba8 0303 	sub.w	r3, r8, r3
   88762:	449b      	add	fp, r3
   88764:	f04f 0800 	mov.w	r8, #0
   88768:	e588      	b.n	8827c <_dtoa_r+0x5e4>
   8876a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   8876e:	f04f 0a02 	mov.w	sl, #2
   88772:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
   88776:	f7ff bbee 	b.w	87f56 <_dtoa_r+0x2be>
   8877a:	2301      	movs	r3, #1
   8877c:	9323      	str	r3, [sp, #140]	; 0x8c
   8877e:	9308      	str	r3, [sp, #32]
   88780:	f7ff bbb7 	b.w	87ef2 <_dtoa_r+0x25a>
   88784:	d103      	bne.n	8878e <_dtoa_r+0xaf6>
   88786:	9b04      	ldr	r3, [sp, #16]
   88788:	07d8      	lsls	r0, r3, #31
   8878a:	f53f ae50 	bmi.w	8842e <_dtoa_r+0x796>
   8878e:	46da      	mov	sl, fp
   88790:	f81b 3d01 	ldrb.w	r3, [fp, #-1]!
   88794:	2b30      	cmp	r3, #48	; 0x30
   88796:	d0fa      	beq.n	8878e <_dtoa_r+0xaf6>
   88798:	e65b      	b.n	88452 <_dtoa_r+0x7ba>
   8879a:	9b07      	ldr	r3, [sp, #28]
   8879c:	9a03      	ldr	r2, [sp, #12]
   8879e:	3301      	adds	r3, #1
   887a0:	9307      	str	r3, [sp, #28]
   887a2:	2331      	movs	r3, #49	; 0x31
   887a4:	7013      	strb	r3, [r2, #0]
   887a6:	e654      	b.n	88452 <_dtoa_r+0x7ba>
   887a8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   887aa:	2a00      	cmp	r2, #0
   887ac:	f000 8128 	beq.w	88a00 <_dtoa_r+0xd68>
   887b0:	f203 4333 	addw	r3, r3, #1075	; 0x433
   887b4:	9a06      	ldr	r2, [sp, #24]
   887b6:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   887ba:	441a      	add	r2, r3
   887bc:	9206      	str	r2, [sp, #24]
   887be:	9a09      	ldr	r2, [sp, #36]	; 0x24
   887c0:	4617      	mov	r7, r2
   887c2:	441a      	add	r2, r3
   887c4:	9209      	str	r2, [sp, #36]	; 0x24
   887c6:	e564      	b.n	88292 <_dtoa_r+0x5fa>
   887c8:	f04f 0900 	mov.w	r9, #0
   887cc:	464e      	mov	r6, r9
   887ce:	e4dc      	b.n	8818a <_dtoa_r+0x4f2>
   887d0:	4629      	mov	r1, r5
   887d2:	4620      	mov	r0, r4
   887d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   887d6:	f000 ffe1 	bl	8979c <__pow5mult>
   887da:	4605      	mov	r5, r0
   887dc:	e5b1      	b.n	88342 <_dtoa_r+0x6aa>
   887de:	900e      	str	r0, [sp, #56]	; 0x38
   887e0:	e564      	b.n	882ac <_dtoa_r+0x614>
   887e2:	f000 8111 	beq.w	88a08 <_dtoa_r+0xd70>
   887e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
   887ea:	9a07      	ldr	r2, [sp, #28]
   887ec:	4b4f      	ldr	r3, [pc, #316]	; (8892c <_dtoa_r+0xc94>)
   887ee:	4256      	negs	r6, r2
   887f0:	f006 020f 	and.w	r2, r6, #15
   887f4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   887f8:	e9d3 2300 	ldrd	r2, r3, [r3]
   887fc:	f003 fd20 	bl	8c240 <__aeabi_dmul>
   88800:	1136      	asrs	r6, r6, #4
   88802:	4680      	mov	r8, r0
   88804:	4689      	mov	r9, r1
   88806:	f000 8170 	beq.w	88aea <_dtoa_r+0xe52>
   8880a:	2300      	movs	r3, #0
   8880c:	f04f 0a02 	mov.w	sl, #2
   88810:	4f47      	ldr	r7, [pc, #284]	; (88930 <_dtoa_r+0xc98>)
   88812:	07f2      	lsls	r2, r6, #31
   88814:	d506      	bpl.n	88824 <_dtoa_r+0xb8c>
   88816:	e9d7 2300 	ldrd	r2, r3, [r7]
   8881a:	f003 fd11 	bl	8c240 <__aeabi_dmul>
   8881e:	2301      	movs	r3, #1
   88820:	f10a 0a01 	add.w	sl, sl, #1
   88824:	1076      	asrs	r6, r6, #1
   88826:	f107 0708 	add.w	r7, r7, #8
   8882a:	d1f2      	bne.n	88812 <_dtoa_r+0xb7a>
   8882c:	2b00      	cmp	r3, #0
   8882e:	f43f abb1 	beq.w	87f94 <_dtoa_r+0x2fc>
   88832:	4680      	mov	r8, r0
   88834:	4689      	mov	r9, r1
   88836:	f7ff bbad 	b.w	87f94 <_dtoa_r+0x2fc>
   8883a:	9b04      	ldr	r3, [sp, #16]
   8883c:	2b00      	cmp	r3, #0
   8883e:	f47f ae46 	bne.w	884ce <_dtoa_r+0x836>
   88842:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
   88846:	f3c2 0313 	ubfx	r3, r2, #0, #20
   8884a:	2b00      	cmp	r3, #0
   8884c:	f43f af18 	beq.w	88680 <_dtoa_r+0x9e8>
   88850:	e63d      	b.n	884ce <_dtoa_r+0x836>
   88852:	2a00      	cmp	r2, #0
   88854:	dd12      	ble.n	8887c <_dtoa_r+0xbe4>
   88856:	4629      	mov	r1, r5
   88858:	2201      	movs	r2, #1
   8885a:	4620      	mov	r0, r4
   8885c:	9304      	str	r3, [sp, #16]
   8885e:	f000 fff9 	bl	89854 <__lshift>
   88862:	4649      	mov	r1, r9
   88864:	4605      	mov	r5, r0
   88866:	f001 f86b 	bl	89940 <__mcmp>
   8886a:	2800      	cmp	r0, #0
   8886c:	9b04      	ldr	r3, [sp, #16]
   8886e:	f340 8117 	ble.w	88aa0 <_dtoa_r+0xe08>
   88872:	2b39      	cmp	r3, #57	; 0x39
   88874:	f000 80fb 	beq.w	88a6e <_dtoa_r+0xdd6>
   88878:	f10b 0331 	add.w	r3, fp, #49	; 0x31
   8887c:	46ba      	mov	sl, r7
   8887e:	9a07      	ldr	r2, [sp, #28]
   88880:	4637      	mov	r7, r6
   88882:	3201      	adds	r2, #1
   88884:	4646      	mov	r6, r8
   88886:	9207      	str	r2, [sp, #28]
   88888:	f80a 3b01 	strb.w	r3, [sl], #1
   8888c:	e5e1      	b.n	88452 <_dtoa_r+0x7ba>
   8888e:	9509      	str	r5, [sp, #36]	; 0x24
   88890:	9c06      	ldr	r4, [sp, #24]
   88892:	9d04      	ldr	r5, [sp, #16]
   88894:	4602      	mov	r2, r0
   88896:	460b      	mov	r3, r1
   88898:	f003 fb1c 	bl	8bed4 <__adddf3>
   8889c:	4652      	mov	r2, sl
   8889e:	465b      	mov	r3, fp
   888a0:	4680      	mov	r8, r0
   888a2:	4689      	mov	r9, r1
   888a4:	f003 ff5c 	bl	8c760 <__aeabi_dcmpgt>
   888a8:	b960      	cbnz	r0, 888c4 <_dtoa_r+0xc2c>
   888aa:	4652      	mov	r2, sl
   888ac:	465b      	mov	r3, fp
   888ae:	4640      	mov	r0, r8
   888b0:	4649      	mov	r1, r9
   888b2:	f003 ff2d 	bl	8c710 <__aeabi_dcmpeq>
   888b6:	2800      	cmp	r0, #0
   888b8:	f43f accb 	beq.w	88252 <_dtoa_r+0x5ba>
   888bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   888be:	07d9      	lsls	r1, r3, #31
   888c0:	f57f acc7 	bpl.w	88252 <_dtoa_r+0x5ba>
   888c4:	9a03      	ldr	r2, [sp, #12]
   888c6:	f7ff bbff 	b.w	880c8 <_dtoa_r+0x430>
   888ca:	4620      	mov	r0, r4
   888cc:	6871      	ldr	r1, [r6, #4]
   888ce:	f000 fdbb 	bl	89448 <_Balloc>
   888d2:	4607      	mov	r7, r0
   888d4:	2800      	cmp	r0, #0
   888d6:	f000 810c 	beq.w	88af2 <_dtoa_r+0xe5a>
   888da:	6933      	ldr	r3, [r6, #16]
   888dc:	f106 010c 	add.w	r1, r6, #12
   888e0:	3302      	adds	r3, #2
   888e2:	009a      	lsls	r2, r3, #2
   888e4:	300c      	adds	r0, #12
   888e6:	f7fd fa91 	bl	85e0c <memcpy>
   888ea:	4639      	mov	r1, r7
   888ec:	2201      	movs	r2, #1
   888ee:	4620      	mov	r0, r4
   888f0:	f000 ffb0 	bl	89854 <__lshift>
   888f4:	4680      	mov	r8, r0
   888f6:	e610      	b.n	8851a <_dtoa_r+0x882>
   888f8:	4629      	mov	r1, r5
   888fa:	4620      	mov	r0, r4
   888fc:	f000 ff4e 	bl	8979c <__pow5mult>
   88900:	4605      	mov	r5, r0
   88902:	e51e      	b.n	88342 <_dtoa_r+0x6aa>
   88904:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   88908:	1a9f      	subs	r7, r3, r2
   8890a:	e4c2      	b.n	88292 <_dtoa_r+0x5fa>
   8890c:	2b39      	cmp	r3, #57	; 0x39
   8890e:	f000 80ae 	beq.w	88a6e <_dtoa_r+0xdd6>
   88912:	46ba      	mov	sl, r7
   88914:	3301      	adds	r3, #1
   88916:	e7b2      	b.n	8887e <_dtoa_r+0xbe6>
   88918:	9a07      	ldr	r2, [sp, #28]
   8891a:	4637      	mov	r7, r6
   8891c:	3201      	adds	r2, #1
   8891e:	4646      	mov	r6, r8
   88920:	9207      	str	r2, [sp, #28]
   88922:	e577      	b.n	88414 <_dtoa_r+0x77c>
   88924:	0008cbc0 	.word	0x0008cbc0
   88928:	7ff00000 	.word	0x7ff00000
   8892c:	0008cd10 	.word	0x0008cd10
   88930:	0008cce8 	.word	0x0008cce8
   88934:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
   88938:	4983      	ldr	r1, [pc, #524]	; (88b48 <_dtoa_r+0xeb0>)
   8893a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   8893e:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
   88942:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   88946:	f003 fc7b 	bl	8c240 <__aeabi_dmul>
   8894a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   8894e:	4649      	mov	r1, r9
   88950:	4640      	mov	r0, r8
   88952:	f003 ff25 	bl	8c7a0 <__aeabi_d2iz>
   88956:	4606      	mov	r6, r0
   88958:	f003 fc08 	bl	8c16c <__aeabi_i2d>
   8895c:	460b      	mov	r3, r1
   8895e:	4602      	mov	r2, r0
   88960:	4649      	mov	r1, r9
   88962:	4640      	mov	r0, r8
   88964:	f003 fab4 	bl	8bed0 <__aeabi_dsub>
   88968:	4653      	mov	r3, sl
   8896a:	9f03      	ldr	r7, [sp, #12]
   8896c:	3630      	adds	r6, #48	; 0x30
   8896e:	2b01      	cmp	r3, #1
   88970:	4680      	mov	r8, r0
   88972:	4689      	mov	r9, r1
   88974:	f807 6b01 	strb.w	r6, [r7], #1
   88978:	f000 80ac 	beq.w	88ad4 <_dtoa_r+0xe3c>
   8897c:	9e13      	ldr	r6, [sp, #76]	; 0x4c
   8897e:	9b03      	ldr	r3, [sp, #12]
   88980:	441e      	add	r6, r3
   88982:	2200      	movs	r2, #0
   88984:	4b71      	ldr	r3, [pc, #452]	; (88b4c <_dtoa_r+0xeb4>)
   88986:	4640      	mov	r0, r8
   88988:	4649      	mov	r1, r9
   8898a:	f003 fc59 	bl	8c240 <__aeabi_dmul>
   8898e:	4689      	mov	r9, r1
   88990:	4680      	mov	r8, r0
   88992:	f003 ff05 	bl	8c7a0 <__aeabi_d2iz>
   88996:	4682      	mov	sl, r0
   88998:	f003 fbe8 	bl	8c16c <__aeabi_i2d>
   8899c:	4602      	mov	r2, r0
   8899e:	460b      	mov	r3, r1
   889a0:	4640      	mov	r0, r8
   889a2:	4649      	mov	r1, r9
   889a4:	f003 fa94 	bl	8bed0 <__aeabi_dsub>
   889a8:	f10a 0a30 	add.w	sl, sl, #48	; 0x30
   889ac:	f807 ab01 	strb.w	sl, [r7], #1
   889b0:	42b7      	cmp	r7, r6
   889b2:	4680      	mov	r8, r0
   889b4:	4689      	mov	r9, r1
   889b6:	d1e4      	bne.n	88982 <_dtoa_r+0xcea>
   889b8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   889bc:	2200      	movs	r2, #0
   889be:	4b64      	ldr	r3, [pc, #400]	; (88b50 <_dtoa_r+0xeb8>)
   889c0:	f003 fa88 	bl	8bed4 <__adddf3>
   889c4:	4642      	mov	r2, r8
   889c6:	464b      	mov	r3, r9
   889c8:	f003 feac 	bl	8c724 <__aeabi_dcmplt>
   889cc:	2800      	cmp	r0, #0
   889ce:	d162      	bne.n	88a96 <_dtoa_r+0xdfe>
   889d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   889d4:	2000      	movs	r0, #0
   889d6:	495e      	ldr	r1, [pc, #376]	; (88b50 <_dtoa_r+0xeb8>)
   889d8:	f003 fa7a 	bl	8bed0 <__aeabi_dsub>
   889dc:	4642      	mov	r2, r8
   889de:	464b      	mov	r3, r9
   889e0:	f003 febe 	bl	8c760 <__aeabi_dcmpgt>
   889e4:	2800      	cmp	r0, #0
   889e6:	f43f aba9 	beq.w	8813c <_dtoa_r+0x4a4>
   889ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
   889ee:	46b2      	mov	sl, r6
   889f0:	2b30      	cmp	r3, #48	; 0x30
   889f2:	f106 36ff 	add.w	r6, r6, #4294967295
   889f6:	d0f8      	beq.n	889ea <_dtoa_r+0xd52>
   889f8:	9b14      	ldr	r3, [sp, #80]	; 0x50
   889fa:	3301      	adds	r3, #1
   889fc:	9307      	str	r3, [sp, #28]
   889fe:	e538      	b.n	88472 <_dtoa_r+0x7da>
   88a00:	9b16      	ldr	r3, [sp, #88]	; 0x58
   88a02:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   88a06:	e6d5      	b.n	887b4 <_dtoa_r+0xb1c>
   88a08:	f04f 0a02 	mov.w	sl, #2
   88a0c:	e9dd 890a 	ldrd	r8, r9, [sp, #40]	; 0x28
   88a10:	f7ff bac0 	b.w	87f94 <_dtoa_r+0x2fc>
   88a14:	9b08      	ldr	r3, [sp, #32]
   88a16:	2b00      	cmp	r3, #0
   88a18:	f43f ab62 	beq.w	880e0 <_dtoa_r+0x448>
   88a1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88a1e:	2b00      	cmp	r3, #0
   88a20:	f77f ab8c 	ble.w	8813c <_dtoa_r+0x4a4>
   88a24:	9313      	str	r3, [sp, #76]	; 0x4c
   88a26:	9b07      	ldr	r3, [sp, #28]
   88a28:	2200      	movs	r2, #0
   88a2a:	3b01      	subs	r3, #1
   88a2c:	4640      	mov	r0, r8
   88a2e:	4649      	mov	r1, r9
   88a30:	9314      	str	r3, [sp, #80]	; 0x50
   88a32:	4b46      	ldr	r3, [pc, #280]	; (88b4c <_dtoa_r+0xeb4>)
   88a34:	f003 fc04 	bl	8c240 <__aeabi_dmul>
   88a38:	4680      	mov	r8, r0
   88a3a:	4689      	mov	r9, r1
   88a3c:	f10a 0001 	add.w	r0, sl, #1
   88a40:	f003 fb94 	bl	8c16c <__aeabi_i2d>
   88a44:	4642      	mov	r2, r8
   88a46:	464b      	mov	r3, r9
   88a48:	f003 fbfa 	bl	8c240 <__aeabi_dmul>
   88a4c:	4b41      	ldr	r3, [pc, #260]	; (88b54 <_dtoa_r+0xebc>)
   88a4e:	2200      	movs	r2, #0
   88a50:	f003 fa40 	bl	8bed4 <__adddf3>
   88a54:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
   88a58:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   88a5c:	9311      	str	r3, [sp, #68]	; 0x44
   88a5e:	f7ff babc 	b.w	87fda <_dtoa_r+0x342>
   88a62:	9b07      	ldr	r3, [sp, #28]
   88a64:	3301      	adds	r3, #1
   88a66:	9307      	str	r3, [sp, #28]
   88a68:	2331      	movs	r3, #49	; 0x31
   88a6a:	f7ff bb34 	b.w	880d6 <_dtoa_r+0x43e>
   88a6e:	9b07      	ldr	r3, [sp, #28]
   88a70:	46bb      	mov	fp, r7
   88a72:	3301      	adds	r3, #1
   88a74:	9307      	str	r3, [sp, #28]
   88a76:	2339      	movs	r3, #57	; 0x39
   88a78:	4637      	mov	r7, r6
   88a7a:	f80b 3b01 	strb.w	r3, [fp], #1
   88a7e:	4646      	mov	r6, r8
   88a80:	e4d7      	b.n	88432 <_dtoa_r+0x79a>
   88a82:	f04f 0900 	mov.w	r9, #0
   88a86:	464e      	mov	r6, r9
   88a88:	e649      	b.n	8871e <_dtoa_r+0xa86>
   88a8a:	469a      	mov	sl, r3
   88a8c:	e468      	b.n	88360 <_dtoa_r+0x6c8>
   88a8e:	9d10      	ldr	r5, [sp, #64]	; 0x40
   88a90:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   88a92:	46b2      	mov	sl, r6
   88a94:	e7b0      	b.n	889f8 <_dtoa_r+0xd60>
   88a96:	9b14      	ldr	r3, [sp, #80]	; 0x50
   88a98:	9a03      	ldr	r2, [sp, #12]
   88a9a:	9307      	str	r3, [sp, #28]
   88a9c:	f7ff bb14 	b.w	880c8 <_dtoa_r+0x430>
   88aa0:	f47f aeec 	bne.w	8887c <_dtoa_r+0xbe4>
   88aa4:	07da      	lsls	r2, r3, #31
   88aa6:	f57f aee9 	bpl.w	8887c <_dtoa_r+0xbe4>
   88aaa:	e6e2      	b.n	88872 <_dtoa_r+0xbda>
   88aac:	f8dd b054 	ldr.w	fp, [sp, #84]	; 0x54
   88ab0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   88ab2:	9c13      	ldr	r4, [sp, #76]	; 0x4c
   88ab4:	f7ff bb42 	b.w	8813c <_dtoa_r+0x4a4>
   88ab8:	2b39      	cmp	r3, #57	; 0x39
   88aba:	d0d8      	beq.n	88a6e <_dtoa_r+0xdd6>
   88abc:	f1ba 0f00 	cmp.w	sl, #0
   88ac0:	f73f aeda 	bgt.w	88878 <_dtoa_r+0xbe0>
   88ac4:	e6da      	b.n	8887c <_dtoa_r+0xbe4>
   88ac6:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88ac8:	2b02      	cmp	r3, #2
   88aca:	f73f ae13 	bgt.w	886f4 <_dtoa_r+0xa5c>
   88ace:	f8cd 801c 	str.w	r8, [sp, #28]
   88ad2:	e59c      	b.n	8860e <_dtoa_r+0x976>
   88ad4:	463e      	mov	r6, r7
   88ad6:	e76f      	b.n	889b8 <_dtoa_r+0xd20>
   88ad8:	9b22      	ldr	r3, [sp, #136]	; 0x88
   88ada:	2b02      	cmp	r3, #2
   88adc:	f73f ae0a 	bgt.w	886f4 <_dtoa_r+0xa5c>
   88ae0:	9b12      	ldr	r3, [sp, #72]	; 0x48
   88ae2:	f8cd 801c 	str.w	r8, [sp, #28]
   88ae6:	9308      	str	r3, [sp, #32]
   88ae8:	e50f      	b.n	8850a <_dtoa_r+0x872>
   88aea:	f04f 0a02 	mov.w	sl, #2
   88aee:	f7ff ba51 	b.w	87f94 <_dtoa_r+0x2fc>
   88af2:	4602      	mov	r2, r0
   88af4:	f240 21ea 	movw	r1, #746	; 0x2ea
   88af8:	4b17      	ldr	r3, [pc, #92]	; (88b58 <_dtoa_r+0xec0>)
   88afa:	4818      	ldr	r0, [pc, #96]	; (88b5c <_dtoa_r+0xec4>)
   88afc:	f001 f956 	bl	89dac <__assert_func>
   88b00:	2600      	movs	r6, #0
   88b02:	4620      	mov	r0, r4
   88b04:	4631      	mov	r1, r6
   88b06:	6466      	str	r6, [r4, #68]	; 0x44
   88b08:	f000 fc9e 	bl	89448 <_Balloc>
   88b0c:	9003      	str	r0, [sp, #12]
   88b0e:	b978      	cbnz	r0, 88b30 <_dtoa_r+0xe98>
   88b10:	2200      	movs	r2, #0
   88b12:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
   88b16:	4b10      	ldr	r3, [pc, #64]	; (88b58 <_dtoa_r+0xec0>)
   88b18:	4810      	ldr	r0, [pc, #64]	; (88b5c <_dtoa_r+0xec4>)
   88b1a:	f001 f947 	bl	89dac <__assert_func>
   88b1e:	4b10      	ldr	r3, [pc, #64]	; (88b60 <_dtoa_r+0xec8>)
   88b20:	9303      	str	r3, [sp, #12]
   88b22:	f7ff b8f4 	b.w	87d0e <_dtoa_r+0x76>
   88b26:	f43f ac33 	beq.w	88390 <_dtoa_r+0x6f8>
   88b2a:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   88b2e:	e4b5      	b.n	8849c <_dtoa_r+0x804>
   88b30:	9b03      	ldr	r3, [sp, #12]
   88b32:	2201      	movs	r2, #1
   88b34:	6423      	str	r3, [r4, #64]	; 0x40
   88b36:	f04f 33ff 	mov.w	r3, #4294967295
   88b3a:	9623      	str	r6, [sp, #140]	; 0x8c
   88b3c:	9312      	str	r3, [sp, #72]	; 0x48
   88b3e:	920c      	str	r2, [sp, #48]	; 0x30
   88b40:	9308      	str	r3, [sp, #32]
   88b42:	f7ff bafb 	b.w	8813c <_dtoa_r+0x4a4>
   88b46:	bf00      	nop
   88b48:	0008cd10 	.word	0x0008cd10
   88b4c:	40240000 	.word	0x40240000
   88b50:	3fe00000 	.word	0x3fe00000
   88b54:	401c0000 	.word	0x401c0000
   88b58:	0008cbd0 	.word	0x0008cbd0
   88b5c:	0008cbe4 	.word	0x0008cbe4
   88b60:	0008cbc4 	.word	0x0008cbc4

00088b64 <__libc_fini_array>:
   88b64:	b538      	push	{r3, r4, r5, lr}
   88b66:	4b08      	ldr	r3, [pc, #32]	; (88b88 <__libc_fini_array+0x24>)
   88b68:	4d08      	ldr	r5, [pc, #32]	; (88b8c <__libc_fini_array+0x28>)
   88b6a:	1b5b      	subs	r3, r3, r5
   88b6c:	109c      	asrs	r4, r3, #2
   88b6e:	d007      	beq.n	88b80 <__libc_fini_array+0x1c>
   88b70:	3b04      	subs	r3, #4
   88b72:	441d      	add	r5, r3
   88b74:	3c01      	subs	r4, #1
   88b76:	f855 3904 	ldr.w	r3, [r5], #-4
   88b7a:	4798      	blx	r3
   88b7c:	2c00      	cmp	r4, #0
   88b7e:	d1f9      	bne.n	88b74 <__libc_fini_array+0x10>
   88b80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   88b84:	f004 b9f2 	b.w	8cf6c <_fini>
   88b88:	0008cf7c 	.word	0x0008cf7c
   88b8c:	0008cf78 	.word	0x0008cf78

00088b90 <_malloc_trim_r>:
   88b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88b92:	460c      	mov	r4, r1
   88b94:	4f23      	ldr	r7, [pc, #140]	; (88c24 <_malloc_trim_r+0x94>)
   88b96:	4606      	mov	r6, r0
   88b98:	f000 fc4a 	bl	89430 <__malloc_lock>
   88b9c:	68bb      	ldr	r3, [r7, #8]
   88b9e:	685d      	ldr	r5, [r3, #4]
   88ba0:	f5c4 637e 	rsb	r3, r4, #4064	; 0xfe0
   88ba4:	f025 0503 	bic.w	r5, r5, #3
   88ba8:	330f      	adds	r3, #15
   88baa:	442b      	add	r3, r5
   88bac:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
   88bb0:	f023 030f 	bic.w	r3, r3, #15
   88bb4:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
   88bb8:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   88bbc:	db07      	blt.n	88bce <_malloc_trim_r+0x3e>
   88bbe:	2100      	movs	r1, #0
   88bc0:	4630      	mov	r0, r6
   88bc2:	f001 f81d 	bl	89c00 <_sbrk_r>
   88bc6:	68bb      	ldr	r3, [r7, #8]
   88bc8:	442b      	add	r3, r5
   88bca:	4298      	cmp	r0, r3
   88bcc:	d004      	beq.n	88bd8 <_malloc_trim_r+0x48>
   88bce:	4630      	mov	r0, r6
   88bd0:	f000 fc34 	bl	8943c <__malloc_unlock>
   88bd4:	2000      	movs	r0, #0
   88bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88bd8:	4630      	mov	r0, r6
   88bda:	4261      	negs	r1, r4
   88bdc:	f001 f810 	bl	89c00 <_sbrk_r>
   88be0:	3001      	adds	r0, #1
   88be2:	d00d      	beq.n	88c00 <_malloc_trim_r+0x70>
   88be4:	4a10      	ldr	r2, [pc, #64]	; (88c28 <_malloc_trim_r+0x98>)
   88be6:	68bb      	ldr	r3, [r7, #8]
   88be8:	1b2d      	subs	r5, r5, r4
   88bea:	f045 0501 	orr.w	r5, r5, #1
   88bee:	605d      	str	r5, [r3, #4]
   88bf0:	6813      	ldr	r3, [r2, #0]
   88bf2:	4630      	mov	r0, r6
   88bf4:	1b1b      	subs	r3, r3, r4
   88bf6:	6013      	str	r3, [r2, #0]
   88bf8:	f000 fc20 	bl	8943c <__malloc_unlock>
   88bfc:	2001      	movs	r0, #1
   88bfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   88c00:	2100      	movs	r1, #0
   88c02:	4630      	mov	r0, r6
   88c04:	f000 fffc 	bl	89c00 <_sbrk_r>
   88c08:	68ba      	ldr	r2, [r7, #8]
   88c0a:	1a83      	subs	r3, r0, r2
   88c0c:	2b0f      	cmp	r3, #15
   88c0e:	ddde      	ble.n	88bce <_malloc_trim_r+0x3e>
   88c10:	f043 0301 	orr.w	r3, r3, #1
   88c14:	6053      	str	r3, [r2, #4]
   88c16:	4b05      	ldr	r3, [pc, #20]	; (88c2c <_malloc_trim_r+0x9c>)
   88c18:	4903      	ldr	r1, [pc, #12]	; (88c28 <_malloc_trim_r+0x98>)
   88c1a:	681b      	ldr	r3, [r3, #0]
   88c1c:	1ac0      	subs	r0, r0, r3
   88c1e:	6008      	str	r0, [r1, #0]
   88c20:	e7d5      	b.n	88bce <_malloc_trim_r+0x3e>
   88c22:	bf00      	nop
   88c24:	20070f64 	.word	0x20070f64
   88c28:	20073320 	.word	0x20073320
   88c2c:	2007136c 	.word	0x2007136c

00088c30 <_free_r>:
   88c30:	2900      	cmp	r1, #0
   88c32:	d05e      	beq.n	88cf2 <_free_r+0xc2>
   88c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88c36:	460c      	mov	r4, r1
   88c38:	4606      	mov	r6, r0
   88c3a:	f000 fbf9 	bl	89430 <__malloc_lock>
   88c3e:	f854 2c04 	ldr.w	r2, [r4, #-4]
   88c42:	4f78      	ldr	r7, [pc, #480]	; (88e24 <_free_r+0x1f4>)
   88c44:	f1a4 0508 	sub.w	r5, r4, #8
   88c48:	f022 0101 	bic.w	r1, r2, #1
   88c4c:	1868      	adds	r0, r5, r1
   88c4e:	f8d7 c008 	ldr.w	ip, [r7, #8]
   88c52:	6843      	ldr	r3, [r0, #4]
   88c54:	4584      	cmp	ip, r0
   88c56:	f023 0303 	bic.w	r3, r3, #3
   88c5a:	f000 8087 	beq.w	88d6c <_free_r+0x13c>
   88c5e:	07d2      	lsls	r2, r2, #31
   88c60:	6043      	str	r3, [r0, #4]
   88c62:	d434      	bmi.n	88cce <_free_r+0x9e>
   88c64:	f854 2c08 	ldr.w	r2, [r4, #-8]
   88c68:	f107 0408 	add.w	r4, r7, #8
   88c6c:	1aad      	subs	r5, r5, r2
   88c6e:	4411      	add	r1, r2
   88c70:	68aa      	ldr	r2, [r5, #8]
   88c72:	42a2      	cmp	r2, r4
   88c74:	d068      	beq.n	88d48 <_free_r+0x118>
   88c76:	eb00 0c03 	add.w	ip, r0, r3
   88c7a:	f8dc e004 	ldr.w	lr, [ip, #4]
   88c7e:	f8d5 c00c 	ldr.w	ip, [r5, #12]
   88c82:	f01e 0f01 	tst.w	lr, #1
   88c86:	f8c2 c00c 	str.w	ip, [r2, #12]
   88c8a:	f8cc 2008 	str.w	r2, [ip, #8]
   88c8e:	f000 8091 	beq.w	88db4 <_free_r+0x184>
   88c92:	f041 0301 	orr.w	r3, r1, #1
   88c96:	606b      	str	r3, [r5, #4]
   88c98:	6001      	str	r1, [r0, #0]
   88c9a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   88c9e:	d231      	bcs.n	88d04 <_free_r+0xd4>
   88ca0:	094a      	lsrs	r2, r1, #5
   88ca2:	08cb      	lsrs	r3, r1, #3
   88ca4:	2101      	movs	r1, #1
   88ca6:	4091      	lsls	r1, r2
   88ca8:	687a      	ldr	r2, [r7, #4]
   88caa:	3301      	adds	r3, #1
   88cac:	4311      	orrs	r1, r2
   88cae:	6079      	str	r1, [r7, #4]
   88cb0:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
   88cb4:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
   88cb8:	3a08      	subs	r2, #8
   88cba:	e9c5 1202 	strd	r1, r2, [r5, #8]
   88cbe:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
   88cc2:	60cd      	str	r5, [r1, #12]
   88cc4:	4630      	mov	r0, r6
   88cc6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   88cca:	f000 bbb7 	b.w	8943c <__malloc_unlock>
   88cce:	18c2      	adds	r2, r0, r3
   88cd0:	6852      	ldr	r2, [r2, #4]
   88cd2:	07d2      	lsls	r2, r2, #31
   88cd4:	d40e      	bmi.n	88cf4 <_free_r+0xc4>
   88cd6:	4419      	add	r1, r3
   88cd8:	f107 0408 	add.w	r4, r7, #8
   88cdc:	6883      	ldr	r3, [r0, #8]
   88cde:	42a3      	cmp	r3, r4
   88ce0:	d070      	beq.n	88dc4 <_free_r+0x194>
   88ce2:	68c2      	ldr	r2, [r0, #12]
   88ce4:	60da      	str	r2, [r3, #12]
   88ce6:	6093      	str	r3, [r2, #8]
   88ce8:	f041 0301 	orr.w	r3, r1, #1
   88cec:	606b      	str	r3, [r5, #4]
   88cee:	5069      	str	r1, [r5, r1]
   88cf0:	e7d3      	b.n	88c9a <_free_r+0x6a>
   88cf2:	4770      	bx	lr
   88cf4:	f041 0301 	orr.w	r3, r1, #1
   88cf8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   88cfc:	f844 3c04 	str.w	r3, [r4, #-4]
   88d00:	6001      	str	r1, [r0, #0]
   88d02:	d3cd      	bcc.n	88ca0 <_free_r+0x70>
   88d04:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
   88d08:	ea4f 2351 	mov.w	r3, r1, lsr #9
   88d0c:	d247      	bcs.n	88d9e <_free_r+0x16e>
   88d0e:	098b      	lsrs	r3, r1, #6
   88d10:	f103 0039 	add.w	r0, r3, #57	; 0x39
   88d14:	f103 0238 	add.w	r2, r3, #56	; 0x38
   88d18:	00c3      	lsls	r3, r0, #3
   88d1a:	18f8      	adds	r0, r7, r3
   88d1c:	58fb      	ldr	r3, [r7, r3]
   88d1e:	3808      	subs	r0, #8
   88d20:	4298      	cmp	r0, r3
   88d22:	d058      	beq.n	88dd6 <_free_r+0x1a6>
   88d24:	685a      	ldr	r2, [r3, #4]
   88d26:	f022 0203 	bic.w	r2, r2, #3
   88d2a:	428a      	cmp	r2, r1
   88d2c:	d902      	bls.n	88d34 <_free_r+0x104>
   88d2e:	689b      	ldr	r3, [r3, #8]
   88d30:	4298      	cmp	r0, r3
   88d32:	d1f7      	bne.n	88d24 <_free_r+0xf4>
   88d34:	68d8      	ldr	r0, [r3, #12]
   88d36:	e9c5 3002 	strd	r3, r0, [r5, #8]
   88d3a:	6085      	str	r5, [r0, #8]
   88d3c:	4630      	mov	r0, r6
   88d3e:	60dd      	str	r5, [r3, #12]
   88d40:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   88d44:	f000 bb7a 	b.w	8943c <__malloc_unlock>
   88d48:	18c2      	adds	r2, r0, r3
   88d4a:	6852      	ldr	r2, [r2, #4]
   88d4c:	07d2      	lsls	r2, r2, #31
   88d4e:	d463      	bmi.n	88e18 <_free_r+0x1e8>
   88d50:	440b      	add	r3, r1
   88d52:	e9d0 1202 	ldrd	r1, r2, [r0, #8]
   88d56:	60ca      	str	r2, [r1, #12]
   88d58:	6091      	str	r1, [r2, #8]
   88d5a:	f043 0201 	orr.w	r2, r3, #1
   88d5e:	606a      	str	r2, [r5, #4]
   88d60:	4630      	mov	r0, r6
   88d62:	50eb      	str	r3, [r5, r3]
   88d64:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   88d68:	f000 bb68 	b.w	8943c <__malloc_unlock>
   88d6c:	440b      	add	r3, r1
   88d6e:	07d1      	lsls	r1, r2, #31
   88d70:	d407      	bmi.n	88d82 <_free_r+0x152>
   88d72:	f854 2c08 	ldr.w	r2, [r4, #-8]
   88d76:	1aad      	subs	r5, r5, r2
   88d78:	4413      	add	r3, r2
   88d7a:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
   88d7e:	60ca      	str	r2, [r1, #12]
   88d80:	6091      	str	r1, [r2, #8]
   88d82:	f043 0201 	orr.w	r2, r3, #1
   88d86:	606a      	str	r2, [r5, #4]
   88d88:	4a27      	ldr	r2, [pc, #156]	; (88e28 <_free_r+0x1f8>)
   88d8a:	60bd      	str	r5, [r7, #8]
   88d8c:	6812      	ldr	r2, [r2, #0]
   88d8e:	429a      	cmp	r2, r3
   88d90:	d898      	bhi.n	88cc4 <_free_r+0x94>
   88d92:	4b26      	ldr	r3, [pc, #152]	; (88e2c <_free_r+0x1fc>)
   88d94:	4630      	mov	r0, r6
   88d96:	6819      	ldr	r1, [r3, #0]
   88d98:	f7ff fefa 	bl	88b90 <_malloc_trim_r>
   88d9c:	e792      	b.n	88cc4 <_free_r+0x94>
   88d9e:	2b14      	cmp	r3, #20
   88da0:	d90a      	bls.n	88db8 <_free_r+0x188>
   88da2:	2b54      	cmp	r3, #84	; 0x54
   88da4:	d81f      	bhi.n	88de6 <_free_r+0x1b6>
   88da6:	0b0b      	lsrs	r3, r1, #12
   88da8:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   88dac:	f103 026e 	add.w	r2, r3, #110	; 0x6e
   88db0:	00c3      	lsls	r3, r0, #3
   88db2:	e7b2      	b.n	88d1a <_free_r+0xea>
   88db4:	4419      	add	r1, r3
   88db6:	e791      	b.n	88cdc <_free_r+0xac>
   88db8:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   88dbc:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   88dc0:	00c3      	lsls	r3, r0, #3
   88dc2:	e7aa      	b.n	88d1a <_free_r+0xea>
   88dc4:	f041 0301 	orr.w	r3, r1, #1
   88dc8:	e9c7 5504 	strd	r5, r5, [r7, #16]
   88dcc:	e9c5 4402 	strd	r4, r4, [r5, #8]
   88dd0:	606b      	str	r3, [r5, #4]
   88dd2:	5069      	str	r1, [r5, r1]
   88dd4:	e776      	b.n	88cc4 <_free_r+0x94>
   88dd6:	2101      	movs	r1, #1
   88dd8:	1092      	asrs	r2, r2, #2
   88dda:	fa01 f202 	lsl.w	r2, r1, r2
   88dde:	6879      	ldr	r1, [r7, #4]
   88de0:	430a      	orrs	r2, r1
   88de2:	607a      	str	r2, [r7, #4]
   88de4:	e7a7      	b.n	88d36 <_free_r+0x106>
   88de6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   88dea:	d806      	bhi.n	88dfa <_free_r+0x1ca>
   88dec:	0bcb      	lsrs	r3, r1, #15
   88dee:	f103 0078 	add.w	r0, r3, #120	; 0x78
   88df2:	f103 0277 	add.w	r2, r3, #119	; 0x77
   88df6:	00c3      	lsls	r3, r0, #3
   88df8:	e78f      	b.n	88d1a <_free_r+0xea>
   88dfa:	f240 5254 	movw	r2, #1364	; 0x554
   88dfe:	4293      	cmp	r3, r2
   88e00:	d806      	bhi.n	88e10 <_free_r+0x1e0>
   88e02:	0c8b      	lsrs	r3, r1, #18
   88e04:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   88e08:	f103 027c 	add.w	r2, r3, #124	; 0x7c
   88e0c:	00c3      	lsls	r3, r0, #3
   88e0e:	e784      	b.n	88d1a <_free_r+0xea>
   88e10:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   88e14:	227e      	movs	r2, #126	; 0x7e
   88e16:	e780      	b.n	88d1a <_free_r+0xea>
   88e18:	f041 0301 	orr.w	r3, r1, #1
   88e1c:	606b      	str	r3, [r5, #4]
   88e1e:	6001      	str	r1, [r0, #0]
   88e20:	e750      	b.n	88cc4 <_free_r+0x94>
   88e22:	bf00      	nop
   88e24:	20070f64 	.word	0x20070f64
   88e28:	20071370 	.word	0x20071370
   88e2c:	20073350 	.word	0x20073350

00088e30 <_localeconv_r>:
   88e30:	4800      	ldr	r0, [pc, #0]	; (88e34 <_localeconv_r+0x4>)
   88e32:	4770      	bx	lr
   88e34:	20071464 	.word	0x20071464

00088e38 <__retarget_lock_init_recursive>:
   88e38:	4770      	bx	lr
   88e3a:	bf00      	nop

00088e3c <__retarget_lock_close_recursive>:
   88e3c:	4770      	bx	lr
   88e3e:	bf00      	nop

00088e40 <__retarget_lock_acquire_recursive>:
   88e40:	4770      	bx	lr
   88e42:	bf00      	nop

00088e44 <__retarget_lock_release_recursive>:
   88e44:	4770      	bx	lr
   88e46:	bf00      	nop

00088e48 <_malloc_r>:
   88e48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   88e4c:	f101 050b 	add.w	r5, r1, #11
   88e50:	2d16      	cmp	r5, #22
   88e52:	4606      	mov	r6, r0
   88e54:	b083      	sub	sp, #12
   88e56:	d825      	bhi.n	88ea4 <_malloc_r+0x5c>
   88e58:	2910      	cmp	r1, #16
   88e5a:	f200 80b8 	bhi.w	88fce <_malloc_r+0x186>
   88e5e:	f000 fae7 	bl	89430 <__malloc_lock>
   88e62:	2510      	movs	r5, #16
   88e64:	2218      	movs	r2, #24
   88e66:	f04f 0c02 	mov.w	ip, #2
   88e6a:	4fb5      	ldr	r7, [pc, #724]	; (89140 <_malloc_r+0x2f8>)
   88e6c:	443a      	add	r2, r7
   88e6e:	6853      	ldr	r3, [r2, #4]
   88e70:	f1a2 0108 	sub.w	r1, r2, #8
   88e74:	428b      	cmp	r3, r1
   88e76:	f000 80b7 	beq.w	88fe8 <_malloc_r+0x1a0>
   88e7a:	685a      	ldr	r2, [r3, #4]
   88e7c:	68d9      	ldr	r1, [r3, #12]
   88e7e:	f022 0203 	bic.w	r2, r2, #3
   88e82:	441a      	add	r2, r3
   88e84:	689c      	ldr	r4, [r3, #8]
   88e86:	4630      	mov	r0, r6
   88e88:	60e1      	str	r1, [r4, #12]
   88e8a:	608c      	str	r4, [r1, #8]
   88e8c:	6851      	ldr	r1, [r2, #4]
   88e8e:	f103 0408 	add.w	r4, r3, #8
   88e92:	f041 0101 	orr.w	r1, r1, #1
   88e96:	6051      	str	r1, [r2, #4]
   88e98:	f000 fad0 	bl	8943c <__malloc_unlock>
   88e9c:	4620      	mov	r0, r4
   88e9e:	b003      	add	sp, #12
   88ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88ea4:	f035 0507 	bics.w	r5, r5, #7
   88ea8:	f100 8091 	bmi.w	88fce <_malloc_r+0x186>
   88eac:	42a9      	cmp	r1, r5
   88eae:	f200 808e 	bhi.w	88fce <_malloc_r+0x186>
   88eb2:	f000 fabd 	bl	89430 <__malloc_lock>
   88eb6:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   88eba:	f0c0 8194 	bcc.w	891e6 <_malloc_r+0x39e>
   88ebe:	0a6b      	lsrs	r3, r5, #9
   88ec0:	f000 808c 	beq.w	88fdc <_malloc_r+0x194>
   88ec4:	2b04      	cmp	r3, #4
   88ec6:	f200 816a 	bhi.w	8919e <_malloc_r+0x356>
   88eca:	09ab      	lsrs	r3, r5, #6
   88ecc:	f103 0c39 	add.w	ip, r3, #57	; 0x39
   88ed0:	f103 0438 	add.w	r4, r3, #56	; 0x38
   88ed4:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   88ed8:	4f99      	ldr	r7, [pc, #612]	; (89140 <_malloc_r+0x2f8>)
   88eda:	4438      	add	r0, r7
   88edc:	6843      	ldr	r3, [r0, #4]
   88ede:	3808      	subs	r0, #8
   88ee0:	4298      	cmp	r0, r3
   88ee2:	d106      	bne.n	88ef2 <_malloc_r+0xaa>
   88ee4:	e00c      	b.n	88f00 <_malloc_r+0xb8>
   88ee6:	2900      	cmp	r1, #0
   88ee8:	f280 8126 	bge.w	89138 <_malloc_r+0x2f0>
   88eec:	68db      	ldr	r3, [r3, #12]
   88eee:	4298      	cmp	r0, r3
   88ef0:	d006      	beq.n	88f00 <_malloc_r+0xb8>
   88ef2:	685a      	ldr	r2, [r3, #4]
   88ef4:	f022 0203 	bic.w	r2, r2, #3
   88ef8:	1b51      	subs	r1, r2, r5
   88efa:	290f      	cmp	r1, #15
   88efc:	ddf3      	ble.n	88ee6 <_malloc_r+0x9e>
   88efe:	46a4      	mov	ip, r4
   88f00:	693c      	ldr	r4, [r7, #16]
   88f02:	f8df e240 	ldr.w	lr, [pc, #576]	; 89144 <_malloc_r+0x2fc>
   88f06:	4574      	cmp	r4, lr
   88f08:	d07a      	beq.n	89000 <_malloc_r+0x1b8>
   88f0a:	6862      	ldr	r2, [r4, #4]
   88f0c:	f022 0203 	bic.w	r2, r2, #3
   88f10:	1b53      	subs	r3, r2, r5
   88f12:	2b0f      	cmp	r3, #15
   88f14:	f300 8176 	bgt.w	89204 <_malloc_r+0x3bc>
   88f18:	2b00      	cmp	r3, #0
   88f1a:	e9c7 ee04 	strd	lr, lr, [r7, #16]
   88f1e:	f280 8167 	bge.w	891f0 <_malloc_r+0x3a8>
   88f22:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
   88f26:	f080 8119 	bcs.w	8915c <_malloc_r+0x314>
   88f2a:	2101      	movs	r1, #1
   88f2c:	08d3      	lsrs	r3, r2, #3
   88f2e:	0952      	lsrs	r2, r2, #5
   88f30:	440b      	add	r3, r1
   88f32:	4091      	lsls	r1, r2
   88f34:	687a      	ldr	r2, [r7, #4]
   88f36:	f857 0033 	ldr.w	r0, [r7, r3, lsl #3]
   88f3a:	430a      	orrs	r2, r1
   88f3c:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
   88f40:	3908      	subs	r1, #8
   88f42:	60a0      	str	r0, [r4, #8]
   88f44:	60e1      	str	r1, [r4, #12]
   88f46:	607a      	str	r2, [r7, #4]
   88f48:	f847 4033 	str.w	r4, [r7, r3, lsl #3]
   88f4c:	60c4      	str	r4, [r0, #12]
   88f4e:	2101      	movs	r1, #1
   88f50:	ea4f 03ac 	mov.w	r3, ip, asr #2
   88f54:	4099      	lsls	r1, r3
   88f56:	4291      	cmp	r1, r2
   88f58:	d859      	bhi.n	8900e <_malloc_r+0x1c6>
   88f5a:	4211      	tst	r1, r2
   88f5c:	d106      	bne.n	88f6c <_malloc_r+0x124>
   88f5e:	f02c 0c03 	bic.w	ip, ip, #3
   88f62:	0049      	lsls	r1, r1, #1
   88f64:	4211      	tst	r1, r2
   88f66:	f10c 0c04 	add.w	ip, ip, #4
   88f6a:	d0fa      	beq.n	88f62 <_malloc_r+0x11a>
   88f6c:	eb07 09cc 	add.w	r9, r7, ip, lsl #3
   88f70:	4648      	mov	r0, r9
   88f72:	4664      	mov	r4, ip
   88f74:	f8d0 800c 	ldr.w	r8, [r0, #12]
   88f78:	4540      	cmp	r0, r8
   88f7a:	d108      	bne.n	88f8e <_malloc_r+0x146>
   88f7c:	e11c      	b.n	891b8 <_malloc_r+0x370>
   88f7e:	2b00      	cmp	r3, #0
   88f80:	f280 8121 	bge.w	891c6 <_malloc_r+0x37e>
   88f84:	f8d8 800c 	ldr.w	r8, [r8, #12]
   88f88:	4540      	cmp	r0, r8
   88f8a:	f000 8115 	beq.w	891b8 <_malloc_r+0x370>
   88f8e:	f8d8 2004 	ldr.w	r2, [r8, #4]
   88f92:	f022 0203 	bic.w	r2, r2, #3
   88f96:	1b53      	subs	r3, r2, r5
   88f98:	2b0f      	cmp	r3, #15
   88f9a:	ddf0      	ble.n	88f7e <_malloc_r+0x136>
   88f9c:	eb08 0105 	add.w	r1, r8, r5
   88fa0:	f045 0501 	orr.w	r5, r5, #1
   88fa4:	f8c8 5004 	str.w	r5, [r8, #4]
   88fa8:	4630      	mov	r0, r6
   88faa:	e9d8 6402 	ldrd	r6, r4, [r8, #8]
   88fae:	60f4      	str	r4, [r6, #12]
   88fb0:	60a6      	str	r6, [r4, #8]
   88fb2:	f043 0401 	orr.w	r4, r3, #1
   88fb6:	e9c7 1104 	strd	r1, r1, [r7, #16]
   88fba:	604c      	str	r4, [r1, #4]
   88fbc:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   88fc0:	f848 3002 	str.w	r3, [r8, r2]
   88fc4:	f000 fa3a 	bl	8943c <__malloc_unlock>
   88fc8:	f108 0408 	add.w	r4, r8, #8
   88fcc:	e002      	b.n	88fd4 <_malloc_r+0x18c>
   88fce:	230c      	movs	r3, #12
   88fd0:	2400      	movs	r4, #0
   88fd2:	6033      	str	r3, [r6, #0]
   88fd4:	4620      	mov	r0, r4
   88fd6:	b003      	add	sp, #12
   88fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   88fdc:	f44f 7000 	mov.w	r0, #512	; 0x200
   88fe0:	f04f 0c40 	mov.w	ip, #64	; 0x40
   88fe4:	243f      	movs	r4, #63	; 0x3f
   88fe6:	e777      	b.n	88ed8 <_malloc_r+0x90>
   88fe8:	68d3      	ldr	r3, [r2, #12]
   88fea:	429a      	cmp	r2, r3
   88fec:	bf08      	it	eq
   88fee:	f10c 0c02 	addeq.w	ip, ip, #2
   88ff2:	f47f af42 	bne.w	88e7a <_malloc_r+0x32>
   88ff6:	693c      	ldr	r4, [r7, #16]
   88ff8:	f8df e148 	ldr.w	lr, [pc, #328]	; 89144 <_malloc_r+0x2fc>
   88ffc:	4574      	cmp	r4, lr
   88ffe:	d184      	bne.n	88f0a <_malloc_r+0xc2>
   89000:	2101      	movs	r1, #1
   89002:	687a      	ldr	r2, [r7, #4]
   89004:	ea4f 03ac 	mov.w	r3, ip, asr #2
   89008:	4099      	lsls	r1, r3
   8900a:	4291      	cmp	r1, r2
   8900c:	d9a5      	bls.n	88f5a <_malloc_r+0x112>
   8900e:	68bc      	ldr	r4, [r7, #8]
   89010:	6863      	ldr	r3, [r4, #4]
   89012:	f023 0903 	bic.w	r9, r3, #3
   89016:	454d      	cmp	r5, r9
   89018:	d803      	bhi.n	89022 <_malloc_r+0x1da>
   8901a:	eba9 0305 	sub.w	r3, r9, r5
   8901e:	2b0f      	cmp	r3, #15
   89020:	dc7a      	bgt.n	89118 <_malloc_r+0x2d0>
   89022:	f8df b124 	ldr.w	fp, [pc, #292]	; 89148 <_malloc_r+0x300>
   89026:	4b49      	ldr	r3, [pc, #292]	; (8914c <_malloc_r+0x304>)
   89028:	f8db 2000 	ldr.w	r2, [fp]
   8902c:	681b      	ldr	r3, [r3, #0]
   8902e:	3201      	adds	r2, #1
   89030:	442b      	add	r3, r5
   89032:	eb04 0a09 	add.w	sl, r4, r9
   89036:	f000 812f 	beq.w	89298 <_malloc_r+0x450>
   8903a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   8903e:	330f      	adds	r3, #15
   89040:	f423 687f 	bic.w	r8, r3, #4080	; 0xff0
   89044:	f028 080f 	bic.w	r8, r8, #15
   89048:	4641      	mov	r1, r8
   8904a:	4630      	mov	r0, r6
   8904c:	f000 fdd8 	bl	89c00 <_sbrk_r>
   89050:	1c41      	adds	r1, r0, #1
   89052:	4602      	mov	r2, r0
   89054:	f000 80ef 	beq.w	89236 <_malloc_r+0x3ee>
   89058:	4582      	cmp	sl, r0
   8905a:	f200 80ea 	bhi.w	89232 <_malloc_r+0x3ea>
   8905e:	4b3c      	ldr	r3, [pc, #240]	; (89150 <_malloc_r+0x308>)
   89060:	6819      	ldr	r1, [r3, #0]
   89062:	4441      	add	r1, r8
   89064:	4608      	mov	r0, r1
   89066:	6019      	str	r1, [r3, #0]
   89068:	f000 8149 	beq.w	892fe <_malloc_r+0x4b6>
   8906c:	f8db 1000 	ldr.w	r1, [fp]
   89070:	9301      	str	r3, [sp, #4]
   89072:	3101      	adds	r1, #1
   89074:	bf1b      	ittet	ne
   89076:	eba2 0a0a 	subne.w	sl, r2, sl
   8907a:	4450      	addne	r0, sl
   8907c:	f8cb 2000 	streq.w	r2, [fp]
   89080:	6018      	strne	r0, [r3, #0]
   89082:	f012 0b07 	ands.w	fp, r2, #7
   89086:	f000 8111 	beq.w	892ac <_malloc_r+0x464>
   8908a:	f1cb 0108 	rsb	r1, fp, #8
   8908e:	440a      	add	r2, r1
   89090:	f5cb 5180 	rsb	r1, fp, #4096	; 0x1000
   89094:	4490      	add	r8, r2
   89096:	3108      	adds	r1, #8
   89098:	eba1 0108 	sub.w	r1, r1, r8
   8909c:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   890a0:	4651      	mov	r1, sl
   890a2:	4630      	mov	r0, r6
   890a4:	9200      	str	r2, [sp, #0]
   890a6:	f000 fdab 	bl	89c00 <_sbrk_r>
   890aa:	1c42      	adds	r2, r0, #1
   890ac:	e9dd 2300 	ldrd	r2, r3, [sp]
   890b0:	f000 814b 	beq.w	8934a <_malloc_r+0x502>
   890b4:	1a80      	subs	r0, r0, r2
   890b6:	eb00 080a 	add.w	r8, r0, sl
   890ba:	6819      	ldr	r1, [r3, #0]
   890bc:	f048 0001 	orr.w	r0, r8, #1
   890c0:	4451      	add	r1, sl
   890c2:	42bc      	cmp	r4, r7
   890c4:	60ba      	str	r2, [r7, #8]
   890c6:	6019      	str	r1, [r3, #0]
   890c8:	6050      	str	r0, [r2, #4]
   890ca:	f000 8124 	beq.w	89316 <_malloc_r+0x4ce>
   890ce:	f1b9 0f0f 	cmp.w	r9, #15
   890d2:	f240 8122 	bls.w	8931a <_malloc_r+0x4d2>
   890d6:	f04f 0e05 	mov.w	lr, #5
   890da:	6860      	ldr	r0, [r4, #4]
   890dc:	f1a9 0c0c 	sub.w	ip, r9, #12
   890e0:	f02c 0c07 	bic.w	ip, ip, #7
   890e4:	f000 0001 	and.w	r0, r0, #1
   890e8:	ea40 000c 	orr.w	r0, r0, ip
   890ec:	6060      	str	r0, [r4, #4]
   890ee:	f1bc 0f0f 	cmp.w	ip, #15
   890f2:	eb04 000c 	add.w	r0, r4, ip
   890f6:	e9c0 ee01 	strd	lr, lr, [r0, #4]
   890fa:	f200 812e 	bhi.w	8935a <_malloc_r+0x512>
   890fe:	4614      	mov	r4, r2
   89100:	6850      	ldr	r0, [r2, #4]
   89102:	4b14      	ldr	r3, [pc, #80]	; (89154 <_malloc_r+0x30c>)
   89104:	681a      	ldr	r2, [r3, #0]
   89106:	428a      	cmp	r2, r1
   89108:	bf38      	it	cc
   8910a:	6019      	strcc	r1, [r3, #0]
   8910c:	4b12      	ldr	r3, [pc, #72]	; (89158 <_malloc_r+0x310>)
   8910e:	681a      	ldr	r2, [r3, #0]
   89110:	428a      	cmp	r2, r1
   89112:	bf38      	it	cc
   89114:	6019      	strcc	r1, [r3, #0]
   89116:	e090      	b.n	8923a <_malloc_r+0x3f2>
   89118:	1962      	adds	r2, r4, r5
   8911a:	f043 0301 	orr.w	r3, r3, #1
   8911e:	f045 0501 	orr.w	r5, r5, #1
   89122:	6065      	str	r5, [r4, #4]
   89124:	4630      	mov	r0, r6
   89126:	60ba      	str	r2, [r7, #8]
   89128:	3408      	adds	r4, #8
   8912a:	6053      	str	r3, [r2, #4]
   8912c:	f000 f986 	bl	8943c <__malloc_unlock>
   89130:	4620      	mov	r0, r4
   89132:	b003      	add	sp, #12
   89134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89138:	68d9      	ldr	r1, [r3, #12]
   8913a:	441a      	add	r2, r3
   8913c:	e6a2      	b.n	88e84 <_malloc_r+0x3c>
   8913e:	bf00      	nop
   89140:	20070f64 	.word	0x20070f64
   89144:	20070f6c 	.word	0x20070f6c
   89148:	2007136c 	.word	0x2007136c
   8914c:	20073350 	.word	0x20073350
   89150:	20073320 	.word	0x20073320
   89154:	20073348 	.word	0x20073348
   89158:	2007334c 	.word	0x2007334c
   8915c:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
   89160:	ea4f 2352 	mov.w	r3, r2, lsr #9
   89164:	d35f      	bcc.n	89226 <_malloc_r+0x3de>
   89166:	2b14      	cmp	r3, #20
   89168:	f200 80b1 	bhi.w	892ce <_malloc_r+0x486>
   8916c:	f103 015c 	add.w	r1, r3, #92	; 0x5c
   89170:	00c9      	lsls	r1, r1, #3
   89172:	335b      	adds	r3, #91	; 0x5b
   89174:	1878      	adds	r0, r7, r1
   89176:	5879      	ldr	r1, [r7, r1]
   89178:	3808      	subs	r0, #8
   8917a:	4288      	cmp	r0, r1
   8917c:	f000 808f 	beq.w	8929e <_malloc_r+0x456>
   89180:	684b      	ldr	r3, [r1, #4]
   89182:	f023 0303 	bic.w	r3, r3, #3
   89186:	4293      	cmp	r3, r2
   89188:	d902      	bls.n	89190 <_malloc_r+0x348>
   8918a:	6889      	ldr	r1, [r1, #8]
   8918c:	4288      	cmp	r0, r1
   8918e:	d1f7      	bne.n	89180 <_malloc_r+0x338>
   89190:	68c8      	ldr	r0, [r1, #12]
   89192:	687a      	ldr	r2, [r7, #4]
   89194:	e9c4 1002 	strd	r1, r0, [r4, #8]
   89198:	6084      	str	r4, [r0, #8]
   8919a:	60cc      	str	r4, [r1, #12]
   8919c:	e6d7      	b.n	88f4e <_malloc_r+0x106>
   8919e:	2b14      	cmp	r3, #20
   891a0:	d959      	bls.n	89256 <_malloc_r+0x40e>
   891a2:	2b54      	cmp	r3, #84	; 0x54
   891a4:	f200 809b 	bhi.w	892de <_malloc_r+0x496>
   891a8:	0b2b      	lsrs	r3, r5, #12
   891aa:	f103 0c6f 	add.w	ip, r3, #111	; 0x6f
   891ae:	f103 046e 	add.w	r4, r3, #110	; 0x6e
   891b2:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   891b6:	e68f      	b.n	88ed8 <_malloc_r+0x90>
   891b8:	3401      	adds	r4, #1
   891ba:	07a3      	lsls	r3, r4, #30
   891bc:	f100 0008 	add.w	r0, r0, #8
   891c0:	f47f aed8 	bne.w	88f74 <_malloc_r+0x12c>
   891c4:	e053      	b.n	8926e <_malloc_r+0x426>
   891c6:	4644      	mov	r4, r8
   891c8:	4442      	add	r2, r8
   891ca:	6853      	ldr	r3, [r2, #4]
   891cc:	f8d8 100c 	ldr.w	r1, [r8, #12]
   891d0:	f043 0301 	orr.w	r3, r3, #1
   891d4:	6053      	str	r3, [r2, #4]
   891d6:	f854 3f08 	ldr.w	r3, [r4, #8]!
   891da:	4630      	mov	r0, r6
   891dc:	60d9      	str	r1, [r3, #12]
   891de:	608b      	str	r3, [r1, #8]
   891e0:	f000 f92c 	bl	8943c <__malloc_unlock>
   891e4:	e6f6      	b.n	88fd4 <_malloc_r+0x18c>
   891e6:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   891ea:	f105 0208 	add.w	r2, r5, #8
   891ee:	e63c      	b.n	88e6a <_malloc_r+0x22>
   891f0:	4422      	add	r2, r4
   891f2:	6853      	ldr	r3, [r2, #4]
   891f4:	4630      	mov	r0, r6
   891f6:	f043 0301 	orr.w	r3, r3, #1
   891fa:	6053      	str	r3, [r2, #4]
   891fc:	f000 f91e 	bl	8943c <__malloc_unlock>
   89200:	3408      	adds	r4, #8
   89202:	e6e7      	b.n	88fd4 <_malloc_r+0x18c>
   89204:	1961      	adds	r1, r4, r5
   89206:	f045 0501 	orr.w	r5, r5, #1
   8920a:	6065      	str	r5, [r4, #4]
   8920c:	f043 0501 	orr.w	r5, r3, #1
   89210:	e9c7 1104 	strd	r1, r1, [r7, #16]
   89214:	4630      	mov	r0, r6
   89216:	e9c1 ee02 	strd	lr, lr, [r1, #8]
   8921a:	604d      	str	r5, [r1, #4]
   8921c:	50a3      	str	r3, [r4, r2]
   8921e:	f000 f90d 	bl	8943c <__malloc_unlock>
   89222:	3408      	adds	r4, #8
   89224:	e6d6      	b.n	88fd4 <_malloc_r+0x18c>
   89226:	0993      	lsrs	r3, r2, #6
   89228:	f103 0139 	add.w	r1, r3, #57	; 0x39
   8922c:	00c9      	lsls	r1, r1, #3
   8922e:	3338      	adds	r3, #56	; 0x38
   89230:	e7a0      	b.n	89174 <_malloc_r+0x32c>
   89232:	42bc      	cmp	r4, r7
   89234:	d05e      	beq.n	892f4 <_malloc_r+0x4ac>
   89236:	68bc      	ldr	r4, [r7, #8]
   89238:	6860      	ldr	r0, [r4, #4]
   8923a:	f020 0803 	bic.w	r8, r0, #3
   8923e:	4545      	cmp	r5, r8
   89240:	eba8 0305 	sub.w	r3, r8, r5
   89244:	d802      	bhi.n	8924c <_malloc_r+0x404>
   89246:	2b0f      	cmp	r3, #15
   89248:	f73f af66 	bgt.w	89118 <_malloc_r+0x2d0>
   8924c:	4630      	mov	r0, r6
   8924e:	f000 f8f5 	bl	8943c <__malloc_unlock>
   89252:	2400      	movs	r4, #0
   89254:	e6be      	b.n	88fd4 <_malloc_r+0x18c>
   89256:	f103 0c5c 	add.w	ip, r3, #92	; 0x5c
   8925a:	f103 045b 	add.w	r4, r3, #91	; 0x5b
   8925e:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   89262:	e639      	b.n	88ed8 <_malloc_r+0x90>
   89264:	f859 3908 	ldr.w	r3, [r9], #-8
   89268:	454b      	cmp	r3, r9
   8926a:	f040 8095 	bne.w	89398 <_malloc_r+0x550>
   8926e:	f01c 0f03 	tst.w	ip, #3
   89272:	f10c 3cff 	add.w	ip, ip, #4294967295
   89276:	d1f5      	bne.n	89264 <_malloc_r+0x41c>
   89278:	687b      	ldr	r3, [r7, #4]
   8927a:	ea23 0301 	bic.w	r3, r3, r1
   8927e:	607b      	str	r3, [r7, #4]
   89280:	0049      	lsls	r1, r1, #1
   89282:	4299      	cmp	r1, r3
   89284:	f63f aec3 	bhi.w	8900e <_malloc_r+0x1c6>
   89288:	b911      	cbnz	r1, 89290 <_malloc_r+0x448>
   8928a:	e6c0      	b.n	8900e <_malloc_r+0x1c6>
   8928c:	0049      	lsls	r1, r1, #1
   8928e:	3404      	adds	r4, #4
   89290:	4219      	tst	r1, r3
   89292:	d0fb      	beq.n	8928c <_malloc_r+0x444>
   89294:	46a4      	mov	ip, r4
   89296:	e669      	b.n	88f6c <_malloc_r+0x124>
   89298:	f103 0810 	add.w	r8, r3, #16
   8929c:	e6d4      	b.n	89048 <_malloc_r+0x200>
   8929e:	2201      	movs	r2, #1
   892a0:	109b      	asrs	r3, r3, #2
   892a2:	409a      	lsls	r2, r3
   892a4:	687b      	ldr	r3, [r7, #4]
   892a6:	431a      	orrs	r2, r3
   892a8:	607a      	str	r2, [r7, #4]
   892aa:	e773      	b.n	89194 <_malloc_r+0x34c>
   892ac:	eb02 0108 	add.w	r1, r2, r8
   892b0:	4249      	negs	r1, r1
   892b2:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
   892b6:	4651      	mov	r1, sl
   892b8:	4630      	mov	r0, r6
   892ba:	9200      	str	r2, [sp, #0]
   892bc:	f000 fca0 	bl	89c00 <_sbrk_r>
   892c0:	1c43      	adds	r3, r0, #1
   892c2:	e9dd 2300 	ldrd	r2, r3, [sp]
   892c6:	f47f aef5 	bne.w	890b4 <_malloc_r+0x26c>
   892ca:	46da      	mov	sl, fp
   892cc:	e6f5      	b.n	890ba <_malloc_r+0x272>
   892ce:	2b54      	cmp	r3, #84	; 0x54
   892d0:	d826      	bhi.n	89320 <_malloc_r+0x4d8>
   892d2:	0b13      	lsrs	r3, r2, #12
   892d4:	f103 016f 	add.w	r1, r3, #111	; 0x6f
   892d8:	00c9      	lsls	r1, r1, #3
   892da:	336e      	adds	r3, #110	; 0x6e
   892dc:	e74a      	b.n	89174 <_malloc_r+0x32c>
   892de:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   892e2:	d826      	bhi.n	89332 <_malloc_r+0x4ea>
   892e4:	0beb      	lsrs	r3, r5, #15
   892e6:	f103 0c78 	add.w	ip, r3, #120	; 0x78
   892ea:	f103 0477 	add.w	r4, r3, #119	; 0x77
   892ee:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   892f2:	e5f1      	b.n	88ed8 <_malloc_r+0x90>
   892f4:	4b29      	ldr	r3, [pc, #164]	; (8939c <_malloc_r+0x554>)
   892f6:	6818      	ldr	r0, [r3, #0]
   892f8:	4440      	add	r0, r8
   892fa:	6018      	str	r0, [r3, #0]
   892fc:	e6b6      	b.n	8906c <_malloc_r+0x224>
   892fe:	f3ca 0c0b 	ubfx	ip, sl, #0, #12
   89302:	f1bc 0f00 	cmp.w	ip, #0
   89306:	f47f aeb1 	bne.w	8906c <_malloc_r+0x224>
   8930a:	68bc      	ldr	r4, [r7, #8]
   8930c:	44c8      	add	r8, r9
   8930e:	f048 0001 	orr.w	r0, r8, #1
   89312:	6060      	str	r0, [r4, #4]
   89314:	e6f5      	b.n	89102 <_malloc_r+0x2ba>
   89316:	4614      	mov	r4, r2
   89318:	e6f3      	b.n	89102 <_malloc_r+0x2ba>
   8931a:	2301      	movs	r3, #1
   8931c:	6053      	str	r3, [r2, #4]
   8931e:	e795      	b.n	8924c <_malloc_r+0x404>
   89320:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   89324:	d824      	bhi.n	89370 <_malloc_r+0x528>
   89326:	0bd3      	lsrs	r3, r2, #15
   89328:	f103 0178 	add.w	r1, r3, #120	; 0x78
   8932c:	00c9      	lsls	r1, r1, #3
   8932e:	3377      	adds	r3, #119	; 0x77
   89330:	e720      	b.n	89174 <_malloc_r+0x32c>
   89332:	f240 5254 	movw	r2, #1364	; 0x554
   89336:	4293      	cmp	r3, r2
   89338:	d824      	bhi.n	89384 <_malloc_r+0x53c>
   8933a:	0cab      	lsrs	r3, r5, #18
   8933c:	f103 0c7d 	add.w	ip, r3, #125	; 0x7d
   89340:	f103 047c 	add.w	r4, r3, #124	; 0x7c
   89344:	ea4f 00cc 	mov.w	r0, ip, lsl #3
   89348:	e5c6      	b.n	88ed8 <_malloc_r+0x90>
   8934a:	f1ab 0b08 	sub.w	fp, fp, #8
   8934e:	44d8      	add	r8, fp
   89350:	f04f 0a00 	mov.w	sl, #0
   89354:	eba8 0802 	sub.w	r8, r8, r2
   89358:	e6af      	b.n	890ba <_malloc_r+0x272>
   8935a:	f104 0108 	add.w	r1, r4, #8
   8935e:	4630      	mov	r0, r6
   89360:	9300      	str	r3, [sp, #0]
   89362:	f7ff fc65 	bl	88c30 <_free_r>
   89366:	68bc      	ldr	r4, [r7, #8]
   89368:	9b00      	ldr	r3, [sp, #0]
   8936a:	6860      	ldr	r0, [r4, #4]
   8936c:	6819      	ldr	r1, [r3, #0]
   8936e:	e6c8      	b.n	89102 <_malloc_r+0x2ba>
   89370:	f240 5154 	movw	r1, #1364	; 0x554
   89374:	428b      	cmp	r3, r1
   89376:	d80b      	bhi.n	89390 <_malloc_r+0x548>
   89378:	0c93      	lsrs	r3, r2, #18
   8937a:	f103 017d 	add.w	r1, r3, #125	; 0x7d
   8937e:	00c9      	lsls	r1, r1, #3
   89380:	337c      	adds	r3, #124	; 0x7c
   89382:	e6f7      	b.n	89174 <_malloc_r+0x32c>
   89384:	f44f 707e 	mov.w	r0, #1016	; 0x3f8
   89388:	f04f 0c7f 	mov.w	ip, #127	; 0x7f
   8938c:	247e      	movs	r4, #126	; 0x7e
   8938e:	e5a3      	b.n	88ed8 <_malloc_r+0x90>
   89390:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   89394:	237e      	movs	r3, #126	; 0x7e
   89396:	e6ed      	b.n	89174 <_malloc_r+0x32c>
   89398:	687b      	ldr	r3, [r7, #4]
   8939a:	e771      	b.n	89280 <_malloc_r+0x438>
   8939c:	20073320 	.word	0x20073320

000893a0 <memchr>:
   893a0:	fa5f fc81 	uxtb.w	ip, r1
   893a4:	0781      	lsls	r1, r0, #30
   893a6:	d010      	beq.n	893ca <memchr+0x2a>
   893a8:	4603      	mov	r3, r0
   893aa:	1e51      	subs	r1, r2, #1
   893ac:	b92a      	cbnz	r2, 893ba <memchr+0x1a>
   893ae:	e00a      	b.n	893c6 <memchr+0x26>
   893b0:	079a      	lsls	r2, r3, #30
   893b2:	4618      	mov	r0, r3
   893b4:	d00a      	beq.n	893cc <memchr+0x2c>
   893b6:	3901      	subs	r1, #1
   893b8:	d305      	bcc.n	893c6 <memchr+0x26>
   893ba:	4618      	mov	r0, r3
   893bc:	f813 2b01 	ldrb.w	r2, [r3], #1
   893c0:	4562      	cmp	r2, ip
   893c2:	d1f5      	bne.n	893b0 <memchr+0x10>
   893c4:	4770      	bx	lr
   893c6:	2000      	movs	r0, #0
   893c8:	4770      	bx	lr
   893ca:	4611      	mov	r1, r2
   893cc:	2903      	cmp	r1, #3
   893ce:	d80c      	bhi.n	893ea <memchr+0x4a>
   893d0:	2900      	cmp	r1, #0
   893d2:	d0f8      	beq.n	893c6 <memchr+0x26>
   893d4:	4603      	mov	r3, r0
   893d6:	4401      	add	r1, r0
   893d8:	e001      	b.n	893de <memchr+0x3e>
   893da:	428b      	cmp	r3, r1
   893dc:	d0f3      	beq.n	893c6 <memchr+0x26>
   893de:	4618      	mov	r0, r3
   893e0:	f813 2b01 	ldrb.w	r2, [r3], #1
   893e4:	4562      	cmp	r2, ip
   893e6:	d1f8      	bne.n	893da <memchr+0x3a>
   893e8:	e7ec      	b.n	893c4 <memchr+0x24>
   893ea:	4602      	mov	r2, r0
   893ec:	b510      	push	{r4, lr}
   893ee:	ea4c 240c 	orr.w	r4, ip, ip, lsl #8
   893f2:	ea44 4404 	orr.w	r4, r4, r4, lsl #16
   893f6:	4610      	mov	r0, r2
   893f8:	6803      	ldr	r3, [r0, #0]
   893fa:	3204      	adds	r2, #4
   893fc:	4063      	eors	r3, r4
   893fe:	f1a3 3e01 	sub.w	lr, r3, #16843009	; 0x1010101
   89402:	ea2e 0303 	bic.w	r3, lr, r3
   89406:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   8940a:	d104      	bne.n	89416 <memchr+0x76>
   8940c:	3904      	subs	r1, #4
   8940e:	2903      	cmp	r1, #3
   89410:	4610      	mov	r0, r2
   89412:	d8f0      	bhi.n	893f6 <memchr+0x56>
   89414:	b151      	cbz	r1, 8942c <memchr+0x8c>
   89416:	4603      	mov	r3, r0
   89418:	4401      	add	r1, r0
   8941a:	e001      	b.n	89420 <memchr+0x80>
   8941c:	428b      	cmp	r3, r1
   8941e:	d005      	beq.n	8942c <memchr+0x8c>
   89420:	4618      	mov	r0, r3
   89422:	f813 2b01 	ldrb.w	r2, [r3], #1
   89426:	4562      	cmp	r2, ip
   89428:	d1f8      	bne.n	8941c <memchr+0x7c>
   8942a:	bd10      	pop	{r4, pc}
   8942c:	2000      	movs	r0, #0
   8942e:	bd10      	pop	{r4, pc}

00089430 <__malloc_lock>:
   89430:	4801      	ldr	r0, [pc, #4]	; (89438 <__malloc_lock+0x8>)
   89432:	f7ff bd05 	b.w	88e40 <__retarget_lock_acquire_recursive>
   89436:	bf00      	nop
   89438:	20073314 	.word	0x20073314

0008943c <__malloc_unlock>:
   8943c:	4801      	ldr	r0, [pc, #4]	; (89444 <__malloc_unlock+0x8>)
   8943e:	f7ff bd01 	b.w	88e44 <__retarget_lock_release_recursive>
   89442:	bf00      	nop
   89444:	20073314 	.word	0x20073314

00089448 <_Balloc>:
   89448:	b538      	push	{r3, r4, r5, lr}
   8944a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   8944c:	4605      	mov	r5, r0
   8944e:	460c      	mov	r4, r1
   89450:	b14b      	cbz	r3, 89466 <_Balloc+0x1e>
   89452:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   89456:	b180      	cbz	r0, 8947a <_Balloc+0x32>
   89458:	6802      	ldr	r2, [r0, #0]
   8945a:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   8945e:	2300      	movs	r3, #0
   89460:	e9c0 3303 	strd	r3, r3, [r0, #12]
   89464:	bd38      	pop	{r3, r4, r5, pc}
   89466:	2221      	movs	r2, #33	; 0x21
   89468:	2104      	movs	r1, #4
   8946a:	f000 fcbf 	bl	89dec <_calloc_r>
   8946e:	4603      	mov	r3, r0
   89470:	64e8      	str	r0, [r5, #76]	; 0x4c
   89472:	2800      	cmp	r0, #0
   89474:	d1ed      	bne.n	89452 <_Balloc+0xa>
   89476:	2000      	movs	r0, #0
   89478:	bd38      	pop	{r3, r4, r5, pc}
   8947a:	2101      	movs	r1, #1
   8947c:	4628      	mov	r0, r5
   8947e:	fa01 f504 	lsl.w	r5, r1, r4
   89482:	1d6a      	adds	r2, r5, #5
   89484:	0092      	lsls	r2, r2, #2
   89486:	f000 fcb1 	bl	89dec <_calloc_r>
   8948a:	2800      	cmp	r0, #0
   8948c:	d0f3      	beq.n	89476 <_Balloc+0x2e>
   8948e:	e9c0 4501 	strd	r4, r5, [r0, #4]
   89492:	e7e4      	b.n	8945e <_Balloc+0x16>

00089494 <_Bfree>:
   89494:	b131      	cbz	r1, 894a4 <_Bfree+0x10>
   89496:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   89498:	684a      	ldr	r2, [r1, #4]
   8949a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   8949e:	6008      	str	r0, [r1, #0]
   894a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   894a4:	4770      	bx	lr
   894a6:	bf00      	nop

000894a8 <__multadd>:
   894a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   894ac:	f04f 0e00 	mov.w	lr, #0
   894b0:	460e      	mov	r6, r1
   894b2:	461c      	mov	r4, r3
   894b4:	690d      	ldr	r5, [r1, #16]
   894b6:	4607      	mov	r7, r0
   894b8:	f101 0014 	add.w	r0, r1, #20
   894bc:	6801      	ldr	r1, [r0, #0]
   894be:	f10e 0e01 	add.w	lr, lr, #1
   894c2:	b28b      	uxth	r3, r1
   894c4:	fb02 4303 	mla	r3, r2, r3, r4
   894c8:	0c09      	lsrs	r1, r1, #16
   894ca:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   894ce:	fb02 cc01 	mla	ip, r2, r1, ip
   894d2:	b29b      	uxth	r3, r3
   894d4:	eb03 430c 	add.w	r3, r3, ip, lsl #16
   894d8:	4575      	cmp	r5, lr
   894da:	f840 3b04 	str.w	r3, [r0], #4
   894de:	ea4f 441c 	mov.w	r4, ip, lsr #16
   894e2:	dceb      	bgt.n	894bc <__multadd+0x14>
   894e4:	b13c      	cbz	r4, 894f6 <__multadd+0x4e>
   894e6:	68b3      	ldr	r3, [r6, #8]
   894e8:	42ab      	cmp	r3, r5
   894ea:	dd07      	ble.n	894fc <__multadd+0x54>
   894ec:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   894f0:	3501      	adds	r5, #1
   894f2:	615c      	str	r4, [r3, #20]
   894f4:	6135      	str	r5, [r6, #16]
   894f6:	4630      	mov	r0, r6
   894f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   894fc:	6871      	ldr	r1, [r6, #4]
   894fe:	4638      	mov	r0, r7
   89500:	3101      	adds	r1, #1
   89502:	f7ff ffa1 	bl	89448 <_Balloc>
   89506:	4680      	mov	r8, r0
   89508:	b1a8      	cbz	r0, 89536 <__multadd+0x8e>
   8950a:	6932      	ldr	r2, [r6, #16]
   8950c:	f106 010c 	add.w	r1, r6, #12
   89510:	3202      	adds	r2, #2
   89512:	0092      	lsls	r2, r2, #2
   89514:	300c      	adds	r0, #12
   89516:	f7fc fc79 	bl	85e0c <memcpy>
   8951a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   8951c:	6872      	ldr	r2, [r6, #4]
   8951e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   89522:	6031      	str	r1, [r6, #0]
   89524:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   89528:	4646      	mov	r6, r8
   8952a:	eb06 0385 	add.w	r3, r6, r5, lsl #2
   8952e:	3501      	adds	r5, #1
   89530:	615c      	str	r4, [r3, #20]
   89532:	6135      	str	r5, [r6, #16]
   89534:	e7df      	b.n	894f6 <__multadd+0x4e>
   89536:	4602      	mov	r2, r0
   89538:	21b5      	movs	r1, #181	; 0xb5
   8953a:	4b02      	ldr	r3, [pc, #8]	; (89544 <__multadd+0x9c>)
   8953c:	4802      	ldr	r0, [pc, #8]	; (89548 <__multadd+0xa0>)
   8953e:	f000 fc35 	bl	89dac <__assert_func>
   89542:	bf00      	nop
   89544:	0008cbd0 	.word	0x0008cbd0
   89548:	0008cc64 	.word	0x0008cc64

0008954c <__hi0bits>:
   8954c:	0c02      	lsrs	r2, r0, #16
   8954e:	0412      	lsls	r2, r2, #16
   89550:	4603      	mov	r3, r0
   89552:	b9ca      	cbnz	r2, 89588 <__hi0bits+0x3c>
   89554:	2010      	movs	r0, #16
   89556:	4083      	lsls	r3, r0
   89558:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   8955c:	bf04      	itt	eq
   8955e:	021b      	lsleq	r3, r3, #8
   89560:	3008      	addeq	r0, #8
   89562:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   89566:	bf04      	itt	eq
   89568:	011b      	lsleq	r3, r3, #4
   8956a:	3004      	addeq	r0, #4
   8956c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   89570:	bf04      	itt	eq
   89572:	009b      	lsleq	r3, r3, #2
   89574:	3002      	addeq	r0, #2
   89576:	2b00      	cmp	r3, #0
   89578:	db05      	blt.n	89586 <__hi0bits+0x3a>
   8957a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   8957e:	f100 0001 	add.w	r0, r0, #1
   89582:	bf08      	it	eq
   89584:	2020      	moveq	r0, #32
   89586:	4770      	bx	lr
   89588:	2000      	movs	r0, #0
   8958a:	e7e5      	b.n	89558 <__hi0bits+0xc>

0008958c <__lo0bits>:
   8958c:	6803      	ldr	r3, [r0, #0]
   8958e:	4602      	mov	r2, r0
   89590:	f013 0007 	ands.w	r0, r3, #7
   89594:	d009      	beq.n	895aa <__lo0bits+0x1e>
   89596:	07d9      	lsls	r1, r3, #31
   89598:	d41f      	bmi.n	895da <__lo0bits+0x4e>
   8959a:	0798      	lsls	r0, r3, #30
   8959c:	bf4b      	itete	mi
   8959e:	085b      	lsrmi	r3, r3, #1
   895a0:	089b      	lsrpl	r3, r3, #2
   895a2:	2001      	movmi	r0, #1
   895a4:	2002      	movpl	r0, #2
   895a6:	6013      	str	r3, [r2, #0]
   895a8:	4770      	bx	lr
   895aa:	b299      	uxth	r1, r3
   895ac:	b909      	cbnz	r1, 895b2 <__lo0bits+0x26>
   895ae:	2010      	movs	r0, #16
   895b0:	40c3      	lsrs	r3, r0
   895b2:	b2d9      	uxtb	r1, r3
   895b4:	b909      	cbnz	r1, 895ba <__lo0bits+0x2e>
   895b6:	3008      	adds	r0, #8
   895b8:	0a1b      	lsrs	r3, r3, #8
   895ba:	0719      	lsls	r1, r3, #28
   895bc:	bf04      	itt	eq
   895be:	091b      	lsreq	r3, r3, #4
   895c0:	3004      	addeq	r0, #4
   895c2:	0799      	lsls	r1, r3, #30
   895c4:	bf04      	itt	eq
   895c6:	089b      	lsreq	r3, r3, #2
   895c8:	3002      	addeq	r0, #2
   895ca:	07d9      	lsls	r1, r3, #31
   895cc:	d403      	bmi.n	895d6 <__lo0bits+0x4a>
   895ce:	085b      	lsrs	r3, r3, #1
   895d0:	f100 0001 	add.w	r0, r0, #1
   895d4:	d003      	beq.n	895de <__lo0bits+0x52>
   895d6:	6013      	str	r3, [r2, #0]
   895d8:	4770      	bx	lr
   895da:	2000      	movs	r0, #0
   895dc:	4770      	bx	lr
   895de:	2020      	movs	r0, #32
   895e0:	4770      	bx	lr
   895e2:	bf00      	nop

000895e4 <__i2b>:
   895e4:	b538      	push	{r3, r4, r5, lr}
   895e6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   895e8:	4604      	mov	r4, r0
   895ea:	460d      	mov	r5, r1
   895ec:	b14b      	cbz	r3, 89602 <__i2b+0x1e>
   895ee:	6858      	ldr	r0, [r3, #4]
   895f0:	b1b0      	cbz	r0, 89620 <__i2b+0x3c>
   895f2:	6802      	ldr	r2, [r0, #0]
   895f4:	605a      	str	r2, [r3, #4]
   895f6:	2200      	movs	r2, #0
   895f8:	2301      	movs	r3, #1
   895fa:	6145      	str	r5, [r0, #20]
   895fc:	e9c0 2303 	strd	r2, r3, [r0, #12]
   89600:	bd38      	pop	{r3, r4, r5, pc}
   89602:	2221      	movs	r2, #33	; 0x21
   89604:	2104      	movs	r1, #4
   89606:	f000 fbf1 	bl	89dec <_calloc_r>
   8960a:	4603      	mov	r3, r0
   8960c:	64e0      	str	r0, [r4, #76]	; 0x4c
   8960e:	2800      	cmp	r0, #0
   89610:	d1ed      	bne.n	895ee <__i2b+0xa>
   89612:	2200      	movs	r2, #0
   89614:	f44f 71a0 	mov.w	r1, #320	; 0x140
   89618:	4b07      	ldr	r3, [pc, #28]	; (89638 <__i2b+0x54>)
   8961a:	4808      	ldr	r0, [pc, #32]	; (8963c <__i2b+0x58>)
   8961c:	f000 fbc6 	bl	89dac <__assert_func>
   89620:	221c      	movs	r2, #28
   89622:	2101      	movs	r1, #1
   89624:	4620      	mov	r0, r4
   89626:	f000 fbe1 	bl	89dec <_calloc_r>
   8962a:	2800      	cmp	r0, #0
   8962c:	d0f1      	beq.n	89612 <__i2b+0x2e>
   8962e:	2201      	movs	r2, #1
   89630:	2302      	movs	r3, #2
   89632:	e9c0 2301 	strd	r2, r3, [r0, #4]
   89636:	e7de      	b.n	895f6 <__i2b+0x12>
   89638:	0008cbd0 	.word	0x0008cbd0
   8963c:	0008cc64 	.word	0x0008cc64

00089640 <__multiply>:
   89640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89644:	690e      	ldr	r6, [r1, #16]
   89646:	6915      	ldr	r5, [r2, #16]
   89648:	4688      	mov	r8, r1
   8964a:	42ae      	cmp	r6, r5
   8964c:	4614      	mov	r4, r2
   8964e:	b085      	sub	sp, #20
   89650:	db05      	blt.n	8965e <__multiply+0x1e>
   89652:	462a      	mov	r2, r5
   89654:	4623      	mov	r3, r4
   89656:	4635      	mov	r5, r6
   89658:	460c      	mov	r4, r1
   8965a:	4616      	mov	r6, r2
   8965c:	4698      	mov	r8, r3
   8965e:	68a3      	ldr	r3, [r4, #8]
   89660:	6861      	ldr	r1, [r4, #4]
   89662:	19af      	adds	r7, r5, r6
   89664:	42bb      	cmp	r3, r7
   89666:	bfb8      	it	lt
   89668:	3101      	addlt	r1, #1
   8966a:	f7ff feed 	bl	89448 <_Balloc>
   8966e:	9001      	str	r0, [sp, #4]
   89670:	2800      	cmp	r0, #0
   89672:	f000 8087 	beq.w	89784 <__multiply+0x144>
   89676:	9b01      	ldr	r3, [sp, #4]
   89678:	f103 0914 	add.w	r9, r3, #20
   8967c:	eb09 0a87 	add.w	sl, r9, r7, lsl #2
   89680:	45d1      	cmp	r9, sl
   89682:	d205      	bcs.n	89690 <__multiply+0x50>
   89684:	464b      	mov	r3, r9
   89686:	2200      	movs	r2, #0
   89688:	f843 2b04 	str.w	r2, [r3], #4
   8968c:	459a      	cmp	sl, r3
   8968e:	d8fb      	bhi.n	89688 <__multiply+0x48>
   89690:	f108 0814 	add.w	r8, r8, #20
   89694:	eb08 0b86 	add.w	fp, r8, r6, lsl #2
   89698:	f104 0314 	add.w	r3, r4, #20
   8969c:	45d8      	cmp	r8, fp
   8969e:	461a      	mov	r2, r3
   896a0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
   896a4:	d25f      	bcs.n	89766 <__multiply+0x126>
   896a6:	1b2b      	subs	r3, r5, r4
   896a8:	3b15      	subs	r3, #21
   896aa:	f023 0303 	bic.w	r3, r3, #3
   896ae:	3304      	adds	r3, #4
   896b0:	3415      	adds	r4, #21
   896b2:	42a5      	cmp	r5, r4
   896b4:	bf38      	it	cc
   896b6:	2304      	movcc	r3, #4
   896b8:	e9cd a702 	strd	sl, r7, [sp, #8]
   896bc:	46ac      	mov	ip, r5
   896be:	461f      	mov	r7, r3
   896c0:	4692      	mov	sl, r2
   896c2:	e005      	b.n	896d0 <__multiply+0x90>
   896c4:	0c00      	lsrs	r0, r0, #16
   896c6:	d129      	bne.n	8971c <__multiply+0xdc>
   896c8:	45c3      	cmp	fp, r8
   896ca:	f109 0904 	add.w	r9, r9, #4
   896ce:	d948      	bls.n	89762 <__multiply+0x122>
   896d0:	f858 0b04 	ldr.w	r0, [r8], #4
   896d4:	b285      	uxth	r5, r0
   896d6:	2d00      	cmp	r5, #0
   896d8:	d0f4      	beq.n	896c4 <__multiply+0x84>
   896da:	4656      	mov	r6, sl
   896dc:	464c      	mov	r4, r9
   896de:	2300      	movs	r3, #0
   896e0:	f856 0b04 	ldr.w	r0, [r6], #4
   896e4:	6821      	ldr	r1, [r4, #0]
   896e6:	b282      	uxth	r2, r0
   896e8:	fa1f fe81 	uxth.w	lr, r1
   896ec:	fb05 ee02 	mla	lr, r5, r2, lr
   896f0:	0c00      	lsrs	r0, r0, #16
   896f2:	0c0a      	lsrs	r2, r1, #16
   896f4:	fb05 2200 	mla	r2, r5, r0, r2
   896f8:	4473      	add	r3, lr
   896fa:	eb02 4213 	add.w	r2, r2, r3, lsr #16
   896fe:	b29b      	uxth	r3, r3
   89700:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   89704:	45b4      	cmp	ip, r6
   89706:	f844 3b04 	str.w	r3, [r4], #4
   8970a:	ea4f 4312 	mov.w	r3, r2, lsr #16
   8970e:	d8e7      	bhi.n	896e0 <__multiply+0xa0>
   89710:	f849 3007 	str.w	r3, [r9, r7]
   89714:	f858 0c04 	ldr.w	r0, [r8, #-4]
   89718:	0c00      	lsrs	r0, r0, #16
   8971a:	d0d5      	beq.n	896c8 <__multiply+0x88>
   8971c:	f8d9 3000 	ldr.w	r3, [r9]
   89720:	4654      	mov	r4, sl
   89722:	4619      	mov	r1, r3
   89724:	464d      	mov	r5, r9
   89726:	2200      	movs	r2, #0
   89728:	8826      	ldrh	r6, [r4, #0]
   8972a:	0c09      	lsrs	r1, r1, #16
   8972c:	fb00 1106 	mla	r1, r0, r6, r1
   89730:	b29b      	uxth	r3, r3
   89732:	440a      	add	r2, r1
   89734:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   89738:	f845 3b04 	str.w	r3, [r5], #4
   8973c:	f854 6b04 	ldr.w	r6, [r4], #4
   89740:	6829      	ldr	r1, [r5, #0]
   89742:	0c36      	lsrs	r6, r6, #16
   89744:	b28b      	uxth	r3, r1
   89746:	fb00 3306 	mla	r3, r0, r6, r3
   8974a:	45a4      	cmp	ip, r4
   8974c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   89750:	ea4f 4213 	mov.w	r2, r3, lsr #16
   89754:	d8e8      	bhi.n	89728 <__multiply+0xe8>
   89756:	45c3      	cmp	fp, r8
   89758:	f849 3007 	str.w	r3, [r9, r7]
   8975c:	f109 0904 	add.w	r9, r9, #4
   89760:	d8b6      	bhi.n	896d0 <__multiply+0x90>
   89762:	e9dd a702 	ldrd	sl, r7, [sp, #8]
   89766:	2f00      	cmp	r7, #0
   89768:	dc02      	bgt.n	89770 <__multiply+0x130>
   8976a:	e005      	b.n	89778 <__multiply+0x138>
   8976c:	3f01      	subs	r7, #1
   8976e:	d003      	beq.n	89778 <__multiply+0x138>
   89770:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   89774:	2b00      	cmp	r3, #0
   89776:	d0f9      	beq.n	8976c <__multiply+0x12c>
   89778:	9b01      	ldr	r3, [sp, #4]
   8977a:	4618      	mov	r0, r3
   8977c:	611f      	str	r7, [r3, #16]
   8977e:	b005      	add	sp, #20
   89780:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89784:	4602      	mov	r2, r0
   89786:	f240 115d 	movw	r1, #349	; 0x15d
   8978a:	4b02      	ldr	r3, [pc, #8]	; (89794 <__multiply+0x154>)
   8978c:	4802      	ldr	r0, [pc, #8]	; (89798 <__multiply+0x158>)
   8978e:	f000 fb0d 	bl	89dac <__assert_func>
   89792:	bf00      	nop
   89794:	0008cbd0 	.word	0x0008cbd0
   89798:	0008cc64 	.word	0x0008cc64

0008979c <__pow5mult>:
   8979c:	f012 0303 	ands.w	r3, r2, #3
   897a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   897a4:	4614      	mov	r4, r2
   897a6:	4607      	mov	r7, r0
   897a8:	d12e      	bne.n	89808 <__pow5mult+0x6c>
   897aa:	460e      	mov	r6, r1
   897ac:	10a4      	asrs	r4, r4, #2
   897ae:	d01c      	beq.n	897ea <__pow5mult+0x4e>
   897b0:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   897b2:	b395      	cbz	r5, 8981a <__pow5mult+0x7e>
   897b4:	07e3      	lsls	r3, r4, #31
   897b6:	f04f 0800 	mov.w	r8, #0
   897ba:	d406      	bmi.n	897ca <__pow5mult+0x2e>
   897bc:	1064      	asrs	r4, r4, #1
   897be:	d014      	beq.n	897ea <__pow5mult+0x4e>
   897c0:	6828      	ldr	r0, [r5, #0]
   897c2:	b1a8      	cbz	r0, 897f0 <__pow5mult+0x54>
   897c4:	4605      	mov	r5, r0
   897c6:	07e3      	lsls	r3, r4, #31
   897c8:	d5f8      	bpl.n	897bc <__pow5mult+0x20>
   897ca:	462a      	mov	r2, r5
   897cc:	4631      	mov	r1, r6
   897ce:	4638      	mov	r0, r7
   897d0:	f7ff ff36 	bl	89640 <__multiply>
   897d4:	b1b6      	cbz	r6, 89804 <__pow5mult+0x68>
   897d6:	6871      	ldr	r1, [r6, #4]
   897d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   897da:	1064      	asrs	r4, r4, #1
   897dc:	f853 2021 	ldr.w	r2, [r3, r1, lsl #2]
   897e0:	6032      	str	r2, [r6, #0]
   897e2:	f843 6021 	str.w	r6, [r3, r1, lsl #2]
   897e6:	4606      	mov	r6, r0
   897e8:	d1ea      	bne.n	897c0 <__pow5mult+0x24>
   897ea:	4630      	mov	r0, r6
   897ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   897f0:	462a      	mov	r2, r5
   897f2:	4629      	mov	r1, r5
   897f4:	4638      	mov	r0, r7
   897f6:	f7ff ff23 	bl	89640 <__multiply>
   897fa:	6028      	str	r0, [r5, #0]
   897fc:	4605      	mov	r5, r0
   897fe:	f8c0 8000 	str.w	r8, [r0]
   89802:	e7e0      	b.n	897c6 <__pow5mult+0x2a>
   89804:	4606      	mov	r6, r0
   89806:	e7d9      	b.n	897bc <__pow5mult+0x20>
   89808:	4a0f      	ldr	r2, [pc, #60]	; (89848 <__pow5mult+0xac>)
   8980a:	3b01      	subs	r3, #1
   8980c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   89810:	2300      	movs	r3, #0
   89812:	f7ff fe49 	bl	894a8 <__multadd>
   89816:	4606      	mov	r6, r0
   89818:	e7c8      	b.n	897ac <__pow5mult+0x10>
   8981a:	2101      	movs	r1, #1
   8981c:	4638      	mov	r0, r7
   8981e:	f7ff fe13 	bl	89448 <_Balloc>
   89822:	4605      	mov	r5, r0
   89824:	b140      	cbz	r0, 89838 <__pow5mult+0x9c>
   89826:	f240 2371 	movw	r3, #625	; 0x271
   8982a:	2201      	movs	r2, #1
   8982c:	e9c0 2304 	strd	r2, r3, [r0, #16]
   89830:	2300      	movs	r3, #0
   89832:	64b8      	str	r0, [r7, #72]	; 0x48
   89834:	6003      	str	r3, [r0, #0]
   89836:	e7bd      	b.n	897b4 <__pow5mult+0x18>
   89838:	4602      	mov	r2, r0
   8983a:	f44f 71a0 	mov.w	r1, #320	; 0x140
   8983e:	4b03      	ldr	r3, [pc, #12]	; (8984c <__pow5mult+0xb0>)
   89840:	4803      	ldr	r0, [pc, #12]	; (89850 <__pow5mult+0xb4>)
   89842:	f000 fab3 	bl	89dac <__assert_func>
   89846:	bf00      	nop
   89848:	0008cdd8 	.word	0x0008cdd8
   8984c:	0008cbd0 	.word	0x0008cbd0
   89850:	0008cc64 	.word	0x0008cc64

00089854 <__lshift>:
   89854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89858:	460c      	mov	r4, r1
   8985a:	6926      	ldr	r6, [r4, #16]
   8985c:	68a3      	ldr	r3, [r4, #8]
   8985e:	eb06 1662 	add.w	r6, r6, r2, asr #5
   89862:	1c75      	adds	r5, r6, #1
   89864:	429d      	cmp	r5, r3
   89866:	4690      	mov	r8, r2
   89868:	4607      	mov	r7, r0
   8986a:	6849      	ldr	r1, [r1, #4]
   8986c:	ea4f 1962 	mov.w	r9, r2, asr #5
   89870:	dd04      	ble.n	8987c <__lshift+0x28>
   89872:	005b      	lsls	r3, r3, #1
   89874:	429d      	cmp	r5, r3
   89876:	f101 0101 	add.w	r1, r1, #1
   8987a:	dcfa      	bgt.n	89872 <__lshift+0x1e>
   8987c:	4638      	mov	r0, r7
   8987e:	f7ff fde3 	bl	89448 <_Balloc>
   89882:	2800      	cmp	r0, #0
   89884:	d051      	beq.n	8992a <__lshift+0xd6>
   89886:	f1b9 0f00 	cmp.w	r9, #0
   8988a:	f100 0114 	add.w	r1, r0, #20
   8988e:	dd0f      	ble.n	898b0 <__lshift+0x5c>
   89890:	460b      	mov	r3, r1
   89892:	f04f 0c00 	mov.w	ip, #0
   89896:	f109 0205 	add.w	r2, r9, #5
   8989a:	ea4f 0e82 	mov.w	lr, r2, lsl #2
   8989e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
   898a2:	f843 cb04 	str.w	ip, [r3], #4
   898a6:	4293      	cmp	r3, r2
   898a8:	d1fb      	bne.n	898a2 <__lshift+0x4e>
   898aa:	f1ae 0314 	sub.w	r3, lr, #20
   898ae:	4419      	add	r1, r3
   898b0:	6922      	ldr	r2, [r4, #16]
   898b2:	f104 0314 	add.w	r3, r4, #20
   898b6:	f018 081f 	ands.w	r8, r8, #31
   898ba:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   898be:	d02c      	beq.n	8991a <__lshift+0xc6>
   898c0:	468e      	mov	lr, r1
   898c2:	f04f 0a00 	mov.w	sl, #0
   898c6:	f1c8 0920 	rsb	r9, r8, #32
   898ca:	681a      	ldr	r2, [r3, #0]
   898cc:	fa02 f208 	lsl.w	r2, r2, r8
   898d0:	ea42 020a 	orr.w	r2, r2, sl
   898d4:	f84e 2b04 	str.w	r2, [lr], #4
   898d8:	f853 2b04 	ldr.w	r2, [r3], #4
   898dc:	459c      	cmp	ip, r3
   898de:	fa22 fa09 	lsr.w	sl, r2, r9
   898e2:	d8f2      	bhi.n	898ca <__lshift+0x76>
   898e4:	ebac 0304 	sub.w	r3, ip, r4
   898e8:	3b15      	subs	r3, #21
   898ea:	f023 0303 	bic.w	r3, r3, #3
   898ee:	3304      	adds	r3, #4
   898f0:	f104 0215 	add.w	r2, r4, #21
   898f4:	4594      	cmp	ip, r2
   898f6:	bf38      	it	cc
   898f8:	2304      	movcc	r3, #4
   898fa:	f1ba 0f00 	cmp.w	sl, #0
   898fe:	bf18      	it	ne
   89900:	462e      	movne	r6, r5
   89902:	f841 a003 	str.w	sl, [r1, r3]
   89906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   89908:	6862      	ldr	r2, [r4, #4]
   8990a:	6106      	str	r6, [r0, #16]
   8990c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   89910:	6021      	str	r1, [r4, #0]
   89912:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
   89916:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8991a:	3904      	subs	r1, #4
   8991c:	f853 2b04 	ldr.w	r2, [r3], #4
   89920:	459c      	cmp	ip, r3
   89922:	f841 2f04 	str.w	r2, [r1, #4]!
   89926:	d8f9      	bhi.n	8991c <__lshift+0xc8>
   89928:	e7ed      	b.n	89906 <__lshift+0xb2>
   8992a:	4602      	mov	r2, r0
   8992c:	f240 11d9 	movw	r1, #473	; 0x1d9
   89930:	4b01      	ldr	r3, [pc, #4]	; (89938 <__lshift+0xe4>)
   89932:	4802      	ldr	r0, [pc, #8]	; (8993c <__lshift+0xe8>)
   89934:	f000 fa3a 	bl	89dac <__assert_func>
   89938:	0008cbd0 	.word	0x0008cbd0
   8993c:	0008cc64 	.word	0x0008cc64

00089940 <__mcmp>:
   89940:	4684      	mov	ip, r0
   89942:	690b      	ldr	r3, [r1, #16]
   89944:	6900      	ldr	r0, [r0, #16]
   89946:	1ac0      	subs	r0, r0, r3
   89948:	d115      	bne.n	89976 <__mcmp+0x36>
   8994a:	f10c 0c14 	add.w	ip, ip, #20
   8994e:	3114      	adds	r1, #20
   89950:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
   89954:	b410      	push	{r4}
   89956:	eb01 0383 	add.w	r3, r1, r3, lsl #2
   8995a:	e001      	b.n	89960 <__mcmp+0x20>
   8995c:	4594      	cmp	ip, r2
   8995e:	d208      	bcs.n	89972 <__mcmp+0x32>
   89960:	f852 4d04 	ldr.w	r4, [r2, #-4]!
   89964:	f853 1d04 	ldr.w	r1, [r3, #-4]!
   89968:	428c      	cmp	r4, r1
   8996a:	d0f7      	beq.n	8995c <__mcmp+0x1c>
   8996c:	d204      	bcs.n	89978 <__mcmp+0x38>
   8996e:	f04f 30ff 	mov.w	r0, #4294967295
   89972:	bc10      	pop	{r4}
   89974:	4770      	bx	lr
   89976:	4770      	bx	lr
   89978:	2001      	movs	r0, #1
   8997a:	bc10      	pop	{r4}
   8997c:	4770      	bx	lr
   8997e:	bf00      	nop

00089980 <__mdiff>:
   89980:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89984:	690c      	ldr	r4, [r1, #16]
   89986:	6913      	ldr	r3, [r2, #16]
   89988:	4689      	mov	r9, r1
   8998a:	1ae4      	subs	r4, r4, r3
   8998c:	2c00      	cmp	r4, #0
   8998e:	4617      	mov	r7, r2
   89990:	d17d      	bne.n	89a8e <__mdiff+0x10e>
   89992:	f101 0614 	add.w	r6, r1, #20
   89996:	3214      	adds	r2, #20
   89998:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   8999c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   899a0:	e001      	b.n	899a6 <__mdiff+0x26>
   899a2:	429e      	cmp	r6, r3
   899a4:	d276      	bcs.n	89a94 <__mdiff+0x114>
   899a6:	f853 5d04 	ldr.w	r5, [r3, #-4]!
   899aa:	f852 1d04 	ldr.w	r1, [r2, #-4]!
   899ae:	428d      	cmp	r5, r1
   899b0:	d0f7      	beq.n	899a2 <__mdiff+0x22>
   899b2:	d367      	bcc.n	89a84 <__mdiff+0x104>
   899b4:	f8d9 1004 	ldr.w	r1, [r9, #4]
   899b8:	f7ff fd46 	bl	89448 <_Balloc>
   899bc:	2800      	cmp	r0, #0
   899be:	d073      	beq.n	89aa8 <__mdiff+0x128>
   899c0:	f8d9 5010 	ldr.w	r5, [r9, #16]
   899c4:	60c4      	str	r4, [r0, #12]
   899c6:	f100 0414 	add.w	r4, r0, #20
   899ca:	4626      	mov	r6, r4
   899cc:	f04f 0a00 	mov.w	sl, #0
   899d0:	693b      	ldr	r3, [r7, #16]
   899d2:	f109 0814 	add.w	r8, r9, #20
   899d6:	f107 0e14 	add.w	lr, r7, #20
   899da:	f109 0c10 	add.w	ip, r9, #16
   899de:	eb08 0285 	add.w	r2, r8, r5, lsl #2
   899e2:	eb0e 0983 	add.w	r9, lr, r3, lsl #2
   899e6:	f85c bf04 	ldr.w	fp, [ip, #4]!
   899ea:	f85e 1b04 	ldr.w	r1, [lr], #4
   899ee:	fa1f f38b 	uxth.w	r3, fp
   899f2:	4453      	add	r3, sl
   899f4:	fa1f fa81 	uxth.w	sl, r1
   899f8:	0c09      	lsrs	r1, r1, #16
   899fa:	eba3 030a 	sub.w	r3, r3, sl
   899fe:	ebc1 411b 	rsb	r1, r1, fp, lsr #16
   89a02:	eb01 4123 	add.w	r1, r1, r3, asr #16
   89a06:	b29b      	uxth	r3, r3
   89a08:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   89a0c:	45f1      	cmp	r9, lr
   89a0e:	f846 3b04 	str.w	r3, [r6], #4
   89a12:	ea4f 4a21 	mov.w	sl, r1, asr #16
   89a16:	d8e6      	bhi.n	899e6 <__mdiff+0x66>
   89a18:	eba9 0107 	sub.w	r1, r9, r7
   89a1c:	3915      	subs	r1, #21
   89a1e:	3715      	adds	r7, #21
   89a20:	45b9      	cmp	r9, r7
   89a22:	f021 0603 	bic.w	r6, r1, #3
   89a26:	f106 0604 	add.w	r6, r6, #4
   89a2a:	bf38      	it	cc
   89a2c:	2604      	movcc	r6, #4
   89a2e:	f021 0103 	bic.w	r1, r1, #3
   89a32:	bf38      	it	cc
   89a34:	2100      	movcc	r1, #0
   89a36:	44b0      	add	r8, r6
   89a38:	4542      	cmp	r2, r8
   89a3a:	4426      	add	r6, r4
   89a3c:	440c      	add	r4, r1
   89a3e:	d918      	bls.n	89a72 <__mdiff+0xf2>
   89a40:	4637      	mov	r7, r6
   89a42:	4644      	mov	r4, r8
   89a44:	f854 1b04 	ldr.w	r1, [r4], #4
   89a48:	b28b      	uxth	r3, r1
   89a4a:	4453      	add	r3, sl
   89a4c:	ea4f 4a23 	mov.w	sl, r3, asr #16
   89a50:	eb0a 4111 	add.w	r1, sl, r1, lsr #16
   89a54:	b29b      	uxth	r3, r3
   89a56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   89a5a:	42a2      	cmp	r2, r4
   89a5c:	f847 3b04 	str.w	r3, [r7], #4
   89a60:	ea4f 4a21 	mov.w	sl, r1, asr #16
   89a64:	d8ee      	bhi.n	89a44 <__mdiff+0xc4>
   89a66:	1e54      	subs	r4, r2, #1
   89a68:	eba4 0408 	sub.w	r4, r4, r8
   89a6c:	f024 0403 	bic.w	r4, r4, #3
   89a70:	4434      	add	r4, r6
   89a72:	b923      	cbnz	r3, 89a7e <__mdiff+0xfe>
   89a74:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   89a78:	3d01      	subs	r5, #1
   89a7a:	2b00      	cmp	r3, #0
   89a7c:	d0fa      	beq.n	89a74 <__mdiff+0xf4>
   89a7e:	6105      	str	r5, [r0, #16]
   89a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89a84:	464b      	mov	r3, r9
   89a86:	2401      	movs	r4, #1
   89a88:	46b9      	mov	r9, r7
   89a8a:	461f      	mov	r7, r3
   89a8c:	e792      	b.n	899b4 <__mdiff+0x34>
   89a8e:	dbf9      	blt.n	89a84 <__mdiff+0x104>
   89a90:	2400      	movs	r4, #0
   89a92:	e78f      	b.n	899b4 <__mdiff+0x34>
   89a94:	2100      	movs	r1, #0
   89a96:	f7ff fcd7 	bl	89448 <_Balloc>
   89a9a:	b160      	cbz	r0, 89ab6 <__mdiff+0x136>
   89a9c:	2201      	movs	r2, #1
   89a9e:	2300      	movs	r3, #0
   89aa0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   89aa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89aa8:	4602      	mov	r2, r0
   89aaa:	f44f 7110 	mov.w	r1, #576	; 0x240
   89aae:	4b05      	ldr	r3, [pc, #20]	; (89ac4 <__mdiff+0x144>)
   89ab0:	4805      	ldr	r0, [pc, #20]	; (89ac8 <__mdiff+0x148>)
   89ab2:	f000 f97b 	bl	89dac <__assert_func>
   89ab6:	4602      	mov	r2, r0
   89ab8:	f240 2132 	movw	r1, #562	; 0x232
   89abc:	4b01      	ldr	r3, [pc, #4]	; (89ac4 <__mdiff+0x144>)
   89abe:	4802      	ldr	r0, [pc, #8]	; (89ac8 <__mdiff+0x148>)
   89ac0:	f000 f974 	bl	89dac <__assert_func>
   89ac4:	0008cbd0 	.word	0x0008cbd0
   89ac8:	0008cc64 	.word	0x0008cc64

00089acc <__d2b>:
   89acc:	b570      	push	{r4, r5, r6, lr}
   89ace:	2101      	movs	r1, #1
   89ad0:	b082      	sub	sp, #8
   89ad2:	4616      	mov	r6, r2
   89ad4:	461d      	mov	r5, r3
   89ad6:	f7ff fcb7 	bl	89448 <_Balloc>
   89ada:	4604      	mov	r4, r0
   89adc:	2800      	cmp	r0, #0
   89ade:	d04c      	beq.n	89b7a <__d2b+0xae>
   89ae0:	462b      	mov	r3, r5
   89ae2:	f3c5 550a 	ubfx	r5, r5, #20, #11
   89ae6:	f3c3 0313 	ubfx	r3, r3, #0, #20
   89aea:	b10d      	cbz	r5, 89af0 <__d2b+0x24>
   89aec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   89af0:	2e00      	cmp	r6, #0
   89af2:	9301      	str	r3, [sp, #4]
   89af4:	d022      	beq.n	89b3c <__d2b+0x70>
   89af6:	4668      	mov	r0, sp
   89af8:	9600      	str	r6, [sp, #0]
   89afa:	f7ff fd47 	bl	8958c <__lo0bits>
   89afe:	2800      	cmp	r0, #0
   89b00:	d037      	beq.n	89b72 <__d2b+0xa6>
   89b02:	9b01      	ldr	r3, [sp, #4]
   89b04:	9900      	ldr	r1, [sp, #0]
   89b06:	f1c0 0220 	rsb	r2, r0, #32
   89b0a:	fa03 f202 	lsl.w	r2, r3, r2
   89b0e:	430a      	orrs	r2, r1
   89b10:	40c3      	lsrs	r3, r0
   89b12:	9301      	str	r3, [sp, #4]
   89b14:	6162      	str	r2, [r4, #20]
   89b16:	2b00      	cmp	r3, #0
   89b18:	bf14      	ite	ne
   89b1a:	2102      	movne	r1, #2
   89b1c:	2101      	moveq	r1, #1
   89b1e:	61a3      	str	r3, [r4, #24]
   89b20:	6121      	str	r1, [r4, #16]
   89b22:	b1b5      	cbz	r5, 89b52 <__d2b+0x86>
   89b24:	9b06      	ldr	r3, [sp, #24]
   89b26:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
   89b2a:	4405      	add	r5, r0
   89b2c:	601d      	str	r5, [r3, #0]
   89b2e:	9b07      	ldr	r3, [sp, #28]
   89b30:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   89b34:	6018      	str	r0, [r3, #0]
   89b36:	4620      	mov	r0, r4
   89b38:	b002      	add	sp, #8
   89b3a:	bd70      	pop	{r4, r5, r6, pc}
   89b3c:	a801      	add	r0, sp, #4
   89b3e:	f7ff fd25 	bl	8958c <__lo0bits>
   89b42:	2301      	movs	r3, #1
   89b44:	9a01      	ldr	r2, [sp, #4]
   89b46:	4619      	mov	r1, r3
   89b48:	6162      	str	r2, [r4, #20]
   89b4a:	3020      	adds	r0, #32
   89b4c:	6123      	str	r3, [r4, #16]
   89b4e:	2d00      	cmp	r5, #0
   89b50:	d1e8      	bne.n	89b24 <__d2b+0x58>
   89b52:	eb04 0281 	add.w	r2, r4, r1, lsl #2
   89b56:	f2a0 4332 	subw	r3, r0, #1074	; 0x432
   89b5a:	6910      	ldr	r0, [r2, #16]
   89b5c:	9a06      	ldr	r2, [sp, #24]
   89b5e:	6013      	str	r3, [r2, #0]
   89b60:	f7ff fcf4 	bl	8954c <__hi0bits>
   89b64:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
   89b68:	4620      	mov	r0, r4
   89b6a:	9b07      	ldr	r3, [sp, #28]
   89b6c:	6019      	str	r1, [r3, #0]
   89b6e:	b002      	add	sp, #8
   89b70:	bd70      	pop	{r4, r5, r6, pc}
   89b72:	e9dd 2300 	ldrd	r2, r3, [sp]
   89b76:	6162      	str	r2, [r4, #20]
   89b78:	e7cd      	b.n	89b16 <__d2b+0x4a>
   89b7a:	4602      	mov	r2, r0
   89b7c:	f240 310a 	movw	r1, #778	; 0x30a
   89b80:	4b01      	ldr	r3, [pc, #4]	; (89b88 <__d2b+0xbc>)
   89b82:	4802      	ldr	r0, [pc, #8]	; (89b8c <__d2b+0xc0>)
   89b84:	f000 f912 	bl	89dac <__assert_func>
   89b88:	0008cbd0 	.word	0x0008cbd0
   89b8c:	0008cc64 	.word	0x0008cc64

00089b90 <frexp>:
   89b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   89b92:	2700      	movs	r7, #0
   89b94:	f8df c05c 	ldr.w	ip, [pc, #92]	; 89bf4 <frexp+0x64>
   89b98:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   89b9c:	4563      	cmp	r3, ip
   89b9e:	4604      	mov	r4, r0
   89ba0:	460d      	mov	r5, r1
   89ba2:	6017      	str	r7, [r2, #0]
   89ba4:	dc23      	bgt.n	89bee <frexp+0x5e>
   89ba6:	4684      	mov	ip, r0
   89ba8:	ea53 0c0c 	orrs.w	ip, r3, ip
   89bac:	d01f      	beq.n	89bee <frexp+0x5e>
   89bae:	f8df c048 	ldr.w	ip, [pc, #72]	; 89bf8 <frexp+0x68>
   89bb2:	4616      	mov	r6, r2
   89bb4:	ea01 0c0c 	and.w	ip, r1, ip
   89bb8:	460a      	mov	r2, r1
   89bba:	f1bc 0f00 	cmp.w	ip, #0
   89bbe:	d109      	bne.n	89bd4 <frexp+0x44>
   89bc0:	2200      	movs	r2, #0
   89bc2:	4b0e      	ldr	r3, [pc, #56]	; (89bfc <frexp+0x6c>)
   89bc4:	f002 fb3c 	bl	8c240 <__aeabi_dmul>
   89bc8:	f06f 0735 	mvn.w	r7, #53	; 0x35
   89bcc:	4604      	mov	r4, r0
   89bce:	460a      	mov	r2, r1
   89bd0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   89bd4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
   89bd8:	151b      	asrs	r3, r3, #20
   89bda:	f422 02e0 	bic.w	r2, r2, #7340032	; 0x700000
   89bde:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   89be2:	443b      	add	r3, r7
   89be4:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
   89be8:	6033      	str	r3, [r6, #0]
   89bea:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
   89bee:	4620      	mov	r0, r4
   89bf0:	4629      	mov	r1, r5
   89bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   89bf4:	7fefffff 	.word	0x7fefffff
   89bf8:	7ff00000 	.word	0x7ff00000
   89bfc:	43500000 	.word	0x43500000

00089c00 <_sbrk_r>:
   89c00:	2200      	movs	r2, #0
   89c02:	b538      	push	{r3, r4, r5, lr}
   89c04:	4d06      	ldr	r5, [pc, #24]	; (89c20 <_sbrk_r+0x20>)
   89c06:	4604      	mov	r4, r0
   89c08:	4608      	mov	r0, r1
   89c0a:	602a      	str	r2, [r5, #0]
   89c0c:	f7fa f830 	bl	83c70 <_sbrk>
   89c10:	1c43      	adds	r3, r0, #1
   89c12:	d000      	beq.n	89c16 <_sbrk_r+0x16>
   89c14:	bd38      	pop	{r3, r4, r5, pc}
   89c16:	682b      	ldr	r3, [r5, #0]
   89c18:	2b00      	cmp	r3, #0
   89c1a:	d0fb      	beq.n	89c14 <_sbrk_r+0x14>
   89c1c:	6023      	str	r3, [r4, #0]
   89c1e:	bd38      	pop	{r3, r4, r5, pc}
   89c20:	20073354 	.word	0x20073354

00089c24 <__ssprint_r>:
   89c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89c28:	6893      	ldr	r3, [r2, #8]
   89c2a:	4691      	mov	r9, r2
   89c2c:	b083      	sub	sp, #12
   89c2e:	2b00      	cmp	r3, #0
   89c30:	d06e      	beq.n	89d10 <__ssprint_r+0xec>
   89c32:	6817      	ldr	r7, [r2, #0]
   89c34:	4680      	mov	r8, r0
   89c36:	460c      	mov	r4, r1
   89c38:	6808      	ldr	r0, [r1, #0]
   89c3a:	688d      	ldr	r5, [r1, #8]
   89c3c:	3708      	adds	r7, #8
   89c3e:	e044      	b.n	89cca <__ssprint_r+0xa6>
   89c40:	f8b4 c00c 	ldrh.w	ip, [r4, #12]
   89c44:	f41c 6f90 	tst.w	ip, #1152	; 0x480
   89c48:	d02e      	beq.n	89ca8 <__ssprint_r+0x84>
   89c4a:	e9d4 1304 	ldrd	r1, r3, [r4, #16]
   89c4e:	1a45      	subs	r5, r0, r1
   89c50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   89c54:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
   89c58:	19aa      	adds	r2, r5, r6
   89c5a:	ea4f 0a63 	mov.w	sl, r3, asr #1
   89c5e:	1c53      	adds	r3, r2, #1
   89c60:	4553      	cmp	r3, sl
   89c62:	4652      	mov	r2, sl
   89c64:	bf84      	itt	hi
   89c66:	469a      	movhi	sl, r3
   89c68:	4652      	movhi	r2, sl
   89c6a:	f41c 6f80 	tst.w	ip, #1024	; 0x400
   89c6e:	d036      	beq.n	89cde <__ssprint_r+0xba>
   89c70:	4611      	mov	r1, r2
   89c72:	4640      	mov	r0, r8
   89c74:	f7ff f8e8 	bl	88e48 <_malloc_r>
   89c78:	2800      	cmp	r0, #0
   89c7a:	d03a      	beq.n	89cf2 <__ssprint_r+0xce>
   89c7c:	462a      	mov	r2, r5
   89c7e:	6921      	ldr	r1, [r4, #16]
   89c80:	9001      	str	r0, [sp, #4]
   89c82:	f7fc f8c3 	bl	85e0c <memcpy>
   89c86:	89a2      	ldrh	r2, [r4, #12]
   89c88:	9b01      	ldr	r3, [sp, #4]
   89c8a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   89c8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   89c92:	81a2      	strh	r2, [r4, #12]
   89c94:	1958      	adds	r0, r3, r5
   89c96:	ebaa 0505 	sub.w	r5, sl, r5
   89c9a:	60a5      	str	r5, [r4, #8]
   89c9c:	f8c4 a014 	str.w	sl, [r4, #20]
   89ca0:	4635      	mov	r5, r6
   89ca2:	46b2      	mov	sl, r6
   89ca4:	6123      	str	r3, [r4, #16]
   89ca6:	6020      	str	r0, [r4, #0]
   89ca8:	4659      	mov	r1, fp
   89caa:	4652      	mov	r2, sl
   89cac:	f000 f910 	bl	89ed0 <memmove>
   89cb0:	f8d9 3008 	ldr.w	r3, [r9, #8]
   89cb4:	68a1      	ldr	r1, [r4, #8]
   89cb6:	6820      	ldr	r0, [r4, #0]
   89cb8:	1b4d      	subs	r5, r1, r5
   89cba:	4450      	add	r0, sl
   89cbc:	1b9e      	subs	r6, r3, r6
   89cbe:	60a5      	str	r5, [r4, #8]
   89cc0:	6020      	str	r0, [r4, #0]
   89cc2:	f8c9 6008 	str.w	r6, [r9, #8]
   89cc6:	b31e      	cbz	r6, 89d10 <__ssprint_r+0xec>
   89cc8:	3708      	adds	r7, #8
   89cca:	e957 b602 	ldrd	fp, r6, [r7, #-8]
   89cce:	2e00      	cmp	r6, #0
   89cd0:	d0fa      	beq.n	89cc8 <__ssprint_r+0xa4>
   89cd2:	42b5      	cmp	r5, r6
   89cd4:	46aa      	mov	sl, r5
   89cd6:	d9b3      	bls.n	89c40 <__ssprint_r+0x1c>
   89cd8:	4635      	mov	r5, r6
   89cda:	46b2      	mov	sl, r6
   89cdc:	e7e4      	b.n	89ca8 <__ssprint_r+0x84>
   89cde:	4640      	mov	r0, r8
   89ce0:	f000 f972 	bl	89fc8 <_realloc_r>
   89ce4:	4603      	mov	r3, r0
   89ce6:	2800      	cmp	r0, #0
   89ce8:	d1d4      	bne.n	89c94 <__ssprint_r+0x70>
   89cea:	4640      	mov	r0, r8
   89cec:	6921      	ldr	r1, [r4, #16]
   89cee:	f7fe ff9f 	bl	88c30 <_free_r>
   89cf2:	230c      	movs	r3, #12
   89cf4:	2200      	movs	r2, #0
   89cf6:	f04f 30ff 	mov.w	r0, #4294967295
   89cfa:	f8c8 3000 	str.w	r3, [r8]
   89cfe:	89a3      	ldrh	r3, [r4, #12]
   89d00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   89d04:	81a3      	strh	r3, [r4, #12]
   89d06:	e9c9 2201 	strd	r2, r2, [r9, #4]
   89d0a:	b003      	add	sp, #12
   89d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89d10:	2300      	movs	r3, #0
   89d12:	4618      	mov	r0, r3
   89d14:	f8c9 3004 	str.w	r3, [r9, #4]
   89d18:	b003      	add	sp, #12
   89d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   89d1e:	bf00      	nop

00089d20 <__register_exitproc>:
   89d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   89d24:	f8df a07c 	ldr.w	sl, [pc, #124]	; 89da4 <__register_exitproc+0x84>
   89d28:	4606      	mov	r6, r0
   89d2a:	f8da 0000 	ldr.w	r0, [sl]
   89d2e:	4698      	mov	r8, r3
   89d30:	460f      	mov	r7, r1
   89d32:	4691      	mov	r9, r2
   89d34:	f7ff f884 	bl	88e40 <__retarget_lock_acquire_recursive>
   89d38:	4b1b      	ldr	r3, [pc, #108]	; (89da8 <__register_exitproc+0x88>)
   89d3a:	681b      	ldr	r3, [r3, #0]
   89d3c:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   89d40:	b324      	cbz	r4, 89d8c <__register_exitproc+0x6c>
   89d42:	6865      	ldr	r5, [r4, #4]
   89d44:	2d1f      	cmp	r5, #31
   89d46:	dc26      	bgt.n	89d96 <__register_exitproc+0x76>
   89d48:	b95e      	cbnz	r6, 89d62 <__register_exitproc+0x42>
   89d4a:	1c6b      	adds	r3, r5, #1
   89d4c:	3502      	adds	r5, #2
   89d4e:	f8da 0000 	ldr.w	r0, [sl]
   89d52:	6063      	str	r3, [r4, #4]
   89d54:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
   89d58:	f7ff f874 	bl	88e44 <__retarget_lock_release_recursive>
   89d5c:	2000      	movs	r0, #0
   89d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   89d62:	2301      	movs	r3, #1
   89d64:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   89d68:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
   89d6c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   89d70:	40ab      	lsls	r3, r5
   89d72:	431a      	orrs	r2, r3
   89d74:	2e02      	cmp	r6, #2
   89d76:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   89d7a:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
   89d7e:	d1e4      	bne.n	89d4a <__register_exitproc+0x2a>
   89d80:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
   89d84:	4313      	orrs	r3, r2
   89d86:	f8c4 318c 	str.w	r3, [r4, #396]	; 0x18c
   89d8a:	e7de      	b.n	89d4a <__register_exitproc+0x2a>
   89d8c:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
   89d90:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
   89d94:	e7d5      	b.n	89d42 <__register_exitproc+0x22>
   89d96:	f8da 0000 	ldr.w	r0, [sl]
   89d9a:	f7ff f853 	bl	88e44 <__retarget_lock_release_recursive>
   89d9e:	f04f 30ff 	mov.w	r0, #4294967295
   89da2:	e7dc      	b.n	89d5e <__register_exitproc+0x3e>
   89da4:	20070f60 	.word	0x20070f60
   89da8:	0008cb58 	.word	0x0008cb58

00089dac <__assert_func>:
   89dac:	4614      	mov	r4, r2
   89dae:	b500      	push	{lr}
   89db0:	461a      	mov	r2, r3
   89db2:	4b0a      	ldr	r3, [pc, #40]	; (89ddc <__assert_func+0x30>)
   89db4:	460d      	mov	r5, r1
   89db6:	681b      	ldr	r3, [r3, #0]
   89db8:	b085      	sub	sp, #20
   89dba:	68de      	ldr	r6, [r3, #12]
   89dbc:	4603      	mov	r3, r0
   89dbe:	b14c      	cbz	r4, 89dd4 <__assert_func+0x28>
   89dc0:	4907      	ldr	r1, [pc, #28]	; (89de0 <__assert_func+0x34>)
   89dc2:	9101      	str	r1, [sp, #4]
   89dc4:	4630      	mov	r0, r6
   89dc6:	4907      	ldr	r1, [pc, #28]	; (89de4 <__assert_func+0x38>)
   89dc8:	9402      	str	r4, [sp, #8]
   89dca:	9500      	str	r5, [sp, #0]
   89dcc:	f000 f850 	bl	89e70 <fiprintf>
   89dd0:	f001 faaa 	bl	8b328 <abort>
   89dd4:	4904      	ldr	r1, [pc, #16]	; (89de8 <__assert_func+0x3c>)
   89dd6:	460c      	mov	r4, r1
   89dd8:	e7f3      	b.n	89dc2 <__assert_func+0x16>
   89dda:	bf00      	nop
   89ddc:	20070b30 	.word	0x20070b30
   89de0:	0008cde4 	.word	0x0008cde4
   89de4:	0008cdf4 	.word	0x0008cdf4
   89de8:	0008cdf0 	.word	0x0008cdf0

00089dec <_calloc_r>:
   89dec:	b538      	push	{r3, r4, r5, lr}
   89dee:	fba1 1402 	umull	r1, r4, r1, r2
   89df2:	bb84      	cbnz	r4, 89e56 <_calloc_r+0x6a>
   89df4:	f7ff f828 	bl	88e48 <_malloc_r>
   89df8:	4605      	mov	r5, r0
   89dfa:	b1d8      	cbz	r0, 89e34 <_calloc_r+0x48>
   89dfc:	f850 2c04 	ldr.w	r2, [r0, #-4]
   89e00:	f022 0203 	bic.w	r2, r2, #3
   89e04:	3a04      	subs	r2, #4
   89e06:	2a24      	cmp	r2, #36	; 0x24
   89e08:	d816      	bhi.n	89e38 <_calloc_r+0x4c>
   89e0a:	2a13      	cmp	r2, #19
   89e0c:	d919      	bls.n	89e42 <_calloc_r+0x56>
   89e0e:	2a1b      	cmp	r2, #27
   89e10:	e9c0 4400 	strd	r4, r4, [r0]
   89e14:	d91c      	bls.n	89e50 <_calloc_r+0x64>
   89e16:	2300      	movs	r3, #0
   89e18:	2a24      	cmp	r2, #36	; 0x24
   89e1a:	bf14      	ite	ne
   89e1c:	f100 0210 	addne.w	r2, r0, #16
   89e20:	f100 0218 	addeq.w	r2, r0, #24
   89e24:	e9c0 4402 	strd	r4, r4, [r0, #8]
   89e28:	bf04      	itt	eq
   89e2a:	6104      	streq	r4, [r0, #16]
   89e2c:	6144      	streq	r4, [r0, #20]
   89e2e:	e9c2 3300 	strd	r3, r3, [r2]
   89e32:	6093      	str	r3, [r2, #8]
   89e34:	4628      	mov	r0, r5
   89e36:	bd38      	pop	{r3, r4, r5, pc}
   89e38:	4621      	mov	r1, r4
   89e3a:	f7fc f85d 	bl	85ef8 <memset>
   89e3e:	4628      	mov	r0, r5
   89e40:	bd38      	pop	{r3, r4, r5, pc}
   89e42:	4602      	mov	r2, r0
   89e44:	2300      	movs	r3, #0
   89e46:	4628      	mov	r0, r5
   89e48:	e9c2 3300 	strd	r3, r3, [r2]
   89e4c:	6093      	str	r3, [r2, #8]
   89e4e:	bd38      	pop	{r3, r4, r5, pc}
   89e50:	f100 0208 	add.w	r2, r0, #8
   89e54:	e7f6      	b.n	89e44 <_calloc_r+0x58>
   89e56:	f000 f805 	bl	89e64 <__errno>
   89e5a:	230c      	movs	r3, #12
   89e5c:	2500      	movs	r5, #0
   89e5e:	6003      	str	r3, [r0, #0]
   89e60:	e7e8      	b.n	89e34 <_calloc_r+0x48>
   89e62:	bf00      	nop

00089e64 <__errno>:
   89e64:	4b01      	ldr	r3, [pc, #4]	; (89e6c <__errno+0x8>)
   89e66:	6818      	ldr	r0, [r3, #0]
   89e68:	4770      	bx	lr
   89e6a:	bf00      	nop
   89e6c:	20070b30 	.word	0x20070b30

00089e70 <fiprintf>:
   89e70:	b40e      	push	{r1, r2, r3}
   89e72:	b500      	push	{lr}
   89e74:	4a07      	ldr	r2, [pc, #28]	; (89e94 <fiprintf+0x24>)
   89e76:	b082      	sub	sp, #8
   89e78:	ab03      	add	r3, sp, #12
   89e7a:	4601      	mov	r1, r0
   89e7c:	6810      	ldr	r0, [r2, #0]
   89e7e:	f853 2b04 	ldr.w	r2, [r3], #4
   89e82:	9301      	str	r3, [sp, #4]
   89e84:	f000 faca 	bl	8a41c <_vfiprintf_r>
   89e88:	b002      	add	sp, #8
   89e8a:	f85d eb04 	ldr.w	lr, [sp], #4
   89e8e:	b003      	add	sp, #12
   89e90:	4770      	bx	lr
   89e92:	bf00      	nop
   89e94:	20070b30 	.word	0x20070b30

00089e98 <__locale_mb_cur_max>:
   89e98:	4b01      	ldr	r3, [pc, #4]	; (89ea0 <__locale_mb_cur_max+0x8>)
   89e9a:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
   89e9e:	4770      	bx	lr
   89ea0:	20071374 	.word	0x20071374

00089ea4 <__ascii_mbtowc>:
   89ea4:	b082      	sub	sp, #8
   89ea6:	b149      	cbz	r1, 89ebc <__ascii_mbtowc+0x18>
   89ea8:	b15a      	cbz	r2, 89ec2 <__ascii_mbtowc+0x1e>
   89eaa:	b16b      	cbz	r3, 89ec8 <__ascii_mbtowc+0x24>
   89eac:	7813      	ldrb	r3, [r2, #0]
   89eae:	600b      	str	r3, [r1, #0]
   89eb0:	7812      	ldrb	r2, [r2, #0]
   89eb2:	1e10      	subs	r0, r2, #0
   89eb4:	bf18      	it	ne
   89eb6:	2001      	movne	r0, #1
   89eb8:	b002      	add	sp, #8
   89eba:	4770      	bx	lr
   89ebc:	a901      	add	r1, sp, #4
   89ebe:	2a00      	cmp	r2, #0
   89ec0:	d1f3      	bne.n	89eaa <__ascii_mbtowc+0x6>
   89ec2:	4610      	mov	r0, r2
   89ec4:	b002      	add	sp, #8
   89ec6:	4770      	bx	lr
   89ec8:	f06f 0001 	mvn.w	r0, #1
   89ecc:	e7f4      	b.n	89eb8 <__ascii_mbtowc+0x14>
   89ece:	bf00      	nop

00089ed0 <memmove>:
   89ed0:	4288      	cmp	r0, r1
   89ed2:	d90d      	bls.n	89ef0 <memmove+0x20>
   89ed4:	188b      	adds	r3, r1, r2
   89ed6:	4283      	cmp	r3, r0
   89ed8:	d90a      	bls.n	89ef0 <memmove+0x20>
   89eda:	eb00 0c02 	add.w	ip, r0, r2
   89ede:	b1ba      	cbz	r2, 89f10 <memmove+0x40>
   89ee0:	4662      	mov	r2, ip
   89ee2:	f813 cd01 	ldrb.w	ip, [r3, #-1]!
   89ee6:	4299      	cmp	r1, r3
   89ee8:	f802 cd01 	strb.w	ip, [r2, #-1]!
   89eec:	d1f9      	bne.n	89ee2 <memmove+0x12>
   89eee:	4770      	bx	lr
   89ef0:	2a0f      	cmp	r2, #15
   89ef2:	d80e      	bhi.n	89f12 <memmove+0x42>
   89ef4:	4603      	mov	r3, r0
   89ef6:	f102 3cff 	add.w	ip, r2, #4294967295
   89efa:	b14a      	cbz	r2, 89f10 <memmove+0x40>
   89efc:	f10c 0c01 	add.w	ip, ip, #1
   89f00:	3b01      	subs	r3, #1
   89f02:	448c      	add	ip, r1
   89f04:	f811 2b01 	ldrb.w	r2, [r1], #1
   89f08:	4561      	cmp	r1, ip
   89f0a:	f803 2f01 	strb.w	r2, [r3, #1]!
   89f0e:	d1f9      	bne.n	89f04 <memmove+0x34>
   89f10:	4770      	bx	lr
   89f12:	ea40 0301 	orr.w	r3, r0, r1
   89f16:	079b      	lsls	r3, r3, #30
   89f18:	d14f      	bne.n	89fba <memmove+0xea>
   89f1a:	f1a2 0310 	sub.w	r3, r2, #16
   89f1e:	b570      	push	{r4, r5, r6, lr}
   89f20:	f101 0c20 	add.w	ip, r1, #32
   89f24:	f023 050f 	bic.w	r5, r3, #15
   89f28:	f101 0e10 	add.w	lr, r1, #16
   89f2c:	f100 0410 	add.w	r4, r0, #16
   89f30:	44ac      	add	ip, r5
   89f32:	091b      	lsrs	r3, r3, #4
   89f34:	f85e 5c10 	ldr.w	r5, [lr, #-16]
   89f38:	f10e 0e10 	add.w	lr, lr, #16
   89f3c:	f844 5c10 	str.w	r5, [r4, #-16]
   89f40:	f85e 5c1c 	ldr.w	r5, [lr, #-28]
   89f44:	3410      	adds	r4, #16
   89f46:	f844 5c1c 	str.w	r5, [r4, #-28]
   89f4a:	f85e 5c18 	ldr.w	r5, [lr, #-24]
   89f4e:	f844 5c18 	str.w	r5, [r4, #-24]
   89f52:	f85e 5c14 	ldr.w	r5, [lr, #-20]
   89f56:	45e6      	cmp	lr, ip
   89f58:	f844 5c14 	str.w	r5, [r4, #-20]
   89f5c:	d1ea      	bne.n	89f34 <memmove+0x64>
   89f5e:	3301      	adds	r3, #1
   89f60:	f012 0f0c 	tst.w	r2, #12
   89f64:	eb01 1103 	add.w	r1, r1, r3, lsl #4
   89f68:	f002 040f 	and.w	r4, r2, #15
   89f6c:	eb00 1303 	add.w	r3, r0, r3, lsl #4
   89f70:	d027      	beq.n	89fc2 <memmove+0xf2>
   89f72:	468e      	mov	lr, r1
   89f74:	3c04      	subs	r4, #4
   89f76:	f024 0603 	bic.w	r6, r4, #3
   89f7a:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   89f7e:	441e      	add	r6, r3
   89f80:	1f1c      	subs	r4, r3, #4
   89f82:	f85e 5b04 	ldr.w	r5, [lr], #4
   89f86:	f844 5f04 	str.w	r5, [r4, #4]!
   89f8a:	42b4      	cmp	r4, r6
   89f8c:	d1f9      	bne.n	89f82 <memmove+0xb2>
   89f8e:	f10c 0401 	add.w	r4, ip, #1
   89f92:	f002 0203 	and.w	r2, r2, #3
   89f96:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   89f9a:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   89f9e:	f102 3cff 	add.w	ip, r2, #4294967295
   89fa2:	b14a      	cbz	r2, 89fb8 <memmove+0xe8>
   89fa4:	f10c 0c01 	add.w	ip, ip, #1
   89fa8:	3b01      	subs	r3, #1
   89faa:	448c      	add	ip, r1
   89fac:	f811 2b01 	ldrb.w	r2, [r1], #1
   89fb0:	4561      	cmp	r1, ip
   89fb2:	f803 2f01 	strb.w	r2, [r3, #1]!
   89fb6:	d1f9      	bne.n	89fac <memmove+0xdc>
   89fb8:	bd70      	pop	{r4, r5, r6, pc}
   89fba:	4603      	mov	r3, r0
   89fbc:	f102 3cff 	add.w	ip, r2, #4294967295
   89fc0:	e79c      	b.n	89efc <memmove+0x2c>
   89fc2:	4622      	mov	r2, r4
   89fc4:	e7eb      	b.n	89f9e <memmove+0xce>
   89fc6:	bf00      	nop

00089fc8 <_realloc_r>:
   89fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   89fcc:	4616      	mov	r6, r2
   89fce:	2900      	cmp	r1, #0
   89fd0:	f000 8098 	beq.w	8a104 <_realloc_r+0x13c>
   89fd4:	f106 050b 	add.w	r5, r6, #11
   89fd8:	4680      	mov	r8, r0
   89fda:	460c      	mov	r4, r1
   89fdc:	f7ff fa28 	bl	89430 <__malloc_lock>
   89fe0:	2d16      	cmp	r5, #22
   89fe2:	d85d      	bhi.n	8a0a0 <_realloc_r+0xd8>
   89fe4:	2510      	movs	r5, #16
   89fe6:	462a      	mov	r2, r5
   89fe8:	42ae      	cmp	r6, r5
   89fea:	d85e      	bhi.n	8a0aa <_realloc_r+0xe2>
   89fec:	f854 1c04 	ldr.w	r1, [r4, #-4]
   89ff0:	f1a4 0908 	sub.w	r9, r4, #8
   89ff4:	f021 0703 	bic.w	r7, r1, #3
   89ff8:	4297      	cmp	r7, r2
   89ffa:	da62      	bge.n	8a0c2 <_realloc_r+0xfa>
   89ffc:	4bbc      	ldr	r3, [pc, #752]	; (8a2f0 <_realloc_r+0x328>)
   89ffe:	eb09 0007 	add.w	r0, r9, r7
   8a002:	f8d3 c008 	ldr.w	ip, [r3, #8]
   8a006:	4584      	cmp	ip, r0
   8a008:	f000 8097 	beq.w	8a13a <_realloc_r+0x172>
   8a00c:	f8d0 c004 	ldr.w	ip, [r0, #4]
   8a010:	f02c 0301 	bic.w	r3, ip, #1
   8a014:	4403      	add	r3, r0
   8a016:	685b      	ldr	r3, [r3, #4]
   8a018:	07db      	lsls	r3, r3, #31
   8a01a:	d468      	bmi.n	8a0ee <_realloc_r+0x126>
   8a01c:	f02c 0c03 	bic.w	ip, ip, #3
   8a020:	eb07 030c 	add.w	r3, r7, ip
   8a024:	4293      	cmp	r3, r2
   8a026:	da47      	bge.n	8a0b8 <_realloc_r+0xf0>
   8a028:	07cb      	lsls	r3, r1, #31
   8a02a:	d410      	bmi.n	8a04e <_realloc_r+0x86>
   8a02c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8a030:	eba9 0a03 	sub.w	sl, r9, r3
   8a034:	f8da 3004 	ldr.w	r3, [sl, #4]
   8a038:	f023 0103 	bic.w	r1, r3, #3
   8a03c:	448c      	add	ip, r1
   8a03e:	44bc      	add	ip, r7
   8a040:	4594      	cmp	ip, r2
   8a042:	f280 8111 	bge.w	8a268 <_realloc_r+0x2a0>
   8a046:	187b      	adds	r3, r7, r1
   8a048:	4293      	cmp	r3, r2
   8a04a:	f280 80e8 	bge.w	8a21e <_realloc_r+0x256>
   8a04e:	4631      	mov	r1, r6
   8a050:	4640      	mov	r0, r8
   8a052:	f7fe fef9 	bl	88e48 <_malloc_r>
   8a056:	4606      	mov	r6, r0
   8a058:	b1e0      	cbz	r0, 8a094 <_realloc_r+0xcc>
   8a05a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a05e:	f1a0 0208 	sub.w	r2, r0, #8
   8a062:	f023 0301 	bic.w	r3, r3, #1
   8a066:	444b      	add	r3, r9
   8a068:	4293      	cmp	r3, r2
   8a06a:	f000 80d2 	beq.w	8a212 <_realloc_r+0x24a>
   8a06e:	1f3a      	subs	r2, r7, #4
   8a070:	2a24      	cmp	r2, #36	; 0x24
   8a072:	f200 80f5 	bhi.w	8a260 <_realloc_r+0x298>
   8a076:	2a13      	cmp	r2, #19
   8a078:	f200 80ac 	bhi.w	8a1d4 <_realloc_r+0x20c>
   8a07c:	4603      	mov	r3, r0
   8a07e:	4622      	mov	r2, r4
   8a080:	6811      	ldr	r1, [r2, #0]
   8a082:	6019      	str	r1, [r3, #0]
   8a084:	6851      	ldr	r1, [r2, #4]
   8a086:	6059      	str	r1, [r3, #4]
   8a088:	6892      	ldr	r2, [r2, #8]
   8a08a:	609a      	str	r2, [r3, #8]
   8a08c:	4621      	mov	r1, r4
   8a08e:	4640      	mov	r0, r8
   8a090:	f7fe fdce 	bl	88c30 <_free_r>
   8a094:	4640      	mov	r0, r8
   8a096:	f7ff f9d1 	bl	8943c <__malloc_unlock>
   8a09a:	4630      	mov	r0, r6
   8a09c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a0a0:	f025 0507 	bic.w	r5, r5, #7
   8a0a4:	2d00      	cmp	r5, #0
   8a0a6:	462a      	mov	r2, r5
   8a0a8:	da9e      	bge.n	89fe8 <_realloc_r+0x20>
   8a0aa:	230c      	movs	r3, #12
   8a0ac:	2600      	movs	r6, #0
   8a0ae:	f8c8 3000 	str.w	r3, [r8]
   8a0b2:	4630      	mov	r0, r6
   8a0b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a0b8:	461f      	mov	r7, r3
   8a0ba:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
   8a0be:	60d3      	str	r3, [r2, #12]
   8a0c0:	609a      	str	r2, [r3, #8]
   8a0c2:	1b7b      	subs	r3, r7, r5
   8a0c4:	2b0f      	cmp	r3, #15
   8a0c6:	d822      	bhi.n	8a10e <_realloc_r+0x146>
   8a0c8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   8a0cc:	f003 0301 	and.w	r3, r3, #1
   8a0d0:	433b      	orrs	r3, r7
   8a0d2:	f8c9 3004 	str.w	r3, [r9, #4]
   8a0d6:	444f      	add	r7, r9
   8a0d8:	687b      	ldr	r3, [r7, #4]
   8a0da:	f043 0301 	orr.w	r3, r3, #1
   8a0de:	607b      	str	r3, [r7, #4]
   8a0e0:	4626      	mov	r6, r4
   8a0e2:	4640      	mov	r0, r8
   8a0e4:	f7ff f9aa 	bl	8943c <__malloc_unlock>
   8a0e8:	4630      	mov	r0, r6
   8a0ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a0ee:	07c9      	lsls	r1, r1, #31
   8a0f0:	d4ad      	bmi.n	8a04e <_realloc_r+0x86>
   8a0f2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8a0f6:	eba9 0a03 	sub.w	sl, r9, r3
   8a0fa:	f8da 1004 	ldr.w	r1, [sl, #4]
   8a0fe:	f021 0103 	bic.w	r1, r1, #3
   8a102:	e7a0      	b.n	8a046 <_realloc_r+0x7e>
   8a104:	4611      	mov	r1, r2
   8a106:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a10a:	f7fe be9d 	b.w	88e48 <_malloc_r>
   8a10e:	f8d9 1004 	ldr.w	r1, [r9, #4]
   8a112:	f043 0301 	orr.w	r3, r3, #1
   8a116:	f001 0101 	and.w	r1, r1, #1
   8a11a:	4329      	orrs	r1, r5
   8a11c:	f8c9 1004 	str.w	r1, [r9, #4]
   8a120:	eb09 0105 	add.w	r1, r9, r5
   8a124:	604b      	str	r3, [r1, #4]
   8a126:	444f      	add	r7, r9
   8a128:	687b      	ldr	r3, [r7, #4]
   8a12a:	4640      	mov	r0, r8
   8a12c:	f043 0301 	orr.w	r3, r3, #1
   8a130:	3108      	adds	r1, #8
   8a132:	607b      	str	r3, [r7, #4]
   8a134:	f7fe fd7c 	bl	88c30 <_free_r>
   8a138:	e7d2      	b.n	8a0e0 <_realloc_r+0x118>
   8a13a:	f8dc 0004 	ldr.w	r0, [ip, #4]
   8a13e:	f020 0b03 	bic.w	fp, r0, #3
   8a142:	eb07 0c0b 	add.w	ip, r7, fp
   8a146:	f105 0010 	add.w	r0, r5, #16
   8a14a:	4584      	cmp	ip, r0
   8a14c:	da4d      	bge.n	8a1ea <_realloc_r+0x222>
   8a14e:	07c9      	lsls	r1, r1, #31
   8a150:	f53f af7d 	bmi.w	8a04e <_realloc_r+0x86>
   8a154:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8a158:	eba9 0a01 	sub.w	sl, r9, r1
   8a15c:	f8da 1004 	ldr.w	r1, [sl, #4]
   8a160:	f021 0103 	bic.w	r1, r1, #3
   8a164:	448b      	add	fp, r1
   8a166:	44bb      	add	fp, r7
   8a168:	4558      	cmp	r0, fp
   8a16a:	f73f af6c 	bgt.w	8a046 <_realloc_r+0x7e>
   8a16e:	4656      	mov	r6, sl
   8a170:	f8da 100c 	ldr.w	r1, [sl, #12]
   8a174:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8a178:	1f3a      	subs	r2, r7, #4
   8a17a:	2a24      	cmp	r2, #36	; 0x24
   8a17c:	60c1      	str	r1, [r0, #12]
   8a17e:	6088      	str	r0, [r1, #8]
   8a180:	f200 80db 	bhi.w	8a33a <_realloc_r+0x372>
   8a184:	2a13      	cmp	r2, #19
   8a186:	f240 80d6 	bls.w	8a336 <_realloc_r+0x36e>
   8a18a:	6821      	ldr	r1, [r4, #0]
   8a18c:	2a1b      	cmp	r2, #27
   8a18e:	f8ca 1008 	str.w	r1, [sl, #8]
   8a192:	6861      	ldr	r1, [r4, #4]
   8a194:	f8ca 100c 	str.w	r1, [sl, #12]
   8a198:	f200 80e0 	bhi.w	8a35c <_realloc_r+0x394>
   8a19c:	3408      	adds	r4, #8
   8a19e:	f10a 0210 	add.w	r2, sl, #16
   8a1a2:	6821      	ldr	r1, [r4, #0]
   8a1a4:	6011      	str	r1, [r2, #0]
   8a1a6:	6861      	ldr	r1, [r4, #4]
   8a1a8:	6051      	str	r1, [r2, #4]
   8a1aa:	68a1      	ldr	r1, [r4, #8]
   8a1ac:	6091      	str	r1, [r2, #8]
   8a1ae:	ebab 0205 	sub.w	r2, fp, r5
   8a1b2:	eb0a 0105 	add.w	r1, sl, r5
   8a1b6:	f042 0201 	orr.w	r2, r2, #1
   8a1ba:	6099      	str	r1, [r3, #8]
   8a1bc:	604a      	str	r2, [r1, #4]
   8a1be:	f8da 3004 	ldr.w	r3, [sl, #4]
   8a1c2:	4640      	mov	r0, r8
   8a1c4:	f003 0301 	and.w	r3, r3, #1
   8a1c8:	431d      	orrs	r5, r3
   8a1ca:	f8ca 5004 	str.w	r5, [sl, #4]
   8a1ce:	f7ff f935 	bl	8943c <__malloc_unlock>
   8a1d2:	e76e      	b.n	8a0b2 <_realloc_r+0xea>
   8a1d4:	6823      	ldr	r3, [r4, #0]
   8a1d6:	2a1b      	cmp	r2, #27
   8a1d8:	6003      	str	r3, [r0, #0]
   8a1da:	6863      	ldr	r3, [r4, #4]
   8a1dc:	6043      	str	r3, [r0, #4]
   8a1de:	d868      	bhi.n	8a2b2 <_realloc_r+0x2ea>
   8a1e0:	f104 0208 	add.w	r2, r4, #8
   8a1e4:	f100 0308 	add.w	r3, r0, #8
   8a1e8:	e74a      	b.n	8a080 <_realloc_r+0xb8>
   8a1ea:	eb09 0205 	add.w	r2, r9, r5
   8a1ee:	ebac 0c05 	sub.w	ip, ip, r5
   8a1f2:	609a      	str	r2, [r3, #8]
   8a1f4:	f04c 0301 	orr.w	r3, ip, #1
   8a1f8:	6053      	str	r3, [r2, #4]
   8a1fa:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a1fe:	4640      	mov	r0, r8
   8a200:	f003 0301 	and.w	r3, r3, #1
   8a204:	431d      	orrs	r5, r3
   8a206:	f844 5c04 	str.w	r5, [r4, #-4]
   8a20a:	f7ff f917 	bl	8943c <__malloc_unlock>
   8a20e:	4626      	mov	r6, r4
   8a210:	e74f      	b.n	8a0b2 <_realloc_r+0xea>
   8a212:	f850 3c04 	ldr.w	r3, [r0, #-4]
   8a216:	f023 0303 	bic.w	r3, r3, #3
   8a21a:	441f      	add	r7, r3
   8a21c:	e751      	b.n	8a0c2 <_realloc_r+0xfa>
   8a21e:	4656      	mov	r6, sl
   8a220:	f8da 100c 	ldr.w	r1, [sl, #12]
   8a224:	f856 0f08 	ldr.w	r0, [r6, #8]!
   8a228:	1f3a      	subs	r2, r7, #4
   8a22a:	2a24      	cmp	r2, #36	; 0x24
   8a22c:	60c1      	str	r1, [r0, #12]
   8a22e:	6088      	str	r0, [r1, #8]
   8a230:	d84c      	bhi.n	8a2cc <_realloc_r+0x304>
   8a232:	2a13      	cmp	r2, #19
   8a234:	d948      	bls.n	8a2c8 <_realloc_r+0x300>
   8a236:	6821      	ldr	r1, [r4, #0]
   8a238:	2a1b      	cmp	r2, #27
   8a23a:	f8ca 1008 	str.w	r1, [sl, #8]
   8a23e:	6861      	ldr	r1, [r4, #4]
   8a240:	f8ca 100c 	str.w	r1, [sl, #12]
   8a244:	d856      	bhi.n	8a2f4 <_realloc_r+0x32c>
   8a246:	3408      	adds	r4, #8
   8a248:	f10a 0210 	add.w	r2, sl, #16
   8a24c:	461f      	mov	r7, r3
   8a24e:	6823      	ldr	r3, [r4, #0]
   8a250:	46d1      	mov	r9, sl
   8a252:	6013      	str	r3, [r2, #0]
   8a254:	6863      	ldr	r3, [r4, #4]
   8a256:	6053      	str	r3, [r2, #4]
   8a258:	68a3      	ldr	r3, [r4, #8]
   8a25a:	4634      	mov	r4, r6
   8a25c:	6093      	str	r3, [r2, #8]
   8a25e:	e730      	b.n	8a0c2 <_realloc_r+0xfa>
   8a260:	4621      	mov	r1, r4
   8a262:	f7ff fe35 	bl	89ed0 <memmove>
   8a266:	e711      	b.n	8a08c <_realloc_r+0xc4>
   8a268:	4656      	mov	r6, sl
   8a26a:	e9d0 1302 	ldrd	r1, r3, [r0, #8]
   8a26e:	60cb      	str	r3, [r1, #12]
   8a270:	6099      	str	r1, [r3, #8]
   8a272:	f856 1f08 	ldr.w	r1, [r6, #8]!
   8a276:	f8da 300c 	ldr.w	r3, [sl, #12]
   8a27a:	1f3a      	subs	r2, r7, #4
   8a27c:	2a24      	cmp	r2, #36	; 0x24
   8a27e:	60cb      	str	r3, [r1, #12]
   8a280:	6099      	str	r1, [r3, #8]
   8a282:	d82d      	bhi.n	8a2e0 <_realloc_r+0x318>
   8a284:	2a13      	cmp	r2, #19
   8a286:	d929      	bls.n	8a2dc <_realloc_r+0x314>
   8a288:	6823      	ldr	r3, [r4, #0]
   8a28a:	2a1b      	cmp	r2, #27
   8a28c:	f8ca 3008 	str.w	r3, [sl, #8]
   8a290:	6863      	ldr	r3, [r4, #4]
   8a292:	f8ca 300c 	str.w	r3, [sl, #12]
   8a296:	d842      	bhi.n	8a31e <_realloc_r+0x356>
   8a298:	3408      	adds	r4, #8
   8a29a:	f10a 0310 	add.w	r3, sl, #16
   8a29e:	6822      	ldr	r2, [r4, #0]
   8a2a0:	4667      	mov	r7, ip
   8a2a2:	601a      	str	r2, [r3, #0]
   8a2a4:	6862      	ldr	r2, [r4, #4]
   8a2a6:	46d1      	mov	r9, sl
   8a2a8:	605a      	str	r2, [r3, #4]
   8a2aa:	68a2      	ldr	r2, [r4, #8]
   8a2ac:	4634      	mov	r4, r6
   8a2ae:	609a      	str	r2, [r3, #8]
   8a2b0:	e707      	b.n	8a0c2 <_realloc_r+0xfa>
   8a2b2:	68a3      	ldr	r3, [r4, #8]
   8a2b4:	2a24      	cmp	r2, #36	; 0x24
   8a2b6:	6083      	str	r3, [r0, #8]
   8a2b8:	68e3      	ldr	r3, [r4, #12]
   8a2ba:	60c3      	str	r3, [r0, #12]
   8a2bc:	d026      	beq.n	8a30c <_realloc_r+0x344>
   8a2be:	f104 0210 	add.w	r2, r4, #16
   8a2c2:	f100 0310 	add.w	r3, r0, #16
   8a2c6:	e6db      	b.n	8a080 <_realloc_r+0xb8>
   8a2c8:	4632      	mov	r2, r6
   8a2ca:	e7bf      	b.n	8a24c <_realloc_r+0x284>
   8a2cc:	4621      	mov	r1, r4
   8a2ce:	4630      	mov	r0, r6
   8a2d0:	461f      	mov	r7, r3
   8a2d2:	46d1      	mov	r9, sl
   8a2d4:	f7ff fdfc 	bl	89ed0 <memmove>
   8a2d8:	4634      	mov	r4, r6
   8a2da:	e6f2      	b.n	8a0c2 <_realloc_r+0xfa>
   8a2dc:	4633      	mov	r3, r6
   8a2de:	e7de      	b.n	8a29e <_realloc_r+0x2d6>
   8a2e0:	4621      	mov	r1, r4
   8a2e2:	4630      	mov	r0, r6
   8a2e4:	4667      	mov	r7, ip
   8a2e6:	46d1      	mov	r9, sl
   8a2e8:	f7ff fdf2 	bl	89ed0 <memmove>
   8a2ec:	4634      	mov	r4, r6
   8a2ee:	e6e8      	b.n	8a0c2 <_realloc_r+0xfa>
   8a2f0:	20070f64 	.word	0x20070f64
   8a2f4:	68a1      	ldr	r1, [r4, #8]
   8a2f6:	2a24      	cmp	r2, #36	; 0x24
   8a2f8:	f8ca 1010 	str.w	r1, [sl, #16]
   8a2fc:	68e1      	ldr	r1, [r4, #12]
   8a2fe:	f8ca 1014 	str.w	r1, [sl, #20]
   8a302:	d020      	beq.n	8a346 <_realloc_r+0x37e>
   8a304:	3410      	adds	r4, #16
   8a306:	f10a 0218 	add.w	r2, sl, #24
   8a30a:	e79f      	b.n	8a24c <_realloc_r+0x284>
   8a30c:	6923      	ldr	r3, [r4, #16]
   8a30e:	f104 0218 	add.w	r2, r4, #24
   8a312:	6103      	str	r3, [r0, #16]
   8a314:	6963      	ldr	r3, [r4, #20]
   8a316:	6143      	str	r3, [r0, #20]
   8a318:	f100 0318 	add.w	r3, r0, #24
   8a31c:	e6b0      	b.n	8a080 <_realloc_r+0xb8>
   8a31e:	68a3      	ldr	r3, [r4, #8]
   8a320:	2a24      	cmp	r2, #36	; 0x24
   8a322:	f8ca 3010 	str.w	r3, [sl, #16]
   8a326:	68e3      	ldr	r3, [r4, #12]
   8a328:	f8ca 3014 	str.w	r3, [sl, #20]
   8a32c:	d022      	beq.n	8a374 <_realloc_r+0x3ac>
   8a32e:	3410      	adds	r4, #16
   8a330:	f10a 0318 	add.w	r3, sl, #24
   8a334:	e7b3      	b.n	8a29e <_realloc_r+0x2d6>
   8a336:	4632      	mov	r2, r6
   8a338:	e733      	b.n	8a1a2 <_realloc_r+0x1da>
   8a33a:	4621      	mov	r1, r4
   8a33c:	4630      	mov	r0, r6
   8a33e:	f7ff fdc7 	bl	89ed0 <memmove>
   8a342:	4b17      	ldr	r3, [pc, #92]	; (8a3a0 <_realloc_r+0x3d8>)
   8a344:	e733      	b.n	8a1ae <_realloc_r+0x1e6>
   8a346:	6922      	ldr	r2, [r4, #16]
   8a348:	3418      	adds	r4, #24
   8a34a:	f8ca 2018 	str.w	r2, [sl, #24]
   8a34e:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8a352:	f8ca 201c 	str.w	r2, [sl, #28]
   8a356:	f10a 0220 	add.w	r2, sl, #32
   8a35a:	e777      	b.n	8a24c <_realloc_r+0x284>
   8a35c:	68a1      	ldr	r1, [r4, #8]
   8a35e:	2a24      	cmp	r2, #36	; 0x24
   8a360:	f8ca 1010 	str.w	r1, [sl, #16]
   8a364:	68e1      	ldr	r1, [r4, #12]
   8a366:	f8ca 1014 	str.w	r1, [sl, #20]
   8a36a:	d00e      	beq.n	8a38a <_realloc_r+0x3c2>
   8a36c:	3410      	adds	r4, #16
   8a36e:	f10a 0218 	add.w	r2, sl, #24
   8a372:	e716      	b.n	8a1a2 <_realloc_r+0x1da>
   8a374:	6923      	ldr	r3, [r4, #16]
   8a376:	3418      	adds	r4, #24
   8a378:	f8ca 3018 	str.w	r3, [sl, #24]
   8a37c:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8a380:	f8ca 301c 	str.w	r3, [sl, #28]
   8a384:	f10a 0320 	add.w	r3, sl, #32
   8a388:	e789      	b.n	8a29e <_realloc_r+0x2d6>
   8a38a:	6922      	ldr	r2, [r4, #16]
   8a38c:	3418      	adds	r4, #24
   8a38e:	f8ca 2018 	str.w	r2, [sl, #24]
   8a392:	f854 2c04 	ldr.w	r2, [r4, #-4]
   8a396:	f8ca 201c 	str.w	r2, [sl, #28]
   8a39a:	f10a 0220 	add.w	r2, sl, #32
   8a39e:	e700      	b.n	8a1a2 <_realloc_r+0x1da>
   8a3a0:	20070f64 	.word	0x20070f64

0008a3a4 <__sprint_r.part.0>:
   8a3a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a3a8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8a3aa:	4690      	mov	r8, r2
   8a3ac:	049c      	lsls	r4, r3, #18
   8a3ae:	d52d      	bpl.n	8a40c <__sprint_r.part.0+0x68>
   8a3b0:	6893      	ldr	r3, [r2, #8]
   8a3b2:	6812      	ldr	r2, [r2, #0]
   8a3b4:	b343      	cbz	r3, 8a408 <__sprint_r.part.0+0x64>
   8a3b6:	468b      	mov	fp, r1
   8a3b8:	4606      	mov	r6, r0
   8a3ba:	f102 0908 	add.w	r9, r2, #8
   8a3be:	e959 5a02 	ldrd	r5, sl, [r9, #-8]
   8a3c2:	ea5f 079a 	movs.w	r7, sl, lsr #2
   8a3c6:	d015      	beq.n	8a3f4 <__sprint_r.part.0+0x50>
   8a3c8:	2400      	movs	r4, #0
   8a3ca:	3d04      	subs	r5, #4
   8a3cc:	e001      	b.n	8a3d2 <__sprint_r.part.0+0x2e>
   8a3ce:	42a7      	cmp	r7, r4
   8a3d0:	d00e      	beq.n	8a3f0 <__sprint_r.part.0+0x4c>
   8a3d2:	465a      	mov	r2, fp
   8a3d4:	4630      	mov	r0, r6
   8a3d6:	f855 1f04 	ldr.w	r1, [r5, #4]!
   8a3da:	f001 f955 	bl	8b688 <_fputwc_r>
   8a3de:	1c43      	adds	r3, r0, #1
   8a3e0:	f104 0401 	add.w	r4, r4, #1
   8a3e4:	d1f3      	bne.n	8a3ce <__sprint_r.part.0+0x2a>
   8a3e6:	2300      	movs	r3, #0
   8a3e8:	e9c8 3301 	strd	r3, r3, [r8, #4]
   8a3ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a3f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   8a3f4:	f02a 0a03 	bic.w	sl, sl, #3
   8a3f8:	eba3 030a 	sub.w	r3, r3, sl
   8a3fc:	f8c8 3008 	str.w	r3, [r8, #8]
   8a400:	f109 0908 	add.w	r9, r9, #8
   8a404:	2b00      	cmp	r3, #0
   8a406:	d1da      	bne.n	8a3be <__sprint_r.part.0+0x1a>
   8a408:	2000      	movs	r0, #0
   8a40a:	e7ec      	b.n	8a3e6 <__sprint_r.part.0+0x42>
   8a40c:	f001 f970 	bl	8b6f0 <__sfvwrite_r>
   8a410:	2300      	movs	r3, #0
   8a412:	e9c8 3301 	strd	r3, r3, [r8, #4]
   8a416:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a41a:	bf00      	nop

0008a41c <_vfiprintf_r>:
   8a41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a420:	b0bd      	sub	sp, #244	; 0xf4
   8a422:	461c      	mov	r4, r3
   8a424:	4617      	mov	r7, r2
   8a426:	e9cd 3005 	strd	r3, r0, [sp, #20]
   8a42a:	9102      	str	r1, [sp, #8]
   8a42c:	b118      	cbz	r0, 8a436 <_vfiprintf_r+0x1a>
   8a42e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8a430:	2b00      	cmp	r3, #0
   8a432:	f000 8277 	beq.w	8a924 <_vfiprintf_r+0x508>
   8a436:	9a02      	ldr	r2, [sp, #8]
   8a438:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8a43a:	07de      	lsls	r6, r3, #31
   8a43c:	f140 8184 	bpl.w	8a748 <_vfiprintf_r+0x32c>
   8a440:	f9b2 100c 	ldrsh.w	r1, [r2, #12]
   8a444:	b28a      	uxth	r2, r1
   8a446:	0490      	lsls	r0, r2, #18
   8a448:	d408      	bmi.n	8a45c <_vfiprintf_r+0x40>
   8a44a:	f441 5200 	orr.w	r2, r1, #8192	; 0x2000
   8a44e:	9902      	ldr	r1, [sp, #8]
   8a450:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8a452:	818a      	strh	r2, [r1, #12]
   8a454:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   8a458:	b292      	uxth	r2, r2
   8a45a:	664b      	str	r3, [r1, #100]	; 0x64
   8a45c:	0711      	lsls	r1, r2, #28
   8a45e:	f140 80ec 	bpl.w	8a63a <_vfiprintf_r+0x21e>
   8a462:	9b02      	ldr	r3, [sp, #8]
   8a464:	691b      	ldr	r3, [r3, #16]
   8a466:	2b00      	cmp	r3, #0
   8a468:	f000 80e7 	beq.w	8a63a <_vfiprintf_r+0x21e>
   8a46c:	f002 031a 	and.w	r3, r2, #26
   8a470:	2b0a      	cmp	r3, #10
   8a472:	f000 80f0 	beq.w	8a656 <_vfiprintf_r+0x23a>
   8a476:	ab13      	add	r3, sp, #76	; 0x4c
   8a478:	9310      	str	r3, [sp, #64]	; 0x40
   8a47a:	2300      	movs	r3, #0
   8a47c:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
   8a480:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
   8a484:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
   8a488:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8a48c:	9304      	str	r3, [sp, #16]
   8a48e:	783b      	ldrb	r3, [r7, #0]
   8a490:	2b00      	cmp	r3, #0
   8a492:	f000 8146 	beq.w	8a722 <_vfiprintf_r+0x306>
   8a496:	463c      	mov	r4, r7
   8a498:	e004      	b.n	8a4a4 <_vfiprintf_r+0x88>
   8a49a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   8a49e:	2b00      	cmp	r3, #0
   8a4a0:	f000 8121 	beq.w	8a6e6 <_vfiprintf_r+0x2ca>
   8a4a4:	2b25      	cmp	r3, #37	; 0x25
   8a4a6:	d1f8      	bne.n	8a49a <_vfiprintf_r+0x7e>
   8a4a8:	1be5      	subs	r5, r4, r7
   8a4aa:	f040 811e 	bne.w	8a6ea <_vfiprintf_r+0x2ce>
   8a4ae:	7823      	ldrb	r3, [r4, #0]
   8a4b0:	2b00      	cmp	r3, #0
   8a4b2:	f000 8136 	beq.w	8a722 <_vfiprintf_r+0x306>
   8a4b6:	f04f 0300 	mov.w	r3, #0
   8a4ba:	2500      	movs	r5, #0
   8a4bc:	f04f 3bff 	mov.w	fp, #4294967295
   8a4c0:	f04f 082b 	mov.w	r8, #43	; 0x2b
   8a4c4:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8a4c8:	7863      	ldrb	r3, [r4, #1]
   8a4ca:	9503      	str	r5, [sp, #12]
   8a4cc:	1c67      	adds	r7, r4, #1
   8a4ce:	3701      	adds	r7, #1
   8a4d0:	f1a3 0220 	sub.w	r2, r3, #32
   8a4d4:	2a5a      	cmp	r2, #90	; 0x5a
   8a4d6:	f200 8146 	bhi.w	8a766 <_vfiprintf_r+0x34a>
   8a4da:	e8df f012 	tbh	[pc, r2, lsl #1]
   8a4de:	02a1      	.short	0x02a1
   8a4e0:	01440144 	.word	0x01440144
   8a4e4:	0144029d 	.word	0x0144029d
   8a4e8:	01440144 	.word	0x01440144
   8a4ec:	0144027c 	.word	0x0144027c
   8a4f0:	006a0144 	.word	0x006a0144
   8a4f4:	01440253 	.word	0x01440253
   8a4f8:	02af0229 	.word	0x02af0229
   8a4fc:	02ab0144 	.word	0x02ab0144
   8a500:	005b005b 	.word	0x005b005b
   8a504:	005b005b 	.word	0x005b005b
   8a508:	005b005b 	.word	0x005b005b
   8a50c:	005b005b 	.word	0x005b005b
   8a510:	0144005b 	.word	0x0144005b
   8a514:	01440144 	.word	0x01440144
   8a518:	01440144 	.word	0x01440144
   8a51c:	01440144 	.word	0x01440144
   8a520:	01440144 	.word	0x01440144
   8a524:	00780213 	.word	0x00780213
   8a528:	01440144 	.word	0x01440144
   8a52c:	01440144 	.word	0x01440144
   8a530:	01440144 	.word	0x01440144
   8a534:	01440144 	.word	0x01440144
   8a538:	01440144 	.word	0x01440144
   8a53c:	014400d1 	.word	0x014400d1
   8a540:	01440144 	.word	0x01440144
   8a544:	014401f7 	.word	0x014401f7
   8a548:	01440241 	.word	0x01440241
   8a54c:	05210144 	.word	0x05210144
   8a550:	01440144 	.word	0x01440144
   8a554:	01440144 	.word	0x01440144
   8a558:	01440144 	.word	0x01440144
   8a55c:	01440144 	.word	0x01440144
   8a560:	01440144 	.word	0x01440144
   8a564:	007a0213 	.word	0x007a0213
   8a568:	01440144 	.word	0x01440144
   8a56c:	02370144 	.word	0x02370144
   8a570:	0074007a 	.word	0x0074007a
   8a574:	022d0144 	.word	0x022d0144
   8a578:	02690144 	.word	0x02690144
   8a57c:	025700d3 	.word	0x025700d3
   8a580:	01440074 	.word	0x01440074
   8a584:	007201f7 	.word	0x007201f7
   8a588:	01440541 	.word	0x01440541
   8a58c:	05430144 	.word	0x05430144
   8a590:	00720144 	.word	0x00720144
   8a594:	2100      	movs	r1, #0
   8a596:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8a59a:	f817 3b01 	ldrb.w	r3, [r7], #1
   8a59e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   8a5a2:	eb02 0141 	add.w	r1, r2, r1, lsl #1
   8a5a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8a5aa:	2a09      	cmp	r2, #9
   8a5ac:	d9f5      	bls.n	8a59a <_vfiprintf_r+0x17e>
   8a5ae:	9103      	str	r1, [sp, #12]
   8a5b0:	e78e      	b.n	8a4d0 <_vfiprintf_r+0xb4>
   8a5b2:	9b05      	ldr	r3, [sp, #20]
   8a5b4:	f853 2b04 	ldr.w	r2, [r3], #4
   8a5b8:	2a00      	cmp	r2, #0
   8a5ba:	9203      	str	r2, [sp, #12]
   8a5bc:	9305      	str	r3, [sp, #20]
   8a5be:	f2c0 81b4 	blt.w	8a92a <_vfiprintf_r+0x50e>
   8a5c2:	783b      	ldrb	r3, [r7, #0]
   8a5c4:	e783      	b.n	8a4ce <_vfiprintf_r+0xb2>
   8a5c6:	783b      	ldrb	r3, [r7, #0]
   8a5c8:	f045 0520 	orr.w	r5, r5, #32
   8a5cc:	e77f      	b.n	8a4ce <_vfiprintf_r+0xb2>
   8a5ce:	f045 0510 	orr.w	r5, r5, #16
   8a5d2:	06ac      	lsls	r4, r5, #26
   8a5d4:	9e05      	ldr	r6, [sp, #20]
   8a5d6:	f140 816b 	bpl.w	8a8b0 <_vfiprintf_r+0x494>
   8a5da:	3607      	adds	r6, #7
   8a5dc:	f026 0607 	bic.w	r6, r6, #7
   8a5e0:	4632      	mov	r2, r6
   8a5e2:	6873      	ldr	r3, [r6, #4]
   8a5e4:	f852 6b08 	ldr.w	r6, [r2], #8
   8a5e8:	4698      	mov	r8, r3
   8a5ea:	9205      	str	r2, [sp, #20]
   8a5ec:	2b00      	cmp	r3, #0
   8a5ee:	f2c0 8449 	blt.w	8ae84 <_vfiprintf_r+0xa68>
   8a5f2:	f1bb 3fff 	cmp.w	fp, #4294967295
   8a5f6:	f000 8531 	beq.w	8b05c <_vfiprintf_r+0xc40>
   8a5fa:	ea56 0308 	orrs.w	r3, r6, r8
   8a5fe:	f025 0a80 	bic.w	sl, r5, #128	; 0x80
   8a602:	f000 8425 	beq.w	8ae50 <_vfiprintf_r+0xa34>
   8a606:	2e0a      	cmp	r6, #10
   8a608:	f178 0300 	sbcs.w	r3, r8, #0
   8a60c:	f080 84e1 	bcs.w	8afd2 <_vfiprintf_r+0xbb6>
   8a610:	2301      	movs	r3, #1
   8a612:	4655      	mov	r5, sl
   8a614:	3630      	adds	r6, #48	; 0x30
   8a616:	f88d 60ef 	strb.w	r6, [sp, #239]	; 0xef
   8a61a:	9301      	str	r3, [sp, #4]
   8a61c:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   8a620:	f8dd 8004 	ldr.w	r8, [sp, #4]
   8a624:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   8a628:	45d8      	cmp	r8, fp
   8a62a:	bfb8      	it	lt
   8a62c:	46d8      	movlt	r8, fp
   8a62e:	2b00      	cmp	r3, #0
   8a630:	f000 80a8 	beq.w	8a784 <_vfiprintf_r+0x368>
   8a634:	f108 0801 	add.w	r8, r8, #1
   8a638:	e0a4      	b.n	8a784 <_vfiprintf_r+0x368>
   8a63a:	9d02      	ldr	r5, [sp, #8]
   8a63c:	9806      	ldr	r0, [sp, #24]
   8a63e:	4629      	mov	r1, r5
   8a640:	f000 fe08 	bl	8b254 <__swsetup_r>
   8a644:	2800      	cmp	r0, #0
   8a646:	f040 8594 	bne.w	8b172 <_vfiprintf_r+0xd56>
   8a64a:	89aa      	ldrh	r2, [r5, #12]
   8a64c:	f002 031a 	and.w	r3, r2, #26
   8a650:	2b0a      	cmp	r3, #10
   8a652:	f47f af10 	bne.w	8a476 <_vfiprintf_r+0x5a>
   8a656:	9902      	ldr	r1, [sp, #8]
   8a658:	f9b1 300e 	ldrsh.w	r3, [r1, #14]
   8a65c:	2b00      	cmp	r3, #0
   8a65e:	f6ff af0a 	blt.w	8a476 <_vfiprintf_r+0x5a>
   8a662:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8a664:	07de      	lsls	r6, r3, #31
   8a666:	d402      	bmi.n	8a66e <_vfiprintf_r+0x252>
   8a668:	0595      	lsls	r5, r2, #22
   8a66a:	f140 8562 	bpl.w	8b132 <_vfiprintf_r+0xd16>
   8a66e:	4623      	mov	r3, r4
   8a670:	463a      	mov	r2, r7
   8a672:	9902      	ldr	r1, [sp, #8]
   8a674:	9806      	ldr	r0, [sp, #24]
   8a676:	b03d      	add	sp, #244	; 0xf4
   8a678:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8a67c:	f000 bd9a 	b.w	8b1b4 <__sbprintf>
   8a680:	f045 0510 	orr.w	r5, r5, #16
   8a684:	f015 0820 	ands.w	r8, r5, #32
   8a688:	f000 8103 	beq.w	8a892 <_vfiprintf_r+0x476>
   8a68c:	9e05      	ldr	r6, [sp, #20]
   8a68e:	3607      	adds	r6, #7
   8a690:	f026 0607 	bic.w	r6, r6, #7
   8a694:	4633      	mov	r3, r6
   8a696:	f8d6 8004 	ldr.w	r8, [r6, #4]
   8a69a:	f853 6b08 	ldr.w	r6, [r3], #8
   8a69e:	9305      	str	r3, [sp, #20]
   8a6a0:	2300      	movs	r3, #0
   8a6a2:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   8a6a6:	f04f 0200 	mov.w	r2, #0
   8a6aa:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
   8a6ae:	f1bb 3fff 	cmp.w	fp, #4294967295
   8a6b2:	f000 81dd 	beq.w	8aa70 <_vfiprintf_r+0x654>
   8a6b6:	ea56 0208 	orrs.w	r2, r6, r8
   8a6ba:	f02a 0580 	bic.w	r5, sl, #128	; 0x80
   8a6be:	f040 81d6 	bne.w	8aa6e <_vfiprintf_r+0x652>
   8a6c2:	f1bb 0f00 	cmp.w	fp, #0
   8a6c6:	f040 84cc 	bne.w	8b062 <_vfiprintf_r+0xc46>
   8a6ca:	2b00      	cmp	r3, #0
   8a6cc:	f040 83c5 	bne.w	8ae5a <_vfiprintf_r+0xa3e>
   8a6d0:	f01a 0301 	ands.w	r3, sl, #1
   8a6d4:	9301      	str	r3, [sp, #4]
   8a6d6:	f000 83ec 	beq.w	8aeb2 <_vfiprintf_r+0xa96>
   8a6da:	2330      	movs	r3, #48	; 0x30
   8a6dc:	f10d 04ef 	add.w	r4, sp, #239	; 0xef
   8a6e0:	f88d 30ef 	strb.w	r3, [sp, #239]	; 0xef
   8a6e4:	e79c      	b.n	8a620 <_vfiprintf_r+0x204>
   8a6e6:	1be5      	subs	r5, r4, r7
   8a6e8:	d01b      	beq.n	8a722 <_vfiprintf_r+0x306>
   8a6ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
   8a6ec:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8a6ee:	3301      	adds	r3, #1
   8a6f0:	442a      	add	r2, r5
   8a6f2:	2b07      	cmp	r3, #7
   8a6f4:	e9c9 7500 	strd	r7, r5, [r9]
   8a6f8:	9212      	str	r2, [sp, #72]	; 0x48
   8a6fa:	9311      	str	r3, [sp, #68]	; 0x44
   8a6fc:	dc05      	bgt.n	8a70a <_vfiprintf_r+0x2ee>
   8a6fe:	f109 0908 	add.w	r9, r9, #8
   8a702:	9b04      	ldr	r3, [sp, #16]
   8a704:	442b      	add	r3, r5
   8a706:	9304      	str	r3, [sp, #16]
   8a708:	e6d1      	b.n	8a4ae <_vfiprintf_r+0x92>
   8a70a:	2a00      	cmp	r2, #0
   8a70c:	f000 839c 	beq.w	8ae48 <_vfiprintf_r+0xa2c>
   8a710:	9902      	ldr	r1, [sp, #8]
   8a712:	9806      	ldr	r0, [sp, #24]
   8a714:	aa10      	add	r2, sp, #64	; 0x40
   8a716:	f7ff fe45 	bl	8a3a4 <__sprint_r.part.0>
   8a71a:	b940      	cbnz	r0, 8a72e <_vfiprintf_r+0x312>
   8a71c:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8a720:	e7ef      	b.n	8a702 <_vfiprintf_r+0x2e6>
   8a722:	9b12      	ldr	r3, [sp, #72]	; 0x48
   8a724:	2b00      	cmp	r3, #0
   8a726:	f040 8515 	bne.w	8b154 <_vfiprintf_r+0xd38>
   8a72a:	2300      	movs	r3, #0
   8a72c:	9311      	str	r3, [sp, #68]	; 0x44
   8a72e:	9a02      	ldr	r2, [sp, #8]
   8a730:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8a732:	07d9      	lsls	r1, r3, #31
   8a734:	f140 80a2 	bpl.w	8a87c <_vfiprintf_r+0x460>
   8a738:	8993      	ldrh	r3, [r2, #12]
   8a73a:	065b      	lsls	r3, r3, #25
   8a73c:	f100 8525 	bmi.w	8b18a <_vfiprintf_r+0xd6e>
   8a740:	9804      	ldr	r0, [sp, #16]
   8a742:	b03d      	add	sp, #244	; 0xf4
   8a744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8a748:	9b02      	ldr	r3, [sp, #8]
   8a74a:	f9b3 100c 	ldrsh.w	r1, [r3, #12]
   8a74e:	058d      	lsls	r5, r1, #22
   8a750:	b28a      	uxth	r2, r1
   8a752:	f53f ae78 	bmi.w	8a446 <_vfiprintf_r+0x2a>
   8a756:	461d      	mov	r5, r3
   8a758:	6d98      	ldr	r0, [r3, #88]	; 0x58
   8a75a:	f7fe fb71 	bl	88e40 <__retarget_lock_acquire_recursive>
   8a75e:	f9b5 100c 	ldrsh.w	r1, [r5, #12]
   8a762:	b28a      	uxth	r2, r1
   8a764:	e66f      	b.n	8a446 <_vfiprintf_r+0x2a>
   8a766:	2b00      	cmp	r3, #0
   8a768:	d0db      	beq.n	8a722 <_vfiprintf_r+0x306>
   8a76a:	f04f 0801 	mov.w	r8, #1
   8a76e:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   8a772:	f04f 0300 	mov.w	r3, #0
   8a776:	ac23      	add	r4, sp, #140	; 0x8c
   8a778:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8a77c:	f8cd 8004 	str.w	r8, [sp, #4]
   8a780:	f04f 0b00 	mov.w	fp, #0
   8a784:	f015 0302 	ands.w	r3, r5, #2
   8a788:	9307      	str	r3, [sp, #28]
   8a78a:	bf18      	it	ne
   8a78c:	f108 0802 	addne.w	r8, r8, #2
   8a790:	f015 0384 	ands.w	r3, r5, #132	; 0x84
   8a794:	9308      	str	r3, [sp, #32]
   8a796:	d105      	bne.n	8a7a4 <_vfiprintf_r+0x388>
   8a798:	9b03      	ldr	r3, [sp, #12]
   8a79a:	eba3 0608 	sub.w	r6, r3, r8
   8a79e:	2e00      	cmp	r6, #0
   8a7a0:	f300 828a 	bgt.w	8acb8 <_vfiprintf_r+0x89c>
   8a7a4:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8a7a8:	1c48      	adds	r0, r1, #1
   8a7aa:	f89d 603b 	ldrb.w	r6, [sp, #59]	; 0x3b
   8a7ae:	b176      	cbz	r6, 8a7ce <_vfiprintf_r+0x3b2>
   8a7b0:	2101      	movs	r1, #1
   8a7b2:	3201      	adds	r2, #1
   8a7b4:	f10d 063b 	add.w	r6, sp, #59	; 0x3b
   8a7b8:	2807      	cmp	r0, #7
   8a7ba:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8a7be:	e9c9 6100 	strd	r6, r1, [r9]
   8a7c2:	f300 8258 	bgt.w	8ac76 <_vfiprintf_r+0x85a>
   8a7c6:	4601      	mov	r1, r0
   8a7c8:	f109 0908 	add.w	r9, r9, #8
   8a7cc:	3001      	adds	r0, #1
   8a7ce:	9b07      	ldr	r3, [sp, #28]
   8a7d0:	b1d3      	cbz	r3, 8a808 <_vfiprintf_r+0x3ec>
   8a7d2:	2302      	movs	r3, #2
   8a7d4:	3202      	adds	r2, #2
   8a7d6:	f8c9 3004 	str.w	r3, [r9, #4]
   8a7da:	2807      	cmp	r0, #7
   8a7dc:	ab0f      	add	r3, sp, #60	; 0x3c
   8a7de:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8a7e2:	f8c9 3000 	str.w	r3, [r9]
   8a7e6:	f340 8262 	ble.w	8acae <_vfiprintf_r+0x892>
   8a7ea:	2a00      	cmp	r2, #0
   8a7ec:	f000 8327 	beq.w	8ae3e <_vfiprintf_r+0xa22>
   8a7f0:	9902      	ldr	r1, [sp, #8]
   8a7f2:	9806      	ldr	r0, [sp, #24]
   8a7f4:	aa10      	add	r2, sp, #64	; 0x40
   8a7f6:	f7ff fdd5 	bl	8a3a4 <__sprint_r.part.0>
   8a7fa:	2800      	cmp	r0, #0
   8a7fc:	d197      	bne.n	8a72e <_vfiprintf_r+0x312>
   8a7fe:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8a802:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8a806:	1c48      	adds	r0, r1, #1
   8a808:	9b08      	ldr	r3, [sp, #32]
   8a80a:	2b80      	cmp	r3, #128	; 0x80
   8a80c:	f000 8171 	beq.w	8aaf2 <_vfiprintf_r+0x6d6>
   8a810:	9b01      	ldr	r3, [sp, #4]
   8a812:	ebab 0603 	sub.w	r6, fp, r3
   8a816:	2e00      	cmp	r6, #0
   8a818:	f300 81cf 	bgt.w	8abba <_vfiprintf_r+0x79e>
   8a81c:	9b01      	ldr	r3, [sp, #4]
   8a81e:	2807      	cmp	r0, #7
   8a820:	441a      	add	r2, r3
   8a822:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8a826:	f8c9 4000 	str.w	r4, [r9]
   8a82a:	f8c9 3004 	str.w	r3, [r9, #4]
   8a82e:	f340 815d 	ble.w	8aaec <_vfiprintf_r+0x6d0>
   8a832:	2a00      	cmp	r2, #0
   8a834:	f000 8293 	beq.w	8ad5e <_vfiprintf_r+0x942>
   8a838:	9902      	ldr	r1, [sp, #8]
   8a83a:	9806      	ldr	r0, [sp, #24]
   8a83c:	aa10      	add	r2, sp, #64	; 0x40
   8a83e:	f7ff fdb1 	bl	8a3a4 <__sprint_r.part.0>
   8a842:	2800      	cmp	r0, #0
   8a844:	f47f af73 	bne.w	8a72e <_vfiprintf_r+0x312>
   8a848:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8a84a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8a84e:	0768      	lsls	r0, r5, #29
   8a850:	d505      	bpl.n	8a85e <_vfiprintf_r+0x442>
   8a852:	9b03      	ldr	r3, [sp, #12]
   8a854:	eba3 0408 	sub.w	r4, r3, r8
   8a858:	2c00      	cmp	r4, #0
   8a85a:	f300 828a 	bgt.w	8ad72 <_vfiprintf_r+0x956>
   8a85e:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   8a862:	4541      	cmp	r1, r8
   8a864:	bfac      	ite	ge
   8a866:	185b      	addge	r3, r3, r1
   8a868:	4443      	addlt	r3, r8
   8a86a:	9304      	str	r3, [sp, #16]
   8a86c:	2a00      	cmp	r2, #0
   8a86e:	f040 81f3 	bne.w	8ac58 <_vfiprintf_r+0x83c>
   8a872:	2300      	movs	r3, #0
   8a874:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8a878:	9311      	str	r3, [sp, #68]	; 0x44
   8a87a:	e608      	b.n	8a48e <_vfiprintf_r+0x72>
   8a87c:	9b02      	ldr	r3, [sp, #8]
   8a87e:	899b      	ldrh	r3, [r3, #12]
   8a880:	059a      	lsls	r2, r3, #22
   8a882:	f53f af5a 	bmi.w	8a73a <_vfiprintf_r+0x31e>
   8a886:	9c02      	ldr	r4, [sp, #8]
   8a888:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8a88a:	f7fe fadb 	bl	88e44 <__retarget_lock_release_recursive>
   8a88e:	89a3      	ldrh	r3, [r4, #12]
   8a890:	e753      	b.n	8a73a <_vfiprintf_r+0x31e>
   8a892:	f015 0310 	ands.w	r3, r5, #16
   8a896:	f040 8318 	bne.w	8aeca <_vfiprintf_r+0xaae>
   8a89a:	f015 0240 	ands.w	r2, r5, #64	; 0x40
   8a89e:	f000 8310 	beq.w	8aec2 <_vfiprintf_r+0xaa6>
   8a8a2:	9e05      	ldr	r6, [sp, #20]
   8a8a4:	4698      	mov	r8, r3
   8a8a6:	f856 3b04 	ldr.w	r3, [r6], #4
   8a8aa:	9605      	str	r6, [sp, #20]
   8a8ac:	b29e      	uxth	r6, r3
   8a8ae:	e6f7      	b.n	8a6a0 <_vfiprintf_r+0x284>
   8a8b0:	f856 3b04 	ldr.w	r3, [r6], #4
   8a8b4:	06e8      	lsls	r0, r5, #27
   8a8b6:	9605      	str	r6, [sp, #20]
   8a8b8:	f100 8310 	bmi.w	8aedc <_vfiprintf_r+0xac0>
   8a8bc:	0669      	lsls	r1, r5, #25
   8a8be:	f140 830a 	bpl.w	8aed6 <_vfiprintf_r+0xaba>
   8a8c2:	f343 38c0 	sbfx	r8, r3, #15, #1
   8a8c6:	b21e      	sxth	r6, r3
   8a8c8:	4643      	mov	r3, r8
   8a8ca:	e68f      	b.n	8a5ec <_vfiprintf_r+0x1d0>
   8a8cc:	f04f 0300 	mov.w	r3, #0
   8a8d0:	9e05      	ldr	r6, [sp, #20]
   8a8d2:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8a8d6:	f856 4b04 	ldr.w	r4, [r6], #4
   8a8da:	2c00      	cmp	r4, #0
   8a8dc:	f000 83cf 	beq.w	8b07e <_vfiprintf_r+0xc62>
   8a8e0:	f1bb 3fff 	cmp.w	fp, #4294967295
   8a8e4:	f000 8341 	beq.w	8af6a <_vfiprintf_r+0xb4e>
   8a8e8:	465a      	mov	r2, fp
   8a8ea:	2100      	movs	r1, #0
   8a8ec:	4620      	mov	r0, r4
   8a8ee:	f7fe fd57 	bl	893a0 <memchr>
   8a8f2:	2800      	cmp	r0, #0
   8a8f4:	f000 8422 	beq.w	8b13c <_vfiprintf_r+0xd20>
   8a8f8:	1b03      	subs	r3, r0, r4
   8a8fa:	f04f 0b00 	mov.w	fp, #0
   8a8fe:	9605      	str	r6, [sp, #20]
   8a900:	9301      	str	r3, [sp, #4]
   8a902:	e68d      	b.n	8a620 <_vfiprintf_r+0x204>
   8a904:	f04f 0300 	mov.w	r3, #0
   8a908:	f04f 0801 	mov.w	r8, #1
   8a90c:	9e05      	ldr	r6, [sp, #20]
   8a90e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8a912:	f856 3b04 	ldr.w	r3, [r6], #4
   8a916:	ac23      	add	r4, sp, #140	; 0x8c
   8a918:	f88d 308c 	strb.w	r3, [sp, #140]	; 0x8c
   8a91c:	9605      	str	r6, [sp, #20]
   8a91e:	f8cd 8004 	str.w	r8, [sp, #4]
   8a922:	e72d      	b.n	8a780 <_vfiprintf_r+0x364>
   8a924:	f000 fdce 	bl	8b4c4 <__sinit>
   8a928:	e585      	b.n	8a436 <_vfiprintf_r+0x1a>
   8a92a:	9b03      	ldr	r3, [sp, #12]
   8a92c:	425b      	negs	r3, r3
   8a92e:	9303      	str	r3, [sp, #12]
   8a930:	783b      	ldrb	r3, [r7, #0]
   8a932:	f045 0504 	orr.w	r5, r5, #4
   8a936:	e5ca      	b.n	8a4ce <_vfiprintf_r+0xb2>
   8a938:	783b      	ldrb	r3, [r7, #0]
   8a93a:	2b6c      	cmp	r3, #108	; 0x6c
   8a93c:	bf03      	ittte	eq
   8a93e:	787b      	ldrbeq	r3, [r7, #1]
   8a940:	f045 0520 	orreq.w	r5, r5, #32
   8a944:	3701      	addeq	r7, #1
   8a946:	f045 0510 	orrne.w	r5, r5, #16
   8a94a:	e5c0      	b.n	8a4ce <_vfiprintf_r+0xb2>
   8a94c:	783b      	ldrb	r3, [r7, #0]
   8a94e:	2b68      	cmp	r3, #104	; 0x68
   8a950:	bf03      	ittte	eq
   8a952:	787b      	ldrbeq	r3, [r7, #1]
   8a954:	f445 7500 	orreq.w	r5, r5, #512	; 0x200
   8a958:	3701      	addeq	r7, #1
   8a95a:	f045 0540 	orrne.w	r5, r5, #64	; 0x40
   8a95e:	e5b6      	b.n	8a4ce <_vfiprintf_r+0xb2>
   8a960:	f045 0a10 	orr.w	sl, r5, #16
   8a964:	f01a 0820 	ands.w	r8, sl, #32
   8a968:	f000 827e 	beq.w	8ae68 <_vfiprintf_r+0xa4c>
   8a96c:	9e05      	ldr	r6, [sp, #20]
   8a96e:	2301      	movs	r3, #1
   8a970:	3607      	adds	r6, #7
   8a972:	f026 0607 	bic.w	r6, r6, #7
   8a976:	4632      	mov	r2, r6
   8a978:	f8d6 8004 	ldr.w	r8, [r6, #4]
   8a97c:	f852 6b08 	ldr.w	r6, [r2], #8
   8a980:	9205      	str	r2, [sp, #20]
   8a982:	e690      	b.n	8a6a6 <_vfiprintf_r+0x28a>
   8a984:	783b      	ldrb	r3, [r7, #0]
   8a986:	f88d 803b 	strb.w	r8, [sp, #59]	; 0x3b
   8a98a:	e5a0      	b.n	8a4ce <_vfiprintf_r+0xb2>
   8a98c:	2230      	movs	r2, #48	; 0x30
   8a98e:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
   8a992:	2278      	movs	r2, #120	; 0x78
   8a994:	9b05      	ldr	r3, [sp, #20]
   8a996:	f88d 203d 	strb.w	r2, [sp, #61]	; 0x3d
   8a99a:	f853 6b04 	ldr.w	r6, [r3], #4
   8a99e:	4abe      	ldr	r2, [pc, #760]	; (8ac98 <_vfiprintf_r+0x87c>)
   8a9a0:	9305      	str	r3, [sp, #20]
   8a9a2:	f04f 0800 	mov.w	r8, #0
   8a9a6:	2302      	movs	r3, #2
   8a9a8:	f045 0a02 	orr.w	sl, r5, #2
   8a9ac:	9209      	str	r2, [sp, #36]	; 0x24
   8a9ae:	e67a      	b.n	8a6a6 <_vfiprintf_r+0x28a>
   8a9b0:	06ae      	lsls	r6, r5, #26
   8a9b2:	f100 82a4 	bmi.w	8aefe <_vfiprintf_r+0xae2>
   8a9b6:	06ec      	lsls	r4, r5, #27
   8a9b8:	f100 8359 	bmi.w	8b06e <_vfiprintf_r+0xc52>
   8a9bc:	0668      	lsls	r0, r5, #25
   8a9be:	f100 83b0 	bmi.w	8b122 <_vfiprintf_r+0xd06>
   8a9c2:	05a9      	lsls	r1, r5, #22
   8a9c4:	f140 8353 	bpl.w	8b06e <_vfiprintf_r+0xc52>
   8a9c8:	9e05      	ldr	r6, [sp, #20]
   8a9ca:	9a04      	ldr	r2, [sp, #16]
   8a9cc:	f856 3b04 	ldr.w	r3, [r6], #4
   8a9d0:	701a      	strb	r2, [r3, #0]
   8a9d2:	9605      	str	r6, [sp, #20]
   8a9d4:	e55b      	b.n	8a48e <_vfiprintf_r+0x72>
   8a9d6:	9c06      	ldr	r4, [sp, #24]
   8a9d8:	4620      	mov	r0, r4
   8a9da:	f7fe fa29 	bl	88e30 <_localeconv_r>
   8a9de:	6843      	ldr	r3, [r0, #4]
   8a9e0:	4618      	mov	r0, r3
   8a9e2:	930b      	str	r3, [sp, #44]	; 0x2c
   8a9e4:	f7fb fafc 	bl	85fe0 <strlen>
   8a9e8:	4603      	mov	r3, r0
   8a9ea:	4620      	mov	r0, r4
   8a9ec:	930c      	str	r3, [sp, #48]	; 0x30
   8a9ee:	461c      	mov	r4, r3
   8a9f0:	f7fe fa1e 	bl	88e30 <_localeconv_r>
   8a9f4:	6883      	ldr	r3, [r0, #8]
   8a9f6:	930a      	str	r3, [sp, #40]	; 0x28
   8a9f8:	2c00      	cmp	r4, #0
   8a9fa:	f43f ade2 	beq.w	8a5c2 <_vfiprintf_r+0x1a6>
   8a9fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8aa00:	2b00      	cmp	r3, #0
   8aa02:	f43f adde 	beq.w	8a5c2 <_vfiprintf_r+0x1a6>
   8aa06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   8aa08:	781b      	ldrb	r3, [r3, #0]
   8aa0a:	2b00      	cmp	r3, #0
   8aa0c:	f43f add9 	beq.w	8a5c2 <_vfiprintf_r+0x1a6>
   8aa10:	783b      	ldrb	r3, [r7, #0]
   8aa12:	f445 6580 	orr.w	r5, r5, #1024	; 0x400
   8aa16:	e55a      	b.n	8a4ce <_vfiprintf_r+0xb2>
   8aa18:	783b      	ldrb	r3, [r7, #0]
   8aa1a:	f045 0501 	orr.w	r5, r5, #1
   8aa1e:	e556      	b.n	8a4ce <_vfiprintf_r+0xb2>
   8aa20:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   8aa24:	2b00      	cmp	r3, #0
   8aa26:	f47f adcc 	bne.w	8a5c2 <_vfiprintf_r+0x1a6>
   8aa2a:	2320      	movs	r3, #32
   8aa2c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8aa30:	783b      	ldrb	r3, [r7, #0]
   8aa32:	e54c      	b.n	8a4ce <_vfiprintf_r+0xb2>
   8aa34:	783b      	ldrb	r3, [r7, #0]
   8aa36:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   8aa3a:	e548      	b.n	8a4ce <_vfiprintf_r+0xb2>
   8aa3c:	4639      	mov	r1, r7
   8aa3e:	f811 3b01 	ldrb.w	r3, [r1], #1
   8aa42:	2b2a      	cmp	r3, #42	; 0x2a
   8aa44:	f000 83a6 	beq.w	8b194 <_vfiprintf_r+0xd78>
   8aa48:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8aa4c:	2a09      	cmp	r2, #9
   8aa4e:	460f      	mov	r7, r1
   8aa50:	f04f 0b00 	mov.w	fp, #0
   8aa54:	f63f ad3c 	bhi.w	8a4d0 <_vfiprintf_r+0xb4>
   8aa58:	f817 3b01 	ldrb.w	r3, [r7], #1
   8aa5c:	eb0b 0b8b 	add.w	fp, fp, fp, lsl #2
   8aa60:	eb02 0b4b 	add.w	fp, r2, fp, lsl #1
   8aa64:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   8aa68:	2a09      	cmp	r2, #9
   8aa6a:	d9f5      	bls.n	8aa58 <_vfiprintf_r+0x63c>
   8aa6c:	e530      	b.n	8a4d0 <_vfiprintf_r+0xb4>
   8aa6e:	46aa      	mov	sl, r5
   8aa70:	2b01      	cmp	r3, #1
   8aa72:	f43f adc8 	beq.w	8a606 <_vfiprintf_r+0x1ea>
   8aa76:	2b02      	cmp	r3, #2
   8aa78:	ac3c      	add	r4, sp, #240	; 0xf0
   8aa7a:	d112      	bne.n	8aaa2 <_vfiprintf_r+0x686>
   8aa7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   8aa7e:	f006 030f 	and.w	r3, r6, #15
   8aa82:	5cd3      	ldrb	r3, [r2, r3]
   8aa84:	0936      	lsrs	r6, r6, #4
   8aa86:	ea46 7608 	orr.w	r6, r6, r8, lsl #28
   8aa8a:	ea4f 1818 	mov.w	r8, r8, lsr #4
   8aa8e:	f804 3d01 	strb.w	r3, [r4, #-1]!
   8aa92:	ea56 0308 	orrs.w	r3, r6, r8
   8aa96:	d1f2      	bne.n	8aa7e <_vfiprintf_r+0x662>
   8aa98:	ab3c      	add	r3, sp, #240	; 0xf0
   8aa9a:	1b1b      	subs	r3, r3, r4
   8aa9c:	4655      	mov	r5, sl
   8aa9e:	9301      	str	r3, [sp, #4]
   8aaa0:	e5be      	b.n	8a620 <_vfiprintf_r+0x204>
   8aaa2:	f006 0307 	and.w	r3, r6, #7
   8aaa6:	08f6      	lsrs	r6, r6, #3
   8aaa8:	ea46 7648 	orr.w	r6, r6, r8, lsl #29
   8aaac:	ea4f 08d8 	mov.w	r8, r8, lsr #3
   8aab0:	3330      	adds	r3, #48	; 0x30
   8aab2:	ea56 0108 	orrs.w	r1, r6, r8
   8aab6:	4622      	mov	r2, r4
   8aab8:	f804 3d01 	strb.w	r3, [r4, #-1]!
   8aabc:	d1f1      	bne.n	8aaa2 <_vfiprintf_r+0x686>
   8aabe:	f01a 0f01 	tst.w	sl, #1
   8aac2:	d0e9      	beq.n	8aa98 <_vfiprintf_r+0x67c>
   8aac4:	2b30      	cmp	r3, #48	; 0x30
   8aac6:	d0e7      	beq.n	8aa98 <_vfiprintf_r+0x67c>
   8aac8:	2330      	movs	r3, #48	; 0x30
   8aaca:	3a02      	subs	r2, #2
   8aacc:	f804 3c01 	strb.w	r3, [r4, #-1]
   8aad0:	ab3c      	add	r3, sp, #240	; 0xf0
   8aad2:	1a9b      	subs	r3, r3, r2
   8aad4:	4655      	mov	r5, sl
   8aad6:	4614      	mov	r4, r2
   8aad8:	9301      	str	r3, [sp, #4]
   8aada:	e5a1      	b.n	8a620 <_vfiprintf_r+0x204>
   8aadc:	2301      	movs	r3, #1
   8aade:	9a01      	ldr	r2, [sp, #4]
   8aae0:	9413      	str	r4, [sp, #76]	; 0x4c
   8aae2:	9311      	str	r3, [sp, #68]	; 0x44
   8aae4:	9214      	str	r2, [sp, #80]	; 0x50
   8aae6:	9212      	str	r2, [sp, #72]	; 0x48
   8aae8:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8aaec:	f109 0908 	add.w	r9, r9, #8
   8aaf0:	e6ad      	b.n	8a84e <_vfiprintf_r+0x432>
   8aaf2:	9b03      	ldr	r3, [sp, #12]
   8aaf4:	eba3 0608 	sub.w	r6, r3, r8
   8aaf8:	2e00      	cmp	r6, #0
   8aafa:	f77f ae89 	ble.w	8a810 <_vfiprintf_r+0x3f4>
   8aafe:	2e10      	cmp	r6, #16
   8ab00:	f8df a198 	ldr.w	sl, [pc, #408]	; 8ac9c <_vfiprintf_r+0x880>
   8ab04:	dd38      	ble.n	8ab78 <_vfiprintf_r+0x75c>
   8ab06:	4653      	mov	r3, sl
   8ab08:	46cc      	mov	ip, r9
   8ab0a:	46ba      	mov	sl, r7
   8ab0c:	46c1      	mov	r9, r8
   8ab0e:	9407      	str	r4, [sp, #28]
   8ab10:	46a8      	mov	r8, r5
   8ab12:	461f      	mov	r7, r3
   8ab14:	9c06      	ldr	r4, [sp, #24]
   8ab16:	9d02      	ldr	r5, [sp, #8]
   8ab18:	e007      	b.n	8ab2a <_vfiprintf_r+0x70e>
   8ab1a:	f101 0e02 	add.w	lr, r1, #2
   8ab1e:	4601      	mov	r1, r0
   8ab20:	f10c 0c08 	add.w	ip, ip, #8
   8ab24:	3e10      	subs	r6, #16
   8ab26:	2e10      	cmp	r6, #16
   8ab28:	dd1e      	ble.n	8ab68 <_vfiprintf_r+0x74c>
   8ab2a:	2310      	movs	r3, #16
   8ab2c:	1c48      	adds	r0, r1, #1
   8ab2e:	3210      	adds	r2, #16
   8ab30:	2807      	cmp	r0, #7
   8ab32:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8ab36:	f8cc 7000 	str.w	r7, [ip]
   8ab3a:	f8cc 3004 	str.w	r3, [ip, #4]
   8ab3e:	ddec      	ble.n	8ab1a <_vfiprintf_r+0x6fe>
   8ab40:	2a00      	cmp	r2, #0
   8ab42:	f000 8092 	beq.w	8ac6a <_vfiprintf_r+0x84e>
   8ab46:	4629      	mov	r1, r5
   8ab48:	4620      	mov	r0, r4
   8ab4a:	aa10      	add	r2, sp, #64	; 0x40
   8ab4c:	f7ff fc2a 	bl	8a3a4 <__sprint_r.part.0>
   8ab50:	2800      	cmp	r0, #0
   8ab52:	f47f adec 	bne.w	8a72e <_vfiprintf_r+0x312>
   8ab56:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8ab5a:	3e10      	subs	r6, #16
   8ab5c:	2e10      	cmp	r6, #16
   8ab5e:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8ab62:	f101 0e01 	add.w	lr, r1, #1
   8ab66:	dce0      	bgt.n	8ab2a <_vfiprintf_r+0x70e>
   8ab68:	463b      	mov	r3, r7
   8ab6a:	4645      	mov	r5, r8
   8ab6c:	4657      	mov	r7, sl
   8ab6e:	46c8      	mov	r8, r9
   8ab70:	4670      	mov	r0, lr
   8ab72:	46e1      	mov	r9, ip
   8ab74:	469a      	mov	sl, r3
   8ab76:	9c07      	ldr	r4, [sp, #28]
   8ab78:	4432      	add	r2, r6
   8ab7a:	2807      	cmp	r0, #7
   8ab7c:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8ab80:	f8c9 a000 	str.w	sl, [r9]
   8ab84:	f8c9 6004 	str.w	r6, [r9, #4]
   8ab88:	f340 8196 	ble.w	8aeb8 <_vfiprintf_r+0xa9c>
   8ab8c:	2a00      	cmp	r2, #0
   8ab8e:	f000 829a 	beq.w	8b0c6 <_vfiprintf_r+0xcaa>
   8ab92:	9902      	ldr	r1, [sp, #8]
   8ab94:	9806      	ldr	r0, [sp, #24]
   8ab96:	aa10      	add	r2, sp, #64	; 0x40
   8ab98:	f7ff fc04 	bl	8a3a4 <__sprint_r.part.0>
   8ab9c:	2800      	cmp	r0, #0
   8ab9e:	f47f adc6 	bne.w	8a72e <_vfiprintf_r+0x312>
   8aba2:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8aba6:	9b01      	ldr	r3, [sp, #4]
   8aba8:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8abac:	ebab 0603 	sub.w	r6, fp, r3
   8abb0:	2e00      	cmp	r6, #0
   8abb2:	f101 0001 	add.w	r0, r1, #1
   8abb6:	f77f ae31 	ble.w	8a81c <_vfiprintf_r+0x400>
   8abba:	2e10      	cmp	r6, #16
   8abbc:	f340 826b 	ble.w	8b096 <_vfiprintf_r+0xc7a>
   8abc0:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8ac9c <_vfiprintf_r+0x880>
   8abc4:	46cc      	mov	ip, r9
   8abc6:	4653      	mov	r3, sl
   8abc8:	46c1      	mov	r9, r8
   8abca:	46ba      	mov	sl, r7
   8abcc:	46a8      	mov	r8, r5
   8abce:	9407      	str	r4, [sp, #28]
   8abd0:	f04f 0b10 	mov.w	fp, #16
   8abd4:	461f      	mov	r7, r3
   8abd6:	9c06      	ldr	r4, [sp, #24]
   8abd8:	9d02      	ldr	r5, [sp, #8]
   8abda:	e007      	b.n	8abec <_vfiprintf_r+0x7d0>
   8abdc:	f101 0e02 	add.w	lr, r1, #2
   8abe0:	4601      	mov	r1, r0
   8abe2:	f10c 0c08 	add.w	ip, ip, #8
   8abe6:	3e10      	subs	r6, #16
   8abe8:	2e10      	cmp	r6, #16
   8abea:	dd19      	ble.n	8ac20 <_vfiprintf_r+0x804>
   8abec:	1c48      	adds	r0, r1, #1
   8abee:	3210      	adds	r2, #16
   8abf0:	2807      	cmp	r0, #7
   8abf2:	e9cc 7b00 	strd	r7, fp, [ip]
   8abf6:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8abfa:	ddef      	ble.n	8abdc <_vfiprintf_r+0x7c0>
   8abfc:	b332      	cbz	r2, 8ac4c <_vfiprintf_r+0x830>
   8abfe:	4629      	mov	r1, r5
   8ac00:	4620      	mov	r0, r4
   8ac02:	aa10      	add	r2, sp, #64	; 0x40
   8ac04:	f7ff fbce 	bl	8a3a4 <__sprint_r.part.0>
   8ac08:	2800      	cmp	r0, #0
   8ac0a:	f47f ad90 	bne.w	8a72e <_vfiprintf_r+0x312>
   8ac0e:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8ac12:	3e10      	subs	r6, #16
   8ac14:	2e10      	cmp	r6, #16
   8ac16:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8ac1a:	f101 0e01 	add.w	lr, r1, #1
   8ac1e:	dce5      	bgt.n	8abec <_vfiprintf_r+0x7d0>
   8ac20:	463b      	mov	r3, r7
   8ac22:	4645      	mov	r5, r8
   8ac24:	4657      	mov	r7, sl
   8ac26:	46c8      	mov	r8, r9
   8ac28:	4670      	mov	r0, lr
   8ac2a:	46e1      	mov	r9, ip
   8ac2c:	469a      	mov	sl, r3
   8ac2e:	9c07      	ldr	r4, [sp, #28]
   8ac30:	4432      	add	r2, r6
   8ac32:	2807      	cmp	r0, #7
   8ac34:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8ac38:	f8c9 a000 	str.w	sl, [r9]
   8ac3c:	f8c9 6004 	str.w	r6, [r9, #4]
   8ac40:	f300 80e9 	bgt.w	8ae16 <_vfiprintf_r+0x9fa>
   8ac44:	f109 0908 	add.w	r9, r9, #8
   8ac48:	3001      	adds	r0, #1
   8ac4a:	e5e7      	b.n	8a81c <_vfiprintf_r+0x400>
   8ac4c:	f04f 0e01 	mov.w	lr, #1
   8ac50:	4611      	mov	r1, r2
   8ac52:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8ac56:	e7c6      	b.n	8abe6 <_vfiprintf_r+0x7ca>
   8ac58:	9902      	ldr	r1, [sp, #8]
   8ac5a:	9806      	ldr	r0, [sp, #24]
   8ac5c:	aa10      	add	r2, sp, #64	; 0x40
   8ac5e:	f7ff fba1 	bl	8a3a4 <__sprint_r.part.0>
   8ac62:	2800      	cmp	r0, #0
   8ac64:	f43f ae05 	beq.w	8a872 <_vfiprintf_r+0x456>
   8ac68:	e561      	b.n	8a72e <_vfiprintf_r+0x312>
   8ac6a:	f04f 0e01 	mov.w	lr, #1
   8ac6e:	4611      	mov	r1, r2
   8ac70:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8ac74:	e756      	b.n	8ab24 <_vfiprintf_r+0x708>
   8ac76:	2a00      	cmp	r2, #0
   8ac78:	f000 80de 	beq.w	8ae38 <_vfiprintf_r+0xa1c>
   8ac7c:	9902      	ldr	r1, [sp, #8]
   8ac7e:	9806      	ldr	r0, [sp, #24]
   8ac80:	aa10      	add	r2, sp, #64	; 0x40
   8ac82:	f7ff fb8f 	bl	8a3a4 <__sprint_r.part.0>
   8ac86:	2800      	cmp	r0, #0
   8ac88:	f47f ad51 	bne.w	8a72e <_vfiprintf_r+0x312>
   8ac8c:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8ac90:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ac94:	1c48      	adds	r0, r1, #1
   8ac96:	e59a      	b.n	8a7ce <_vfiprintf_r+0x3b2>
   8ac98:	0008cb6c 	.word	0x0008cb6c
   8ac9c:	0008ce44 	.word	0x0008ce44
   8aca0:	2202      	movs	r2, #2
   8aca2:	2001      	movs	r0, #1
   8aca4:	ab0f      	add	r3, sp, #60	; 0x3c
   8aca6:	9313      	str	r3, [sp, #76]	; 0x4c
   8aca8:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8acac:	9214      	str	r2, [sp, #80]	; 0x50
   8acae:	4601      	mov	r1, r0
   8acb0:	f109 0908 	add.w	r9, r9, #8
   8acb4:	1c48      	adds	r0, r1, #1
   8acb6:	e5a7      	b.n	8a808 <_vfiprintf_r+0x3ec>
   8acb8:	2e10      	cmp	r6, #16
   8acba:	f340 8245 	ble.w	8b148 <_vfiprintf_r+0xd2c>
   8acbe:	e9dd 3211 	ldrd	r3, r2, [sp, #68]	; 0x44
   8acc2:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 8afb4 <_vfiprintf_r+0xb98>
   8acc6:	4619      	mov	r1, r3
   8acc8:	4653      	mov	r3, sl
   8acca:	46cc      	mov	ip, r9
   8accc:	46ba      	mov	sl, r7
   8acce:	46c1      	mov	r9, r8
   8acd0:	940d      	str	r4, [sp, #52]	; 0x34
   8acd2:	46a8      	mov	r8, r5
   8acd4:	461f      	mov	r7, r3
   8acd6:	9c06      	ldr	r4, [sp, #24]
   8acd8:	9d02      	ldr	r5, [sp, #8]
   8acda:	e007      	b.n	8acec <_vfiprintf_r+0x8d0>
   8acdc:	f101 0e02 	add.w	lr, r1, #2
   8ace0:	4601      	mov	r1, r0
   8ace2:	f10c 0c08 	add.w	ip, ip, #8
   8ace6:	3e10      	subs	r6, #16
   8ace8:	2e10      	cmp	r6, #16
   8acea:	dd1c      	ble.n	8ad26 <_vfiprintf_r+0x90a>
   8acec:	2310      	movs	r3, #16
   8acee:	1c48      	adds	r0, r1, #1
   8acf0:	3210      	adds	r2, #16
   8acf2:	2807      	cmp	r0, #7
   8acf4:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8acf8:	f8cc 7000 	str.w	r7, [ip]
   8acfc:	f8cc 3004 	str.w	r3, [ip, #4]
   8ad00:	ddec      	ble.n	8acdc <_vfiprintf_r+0x8c0>
   8ad02:	b332      	cbz	r2, 8ad52 <_vfiprintf_r+0x936>
   8ad04:	4629      	mov	r1, r5
   8ad06:	4620      	mov	r0, r4
   8ad08:	aa10      	add	r2, sp, #64	; 0x40
   8ad0a:	f7ff fb4b 	bl	8a3a4 <__sprint_r.part.0>
   8ad0e:	2800      	cmp	r0, #0
   8ad10:	f47f ad0d 	bne.w	8a72e <_vfiprintf_r+0x312>
   8ad14:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8ad18:	3e10      	subs	r6, #16
   8ad1a:	2e10      	cmp	r6, #16
   8ad1c:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8ad20:	f101 0e01 	add.w	lr, r1, #1
   8ad24:	dce2      	bgt.n	8acec <_vfiprintf_r+0x8d0>
   8ad26:	463b      	mov	r3, r7
   8ad28:	4645      	mov	r5, r8
   8ad2a:	4657      	mov	r7, sl
   8ad2c:	46c8      	mov	r8, r9
   8ad2e:	4671      	mov	r1, lr
   8ad30:	46e1      	mov	r9, ip
   8ad32:	469a      	mov	sl, r3
   8ad34:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   8ad36:	4432      	add	r2, r6
   8ad38:	2907      	cmp	r1, #7
   8ad3a:	e9cd 1211 	strd	r1, r2, [sp, #68]	; 0x44
   8ad3e:	f8c9 a000 	str.w	sl, [r9]
   8ad42:	f8c9 6004 	str.w	r6, [r9, #4]
   8ad46:	f300 80a7 	bgt.w	8ae98 <_vfiprintf_r+0xa7c>
   8ad4a:	f109 0908 	add.w	r9, r9, #8
   8ad4e:	1c48      	adds	r0, r1, #1
   8ad50:	e52b      	b.n	8a7aa <_vfiprintf_r+0x38e>
   8ad52:	4611      	mov	r1, r2
   8ad54:	f04f 0e01 	mov.w	lr, #1
   8ad58:	f10d 0c4c 	add.w	ip, sp, #76	; 0x4c
   8ad5c:	e7c3      	b.n	8ace6 <_vfiprintf_r+0x8ca>
   8ad5e:	076c      	lsls	r4, r5, #29
   8ad60:	9211      	str	r2, [sp, #68]	; 0x44
   8ad62:	d550      	bpl.n	8ae06 <_vfiprintf_r+0x9ea>
   8ad64:	9b03      	ldr	r3, [sp, #12]
   8ad66:	eba3 0408 	sub.w	r4, r3, r8
   8ad6a:	2c00      	cmp	r4, #0
   8ad6c:	dd4b      	ble.n	8ae06 <_vfiprintf_r+0x9ea>
   8ad6e:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ad72:	2c10      	cmp	r4, #16
   8ad74:	f340 81f8 	ble.w	8b168 <_vfiprintf_r+0xd4c>
   8ad78:	f8df a238 	ldr.w	sl, [pc, #568]	; 8afb4 <_vfiprintf_r+0xb98>
   8ad7c:	2510      	movs	r5, #16
   8ad7e:	4653      	mov	r3, sl
   8ad80:	9911      	ldr	r1, [sp, #68]	; 0x44
   8ad82:	46ba      	mov	sl, r7
   8ad84:	9e06      	ldr	r6, [sp, #24]
   8ad86:	461f      	mov	r7, r3
   8ad88:	f8dd b008 	ldr.w	fp, [sp, #8]
   8ad8c:	e006      	b.n	8ad9c <_vfiprintf_r+0x980>
   8ad8e:	1c88      	adds	r0, r1, #2
   8ad90:	4619      	mov	r1, r3
   8ad92:	f109 0908 	add.w	r9, r9, #8
   8ad96:	3c10      	subs	r4, #16
   8ad98:	2c10      	cmp	r4, #16
   8ad9a:	dd19      	ble.n	8add0 <_vfiprintf_r+0x9b4>
   8ad9c:	1c4b      	adds	r3, r1, #1
   8ad9e:	3210      	adds	r2, #16
   8ada0:	2b07      	cmp	r3, #7
   8ada2:	e9c9 7500 	strd	r7, r5, [r9]
   8ada6:	e9cd 3211 	strd	r3, r2, [sp, #68]	; 0x44
   8adaa:	ddf0      	ble.n	8ad8e <_vfiprintf_r+0x972>
   8adac:	b332      	cbz	r2, 8adfc <_vfiprintf_r+0x9e0>
   8adae:	4659      	mov	r1, fp
   8adb0:	4630      	mov	r0, r6
   8adb2:	aa10      	add	r2, sp, #64	; 0x40
   8adb4:	f7ff faf6 	bl	8a3a4 <__sprint_r.part.0>
   8adb8:	2800      	cmp	r0, #0
   8adba:	f47f acb8 	bne.w	8a72e <_vfiprintf_r+0x312>
   8adbe:	e9dd 1211 	ldrd	r1, r2, [sp, #68]	; 0x44
   8adc2:	3c10      	subs	r4, #16
   8adc4:	2c10      	cmp	r4, #16
   8adc6:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8adca:	f101 0001 	add.w	r0, r1, #1
   8adce:	dce5      	bgt.n	8ad9c <_vfiprintf_r+0x980>
   8add0:	463b      	mov	r3, r7
   8add2:	4657      	mov	r7, sl
   8add4:	469a      	mov	sl, r3
   8add6:	4422      	add	r2, r4
   8add8:	2807      	cmp	r0, #7
   8adda:	e9c9 a400 	strd	sl, r4, [r9]
   8adde:	e9cd 0211 	strd	r0, r2, [sp, #68]	; 0x44
   8ade2:	f77f ad3c 	ble.w	8a85e <_vfiprintf_r+0x442>
   8ade6:	b172      	cbz	r2, 8ae06 <_vfiprintf_r+0x9ea>
   8ade8:	9902      	ldr	r1, [sp, #8]
   8adea:	9806      	ldr	r0, [sp, #24]
   8adec:	aa10      	add	r2, sp, #64	; 0x40
   8adee:	f7ff fad9 	bl	8a3a4 <__sprint_r.part.0>
   8adf2:	2800      	cmp	r0, #0
   8adf4:	f47f ac9b 	bne.w	8a72e <_vfiprintf_r+0x312>
   8adf8:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8adfa:	e530      	b.n	8a85e <_vfiprintf_r+0x442>
   8adfc:	2001      	movs	r0, #1
   8adfe:	4611      	mov	r1, r2
   8ae00:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ae04:	e7c7      	b.n	8ad96 <_vfiprintf_r+0x97a>
   8ae06:	e9dd 2303 	ldrd	r2, r3, [sp, #12]
   8ae0a:	4542      	cmp	r2, r8
   8ae0c:	bfac      	ite	ge
   8ae0e:	189b      	addge	r3, r3, r2
   8ae10:	4443      	addlt	r3, r8
   8ae12:	9304      	str	r3, [sp, #16]
   8ae14:	e52d      	b.n	8a872 <_vfiprintf_r+0x456>
   8ae16:	2a00      	cmp	r2, #0
   8ae18:	f43f ae60 	beq.w	8aadc <_vfiprintf_r+0x6c0>
   8ae1c:	9902      	ldr	r1, [sp, #8]
   8ae1e:	9806      	ldr	r0, [sp, #24]
   8ae20:	aa10      	add	r2, sp, #64	; 0x40
   8ae22:	f7ff fabf 	bl	8a3a4 <__sprint_r.part.0>
   8ae26:	2800      	cmp	r0, #0
   8ae28:	f47f ac81 	bne.w	8a72e <_vfiprintf_r+0x312>
   8ae2c:	9811      	ldr	r0, [sp, #68]	; 0x44
   8ae2e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8ae30:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ae34:	3001      	adds	r0, #1
   8ae36:	e4f1      	b.n	8a81c <_vfiprintf_r+0x400>
   8ae38:	9b07      	ldr	r3, [sp, #28]
   8ae3a:	2b00      	cmp	r3, #0
   8ae3c:	d169      	bne.n	8af12 <_vfiprintf_r+0xaf6>
   8ae3e:	2001      	movs	r0, #1
   8ae40:	4611      	mov	r1, r2
   8ae42:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ae46:	e4df      	b.n	8a808 <_vfiprintf_r+0x3ec>
   8ae48:	9211      	str	r2, [sp, #68]	; 0x44
   8ae4a:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8ae4e:	e458      	b.n	8a702 <_vfiprintf_r+0x2e6>
   8ae50:	f1bb 0f00 	cmp.w	fp, #0
   8ae54:	f47f abdc 	bne.w	8a610 <_vfiprintf_r+0x1f4>
   8ae58:	4655      	mov	r5, sl
   8ae5a:	f04f 0b00 	mov.w	fp, #0
   8ae5e:	ac3c      	add	r4, sp, #240	; 0xf0
   8ae60:	f8cd b004 	str.w	fp, [sp, #4]
   8ae64:	f7ff bbdc 	b.w	8a620 <_vfiprintf_r+0x204>
   8ae68:	f01a 0310 	ands.w	r3, sl, #16
   8ae6c:	d140      	bne.n	8aef0 <_vfiprintf_r+0xad4>
   8ae6e:	f01a 0240 	ands.w	r2, sl, #64	; 0x40
   8ae72:	d039      	beq.n	8aee8 <_vfiprintf_r+0xacc>
   8ae74:	9e05      	ldr	r6, [sp, #20]
   8ae76:	4698      	mov	r8, r3
   8ae78:	f856 2b04 	ldr.w	r2, [r6], #4
   8ae7c:	2301      	movs	r3, #1
   8ae7e:	9605      	str	r6, [sp, #20]
   8ae80:	b296      	uxth	r6, r2
   8ae82:	e410      	b.n	8a6a6 <_vfiprintf_r+0x28a>
   8ae84:	232d      	movs	r3, #45	; 0x2d
   8ae86:	4276      	negs	r6, r6
   8ae88:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
   8ae8c:	46aa      	mov	sl, r5
   8ae8e:	f04f 0301 	mov.w	r3, #1
   8ae92:	eb68 0848 	sbc.w	r8, r8, r8, lsl #1
   8ae96:	e40a      	b.n	8a6ae <_vfiprintf_r+0x292>
   8ae98:	2a00      	cmp	r2, #0
   8ae9a:	d06f      	beq.n	8af7c <_vfiprintf_r+0xb60>
   8ae9c:	9902      	ldr	r1, [sp, #8]
   8ae9e:	9806      	ldr	r0, [sp, #24]
   8aea0:	aa10      	add	r2, sp, #64	; 0x40
   8aea2:	f7ff fa7f 	bl	8a3a4 <__sprint_r.part.0>
   8aea6:	2800      	cmp	r0, #0
   8aea8:	f47f ac41 	bne.w	8a72e <_vfiprintf_r+0x312>
   8aeac:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8aeb0:	e478      	b.n	8a7a4 <_vfiprintf_r+0x388>
   8aeb2:	ac3c      	add	r4, sp, #240	; 0xf0
   8aeb4:	f7ff bbb4 	b.w	8a620 <_vfiprintf_r+0x204>
   8aeb8:	4601      	mov	r1, r0
   8aeba:	f109 0908 	add.w	r9, r9, #8
   8aebe:	3001      	adds	r0, #1
   8aec0:	e4a6      	b.n	8a810 <_vfiprintf_r+0x3f4>
   8aec2:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   8aec6:	f040 811d 	bne.w	8b104 <_vfiprintf_r+0xce8>
   8aeca:	9b05      	ldr	r3, [sp, #20]
   8aecc:	f853 6b04 	ldr.w	r6, [r3], #4
   8aed0:	9305      	str	r3, [sp, #20]
   8aed2:	f7ff bbe5 	b.w	8a6a0 <_vfiprintf_r+0x284>
   8aed6:	05aa      	lsls	r2, r5, #22
   8aed8:	f100 810e 	bmi.w	8b0f8 <_vfiprintf_r+0xcdc>
   8aedc:	ea4f 78e3 	mov.w	r8, r3, asr #31
   8aee0:	461e      	mov	r6, r3
   8aee2:	4643      	mov	r3, r8
   8aee4:	f7ff bb82 	b.w	8a5ec <_vfiprintf_r+0x1d0>
   8aee8:	f41a 7800 	ands.w	r8, sl, #512	; 0x200
   8aeec:	f040 80fb 	bne.w	8b0e6 <_vfiprintf_r+0xcca>
   8aef0:	9a05      	ldr	r2, [sp, #20]
   8aef2:	2301      	movs	r3, #1
   8aef4:	f852 6b04 	ldr.w	r6, [r2], #4
   8aef8:	9205      	str	r2, [sp, #20]
   8aefa:	f7ff bbd4 	b.w	8a6a6 <_vfiprintf_r+0x28a>
   8aefe:	e9dd 1604 	ldrd	r1, r6, [sp, #16]
   8af02:	f856 2b04 	ldr.w	r2, [r6], #4
   8af06:	17cb      	asrs	r3, r1, #31
   8af08:	e9c2 1300 	strd	r1, r3, [r2]
   8af0c:	9605      	str	r6, [sp, #20]
   8af0e:	f7ff babe 	b.w	8a48e <_vfiprintf_r+0x72>
   8af12:	2202      	movs	r2, #2
   8af14:	ab0f      	add	r3, sp, #60	; 0x3c
   8af16:	9313      	str	r3, [sp, #76]	; 0x4c
   8af18:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8af1c:	9214      	str	r2, [sp, #80]	; 0x50
   8af1e:	e6c7      	b.n	8acb0 <_vfiprintf_r+0x894>
   8af20:	4a25      	ldr	r2, [pc, #148]	; (8afb8 <_vfiprintf_r+0xb9c>)
   8af22:	9209      	str	r2, [sp, #36]	; 0x24
   8af24:	f015 0820 	ands.w	r8, r5, #32
   8af28:	d036      	beq.n	8af98 <_vfiprintf_r+0xb7c>
   8af2a:	9e05      	ldr	r6, [sp, #20]
   8af2c:	3607      	adds	r6, #7
   8af2e:	f026 0607 	bic.w	r6, r6, #7
   8af32:	4632      	mov	r2, r6
   8af34:	f8d6 8004 	ldr.w	r8, [r6, #4]
   8af38:	f852 6b08 	ldr.w	r6, [r2], #8
   8af3c:	9205      	str	r2, [sp, #20]
   8af3e:	07ea      	lsls	r2, r5, #31
   8af40:	d509      	bpl.n	8af56 <_vfiprintf_r+0xb3a>
   8af42:	ea56 0208 	orrs.w	r2, r6, r8
   8af46:	d006      	beq.n	8af56 <_vfiprintf_r+0xb3a>
   8af48:	f88d 303d 	strb.w	r3, [sp, #61]	; 0x3d
   8af4c:	2330      	movs	r3, #48	; 0x30
   8af4e:	f045 0502 	orr.w	r5, r5, #2
   8af52:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
   8af56:	2302      	movs	r3, #2
   8af58:	f425 6a80 	bic.w	sl, r5, #1024	; 0x400
   8af5c:	f7ff bba3 	b.w	8a6a6 <_vfiprintf_r+0x28a>
   8af60:	46aa      	mov	sl, r5
   8af62:	e4ff      	b.n	8a964 <_vfiprintf_r+0x548>
   8af64:	4a15      	ldr	r2, [pc, #84]	; (8afbc <_vfiprintf_r+0xba0>)
   8af66:	9209      	str	r2, [sp, #36]	; 0x24
   8af68:	e7dc      	b.n	8af24 <_vfiprintf_r+0xb08>
   8af6a:	4620      	mov	r0, r4
   8af6c:	9605      	str	r6, [sp, #20]
   8af6e:	f7fb f837 	bl	85fe0 <strlen>
   8af72:	f04f 0b00 	mov.w	fp, #0
   8af76:	9001      	str	r0, [sp, #4]
   8af78:	f7ff bb52 	b.w	8a620 <_vfiprintf_r+0x204>
   8af7c:	f89d 103b 	ldrb.w	r1, [sp, #59]	; 0x3b
   8af80:	2900      	cmp	r1, #0
   8af82:	f000 80a6 	beq.w	8b0d2 <_vfiprintf_r+0xcb6>
   8af86:	2001      	movs	r0, #1
   8af88:	f10d 023b 	add.w	r2, sp, #59	; 0x3b
   8af8c:	9213      	str	r2, [sp, #76]	; 0x4c
   8af8e:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8af92:	4602      	mov	r2, r0
   8af94:	9014      	str	r0, [sp, #80]	; 0x50
   8af96:	e416      	b.n	8a7c6 <_vfiprintf_r+0x3aa>
   8af98:	f015 0210 	ands.w	r2, r5, #16
   8af9c:	d114      	bne.n	8afc8 <_vfiprintf_r+0xbac>
   8af9e:	f015 0140 	ands.w	r1, r5, #64	; 0x40
   8afa2:	d00d      	beq.n	8afc0 <_vfiprintf_r+0xba4>
   8afa4:	9e05      	ldr	r6, [sp, #20]
   8afa6:	4690      	mov	r8, r2
   8afa8:	f856 2b04 	ldr.w	r2, [r6], #4
   8afac:	9605      	str	r6, [sp, #20]
   8afae:	b296      	uxth	r6, r2
   8afb0:	e7c5      	b.n	8af3e <_vfiprintf_r+0xb22>
   8afb2:	bf00      	nop
   8afb4:	0008ce34 	.word	0x0008ce34
   8afb8:	0008cb80 	.word	0x0008cb80
   8afbc:	0008cb6c 	.word	0x0008cb6c
   8afc0:	f415 7800 	ands.w	r8, r5, #512	; 0x200
   8afc4:	f040 80a6 	bne.w	8b114 <_vfiprintf_r+0xcf8>
   8afc8:	9a05      	ldr	r2, [sp, #20]
   8afca:	f852 6b04 	ldr.w	r6, [r2], #4
   8afce:	9205      	str	r2, [sp, #20]
   8afd0:	e7b5      	b.n	8af3e <_vfiprintf_r+0xb22>
   8afd2:	2300      	movs	r3, #0
   8afd4:	f40a 6280 	and.w	r2, sl, #1024	; 0x400
   8afd8:	f8cd b004 	str.w	fp, [sp, #4]
   8afdc:	f8cd a01c 	str.w	sl, [sp, #28]
   8afe0:	46bb      	mov	fp, r7
   8afe2:	f8cd 9020 	str.w	r9, [sp, #32]
   8afe6:	469a      	mov	sl, r3
   8afe8:	4617      	mov	r7, r2
   8afea:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   8afee:	ad3c      	add	r5, sp, #240	; 0xf0
   8aff0:	e00c      	b.n	8b00c <_vfiprintf_r+0xbf0>
   8aff2:	2300      	movs	r3, #0
   8aff4:	4630      	mov	r0, r6
   8aff6:	4641      	mov	r1, r8
   8aff8:	220a      	movs	r2, #10
   8affa:	f001 fbf9 	bl	8c7f0 <__aeabi_uldivmod>
   8affe:	2e0a      	cmp	r6, #10
   8b000:	f178 0300 	sbcs.w	r3, r8, #0
   8b004:	d31b      	bcc.n	8b03e <_vfiprintf_r+0xc22>
   8b006:	4606      	mov	r6, r0
   8b008:	4688      	mov	r8, r1
   8b00a:	4625      	mov	r5, r4
   8b00c:	4630      	mov	r0, r6
   8b00e:	4641      	mov	r1, r8
   8b010:	220a      	movs	r2, #10
   8b012:	2300      	movs	r3, #0
   8b014:	f001 fbec 	bl	8c7f0 <__aeabi_uldivmod>
   8b018:	3230      	adds	r2, #48	; 0x30
   8b01a:	1e6c      	subs	r4, r5, #1
   8b01c:	f10a 0a01 	add.w	sl, sl, #1
   8b020:	f805 2c01 	strb.w	r2, [r5, #-1]
   8b024:	2f00      	cmp	r7, #0
   8b026:	d0e4      	beq.n	8aff2 <_vfiprintf_r+0xbd6>
   8b028:	f899 3000 	ldrb.w	r3, [r9]
   8b02c:	4553      	cmp	r3, sl
   8b02e:	d1e0      	bne.n	8aff2 <_vfiprintf_r+0xbd6>
   8b030:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   8b034:	d0dd      	beq.n	8aff2 <_vfiprintf_r+0xbd6>
   8b036:	2e0a      	cmp	r6, #10
   8b038:	f178 0300 	sbcs.w	r3, r8, #0
   8b03c:	d22e      	bcs.n	8b09c <_vfiprintf_r+0xc80>
   8b03e:	f8dd a01c 	ldr.w	sl, [sp, #28]
   8b042:	ab3c      	add	r3, sp, #240	; 0xf0
   8b044:	1b1b      	subs	r3, r3, r4
   8b046:	465f      	mov	r7, fp
   8b048:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   8b04c:	f8dd b004 	ldr.w	fp, [sp, #4]
   8b050:	4655      	mov	r5, sl
   8b052:	f8dd 9020 	ldr.w	r9, [sp, #32]
   8b056:	9301      	str	r3, [sp, #4]
   8b058:	f7ff bae2 	b.w	8a620 <_vfiprintf_r+0x204>
   8b05c:	46aa      	mov	sl, r5
   8b05e:	f7ff bad2 	b.w	8a606 <_vfiprintf_r+0x1ea>
   8b062:	2b01      	cmp	r3, #1
   8b064:	46aa      	mov	sl, r5
   8b066:	f47f ad06 	bne.w	8aa76 <_vfiprintf_r+0x65a>
   8b06a:	f7ff bad1 	b.w	8a610 <_vfiprintf_r+0x1f4>
   8b06e:	9e05      	ldr	r6, [sp, #20]
   8b070:	9a04      	ldr	r2, [sp, #16]
   8b072:	f856 3b04 	ldr.w	r3, [r6], #4
   8b076:	601a      	str	r2, [r3, #0]
   8b078:	9605      	str	r6, [sp, #20]
   8b07a:	f7ff ba08 	b.w	8a48e <_vfiprintf_r+0x72>
   8b07e:	f1bb 0f06 	cmp.w	fp, #6
   8b082:	46d8      	mov	r8, fp
   8b084:	bf28      	it	cs
   8b086:	f04f 0806 	movcs.w	r8, #6
   8b08a:	4c47      	ldr	r4, [pc, #284]	; (8b1a8 <_vfiprintf_r+0xd8c>)
   8b08c:	f8cd 8004 	str.w	r8, [sp, #4]
   8b090:	9605      	str	r6, [sp, #20]
   8b092:	f7ff bb75 	b.w	8a780 <_vfiprintf_r+0x364>
   8b096:	f8df a114 	ldr.w	sl, [pc, #276]	; 8b1ac <_vfiprintf_r+0xd90>
   8b09a:	e5c9      	b.n	8ac30 <_vfiprintf_r+0x814>
   8b09c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   8b09e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   8b0a0:	1ae4      	subs	r4, r4, r3
   8b0a2:	461a      	mov	r2, r3
   8b0a4:	4620      	mov	r0, r4
   8b0a6:	f7fa ffc9 	bl	8603c <strncpy>
   8b0aa:	f899 3001 	ldrb.w	r3, [r9, #1]
   8b0ae:	b10b      	cbz	r3, 8b0b4 <_vfiprintf_r+0xc98>
   8b0b0:	f109 0901 	add.w	r9, r9, #1
   8b0b4:	4630      	mov	r0, r6
   8b0b6:	4641      	mov	r1, r8
   8b0b8:	220a      	movs	r2, #10
   8b0ba:	2300      	movs	r3, #0
   8b0bc:	f04f 0a00 	mov.w	sl, #0
   8b0c0:	f001 fb96 	bl	8c7f0 <__aeabi_uldivmod>
   8b0c4:	e79f      	b.n	8b006 <_vfiprintf_r+0xbea>
   8b0c6:	2001      	movs	r0, #1
   8b0c8:	4611      	mov	r1, r2
   8b0ca:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8b0ce:	f7ff bb9f 	b.w	8a810 <_vfiprintf_r+0x3f4>
   8b0d2:	9b07      	ldr	r3, [sp, #28]
   8b0d4:	2b00      	cmp	r3, #0
   8b0d6:	f47f ade3 	bne.w	8aca0 <_vfiprintf_r+0x884>
   8b0da:	4611      	mov	r1, r2
   8b0dc:	2001      	movs	r0, #1
   8b0de:	f10d 094c 	add.w	r9, sp, #76	; 0x4c
   8b0e2:	f7ff bb95 	b.w	8a810 <_vfiprintf_r+0x3f4>
   8b0e6:	9e05      	ldr	r6, [sp, #20]
   8b0e8:	4690      	mov	r8, r2
   8b0ea:	f856 2b04 	ldr.w	r2, [r6], #4
   8b0ee:	2301      	movs	r3, #1
   8b0f0:	9605      	str	r6, [sp, #20]
   8b0f2:	b2d6      	uxtb	r6, r2
   8b0f4:	f7ff bad7 	b.w	8a6a6 <_vfiprintf_r+0x28a>
   8b0f8:	f343 18c0 	sbfx	r8, r3, #7, #1
   8b0fc:	b25e      	sxtb	r6, r3
   8b0fe:	4643      	mov	r3, r8
   8b100:	f7ff ba74 	b.w	8a5ec <_vfiprintf_r+0x1d0>
   8b104:	9e05      	ldr	r6, [sp, #20]
   8b106:	4690      	mov	r8, r2
   8b108:	f856 3b04 	ldr.w	r3, [r6], #4
   8b10c:	9605      	str	r6, [sp, #20]
   8b10e:	b2de      	uxtb	r6, r3
   8b110:	f7ff bac6 	b.w	8a6a0 <_vfiprintf_r+0x284>
   8b114:	9e05      	ldr	r6, [sp, #20]
   8b116:	4688      	mov	r8, r1
   8b118:	f856 2b04 	ldr.w	r2, [r6], #4
   8b11c:	9605      	str	r6, [sp, #20]
   8b11e:	b2d6      	uxtb	r6, r2
   8b120:	e70d      	b.n	8af3e <_vfiprintf_r+0xb22>
   8b122:	9e05      	ldr	r6, [sp, #20]
   8b124:	9a04      	ldr	r2, [sp, #16]
   8b126:	f856 3b04 	ldr.w	r3, [r6], #4
   8b12a:	801a      	strh	r2, [r3, #0]
   8b12c:	9605      	str	r6, [sp, #20]
   8b12e:	f7ff b9ae 	b.w	8a48e <_vfiprintf_r+0x72>
   8b132:	6d88      	ldr	r0, [r1, #88]	; 0x58
   8b134:	f7fd fe86 	bl	88e44 <__retarget_lock_release_recursive>
   8b138:	f7ff ba99 	b.w	8a66e <_vfiprintf_r+0x252>
   8b13c:	f8cd b004 	str.w	fp, [sp, #4]
   8b140:	9605      	str	r6, [sp, #20]
   8b142:	4683      	mov	fp, r0
   8b144:	f7ff ba6c 	b.w	8a620 <_vfiprintf_r+0x204>
   8b148:	9911      	ldr	r1, [sp, #68]	; 0x44
   8b14a:	9a12      	ldr	r2, [sp, #72]	; 0x48
   8b14c:	f8df a060 	ldr.w	sl, [pc, #96]	; 8b1b0 <_vfiprintf_r+0xd94>
   8b150:	3101      	adds	r1, #1
   8b152:	e5f0      	b.n	8ad36 <_vfiprintf_r+0x91a>
   8b154:	9902      	ldr	r1, [sp, #8]
   8b156:	9806      	ldr	r0, [sp, #24]
   8b158:	aa10      	add	r2, sp, #64	; 0x40
   8b15a:	f7ff f923 	bl	8a3a4 <__sprint_r.part.0>
   8b15e:	2800      	cmp	r0, #0
   8b160:	f43f aae3 	beq.w	8a72a <_vfiprintf_r+0x30e>
   8b164:	f7ff bae3 	b.w	8a72e <_vfiprintf_r+0x312>
   8b168:	9811      	ldr	r0, [sp, #68]	; 0x44
   8b16a:	f8df a044 	ldr.w	sl, [pc, #68]	; 8b1b0 <_vfiprintf_r+0xd94>
   8b16e:	3001      	adds	r0, #1
   8b170:	e631      	b.n	8add6 <_vfiprintf_r+0x9ba>
   8b172:	9b02      	ldr	r3, [sp, #8]
   8b174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   8b176:	07db      	lsls	r3, r3, #31
   8b178:	d407      	bmi.n	8b18a <_vfiprintf_r+0xd6e>
   8b17a:	9b02      	ldr	r3, [sp, #8]
   8b17c:	899b      	ldrh	r3, [r3, #12]
   8b17e:	059f      	lsls	r7, r3, #22
   8b180:	d403      	bmi.n	8b18a <_vfiprintf_r+0xd6e>
   8b182:	9b02      	ldr	r3, [sp, #8]
   8b184:	6d98      	ldr	r0, [r3, #88]	; 0x58
   8b186:	f7fd fe5d 	bl	88e44 <__retarget_lock_release_recursive>
   8b18a:	f04f 33ff 	mov.w	r3, #4294967295
   8b18e:	9304      	str	r3, [sp, #16]
   8b190:	f7ff bad6 	b.w	8a740 <_vfiprintf_r+0x324>
   8b194:	9a05      	ldr	r2, [sp, #20]
   8b196:	787b      	ldrb	r3, [r7, #1]
   8b198:	460f      	mov	r7, r1
   8b19a:	f852 1b04 	ldr.w	r1, [r2], #4
   8b19e:	9205      	str	r2, [sp, #20]
   8b1a0:	ea41 7be1 	orr.w	fp, r1, r1, asr #31
   8b1a4:	f7ff b993 	b.w	8a4ce <_vfiprintf_r+0xb2>
   8b1a8:	0008cb94 	.word	0x0008cb94
   8b1ac:	0008ce44 	.word	0x0008ce44
   8b1b0:	0008ce34 	.word	0x0008ce34

0008b1b4 <__sbprintf>:
   8b1b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   8b1b6:	f44f 6c80 	mov.w	ip, #1024	; 0x400
   8b1ba:	4615      	mov	r5, r2
   8b1bc:	2400      	movs	r4, #0
   8b1be:	4606      	mov	r6, r0
   8b1c0:	461f      	mov	r7, r3
   8b1c2:	f2ad 4d6c 	subw	sp, sp, #1132	; 0x46c
   8b1c6:	ab1a      	add	r3, sp, #104	; 0x68
   8b1c8:	9300      	str	r3, [sp, #0]
   8b1ca:	9304      	str	r3, [sp, #16]
   8b1cc:	898b      	ldrh	r3, [r1, #12]
   8b1ce:	a816      	add	r0, sp, #88	; 0x58
   8b1d0:	f023 0302 	bic.w	r3, r3, #2
   8b1d4:	f8ad 300c 	strh.w	r3, [sp, #12]
   8b1d8:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   8b1da:	9406      	str	r4, [sp, #24]
   8b1dc:	9319      	str	r3, [sp, #100]	; 0x64
   8b1de:	89cb      	ldrh	r3, [r1, #14]
   8b1e0:	460c      	mov	r4, r1
   8b1e2:	f8ad 300e 	strh.w	r3, [sp, #14]
   8b1e6:	69cb      	ldr	r3, [r1, #28]
   8b1e8:	f8cd c008 	str.w	ip, [sp, #8]
   8b1ec:	9307      	str	r3, [sp, #28]
   8b1ee:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   8b1f0:	f8cd c014 	str.w	ip, [sp, #20]
   8b1f4:	9309      	str	r3, [sp, #36]	; 0x24
   8b1f6:	f7fd fe1f 	bl	88e38 <__retarget_lock_init_recursive>
   8b1fa:	462a      	mov	r2, r5
   8b1fc:	463b      	mov	r3, r7
   8b1fe:	4669      	mov	r1, sp
   8b200:	4630      	mov	r0, r6
   8b202:	f7ff f90b 	bl	8a41c <_vfiprintf_r>
   8b206:	1e05      	subs	r5, r0, #0
   8b208:	db07      	blt.n	8b21a <__sbprintf+0x66>
   8b20a:	4669      	mov	r1, sp
   8b20c:	4630      	mov	r0, r6
   8b20e:	f000 f925 	bl	8b45c <_fflush_r>
   8b212:	2800      	cmp	r0, #0
   8b214:	bf18      	it	ne
   8b216:	f04f 35ff 	movne.w	r5, #4294967295
   8b21a:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   8b21e:	065b      	lsls	r3, r3, #25
   8b220:	d503      	bpl.n	8b22a <__sbprintf+0x76>
   8b222:	89a3      	ldrh	r3, [r4, #12]
   8b224:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b228:	81a3      	strh	r3, [r4, #12]
   8b22a:	9816      	ldr	r0, [sp, #88]	; 0x58
   8b22c:	f7fd fe06 	bl	88e3c <__retarget_lock_close_recursive>
   8b230:	4628      	mov	r0, r5
   8b232:	f20d 4d6c 	addw	sp, sp, #1132	; 0x46c
   8b236:	bdf0      	pop	{r4, r5, r6, r7, pc}

0008b238 <__ascii_wctomb>:
   8b238:	4603      	mov	r3, r0
   8b23a:	b149      	cbz	r1, 8b250 <__ascii_wctomb+0x18>
   8b23c:	2aff      	cmp	r2, #255	; 0xff
   8b23e:	d802      	bhi.n	8b246 <__ascii_wctomb+0xe>
   8b240:	2001      	movs	r0, #1
   8b242:	700a      	strb	r2, [r1, #0]
   8b244:	4770      	bx	lr
   8b246:	228a      	movs	r2, #138	; 0x8a
   8b248:	f04f 30ff 	mov.w	r0, #4294967295
   8b24c:	601a      	str	r2, [r3, #0]
   8b24e:	4770      	bx	lr
   8b250:	4608      	mov	r0, r1
   8b252:	4770      	bx	lr

0008b254 <__swsetup_r>:
   8b254:	b538      	push	{r3, r4, r5, lr}
   8b256:	4b33      	ldr	r3, [pc, #204]	; (8b324 <__swsetup_r+0xd0>)
   8b258:	4605      	mov	r5, r0
   8b25a:	681b      	ldr	r3, [r3, #0]
   8b25c:	460c      	mov	r4, r1
   8b25e:	b10b      	cbz	r3, 8b264 <__swsetup_r+0x10>
   8b260:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   8b262:	b312      	cbz	r2, 8b2aa <__swsetup_r+0x56>
   8b264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b268:	0718      	lsls	r0, r3, #28
   8b26a:	b29a      	uxth	r2, r3
   8b26c:	d525      	bpl.n	8b2ba <__swsetup_r+0x66>
   8b26e:	6921      	ldr	r1, [r4, #16]
   8b270:	2900      	cmp	r1, #0
   8b272:	d02d      	beq.n	8b2d0 <__swsetup_r+0x7c>
   8b274:	f012 0001 	ands.w	r0, r2, #1
   8b278:	d007      	beq.n	8b28a <__swsetup_r+0x36>
   8b27a:	2500      	movs	r5, #0
   8b27c:	6960      	ldr	r0, [r4, #20]
   8b27e:	60a5      	str	r5, [r4, #8]
   8b280:	4240      	negs	r0, r0
   8b282:	61a0      	str	r0, [r4, #24]
   8b284:	b139      	cbz	r1, 8b296 <__swsetup_r+0x42>
   8b286:	2000      	movs	r0, #0
   8b288:	bd38      	pop	{r3, r4, r5, pc}
   8b28a:	0795      	lsls	r5, r2, #30
   8b28c:	bf58      	it	pl
   8b28e:	6960      	ldrpl	r0, [r4, #20]
   8b290:	60a0      	str	r0, [r4, #8]
   8b292:	2900      	cmp	r1, #0
   8b294:	d1f7      	bne.n	8b286 <__swsetup_r+0x32>
   8b296:	0612      	lsls	r2, r2, #24
   8b298:	bf58      	it	pl
   8b29a:	4608      	movpl	r0, r1
   8b29c:	d5f4      	bpl.n	8b288 <__swsetup_r+0x34>
   8b29e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b2a2:	f04f 30ff 	mov.w	r0, #4294967295
   8b2a6:	81a3      	strh	r3, [r4, #12]
   8b2a8:	bd38      	pop	{r3, r4, r5, pc}
   8b2aa:	4618      	mov	r0, r3
   8b2ac:	f000 f90a 	bl	8b4c4 <__sinit>
   8b2b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b2b4:	0718      	lsls	r0, r3, #28
   8b2b6:	b29a      	uxth	r2, r3
   8b2b8:	d4d9      	bmi.n	8b26e <__swsetup_r+0x1a>
   8b2ba:	06d1      	lsls	r1, r2, #27
   8b2bc:	d52a      	bpl.n	8b314 <__swsetup_r+0xc0>
   8b2be:	0752      	lsls	r2, r2, #29
   8b2c0:	d414      	bmi.n	8b2ec <__swsetup_r+0x98>
   8b2c2:	6921      	ldr	r1, [r4, #16]
   8b2c4:	f043 0308 	orr.w	r3, r3, #8
   8b2c8:	81a3      	strh	r3, [r4, #12]
   8b2ca:	b29a      	uxth	r2, r3
   8b2cc:	2900      	cmp	r1, #0
   8b2ce:	d1d1      	bne.n	8b274 <__swsetup_r+0x20>
   8b2d0:	f402 7020 	and.w	r0, r2, #640	; 0x280
   8b2d4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   8b2d8:	d0cc      	beq.n	8b274 <__swsetup_r+0x20>
   8b2da:	4621      	mov	r1, r4
   8b2dc:	4628      	mov	r0, r5
   8b2de:	f000 fba3 	bl	8ba28 <__smakebuf_r>
   8b2e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b2e6:	6921      	ldr	r1, [r4, #16]
   8b2e8:	b29a      	uxth	r2, r3
   8b2ea:	e7c3      	b.n	8b274 <__swsetup_r+0x20>
   8b2ec:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8b2ee:	b151      	cbz	r1, 8b306 <__swsetup_r+0xb2>
   8b2f0:	f104 0240 	add.w	r2, r4, #64	; 0x40
   8b2f4:	4291      	cmp	r1, r2
   8b2f6:	d004      	beq.n	8b302 <__swsetup_r+0xae>
   8b2f8:	4628      	mov	r0, r5
   8b2fa:	f7fd fc99 	bl	88c30 <_free_r>
   8b2fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b302:	2200      	movs	r2, #0
   8b304:	6322      	str	r2, [r4, #48]	; 0x30
   8b306:	2200      	movs	r2, #0
   8b308:	6921      	ldr	r1, [r4, #16]
   8b30a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
   8b30e:	e9c4 1200 	strd	r1, r2, [r4]
   8b312:	e7d7      	b.n	8b2c4 <__swsetup_r+0x70>
   8b314:	2209      	movs	r2, #9
   8b316:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b31a:	602a      	str	r2, [r5, #0]
   8b31c:	f04f 30ff 	mov.w	r0, #4294967295
   8b320:	81a3      	strh	r3, [r4, #12]
   8b322:	bd38      	pop	{r3, r4, r5, pc}
   8b324:	20070b30 	.word	0x20070b30

0008b328 <abort>:
   8b328:	2006      	movs	r0, #6
   8b32a:	b508      	push	{r3, lr}
   8b32c:	f000 fbec 	bl	8bb08 <raise>
   8b330:	2001      	movs	r0, #1
   8b332:	f7f8 fccb 	bl	83ccc <_exit>
   8b336:	bf00      	nop

0008b338 <__sflush_r>:
   8b338:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
   8b33c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8b33e:	460c      	mov	r4, r1
   8b340:	0711      	lsls	r1, r2, #28
   8b342:	4607      	mov	r7, r0
   8b344:	d443      	bmi.n	8b3ce <__sflush_r+0x96>
   8b346:	6863      	ldr	r3, [r4, #4]
   8b348:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   8b34c:	2b00      	cmp	r3, #0
   8b34e:	81a2      	strh	r2, [r4, #12]
   8b350:	dd5b      	ble.n	8b40a <__sflush_r+0xd2>
   8b352:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   8b354:	2d00      	cmp	r5, #0
   8b356:	d056      	beq.n	8b406 <__sflush_r+0xce>
   8b358:	2300      	movs	r3, #0
   8b35a:	683e      	ldr	r6, [r7, #0]
   8b35c:	603b      	str	r3, [r7, #0]
   8b35e:	b293      	uxth	r3, r2
   8b360:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
   8b364:	d155      	bne.n	8b412 <__sflush_r+0xda>
   8b366:	2301      	movs	r3, #1
   8b368:	4638      	mov	r0, r7
   8b36a:	69e1      	ldr	r1, [r4, #28]
   8b36c:	47a8      	blx	r5
   8b36e:	1c42      	adds	r2, r0, #1
   8b370:	d065      	beq.n	8b43e <__sflush_r+0x106>
   8b372:	89a3      	ldrh	r3, [r4, #12]
   8b374:	6aa5      	ldr	r5, [r4, #40]	; 0x28
   8b376:	075b      	lsls	r3, r3, #29
   8b378:	d505      	bpl.n	8b386 <__sflush_r+0x4e>
   8b37a:	6863      	ldr	r3, [r4, #4]
   8b37c:	1ac0      	subs	r0, r0, r3
   8b37e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   8b380:	b10b      	cbz	r3, 8b386 <__sflush_r+0x4e>
   8b382:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8b384:	1ac0      	subs	r0, r0, r3
   8b386:	4602      	mov	r2, r0
   8b388:	69e1      	ldr	r1, [r4, #28]
   8b38a:	2300      	movs	r3, #0
   8b38c:	4638      	mov	r0, r7
   8b38e:	47a8      	blx	r5
   8b390:	1c41      	adds	r1, r0, #1
   8b392:	d140      	bne.n	8b416 <__sflush_r+0xde>
   8b394:	683b      	ldr	r3, [r7, #0]
   8b396:	2b00      	cmp	r3, #0
   8b398:	d03d      	beq.n	8b416 <__sflush_r+0xde>
   8b39a:	2b1d      	cmp	r3, #29
   8b39c:	d001      	beq.n	8b3a2 <__sflush_r+0x6a>
   8b39e:	2b16      	cmp	r3, #22
   8b3a0:	d154      	bne.n	8b44c <__sflush_r+0x114>
   8b3a2:	2200      	movs	r2, #0
   8b3a4:	89a3      	ldrh	r3, [r4, #12]
   8b3a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8b3aa:	81a3      	strh	r3, [r4, #12]
   8b3ac:	6923      	ldr	r3, [r4, #16]
   8b3ae:	e9c4 3200 	strd	r3, r2, [r4]
   8b3b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8b3b4:	603e      	str	r6, [r7, #0]
   8b3b6:	b331      	cbz	r1, 8b406 <__sflush_r+0xce>
   8b3b8:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8b3bc:	4299      	cmp	r1, r3
   8b3be:	d002      	beq.n	8b3c6 <__sflush_r+0x8e>
   8b3c0:	4638      	mov	r0, r7
   8b3c2:	f7fd fc35 	bl	88c30 <_free_r>
   8b3c6:	2300      	movs	r3, #0
   8b3c8:	4618      	mov	r0, r3
   8b3ca:	6323      	str	r3, [r4, #48]	; 0x30
   8b3cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b3ce:	6926      	ldr	r6, [r4, #16]
   8b3d0:	b1ce      	cbz	r6, 8b406 <__sflush_r+0xce>
   8b3d2:	b293      	uxth	r3, r2
   8b3d4:	079a      	lsls	r2, r3, #30
   8b3d6:	bf18      	it	ne
   8b3d8:	2300      	movne	r3, #0
   8b3da:	6825      	ldr	r5, [r4, #0]
   8b3dc:	bf08      	it	eq
   8b3de:	6963      	ldreq	r3, [r4, #20]
   8b3e0:	6026      	str	r6, [r4, #0]
   8b3e2:	1bad      	subs	r5, r5, r6
   8b3e4:	60a3      	str	r3, [r4, #8]
   8b3e6:	e00c      	b.n	8b402 <__sflush_r+0xca>
   8b3e8:	462b      	mov	r3, r5
   8b3ea:	4632      	mov	r2, r6
   8b3ec:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8b3f0:	4638      	mov	r0, r7
   8b3f2:	69e1      	ldr	r1, [r4, #28]
   8b3f4:	47e0      	blx	ip
   8b3f6:	f1b0 0c00 	subs.w	ip, r0, #0
   8b3fa:	eba5 050c 	sub.w	r5, r5, ip
   8b3fe:	4466      	add	r6, ip
   8b400:	dd16      	ble.n	8b430 <__sflush_r+0xf8>
   8b402:	2d00      	cmp	r5, #0
   8b404:	dcf0      	bgt.n	8b3e8 <__sflush_r+0xb0>
   8b406:	2000      	movs	r0, #0
   8b408:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b40a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   8b40c:	2b00      	cmp	r3, #0
   8b40e:	dca0      	bgt.n	8b352 <__sflush_r+0x1a>
   8b410:	e7f9      	b.n	8b406 <__sflush_r+0xce>
   8b412:	6d20      	ldr	r0, [r4, #80]	; 0x50
   8b414:	e7af      	b.n	8b376 <__sflush_r+0x3e>
   8b416:	2200      	movs	r2, #0
   8b418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b41c:	6062      	str	r2, [r4, #4]
   8b41e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   8b422:	6922      	ldr	r2, [r4, #16]
   8b424:	81a3      	strh	r3, [r4, #12]
   8b426:	04db      	lsls	r3, r3, #19
   8b428:	6022      	str	r2, [r4, #0]
   8b42a:	d5c2      	bpl.n	8b3b2 <__sflush_r+0x7a>
   8b42c:	6520      	str	r0, [r4, #80]	; 0x50
   8b42e:	e7c0      	b.n	8b3b2 <__sflush_r+0x7a>
   8b430:	89a3      	ldrh	r3, [r4, #12]
   8b432:	f04f 30ff 	mov.w	r0, #4294967295
   8b436:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b43a:	81a3      	strh	r3, [r4, #12]
   8b43c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b43e:	683b      	ldr	r3, [r7, #0]
   8b440:	2b00      	cmp	r3, #0
   8b442:	d096      	beq.n	8b372 <__sflush_r+0x3a>
   8b444:	2b1d      	cmp	r3, #29
   8b446:	d006      	beq.n	8b456 <__sflush_r+0x11e>
   8b448:	2b16      	cmp	r3, #22
   8b44a:	d004      	beq.n	8b456 <__sflush_r+0x11e>
   8b44c:	89a3      	ldrh	r3, [r4, #12]
   8b44e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b452:	81a3      	strh	r3, [r4, #12]
   8b454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8b456:	2000      	movs	r0, #0
   8b458:	603e      	str	r6, [r7, #0]
   8b45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0008b45c <_fflush_r>:
   8b45c:	b538      	push	{r3, r4, r5, lr}
   8b45e:	4605      	mov	r5, r0
   8b460:	460c      	mov	r4, r1
   8b462:	b108      	cbz	r0, 8b468 <_fflush_r+0xc>
   8b464:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8b466:	b1a3      	cbz	r3, 8b492 <_fflush_r+0x36>
   8b468:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8b46c:	b1b8      	cbz	r0, 8b49e <_fflush_r+0x42>
   8b46e:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b470:	07db      	lsls	r3, r3, #31
   8b472:	d401      	bmi.n	8b478 <_fflush_r+0x1c>
   8b474:	0581      	lsls	r1, r0, #22
   8b476:	d515      	bpl.n	8b4a4 <_fflush_r+0x48>
   8b478:	4628      	mov	r0, r5
   8b47a:	4621      	mov	r1, r4
   8b47c:	f7ff ff5c 	bl	8b338 <__sflush_r>
   8b480:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b482:	4605      	mov	r5, r0
   8b484:	07da      	lsls	r2, r3, #31
   8b486:	d402      	bmi.n	8b48e <_fflush_r+0x32>
   8b488:	89a3      	ldrh	r3, [r4, #12]
   8b48a:	059b      	lsls	r3, r3, #22
   8b48c:	d50e      	bpl.n	8b4ac <_fflush_r+0x50>
   8b48e:	4628      	mov	r0, r5
   8b490:	bd38      	pop	{r3, r4, r5, pc}
   8b492:	f000 f817 	bl	8b4c4 <__sinit>
   8b496:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8b49a:	2800      	cmp	r0, #0
   8b49c:	d1e7      	bne.n	8b46e <_fflush_r+0x12>
   8b49e:	4605      	mov	r5, r0
   8b4a0:	4628      	mov	r0, r5
   8b4a2:	bd38      	pop	{r3, r4, r5, pc}
   8b4a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b4a6:	f7fd fccb 	bl	88e40 <__retarget_lock_acquire_recursive>
   8b4aa:	e7e5      	b.n	8b478 <_fflush_r+0x1c>
   8b4ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b4ae:	f7fd fcc9 	bl	88e44 <__retarget_lock_release_recursive>
   8b4b2:	4628      	mov	r0, r5
   8b4b4:	bd38      	pop	{r3, r4, r5, pc}
   8b4b6:	bf00      	nop

0008b4b8 <_cleanup_r>:
   8b4b8:	4901      	ldr	r1, [pc, #4]	; (8b4c0 <_cleanup_r+0x8>)
   8b4ba:	f000 ba91 	b.w	8b9e0 <_fwalk_reent>
   8b4be:	bf00      	nop
   8b4c0:	0008bd59 	.word	0x0008bd59

0008b4c4 <__sinit>:
   8b4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b4c8:	4682      	mov	sl, r0
   8b4ca:	4839      	ldr	r0, [pc, #228]	; (8b5b0 <__sinit+0xec>)
   8b4cc:	f7fd fcb8 	bl	88e40 <__retarget_lock_acquire_recursive>
   8b4d0:	f8da 4038 	ldr.w	r4, [sl, #56]	; 0x38
   8b4d4:	2c00      	cmp	r4, #0
   8b4d6:	d166      	bne.n	8b5a6 <__sinit+0xe2>
   8b4d8:	2304      	movs	r3, #4
   8b4da:	2203      	movs	r2, #3
   8b4dc:	4935      	ldr	r1, [pc, #212]	; (8b5b4 <__sinit+0xf0>)
   8b4de:	f8da 5004 	ldr.w	r5, [sl, #4]
   8b4e2:	f8ca 103c 	str.w	r1, [sl, #60]	; 0x3c
   8b4e6:	f8df 90d0 	ldr.w	r9, [pc, #208]	; 8b5b8 <__sinit+0xf4>
   8b4ea:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8b5bc <__sinit+0xf8>
   8b4ee:	4f34      	ldr	r7, [pc, #208]	; (8b5c0 <__sinit+0xfc>)
   8b4f0:	4e34      	ldr	r6, [pc, #208]	; (8b5c4 <__sinit+0x100>)
   8b4f2:	f50a 713b 	add.w	r1, sl, #748	; 0x2ec
   8b4f6:	e9ca 21b9 	strd	r2, r1, [sl, #740]	; 0x2e4
   8b4fa:	f8ca 42e0 	str.w	r4, [sl, #736]	; 0x2e0
   8b4fe:	4621      	mov	r1, r4
   8b500:	60eb      	str	r3, [r5, #12]
   8b502:	2208      	movs	r2, #8
   8b504:	e9c5 4400 	strd	r4, r4, [r5]
   8b508:	e9c5 4404 	strd	r4, r4, [r5, #16]
   8b50c:	666c      	str	r4, [r5, #100]	; 0x64
   8b50e:	60ac      	str	r4, [r5, #8]
   8b510:	61ac      	str	r4, [r5, #24]
   8b512:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8b516:	f7fa fcef 	bl	85ef8 <memset>
   8b51a:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8b51e:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   8b522:	62ee      	str	r6, [r5, #44]	; 0x2c
   8b524:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8b528:	f7fd fc86 	bl	88e38 <__retarget_lock_init_recursive>
   8b52c:	f8da 5008 	ldr.w	r5, [sl, #8]
   8b530:	4b25      	ldr	r3, [pc, #148]	; (8b5c8 <__sinit+0x104>)
   8b532:	4621      	mov	r1, r4
   8b534:	60eb      	str	r3, [r5, #12]
   8b536:	2208      	movs	r2, #8
   8b538:	e9c5 4400 	strd	r4, r4, [r5]
   8b53c:	e9c5 4404 	strd	r4, r4, [r5, #16]
   8b540:	666c      	str	r4, [r5, #100]	; 0x64
   8b542:	60ac      	str	r4, [r5, #8]
   8b544:	61ac      	str	r4, [r5, #24]
   8b546:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8b54a:	f7fa fcd5 	bl	85ef8 <memset>
   8b54e:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8b552:	e9c5 8709 	strd	r8, r7, [r5, #36]	; 0x24
   8b556:	62ee      	str	r6, [r5, #44]	; 0x2c
   8b558:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8b55c:	f7fd fc6c 	bl	88e38 <__retarget_lock_init_recursive>
   8b560:	f8da 500c 	ldr.w	r5, [sl, #12]
   8b564:	4b19      	ldr	r3, [pc, #100]	; (8b5cc <__sinit+0x108>)
   8b566:	4621      	mov	r1, r4
   8b568:	60eb      	str	r3, [r5, #12]
   8b56a:	2208      	movs	r2, #8
   8b56c:	e9c5 4400 	strd	r4, r4, [r5]
   8b570:	e9c5 4404 	strd	r4, r4, [r5, #16]
   8b574:	666c      	str	r4, [r5, #100]	; 0x64
   8b576:	60ac      	str	r4, [r5, #8]
   8b578:	61ac      	str	r4, [r5, #24]
   8b57a:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   8b57e:	f7fa fcbb 	bl	85ef8 <memset>
   8b582:	f105 0058 	add.w	r0, r5, #88	; 0x58
   8b586:	e9c5 5907 	strd	r5, r9, [r5, #28]
   8b58a:	e9c5 760a 	strd	r7, r6, [r5, #40]	; 0x28
   8b58e:	f8c5 8024 	str.w	r8, [r5, #36]	; 0x24
   8b592:	f7fd fc51 	bl	88e38 <__retarget_lock_init_recursive>
   8b596:	2301      	movs	r3, #1
   8b598:	4805      	ldr	r0, [pc, #20]	; (8b5b0 <__sinit+0xec>)
   8b59a:	f8ca 3038 	str.w	r3, [sl, #56]	; 0x38
   8b59e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b5a2:	f7fd bc4f 	b.w	88e44 <__retarget_lock_release_recursive>
   8b5a6:	4802      	ldr	r0, [pc, #8]	; (8b5b0 <__sinit+0xec>)
   8b5a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8b5ac:	f7fd bc4a 	b.w	88e44 <__retarget_lock_release_recursive>
   8b5b0:	2007331c 	.word	0x2007331c
   8b5b4:	0008b4b9 	.word	0x0008b4b9
   8b5b8:	0008bb91 	.word	0x0008bb91
   8b5bc:	0008bbb5 	.word	0x0008bbb5
   8b5c0:	0008bbf5 	.word	0x0008bbf5
   8b5c4:	0008bc15 	.word	0x0008bc15
   8b5c8:	00010009 	.word	0x00010009
   8b5cc:	00020012 	.word	0x00020012

0008b5d0 <__sfp_lock_acquire>:
   8b5d0:	4801      	ldr	r0, [pc, #4]	; (8b5d8 <__sfp_lock_acquire+0x8>)
   8b5d2:	f7fd bc35 	b.w	88e40 <__retarget_lock_acquire_recursive>
   8b5d6:	bf00      	nop
   8b5d8:	20073318 	.word	0x20073318

0008b5dc <__sfp_lock_release>:
   8b5dc:	4801      	ldr	r0, [pc, #4]	; (8b5e4 <__sfp_lock_release+0x8>)
   8b5de:	f7fd bc31 	b.w	88e44 <__retarget_lock_release_recursive>
   8b5e2:	bf00      	nop
   8b5e4:	20073318 	.word	0x20073318

0008b5e8 <__fputwc>:
   8b5e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   8b5ec:	b083      	sub	sp, #12
   8b5ee:	4607      	mov	r7, r0
   8b5f0:	4688      	mov	r8, r1
   8b5f2:	4614      	mov	r4, r2
   8b5f4:	f7fe fc50 	bl	89e98 <__locale_mb_cur_max>
   8b5f8:	2801      	cmp	r0, #1
   8b5fa:	d103      	bne.n	8b604 <__fputwc+0x1c>
   8b5fc:	f108 33ff 	add.w	r3, r8, #4294967295
   8b600:	2bfe      	cmp	r3, #254	; 0xfe
   8b602:	d933      	bls.n	8b66c <__fputwc+0x84>
   8b604:	4642      	mov	r2, r8
   8b606:	4638      	mov	r0, r7
   8b608:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   8b60c:	a901      	add	r1, sp, #4
   8b60e:	f000 fb5d 	bl	8bccc <_wcrtomb_r>
   8b612:	1c42      	adds	r2, r0, #1
   8b614:	4606      	mov	r6, r0
   8b616:	d02f      	beq.n	8b678 <__fputwc+0x90>
   8b618:	b318      	cbz	r0, 8b662 <__fputwc+0x7a>
   8b61a:	f89d 1004 	ldrb.w	r1, [sp, #4]
   8b61e:	2500      	movs	r5, #0
   8b620:	f10d 0905 	add.w	r9, sp, #5
   8b624:	e008      	b.n	8b638 <__fputwc+0x50>
   8b626:	6823      	ldr	r3, [r4, #0]
   8b628:	1c5a      	adds	r2, r3, #1
   8b62a:	6022      	str	r2, [r4, #0]
   8b62c:	7019      	strb	r1, [r3, #0]
   8b62e:	3501      	adds	r5, #1
   8b630:	42b5      	cmp	r5, r6
   8b632:	d216      	bcs.n	8b662 <__fputwc+0x7a>
   8b634:	f819 1b01 	ldrb.w	r1, [r9], #1
   8b638:	68a3      	ldr	r3, [r4, #8]
   8b63a:	3b01      	subs	r3, #1
   8b63c:	2b00      	cmp	r3, #0
   8b63e:	60a3      	str	r3, [r4, #8]
   8b640:	daf1      	bge.n	8b626 <__fputwc+0x3e>
   8b642:	69a2      	ldr	r2, [r4, #24]
   8b644:	4293      	cmp	r3, r2
   8b646:	db01      	blt.n	8b64c <__fputwc+0x64>
   8b648:	290a      	cmp	r1, #10
   8b64a:	d1ec      	bne.n	8b626 <__fputwc+0x3e>
   8b64c:	4622      	mov	r2, r4
   8b64e:	4638      	mov	r0, r7
   8b650:	f000 fae4 	bl	8bc1c <__swbuf_r>
   8b654:	1c43      	adds	r3, r0, #1
   8b656:	d1ea      	bne.n	8b62e <__fputwc+0x46>
   8b658:	4606      	mov	r6, r0
   8b65a:	4630      	mov	r0, r6
   8b65c:	b003      	add	sp, #12
   8b65e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8b662:	4646      	mov	r6, r8
   8b664:	4630      	mov	r0, r6
   8b666:	b003      	add	sp, #12
   8b668:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   8b66c:	fa5f f188 	uxtb.w	r1, r8
   8b670:	4606      	mov	r6, r0
   8b672:	f88d 1004 	strb.w	r1, [sp, #4]
   8b676:	e7d2      	b.n	8b61e <__fputwc+0x36>
   8b678:	4630      	mov	r0, r6
   8b67a:	89a3      	ldrh	r3, [r4, #12]
   8b67c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b680:	81a3      	strh	r3, [r4, #12]
   8b682:	b003      	add	sp, #12
   8b684:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0008b688 <_fputwc_r>:
   8b688:	b530      	push	{r4, r5, lr}
   8b68a:	6e53      	ldr	r3, [r2, #100]	; 0x64
   8b68c:	4614      	mov	r4, r2
   8b68e:	f013 0f01 	tst.w	r3, #1
   8b692:	f9b2 300c 	ldrsh.w	r3, [r2, #12]
   8b696:	4605      	mov	r5, r0
   8b698:	b083      	sub	sp, #12
   8b69a:	b29a      	uxth	r2, r3
   8b69c:	d101      	bne.n	8b6a2 <_fputwc_r+0x1a>
   8b69e:	0598      	lsls	r0, r3, #22
   8b6a0:	d51c      	bpl.n	8b6dc <_fputwc_r+0x54>
   8b6a2:	0490      	lsls	r0, r2, #18
   8b6a4:	d406      	bmi.n	8b6b4 <_fputwc_r+0x2c>
   8b6a6:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8b6a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   8b6ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8b6b0:	81a3      	strh	r3, [r4, #12]
   8b6b2:	6662      	str	r2, [r4, #100]	; 0x64
   8b6b4:	4622      	mov	r2, r4
   8b6b6:	4628      	mov	r0, r5
   8b6b8:	f7ff ff96 	bl	8b5e8 <__fputwc>
   8b6bc:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8b6be:	4605      	mov	r5, r0
   8b6c0:	07da      	lsls	r2, r3, #31
   8b6c2:	d402      	bmi.n	8b6ca <_fputwc_r+0x42>
   8b6c4:	89a3      	ldrh	r3, [r4, #12]
   8b6c6:	059b      	lsls	r3, r3, #22
   8b6c8:	d502      	bpl.n	8b6d0 <_fputwc_r+0x48>
   8b6ca:	4628      	mov	r0, r5
   8b6cc:	b003      	add	sp, #12
   8b6ce:	bd30      	pop	{r4, r5, pc}
   8b6d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b6d2:	f7fd fbb7 	bl	88e44 <__retarget_lock_release_recursive>
   8b6d6:	4628      	mov	r0, r5
   8b6d8:	b003      	add	sp, #12
   8b6da:	bd30      	pop	{r4, r5, pc}
   8b6dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8b6de:	9101      	str	r1, [sp, #4]
   8b6e0:	f7fd fbae 	bl	88e40 <__retarget_lock_acquire_recursive>
   8b6e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b6e8:	9901      	ldr	r1, [sp, #4]
   8b6ea:	b29a      	uxth	r2, r3
   8b6ec:	e7d9      	b.n	8b6a2 <_fputwc_r+0x1a>
   8b6ee:	bf00      	nop

0008b6f0 <__sfvwrite_r>:
   8b6f0:	6893      	ldr	r3, [r2, #8]
   8b6f2:	2b00      	cmp	r3, #0
   8b6f4:	f000 80b7 	beq.w	8b866 <__sfvwrite_r+0x176>
   8b6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8b6fc:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
   8b700:	460c      	mov	r4, r1
   8b702:	0719      	lsls	r1, r3, #28
   8b704:	4680      	mov	r8, r0
   8b706:	4617      	mov	r7, r2
   8b708:	b083      	sub	sp, #12
   8b70a:	b298      	uxth	r0, r3
   8b70c:	d525      	bpl.n	8b75a <__sfvwrite_r+0x6a>
   8b70e:	6923      	ldr	r3, [r4, #16]
   8b710:	b31b      	cbz	r3, 8b75a <__sfvwrite_r+0x6a>
   8b712:	f010 0302 	ands.w	r3, r0, #2
   8b716:	683d      	ldr	r5, [r7, #0]
   8b718:	d02d      	beq.n	8b776 <__sfvwrite_r+0x86>
   8b71a:	f04f 0b00 	mov.w	fp, #0
   8b71e:	465e      	mov	r6, fp
   8b720:	f8df a2b8 	ldr.w	sl, [pc, #696]	; 8b9dc <__sfvwrite_r+0x2ec>
   8b724:	2e00      	cmp	r6, #0
   8b726:	f000 808b 	beq.w	8b840 <__sfvwrite_r+0x150>
   8b72a:	4556      	cmp	r6, sl
   8b72c:	4633      	mov	r3, r6
   8b72e:	465a      	mov	r2, fp
   8b730:	bf28      	it	cs
   8b732:	4653      	movcs	r3, sl
   8b734:	4640      	mov	r0, r8
   8b736:	69e1      	ldr	r1, [r4, #28]
   8b738:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8b73c:	47e0      	blx	ip
   8b73e:	2800      	cmp	r0, #0
   8b740:	f340 8087 	ble.w	8b852 <__sfvwrite_r+0x162>
   8b744:	68bb      	ldr	r3, [r7, #8]
   8b746:	4483      	add	fp, r0
   8b748:	1a1b      	subs	r3, r3, r0
   8b74a:	1a36      	subs	r6, r6, r0
   8b74c:	60bb      	str	r3, [r7, #8]
   8b74e:	2b00      	cmp	r3, #0
   8b750:	d1e8      	bne.n	8b724 <__sfvwrite_r+0x34>
   8b752:	2000      	movs	r0, #0
   8b754:	b003      	add	sp, #12
   8b756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b75a:	4621      	mov	r1, r4
   8b75c:	4640      	mov	r0, r8
   8b75e:	f7ff fd79 	bl	8b254 <__swsetup_r>
   8b762:	2800      	cmp	r0, #0
   8b764:	f040 8136 	bne.w	8b9d4 <__sfvwrite_r+0x2e4>
   8b768:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b76c:	683d      	ldr	r5, [r7, #0]
   8b76e:	b298      	uxth	r0, r3
   8b770:	f010 0302 	ands.w	r3, r0, #2
   8b774:	d1d1      	bne.n	8b71a <__sfvwrite_r+0x2a>
   8b776:	f010 0901 	ands.w	r9, r0, #1
   8b77a:	d176      	bne.n	8b86a <__sfvwrite_r+0x17a>
   8b77c:	464e      	mov	r6, r9
   8b77e:	2e00      	cmp	r6, #0
   8b780:	d05a      	beq.n	8b838 <__sfvwrite_r+0x148>
   8b782:	0582      	lsls	r2, r0, #22
   8b784:	f8d4 b008 	ldr.w	fp, [r4, #8]
   8b788:	f140 80b5 	bpl.w	8b8f6 <__sfvwrite_r+0x206>
   8b78c:	45b3      	cmp	fp, r6
   8b78e:	465a      	mov	r2, fp
   8b790:	f200 80cd 	bhi.w	8b92e <__sfvwrite_r+0x23e>
   8b794:	f410 6f90 	tst.w	r0, #1152	; 0x480
   8b798:	f000 80cb 	beq.w	8b932 <__sfvwrite_r+0x242>
   8b79c:	6823      	ldr	r3, [r4, #0]
   8b79e:	6921      	ldr	r1, [r4, #16]
   8b7a0:	eba3 0b01 	sub.w	fp, r3, r1
   8b7a4:	6963      	ldr	r3, [r4, #20]
   8b7a6:	eb03 0a43 	add.w	sl, r3, r3, lsl #1
   8b7aa:	eb0a 7ada 	add.w	sl, sl, sl, lsr #31
   8b7ae:	f10b 0301 	add.w	r3, fp, #1
   8b7b2:	ea4f 0a6a 	mov.w	sl, sl, asr #1
   8b7b6:	4433      	add	r3, r6
   8b7b8:	4553      	cmp	r3, sl
   8b7ba:	4652      	mov	r2, sl
   8b7bc:	bf84      	itt	hi
   8b7be:	469a      	movhi	sl, r3
   8b7c0:	4652      	movhi	r2, sl
   8b7c2:	0543      	lsls	r3, r0, #21
   8b7c4:	f140 80ea 	bpl.w	8b99c <__sfvwrite_r+0x2ac>
   8b7c8:	4611      	mov	r1, r2
   8b7ca:	4640      	mov	r0, r8
   8b7cc:	f7fd fb3c 	bl	88e48 <_malloc_r>
   8b7d0:	2800      	cmp	r0, #0
   8b7d2:	f000 80f9 	beq.w	8b9c8 <__sfvwrite_r+0x2d8>
   8b7d6:	465a      	mov	r2, fp
   8b7d8:	6921      	ldr	r1, [r4, #16]
   8b7da:	9001      	str	r0, [sp, #4]
   8b7dc:	f7fa fb16 	bl	85e0c <memcpy>
   8b7e0:	89a2      	ldrh	r2, [r4, #12]
   8b7e2:	9b01      	ldr	r3, [sp, #4]
   8b7e4:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   8b7e8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8b7ec:	81a2      	strh	r2, [r4, #12]
   8b7ee:	eb03 000b 	add.w	r0, r3, fp
   8b7f2:	6123      	str	r3, [r4, #16]
   8b7f4:	4632      	mov	r2, r6
   8b7f6:	ebaa 030b 	sub.w	r3, sl, fp
   8b7fa:	46b3      	mov	fp, r6
   8b7fc:	f8c4 a014 	str.w	sl, [r4, #20]
   8b800:	60a3      	str	r3, [r4, #8]
   8b802:	6020      	str	r0, [r4, #0]
   8b804:	46b2      	mov	sl, r6
   8b806:	2600      	movs	r6, #0
   8b808:	4649      	mov	r1, r9
   8b80a:	9201      	str	r2, [sp, #4]
   8b80c:	f7fe fb60 	bl	89ed0 <memmove>
   8b810:	68a3      	ldr	r3, [r4, #8]
   8b812:	6821      	ldr	r1, [r4, #0]
   8b814:	9a01      	ldr	r2, [sp, #4]
   8b816:	eba3 030b 	sub.w	r3, r3, fp
   8b81a:	440a      	add	r2, r1
   8b81c:	60a3      	str	r3, [r4, #8]
   8b81e:	6022      	str	r2, [r4, #0]
   8b820:	68b8      	ldr	r0, [r7, #8]
   8b822:	44d1      	add	r9, sl
   8b824:	eba0 000a 	sub.w	r0, r0, sl
   8b828:	60b8      	str	r0, [r7, #8]
   8b82a:	2800      	cmp	r0, #0
   8b82c:	d091      	beq.n	8b752 <__sfvwrite_r+0x62>
   8b82e:	f9b4 000c 	ldrsh.w	r0, [r4, #12]
   8b832:	b280      	uxth	r0, r0
   8b834:	2e00      	cmp	r6, #0
   8b836:	d1a4      	bne.n	8b782 <__sfvwrite_r+0x92>
   8b838:	e9d5 9600 	ldrd	r9, r6, [r5]
   8b83c:	3508      	adds	r5, #8
   8b83e:	e79e      	b.n	8b77e <__sfvwrite_r+0x8e>
   8b840:	e9d5 b600 	ldrd	fp, r6, [r5]
   8b844:	3508      	adds	r5, #8
   8b846:	e76d      	b.n	8b724 <__sfvwrite_r+0x34>
   8b848:	4621      	mov	r1, r4
   8b84a:	4640      	mov	r0, r8
   8b84c:	f7ff fe06 	bl	8b45c <_fflush_r>
   8b850:	b380      	cbz	r0, 8b8b4 <__sfvwrite_r+0x1c4>
   8b852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b856:	f04f 30ff 	mov.w	r0, #4294967295
   8b85a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   8b85e:	81a3      	strh	r3, [r4, #12]
   8b860:	b003      	add	sp, #12
   8b862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8b866:	2000      	movs	r0, #0
   8b868:	4770      	bx	lr
   8b86a:	461e      	mov	r6, r3
   8b86c:	46aa      	mov	sl, r5
   8b86e:	4699      	mov	r9, r3
   8b870:	4618      	mov	r0, r3
   8b872:	461d      	mov	r5, r3
   8b874:	b356      	cbz	r6, 8b8cc <__sfvwrite_r+0x1dc>
   8b876:	2800      	cmp	r0, #0
   8b878:	d032      	beq.n	8b8e0 <__sfvwrite_r+0x1f0>
   8b87a:	464a      	mov	r2, r9
   8b87c:	6820      	ldr	r0, [r4, #0]
   8b87e:	6921      	ldr	r1, [r4, #16]
   8b880:	42b2      	cmp	r2, r6
   8b882:	bf28      	it	cs
   8b884:	4632      	movcs	r2, r6
   8b886:	4288      	cmp	r0, r1
   8b888:	6963      	ldr	r3, [r4, #20]
   8b88a:	d904      	bls.n	8b896 <__sfvwrite_r+0x1a6>
   8b88c:	68a1      	ldr	r1, [r4, #8]
   8b88e:	eb03 0b01 	add.w	fp, r3, r1
   8b892:	455a      	cmp	r2, fp
   8b894:	dc74      	bgt.n	8b980 <__sfvwrite_r+0x290>
   8b896:	4293      	cmp	r3, r2
   8b898:	dc65      	bgt.n	8b966 <__sfvwrite_r+0x276>
   8b89a:	462a      	mov	r2, r5
   8b89c:	4640      	mov	r0, r8
   8b89e:	69e1      	ldr	r1, [r4, #28]
   8b8a0:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8b8a4:	47e0      	blx	ip
   8b8a6:	f1b0 0b00 	subs.w	fp, r0, #0
   8b8aa:	ddd2      	ble.n	8b852 <__sfvwrite_r+0x162>
   8b8ac:	ebb9 090b 	subs.w	r9, r9, fp
   8b8b0:	d0ca      	beq.n	8b848 <__sfvwrite_r+0x158>
   8b8b2:	2001      	movs	r0, #1
   8b8b4:	68bb      	ldr	r3, [r7, #8]
   8b8b6:	445d      	add	r5, fp
   8b8b8:	eba3 030b 	sub.w	r3, r3, fp
   8b8bc:	eba6 060b 	sub.w	r6, r6, fp
   8b8c0:	60bb      	str	r3, [r7, #8]
   8b8c2:	2b00      	cmp	r3, #0
   8b8c4:	f43f af45 	beq.w	8b752 <__sfvwrite_r+0x62>
   8b8c8:	2e00      	cmp	r6, #0
   8b8ca:	d1d4      	bne.n	8b876 <__sfvwrite_r+0x186>
   8b8cc:	f10a 0308 	add.w	r3, sl, #8
   8b8d0:	f853 6c04 	ldr.w	r6, [r3, #-4]
   8b8d4:	469a      	mov	sl, r3
   8b8d6:	f853 5c08 	ldr.w	r5, [r3, #-8]
   8b8da:	3308      	adds	r3, #8
   8b8dc:	2e00      	cmp	r6, #0
   8b8de:	d0f7      	beq.n	8b8d0 <__sfvwrite_r+0x1e0>
   8b8e0:	4632      	mov	r2, r6
   8b8e2:	210a      	movs	r1, #10
   8b8e4:	4628      	mov	r0, r5
   8b8e6:	f7fd fd5b 	bl	893a0 <memchr>
   8b8ea:	2800      	cmp	r0, #0
   8b8ec:	d069      	beq.n	8b9c2 <__sfvwrite_r+0x2d2>
   8b8ee:	3001      	adds	r0, #1
   8b8f0:	eba0 0905 	sub.w	r9, r0, r5
   8b8f4:	e7c1      	b.n	8b87a <__sfvwrite_r+0x18a>
   8b8f6:	6820      	ldr	r0, [r4, #0]
   8b8f8:	6923      	ldr	r3, [r4, #16]
   8b8fa:	4298      	cmp	r0, r3
   8b8fc:	d81b      	bhi.n	8b936 <__sfvwrite_r+0x246>
   8b8fe:	6963      	ldr	r3, [r4, #20]
   8b900:	42b3      	cmp	r3, r6
   8b902:	d818      	bhi.n	8b936 <__sfvwrite_r+0x246>
   8b904:	f06f 4c00 	mvn.w	ip, #2147483648	; 0x80000000
   8b908:	45b4      	cmp	ip, r6
   8b90a:	bf28      	it	cs
   8b90c:	46b4      	movcs	ip, r6
   8b90e:	fb9c fcf3 	sdiv	ip, ip, r3
   8b912:	464a      	mov	r2, r9
   8b914:	fb03 f30c 	mul.w	r3, r3, ip
   8b918:	4640      	mov	r0, r8
   8b91a:	69e1      	ldr	r1, [r4, #28]
   8b91c:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
   8b920:	47e0      	blx	ip
   8b922:	f1b0 0a00 	subs.w	sl, r0, #0
   8b926:	dd94      	ble.n	8b852 <__sfvwrite_r+0x162>
   8b928:	eba6 060a 	sub.w	r6, r6, sl
   8b92c:	e778      	b.n	8b820 <__sfvwrite_r+0x130>
   8b92e:	46b3      	mov	fp, r6
   8b930:	4632      	mov	r2, r6
   8b932:	6820      	ldr	r0, [r4, #0]
   8b934:	e766      	b.n	8b804 <__sfvwrite_r+0x114>
   8b936:	45b3      	cmp	fp, r6
   8b938:	46da      	mov	sl, fp
   8b93a:	bf28      	it	cs
   8b93c:	46b2      	movcs	sl, r6
   8b93e:	4649      	mov	r1, r9
   8b940:	4652      	mov	r2, sl
   8b942:	f7fe fac5 	bl	89ed0 <memmove>
   8b946:	68a3      	ldr	r3, [r4, #8]
   8b948:	6822      	ldr	r2, [r4, #0]
   8b94a:	eba3 030a 	sub.w	r3, r3, sl
   8b94e:	4452      	add	r2, sl
   8b950:	60a3      	str	r3, [r4, #8]
   8b952:	6022      	str	r2, [r4, #0]
   8b954:	2b00      	cmp	r3, #0
   8b956:	d1e7      	bne.n	8b928 <__sfvwrite_r+0x238>
   8b958:	4621      	mov	r1, r4
   8b95a:	4640      	mov	r0, r8
   8b95c:	f7ff fd7e 	bl	8b45c <_fflush_r>
   8b960:	2800      	cmp	r0, #0
   8b962:	d0e1      	beq.n	8b928 <__sfvwrite_r+0x238>
   8b964:	e775      	b.n	8b852 <__sfvwrite_r+0x162>
   8b966:	4629      	mov	r1, r5
   8b968:	4693      	mov	fp, r2
   8b96a:	9201      	str	r2, [sp, #4]
   8b96c:	f7fe fab0 	bl	89ed0 <memmove>
   8b970:	68a3      	ldr	r3, [r4, #8]
   8b972:	9a01      	ldr	r2, [sp, #4]
   8b974:	1a9b      	subs	r3, r3, r2
   8b976:	60a3      	str	r3, [r4, #8]
   8b978:	6823      	ldr	r3, [r4, #0]
   8b97a:	441a      	add	r2, r3
   8b97c:	6022      	str	r2, [r4, #0]
   8b97e:	e795      	b.n	8b8ac <__sfvwrite_r+0x1bc>
   8b980:	4629      	mov	r1, r5
   8b982:	465a      	mov	r2, fp
   8b984:	f7fe faa4 	bl	89ed0 <memmove>
   8b988:	6823      	ldr	r3, [r4, #0]
   8b98a:	4621      	mov	r1, r4
   8b98c:	445b      	add	r3, fp
   8b98e:	4640      	mov	r0, r8
   8b990:	6023      	str	r3, [r4, #0]
   8b992:	f7ff fd63 	bl	8b45c <_fflush_r>
   8b996:	2800      	cmp	r0, #0
   8b998:	d088      	beq.n	8b8ac <__sfvwrite_r+0x1bc>
   8b99a:	e75a      	b.n	8b852 <__sfvwrite_r+0x162>
   8b99c:	4640      	mov	r0, r8
   8b99e:	f7fe fb13 	bl	89fc8 <_realloc_r>
   8b9a2:	4603      	mov	r3, r0
   8b9a4:	2800      	cmp	r0, #0
   8b9a6:	f47f af22 	bne.w	8b7ee <__sfvwrite_r+0xfe>
   8b9aa:	4640      	mov	r0, r8
   8b9ac:	6921      	ldr	r1, [r4, #16]
   8b9ae:	f7fd f93f 	bl	88c30 <_free_r>
   8b9b2:	220c      	movs	r2, #12
   8b9b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b9b8:	f8c8 2000 	str.w	r2, [r8]
   8b9bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   8b9c0:	e749      	b.n	8b856 <__sfvwrite_r+0x166>
   8b9c2:	1c72      	adds	r2, r6, #1
   8b9c4:	4691      	mov	r9, r2
   8b9c6:	e759      	b.n	8b87c <__sfvwrite_r+0x18c>
   8b9c8:	220c      	movs	r2, #12
   8b9ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8b9ce:	f8c8 2000 	str.w	r2, [r8]
   8b9d2:	e740      	b.n	8b856 <__sfvwrite_r+0x166>
   8b9d4:	f04f 30ff 	mov.w	r0, #4294967295
   8b9d8:	e6bc      	b.n	8b754 <__sfvwrite_r+0x64>
   8b9da:	bf00      	nop
   8b9dc:	7ffffc00 	.word	0x7ffffc00

0008b9e0 <_fwalk_reent>:
   8b9e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   8b9e4:	f04f 0900 	mov.w	r9, #0
   8b9e8:	4607      	mov	r7, r0
   8b9ea:	4688      	mov	r8, r1
   8b9ec:	f500 7638 	add.w	r6, r0, #736	; 0x2e0
   8b9f0:	e9d6 5401 	ldrd	r5, r4, [r6, #4]
   8b9f4:	3d01      	subs	r5, #1
   8b9f6:	d410      	bmi.n	8ba1a <_fwalk_reent+0x3a>
   8b9f8:	89a3      	ldrh	r3, [r4, #12]
   8b9fa:	3d01      	subs	r5, #1
   8b9fc:	2b01      	cmp	r3, #1
   8b9fe:	d908      	bls.n	8ba12 <_fwalk_reent+0x32>
   8ba00:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8ba04:	3301      	adds	r3, #1
   8ba06:	d004      	beq.n	8ba12 <_fwalk_reent+0x32>
   8ba08:	4621      	mov	r1, r4
   8ba0a:	4638      	mov	r0, r7
   8ba0c:	47c0      	blx	r8
   8ba0e:	ea49 0900 	orr.w	r9, r9, r0
   8ba12:	1c6b      	adds	r3, r5, #1
   8ba14:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8ba18:	d1ee      	bne.n	8b9f8 <_fwalk_reent+0x18>
   8ba1a:	6836      	ldr	r6, [r6, #0]
   8ba1c:	2e00      	cmp	r6, #0
   8ba1e:	d1e7      	bne.n	8b9f0 <_fwalk_reent+0x10>
   8ba20:	4648      	mov	r0, r9
   8ba22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   8ba26:	bf00      	nop

0008ba28 <__smakebuf_r>:
   8ba28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8ba2c:	898b      	ldrh	r3, [r1, #12]
   8ba2e:	460c      	mov	r4, r1
   8ba30:	0799      	lsls	r1, r3, #30
   8ba32:	b096      	sub	sp, #88	; 0x58
   8ba34:	d508      	bpl.n	8ba48 <__smakebuf_r+0x20>
   8ba36:	2201      	movs	r2, #1
   8ba38:	f104 0343 	add.w	r3, r4, #67	; 0x43
   8ba3c:	e9c4 3204 	strd	r3, r2, [r4, #16]
   8ba40:	6023      	str	r3, [r4, #0]
   8ba42:	b016      	add	sp, #88	; 0x58
   8ba44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8ba48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8ba4c:	4606      	mov	r6, r0
   8ba4e:	2900      	cmp	r1, #0
   8ba50:	db27      	blt.n	8baa2 <__smakebuf_r+0x7a>
   8ba52:	466a      	mov	r2, sp
   8ba54:	f000 f9e6 	bl	8be24 <_fstat_r>
   8ba58:	2800      	cmp	r0, #0
   8ba5a:	db21      	blt.n	8baa0 <__smakebuf_r+0x78>
   8ba5c:	9d01      	ldr	r5, [sp, #4]
   8ba5e:	f44f 6880 	mov.w	r8, #1024	; 0x400
   8ba62:	f405 4570 	and.w	r5, r5, #61440	; 0xf000
   8ba66:	f5a5 5500 	sub.w	r5, r5, #8192	; 0x2000
   8ba6a:	fab5 f585 	clz	r5, r5
   8ba6e:	f44f 6700 	mov.w	r7, #2048	; 0x800
   8ba72:	096d      	lsrs	r5, r5, #5
   8ba74:	4641      	mov	r1, r8
   8ba76:	4630      	mov	r0, r6
   8ba78:	f7fd f9e6 	bl	88e48 <_malloc_r>
   8ba7c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8ba80:	b1f0      	cbz	r0, 8bac0 <__smakebuf_r+0x98>
   8ba82:	4a20      	ldr	r2, [pc, #128]	; (8bb04 <__smakebuf_r+0xdc>)
   8ba84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8ba88:	63f2      	str	r2, [r6, #60]	; 0x3c
   8ba8a:	f8c4 8014 	str.w	r8, [r4, #20]
   8ba8e:	81a3      	strh	r3, [r4, #12]
   8ba90:	6020      	str	r0, [r4, #0]
   8ba92:	6120      	str	r0, [r4, #16]
   8ba94:	bb35      	cbnz	r5, 8bae4 <__smakebuf_r+0xbc>
   8ba96:	433b      	orrs	r3, r7
   8ba98:	81a3      	strh	r3, [r4, #12]
   8ba9a:	b016      	add	sp, #88	; 0x58
   8ba9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8baa0:	89a3      	ldrh	r3, [r4, #12]
   8baa2:	f013 0580 	ands.w	r5, r3, #128	; 0x80
   8baa6:	d019      	beq.n	8badc <__smakebuf_r+0xb4>
   8baa8:	f04f 0840 	mov.w	r8, #64	; 0x40
   8baac:	4630      	mov	r0, r6
   8baae:	4641      	mov	r1, r8
   8bab0:	2500      	movs	r5, #0
   8bab2:	f7fd f9c9 	bl	88e48 <_malloc_r>
   8bab6:	462f      	mov	r7, r5
   8bab8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8babc:	2800      	cmp	r0, #0
   8babe:	d1e0      	bne.n	8ba82 <__smakebuf_r+0x5a>
   8bac0:	059a      	lsls	r2, r3, #22
   8bac2:	d4be      	bmi.n	8ba42 <__smakebuf_r+0x1a>
   8bac4:	2101      	movs	r1, #1
   8bac6:	f023 0303 	bic.w	r3, r3, #3
   8baca:	f104 0243 	add.w	r2, r4, #67	; 0x43
   8bace:	f043 0302 	orr.w	r3, r3, #2
   8bad2:	e9c4 2104 	strd	r2, r1, [r4, #16]
   8bad6:	81a3      	strh	r3, [r4, #12]
   8bad8:	6022      	str	r2, [r4, #0]
   8bada:	e7b2      	b.n	8ba42 <__smakebuf_r+0x1a>
   8badc:	f44f 6880 	mov.w	r8, #1024	; 0x400
   8bae0:	462f      	mov	r7, r5
   8bae2:	e7c7      	b.n	8ba74 <__smakebuf_r+0x4c>
   8bae4:	4630      	mov	r0, r6
   8bae6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8baea:	f000 f9af 	bl	8be4c <_isatty_r>
   8baee:	b910      	cbnz	r0, 8baf6 <__smakebuf_r+0xce>
   8baf0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8baf4:	e7cf      	b.n	8ba96 <__smakebuf_r+0x6e>
   8baf6:	89a3      	ldrh	r3, [r4, #12]
   8baf8:	f023 0303 	bic.w	r3, r3, #3
   8bafc:	f043 0301 	orr.w	r3, r3, #1
   8bb00:	b21b      	sxth	r3, r3
   8bb02:	e7c8      	b.n	8ba96 <__smakebuf_r+0x6e>
   8bb04:	0008b4b9 	.word	0x0008b4b9

0008bb08 <raise>:
   8bb08:	b538      	push	{r3, r4, r5, lr}
   8bb0a:	4b15      	ldr	r3, [pc, #84]	; (8bb60 <raise+0x58>)
   8bb0c:	281f      	cmp	r0, #31
   8bb0e:	681d      	ldr	r5, [r3, #0]
   8bb10:	d820      	bhi.n	8bb54 <raise+0x4c>
   8bb12:	f8d5 22dc 	ldr.w	r2, [r5, #732]	; 0x2dc
   8bb16:	4604      	mov	r4, r0
   8bb18:	b162      	cbz	r2, 8bb34 <raise+0x2c>
   8bb1a:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
   8bb1e:	b14b      	cbz	r3, 8bb34 <raise+0x2c>
   8bb20:	2b01      	cmp	r3, #1
   8bb22:	d015      	beq.n	8bb50 <raise+0x48>
   8bb24:	1c59      	adds	r1, r3, #1
   8bb26:	d00f      	beq.n	8bb48 <raise+0x40>
   8bb28:	2500      	movs	r5, #0
   8bb2a:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
   8bb2e:	4798      	blx	r3
   8bb30:	4628      	mov	r0, r5
   8bb32:	bd38      	pop	{r3, r4, r5, pc}
   8bb34:	4628      	mov	r0, r5
   8bb36:	f000 f829 	bl	8bb8c <_getpid_r>
   8bb3a:	4622      	mov	r2, r4
   8bb3c:	4601      	mov	r1, r0
   8bb3e:	4628      	mov	r0, r5
   8bb40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   8bb44:	f000 b80e 	b.w	8bb64 <_kill_r>
   8bb48:	2316      	movs	r3, #22
   8bb4a:	2001      	movs	r0, #1
   8bb4c:	602b      	str	r3, [r5, #0]
   8bb4e:	bd38      	pop	{r3, r4, r5, pc}
   8bb50:	2000      	movs	r0, #0
   8bb52:	bd38      	pop	{r3, r4, r5, pc}
   8bb54:	2316      	movs	r3, #22
   8bb56:	f04f 30ff 	mov.w	r0, #4294967295
   8bb5a:	602b      	str	r3, [r5, #0]
   8bb5c:	bd38      	pop	{r3, r4, r5, pc}
   8bb5e:	bf00      	nop
   8bb60:	20070b30 	.word	0x20070b30

0008bb64 <_kill_r>:
   8bb64:	b570      	push	{r4, r5, r6, lr}
   8bb66:	2600      	movs	r6, #0
   8bb68:	4d07      	ldr	r5, [pc, #28]	; (8bb88 <_kill_r+0x24>)
   8bb6a:	4604      	mov	r4, r0
   8bb6c:	4608      	mov	r0, r1
   8bb6e:	4611      	mov	r1, r2
   8bb70:	602e      	str	r6, [r5, #0]
   8bb72:	f7f8 f8ad 	bl	83cd0 <_kill>
   8bb76:	1c43      	adds	r3, r0, #1
   8bb78:	d000      	beq.n	8bb7c <_kill_r+0x18>
   8bb7a:	bd70      	pop	{r4, r5, r6, pc}
   8bb7c:	682b      	ldr	r3, [r5, #0]
   8bb7e:	2b00      	cmp	r3, #0
   8bb80:	d0fb      	beq.n	8bb7a <_kill_r+0x16>
   8bb82:	6023      	str	r3, [r4, #0]
   8bb84:	bd70      	pop	{r4, r5, r6, pc}
   8bb86:	bf00      	nop
   8bb88:	20073354 	.word	0x20073354

0008bb8c <_getpid_r>:
   8bb8c:	f7f8 b8a2 	b.w	83cd4 <_getpid>

0008bb90 <__sread>:
   8bb90:	b510      	push	{r4, lr}
   8bb92:	460c      	mov	r4, r1
   8bb94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bb98:	f000 f980 	bl	8be9c <_read_r>
   8bb9c:	2800      	cmp	r0, #0
   8bb9e:	db03      	blt.n	8bba8 <__sread+0x18>
   8bba0:	6d23      	ldr	r3, [r4, #80]	; 0x50
   8bba2:	4403      	add	r3, r0
   8bba4:	6523      	str	r3, [r4, #80]	; 0x50
   8bba6:	bd10      	pop	{r4, pc}
   8bba8:	89a3      	ldrh	r3, [r4, #12]
   8bbaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   8bbae:	81a3      	strh	r3, [r4, #12]
   8bbb0:	bd10      	pop	{r4, pc}
   8bbb2:	bf00      	nop

0008bbb4 <__swrite>:
   8bbb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8bbb8:	460c      	mov	r4, r1
   8bbba:	f9b1 100c 	ldrsh.w	r1, [r1, #12]
   8bbbe:	461f      	mov	r7, r3
   8bbc0:	05cb      	lsls	r3, r1, #23
   8bbc2:	4605      	mov	r5, r0
   8bbc4:	4616      	mov	r6, r2
   8bbc6:	d40b      	bmi.n	8bbe0 <__swrite+0x2c>
   8bbc8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   8bbcc:	81a1      	strh	r1, [r4, #12]
   8bbce:	463b      	mov	r3, r7
   8bbd0:	4632      	mov	r2, r6
   8bbd2:	4628      	mov	r0, r5
   8bbd4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8bbd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8bbdc:	f000 b894 	b.w	8bd08 <_write_r>
   8bbe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   8bbe4:	2302      	movs	r3, #2
   8bbe6:	2200      	movs	r2, #0
   8bbe8:	f000 f942 	bl	8be70 <_lseek_r>
   8bbec:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
   8bbf0:	e7ea      	b.n	8bbc8 <__swrite+0x14>
   8bbf2:	bf00      	nop

0008bbf4 <__sseek>:
   8bbf4:	b510      	push	{r4, lr}
   8bbf6:	460c      	mov	r4, r1
   8bbf8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bbfc:	f000 f938 	bl	8be70 <_lseek_r>
   8bc00:	89a3      	ldrh	r3, [r4, #12]
   8bc02:	1c42      	adds	r2, r0, #1
   8bc04:	bf0e      	itee	eq
   8bc06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   8bc0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8bc0e:	6520      	strne	r0, [r4, #80]	; 0x50
   8bc10:	81a3      	strh	r3, [r4, #12]
   8bc12:	bd10      	pop	{r4, pc}

0008bc14 <__sclose>:
   8bc14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8bc18:	f000 b88c 	b.w	8bd34 <_close_r>

0008bc1c <__swbuf_r>:
   8bc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8bc1e:	4606      	mov	r6, r0
   8bc20:	460d      	mov	r5, r1
   8bc22:	4614      	mov	r4, r2
   8bc24:	b110      	cbz	r0, 8bc2c <__swbuf_r+0x10>
   8bc26:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8bc28:	2b00      	cmp	r3, #0
   8bc2a:	d043      	beq.n	8bcb4 <__swbuf_r+0x98>
   8bc2c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8bc30:	69a3      	ldr	r3, [r4, #24]
   8bc32:	0710      	lsls	r0, r2, #28
   8bc34:	60a3      	str	r3, [r4, #8]
   8bc36:	b291      	uxth	r1, r2
   8bc38:	d51b      	bpl.n	8bc72 <__swbuf_r+0x56>
   8bc3a:	6923      	ldr	r3, [r4, #16]
   8bc3c:	b1cb      	cbz	r3, 8bc72 <__swbuf_r+0x56>
   8bc3e:	b2ed      	uxtb	r5, r5
   8bc40:	0489      	lsls	r1, r1, #18
   8bc42:	462f      	mov	r7, r5
   8bc44:	d522      	bpl.n	8bc8c <__swbuf_r+0x70>
   8bc46:	6822      	ldr	r2, [r4, #0]
   8bc48:	6961      	ldr	r1, [r4, #20]
   8bc4a:	1ad3      	subs	r3, r2, r3
   8bc4c:	4299      	cmp	r1, r3
   8bc4e:	dd29      	ble.n	8bca4 <__swbuf_r+0x88>
   8bc50:	3301      	adds	r3, #1
   8bc52:	68a1      	ldr	r1, [r4, #8]
   8bc54:	3901      	subs	r1, #1
   8bc56:	60a1      	str	r1, [r4, #8]
   8bc58:	1c51      	adds	r1, r2, #1
   8bc5a:	6021      	str	r1, [r4, #0]
   8bc5c:	7015      	strb	r5, [r2, #0]
   8bc5e:	6962      	ldr	r2, [r4, #20]
   8bc60:	429a      	cmp	r2, r3
   8bc62:	d02a      	beq.n	8bcba <__swbuf_r+0x9e>
   8bc64:	89a3      	ldrh	r3, [r4, #12]
   8bc66:	07db      	lsls	r3, r3, #31
   8bc68:	d501      	bpl.n	8bc6e <__swbuf_r+0x52>
   8bc6a:	2d0a      	cmp	r5, #10
   8bc6c:	d025      	beq.n	8bcba <__swbuf_r+0x9e>
   8bc6e:	4638      	mov	r0, r7
   8bc70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8bc72:	4621      	mov	r1, r4
   8bc74:	4630      	mov	r0, r6
   8bc76:	f7ff faed 	bl	8b254 <__swsetup_r>
   8bc7a:	bb20      	cbnz	r0, 8bcc6 <__swbuf_r+0xaa>
   8bc7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
   8bc80:	b2ed      	uxtb	r5, r5
   8bc82:	b291      	uxth	r1, r2
   8bc84:	0489      	lsls	r1, r1, #18
   8bc86:	462f      	mov	r7, r5
   8bc88:	6923      	ldr	r3, [r4, #16]
   8bc8a:	d4dc      	bmi.n	8bc46 <__swbuf_r+0x2a>
   8bc8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   8bc90:	81a2      	strh	r2, [r4, #12]
   8bc92:	6e62      	ldr	r2, [r4, #100]	; 0x64
   8bc94:	6961      	ldr	r1, [r4, #20]
   8bc96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
   8bc9a:	6662      	str	r2, [r4, #100]	; 0x64
   8bc9c:	6822      	ldr	r2, [r4, #0]
   8bc9e:	1ad3      	subs	r3, r2, r3
   8bca0:	4299      	cmp	r1, r3
   8bca2:	dcd5      	bgt.n	8bc50 <__swbuf_r+0x34>
   8bca4:	4621      	mov	r1, r4
   8bca6:	4630      	mov	r0, r6
   8bca8:	f7ff fbd8 	bl	8b45c <_fflush_r>
   8bcac:	b958      	cbnz	r0, 8bcc6 <__swbuf_r+0xaa>
   8bcae:	2301      	movs	r3, #1
   8bcb0:	6822      	ldr	r2, [r4, #0]
   8bcb2:	e7ce      	b.n	8bc52 <__swbuf_r+0x36>
   8bcb4:	f7ff fc06 	bl	8b4c4 <__sinit>
   8bcb8:	e7b8      	b.n	8bc2c <__swbuf_r+0x10>
   8bcba:	4621      	mov	r1, r4
   8bcbc:	4630      	mov	r0, r6
   8bcbe:	f7ff fbcd 	bl	8b45c <_fflush_r>
   8bcc2:	2800      	cmp	r0, #0
   8bcc4:	d0d3      	beq.n	8bc6e <__swbuf_r+0x52>
   8bcc6:	f04f 37ff 	mov.w	r7, #4294967295
   8bcca:	e7d0      	b.n	8bc6e <__swbuf_r+0x52>

0008bccc <_wcrtomb_r>:
   8bccc:	b570      	push	{r4, r5, r6, lr}
   8bcce:	4605      	mov	r5, r0
   8bcd0:	461c      	mov	r4, r3
   8bcd2:	b084      	sub	sp, #16
   8bcd4:	b139      	cbz	r1, 8bce6 <_wcrtomb_r+0x1a>
   8bcd6:	4e0b      	ldr	r6, [pc, #44]	; (8bd04 <_wcrtomb_r+0x38>)
   8bcd8:	f8d6 60e0 	ldr.w	r6, [r6, #224]	; 0xe0
   8bcdc:	47b0      	blx	r6
   8bcde:	1c43      	adds	r3, r0, #1
   8bce0:	d009      	beq.n	8bcf6 <_wcrtomb_r+0x2a>
   8bce2:	b004      	add	sp, #16
   8bce4:	bd70      	pop	{r4, r5, r6, pc}
   8bce6:	460a      	mov	r2, r1
   8bce8:	4906      	ldr	r1, [pc, #24]	; (8bd04 <_wcrtomb_r+0x38>)
   8bcea:	f8d1 60e0 	ldr.w	r6, [r1, #224]	; 0xe0
   8bcee:	a901      	add	r1, sp, #4
   8bcf0:	47b0      	blx	r6
   8bcf2:	1c43      	adds	r3, r0, #1
   8bcf4:	d1f5      	bne.n	8bce2 <_wcrtomb_r+0x16>
   8bcf6:	2200      	movs	r2, #0
   8bcf8:	238a      	movs	r3, #138	; 0x8a
   8bcfa:	6022      	str	r2, [r4, #0]
   8bcfc:	602b      	str	r3, [r5, #0]
   8bcfe:	b004      	add	sp, #16
   8bd00:	bd70      	pop	{r4, r5, r6, pc}
   8bd02:	bf00      	nop
   8bd04:	20071374 	.word	0x20071374

0008bd08 <_write_r>:
   8bd08:	b538      	push	{r3, r4, r5, lr}
   8bd0a:	460c      	mov	r4, r1
   8bd0c:	4611      	mov	r1, r2
   8bd0e:	2200      	movs	r2, #0
   8bd10:	4684      	mov	ip, r0
   8bd12:	4d07      	ldr	r5, [pc, #28]	; (8bd30 <_write_r+0x28>)
   8bd14:	4620      	mov	r0, r4
   8bd16:	602a      	str	r2, [r5, #0]
   8bd18:	461a      	mov	r2, r3
   8bd1a:	4664      	mov	r4, ip
   8bd1c:	f7f7 fb3a 	bl	83394 <_write>
   8bd20:	1c43      	adds	r3, r0, #1
   8bd22:	d000      	beq.n	8bd26 <_write_r+0x1e>
   8bd24:	bd38      	pop	{r3, r4, r5, pc}
   8bd26:	682b      	ldr	r3, [r5, #0]
   8bd28:	2b00      	cmp	r3, #0
   8bd2a:	d0fb      	beq.n	8bd24 <_write_r+0x1c>
   8bd2c:	6023      	str	r3, [r4, #0]
   8bd2e:	bd38      	pop	{r3, r4, r5, pc}
   8bd30:	20073354 	.word	0x20073354

0008bd34 <_close_r>:
   8bd34:	2200      	movs	r2, #0
   8bd36:	b538      	push	{r3, r4, r5, lr}
   8bd38:	4d06      	ldr	r5, [pc, #24]	; (8bd54 <_close_r+0x20>)
   8bd3a:	4604      	mov	r4, r0
   8bd3c:	4608      	mov	r0, r1
   8bd3e:	602a      	str	r2, [r5, #0]
   8bd40:	f7f7 ffb6 	bl	83cb0 <_close>
   8bd44:	1c43      	adds	r3, r0, #1
   8bd46:	d000      	beq.n	8bd4a <_close_r+0x16>
   8bd48:	bd38      	pop	{r3, r4, r5, pc}
   8bd4a:	682b      	ldr	r3, [r5, #0]
   8bd4c:	2b00      	cmp	r3, #0
   8bd4e:	d0fb      	beq.n	8bd48 <_close_r+0x14>
   8bd50:	6023      	str	r3, [r4, #0]
   8bd52:	bd38      	pop	{r3, r4, r5, pc}
   8bd54:	20073354 	.word	0x20073354

0008bd58 <_fclose_r>:
   8bd58:	b570      	push	{r4, r5, r6, lr}
   8bd5a:	2900      	cmp	r1, #0
   8bd5c:	d04b      	beq.n	8bdf6 <_fclose_r+0x9e>
   8bd5e:	4606      	mov	r6, r0
   8bd60:	460c      	mov	r4, r1
   8bd62:	b110      	cbz	r0, 8bd6a <_fclose_r+0x12>
   8bd64:	6b83      	ldr	r3, [r0, #56]	; 0x38
   8bd66:	2b00      	cmp	r3, #0
   8bd68:	d048      	beq.n	8bdfc <_fclose_r+0xa4>
   8bd6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8bd6c:	07d8      	lsls	r0, r3, #31
   8bd6e:	d534      	bpl.n	8bdda <_fclose_r+0x82>
   8bd70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bd74:	2b00      	cmp	r3, #0
   8bd76:	d03e      	beq.n	8bdf6 <_fclose_r+0x9e>
   8bd78:	4621      	mov	r1, r4
   8bd7a:	4630      	mov	r0, r6
   8bd7c:	f7ff fadc 	bl	8b338 <__sflush_r>
   8bd80:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8bd82:	4605      	mov	r5, r0
   8bd84:	b133      	cbz	r3, 8bd94 <_fclose_r+0x3c>
   8bd86:	4630      	mov	r0, r6
   8bd88:	69e1      	ldr	r1, [r4, #28]
   8bd8a:	4798      	blx	r3
   8bd8c:	2800      	cmp	r0, #0
   8bd8e:	bfb8      	it	lt
   8bd90:	f04f 35ff 	movlt.w	r5, #4294967295
   8bd94:	89a3      	ldrh	r3, [r4, #12]
   8bd96:	061a      	lsls	r2, r3, #24
   8bd98:	d43b      	bmi.n	8be12 <_fclose_r+0xba>
   8bd9a:	6b21      	ldr	r1, [r4, #48]	; 0x30
   8bd9c:	b141      	cbz	r1, 8bdb0 <_fclose_r+0x58>
   8bd9e:	f104 0340 	add.w	r3, r4, #64	; 0x40
   8bda2:	4299      	cmp	r1, r3
   8bda4:	d002      	beq.n	8bdac <_fclose_r+0x54>
   8bda6:	4630      	mov	r0, r6
   8bda8:	f7fc ff42 	bl	88c30 <_free_r>
   8bdac:	2300      	movs	r3, #0
   8bdae:	6323      	str	r3, [r4, #48]	; 0x30
   8bdb0:	6c61      	ldr	r1, [r4, #68]	; 0x44
   8bdb2:	b121      	cbz	r1, 8bdbe <_fclose_r+0x66>
   8bdb4:	4630      	mov	r0, r6
   8bdb6:	f7fc ff3b 	bl	88c30 <_free_r>
   8bdba:	2300      	movs	r3, #0
   8bdbc:	6463      	str	r3, [r4, #68]	; 0x44
   8bdbe:	f7ff fc07 	bl	8b5d0 <__sfp_lock_acquire>
   8bdc2:	2200      	movs	r2, #0
   8bdc4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8bdc6:	81a2      	strh	r2, [r4, #12]
   8bdc8:	07db      	lsls	r3, r3, #31
   8bdca:	d527      	bpl.n	8be1c <_fclose_r+0xc4>
   8bdcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bdce:	f7fd f835 	bl	88e3c <__retarget_lock_close_recursive>
   8bdd2:	f7ff fc03 	bl	8b5dc <__sfp_lock_release>
   8bdd6:	4628      	mov	r0, r5
   8bdd8:	bd70      	pop	{r4, r5, r6, pc}
   8bdda:	89a3      	ldrh	r3, [r4, #12]
   8bddc:	0599      	lsls	r1, r3, #22
   8bdde:	d4cb      	bmi.n	8bd78 <_fclose_r+0x20>
   8bde0:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8bde2:	f7fd f82d 	bl	88e40 <__retarget_lock_acquire_recursive>
   8bde6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   8bdea:	2b00      	cmp	r3, #0
   8bdec:	d1c4      	bne.n	8bd78 <_fclose_r+0x20>
   8bdee:	6e65      	ldr	r5, [r4, #100]	; 0x64
   8bdf0:	f015 0501 	ands.w	r5, r5, #1
   8bdf4:	d008      	beq.n	8be08 <_fclose_r+0xb0>
   8bdf6:	2500      	movs	r5, #0
   8bdf8:	4628      	mov	r0, r5
   8bdfa:	bd70      	pop	{r4, r5, r6, pc}
   8bdfc:	f7ff fb62 	bl	8b4c4 <__sinit>
   8be00:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8be02:	07d8      	lsls	r0, r3, #31
   8be04:	d4b4      	bmi.n	8bd70 <_fclose_r+0x18>
   8be06:	e7e8      	b.n	8bdda <_fclose_r+0x82>
   8be08:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8be0a:	f7fd f81b 	bl	88e44 <__retarget_lock_release_recursive>
   8be0e:	4628      	mov	r0, r5
   8be10:	bd70      	pop	{r4, r5, r6, pc}
   8be12:	4630      	mov	r0, r6
   8be14:	6921      	ldr	r1, [r4, #16]
   8be16:	f7fc ff0b 	bl	88c30 <_free_r>
   8be1a:	e7be      	b.n	8bd9a <_fclose_r+0x42>
   8be1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
   8be1e:	f7fd f811 	bl	88e44 <__retarget_lock_release_recursive>
   8be22:	e7d3      	b.n	8bdcc <_fclose_r+0x74>

0008be24 <_fstat_r>:
   8be24:	b570      	push	{r4, r5, r6, lr}
   8be26:	2600      	movs	r6, #0
   8be28:	4d07      	ldr	r5, [pc, #28]	; (8be48 <_fstat_r+0x24>)
   8be2a:	4604      	mov	r4, r0
   8be2c:	4608      	mov	r0, r1
   8be2e:	4611      	mov	r1, r2
   8be30:	602e      	str	r6, [r5, #0]
   8be32:	f7f7 ff41 	bl	83cb8 <_fstat>
   8be36:	1c43      	adds	r3, r0, #1
   8be38:	d000      	beq.n	8be3c <_fstat_r+0x18>
   8be3a:	bd70      	pop	{r4, r5, r6, pc}
   8be3c:	682b      	ldr	r3, [r5, #0]
   8be3e:	2b00      	cmp	r3, #0
   8be40:	d0fb      	beq.n	8be3a <_fstat_r+0x16>
   8be42:	6023      	str	r3, [r4, #0]
   8be44:	bd70      	pop	{r4, r5, r6, pc}
   8be46:	bf00      	nop
   8be48:	20073354 	.word	0x20073354

0008be4c <_isatty_r>:
   8be4c:	2200      	movs	r2, #0
   8be4e:	b538      	push	{r3, r4, r5, lr}
   8be50:	4d06      	ldr	r5, [pc, #24]	; (8be6c <_isatty_r+0x20>)
   8be52:	4604      	mov	r4, r0
   8be54:	4608      	mov	r0, r1
   8be56:	602a      	str	r2, [r5, #0]
   8be58:	f7f7 ff34 	bl	83cc4 <_isatty>
   8be5c:	1c43      	adds	r3, r0, #1
   8be5e:	d000      	beq.n	8be62 <_isatty_r+0x16>
   8be60:	bd38      	pop	{r3, r4, r5, pc}
   8be62:	682b      	ldr	r3, [r5, #0]
   8be64:	2b00      	cmp	r3, #0
   8be66:	d0fb      	beq.n	8be60 <_isatty_r+0x14>
   8be68:	6023      	str	r3, [r4, #0]
   8be6a:	bd38      	pop	{r3, r4, r5, pc}
   8be6c:	20073354 	.word	0x20073354

0008be70 <_lseek_r>:
   8be70:	b538      	push	{r3, r4, r5, lr}
   8be72:	460c      	mov	r4, r1
   8be74:	4611      	mov	r1, r2
   8be76:	2200      	movs	r2, #0
   8be78:	4684      	mov	ip, r0
   8be7a:	4d07      	ldr	r5, [pc, #28]	; (8be98 <_lseek_r+0x28>)
   8be7c:	4620      	mov	r0, r4
   8be7e:	602a      	str	r2, [r5, #0]
   8be80:	461a      	mov	r2, r3
   8be82:	4664      	mov	r4, ip
   8be84:	f7f7 ff20 	bl	83cc8 <_lseek>
   8be88:	1c43      	adds	r3, r0, #1
   8be8a:	d000      	beq.n	8be8e <_lseek_r+0x1e>
   8be8c:	bd38      	pop	{r3, r4, r5, pc}
   8be8e:	682b      	ldr	r3, [r5, #0]
   8be90:	2b00      	cmp	r3, #0
   8be92:	d0fb      	beq.n	8be8c <_lseek_r+0x1c>
   8be94:	6023      	str	r3, [r4, #0]
   8be96:	bd38      	pop	{r3, r4, r5, pc}
   8be98:	20073354 	.word	0x20073354

0008be9c <_read_r>:
   8be9c:	b538      	push	{r3, r4, r5, lr}
   8be9e:	460c      	mov	r4, r1
   8bea0:	4611      	mov	r1, r2
   8bea2:	2200      	movs	r2, #0
   8bea4:	4684      	mov	ip, r0
   8bea6:	4d07      	ldr	r5, [pc, #28]	; (8bec4 <_read_r+0x28>)
   8bea8:	4620      	mov	r0, r4
   8beaa:	602a      	str	r2, [r5, #0]
   8beac:	461a      	mov	r2, r3
   8beae:	4664      	mov	r4, ip
   8beb0:	f7f9 ff44 	bl	85d3c <_read>
   8beb4:	1c43      	adds	r3, r0, #1
   8beb6:	d000      	beq.n	8beba <_read_r+0x1e>
   8beb8:	bd38      	pop	{r3, r4, r5, pc}
   8beba:	682b      	ldr	r3, [r5, #0]
   8bebc:	2b00      	cmp	r3, #0
   8bebe:	d0fb      	beq.n	8beb8 <_read_r+0x1c>
   8bec0:	6023      	str	r3, [r4, #0]
   8bec2:	bd38      	pop	{r3, r4, r5, pc}
   8bec4:	20073354 	.word	0x20073354

0008bec8 <__aeabi_drsub>:
   8bec8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   8becc:	e002      	b.n	8bed4 <__adddf3>
   8bece:	bf00      	nop

0008bed0 <__aeabi_dsub>:
   8bed0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0008bed4 <__adddf3>:
   8bed4:	b530      	push	{r4, r5, lr}
   8bed6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   8beda:	ea4f 0543 	mov.w	r5, r3, lsl #1
   8bede:	ea94 0f05 	teq	r4, r5
   8bee2:	bf08      	it	eq
   8bee4:	ea90 0f02 	teqeq	r0, r2
   8bee8:	bf1f      	itttt	ne
   8beea:	ea54 0c00 	orrsne.w	ip, r4, r0
   8beee:	ea55 0c02 	orrsne.w	ip, r5, r2
   8bef2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   8bef6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8befa:	f000 80e2 	beq.w	8c0c2 <__adddf3+0x1ee>
   8befe:	ea4f 5454 	mov.w	r4, r4, lsr #21
   8bf02:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   8bf06:	bfb8      	it	lt
   8bf08:	426d      	neglt	r5, r5
   8bf0a:	dd0c      	ble.n	8bf26 <__adddf3+0x52>
   8bf0c:	442c      	add	r4, r5
   8bf0e:	ea80 0202 	eor.w	r2, r0, r2
   8bf12:	ea81 0303 	eor.w	r3, r1, r3
   8bf16:	ea82 0000 	eor.w	r0, r2, r0
   8bf1a:	ea83 0101 	eor.w	r1, r3, r1
   8bf1e:	ea80 0202 	eor.w	r2, r0, r2
   8bf22:	ea81 0303 	eor.w	r3, r1, r3
   8bf26:	2d36      	cmp	r5, #54	; 0x36
   8bf28:	bf88      	it	hi
   8bf2a:	bd30      	pophi	{r4, r5, pc}
   8bf2c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8bf30:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8bf34:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   8bf38:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   8bf3c:	d002      	beq.n	8bf44 <__adddf3+0x70>
   8bf3e:	4240      	negs	r0, r0
   8bf40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8bf44:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   8bf48:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8bf4c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   8bf50:	d002      	beq.n	8bf58 <__adddf3+0x84>
   8bf52:	4252      	negs	r2, r2
   8bf54:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8bf58:	ea94 0f05 	teq	r4, r5
   8bf5c:	f000 80a7 	beq.w	8c0ae <__adddf3+0x1da>
   8bf60:	f1a4 0401 	sub.w	r4, r4, #1
   8bf64:	f1d5 0e20 	rsbs	lr, r5, #32
   8bf68:	db0d      	blt.n	8bf86 <__adddf3+0xb2>
   8bf6a:	fa02 fc0e 	lsl.w	ip, r2, lr
   8bf6e:	fa22 f205 	lsr.w	r2, r2, r5
   8bf72:	1880      	adds	r0, r0, r2
   8bf74:	f141 0100 	adc.w	r1, r1, #0
   8bf78:	fa03 f20e 	lsl.w	r2, r3, lr
   8bf7c:	1880      	adds	r0, r0, r2
   8bf7e:	fa43 f305 	asr.w	r3, r3, r5
   8bf82:	4159      	adcs	r1, r3
   8bf84:	e00e      	b.n	8bfa4 <__adddf3+0xd0>
   8bf86:	f1a5 0520 	sub.w	r5, r5, #32
   8bf8a:	f10e 0e20 	add.w	lr, lr, #32
   8bf8e:	2a01      	cmp	r2, #1
   8bf90:	fa03 fc0e 	lsl.w	ip, r3, lr
   8bf94:	bf28      	it	cs
   8bf96:	f04c 0c02 	orrcs.w	ip, ip, #2
   8bf9a:	fa43 f305 	asr.w	r3, r3, r5
   8bf9e:	18c0      	adds	r0, r0, r3
   8bfa0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   8bfa4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8bfa8:	d507      	bpl.n	8bfba <__adddf3+0xe6>
   8bfaa:	f04f 0e00 	mov.w	lr, #0
   8bfae:	f1dc 0c00 	rsbs	ip, ip, #0
   8bfb2:	eb7e 0000 	sbcs.w	r0, lr, r0
   8bfb6:	eb6e 0101 	sbc.w	r1, lr, r1
   8bfba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   8bfbe:	d31b      	bcc.n	8bff8 <__adddf3+0x124>
   8bfc0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   8bfc4:	d30c      	bcc.n	8bfe0 <__adddf3+0x10c>
   8bfc6:	0849      	lsrs	r1, r1, #1
   8bfc8:	ea5f 0030 	movs.w	r0, r0, rrx
   8bfcc:	ea4f 0c3c 	mov.w	ip, ip, rrx
   8bfd0:	f104 0401 	add.w	r4, r4, #1
   8bfd4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   8bfd8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   8bfdc:	f080 809a 	bcs.w	8c114 <__adddf3+0x240>
   8bfe0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   8bfe4:	bf08      	it	eq
   8bfe6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8bfea:	f150 0000 	adcs.w	r0, r0, #0
   8bfee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8bff2:	ea41 0105 	orr.w	r1, r1, r5
   8bff6:	bd30      	pop	{r4, r5, pc}
   8bff8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   8bffc:	4140      	adcs	r0, r0
   8bffe:	eb41 0101 	adc.w	r1, r1, r1
   8c002:	3c01      	subs	r4, #1
   8c004:	bf28      	it	cs
   8c006:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   8c00a:	d2e9      	bcs.n	8bfe0 <__adddf3+0x10c>
   8c00c:	f091 0f00 	teq	r1, #0
   8c010:	bf04      	itt	eq
   8c012:	4601      	moveq	r1, r0
   8c014:	2000      	moveq	r0, #0
   8c016:	fab1 f381 	clz	r3, r1
   8c01a:	bf08      	it	eq
   8c01c:	3320      	addeq	r3, #32
   8c01e:	f1a3 030b 	sub.w	r3, r3, #11
   8c022:	f1b3 0220 	subs.w	r2, r3, #32
   8c026:	da0c      	bge.n	8c042 <__adddf3+0x16e>
   8c028:	320c      	adds	r2, #12
   8c02a:	dd08      	ble.n	8c03e <__adddf3+0x16a>
   8c02c:	f102 0c14 	add.w	ip, r2, #20
   8c030:	f1c2 020c 	rsb	r2, r2, #12
   8c034:	fa01 f00c 	lsl.w	r0, r1, ip
   8c038:	fa21 f102 	lsr.w	r1, r1, r2
   8c03c:	e00c      	b.n	8c058 <__adddf3+0x184>
   8c03e:	f102 0214 	add.w	r2, r2, #20
   8c042:	bfd8      	it	le
   8c044:	f1c2 0c20 	rsble	ip, r2, #32
   8c048:	fa01 f102 	lsl.w	r1, r1, r2
   8c04c:	fa20 fc0c 	lsr.w	ip, r0, ip
   8c050:	bfdc      	itt	le
   8c052:	ea41 010c 	orrle.w	r1, r1, ip
   8c056:	4090      	lslle	r0, r2
   8c058:	1ae4      	subs	r4, r4, r3
   8c05a:	bfa2      	ittt	ge
   8c05c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   8c060:	4329      	orrge	r1, r5
   8c062:	bd30      	popge	{r4, r5, pc}
   8c064:	ea6f 0404 	mvn.w	r4, r4
   8c068:	3c1f      	subs	r4, #31
   8c06a:	da1c      	bge.n	8c0a6 <__adddf3+0x1d2>
   8c06c:	340c      	adds	r4, #12
   8c06e:	dc0e      	bgt.n	8c08e <__adddf3+0x1ba>
   8c070:	f104 0414 	add.w	r4, r4, #20
   8c074:	f1c4 0220 	rsb	r2, r4, #32
   8c078:	fa20 f004 	lsr.w	r0, r0, r4
   8c07c:	fa01 f302 	lsl.w	r3, r1, r2
   8c080:	ea40 0003 	orr.w	r0, r0, r3
   8c084:	fa21 f304 	lsr.w	r3, r1, r4
   8c088:	ea45 0103 	orr.w	r1, r5, r3
   8c08c:	bd30      	pop	{r4, r5, pc}
   8c08e:	f1c4 040c 	rsb	r4, r4, #12
   8c092:	f1c4 0220 	rsb	r2, r4, #32
   8c096:	fa20 f002 	lsr.w	r0, r0, r2
   8c09a:	fa01 f304 	lsl.w	r3, r1, r4
   8c09e:	ea40 0003 	orr.w	r0, r0, r3
   8c0a2:	4629      	mov	r1, r5
   8c0a4:	bd30      	pop	{r4, r5, pc}
   8c0a6:	fa21 f004 	lsr.w	r0, r1, r4
   8c0aa:	4629      	mov	r1, r5
   8c0ac:	bd30      	pop	{r4, r5, pc}
   8c0ae:	f094 0f00 	teq	r4, #0
   8c0b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   8c0b6:	bf06      	itte	eq
   8c0b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   8c0bc:	3401      	addeq	r4, #1
   8c0be:	3d01      	subne	r5, #1
   8c0c0:	e74e      	b.n	8bf60 <__adddf3+0x8c>
   8c0c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c0c6:	bf18      	it	ne
   8c0c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   8c0cc:	d029      	beq.n	8c122 <__adddf3+0x24e>
   8c0ce:	ea94 0f05 	teq	r4, r5
   8c0d2:	bf08      	it	eq
   8c0d4:	ea90 0f02 	teqeq	r0, r2
   8c0d8:	d005      	beq.n	8c0e6 <__adddf3+0x212>
   8c0da:	ea54 0c00 	orrs.w	ip, r4, r0
   8c0de:	bf04      	itt	eq
   8c0e0:	4619      	moveq	r1, r3
   8c0e2:	4610      	moveq	r0, r2
   8c0e4:	bd30      	pop	{r4, r5, pc}
   8c0e6:	ea91 0f03 	teq	r1, r3
   8c0ea:	bf1e      	ittt	ne
   8c0ec:	2100      	movne	r1, #0
   8c0ee:	2000      	movne	r0, #0
   8c0f0:	bd30      	popne	{r4, r5, pc}
   8c0f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   8c0f6:	d105      	bne.n	8c104 <__adddf3+0x230>
   8c0f8:	0040      	lsls	r0, r0, #1
   8c0fa:	4149      	adcs	r1, r1
   8c0fc:	bf28      	it	cs
   8c0fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   8c102:	bd30      	pop	{r4, r5, pc}
   8c104:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   8c108:	bf3c      	itt	cc
   8c10a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   8c10e:	bd30      	popcc	{r4, r5, pc}
   8c110:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c114:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   8c118:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c11c:	f04f 0000 	mov.w	r0, #0
   8c120:	bd30      	pop	{r4, r5, pc}
   8c122:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   8c126:	bf1a      	itte	ne
   8c128:	4619      	movne	r1, r3
   8c12a:	4610      	movne	r0, r2
   8c12c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   8c130:	bf1c      	itt	ne
   8c132:	460b      	movne	r3, r1
   8c134:	4602      	movne	r2, r0
   8c136:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c13a:	bf06      	itte	eq
   8c13c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   8c140:	ea91 0f03 	teqeq	r1, r3
   8c144:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   8c148:	bd30      	pop	{r4, r5, pc}
   8c14a:	bf00      	nop

0008c14c <__aeabi_ui2d>:
   8c14c:	f090 0f00 	teq	r0, #0
   8c150:	bf04      	itt	eq
   8c152:	2100      	moveq	r1, #0
   8c154:	4770      	bxeq	lr
   8c156:	b530      	push	{r4, r5, lr}
   8c158:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c15c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c160:	f04f 0500 	mov.w	r5, #0
   8c164:	f04f 0100 	mov.w	r1, #0
   8c168:	e750      	b.n	8c00c <__adddf3+0x138>
   8c16a:	bf00      	nop

0008c16c <__aeabi_i2d>:
   8c16c:	f090 0f00 	teq	r0, #0
   8c170:	bf04      	itt	eq
   8c172:	2100      	moveq	r1, #0
   8c174:	4770      	bxeq	lr
   8c176:	b530      	push	{r4, r5, lr}
   8c178:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c17c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c180:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   8c184:	bf48      	it	mi
   8c186:	4240      	negmi	r0, r0
   8c188:	f04f 0100 	mov.w	r1, #0
   8c18c:	e73e      	b.n	8c00c <__adddf3+0x138>
   8c18e:	bf00      	nop

0008c190 <__aeabi_f2d>:
   8c190:	0042      	lsls	r2, r0, #1
   8c192:	ea4f 01e2 	mov.w	r1, r2, asr #3
   8c196:	ea4f 0131 	mov.w	r1, r1, rrx
   8c19a:	ea4f 7002 	mov.w	r0, r2, lsl #28
   8c19e:	bf1f      	itttt	ne
   8c1a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   8c1a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   8c1a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   8c1ac:	4770      	bxne	lr
   8c1ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   8c1b2:	bf08      	it	eq
   8c1b4:	4770      	bxeq	lr
   8c1b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   8c1ba:	bf04      	itt	eq
   8c1bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   8c1c0:	4770      	bxeq	lr
   8c1c2:	b530      	push	{r4, r5, lr}
   8c1c4:	f44f 7460 	mov.w	r4, #896	; 0x380
   8c1c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   8c1cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c1d0:	e71c      	b.n	8c00c <__adddf3+0x138>
   8c1d2:	bf00      	nop

0008c1d4 <__aeabi_ul2d>:
   8c1d4:	ea50 0201 	orrs.w	r2, r0, r1
   8c1d8:	bf08      	it	eq
   8c1da:	4770      	bxeq	lr
   8c1dc:	b530      	push	{r4, r5, lr}
   8c1de:	f04f 0500 	mov.w	r5, #0
   8c1e2:	e00a      	b.n	8c1fa <__aeabi_l2d+0x16>

0008c1e4 <__aeabi_l2d>:
   8c1e4:	ea50 0201 	orrs.w	r2, r0, r1
   8c1e8:	bf08      	it	eq
   8c1ea:	4770      	bxeq	lr
   8c1ec:	b530      	push	{r4, r5, lr}
   8c1ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   8c1f2:	d502      	bpl.n	8c1fa <__aeabi_l2d+0x16>
   8c1f4:	4240      	negs	r0, r0
   8c1f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   8c1fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
   8c1fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
   8c202:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   8c206:	f43f aed8 	beq.w	8bfba <__adddf3+0xe6>
   8c20a:	f04f 0203 	mov.w	r2, #3
   8c20e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c212:	bf18      	it	ne
   8c214:	3203      	addne	r2, #3
   8c216:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   8c21a:	bf18      	it	ne
   8c21c:	3203      	addne	r2, #3
   8c21e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   8c222:	f1c2 0320 	rsb	r3, r2, #32
   8c226:	fa00 fc03 	lsl.w	ip, r0, r3
   8c22a:	fa20 f002 	lsr.w	r0, r0, r2
   8c22e:	fa01 fe03 	lsl.w	lr, r1, r3
   8c232:	ea40 000e 	orr.w	r0, r0, lr
   8c236:	fa21 f102 	lsr.w	r1, r1, r2
   8c23a:	4414      	add	r4, r2
   8c23c:	e6bd      	b.n	8bfba <__adddf3+0xe6>
   8c23e:	bf00      	nop

0008c240 <__aeabi_dmul>:
   8c240:	b570      	push	{r4, r5, r6, lr}
   8c242:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c246:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c24a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c24e:	bf1d      	ittte	ne
   8c250:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c254:	ea94 0f0c 	teqne	r4, ip
   8c258:	ea95 0f0c 	teqne	r5, ip
   8c25c:	f000 f8de 	bleq	8c41c <__aeabi_dmul+0x1dc>
   8c260:	442c      	add	r4, r5
   8c262:	ea81 0603 	eor.w	r6, r1, r3
   8c266:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   8c26a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   8c26e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   8c272:	bf18      	it	ne
   8c274:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   8c278:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c27c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   8c280:	d038      	beq.n	8c2f4 <__aeabi_dmul+0xb4>
   8c282:	fba0 ce02 	umull	ip, lr, r0, r2
   8c286:	f04f 0500 	mov.w	r5, #0
   8c28a:	fbe1 e502 	umlal	lr, r5, r1, r2
   8c28e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   8c292:	fbe0 e503 	umlal	lr, r5, r0, r3
   8c296:	f04f 0600 	mov.w	r6, #0
   8c29a:	fbe1 5603 	umlal	r5, r6, r1, r3
   8c29e:	f09c 0f00 	teq	ip, #0
   8c2a2:	bf18      	it	ne
   8c2a4:	f04e 0e01 	orrne.w	lr, lr, #1
   8c2a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   8c2ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   8c2b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   8c2b4:	d204      	bcs.n	8c2c0 <__aeabi_dmul+0x80>
   8c2b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   8c2ba:	416d      	adcs	r5, r5
   8c2bc:	eb46 0606 	adc.w	r6, r6, r6
   8c2c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   8c2c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   8c2c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   8c2cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   8c2d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   8c2d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c2d8:	bf88      	it	hi
   8c2da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c2de:	d81e      	bhi.n	8c31e <__aeabi_dmul+0xde>
   8c2e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   8c2e4:	bf08      	it	eq
   8c2e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   8c2ea:	f150 0000 	adcs.w	r0, r0, #0
   8c2ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c2f2:	bd70      	pop	{r4, r5, r6, pc}
   8c2f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   8c2f8:	ea46 0101 	orr.w	r1, r6, r1
   8c2fc:	ea40 0002 	orr.w	r0, r0, r2
   8c300:	ea81 0103 	eor.w	r1, r1, r3
   8c304:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   8c308:	bfc2      	ittt	gt
   8c30a:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c30e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c312:	bd70      	popgt	{r4, r5, r6, pc}
   8c314:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c318:	f04f 0e00 	mov.w	lr, #0
   8c31c:	3c01      	subs	r4, #1
   8c31e:	f300 80ab 	bgt.w	8c478 <__aeabi_dmul+0x238>
   8c322:	f114 0f36 	cmn.w	r4, #54	; 0x36
   8c326:	bfde      	ittt	le
   8c328:	2000      	movle	r0, #0
   8c32a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8c32e:	bd70      	pople	{r4, r5, r6, pc}
   8c330:	f1c4 0400 	rsb	r4, r4, #0
   8c334:	3c20      	subs	r4, #32
   8c336:	da35      	bge.n	8c3a4 <__aeabi_dmul+0x164>
   8c338:	340c      	adds	r4, #12
   8c33a:	dc1b      	bgt.n	8c374 <__aeabi_dmul+0x134>
   8c33c:	f104 0414 	add.w	r4, r4, #20
   8c340:	f1c4 0520 	rsb	r5, r4, #32
   8c344:	fa00 f305 	lsl.w	r3, r0, r5
   8c348:	fa20 f004 	lsr.w	r0, r0, r4
   8c34c:	fa01 f205 	lsl.w	r2, r1, r5
   8c350:	ea40 0002 	orr.w	r0, r0, r2
   8c354:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   8c358:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   8c35c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c360:	fa21 f604 	lsr.w	r6, r1, r4
   8c364:	eb42 0106 	adc.w	r1, r2, r6
   8c368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c36c:	bf08      	it	eq
   8c36e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c372:	bd70      	pop	{r4, r5, r6, pc}
   8c374:	f1c4 040c 	rsb	r4, r4, #12
   8c378:	f1c4 0520 	rsb	r5, r4, #32
   8c37c:	fa00 f304 	lsl.w	r3, r0, r4
   8c380:	fa20 f005 	lsr.w	r0, r0, r5
   8c384:	fa01 f204 	lsl.w	r2, r1, r4
   8c388:	ea40 0002 	orr.w	r0, r0, r2
   8c38c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c390:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8c394:	f141 0100 	adc.w	r1, r1, #0
   8c398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c39c:	bf08      	it	eq
   8c39e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c3a2:	bd70      	pop	{r4, r5, r6, pc}
   8c3a4:	f1c4 0520 	rsb	r5, r4, #32
   8c3a8:	fa00 f205 	lsl.w	r2, r0, r5
   8c3ac:	ea4e 0e02 	orr.w	lr, lr, r2
   8c3b0:	fa20 f304 	lsr.w	r3, r0, r4
   8c3b4:	fa01 f205 	lsl.w	r2, r1, r5
   8c3b8:	ea43 0302 	orr.w	r3, r3, r2
   8c3bc:	fa21 f004 	lsr.w	r0, r1, r4
   8c3c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c3c4:	fa21 f204 	lsr.w	r2, r1, r4
   8c3c8:	ea20 0002 	bic.w	r0, r0, r2
   8c3cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   8c3d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   8c3d4:	bf08      	it	eq
   8c3d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8c3da:	bd70      	pop	{r4, r5, r6, pc}
   8c3dc:	f094 0f00 	teq	r4, #0
   8c3e0:	d10f      	bne.n	8c402 <__aeabi_dmul+0x1c2>
   8c3e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   8c3e6:	0040      	lsls	r0, r0, #1
   8c3e8:	eb41 0101 	adc.w	r1, r1, r1
   8c3ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c3f0:	bf08      	it	eq
   8c3f2:	3c01      	subeq	r4, #1
   8c3f4:	d0f7      	beq.n	8c3e6 <__aeabi_dmul+0x1a6>
   8c3f6:	ea41 0106 	orr.w	r1, r1, r6
   8c3fa:	f095 0f00 	teq	r5, #0
   8c3fe:	bf18      	it	ne
   8c400:	4770      	bxne	lr
   8c402:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   8c406:	0052      	lsls	r2, r2, #1
   8c408:	eb43 0303 	adc.w	r3, r3, r3
   8c40c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   8c410:	bf08      	it	eq
   8c412:	3d01      	subeq	r5, #1
   8c414:	d0f7      	beq.n	8c406 <__aeabi_dmul+0x1c6>
   8c416:	ea43 0306 	orr.w	r3, r3, r6
   8c41a:	4770      	bx	lr
   8c41c:	ea94 0f0c 	teq	r4, ip
   8c420:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c424:	bf18      	it	ne
   8c426:	ea95 0f0c 	teqne	r5, ip
   8c42a:	d00c      	beq.n	8c446 <__aeabi_dmul+0x206>
   8c42c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c430:	bf18      	it	ne
   8c432:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c436:	d1d1      	bne.n	8c3dc <__aeabi_dmul+0x19c>
   8c438:	ea81 0103 	eor.w	r1, r1, r3
   8c43c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c440:	f04f 0000 	mov.w	r0, #0
   8c444:	bd70      	pop	{r4, r5, r6, pc}
   8c446:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c44a:	bf06      	itte	eq
   8c44c:	4610      	moveq	r0, r2
   8c44e:	4619      	moveq	r1, r3
   8c450:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c454:	d019      	beq.n	8c48a <__aeabi_dmul+0x24a>
   8c456:	ea94 0f0c 	teq	r4, ip
   8c45a:	d102      	bne.n	8c462 <__aeabi_dmul+0x222>
   8c45c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8c460:	d113      	bne.n	8c48a <__aeabi_dmul+0x24a>
   8c462:	ea95 0f0c 	teq	r5, ip
   8c466:	d105      	bne.n	8c474 <__aeabi_dmul+0x234>
   8c468:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   8c46c:	bf1c      	itt	ne
   8c46e:	4610      	movne	r0, r2
   8c470:	4619      	movne	r1, r3
   8c472:	d10a      	bne.n	8c48a <__aeabi_dmul+0x24a>
   8c474:	ea81 0103 	eor.w	r1, r1, r3
   8c478:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8c47c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c480:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   8c484:	f04f 0000 	mov.w	r0, #0
   8c488:	bd70      	pop	{r4, r5, r6, pc}
   8c48a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8c48e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8c492:	bd70      	pop	{r4, r5, r6, pc}

0008c494 <__aeabi_ddiv>:
   8c494:	b570      	push	{r4, r5, r6, lr}
   8c496:	f04f 0cff 	mov.w	ip, #255	; 0xff
   8c49a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8c49e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8c4a2:	bf1d      	ittte	ne
   8c4a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   8c4a8:	ea94 0f0c 	teqne	r4, ip
   8c4ac:	ea95 0f0c 	teqne	r5, ip
   8c4b0:	f000 f8a7 	bleq	8c602 <__aeabi_ddiv+0x16e>
   8c4b4:	eba4 0405 	sub.w	r4, r4, r5
   8c4b8:	ea81 0e03 	eor.w	lr, r1, r3
   8c4bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c4c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
   8c4c4:	f000 8088 	beq.w	8c5d8 <__aeabi_ddiv+0x144>
   8c4c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
   8c4cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   8c4d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   8c4d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   8c4d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
   8c4dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   8c4e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   8c4e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
   8c4e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   8c4ec:	429d      	cmp	r5, r3
   8c4ee:	bf08      	it	eq
   8c4f0:	4296      	cmpeq	r6, r2
   8c4f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   8c4f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
   8c4fa:	d202      	bcs.n	8c502 <__aeabi_ddiv+0x6e>
   8c4fc:	085b      	lsrs	r3, r3, #1
   8c4fe:	ea4f 0232 	mov.w	r2, r2, rrx
   8c502:	1ab6      	subs	r6, r6, r2
   8c504:	eb65 0503 	sbc.w	r5, r5, r3
   8c508:	085b      	lsrs	r3, r3, #1
   8c50a:	ea4f 0232 	mov.w	r2, r2, rrx
   8c50e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   8c512:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   8c516:	ebb6 0e02 	subs.w	lr, r6, r2
   8c51a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c51e:	bf22      	ittt	cs
   8c520:	1ab6      	subcs	r6, r6, r2
   8c522:	4675      	movcs	r5, lr
   8c524:	ea40 000c 	orrcs.w	r0, r0, ip
   8c528:	085b      	lsrs	r3, r3, #1
   8c52a:	ea4f 0232 	mov.w	r2, r2, rrx
   8c52e:	ebb6 0e02 	subs.w	lr, r6, r2
   8c532:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c536:	bf22      	ittt	cs
   8c538:	1ab6      	subcs	r6, r6, r2
   8c53a:	4675      	movcs	r5, lr
   8c53c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8c540:	085b      	lsrs	r3, r3, #1
   8c542:	ea4f 0232 	mov.w	r2, r2, rrx
   8c546:	ebb6 0e02 	subs.w	lr, r6, r2
   8c54a:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c54e:	bf22      	ittt	cs
   8c550:	1ab6      	subcs	r6, r6, r2
   8c552:	4675      	movcs	r5, lr
   8c554:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   8c558:	085b      	lsrs	r3, r3, #1
   8c55a:	ea4f 0232 	mov.w	r2, r2, rrx
   8c55e:	ebb6 0e02 	subs.w	lr, r6, r2
   8c562:	eb75 0e03 	sbcs.w	lr, r5, r3
   8c566:	bf22      	ittt	cs
   8c568:	1ab6      	subcs	r6, r6, r2
   8c56a:	4675      	movcs	r5, lr
   8c56c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8c570:	ea55 0e06 	orrs.w	lr, r5, r6
   8c574:	d018      	beq.n	8c5a8 <__aeabi_ddiv+0x114>
   8c576:	ea4f 1505 	mov.w	r5, r5, lsl #4
   8c57a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8c57e:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8c582:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   8c586:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   8c58a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8c58e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8c592:	d1c0      	bne.n	8c516 <__aeabi_ddiv+0x82>
   8c594:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c598:	d10b      	bne.n	8c5b2 <__aeabi_ddiv+0x11e>
   8c59a:	ea41 0100 	orr.w	r1, r1, r0
   8c59e:	f04f 0000 	mov.w	r0, #0
   8c5a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   8c5a6:	e7b6      	b.n	8c516 <__aeabi_ddiv+0x82>
   8c5a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   8c5ac:	bf04      	itt	eq
   8c5ae:	4301      	orreq	r1, r0
   8c5b0:	2000      	moveq	r0, #0
   8c5b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   8c5b6:	bf88      	it	hi
   8c5b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   8c5bc:	f63f aeaf 	bhi.w	8c31e <__aeabi_dmul+0xde>
   8c5c0:	ebb5 0c03 	subs.w	ip, r5, r3
   8c5c4:	bf04      	itt	eq
   8c5c6:	ebb6 0c02 	subseq.w	ip, r6, r2
   8c5ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   8c5ce:	f150 0000 	adcs.w	r0, r0, #0
   8c5d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   8c5d6:	bd70      	pop	{r4, r5, r6, pc}
   8c5d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   8c5dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   8c5e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   8c5e4:	bfc2      	ittt	gt
   8c5e6:	ebd4 050c 	rsbsgt	r5, r4, ip
   8c5ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   8c5ee:	bd70      	popgt	{r4, r5, r6, pc}
   8c5f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   8c5f4:	f04f 0e00 	mov.w	lr, #0
   8c5f8:	3c01      	subs	r4, #1
   8c5fa:	e690      	b.n	8c31e <__aeabi_dmul+0xde>
   8c5fc:	ea45 0e06 	orr.w	lr, r5, r6
   8c600:	e68d      	b.n	8c31e <__aeabi_dmul+0xde>
   8c602:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   8c606:	ea94 0f0c 	teq	r4, ip
   8c60a:	bf08      	it	eq
   8c60c:	ea95 0f0c 	teqeq	r5, ip
   8c610:	f43f af3b 	beq.w	8c48a <__aeabi_dmul+0x24a>
   8c614:	ea94 0f0c 	teq	r4, ip
   8c618:	d10a      	bne.n	8c630 <__aeabi_ddiv+0x19c>
   8c61a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   8c61e:	f47f af34 	bne.w	8c48a <__aeabi_dmul+0x24a>
   8c622:	ea95 0f0c 	teq	r5, ip
   8c626:	f47f af25 	bne.w	8c474 <__aeabi_dmul+0x234>
   8c62a:	4610      	mov	r0, r2
   8c62c:	4619      	mov	r1, r3
   8c62e:	e72c      	b.n	8c48a <__aeabi_dmul+0x24a>
   8c630:	ea95 0f0c 	teq	r5, ip
   8c634:	d106      	bne.n	8c644 <__aeabi_ddiv+0x1b0>
   8c636:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8c63a:	f43f aefd 	beq.w	8c438 <__aeabi_dmul+0x1f8>
   8c63e:	4610      	mov	r0, r2
   8c640:	4619      	mov	r1, r3
   8c642:	e722      	b.n	8c48a <__aeabi_dmul+0x24a>
   8c644:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8c648:	bf18      	it	ne
   8c64a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8c64e:	f47f aec5 	bne.w	8c3dc <__aeabi_dmul+0x19c>
   8c652:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   8c656:	f47f af0d 	bne.w	8c474 <__aeabi_dmul+0x234>
   8c65a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8c65e:	f47f aeeb 	bne.w	8c438 <__aeabi_dmul+0x1f8>
   8c662:	e712      	b.n	8c48a <__aeabi_dmul+0x24a>

0008c664 <__gedf2>:
   8c664:	f04f 3cff 	mov.w	ip, #4294967295
   8c668:	e006      	b.n	8c678 <__cmpdf2+0x4>
   8c66a:	bf00      	nop

0008c66c <__ledf2>:
   8c66c:	f04f 0c01 	mov.w	ip, #1
   8c670:	e002      	b.n	8c678 <__cmpdf2+0x4>
   8c672:	bf00      	nop

0008c674 <__cmpdf2>:
   8c674:	f04f 0c01 	mov.w	ip, #1
   8c678:	f84d cd04 	str.w	ip, [sp, #-4]!
   8c67c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c680:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c684:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c688:	bf18      	it	ne
   8c68a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8c68e:	d01b      	beq.n	8c6c8 <__cmpdf2+0x54>
   8c690:	b001      	add	sp, #4
   8c692:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   8c696:	bf0c      	ite	eq
   8c698:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   8c69c:	ea91 0f03 	teqne	r1, r3
   8c6a0:	bf02      	ittt	eq
   8c6a2:	ea90 0f02 	teqeq	r0, r2
   8c6a6:	2000      	moveq	r0, #0
   8c6a8:	4770      	bxeq	lr
   8c6aa:	f110 0f00 	cmn.w	r0, #0
   8c6ae:	ea91 0f03 	teq	r1, r3
   8c6b2:	bf58      	it	pl
   8c6b4:	4299      	cmppl	r1, r3
   8c6b6:	bf08      	it	eq
   8c6b8:	4290      	cmpeq	r0, r2
   8c6ba:	bf2c      	ite	cs
   8c6bc:	17d8      	asrcs	r0, r3, #31
   8c6be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8c6c2:	f040 0001 	orr.w	r0, r0, #1
   8c6c6:	4770      	bx	lr
   8c6c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c6cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c6d0:	d102      	bne.n	8c6d8 <__cmpdf2+0x64>
   8c6d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8c6d6:	d107      	bne.n	8c6e8 <__cmpdf2+0x74>
   8c6d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c6dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c6e0:	d1d6      	bne.n	8c690 <__cmpdf2+0x1c>
   8c6e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8c6e6:	d0d3      	beq.n	8c690 <__cmpdf2+0x1c>
   8c6e8:	f85d 0b04 	ldr.w	r0, [sp], #4
   8c6ec:	4770      	bx	lr
   8c6ee:	bf00      	nop

0008c6f0 <__aeabi_cdrcmple>:
   8c6f0:	4684      	mov	ip, r0
   8c6f2:	4610      	mov	r0, r2
   8c6f4:	4662      	mov	r2, ip
   8c6f6:	468c      	mov	ip, r1
   8c6f8:	4619      	mov	r1, r3
   8c6fa:	4663      	mov	r3, ip
   8c6fc:	e000      	b.n	8c700 <__aeabi_cdcmpeq>
   8c6fe:	bf00      	nop

0008c700 <__aeabi_cdcmpeq>:
   8c700:	b501      	push	{r0, lr}
   8c702:	f7ff ffb7 	bl	8c674 <__cmpdf2>
   8c706:	2800      	cmp	r0, #0
   8c708:	bf48      	it	mi
   8c70a:	f110 0f00 	cmnmi.w	r0, #0
   8c70e:	bd01      	pop	{r0, pc}

0008c710 <__aeabi_dcmpeq>:
   8c710:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c714:	f7ff fff4 	bl	8c700 <__aeabi_cdcmpeq>
   8c718:	bf0c      	ite	eq
   8c71a:	2001      	moveq	r0, #1
   8c71c:	2000      	movne	r0, #0
   8c71e:	f85d fb08 	ldr.w	pc, [sp], #8
   8c722:	bf00      	nop

0008c724 <__aeabi_dcmplt>:
   8c724:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c728:	f7ff ffea 	bl	8c700 <__aeabi_cdcmpeq>
   8c72c:	bf34      	ite	cc
   8c72e:	2001      	movcc	r0, #1
   8c730:	2000      	movcs	r0, #0
   8c732:	f85d fb08 	ldr.w	pc, [sp], #8
   8c736:	bf00      	nop

0008c738 <__aeabi_dcmple>:
   8c738:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c73c:	f7ff ffe0 	bl	8c700 <__aeabi_cdcmpeq>
   8c740:	bf94      	ite	ls
   8c742:	2001      	movls	r0, #1
   8c744:	2000      	movhi	r0, #0
   8c746:	f85d fb08 	ldr.w	pc, [sp], #8
   8c74a:	bf00      	nop

0008c74c <__aeabi_dcmpge>:
   8c74c:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c750:	f7ff ffce 	bl	8c6f0 <__aeabi_cdrcmple>
   8c754:	bf94      	ite	ls
   8c756:	2001      	movls	r0, #1
   8c758:	2000      	movhi	r0, #0
   8c75a:	f85d fb08 	ldr.w	pc, [sp], #8
   8c75e:	bf00      	nop

0008c760 <__aeabi_dcmpgt>:
   8c760:	f84d ed08 	str.w	lr, [sp, #-8]!
   8c764:	f7ff ffc4 	bl	8c6f0 <__aeabi_cdrcmple>
   8c768:	bf34      	ite	cc
   8c76a:	2001      	movcc	r0, #1
   8c76c:	2000      	movcs	r0, #0
   8c76e:	f85d fb08 	ldr.w	pc, [sp], #8
   8c772:	bf00      	nop

0008c774 <__aeabi_dcmpun>:
   8c774:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8c778:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c77c:	d102      	bne.n	8c784 <__aeabi_dcmpun+0x10>
   8c77e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   8c782:	d10a      	bne.n	8c79a <__aeabi_dcmpun+0x26>
   8c784:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   8c788:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   8c78c:	d102      	bne.n	8c794 <__aeabi_dcmpun+0x20>
   8c78e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   8c792:	d102      	bne.n	8c79a <__aeabi_dcmpun+0x26>
   8c794:	f04f 0000 	mov.w	r0, #0
   8c798:	4770      	bx	lr
   8c79a:	f04f 0001 	mov.w	r0, #1
   8c79e:	4770      	bx	lr

0008c7a0 <__aeabi_d2iz>:
   8c7a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
   8c7a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   8c7a8:	d215      	bcs.n	8c7d6 <__aeabi_d2iz+0x36>
   8c7aa:	d511      	bpl.n	8c7d0 <__aeabi_d2iz+0x30>
   8c7ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   8c7b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   8c7b4:	d912      	bls.n	8c7dc <__aeabi_d2iz+0x3c>
   8c7b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8c7ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8c7be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   8c7c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   8c7c6:	fa23 f002 	lsr.w	r0, r3, r2
   8c7ca:	bf18      	it	ne
   8c7cc:	4240      	negne	r0, r0
   8c7ce:	4770      	bx	lr
   8c7d0:	f04f 0000 	mov.w	r0, #0
   8c7d4:	4770      	bx	lr
   8c7d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8c7da:	d105      	bne.n	8c7e8 <__aeabi_d2iz+0x48>
   8c7dc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   8c7e0:	bf08      	it	eq
   8c7e2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   8c7e6:	4770      	bx	lr
   8c7e8:	f04f 0000 	mov.w	r0, #0
   8c7ec:	4770      	bx	lr
   8c7ee:	bf00      	nop

0008c7f0 <__aeabi_uldivmod>:
   8c7f0:	b953      	cbnz	r3, 8c808 <__aeabi_uldivmod+0x18>
   8c7f2:	b94a      	cbnz	r2, 8c808 <__aeabi_uldivmod+0x18>
   8c7f4:	2900      	cmp	r1, #0
   8c7f6:	bf08      	it	eq
   8c7f8:	2800      	cmpeq	r0, #0
   8c7fa:	bf1c      	itt	ne
   8c7fc:	f04f 31ff 	movne.w	r1, #4294967295
   8c800:	f04f 30ff 	movne.w	r0, #4294967295
   8c804:	f000 b976 	b.w	8caf4 <__aeabi_idiv0>
   8c808:	f1ad 0c08 	sub.w	ip, sp, #8
   8c80c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   8c810:	f000 f806 	bl	8c820 <__udivmoddi4>
   8c814:	f8dd e004 	ldr.w	lr, [sp, #4]
   8c818:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   8c81c:	b004      	add	sp, #16
   8c81e:	4770      	bx	lr

0008c820 <__udivmoddi4>:
   8c820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   8c824:	9e08      	ldr	r6, [sp, #32]
   8c826:	460d      	mov	r5, r1
   8c828:	4604      	mov	r4, r0
   8c82a:	4688      	mov	r8, r1
   8c82c:	2b00      	cmp	r3, #0
   8c82e:	d14d      	bne.n	8c8cc <__udivmoddi4+0xac>
   8c830:	428a      	cmp	r2, r1
   8c832:	4694      	mov	ip, r2
   8c834:	d968      	bls.n	8c908 <__udivmoddi4+0xe8>
   8c836:	fab2 f282 	clz	r2, r2
   8c83a:	b152      	cbz	r2, 8c852 <__udivmoddi4+0x32>
   8c83c:	fa01 f302 	lsl.w	r3, r1, r2
   8c840:	f1c2 0120 	rsb	r1, r2, #32
   8c844:	fa20 f101 	lsr.w	r1, r0, r1
   8c848:	fa0c fc02 	lsl.w	ip, ip, r2
   8c84c:	ea41 0803 	orr.w	r8, r1, r3
   8c850:	4094      	lsls	r4, r2
   8c852:	ea4f 411c 	mov.w	r1, ip, lsr #16
   8c856:	fbb8 f7f1 	udiv	r7, r8, r1
   8c85a:	fa1f fe8c 	uxth.w	lr, ip
   8c85e:	fb01 8817 	mls	r8, r1, r7, r8
   8c862:	fb07 f00e 	mul.w	r0, r7, lr
   8c866:	0c23      	lsrs	r3, r4, #16
   8c868:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   8c86c:	4298      	cmp	r0, r3
   8c86e:	d90a      	bls.n	8c886 <__udivmoddi4+0x66>
   8c870:	eb1c 0303 	adds.w	r3, ip, r3
   8c874:	f107 35ff 	add.w	r5, r7, #4294967295
   8c878:	f080 811e 	bcs.w	8cab8 <__udivmoddi4+0x298>
   8c87c:	4298      	cmp	r0, r3
   8c87e:	f240 811b 	bls.w	8cab8 <__udivmoddi4+0x298>
   8c882:	3f02      	subs	r7, #2
   8c884:	4463      	add	r3, ip
   8c886:	1a1b      	subs	r3, r3, r0
   8c888:	fbb3 f0f1 	udiv	r0, r3, r1
   8c88c:	fb01 3310 	mls	r3, r1, r0, r3
   8c890:	fb00 fe0e 	mul.w	lr, r0, lr
   8c894:	b2a4      	uxth	r4, r4
   8c896:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   8c89a:	45a6      	cmp	lr, r4
   8c89c:	d90a      	bls.n	8c8b4 <__udivmoddi4+0x94>
   8c89e:	eb1c 0404 	adds.w	r4, ip, r4
   8c8a2:	f100 33ff 	add.w	r3, r0, #4294967295
   8c8a6:	f080 8109 	bcs.w	8cabc <__udivmoddi4+0x29c>
   8c8aa:	45a6      	cmp	lr, r4
   8c8ac:	f240 8106 	bls.w	8cabc <__udivmoddi4+0x29c>
   8c8b0:	4464      	add	r4, ip
   8c8b2:	3802      	subs	r0, #2
   8c8b4:	2100      	movs	r1, #0
   8c8b6:	eba4 040e 	sub.w	r4, r4, lr
   8c8ba:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
   8c8be:	b11e      	cbz	r6, 8c8c8 <__udivmoddi4+0xa8>
   8c8c0:	2300      	movs	r3, #0
   8c8c2:	40d4      	lsrs	r4, r2
   8c8c4:	e9c6 4300 	strd	r4, r3, [r6]
   8c8c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8c8cc:	428b      	cmp	r3, r1
   8c8ce:	d908      	bls.n	8c8e2 <__udivmoddi4+0xc2>
   8c8d0:	2e00      	cmp	r6, #0
   8c8d2:	f000 80ee 	beq.w	8cab2 <__udivmoddi4+0x292>
   8c8d6:	2100      	movs	r1, #0
   8c8d8:	e9c6 0500 	strd	r0, r5, [r6]
   8c8dc:	4608      	mov	r0, r1
   8c8de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   8c8e2:	fab3 f183 	clz	r1, r3
   8c8e6:	2900      	cmp	r1, #0
   8c8e8:	d14a      	bne.n	8c980 <__udivmoddi4+0x160>
   8c8ea:	42ab      	cmp	r3, r5
   8c8ec:	d302      	bcc.n	8c8f4 <__udivmoddi4+0xd4>
   8c8ee:	4282      	cmp	r2, r0
   8c8f0:	f200 80fc 	bhi.w	8caec <__udivmoddi4+0x2cc>
   8c8f4:	1a84      	subs	r4, r0, r2
   8c8f6:	eb65 0303 	sbc.w	r3, r5, r3
   8c8fa:	2001      	movs	r0, #1
   8c8fc:	4698      	mov	r8, r3
   8c8fe:	2e00      	cmp	r6, #0
   8c900:	d0e2      	beq.n	8c8c8 <__udivmoddi4+0xa8>
   8c902:	e9c6 4800 	strd	r4, r8, [r6]
   8c906:	e7df      	b.n	8c8c8 <__udivmoddi4+0xa8>
   8c908:	b902      	cbnz	r2, 8c90c <__udivmoddi4+0xec>
   8c90a:	deff      	udf	#255	; 0xff
   8c90c:	fab2 f282 	clz	r2, r2
   8c910:	2a00      	cmp	r2, #0
   8c912:	f040 8091 	bne.w	8ca38 <__udivmoddi4+0x218>
   8c916:	eba1 000c 	sub.w	r0, r1, ip
   8c91a:	2101      	movs	r1, #1
   8c91c:	ea4f 471c 	mov.w	r7, ip, lsr #16
   8c920:	fa1f fe8c 	uxth.w	lr, ip
   8c924:	fbb0 f3f7 	udiv	r3, r0, r7
   8c928:	fb07 0013 	mls	r0, r7, r3, r0
   8c92c:	0c25      	lsrs	r5, r4, #16
   8c92e:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   8c932:	fb0e f003 	mul.w	r0, lr, r3
   8c936:	42a8      	cmp	r0, r5
   8c938:	d908      	bls.n	8c94c <__udivmoddi4+0x12c>
   8c93a:	eb1c 0505 	adds.w	r5, ip, r5
   8c93e:	f103 38ff 	add.w	r8, r3, #4294967295
   8c942:	d202      	bcs.n	8c94a <__udivmoddi4+0x12a>
   8c944:	42a8      	cmp	r0, r5
   8c946:	f200 80ce 	bhi.w	8cae6 <__udivmoddi4+0x2c6>
   8c94a:	4643      	mov	r3, r8
   8c94c:	1a2d      	subs	r5, r5, r0
   8c94e:	fbb5 f0f7 	udiv	r0, r5, r7
   8c952:	fb07 5510 	mls	r5, r7, r0, r5
   8c956:	fb0e fe00 	mul.w	lr, lr, r0
   8c95a:	b2a4      	uxth	r4, r4
   8c95c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
   8c960:	45a6      	cmp	lr, r4
   8c962:	d908      	bls.n	8c976 <__udivmoddi4+0x156>
   8c964:	eb1c 0404 	adds.w	r4, ip, r4
   8c968:	f100 35ff 	add.w	r5, r0, #4294967295
   8c96c:	d202      	bcs.n	8c974 <__udivmoddi4+0x154>
   8c96e:	45a6      	cmp	lr, r4
   8c970:	f200 80b6 	bhi.w	8cae0 <__udivmoddi4+0x2c0>
   8c974:	4628      	mov	r0, r5
   8c976:	eba4 040e 	sub.w	r4, r4, lr
   8c97a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8c97e:	e79e      	b.n	8c8be <__udivmoddi4+0x9e>
   8c980:	f1c1 0720 	rsb	r7, r1, #32
   8c984:	408b      	lsls	r3, r1
   8c986:	fa22 fc07 	lsr.w	ip, r2, r7
   8c98a:	ea4c 0c03 	orr.w	ip, ip, r3
   8c98e:	fa25 fa07 	lsr.w	sl, r5, r7
   8c992:	ea4f 491c 	mov.w	r9, ip, lsr #16
   8c996:	fbba f8f9 	udiv	r8, sl, r9
   8c99a:	fa20 f307 	lsr.w	r3, r0, r7
   8c99e:	fb09 aa18 	mls	sl, r9, r8, sl
   8c9a2:	408d      	lsls	r5, r1
   8c9a4:	fa1f fe8c 	uxth.w	lr, ip
   8c9a8:	431d      	orrs	r5, r3
   8c9aa:	fa00 f301 	lsl.w	r3, r0, r1
   8c9ae:	fb08 f00e 	mul.w	r0, r8, lr
   8c9b2:	0c2c      	lsrs	r4, r5, #16
   8c9b4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
   8c9b8:	42a0      	cmp	r0, r4
   8c9ba:	fa02 f201 	lsl.w	r2, r2, r1
   8c9be:	d90b      	bls.n	8c9d8 <__udivmoddi4+0x1b8>
   8c9c0:	eb1c 0404 	adds.w	r4, ip, r4
   8c9c4:	f108 3aff 	add.w	sl, r8, #4294967295
   8c9c8:	f080 8088 	bcs.w	8cadc <__udivmoddi4+0x2bc>
   8c9cc:	42a0      	cmp	r0, r4
   8c9ce:	f240 8085 	bls.w	8cadc <__udivmoddi4+0x2bc>
   8c9d2:	f1a8 0802 	sub.w	r8, r8, #2
   8c9d6:	4464      	add	r4, ip
   8c9d8:	1a24      	subs	r4, r4, r0
   8c9da:	fbb4 f0f9 	udiv	r0, r4, r9
   8c9de:	fb09 4410 	mls	r4, r9, r0, r4
   8c9e2:	fb00 fe0e 	mul.w	lr, r0, lr
   8c9e6:	b2ad      	uxth	r5, r5
   8c9e8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
   8c9ec:	45a6      	cmp	lr, r4
   8c9ee:	d908      	bls.n	8ca02 <__udivmoddi4+0x1e2>
   8c9f0:	eb1c 0404 	adds.w	r4, ip, r4
   8c9f4:	f100 35ff 	add.w	r5, r0, #4294967295
   8c9f8:	d26c      	bcs.n	8cad4 <__udivmoddi4+0x2b4>
   8c9fa:	45a6      	cmp	lr, r4
   8c9fc:	d96a      	bls.n	8cad4 <__udivmoddi4+0x2b4>
   8c9fe:	3802      	subs	r0, #2
   8ca00:	4464      	add	r4, ip
   8ca02:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
   8ca06:	fba0 9502 	umull	r9, r5, r0, r2
   8ca0a:	eba4 040e 	sub.w	r4, r4, lr
   8ca0e:	42ac      	cmp	r4, r5
   8ca10:	46c8      	mov	r8, r9
   8ca12:	46ae      	mov	lr, r5
   8ca14:	d356      	bcc.n	8cac4 <__udivmoddi4+0x2a4>
   8ca16:	d053      	beq.n	8cac0 <__udivmoddi4+0x2a0>
   8ca18:	2e00      	cmp	r6, #0
   8ca1a:	d069      	beq.n	8caf0 <__udivmoddi4+0x2d0>
   8ca1c:	ebb3 0208 	subs.w	r2, r3, r8
   8ca20:	eb64 040e 	sbc.w	r4, r4, lr
   8ca24:	fa22 f301 	lsr.w	r3, r2, r1
   8ca28:	fa04 f707 	lsl.w	r7, r4, r7
   8ca2c:	431f      	orrs	r7, r3
   8ca2e:	40cc      	lsrs	r4, r1
   8ca30:	e9c6 7400 	strd	r7, r4, [r6]
   8ca34:	2100      	movs	r1, #0
   8ca36:	e747      	b.n	8c8c8 <__udivmoddi4+0xa8>
   8ca38:	fa0c fc02 	lsl.w	ip, ip, r2
   8ca3c:	f1c2 0120 	rsb	r1, r2, #32
   8ca40:	fa25 f301 	lsr.w	r3, r5, r1
   8ca44:	ea4f 471c 	mov.w	r7, ip, lsr #16
   8ca48:	fa20 f101 	lsr.w	r1, r0, r1
   8ca4c:	4095      	lsls	r5, r2
   8ca4e:	430d      	orrs	r5, r1
   8ca50:	fbb3 f1f7 	udiv	r1, r3, r7
   8ca54:	fb07 3311 	mls	r3, r7, r1, r3
   8ca58:	fa1f fe8c 	uxth.w	lr, ip
   8ca5c:	0c28      	lsrs	r0, r5, #16
   8ca5e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
   8ca62:	fb01 f30e 	mul.w	r3, r1, lr
   8ca66:	4283      	cmp	r3, r0
   8ca68:	fa04 f402 	lsl.w	r4, r4, r2
   8ca6c:	d908      	bls.n	8ca80 <__udivmoddi4+0x260>
   8ca6e:	eb1c 0000 	adds.w	r0, ip, r0
   8ca72:	f101 38ff 	add.w	r8, r1, #4294967295
   8ca76:	d22f      	bcs.n	8cad8 <__udivmoddi4+0x2b8>
   8ca78:	4283      	cmp	r3, r0
   8ca7a:	d92d      	bls.n	8cad8 <__udivmoddi4+0x2b8>
   8ca7c:	3902      	subs	r1, #2
   8ca7e:	4460      	add	r0, ip
   8ca80:	1ac0      	subs	r0, r0, r3
   8ca82:	fbb0 f3f7 	udiv	r3, r0, r7
   8ca86:	fb07 0013 	mls	r0, r7, r3, r0
   8ca8a:	b2ad      	uxth	r5, r5
   8ca8c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
   8ca90:	fb03 f00e 	mul.w	r0, r3, lr
   8ca94:	42a8      	cmp	r0, r5
   8ca96:	d908      	bls.n	8caaa <__udivmoddi4+0x28a>
   8ca98:	eb1c 0505 	adds.w	r5, ip, r5
   8ca9c:	f103 38ff 	add.w	r8, r3, #4294967295
   8caa0:	d216      	bcs.n	8cad0 <__udivmoddi4+0x2b0>
   8caa2:	42a8      	cmp	r0, r5
   8caa4:	d914      	bls.n	8cad0 <__udivmoddi4+0x2b0>
   8caa6:	3b02      	subs	r3, #2
   8caa8:	4465      	add	r5, ip
   8caaa:	1a28      	subs	r0, r5, r0
   8caac:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   8cab0:	e738      	b.n	8c924 <__udivmoddi4+0x104>
   8cab2:	4631      	mov	r1, r6
   8cab4:	4630      	mov	r0, r6
   8cab6:	e707      	b.n	8c8c8 <__udivmoddi4+0xa8>
   8cab8:	462f      	mov	r7, r5
   8caba:	e6e4      	b.n	8c886 <__udivmoddi4+0x66>
   8cabc:	4618      	mov	r0, r3
   8cabe:	e6f9      	b.n	8c8b4 <__udivmoddi4+0x94>
   8cac0:	454b      	cmp	r3, r9
   8cac2:	d2a9      	bcs.n	8ca18 <__udivmoddi4+0x1f8>
   8cac4:	ebb9 0802 	subs.w	r8, r9, r2
   8cac8:	eb65 0e0c 	sbc.w	lr, r5, ip
   8cacc:	3801      	subs	r0, #1
   8cace:	e7a3      	b.n	8ca18 <__udivmoddi4+0x1f8>
   8cad0:	4643      	mov	r3, r8
   8cad2:	e7ea      	b.n	8caaa <__udivmoddi4+0x28a>
   8cad4:	4628      	mov	r0, r5
   8cad6:	e794      	b.n	8ca02 <__udivmoddi4+0x1e2>
   8cad8:	4641      	mov	r1, r8
   8cada:	e7d1      	b.n	8ca80 <__udivmoddi4+0x260>
   8cadc:	46d0      	mov	r8, sl
   8cade:	e77b      	b.n	8c9d8 <__udivmoddi4+0x1b8>
   8cae0:	4464      	add	r4, ip
   8cae2:	3802      	subs	r0, #2
   8cae4:	e747      	b.n	8c976 <__udivmoddi4+0x156>
   8cae6:	3b02      	subs	r3, #2
   8cae8:	4465      	add	r5, ip
   8caea:	e72f      	b.n	8c94c <__udivmoddi4+0x12c>
   8caec:	4608      	mov	r0, r1
   8caee:	e706      	b.n	8c8fe <__udivmoddi4+0xde>
   8caf0:	4631      	mov	r1, r6
   8caf2:	e6e9      	b.n	8c8c8 <__udivmoddi4+0xa8>

0008caf4 <__aeabi_idiv0>:
   8caf4:	4770      	bx	lr
   8caf6:	bf00      	nop
   8caf8:	78383025 	.word	0x78383025
   8cafc:	00000000 	.word	0x00000000

0008cb00 <BUILD_DATE>:
   8cb00:	20626546 32203320 00333230              Feb  3 2023.

0008cb0c <BUILD_TIME>:
   8cb0c:	313a3731 39343a38 00000000 00000000     17:18:49........
   8cb1c:	00000000 00000000 aaaaaa00 aaaaaaaa     ................
   8cb2c:	eeeeeeaa eeeeeeee fffffeee ffffffff     ................
   8cb3c:	ffffffff dfbf7fff fdfbf7ef dfbf7efc     .............~..
   8cb4c:	fdfbf7ef 0000007e                       ....~...

0008cb54 <CSWTCH.109>:
   8cb54:	00010102                                ....

0008cb58 <_global_impure_ptr>:
   8cb58:	20070b38 00464e49 00666e69 004e414e     8.. INF.inf.NAN.
   8cb68:	006e616e 33323130 37363534 62613938     nan.0123456789ab
   8cb78:	66656463 00000000 33323130 37363534     cdef....01234567
   8cb88:	42413938 46454443 00000000 6c756e28     89ABCDEF....(nul
   8cb98:	0000296c 00000030                       l)..0...

0008cba0 <blanks.1>:
   8cba0:	20202020 20202020 20202020 20202020                     

0008cbb0 <zeroes.0>:
   8cbb0:	30303030 30303030 30303030 30303030     0000000000000000
   8cbc0:	004e614e 69666e49 7974696e 00000000     NaN.Infinity....
   8cbd0:	6c6c6142 7320636f 65636375 64656465     Balloc succeeded
   8cbe0:	00000000 746e6d2f 726f772f 6170736b     ..../mnt/workspa
   8cbf0:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8cc00:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8cc10:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8cc20:	656e696c 3833332d 3230325f 31303131     line-338_2021101
   8cc30:	36315f38 31353433 33303236 6372732f     8_1634516203/src
   8cc40:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8cc50:	2f636269 6c647473 642f6269 2e616f74     ibc/stdlib/dtoa.
   8cc60:	00000063 746e6d2f 726f772f 6170736b     c.../mnt/workspa
   8cc70:	772f6563 736b726f 65636170 4343472f     ce/workspace/GCC
   8cc80:	2d30312d 65706970 656e696c 6e656a2f     -10-pipeline/jen
   8cc90:	736e696b 4343472d 2d30312d 65706970     kins-GCC-10-pipe
   8cca0:	656e696c 3833332d 3230325f 31303131     line-338_2021101
   8ccb0:	36315f38 31353433 33303236 6372732f     8_1634516203/src
   8ccc0:	77656e2f 2f62696c 6c77656e 6c2f6269     /newlib/newlib/l
   8ccd0:	2f636269 6c647473 6d2f6269 63657270     ibc/stdlib/mprec
   8cce0:	0000632e 00000000                       .c......

0008cce8 <__mprec_bigtens>:
   8cce8:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   8ccf8:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   8cd08:	7f73bf3c 75154fdd                       <.s..O.u

0008cd10 <__mprec_tens>:
   8cd10:	00000000 3ff00000 00000000 40240000     .......?......$@
   8cd20:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   8cd30:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   8cd40:	00000000 412e8480 00000000 416312d0     .......A......cA
   8cd50:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   8cd60:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   8cd70:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   8cd80:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   8cd90:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   8cda0:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   8cdb0:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   8cdc0:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   8cdd0:	79d99db4 44ea7843                       ...yCx.D

0008cdd8 <p05.0>:
   8cdd8:	00000005 00000019 0000007d 7566202c     ........}..., fu
   8cde8:	6974636e 203a6e6f 00000000 65737361     nction: ....asse
   8cdf8:	6f697472 2522206e 66202273 656c6961     rtion "%s" faile
   8ce08:	66203a64 20656c69 22732522 696c202c     d: file "%s", li
   8ce18:	2520656e 25732564 00000a73 00000043     ne %d%s%s...C...
   8ce28:	49534f50 00000058 0000002e              POSIX.......

0008ce34 <blanks.1>:
   8ce34:	20202020 20202020 20202020 20202020                     

0008ce44 <zeroes.0>:
   8ce44:	30303030 30303030 30303030 30303030     0000000000000000

0008ce54 <_ctype_>:
   8ce54:	20202000 20202020 28282020 20282828     .         ((((( 
   8ce64:	20202020 20202020 20202020 20202020                     
   8ce74:	10108820 10101010 10101010 10101010      ...............
   8ce84:	04040410 04040404 10040404 10101010     ................
   8ce94:	41411010 41414141 01010101 01010101     ..AAAAAA........
   8cea4:	01010101 01010101 01010101 10101010     ................
   8ceb4:	42421010 42424242 02020202 02020202     ..BBBBBB........
   8cec4:	02020202 02020202 02020202 10101010     ................
   8ced4:	00000020 00000000 00000000 00000000      ...............
   8cee4:	00000000 00000000 00000000 00000000     ................
   8cef4:	00000000 00000000 00000000 00000000     ................
   8cf04:	00000000 00000000 00000000 00000000     ................
   8cf14:	00000000 00000000 00000000 00000000     ................
   8cf24:	00000000 00000000 00000000 00000000     ................
   8cf34:	00000000 00000000 00000000 00000000     ................
   8cf44:	00000000 00000000 00000000 00000000     ................
   8cf54:	00000000                                ....

0008cf58 <_init>:
   8cf58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cf5a:	bf00      	nop
   8cf5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8cf5e:	bc08      	pop	{r3}
   8cf60:	469e      	mov	lr, r3
   8cf62:	4770      	bx	lr

0008cf64 <__init_array_start>:
   8cf64:	00087b49 	.word	0x00087b49

0008cf68 <__frame_dummy_init_array_entry>:
   8cf68:	00080119                                ....

0008cf6c <_fini>:
   8cf6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8cf6e:	bf00      	nop
   8cf70:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8cf72:	bc08      	pop	{r3}
   8cf74:	469e      	mov	lr, r3
   8cf76:	4770      	bx	lr

0008cf78 <__do_global_dtors_aux_fini_array_entry>:
   8cf78:	00f5 0008                                   ....

Disassembly of section .relocate:

20070000 <SystemInit>:
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4819      	ldr	r0, [pc, #100]	; (2007006c <SystemInit+0x6c>)
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070006:	491a      	ldr	r1, [pc, #104]	; (20070070 <SystemInit+0x70>)
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
20070008:	4a1a      	ldr	r2, [pc, #104]	; (20070074 <SystemInit+0x74>)
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000a:	6003      	str	r3, [r0, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	600b      	str	r3, [r1, #0]
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	6a13      	ldr	r3, [r2, #32]
20070010:	01db      	lsls	r3, r3, #7
20070012:	d404      	bmi.n	2007001e <SystemInit+0x1e>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070014:	4b18      	ldr	r3, [pc, #96]	; (20070078 <SystemInit+0x78>)
20070016:	6213      	str	r3, [r2, #32]
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
20070018:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007001a:	07d8      	lsls	r0, r3, #31
2007001c:	d5fc      	bpl.n	20070018 <SystemInit+0x18>
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
2007001e:	4a15      	ldr	r2, [pc, #84]	; (20070074 <SystemInit+0x74>)
20070020:	4b16      	ldr	r3, [pc, #88]	; (2007007c <SystemInit+0x7c>)
20070022:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
20070024:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070026:	03d9      	lsls	r1, r3, #15
20070028:	d5fc      	bpl.n	20070024 <SystemInit+0x24>
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2007002a:	6b13      	ldr	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2007002c:	4811      	ldr	r0, [pc, #68]	; (20070074 <SystemInit+0x74>)
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
2007002e:	f023 0303 	bic.w	r3, r3, #3
20070032:	f043 0301 	orr.w	r3, r3, #1
20070036:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070038:	6e83      	ldr	r3, [r0, #104]	; 0x68
2007003a:	071b      	lsls	r3, r3, #28
2007003c:	d5fc      	bpl.n	20070038 <SystemInit+0x38>
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007003e:	4b10      	ldr	r3, [pc, #64]	; (20070080 <SystemInit+0x80>)
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070040:	490c      	ldr	r1, [pc, #48]	; (20070074 <SystemInit+0x74>)
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070042:	6283      	str	r3, [r0, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070044:	6e8b      	ldr	r3, [r1, #104]	; 0x68
20070046:	0798      	lsls	r0, r3, #30
20070048:	d5fc      	bpl.n	20070044 <SystemInit+0x44>
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007004a:	2311      	movs	r3, #17
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2007004c:	4a09      	ldr	r2, [pc, #36]	; (20070074 <SystemInit+0x74>)
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007004e:	630b      	str	r3, [r1, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070050:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070052:	0719      	lsls	r1, r3, #28
20070054:	d5fc      	bpl.n	20070050 <SystemInit+0x50>
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070056:	2312      	movs	r3, #18
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070058:	4906      	ldr	r1, [pc, #24]	; (20070074 <SystemInit+0x74>)
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007005a:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
2007005c:	6e8b      	ldr	r3, [r1, #104]	; 0x68
2007005e:	071b      	lsls	r3, r3, #28
20070060:	d5fc      	bpl.n	2007005c <SystemInit+0x5c>
	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070062:	4b08      	ldr	r3, [pc, #32]	; (20070084 <SystemInit+0x84>)
20070064:	4a08      	ldr	r2, [pc, #32]	; (20070088 <SystemInit+0x88>)
20070066:	601a      	str	r2, [r3, #0]
}
20070068:	4770      	bx	lr
2007006a:	bf00      	nop
2007006c:	400e0a00 	.word	0x400e0a00
20070070:	400e0c00 	.word	0x400e0c00
20070074:	400e0600 	.word	0x400e0600
20070078:	00370809 	.word	0x00370809
2007007c:	01370809 	.word	0x01370809
20070080:	200d3f01 	.word	0x200d3f01
20070084:	20070948 	.word	0x20070948
20070088:	0501bd00 	.word	0x0501bd00

2007008c <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
2007008c:	4b19      	ldr	r3, [pc, #100]	; (200700f4 <system_init_flash+0x68>)
2007008e:	4298      	cmp	r0, r3
20070090:	d805      	bhi.n	2007009e <system_init_flash+0x12>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20070092:	2300      	movs	r3, #0
20070094:	4918      	ldr	r1, [pc, #96]	; (200700f8 <system_init_flash+0x6c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
20070096:	4a19      	ldr	r2, [pc, #100]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
20070098:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
2007009a:	6013      	str	r3, [r2, #0]
2007009c:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
2007009e:	4b18      	ldr	r3, [pc, #96]	; (20070100 <system_init_flash+0x74>)
200700a0:	4298      	cmp	r0, r3
200700a2:	d806      	bhi.n	200700b2 <system_init_flash+0x26>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700a4:	f44f 7380 	mov.w	r3, #256	; 0x100
200700a8:	4913      	ldr	r1, [pc, #76]	; (200700f8 <system_init_flash+0x6c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700aa:	4a14      	ldr	r2, [pc, #80]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ac:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700ae:	6013      	str	r3, [r2, #0]
200700b0:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700b2:	4b14      	ldr	r3, [pc, #80]	; (20070104 <system_init_flash+0x78>)
200700b4:	4298      	cmp	r0, r3
200700b6:	d309      	bcc.n	200700cc <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700b8:	4b13      	ldr	r3, [pc, #76]	; (20070108 <system_init_flash+0x7c>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d80d      	bhi.n	200700da <system_init_flash+0x4e>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700be:	f44f 7340 	mov.w	r3, #768	; 0x300
200700c2:	490d      	ldr	r1, [pc, #52]	; (200700f8 <system_init_flash+0x6c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700c4:	4a0d      	ldr	r2, [pc, #52]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700c6:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700c8:	6013      	str	r3, [r2, #0]
200700ca:	4770      	bx	lr
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700cc:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d0:	4909      	ldr	r1, [pc, #36]	; (200700f8 <system_init_flash+0x6c>)
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700d2:	4a0a      	ldr	r2, [pc, #40]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700da:	4b0c      	ldr	r3, [pc, #48]	; (2007010c <system_init_flash+0x80>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700dc:	4906      	ldr	r1, [pc, #24]	; (200700f8 <system_init_flash+0x6c>)
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700de:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700e0:	bf94      	ite	ls
200700e2:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700e6:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ea:	4a04      	ldr	r2, [pc, #16]	; (200700fc <system_init_flash+0x70>)
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
200700ec:	600b      	str	r3, [r1, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
200700ee:	6013      	str	r3, [r2, #0]
	}
}
200700f0:	4770      	bx	lr
200700f2:	bf00      	nop
200700f4:	0121eabf 	.word	0x0121eabf
200700f8:	400e0a00 	.word	0x400e0a00
200700fc:	400e0c00 	.word	0x400e0c00
20070100:	02faf07f 	.word	0x02faf07f
20070104:	03d09000 	.word	0x03d09000
20070108:	04c4b3ff 	.word	0x04c4b3ff
2007010c:	055d4a7f 	.word	0x055d4a7f

20070110 <efc_perform_read_sequence>:
__no_inline
RAMFUNC
uint32_t efc_perform_read_sequence(Efc *p_efc,
		uint32_t ul_cmd_st, uint32_t ul_cmd_sp,
		uint32_t *p_ul_buf, uint32_t ul_size)
{
20070110:	b530      	push	{r4, r5, lr}
	volatile uint32_t ul_status;
	uint32_t ul_cnt;

#if (SAM3U4 || SAM3XA || SAM4SD16 || SAM4SD32 || SAM4C32 || SAM4CMS32|| SAM4CMP32)
	uint32_t *p_ul_data =
			(uint32_t *) ((p_efc == EFC0) ?
20070112:	4c20      	ldr	r4, [pc, #128]	; (20070194 <efc_perform_read_sequence+0x84>)
{
20070114:	b083      	sub	sp, #12
			(uint32_t *) ((p_efc == EFC0) ?
20070116:	42a0      	cmp	r0, r4
20070118:	bf0c      	ite	eq
2007011a:	f44f 2c00 	moveq.w	ip, #524288	; 0x80000
2007011e:	f44f 2c40 	movne.w	ip, #786432	; 0xc0000
{
20070122:	9d06      	ldr	r5, [sp, #24]
	uint32_t *p_ul_data = (uint32_t *) READ_BUFF_ADDR;
#else
	return EFC_RC_NOT_SUPPORT;
#endif

	if (p_ul_buf == NULL) {
20070124:	b393      	cbz	r3, 2007018c <efc_perform_read_sequence+0x7c>
20070126:	4686      	mov	lr, r0
		return EFC_RC_INVALID;
	}

	p_efc->EEFC_FMR |= (0x1u << 16);
20070128:	6800      	ldr	r0, [r0, #0]
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
	p_efc->EEFC_FCR = EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
#else
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
			| EEFC_FCR_FCMD(ul_cmd_st);
2007012a:	b2c9      	uxtb	r1, r1
2007012c:	f041 41b4 	orr.w	r1, r1, #1509949440	; 0x5a000000
	p_efc->EEFC_FMR |= (0x1u << 16);
20070130:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
20070134:	f8ce 0000 	str.w	r0, [lr]
	p_efc->EEFC_FCR = EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0)
20070138:	f8ce 1004 	str.w	r1, [lr, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register
	 * (EEFC_FSR) falls.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
2007013c:	f8de 1008 	ldr.w	r1, [lr, #8]
20070140:	9101      	str	r1, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) == EEFC_FSR_FRDY);
20070142:	9801      	ldr	r0, [sp, #4]
20070144:	f010 0001 	ands.w	r0, r0, #1
20070148:	d1f8      	bne.n	2007013c <efc_perform_read_sequence+0x2c>

	/* The data is located in the first address of the Flash
	 * memory mapping.
	 */
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007014a:	b165      	cbz	r5, 20070166 <efc_perform_read_sequence+0x56>
2007014c:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
20070150:	f1ac 0104 	sub.w	r1, ip, #4
20070154:	3b04      	subs	r3, #4
20070156:	f1a5 0c04 	sub.w	ip, r5, #4
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
2007015a:	f851 4f04 	ldr.w	r4, [r1, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
2007015e:	4561      	cmp	r1, ip
		p_ul_buf[ul_cnt] = p_ul_data[ul_cnt];
20070160:	f843 4f04 	str.w	r4, [r3, #4]!
	for (ul_cnt = 0; ul_cnt < ul_size; ul_cnt++) {
20070164:	d1f9      	bne.n	2007015a <efc_perform_read_sequence+0x4a>
	 SAMV71 || SAMV70 || SAMS70 || SAME70)
			EEFC_FCR_FKEY_PASSWD | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
#else
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
			EEFC_FCR_FCMD(ul_cmd_sp);
20070166:	b2d2      	uxtb	r2, r2
			EEFC_FCR_FKEY(FWP_KEY) | EEFC_FCR_FARG(0) |
20070168:	f042 42b4 	orr.w	r2, r2, #1509949440	; 0x5a000000
	p_efc->EEFC_FCR =
2007016c:	f8ce 2004 	str.w	r2, [lr, #4]
#endif
	/* Wait for the FRDY bit in the Flash Programming Status Register (EEFC_FSR)
	 * rises.
	 */
	do {
		ul_status = p_efc->EEFC_FSR;
20070170:	f8de 3008 	ldr.w	r3, [lr, #8]
20070174:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
20070176:	9b01      	ldr	r3, [sp, #4]
20070178:	07db      	lsls	r3, r3, #31
2007017a:	d5f9      	bpl.n	20070170 <efc_perform_read_sequence+0x60>

	p_efc->EEFC_FMR &= ~(0x1u << 16);
2007017c:	f8de 3000 	ldr.w	r3, [lr]
20070180:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
20070184:	f8ce 3000 	str.w	r3, [lr]

	return EFC_RC_OK;
}
20070188:	b003      	add	sp, #12
2007018a:	bd30      	pop	{r4, r5, pc}
		return EFC_RC_INVALID;
2007018c:	2002      	movs	r0, #2
}
2007018e:	b003      	add	sp, #12
20070190:	bd30      	pop	{r4, r5, pc}
20070192:	bf00      	nop
20070194:	400e0a00 	.word	0x400e0a00

20070198 <efc_write_fmr>:
 */
__no_inline
RAMFUNC
void efc_write_fmr(Efc *p_efc, uint32_t ul_fmr)
{
	p_efc->EEFC_FMR = ul_fmr;
20070198:	6001      	str	r1, [r0, #0]
}
2007019a:	4770      	bx	lr

2007019c <efc_perform_fcr>:
 * \return The current status.
 */
__no_inline
RAMFUNC
uint32_t efc_perform_fcr(Efc *p_efc, uint32_t ul_fcr)
{
2007019c:	b082      	sub	sp, #8
	volatile uint32_t ul_status;

	p_efc->EEFC_FCR = ul_fcr;
2007019e:	6041      	str	r1, [r0, #4]
	do {
		ul_status = p_efc->EEFC_FSR;
200701a0:	6883      	ldr	r3, [r0, #8]
200701a2:	9301      	str	r3, [sp, #4]
	} while ((ul_status & EEFC_FSR_FRDY) != EEFC_FSR_FRDY);
200701a4:	9b01      	ldr	r3, [sp, #4]
200701a6:	07db      	lsls	r3, r3, #31
200701a8:	d5fa      	bpl.n	200701a0 <efc_perform_fcr+0x4>

	return (ul_status & EEFC_ERROR_FLAGS);
200701aa:	9801      	ldr	r0, [sp, #4]
}
200701ac:	f000 0006 	and.w	r0, r0, #6
200701b0:	b002      	add	sp, #8
200701b2:	4770      	bx	lr

200701b4 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
200701b4:	f3bf 8f5f 	dmb	sy
200701b8:	3801      	subs	r0, #1
200701ba:	d1fb      	bne.n	200701b4 <portable_delay_cycles>
		"loop: DMB	\n"
		"SUBS R0, R0, #1  \n"
		"BNE.N loop         "
	);
}
200701bc:	4770      	bx	lr
200701be:	0000      	movs	r0, r0

200701c0 <pin_spi1_cs>:
200701c0:	ffff ffff                                   ....

200701c4 <pin_spi1_miso>:
200701c4:	ffff ffff                                   ....

200701c8 <pin_spi1_mosi>:
200701c8:	ffff ffff                                   ....

200701cc <pin_spi1_sck>:
200701cc:	ffff ffff                                   ....

200701d0 <usb_serial_number>:
200701d0:	3030 3030 3030 3030 3030 3030 4544 4441     000000000000DEAD
200701e0:	4542 4645 0000 0000 0000 0000 0000 0000     BEEF............
200701f0:	0000 0000                                   ....

200701f4 <USER_TWI_PACKET>:
200701f4:	0000 0000 0001 0000 0000 0000 0000 0000     ................
20070204:	0000 0000                                   ....

20070208 <last_power_state.0>:
20070208:	0001 0000                                   ....

2007020c <MS_BOS_PACKET>:
2007020c:	0f05 0021 1c01 0510 df00 dd60 89d8 c745     ..!.......`...E.
2007021c:	9c4c 65d2 9e9d 8a64 009f 0300 4a06 0101     L..e..d......J..
2007022c:	0000 0000                                   ....

20070230 <MS_OS_DESC>:
20070230:	000a 0000 0000 0603 014a 0008 0002 0000     ........J.......
20070240:	00a0 0014 0003 4957 554e 4253 0000 0000     ......WINUSB....
20070250:	0000 0000 0000 0084 0004 0007 002a 0044     ............*.D.
20070260:	0065 0076 0069 0063 0065 0049 006e 0074     e.v.i.c.e.I.n.t.
20070270:	0065 0072 0066 0061 0063 0065 0047 0055     e.r.f.a.c.e.G.U.
20070280:	0049 0044 0073 0000 0050 007b 0030 0041     I.D.s...P.{.0.A.
20070290:	0043 0045 0032 0042 0033 0045 002d 0032     C.E.2.B.3.E.-.2.
200702a0:	0042 0033 0045 002d 0032 0042 0033 0045     B.3.E.-.2.B.3.E.
200702b0:	002d 0032 0042 0033 0045 002d 0034 0033     -.2.B.3.E.-.4.3.
200702c0:	0034 0030 0030 0041 0043 0045 0032 0042     4.0.0.A.C.E.2.B.
200702d0:	0033 0045 007d 0000 0000 0008 0002 0001     3.E.}...........
200702e0:	00a0 0014 0003 4957 554e 4253 0000 0000     ......WINUSB....
200702f0:	0000 0000 0000 0084 0004 0007 002a 0044     ............*.D.
20070300:	0065 0076 0069 0063 0065 0049 006e 0074     e.v.i.c.e.I.n.t.
20070310:	0065 0072 0066 0061 0063 0065 0047 0055     e.r.f.a.c.e.G.U.
20070320:	0049 0044 0073 0000 0050 007b 0031 0041     I.D.s...P.{.1.A.
20070330:	0043 0045 0032 0042 0033 0045 002d 0032     C.E.2.B.3.E.-.2.
20070340:	0042 0033 0045 002d 0032 0042 0033 0045     B.3.E.-.2.B.3.E.
20070350:	002d 0032 0042 0033 0045 002d 0034 0033     -.2.B.3.E.-.4.3.
20070360:	0034 0030 0031 0041 0043 0045 0032 0042     4.0.1.A.C.E.2.B.
20070370:	0033 0045 007d 0000 0000 0000               3.E.}.......

2007037c <udc_string_desc>:
2007037c:	0300 0000 0000 0000 0000 0000 0000 0000     ................
2007038c:	0000 0000 0000 0000 0000 0000 0000 0000     ................
2007039c:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200703ac:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200703bc:	0000 0000                                   ....

200703c0 <udc_string_desc_languageid>:
200703c0:	0304 0409                                   ....

200703c4 <udc_string_manufacturer_name>:
200703c4:	654e 4177 2045 6554 6863 6f6e 6f6c 7967     NewAE Technology
200703d4:	4920 636e 002e 0000                          Inc....

200703dc <udc_string_product_name>:
200703dc:	6843 7069 6857 7369 6570 6572 2072 5743     ChipWhisperer CW
200703ec:	3433 2030 202d 754c 616e 4220 616f 6472     340 - Luna Board
200703fc:	                                             .

200703fd <main_b_vendor_enable>:
200703fd:	0001                                         ...

20070400 <usart0_driver>:
20070400:	8000 4009 0000 0000 0000 0000 0000 0000     ...@............
20070410:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070420:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070430:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070440:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070450:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070460:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070470:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070480:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070490:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704a0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704b0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704c0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704d0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704e0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200704f0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070500:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070510:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070520:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070530:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070540:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070550:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070560:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070570:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070580:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070590:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705a0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705b0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705c0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705d0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705e0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200705f0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070600:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070610:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070620:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070630:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070640:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070650:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070660:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070670:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070680:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070690:	0000 0000 0000 0000 0000 0000 0009 0000     ................

200706a0 <usart1_driver>:
200706a0:	c000 4009 0000 0000 0000 0000 0000 0000     ...@............
200706b0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200706c0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200706d0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200706e0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200706f0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070700:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070710:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070720:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070730:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070740:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070750:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070760:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070770:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070780:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070790:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707a0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707b0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707c0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707d0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707e0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200707f0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070800:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070810:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070820:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070830:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070840:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070850:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070860:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070870:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070880:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070890:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708a0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708b0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708c0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708d0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708e0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200708f0:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070900:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070910:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070920:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070930:	0000 0000 0000 0000 0001 0000 0009 0000     ................

20070940 <vccint_setting>:
20070940:	03e8 0000                                   ....

20070944 <xram>:
20070944:	0000 6000                                   ...`

20070948 <SystemCoreClock>:
20070948:	0900 003d                                   ..=.

2007094c <udi_api_vendor>:
2007094c:	362d 0008 35e9 0008 35fd 0008 35dd 0008     -6...5...5...5..
2007095c:	0000 0000                                   ....

20070960 <udc_config>:
20070960:	0ad0 2007 0980 2007 0ad0 2007 0ae4 2007     ... ... ... ... 
20070970:	0978 2007 0000 0000                         x.. ....

20070978 <udc_config_hs>:
20070978:	0a2c 2007 0af0 2007                         ,.. ... 

20070980 <udc_config_lsfs>:
20070980:	0988 2007 0af0 2007                         ... ... 

20070988 <udc_desc_fs>:
20070988:	0209 00a4 0105 8000 09fa 0004 0200 ffff     ................
20070998:	00ff 0507 0281 0040 0700 0205 4002 0000     ......@......@..
200709a8:	0b08 0201 0202 0000 0409 0001 0201 0002     ................
200709b8:	0500 0024 0110 2404 0202 2405 0106 0502     ..$....$...$....
200709c8:	0124 0203 0507 0387 0040 0910 0204 0200     $.......@.......
200709d8:	000a 0000 0507 0283 0040 0700 0405 4002     ........@......@
200709e8:	0000 0b08 0203 0202 0000 0409 0003 0201     ................
200709f8:	0002 0500 0024 0110 2404 0202 2405 0306     ....$....$...$..
20070a08:	0504 0124 0403 0507 0388 0040 0910 0404     ..$.......@.....
20070a18:	0200 000a 0000 0507 0285 0040 0700 0605     ..........@.....
20070a28:	4002 0000                                   .@..

20070a2c <udc_desc_hs>:
20070a2c:	0209 00a4 0105 8000 09fa 0004 0200 ffff     ................
20070a3c:	00ff 0507 0281 0200 0700 0205 0002 0002     ................
20070a4c:	0b08 0201 0202 0000 0409 0001 0201 0002     ................
20070a5c:	0500 0024 0110 2404 0202 2405 0106 0502     ..$....$...$....
20070a6c:	0124 0203 0507 0387 0040 0910 0204 0200     $.......@.......
20070a7c:	000a 0000 0507 0283 0200 0700 0405 0002     ................
20070a8c:	0002 0b08 0203 0202 0000 0409 0003 0201     ................
20070a9c:	0002 0500 0024 0110 2404 0202 2405 0306     ....$....$...$..
20070aac:	0504 0124 0403 0507 0388 0040 0910 0404     ..$.......@.....
20070abc:	0200 000a 0000 0507 0285 0200 0700 0605     ................
20070acc:	0002 0002                                   ....

20070ad0 <udc_device_desc>:
20070ad0:	0112 0200 0000 4000 2b3e c340 0900 0201     .......@>+@.....
20070ae0:	0103 0000                                   ....

20070ae4 <udc_device_qual>:
20070ae4:	060a 0200 0000 4000 0001 0000               .......@....

20070af0 <udi_apis>:
20070af0:	094c 2007 0b08 2007 0b1c 2007 0b08 2007     L.. ... ... ... 
20070b00:	0b1c 2007                                   ... 

20070b04 <g_interrupt_enabled>:
20070b04:	0001 0000                                   ....

20070b08 <udi_api_cdc_comm>:
20070b08:	55ed 0008 551d 0008 552d 0008 55c1 0008     .U...U..-U...U..
20070b18:	0000 0000                                   ....

20070b1c <udi_api_cdc_data>:
20070b1c:	598d 0008 5681 0008 55bd 0008 55c1 0008     .Y...V...U...U..
20070b2c:	585d 0008                                   ]X..

20070b30 <_impure_ptr>:
20070b30:	0b38 2007 0000 0000                         8.. ....

20070b38 <impure_data>:
20070b38:	0000 0000 0e24 2007 0e8c 2007 0ef4 2007     ....$.. ... ... 
20070b48:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070b58:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070b68:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070b78:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070b88:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070b98:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ba8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070bb8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070bc8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070bd8:	0000 0000 0000 0000 0001 0000 0000 0000     ................
20070be8:	330e abcd 1234 e66d deec 0005 000b 0000     .3..4.m.........
20070bf8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c08:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c18:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c28:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c38:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c48:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c58:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c68:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c78:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c88:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070c98:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ca8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070cb8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070cc8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070cd8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ce8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070cf8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d08:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d18:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d28:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d38:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d48:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d58:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d68:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d78:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d88:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070d98:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070da8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070db8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070dc8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070dd8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070de8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070df8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e08:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e18:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e28:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e38:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e48:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e58:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e68:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e78:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e88:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070e98:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ea8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070eb8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ec8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ed8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ee8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070ef8:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f08:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f18:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f28:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f38:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f48:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20070f58:	0000 0000 0000 0000                         ........

20070f60 <__atexit_recursive_mutex>:
20070f60:	3310 2007                                   .3. 

20070f64 <__malloc_av_>:
20070f64:	0000 0000 0000 0000 0f64 2007 0f64 2007     ........d.. d.. 
20070f74:	0f6c 2007 0f6c 2007 0f74 2007 0f74 2007     l.. l.. t.. t.. 
20070f84:	0f7c 2007 0f7c 2007 0f84 2007 0f84 2007     |.. |.. ... ... 
20070f94:	0f8c 2007 0f8c 2007 0f94 2007 0f94 2007     ... ... ... ... 
20070fa4:	0f9c 2007 0f9c 2007 0fa4 2007 0fa4 2007     ... ... ... ... 
20070fb4:	0fac 2007 0fac 2007 0fb4 2007 0fb4 2007     ... ... ... ... 
20070fc4:	0fbc 2007 0fbc 2007 0fc4 2007 0fc4 2007     ... ... ... ... 
20070fd4:	0fcc 2007 0fcc 2007 0fd4 2007 0fd4 2007     ... ... ... ... 
20070fe4:	0fdc 2007 0fdc 2007 0fe4 2007 0fe4 2007     ... ... ... ... 
20070ff4:	0fec 2007 0fec 2007 0ff4 2007 0ff4 2007     ... ... ... ... 
20071004:	0ffc 2007 0ffc 2007 1004 2007 1004 2007     ... ... ... ... 
20071014:	100c 2007 100c 2007 1014 2007 1014 2007     ... ... ... ... 
20071024:	101c 2007 101c 2007 1024 2007 1024 2007     ... ... $.. $.. 
20071034:	102c 2007 102c 2007 1034 2007 1034 2007     ,.. ,.. 4.. 4.. 
20071044:	103c 2007 103c 2007 1044 2007 1044 2007     <.. <.. D.. D.. 
20071054:	104c 2007 104c 2007 1054 2007 1054 2007     L.. L.. T.. T.. 
20071064:	105c 2007 105c 2007 1064 2007 1064 2007     \.. \.. d.. d.. 
20071074:	106c 2007 106c 2007 1074 2007 1074 2007     l.. l.. t.. t.. 
20071084:	107c 2007 107c 2007 1084 2007 1084 2007     |.. |.. ... ... 
20071094:	108c 2007 108c 2007 1094 2007 1094 2007     ... ... ... ... 
200710a4:	109c 2007 109c 2007 10a4 2007 10a4 2007     ... ... ... ... 
200710b4:	10ac 2007 10ac 2007 10b4 2007 10b4 2007     ... ... ... ... 
200710c4:	10bc 2007 10bc 2007 10c4 2007 10c4 2007     ... ... ... ... 
200710d4:	10cc 2007 10cc 2007 10d4 2007 10d4 2007     ... ... ... ... 
200710e4:	10dc 2007 10dc 2007 10e4 2007 10e4 2007     ... ... ... ... 
200710f4:	10ec 2007 10ec 2007 10f4 2007 10f4 2007     ... ... ... ... 
20071104:	10fc 2007 10fc 2007 1104 2007 1104 2007     ... ... ... ... 
20071114:	110c 2007 110c 2007 1114 2007 1114 2007     ... ... ... ... 
20071124:	111c 2007 111c 2007 1124 2007 1124 2007     ... ... $.. $.. 
20071134:	112c 2007 112c 2007 1134 2007 1134 2007     ,.. ,.. 4.. 4.. 
20071144:	113c 2007 113c 2007 1144 2007 1144 2007     <.. <.. D.. D.. 
20071154:	114c 2007 114c 2007 1154 2007 1154 2007     L.. L.. T.. T.. 
20071164:	115c 2007 115c 2007 1164 2007 1164 2007     \.. \.. d.. d.. 
20071174:	116c 2007 116c 2007 1174 2007 1174 2007     l.. l.. t.. t.. 
20071184:	117c 2007 117c 2007 1184 2007 1184 2007     |.. |.. ... ... 
20071194:	118c 2007 118c 2007 1194 2007 1194 2007     ... ... ... ... 
200711a4:	119c 2007 119c 2007 11a4 2007 11a4 2007     ... ... ... ... 
200711b4:	11ac 2007 11ac 2007 11b4 2007 11b4 2007     ... ... ... ... 
200711c4:	11bc 2007 11bc 2007 11c4 2007 11c4 2007     ... ... ... ... 
200711d4:	11cc 2007 11cc 2007 11d4 2007 11d4 2007     ... ... ... ... 
200711e4:	11dc 2007 11dc 2007 11e4 2007 11e4 2007     ... ... ... ... 
200711f4:	11ec 2007 11ec 2007 11f4 2007 11f4 2007     ... ... ... ... 
20071204:	11fc 2007 11fc 2007 1204 2007 1204 2007     ... ... ... ... 
20071214:	120c 2007 120c 2007 1214 2007 1214 2007     ... ... ... ... 
20071224:	121c 2007 121c 2007 1224 2007 1224 2007     ... ... $.. $.. 
20071234:	122c 2007 122c 2007 1234 2007 1234 2007     ,.. ,.. 4.. 4.. 
20071244:	123c 2007 123c 2007 1244 2007 1244 2007     <.. <.. D.. D.. 
20071254:	124c 2007 124c 2007 1254 2007 1254 2007     L.. L.. T.. T.. 
20071264:	125c 2007 125c 2007 1264 2007 1264 2007     \.. \.. d.. d.. 
20071274:	126c 2007 126c 2007 1274 2007 1274 2007     l.. l.. t.. t.. 
20071284:	127c 2007 127c 2007 1284 2007 1284 2007     |.. |.. ... ... 
20071294:	128c 2007 128c 2007 1294 2007 1294 2007     ... ... ... ... 
200712a4:	129c 2007 129c 2007 12a4 2007 12a4 2007     ... ... ... ... 
200712b4:	12ac 2007 12ac 2007 12b4 2007 12b4 2007     ... ... ... ... 
200712c4:	12bc 2007 12bc 2007 12c4 2007 12c4 2007     ... ... ... ... 
200712d4:	12cc 2007 12cc 2007 12d4 2007 12d4 2007     ... ... ... ... 
200712e4:	12dc 2007 12dc 2007 12e4 2007 12e4 2007     ... ... ... ... 
200712f4:	12ec 2007 12ec 2007 12f4 2007 12f4 2007     ... ... ... ... 
20071304:	12fc 2007 12fc 2007 1304 2007 1304 2007     ... ... ... ... 
20071314:	130c 2007 130c 2007 1314 2007 1314 2007     ... ... ... ... 
20071324:	131c 2007 131c 2007 1324 2007 1324 2007     ... ... $.. $.. 
20071334:	132c 2007 132c 2007 1334 2007 1334 2007     ,.. ,.. 4.. 4.. 
20071344:	133c 2007 133c 2007 1344 2007 1344 2007     <.. <.. D.. D.. 
20071354:	134c 2007 134c 2007 1354 2007 1354 2007     L.. L.. T.. T.. 
20071364:	135c 2007 135c 2007                         \.. \.. 

2007136c <__malloc_sbrk_base>:
2007136c:	ffff ffff                                   ....

20071370 <__malloc_trim_threshold>:
20071370:	0000 0002                                   ....

20071374 <__global_locale>:
20071374:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
20071384:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071394:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
200713a4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200713b4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
200713c4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200713d4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
200713e4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200713f4:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
20071404:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071414:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
20071424:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071434:	0043 0000 0000 0000 0000 0000 0000 0000     C...............
20071444:	0000 0000 0000 0000 0000 0000 0000 0000     ................
20071454:	b239 0008 9ea5 0008 0000 0000 ce54 0008     9...........T...
20071464:	ce30 0008 cdf0 0008 cdf0 0008 cdf0 0008     0...............
20071474:	cdf0 0008 cdf0 0008 cdf0 0008 cdf0 0008     ................
20071484:	cdf0 0008 cdf0 0008 ffff ffff ffff ffff     ................
20071494:	ffff ffff ffff 0000 0001 5341 4943 0049     ..........ASCII.
200714a4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200714b4:	0000 0000 0000 0000 0000 5341 4943 0049     ..........ASCII.
200714c4:	0000 0000 0000 0000 0000 0000 0000 0000     ................
200714d4:	0000 0000 0000 0000 0000 0000               ............
